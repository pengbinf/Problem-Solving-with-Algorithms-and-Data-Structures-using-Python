{"compress":true,"commitItems":[["d572ce21-a314-478f-89ee-b1cff8d0f192",1528082186934,"",[[1528082160845,["Re@Re.local",[[1,0,"## 7.1 目标 ##"]],[0,0],[12,12]]],[1528082161017,["Re@Re.local",[[1,12,"\n\n"]],[12,12],[13,13]]],[1528082161537,["Re@Re.local",[[1,14,"\n"]],[13,13],[14,14]]],[1528082170424,["Re@Re.local",[[-1,14,"\n"],[1,15,"- 学习图的该奶奶及"]],[14,14],[24,24]]],[1528082171055,["Re@Re.local",[[-1,20,"该奶奶及"]],[24,24],[20,20]]],[1528082174442,["Re@Re.local",[[1,20,"概念和使用方式。"]],[20,20],[28,28]]],[1528082174834,["Re@Re.local",[[1,28,"\n\n"]],[28,28],[29,29]]],[1528082180868,["Re@Re.local",[[-1,29,"\n"],[1,30,"- 通过多种内置"]],[29,29],[37,37]]],[1528082191157,["Re@Re.local",[[-1,31,"通过多种内置"]],[37,37],[31,31]]],[1528082204930,["Re@Re.local",[[1,31,"以多种方式实现抽象数据类型Gragh。"]],[31,31],[50,50]]],[1528082205194,["Re@Re.local",[[1,50,"\n\n"]],[50,50],[51,51]]],[1528082224628,["Re@Re.local",[[-1,51,"\n"],[1,52,"- 了解图在解决多种问题时的应用。"]],[51,51],[68,68]]],[1528082224942,["Re@Re.local",[[1,68,"\n\n"]],[68,68],[69,69]]],[1528082225142,["Re@Re.local",[[1,70,"\n"]],[69,69],[70,70]]],[1528082238649,["Re@Re.local",[[-1,70,"\n"],[1,71,"本章研究图像。图像时比"]],[70,70],[81,81]]],[1528082239118,["Re@Re.local",[[-1,79,"时比"]],[81,81],[79,79]]],[1528082246386,["Re@Re.local",[[1,79,"是比上一章学习的"]],[79,79],[87,87]]],[1528082263686,["Re@Re.local",[[1,87,"树更加通用的结构，实际上可以认为树是一种特殊的图"]],[87,87],[111,111]]],[1528082264738,["Re@Re.local",[[-1,105,"一种特殊的图"]],[111,111],[105,105]]],[1528082272402,["Re@Re.local",[[1,105,"一种特殊的图像。图像也有"]],[105,105],[117,117]]],[1528082273049,["Re@Re.local",[[-1,115,"也有"]],[117,117],[115,115]]],[1528082278856,["Re@Re.local",[[1,115,"也可以用来表示很多东西，"]],[115,115],[127,127]]],[1528082280199,["Re@Re.local",[[-1,126,"，"]],[127,127],[126,126]]],[1528082284542,["Re@Re.local",[[1,122,"真是"]],[122,122],[124,124]]],[1528082285097,["Re@Re.local",[[-1,122,"真是"]],[124,124],[122,122]]],[1528082288423,["Re@Re.local",[[1,122,"真实世界中的"]],[122,122],[128,128]]],[1528082302511,["Re@Re.local",[[1,132,"，比如公路系统，航线系统，网路系统"]],[132,132],[149,149]]],[1528082330106,["Re@Re.local",[[1,149,"甚至是完成计算机科学学位所必须的课程序列。"]],[149,149],[170,170]]],[1528082331140,["Re@Re.local",[[1,170,"\n\n"]],[170,170],[171,171]]],[1528082331586,["Re@Re.local",[[-1,171,"\n"]],[171,171],[170,170]]],[1528082340457,["Re@Re.local",[[1,170,"本章将给出"]],[170,170],[175,175]]],[1528082347060,["Re@Re.local",[[-1,172,"将给出"]],[175,175],[172,172]]],[1528082362957,["Re@Re.local",[[1,172,"读者会看到，一旦给某个问题以正确的比啊"]],[172,172],[191,191]]],[1528082363960,["Re@Re.local",[[-1,186,"正确的比啊"]],[191,191],[186,186]]],[1528082365875,["Re@Re.local",[[1,186,"合适的"]],[186,186],[189,189]]],[1528082366421,["Re@Re.local",[[-1,186,"合适的"]],[189,189],[186,186]]],[1528082371370,["Re@Re.local",[[1,186,"合适的表示，李"]],[186,186],[193,193]]],[1528082371473,["Re@Re.local",[[-1,192,"李"]],[193,193],[192,192]]],[1528082391221,["Re@Re.local",[[1,192,"利用一些图像算法便可以轻松将看起来很困难的方法"]],[192,192],[215,215]]],[1528082391807,["Re@Re.local",[[-1,213,"方法"]],[215,215],[213,213]]],[1528082393504,["Re@Re.local",[[1,213,"方法解"]],[213,213],[216,216]]],[1528082394521,["Re@Re.local",[[-1,213,"方法解"]],[216,216],[213,213]]],[1528082396693,["Re@Re.local",[[1,213,"问题解决。"]],[213,213],[218,218]]],[1528082420923,["Re@Re.local",[[1,219,"\n"]],[218,218],[219,219]]],[1528082421269,["Re@Re.local",[[1,220,"\n"]],[219,219],[220,220]]],[1528082446313,["Re@Re.local",[[-1,220,"\n"],[1,221,"对人类来说，看懂"]],[220,220],[228,228]]],[1528082448124,["Re@Re.local",[[-1,226,"看懂"]],[228,228],[226,226]]],[1528082458361,["Re@Re.local",[[1,226,"看懂道路地图并理解不同地方"]],[226,226],[239,239]]],[1528082460246,["Re@Re.local",[[-1,237,"地方"]],[239,239],[237,237]]],[1528082484453,["Re@Re.local",[[1,237,"地点自建的"]],[237,237],[242,242]]],[1528082485105,["Re@Re.local",[[-1,239,"自建的"]],[242,242],[239,239]]],[1528082486859,["Re@Re.local",[[1,239,"之间的"]],[239,239],[242,242]]],[1528082503581,["Re@Re.local",[[1,242,"关系并不困难，但是计算机是缺乏这俄中"]],[242,242],[260,260]]],[1528082505000,["Re@Re.local",[[-1,254,"是缺乏这俄中"]],[260,260],[254,254]]],[1528082510322,["Re@Re.local",[[1,254,"并没有这种能力。然而"]],[254,254],[264,264]]],[1528082512082,["Re@Re.local",[[-1,261,"。然而"]],[264,264],[261,261]]],[1528082528750,["Re@Re.local",[[1,261,"。然而，可以将道路系统看作是1个图像。当"]],[261,261],[281,281]]],[1528082533886,["Re@Re.local",[[-1,279,"。当"]],[281,281],[279,279]]],[1528082546178,["Re@Re.local",[[1,279,"，如此一来便可以让计算机做一些有趣的事情了。"]],[279,279],[301,301]]],[1528082567602,["Re@Re.local",[[1,301,"如果"]],[301,301],[303,303]]],[1528082568144,["Re@Re.local",[[-1,301,"如果"]],[303,303],[301,301]]],[1528082571485,["Re@Re.local",[[1,301,"就像"]],[301,301],[303,303]]],[1528082571976,["Re@Re.local",[[-1,301,"就像"]],[303,303],[301,301]]],[1528082574637,["Re@Re.local",[[1,301,"比如在地图"]],[301,301],[306,306]]],[1528082577081,["Re@Re.local",[[-1,304,"地图"]],[306,306],[304,304]]],[1528082578766,["Re@Re.local",[[1,304,"沪两旺"]],[304,304],[307,307]]],[1528082579803,["Re@Re.local",[[-1,304,"沪两旺"]],[307,307],[304,304]]],[1528082588950,["Re@Re.local",[[1,304,"互联网地图中，计算机可以咋"]],[304,304],[317,317]]],[1528082588994,["Re@Re.local",[[-1,316,"咋"]],[317,317],[316,316]]],[1528082595496,["Re@Re.local",[[1,316,"找到最近、最快或者"]],[316,316],[325,325]]],[1528082605024,["Re@Re.local",[[1,318,"从某个地方到另一个地方的"]],[318,318],[330,330]]],[1528082617367,["Re@Re.local",[[1,337,"最简单的路线。"]],[337,337],[344,344]]],[1528082618081,["Re@Re.local",[[1,344,"\n\n"]],[344,344],[345,345]]],[1528082618300,["Re@Re.local",[[1,346,"\n"]],[345,345],[346,346]]],[1528082624519,["Re@Re.local",[[-1,346,"\n"],[1,347,"作为计算机可续"]],[346,346],[353,353]]],[1528082625555,["Re@Re.local",[[-1,351,"可续"]],[353,353],[351,351]]],[1528082636471,["Re@Re.local",[[1,351,"科学的学生，读者可能可能对"]],[351,351],[364,364]]],[1528082644465,["Re@Re.local",[[-1,361,"可能对"]],[364,364],[361,361]]],[1528082658962,["Re@Re.local",[[1,361,"对获得学位所需要的课程比较感兴趣，"]],[361,361],[378,378]]],[1528082659691,["Re@Re.local",[[-1,377,"，"]],[378,378],[377,377]]],[1528082662338,["Re@Re.local",[[1,377,"。图像"]],[377,377],[380,380]]],[1528082679937,["Re@Re.local",[[1,380,"是表达表达"]],[380,380],[385,385]]],[1528082681160,["Re@Re.local",[[-1,383,"表达"]],[385,385],[383,383]]],[1528082685596,["Re@Re.local",[[1,383,"可乘之机"]],[383,383],[387,387]]],[1528082687694,["Re@Re.local",[[-1,383,"可乘之机"]],[387,387],[383,383]]],[1528082692781,["Re@Re.local",[[1,383,"课程之间的以来"]],[383,383],[390,390]]],[1528082693848,["Re@Re.local",[[-1,388,"以来"]],[390,390],[388,388]]],[1528082696560,["Re@Re.local",[[1,388,"依赖关系的"]],[388,388],[393,393]]],[1528082700426,["Re@Re.local",[[-1,392,"的"]],[393,393],[392,392]]],[1528082701230,["Re@Re.local",[[1,392,"。"]],[392,392],[393,393]]],[1528082703484,["Re@Re.local",[[1,381,"、"]],[381,381],[382,382]]],[1528082704390,["Re@Re.local",[[-1,380,"是、"]],[382,382],[380,380]]],[1528082707659,["Re@Re.local",[[1,380,"可以很好地"]],[380,380],[385,385]]],[1528082714255,["Re@Re.local",[[1,397,"图1给出了另一"]],[397,397],[404,404]]],[1528082714415,["Re@Re.local",[[-1,403,"一"]],[404,404],[403,403]]],[1528082721296,["Re@Re.local",[[1,403,"1个图像，该图像呆逼啊跑"]],[403,403],[415,415]]],[1528082722299,["Re@Re.local",[[-1,411,"呆逼啊跑"]],[415,415],[411,411]]],[1528082734762,["Re@Re.local",[[-1,397,"图1给出了另1个图像，该图像"]],[411,411],[397,397]]],[1528082738473,["Re@Re.local",[[1,397,"图1便是1个例子。"]],[397,397],[406,406]]],[1528082738793,["Re@Re.local",[[1,406,"\n\n"]],[406,406],[407,407]]],[1528082738992,["Re@Re.local",[[1,408,"\n"]],[407,407],[408,408]]],[1528082742270,["Re@Re.local",[[1,408,"![../_images/CS-Prereqs.png](http://interactivepython.org/courselib/static/pythonds/_images/CS-Prereqs.png)"]],[408,408],[515,515]]],[1528082742865,["Re@Re.local",[[1,516,"\n"]],[515,515],[516,516]]],[1528082743071,["Re@Re.local",[[1,517,"\n"]],[516,516],[517,517]]],[1528082756262,["Re@Re.local",[[-1,517,"\n"],[1,518,"## 7.2 术语和定义 ##"]],[517,517],[532,532]]],[1528082756403,["Re@Re.local",[[1,532,"\n\n"]],[532,532],[533,533]]],[1528082762993,["Re@Re.local",[[1,534,"\n"]],[533,533],[534,534]]],[1528082764445,["Re@Re.local",[[-1,534,"\n"],[1,535,"现在"]],[534,534],[536,536]]],[1528082766885,["Re@Re.local",[[-1,534,"现在"]],[536,536],[534,534]]],[1528082778077,["Re@Re.local",[[1,534,"\n\n"]],[534,534],[535,535]]],[1528082780157,["Re@Re.local",[[-1,535,"\n"],[1,536,"**"]],[535,535],[537,537]]],[1528082790233,["Re@Re.local",[[1,537," "]],[537,537],[538,538]]],[1528082810585,["Re@Re.local",[[-1,537," "],[1,538," 定点"]],[538,538],[540,540]]],[1528082811547,["Re@Re.local",[[-1,538,"定点"]],[540,540],[538,538]]],[1528082812788,["Re@Re.local",[[1,538,"丁点"]],[538,538],[540,540]]],[1528082813257,["Re@Re.local",[[-1,538,"丁点"]],[540,540],[538,538]]],[1528082818348,["Re@Re.local",[[1,538,"顶点（vertex） **"]],[538,538],[551,551]]],[1528082819849,["Re@Re.local",[[-1,547,"） **"]],[551,551],[547,547]]],[1528082820302,["Re@Re.local",[[1,547,"*"]],[547,547],[548,548]]],[1528082821031,["Re@Re.local",[[-1,547,"*"]],[548,548],[547,547]]],[1528082822104,["Re@Re.local",[[1,547,"）**"]],[547,547],[550,550]]],[1528082824021,["Re@Re.local",[[-1,537," "]],[538,538],[537,537]]],[1528082826836,["Re@Re.local",[[1,549,"\n\n"]],[549,549],[550,550]]],[1528082834278,["Re@Re.local",[[-1,550,"\n"],[1,551,"顶点（也称为节点（"]],[550,550],[559,559]]],[1528082834763,["Re@Re.local",[[-1,558,"（"]],[559,559],[558,558]]],[1528082835583,["Re@Re.local",[[1,558,"no"]],[558,558],[560,560]]],[1528082836039,["Re@Re.local",[[-1,558,"no"]],[560,560],[558,558]]],[1528082843742,["Re@Re.local",[[1,558,"**node**）是图像额"]],[558,558],[571,571]]],[1528082845975,["Re@Re.local",[[-1,570,"额"]],[571,571],[570,570]]],[1528082846730,["Re@Re.local",[[1,570,"的"]],[570,570],[571,571]]],[1528082847567,["Re@Re.local",[[1,571,"基本"]],[571,571],[573,573]]],[1528082847871,["Re@Re.local",[[-1,571,"基本"]],[573,573],[571,571]]],[1528082860519,["Re@Re.local",[[1,571,"基础构件。它可以有1"]],[571,571],[581,581]]],[1528082860835,["Re@Re.local",[[-1,580,"1"]],[581,581],[580,580]]],[1528082890628,["Re@Re.local",[[1,580,"名称，即键。顶点也可以有其它额外信息，即负载。"]],[580,580],[603,603]]],[1528082890959,["Re@Re.local",[[1,603,"\n\n"]],[603,603],[604,604]]],[1528082894689,["Re@Re.local",[[-1,604,"\n"],[1,605,"**便"]],[604,604],[607,607]]],[1528082895040,["Re@Re.local",[[-1,606,"便"]],[607,607],[606,606]]],[1528082899331,["Re@Re.local",[[1,606,"边（Edge）**"]],[606,606],[615,615]]],[1528082899612,["Re@Re.local",[[1,615,"\n\n"]],[615,615],[616,616]]],[1528082902683,["Re@Re.local",[[-1,616,"\n"],[1,617,"边（"]],[616,616],[618,618]]],[1528082905677,["Re@Re.local",[[-1,617,"（"]],[618,618],[617,617]]],[1528082908530,["Re@Re.local",[[1,617,"也是"]],[617,617],[619,619]]],[1528082909144,["Re@Re.local",[[-1,617,"也是"]],[619,619],[617,617]]],[1528082923838,["Re@Re.local",[[1,617,"有时也被称为弧（arc），是图像的"]],[617,617],[634,634]]],[1528082924986,["Re@Re.local",[[-1,631,"图像的"]],[634,634],[631,631]]],[1528082928765,["Re@Re.local",[[1,631,"图像的另一个"]],[631,631],[637,637]]],[1528082929837,["Re@Re.local",[[-1,636,"个"]],[637,637],[636,636]]],[1528082939509,["Re@Re.local",[[1,636,"种基础构件。边将亮点"]],[636,636],[646,646]]],[1528082939780,["Re@Re.local",[[-1,644,"亮点"]],[646,646],[644,644]]],[1528082948280,["Re@Re.local",[[1,644,"2个顶点连接起来并"]],[644,644],[653,653]]],[1528082949724,["Re@Re.local",[[-1,652,"并"]],[653,653],[652,652]]],[1528082953049,["Re@Re.local",[[1,652,"以表示这两者"]],[652,652],[658,658]]],[1528082953426,["Re@Re.local",[[-1,656,"两者"]],[658,658],[656,656]]],[1528082956476,["Re@Re.local",[[1,656,"2者之间的"]],[656,656],[661,661]]],[1528082956633,["Re@Re.local",[[-1,660,"的"]],[661,661],[660,660]]],[1528082963567,["Re@Re.local",[[1,660,"存在某种关系。边"]],[660,660],[668,668]]],[1528082972912,["Re@Re.local",[[1,668,"可以是安详"]],[668,668],[673,673]]],[1528082973215,["Re@Re.local",[[-1,671,"安详"]],[673,673],[671,671]]],[1528082976769,["Re@Re.local",[[1,671,"单向的也可以双"]],[671,671],[678,678]]],[1528082976991,["Re@Re.local",[[-1,677,"双"]],[678,678],[677,677]]],[1528083024891,["Re@Re.local",[[1,677,"是双向的。当图中"]],[677,677],[685,685]]],[1528083025560,["Re@Re.local",[[-1,683,"图中"]],[685,685],[683,683]]],[1528083027007,["Re@Re.local",[[1,683,"某个"]],[683,683],[685,685]]],[1528083039595,["Re@Re.local",[[1,685,"图像中的所有边都是单向的时候，边"]],[685,685],[701,701]]],[1528083039887,["Re@Re.local",[[-1,700,"边"]],[701,701],[700,700]]],[1528083053585,["Re@Re.local",[[1,700,"便称该图像是有向图"]],[700,700],[709,709]]],[1528083056649,["Re@Re.local",[[1,706,"**"]],[706,706],[708,708]]],[1528083065315,["Re@Re.local",[[1,711,"（directed gragh）**"]],[710,710],[729,729]]],[1528083071195,["Re@Re.local",[[1,726,"/"]],[726,726],[727,727]]],[1528083073148,["Re@Re.local",[[-1,726,"/"]],[727,727],[726,726]]],[1528083077586,["Re@Re.local",[[1,726,"/digrah"]],[726,726],[733,733]]],[1528083081517,["Re@Re.local",[[1,736,"。"]],[736,736],[737,737]]],[1528083100092,["Re@Re.local",[[1,737,"上"]],[737,737],[738,738]]],[1528083100200,["Re@Re.local",[[-1,737,"上"]],[738,738],[737,737]]],[1528083105586,["Re@Re.local",[[1,737,"上视"]],[737,737],[739,739]]],[1528083106294,["Re@Re.local",[[-1,737,"上视"]],[739,739],[737,737]]],[1528083119001,["Re@Re.local",[[1,737,"上示的课程依赖图像下"]],[737,737],[747,747]]],[1528083119280,["Re@Re.local",[[-1,745,"像下"]],[747,747],[745,745]]],[1528083143548,["Re@Re.local",[[1,745,"显示是有向图，因为必须先完成某些课程后在能继续"]],[745,745],[768,768]]],[1528083144428,["Re@Re.local",[[-1,764,"在能继续"]],[768,768],[764,764]]],[1528083147094,["Re@Re.local",[[1,764,"才能继续其它"]],[764,764],[770,770]]],[1528083150170,["Re@Re.local",[[1,770,"某些课程。"]],[770,770],[775,775]]],[1528083150530,["Re@Re.local",[[1,775,"\n\n"]],[775,775],[776,776]]],[1528083150732,["Re@Re.local",[[1,777,"\n"]],[776,776],[777,777]]],[1528083151830,["Re@Re.local",[[-1,777,"\n"]],[777,777],[776,776]]],[1528083158159,["Re@Re.local",[[-1,776,"\n"],[1,777,"**权重**"]],[776,776],[782,782]]],[1528083160637,["Re@Re.local",[[1,780,"（wi"]],[780,780],[783,783]]],[1528083161446,["Re@Re.local",[[-1,782,"i"]],[783,783],[782,782]]],[1528083162816,["Re@Re.local",[[1,782,"eight）"]],[782,782],[788,788]]],[1528083165069,["Re@Re.local",[[1,790,"\n\n"]],[790,790],[791,791]]],[1528083186903,["Re@Re.local",[[-1,791,"\n"],[1,792,"为了表示从某个顶点到另一个"]],[791,791],[804,804]]],[1528083221987,["Re@Re.local",[[1,804,"定"]],[804,804],[805,805]]],[1528083222330,["Re@Re.local",[[-1,804,"定"]],[805,805],[804,804]]],[1528083227098,["Re@Re.local",[[1,804,"顶点所需的"]],[804,804],[809,809]]],[1528083227920,["Re@Re.local",[[-1,806,"所需的"]],[809,809],[806,806]]],[1528083247323,["Re@Re.local",[[1,806,"所需要额"]],[806,806],[810,810]]],[1528083247602,["Re@Re.local",[[-1,808,"要额"]],[810,810],[808,808]]],[1528083248832,["Re@Re.local",[[1,808,"的待"]],[808,808],[810,810]]],[1528083248990,["Re@Re.local",[[-1,809,"待"]],[810,810],[809,809]]],[1528083259280,["Re@Re.local",[[1,809,"代价，可以对各顶点父"]],[809,809],[819,819]]],[1528083259689,["Re@Re.local",[[-1,817,"点父"]],[819,819],[817,817]]],[1528083260129,["Re@Re.local",[[1,817,"="]],[817,817],[818,818]]],[1528083260943,["Re@Re.local",[[-1,814,"对各顶="]],[818,818],[814,814]]],[1528083266760,["Re@Re.local",[[1,814,"顶点进行赋权（"]],[814,814],[821,821]]],[1528083268826,["Re@Re.local",[[1,818,"**"]],[818,818],[820,820]]],[1528083270255,["Re@Re.local",[[1,822,"**"]],[822,822],[824,824]]],[1528083274418,["Re@Re.local",[[1,822,"（weighted）"]],[822,822],[832,832]]],[1528083292249,["Re@Re.local",[[1,834,"。比如说路线图之间"]],[834,834],[843,843]]],[1528083293576,["Re@Re.local",[[-1,841,"之间"]],[843,843],[841,841]]],[1528091927956,[null,[[-1,841,"（"]],[841,841],[841,841]]],[1528091927957,[null,[[1,841,"（"]],[841,841],[841,841]]],[1528091875613,["Re@Re.local",[[-1,838,"路线"]],[840,840],[838,838]]],[1528091876240,["Re@Re.local",[[1,838,"gn"]],[838,838],[840,840]]],[1528091876751,["Re@Re.local",[[-1,838,"gn"]],[840,840],[838,838]]],[1528091878967,["Re@Re.local",[[1,838,"公路"]],[838,838],[840,840]]],[1528091908470,["Re@Re.local",[[1,841,"中某个城市连接到另一个城市，边上的权重可以表示为两个城市之间的距离。"]],[841,841],[875,875]]],[1528091909109,["Re@Re.local",[[1,875,"\n\n"]],[875,875],[876,876]]],[1528091909322,["Re@Re.local",[[1,877,"\n"]],[876,876],[877,877]]],[1528091910128,["Re@Re.local",[[-1,877,"\n"]],[877,877],[876,876]]],[1528091914844,["Re@Re.local",[[1,877,"\n"]],[876,876],[877,877]]],[1528091921341,["Re@Re.local",[[-1,877,"\n"],[1,878,"有了以上第一"]],[877,877],[883,883]]],[1528091921619,["Re@Re.local",[[-1,881,"第一"]],[883,883],[881,881]]],[1528091922721,["Re@Re.local",[[1,881,"定义"]],[881,881],[883,883]]],[1528091923895,["Re@Re.local",[[-1,881,"定义"]],[883,883],[881,881]]],[1528091987922,[null,[[-1,881,"（"]],[881,881],[881,881]]],[1528091987922,[null,[[1,881,"（"]],[881,881],[881,881]]],[1528091934751,["Re@Re.local",[[1,881,"基本概念，边可以"]],[881,881],[889,889]]],[1528091935257,["Re@Re.local",[[-1,886,"边可以"]],[889,889],[886,886]]],[1528091948027,["Re@Re.local",[[1,886,"便可以来对图像作一定义了。图像是"]],[886,886],[902,902]]],[1528091948780,["Re@Re.local",[[-1,901,"是"]],[902,902],[901,901]]],[1528091986708,["Re@Re.local",[[1,901,"可以表示为G，其中G=(V,E)。对于图像G，V是顶点的集合，E是边的集合。每个边都是一个"]],[901,901],[946,946]]],[1528092048001,[null,[[-1,946,"（"]],[946,946],[946,946]]],[1528092048001,[null,[[1,946,"（"]],[946,946],[946,946]]],[1528091997015,["Re@Re.local",[[1,946,"元组（v,w)，其中w,v"]],[946,946],[959,959]]],[1528092006334,["Re@Re.local",[[-1,954,"其中w,v"]],[959,959],[954,954]]],[1528092015433,["Re@Re.local",[[1,954,"其中$w,v∈V$，"]],[954,954],[964,964]]],[1528092015815,["Re@Re.local",[[-1,963,"，"]],[964,964],[963,963]]],[1528092039898,["Re@Re.local",[[1,963,"。可以向边元组中加入"]],[963,963],[973,973]]],[1528092107952,[null,[[-1,973,"（"]],[973,973],[973,973]]],[1528092107953,[null,[[1,973,"（"]],[973,973],[973,973]]],[1528092065896,["Re@Re.local",[[1,973,"第3个元素来表示权重。它"]],[973,973],[985,985]]],[1528092066208,["Re@Re.local",[[-1,984,"它"]],[985,985],[984,984]]],[1528092086591,["Re@Re.local",[[1,984,"子图s是满足"]],[984,984],[990,990]]],[1528092087015,["Re@Re.local",[[-1,988,"满足"]],[990,990],[988,988]]],[1528092091245,["Re@Re.local",[[1,988,"边"]],[988,988],[989,989]]],[1528092091399,["Re@Re.local",[[-1,988,"边"]],[989,989],[988,988]]],[1528092092099,["Re@Re.local",[[1,988,"定"]],[988,988],[989,989]]],[1528092092174,["Re@Re.local",[[-1,988,"定"]],[989,989],[988,988]]],[1528092094265,["Re@Re.local",[[1,988,"边集合"]],[988,988],[991,991]]],[1528092094653,["Re@Re.local",[[-1,989,"集合"]],[991,991],[989,989]]],[1528092096571,["Re@Re.local",[[1,989,"的集合v和"]],[989,989],[994,994]]],[1528092107022,["Re@Re.local",[[-1,988,"边的集合v和"]],[994,994],[988,988]]],[1528092167937,[null,[[-1,988,"（"]],[988,988],[988,988]]],[1528092167938,[null,[[1,988,"（"]],[988,988],[988,988]]],[1528092111047,["Re@Re.local",[[1,988,"顶点的集合v，"]],[988,988],[995,995]]],[1528092111698,["Re@Re.local",[[-1,994,"，"]],[995,995],[994,994]]],[1528092117264,["Re@Re.local",[[1,994,"和边的集合e的"]],[994,994],[1001,1001]]],[1528092123954,["Re@Re.local",[[-1,988,"顶点的集合v和边的集合e的"]],[1001,1001],[988,988]]],[1528092125698,["Re@Re.local",[[1,988,"顶点"]],[988,988],[990,990]]],[1528092127340,["Re@Re.local",[[-1,988,"顶点"]],[990,990],[988,988]]],[1528092155234,["Re@Re.local",[[1,988,"顶点的集合v和边的集合e的"]],[988,988],[1001,1001]]],[1528092156979,["Re@Re.local",[[-1,1000,"的"]],[1001,1001],[1000,1000]]],[1528092158011,["Re@Re.local",[[1,1000,"，"]],[1000,1000],[1001,1001]]],[1528092227944,[null,[[-1,1001,"（"]],[1001,1001],[1001,1001]]],[1528092227944,[null,[[1,1001,"（"]],[1001,1001],[1001,1001]]],[1528092169871,["Re@Re.local",[[-1,995,"边的集合e，"]],[1001,1001],[995,995]]],[1528092177636,["Re@Re.local",[[1,995,"边的集合e，并"]],[995,995],[1002,1002]]],[1528092177736,["Re@Re.local",[[-1,1001,"并"]],[1002,1002],[1001,1001]]],[1528092184972,["Re@Re.local",[[1,1001,"使得$e⊂Ee⊂E and v⊂Vv⊂V."]],[1001,1001],[1022,1022]]],[1528092188669,["Re@Re.local",[[-1,1006,"E"],[-1,1010," and "],[1,1015," and "]],[1007,1007],[1006,1006]]],[1528092190437,["Re@Re.local",[[-1,1004,"e⊂"]],[1006,1006],[1004,1004]]],[1528092196153,["Re@Re.local",[[-1,1007," and v⊂V"]],[1008,1015],[1007,1007]]],[1528092196633,["Re@Re.local",[[1,1007,"q"]],[1007,1007],[1008,1008]]],[1528092196948,["Re@Re.local",[[-1,1007,"q"]],[1008,1008],[1007,1007]]],[1528092198091,["Re@Re.local",[[1,1007,"且"]],[1007,1007],[1008,1008]]],[1528092198985,["Re@Re.local",[[-1,1011,"."]],[1012,1012],[1011,1011]]],[1528092199801,["Re@Re.local",[[1,1011,"¥。"]],[1011,1011],[1013,1013]]],[1528092201042,["Re@Re.local",[[-1,1011,"¥。"]],[1013,1013],[1011,1011]]],[1528092202143,["Re@Re.local",[[1,1011,"$。"]],[1011,1011],[1013,1013]]],[1528092221354,["Re@Re.local",[[1,1013,"\n\n"]],[1013,1013],[1014,1014]]],[1528092221624,["Re@Re.local",[[1,1015,"\n"]],[1014,1014],[1015,1015]]],[1528092287974,[null,[[-1,1016,"（"]],[1016,1016],[1016,1016]]],[1528092287974,[null,[[1,1016,"（"]],[1016,1016],[1016,1016]]],[1528092274988,["Re@Re.local",[[-1,1015,"\n"]],[1016,1016],[1015,1015]]],[1528092275343,["Re@Re.local",[[-1,1014,"\n"],[1,1015,"t"]],[1015,1015],[1014,1015]]],[1528092275669,["Re@Re.local",[[-1,1014,"t"]],[1014,1015],[0,0]]],[1528092275974,["Re@Re.local",[[1,1014,"\n\n"]],[1014,1014],[1015,1015]]],[1528092286662,["Re@Re.local",[[-1,1015,"\n"],[1,1016,"图2给出了另一个简单的例子，1"]],[1015,1015],[1030,1030]]],[1528092287420,["Re@Re.local",[[-1,1029,"1"]],[1030,1030],[1029,1029]]],[1528092347956,[null,[[-1,1029,"（"]],[1029,1029],[1029,1029]]],[1528092347957,[null,[[1,1029,"（"]],[1029,1029],[1029,1029]]],[1528092313472,["Re@Re.local",[[-1,1020,"另一个简单的例子，"]],[1029,1029],[1020,1020]]],[1528092345102,["Re@Re.local",[[1,1020,"1个简单的赋权有向图作为例子。该图像可以"]],[1020,1020],[1040,1040]]],[1528092407957,[null,[[-1,1040,"（"]],[1040,1040],[1040,1040]]],[1528092407957,[null,[[1,1040,"（"]],[1040,1040],[1040,1040]]],[1528092353684,["Re@Re.local",[[1,1040,"用集合严格地 i 奥 hi"]],[1040,1040],[1053,1053]]],[1528092355256,["Re@Re.local",[[-1,1046," i 奥 hi"]],[1053,1053],[1046,1046]]],[1528092357135,["Re@Re.local",[[1,1046,"表示："]],[1046,1046],[1049,1049]]],[1528092357449,["Re@Re.local",[[1,1049,"\n\n"]],[1049,1049],[1050,1050]]],[1528092368711,["Re@Re.local",[[-1,1050,"\n"],[1,1051,"$$ V={V0,V1,V2,V3,V4,V5} $$"]],[1050,1050],[1077,1077]]],[1528092467968,[null,[[-1,1077,"（"]],[1077,1077],[1077,1077]]],[1528092467968,[null,[[1,1077,"（"]],[1077,1077],[1077,1077]]],[1528092451890,["Re@Re.local",[[1,1077,"\n\n"]],[1077,1077],[1078,1078]]],[1528092456114,["Re@Re.local",[[-1,1078,"\n"],[1,1079,"¥¥"]],[1078,1078],[1080,1080]]],[1528092456717,["Re@Re.local",[[-1,1079,"¥"]],[1080,1080],[1079,1079]]],[1528092456901,["Re@Re.local",[[-1,1078,"¥"],[1,1079,"\n"]],[1079,1079],[1078,1078]]],[1528092459811,["Re@Re.local",[[-1,1078,"\n"],[1,1079,"$$$$"]],[1078,1078],[1082,1082]]],[1528092461429,["Re@Re.local",[[1,1080,"E="]],[1080,1080],[1082,1082]]],[1528092527968,[null,[[-1,1084,"（"]],[1084,1084],[1084,1084]]],[1528092527968,[null,[[1,1084,"（"]],[1084,1084],[1084,1084]]],[1528092502402,["Re@Re.local",[[1,1082,"\\left{ \\right}"]],[1082,1082],[1096,1096]]],[1528092504314,["Re@Re.local",[[1,1089," "]],[1089,1089],[1090,1090]]],[1528092520396,["Re@Re.local",[[1,1089,"(v0,v1,5),(v1,v2,4),(v2,v3,9),(v3,v4,7),(v4,v0,1),(v0,v5,2),(v5,v4,8),(v3,v5,3),(v5,v2,1)"]],[1089,1089],[1178,1178]]],[1528092590887,[null,[[-1,1188,"（"]],[1188,1188],[1188,1188]]],[1528092590887,[null,[[1,1188,"（"]],[1188,1188],[1188,1188]]],[1528092536299,["Re@Re.local",[[1,1082," "]],[1082,1082],[1083,1083]]],[1528092547097,["Re@Re.local",[[1,1187," "]],[1187,1187],[1188,1188]]],[1528092549666,["Re@Re.local",[[1,1080," "]],[1080,1080],[1081,1081]]],[1528092772439,[null,[[-1,1191,"（"]],[1191,1191],[1191,1191]]],[1528092772439,[null,[[1,1191,"（"]],[1191,1191],[1191,1191]]],[1528092714014,["Re@Re.local",[[1,1089,"\\"]],[1089,1089],[1090,1090]]],[1528092716069,["Re@Re.local",[[1,1188,"\\"]],[1188,1188],[1189,1189]]],[1528092728885,["Re@Re.local",[[1,1142,"&"]],[1142,1142],[1143,1143]]],[1528092730494,["Re@Re.local",[[-1,1142,"&"]],[1143,1143],[1142,1142]]],[1528092734175,["Re@Re.local",[[1,1132,"&"]],[1132,1132],[1133,1133]]],[1528092736144,["Re@Re.local",[[1,1133,"\n"]],[1133,1133],[1134,1134]]],[1528092737788,["Re@Re.local",[[-1,1133,"\n"]],[1134,1134],[1133,1133]]],[1528092739418,["Re@Re.local",[[-1,1132,"&"]],[1133,1133],[1132,1132]]],[1528092740852,["Re@Re.local",[[1,1193,"\n\n"]],[1193,1193],[1194,1194]]],[1528092745950,["Re@Re.local",[[-1,1194,"\n"],[1,1195,"w"]],[1194,1194],[1195,1195]]],[1528092746299,["Re@Re.local",[[-1,1194,"w"],[1,1195,"\n"]],[1195,1195],[1194,1194]]],[1528092753758,["Re@Re.local",[[1,1194,"![../_images/digraph.png](http://interactivepython.org/courselib/static/pythonds/_images/digraph.png)"]],[1194,1194],[1295,1295]]],[1528092754177,["Re@Re.local",[[1,1296,"\n"]],[1295,1295],[1296,1296]]],[1528092754561,["Re@Re.local",[[1,1297,"\n"]],[1296,1296],[1297,1297]]],[1528092772057,["Re@Re.local",[[-1,1297,"\n"],[1,1298,"图2中的例子演示了另外2个关键的"]],[1297,1297],[1313,1313]]],[1528092772310,["Re@Re.local",[[-1,1312,"的"]],[1313,1313],[1312,1312]]],[1528092832447,[null,[[-1,1312,"（"]],[1312,1312],[1312,1312]]],[1528092832448,[null,[[1,1312,"（"]],[1312,1312],[1312,1312]]],[1528092772675,["Re@Re.local",[[-1,1310,"关键"]],[1312,1312],[1310,1310]]],[1528092773821,["Re@Re.local",[[1,1310,"管"]],[1310,1310],[1311,1311]]],[1528092773936,["Re@Re.local",[[-1,1310,"管"]],[1311,1311],[1310,1310]]],[1528092777797,["Re@Re.local",[[1,1310,"图像的关键"]],[1310,1310],[1315,1315]]],[1528092780333,["Re@Re.local",[[-1,1306,"另外2个"]],[1310,1310],[1306,1306]]],[1528092783144,["Re@Re.local",[[1,1309,"另外2个"]],[1309,1309],[1313,1313]]],[1528092786258,["Re@Re.local",[[1,1315,"术语"]],[1315,1315],[1317,1317]]],[1528092786385,["Re@Re.local",[[1,1317,"\n\n"]],[1317,1317],[1318,1318]]],[1528092787254,["Re@Re.local",[[-1,1318,"\n"]],[1318,1318],[1317,1317]]],[1528092787801,["Re@Re.local",[[1,1317,"："]],[1317,1317],[1318,1318]]],[1528092788213,["Re@Re.local",[[-1,1317,"："]],[1318,1318],[1317,1317]]],[1528092788850,["Re@Re.local",[[1,1317,"。"]],[1317,1317],[1318,1318]]],[1528092789566,["Re@Re.local",[[1,1319,"\n"]],[1318,1318],[1319,1319]]],[1528092797260,["Re@Re.local",[[-1,1319,"\n"],[1,1320,"**路径（Path"]],[1319,1319],[1328,1328]]],[1528092798077,["Re@Re.local",[[-1,1324,"Path"]],[1328,1328],[1324,1324]]],[1528092800529,["Re@Re.local",[[1,1324,"path）**"]],[1324,1324],[1331,1331]]],[1528092800797,["Re@Re.local",[[1,1331,"\n\n"]],[1331,1331],[1332,1332]]],[1528092808877,["Re@Re.local",[[-1,1332,"\n"],[1,1333,"路径是右"]],[1332,1332],[1336,1336]]],[1528092809343,["Re@Re.local",[[-1,1335,"右"]],[1336,1336],[1335,1335]]],[1528092818822,["Re@Re.local",[[1,1335,"由边连接起来的顶点的"]],[1335,1335],[1345,1345]]],[1528092819004,["Re@Re.local",[[-1,1344,"的"]],[1345,1345],[1344,1344]]],[1528092824929,["Re@Re.local",[[1,1344,"的序列。"]],[1344,1344],[1348,1348]]],[1528092892910,[null,[[-1,1348,"（"]],[1348,1348],[1348,1348]]],[1528092892910,[null,[[1,1348,"（"]],[1348,1348],[1348,1348]]],[1528092837075,["Re@Re.local",[[1,1348,"一般地说"]],[1348,1348],[1352,1352]]],[1528092837318,["Re@Re.local",[[-1,1351,"说"]],[1352,1352],[1351,1351]]],[1528092839568,["Re@Re.local",[[1,1351,"，定"]],[1351,1351],[1353,1353]]],[1528092839629,["Re@Re.local",[[-1,1352,"定"]],[1353,1353],[1352,1352]]],[1528092846392,["Re@Re.local",[[1,1352,"将路径定义为$$"]],[1352,1352],[1360,1360]]],[1528092853194,["Re@Re.local",[[1,1359,"w_1,w_2,...,w_n"]],[1359,1359],[1374,1374]]],[1528092869632,["Re@Re.local",[[1,1375,"使得$(w_i,w_{i+1{)$"]],[1375,1375],[1392,1392]]],[1528092872666,["Re@Re.local",[[-1,1389,"{"]],[1390,1390],[1389,1389]]],[1528092873064,["Re@Re.local",[[1,1389,"}"]],[1389,1389],[1390,1390]]],[1528092952897,[null,[[-1,1392,"（"]],[1392,1392],[1392,1392]]],[1528092952897,[null,[[1,1392,"（"]],[1392,1392],[1392,1392]]],[1528092952598,["Re@Re.local",[[1,1391,"、"]],[1391,1391],[1392,1392]]],[1528093012913,[null,[[-1,1393,"（"]],[1393,1393],[1393,1393]]],[1528093012913,[null,[[1,1393,"（"]],[1393,1393],[1393,1393]]],[1528092953507,["Re@Re.local",[[-1,1391,"、"]],[1392,1392],[1391,1391]]],[1528092959399,["Re@Re.local",[[1,1391,"\\inE"]],[1391,1391],[1395,1395]]],[1528092973574,["Re@Re.local",[[1,1394," "]],[1394,1394],[1395,1395]]],[1528092981113,["Re@Re.local",[[1,1089," "]],[1089,1089],[1090,1090]]],[1528092984009,["Re@Re.local",[[1,1189," "]],[1189,1189],[1190,1190]]],[1528093002430,["Re@Re.local",[[1,1399,"，"]],[1399,1399],[1400,1400]]],[1528093005129,["Re@Re.local",[[-1,1399,"，"]],[1400,1400],[1399,1399]]],[1528093008293,["Re@Re.local",[[1,1399,"对所有"]],[1399,1399],[1402,1402]]],[1528093072961,[null,[[-1,1402,"（"]],[1402,1402],[1402,1402]]],[1528093072961,[null,[[1,1402,"（"]],[1402,1402],[1402,1402]]],[1528093014743,["Re@Re.local",[[1,1402,"$ 1≤i≤n−1"]],[1402,1402],[1411,1411]]],[1528093016902,["Re@Re.local",[[-1,1403," "]],[1404,1404],[1403,1403]]],[1528093022395,["Re@Re.local",[[1,1410,"$成立，"]],[1410,1410],[1414,1414]]],[1528093025878,["Re@Re.local",[[-1,1413,"，"]],[1414,1414],[1413,1413]]],[1528093026357,["Re@Re.local",[[1,1413,"。"]],[1413,1413],[1414,1414]]],[1528093132908,[null,[[-1,1414,"（"]],[1414,1414],[1414,1414]]],[1528093132909,[null,[[1,1414,"（"]],[1414,1414],[1414,1414]]],[1528093080045,["Re@Re.local",[[1,1414,"无权路径长度是路径中解"]],[1414,1414],[1425,1425]]],[1528093080146,["Re@Re.local",[[-1,1424,"解"]],[1425,1425],[1424,1424]]],[1528093107587,["Re@Re.local",[[1,1424,"边的个数，即n-1。权重路径长度是路径中边的权重之和。比如图2 "]],[1424,1424],[1456,1456]]],[1528093108142,["Re@Re.local",[[-1,1455," "]],[1456,1456],[1455,1455]]],[1528093114797,["Re@Re.local",[[1,1455,"中，从V3到V1e"]],[1455,1455],[1464,1464]]],[1528093115220,["Re@Re.local",[[-1,1463,"e"]],[1464,1464],[1463,1463]]],[1528093119302,["Re@Re.local",[[1,1463,"的路径是序列"]],[1463,1463],[1469,1469]]],[1528093120477,["Re@Re.local",[[-1,1467,"序列"]],[1469,1469],[1467,1467]]],[1528093124991,["Re@Re.local",[[1,1467,"顶点序列（"]],[1467,1467],[1472,1472]]],[1528093130284,["Re@Re.local",[[-1,1471,"（"]],[1472,1472],[1471,1471]]],[1528093131073,["Re@Re.local",[[1,1471,"$$"]],[1471,1471],[1473,1473]]],[1528093131703,["Re@Re.local",[[1,1472," (V3,V4,V0,V1)"]],[1472,1472],[1486,1486]]],[1528093192911,[null,[[-1,1487,"（"]],[1487,1487],[1487,1487]]],[1528093192911,[null,[[1,1487,"（"]],[1487,1487],[1487,1487]]],[1528093134309,["Re@Re.local",[[-1,1472," "]],[1473,1473],[1472,1472]]],[1528093137562,["Re@Re.local",[[1,1486,"而"]],[1486,1486],[1487,1487]]],[1528093141327,["Re@Re.local",[[1,1379," "]],[1379,1379],[1380,1380]]],[1528093142826,["Re@Re.local",[[1,1400," "]],[1400,1400],[1401,1401]]],[1528093144125,["Re@Re.local",[[1,1473," "]],[1473,1473],[1474,1474]]],[1528093145550,["Re@Re.local",[[1,1489," "]],[1489,1489],[1490,1490]]],[1528093150402,["Re@Re.local",[[1,1404," "]],[1404,1404],[1405,1405]]],[1528093151971,["Re@Re.local",[[1,1414," "]],[1414,1414],[1415,1415]]],[1528093155616,["Re@Re.local",[[1,1377," "]],[1377,1377],[1378,1378]]],[1528093156846,["Re@Re.local",[[1,1360," "]],[1360,1360],[1361,1361]]],[1528093167840,["Re@Re.local",[[1,1495,"边为 $$"]],[1495,1495],[1500,1500]]],[1528093168487,["Re@Re.local",[[1,1499,"{(v3,v4,7),(v4,v0,1),(v0,v1,5)}{(v3,v4,7),(v4,v0,1),(v0,v1,5)}."]],[1499,1499],[1562,1562]]],[1528093170639,["Re@Re.local",[[-1,1561,"."]],[1562,1562],[1561,1561]]],[1528093172134,["Re@Re.local",[[1,1562,"。"]],[1562,1562],[1563,1563]]],[1528093172620,["Re@Re.local",[[1,1563,"\n\n"]],[1563,1563],[1564,1564]]],[1528093173046,["Re@Re.local",[[1,1565,"\n"]],[1564,1564],[1565,1565]]],[1528093177002,["Re@Re.local",[[-1,1565,"\n"]],[1565,1565],[1564,1564]]],[1528093182039,["Re@Re.local",[[-1,1564,"\n"],[1,1565,"**环（ci"]],[1564,1564],[1570,1570]]],[1528093185672,["Re@Re.local",[[-1,1569,"i"]],[1570,1570],[1569,1569]]],[1528093187754,["Re@Re.local",[[1,1569,"ycle）**"]],[1569,1569],[1576,1576]]],[1528093188035,["Re@Re.local",[[1,1576,"\n\n"]],[1576,1576],[1577,1577]]],[1528093190883,["Re@Re.local",[[-1,1577,"\n"],[1,1578,"环是"]],[1577,1577],[1579,1579]]],[1528093252926,[null,[[-1,1579,"（"]],[1579,1579],[1579,1579]]],[1528093252926,[null,[[1,1579,"（"]],[1579,1579],[1579,1579]]],[1528093194567,["Re@Re.local",[[-1,1578,"是"]],[1579,1579],[1578,1578]]],[1528093194798,["Re@Re.local",[[-1,1577,"环"],[1,1578,"\n"]],[1578,1578],[1577,1577]]],[1528093198099,["Re@Re.local",[[-1,1577,"\n"],[1,1578,"有向图的"]],[1577,1577],[1581,1581]]],[1528093198204,["Re@Re.local",[[-1,1580,"的"]],[1581,1581],[1580,1580]]],[1528093198806,["Re@Re.local",[[1,1580,"的"]],[1580,1580],[1581,1581]]],[1528093199068,["Re@Re.local",[[-1,1580,"的"]],[1581,1581],[1580,1580]]],[1528093201950,["Re@Re.local",[[1,1580,"中的环是"]],[1580,1580],[1584,1584]]],[1528093220442,["Re@Re.local",[[-1,1583,"是"]],[1584,1584],[1583,1583]]],[1528093227017,["Re@Re.local",[[1,1583,"是首位"]],[1583,1583],[1586,1586]]],[1528093227685,["Re@Re.local",[[-1,1585,"位"]],[1586,1586],[1585,1585]]],[1528093241389,["Re@Re.local",[[1,1585,"尾顶点相同的路径。比如说，吐"]],[1585,1585],[1599,1599]]],[1528093242167,["Re@Re.local",[[-1,1598,"吐"]],[1599,1599],[1598,1598]]],[1528093251393,["Re@Re.local",[[1,1598,"图2中路径 (V5,V2,V3,V5)(V5,V2,V3,V5) i"]],[1598,1598],[1632,1632]]],[1528093252833,["Re@Re.local",[[-1,1603," "],[1,1604," "],[-1,1630," i"],[1,1632," "]],[1632,1632],[1631,1631]]],[1528093317160,[null,[[-1,1631,"（"]],[1631,1631],[1631,1631]]],[1528093317161,[null,[[1,1631,"（"]],[1631,1631],[1631,1631]]],[1528093253292,["Re@Re.local",[[-1,1630," "]],[1631,1631],[1630,1630]]],[1528093254446,["Re@Re.local",[[1,1630,"$"]],[1630,1630],[1631,1631]]],[1528093256464,["Re@Re.local",[[-1,1603," "]],[1604,1604],[1603,1603]]],[1528093257157,["Re@Re.local",[[1,1603,"$"]],[1603,1603],[1604,1604]]],[1528093257761,["Re@Re.local",[[1,1603," "]],[1603,1603],[1604,1604]]],[1528093269195,["Re@Re.local",[[1,1632," 就是1个环。图像"]],[1632,1632],[1641,1641]]],[1528093269721,["Re@Re.local",[[-1,1639,"图像"]],[1641,1641],[1639,1639]]],[1528093284204,["Re@Re.local",[[1,1639,"没有环的图像是"]],[1639,1639],[1646,1646]]],[1528093284461,["Re@Re.local",[[-1,1645,"是"]],[1646,1646],[1645,1645]]],[1528093294134,["Re@Re.local",[[1,1645,"被称为****"]],[1645,1645],[1652,1652]]],[1528093298368,["Re@Re.local",[[1,1650,"无环图（"]],[1650,1650],[1654,1654]]],[1528093377164,[null,[[-1,1656,"（"]],[1656,1656],[1656,1656]]],[1528093377164,[null,[[1,1656,"（"]],[1656,1656],[1656,1656]]],[1528093331823,["Re@Re.local",[[1,1654,"）"]],[1654,1654],[1655,1655]]],[1528093337056,["Re@Re.local",[[1,1654,"acyclic graph"]],[1654,1654],[1667,1667]]],[1528093346726,["Re@Re.local",[[1,1670,"。有"]],[1670,1670],[1672,1672]]],[1528093347499,["Re@Re.local",[[-1,1671,"有"]],[1672,1672],[1671,1671]]],[1528093354011,["Re@Re.local",[[1,1671,"没有环的有线图"]],[1671,1671],[1678,1678]]],[1528093354721,["Re@Re.local",[[-1,1675,"有线图"]],[1678,1678],[1675,1675]]],[1528093356335,["Re@Re.local",[[1,1675,"有向图"]],[1675,1675],[1678,1678]]],[1528093357717,["Re@Re.local",[[-1,1644,"像"]],[1645,1645],[1644,1644]]],[1528093374250,["Re@Re.local",[[1,1677,"被称为**有向"]],[1677,1677],[1684,1684]]],[1528093437166,[null,[[-1,1684,"（"]],[1684,1684],[1684,1684]]],[1528093437167,[null,[[1,1684,"（"]],[1684,1684],[1684,1684]]],[1528093391331,["Re@Re.local",[[1,1684,"无环图（directed acyclic graph）"]],[1684,1684],[1711,1711]]],[1528093393171,["Re@Re.local",[[-1,1710,"）"]],[1711,1711],[1710,1710]]],[1528093396854,["Re@Re.local",[[1,1710,"，DAG)"]],[1710,1710],[1715,1715]]],[1528093397470,["Re@Re.local",[[-1,1714,")"]],[1715,1715],[1714,1714]]],[1528093421900,["Re@Re.local",[[1,1714,"）**。接下来读者会看到，一些"]],[1714,1714],[1729,1729]]],[1528093427185,["Re@Re.local",[[-1,1727,"一些"]],[1729,1729],[1727,1727]]],[1528093435994,["Re@Re.local",[[1,1727,"一些很重要的问题可以通过表示为DAG获得"]],[1727,1727],[1747,1747]]],[1528093461123,[null,[[-1,1747,"（"]],[1747,1747],[1747,1747]]],[1528093461123,[null,[[1,1747,"（"]],[1747,1747],[1747,1747]]],[1528093438265,["Re@Re.local",[[1,1747,"解决。"]],[1747,1747],[1750,1750]]],[1528093438613,["Re@Re.local",[[1,1750,"\n\n"]],[1750,1750],[1751,1751]]],[1528093438816,["Re@Re.local",[[1,1752,"\n"]],[1751,1751],[1752,1752]]],[1528093458387,["Re@Re.local",[[-1,1752,"\n"],[1,1753,"## 7.3 抽象数据类型：Graph ##"]],[1752,1752],[1774,1774]]],[1528093458573,["Re@Re.local",[[1,1774,"\n\n"]],[1774,1774],[1775,1775]]],[1528093458977,["Re@Re.local",[[1,1776,"\n"]],[1775,1775],[1776,1776]]],[1528093459592,["Re@Re.local",[[-1,1776,"\n"]],[1776,1776],[1775,1775]]],[1528093581062,[null,[[-1,1776,"（"]],[1776,1776],[1776,1776]]],[1528093581062,[null,[[1,1776,"（"]],[1776,1776],[1776,1776]]],[1528093539850,["Re@Re.local",[[1,1776,"\n"]],[1775,1775],[1776,1776]]],[1528093542523,["Re@Re.local",[[-1,1776,"\n"],[1,1777,"图像"]],[1776,1776],[1778,1778]]],[1528093542843,["Re@Re.local",[[-1,1776,"图像"]],[1778,1778],[1776,1776]]],[1528093543133,["Re@Re.local",[[-1,1775,"\n"],[1,1776,"c"]],[1776,1776],[1775,1776]]],[1528093543430,["Re@Re.local",[[-1,1775,"c"]],[1775,1776],[0,0]]],[1528093544057,["Re@Re.local",[[1,1775,"\n\n"]],[1775,1775],[1776,1776]]],[1528093554728,["Re@Re.local",[[-1,1776,"\n"],[1,1777,"抽象数据类型Gragh被定义为："]],[1776,1776],[1792,1792]]],[1528093555256,["Re@Re.local",[[1,1792,"\n\n"]],[1792,1792],[1793,1793]]],[1528093564685,["Re@Re.local",[[-1,1793,"\n"],[1,1794,"- Grah"]],[1793,1793],[1799,1799]]],[1528093566749,["Re@Re.local",[[-1,1795,"Grah"]],[1799,1799],[1795,1795]]],[1528093571208,["Re@Re.local",[[1,1795,"Graph() 新建"]],[1795,1795],[1805,1805]]],[1528093572946,["Re@Re.local",[[-1,1802," 新建"]],[1805,1805],[1802,1802]]],[1528093575871,["Re@Re.local",[[1,1802,"生成个"]],[1802,1802],[1805,1805]]],[1528093575970,["Re@Re.local",[[-1,1804,"个"]],[1805,1805],[1804,1804]]],[1528093579325,["Re@Re.local",[[1,1804,"一个新的空图。"]],[1804,1804],[1811,1811]]],[1528093579693,["Re@Re.local",[[1,1811,"\n\n"]],[1811,1811],[1812,1812]]],[1528093580208,["Re@Re.local",[[-1,1812,"\n"],[1,1813,"- "]],[1812,1812],[1814,1814]]],[1528093641048,[null,[[-1,1814,"（"]],[1814,1814],[1814,1814]]],[1528093641048,[null,[[1,1814,"（"]],[1814,1814],[1814,1814]]],[1528093590885,["Re@Re.local",[[1,1814,"addVertex(vert) "]],[1814,1814],[1830,1830]]],[1528093593269,["Re@Re.local",[[-1,1829," "]],[1830,1830],[1829,1829]]],[1528093595185,["Re@Re.local",[[1,1829,"将"]],[1829,1829],[1830,1830]]],[1528093595377,["Re@Re.local",[[-1,1829,"将"]],[1830,1830],[1829,1829]]],[1528093596931,["Re@Re.local",[[1,1829," 将1"]],[1829,1829],[1832,1832]]],[1528093597689,["Re@Re.local",[[-1,1831,"1"]],[1832,1832],[1831,1831]]],[1528093598898,["Re@Re.local",[[1,1831,"vert"]],[1831,1831],[1835,1835]]],[1528093599750,["Re@Re.local",[[-1,1831,"vert"]],[1835,1835],[1831,1831]]],[1528093609208,["Re@Re.local",[[1,1831,"Vertex的1个实例添加至graph。"]],[1831,1831],[1851,1851]]],[1528093609510,["Re@Re.local",[[1,1851,"\n\n"]],[1851,1851],[1852,1852]]],[1528093615472,["Re@Re.local",[[-1,1852,"\n"],[1,1853,"- addEdge(from "]],[1852,1852],[1867,1867]]],[1528093615814,["Re@Re.local",[[-1,1866," "]],[1867,1867],[1866,1866]]],[1528093618803,["Re@Re.local",[[1,1866,"Vert,toVr"]],[1866,1866],[1875,1875]]],[1528093619812,["Re@Re.local",[[-1,1874,"r"]],[1875,1875],[1874,1874]]],[1528093621525,["Re@Re.local",[[1,1874,"ert）"]],[1874,1874],[1878,1878]]],[1528093622130,["Re@Re.local",[[-1,1877,"）"]],[1878,1878],[1877,1877]]],[1528093632663,["Re@Re.local",[[1,1877,") 添加1个新的有向边"]],[1877,1877],[1888,1888]]],[1528093638295,["Re@Re.local",[[1,1879,"向图"]],[1879,1879],[1881,1881]]],[1528093640312,["Re@Re.local",[[-1,1845,"graph"]],[1846,1850],[1845,1845]]],[1528093701055,[null,[[-1,1885,"（"]],[1885,1885],[1885,1885]]],[1528093701055,[null,[[1,1885,"（"]],[1885,1885],[1885,1885]]],[1528093641170,["Re@Re.local",[[1,1845,"图"]],[1845,1845],[1846,1846]]],[1528094841135,[null,[[-1,1886,"（"]],[1886,1886],[1886,1886]]],[1528094841135,[null,[[1,1886,"（"]],[1886,1886],[1886,1886]]],[1528094789899,["Re@Re.local",[[1,1881,"连接连"]],[1881,1881],[1884,1884]]],[1528094790089,["Re@Re.local",[[-1,1883,"连"]],[1884,1884],[1883,1883]]],[1528094793378,["Re@Re.local",[[1,1883,"2个顶点的"]],[1883,1883],[1888,1888]]],[1528094795156,["Re@Re.local",[[-1,1888,"新的"]],[1890,1890],[1888,1888]]],[1528094798322,["Re@Re.local",[[1,1891,"，"]],[1891,1891],[1892,1892]]],[1528094799206,["Re@Re.local",[[-1,1891,"，"]],[1892,1892],[1891,1891]]],[1528094800341,["Re@Re.local",[[1,1891,"。"]],[1891,1891],[1892,1892]]],[1528094800582,["Re@Re.local",[[1,1892,"\n\n"]],[1892,1892],[1893,1893]]],[1528094805398,["Re@Re.local",[[-1,1893,"\n"],[1,1894,"- addEdge（"]],[1893,1893],[1903,1903]]],[1528094806494,["Re@Re.local",[[-1,1902,"（"]],[1903,1903],[1902,1902]]],[1528094808828,["Re@Re.local",[[1,1902,"(fromver"]],[1902,1902],[1910,1910]]],[1528094809439,["Re@Re.local",[[-1,1907,"ver"]],[1910,1910],[1907,1907]]],[1528094810886,["Re@Re.local",[[1,1907,"Vert, "]],[1907,1907],[1913,1913]]],[1528094811186,["Re@Re.local",[[-1,1912," "]],[1913,1913],[1912,1912]]],[1528094811732,["Re@Re.local",[[1,1912,"tov"]],[1912,1912],[1915,1915]]],[1528094812125,["Re@Re.local",[[-1,1914,"v"]],[1915,1915],[1914,1914]]],[1528094812391,["Re@Re.local",[[1,1914," "]],[1914,1914],[1915,1915]]],[1528094813004,["Re@Re.local",[[-1,1914," "]],[1915,1915],[1914,1914]]],[1528094823705,["Re@Re.local",[[1,1914,"Vert,weight)向图添加1个新的 "]],[1914,1914],[1935,1935]]],[1528094824497,["Re@Re.local",[[-1,1934," "]],[1935,1935],[1934,1934]]],[1528094829022,["Re@Re.local",[[1,1934,"赋权有向边"]],[1934,1934],[1939,1939]]],[1528094836156,["Re@Re.local",[[-1,1932,"新"],[1,1933,"连接2个顶点"]],[1932,1934],[1939,1939]]],[1528094838199,["Re@Re.local",[[1,1944,"。"]],[1944,1944],[1945,1945]]],[1528094838653,["Re@Re.local",[[1,1945,"\n\n"]],[1945,1945],[1946,1946]]],[1528094840514,["Re@Re.local",[[-1,1946,"\n"],[1,1947,"- "]],[1946,1946],[1948,1948]]],[1528094901151,[null,[[-1,1948,"（"]],[1948,1948],[1948,1948]]],[1528094901151,[null,[[1,1948,"（"]],[1948,1948],[1948,1948]]],[1528094846795,["Re@Re.local",[[1,1948,"getVertex(Ver"]],[1948,1948],[1961,1961]]],[1528094847397,["Re@Re.local",[[-1,1958,"Ver"]],[1961,1961],[1958,1958]]],[1528094849631,["Re@Re.local",[[1,1958,"vertKey）"]],[1958,1958],[1966,1966]]],[1528094850074,["Re@Re.local",[[-1,1965,"）"]],[1966,1966],[1965,1965]]],[1528094863214,["Re@Re.local",[[1,1965,") 找到途中以vertKey命名的顶点。"]],[1965,1965],[1985,1985]]],[1528094863495,["Re@Re.local",[[1,1985,"\n\n"]],[1985,1985],[1986,1986]]],[1528094873643,["Re@Re.local",[[-1,1986,"\n"],[1,1987,"- getVertices() 以"]],[1986,1986],[2003,2003]]],[1528094873778,["Re@Re.local",[[-1,2002,"以"]],[2003,2003],[2002,2002]]],[1528094879744,["Re@Re.local",[[1,2002,"返回途中所有顶点的列表。"]],[2002,2002],[2014,2014]]],[1528094880297,["Re@Re.local",[[1,2014,"\n\n"]],[2014,2014],[2015,2015]]],[1528094884173,["Re@Re.local",[[-1,2015,"\n"],[1,2016,"- i你"]],[2015,2015],[2019,2019]]],[1528094884662,["Re@Re.local",[[-1,2018,"你"]],[2019,2019],[2018,2018]]],[1528094888937,["Re@Re.local",[[1,2018,"n 返回"]],[2018,2018],[2022,2022]]],[1528094889665,["Re@Re.local",[[-1,2020,"返回"]],[2022,2022],[2020,2020]]],[1528094894836,["Re@Re.local",[[1,2020,"以"]],[2020,2020],[2021,2021]]],[1528094895106,["Re@Re.local",[[-1,2020,"以"]],[2021,2021],[2020,2020]]],[1528094897627,["Re@Re.local",[[1,2020,"对于vertexx"]],[2020,2020],[2029,2029]]],[1528094897991,["Re@Re.local",[[-1,2028,"x"]],[2029,2029],[2028,2028]]],[1528094899628,["Re@Re.local",[[1,2028," in graph"]],[2028,2028],[2037,2037]]],[1528094961187,[null,[[-1,2037,"（"]],[2037,2037],[2037,2037]]],[1528094961187,[null,[[1,2037,"（"]],[2037,2037],[2037,2037]]],[1528094918494,["Re@Re.local",[[1,2037,"这种形式的语句，若给定的vertex在途中，返回True，反之则返回"]],[2037,2037],[2071,2071]]],[1528094919215,["Re@Re.local",[[-1,2069,"返回"]],[2071,2071],[2069,2069]]],[1528094920959,["Re@Re.local",[[1,2069,"False。"]],[2069,2069],[2075,2075]]],[1528094921294,["Re@Re.local",[[1,2075,"\n\n"]],[2075,2075],[2076,2076]]],[1528094944201,["Re@Re.local",[[1,2077,"\n"]],[2076,2076],[2077,2077]]],[1528094945820,["Re@Re.local",[[-1,2077,"\n"],[1,2078,"又"]],[2077,2077],[2078,2078]]],[1528094945948,["Re@Re.local",[[-1,2077,"又"]],[2078,2078],[2077,2077]]],[1528094946844,["Re@Re.local",[[1,2077,"\n\n"]],[2077,2077],[2078,2078]]],[1528094947508,["Re@Re.local",[[-1,2078,"\n"]],[2078,2078],[2077,2077]]],[1528094960162,["Re@Re.local",[[-1,2077,"\n"],[1,2078,"有了图像的正式定义，在Python中可以用"]],[2077,2077],[2098,2098]]],[1528095021144,[null,[[-1,2098,"（"]],[2098,2098],[2098,2098]]],[1528095021144,[null,[[1,2098,"（"]],[2098,2098],[2098,2098]]],[1528094964513,["Re@Re.local",[[1,2098,"多种方式实现。"]],[2098,2098],[2105,2105]]],[1528094976628,["Re@Re.local",[[-1,2104,"。"]],[2105,2105],[2104,2104]]],[1528094985650,["Re@Re.local",[[1,2104,"，下面来看看使用不同实现ADt"]],[2104,2104],[2119,2119]]],[1528094985974,["Re@Re.local",[[-1,2118,"t"]],[2119,2119],[2118,2118]]],[1528094986307,["Re@Re.local",[[1,2118,"T"]],[2118,2118],[2119,2119]]],[1528094991514,["Re@Re.local",[[1,2114,"方式"]],[2114,2114],[2116,2116]]],[1528094994918,["Re@Re.local",[[-1,2118,"ADT"]],[2121,2121],[2118,2118]]],[1528095019261,["Re@Re.local",[[1,2118,"该ADT的优劣与差别。图的实现又"]],[2118,2118],[2134,2134]]],[1528095020287,["Re@Re.local",[[-1,2129,"图的实现又"]],[2134,2134],[2129,2129]]],[1528095081137,[null,[[-1,2129,"（"]],[2129,2129],[2129,2129]]],[1528095081137,[null,[[1,2129,"（"]],[2129,2129],[2129,2129]]],[1528095036830,["Re@Re.local",[[1,2129,"有两个著名的图的实现，即邻接矩阵"]],[2129,2129],[2145,2145]]],[1528095040226,["Re@Re.local",[[1,2141,"**"]],[2141,2141],[2143,2143]]],[1528095042802,["Re@Re.local",[[1,2147,"（）"]],[2143,2143],[2149,2149]]],[1528095047449,["Re@Re.local",[[1,2148,"adjacency mart"]],[2148,2148],[2162,2162]]],[1528095047895,["Re@Re.local",[[-1,2160,"rt"]],[2162,2162],[2160,2160]]],[1528095048658,["Re@Re.local",[[1,2160,"trix"]],[2160,2160],[2164,2164]]],[1528095054162,["Re@Re.local",[[1,2165,"**和****"]],[2164,2164],[2172,2172]]],[1528095063650,["Re@Re.local",[[1,2170,"领结"]],[2170,2170],[2172,2172]]],[1528095068920,["Re@Re.local",[[-1,2170,"领结"]],[2172,2172],[2170,2170]]],[1528095080704,["Re@Re.local",[[1,2170,"邻接表（adjacency "]],[2170,2170],[2184,2184]]],[1528095141143,[null,[[-1,2186,"（"]],[2186,2186],[2186,2186]]],[1528095141143,[null,[[1,2186,"（"]],[2186,2186],[2186,2186]]],[1528095082502,["Re@Re.local",[[1,2184,"list）"]],[2184,2184],[2189,2189]]],[1528095085462,["Re@Re.local",[[1,2191,"。"]],[2191,2191],[2192,2192]]],[1528095086303,["Re@Re.local",[[-1,2191,"。"]],[2192,2192],[2191,2191]]],[1528095086592,["Re@Re.local",[[1,2191,"，"]],[2191,2191],[2192,2192]]],[1528095087207,["Re@Re.local",[[-1,2191,"，"]],[2192,2192],[2191,2191]]],[1528095089357,["Re@Re.local",[[1,2191,"，本书"]],[2191,2191],[2194,2194]]],[1528095090267,["Re@Re.local",[[-1,2193,"书"]],[2194,2194],[2193,2193]]],[1528095109565,["Re@Re.local",[[1,2193,"书将对这两种都进行解释，并对其中1中以Python类的防护"]],[2193,2193],[2222,2222]]],[1528095110194,["Re@Re.local",[[-1,2220,"防护"]],[2222,2222],[2220,2220]]],[1528095111635,["Re@Re.local",[[1,2220,"方式实现。"]],[2220,2220],[2225,2225]]],[1528095111955,["Re@Re.local",[[1,2225,"\n\n"]],[2225,2225],[2226,2226]]],[1528095112341,["Re@Re.local",[[1,2227,"\n"]],[2226,2226],[2227,2227]]],[1528095118846,["Re@Re.local",[[-1,2227,"\n"],[1,2228,"## "]],[2227,2227],[2230,2230]]],[1528095201217,[null,[[-1,2230,"（"]],[2230,2230],[2230,2230]]],[1528095201217,[null,[[1,2230,"（"]],[2230,2230],[2230,2230]]],[1528095147600,["Re@Re.local",[[1,2230,"邻接矩阵（adjacency matrix）"]],[2230,2230],[2252,2252]]],[1528095150809,["Re@Re.local",[[1,2230,"7.4 "]],[2230,2230],[2234,2234]]],[1528095152421,["Re@Re.local",[[1,2256,"##"]],[2256,2256],[2258,2258]]],[1528095152640,["Re@Re.local",[[1,2258,"\n\n"]],[2258,2258],[2259,2259]]],[1528095153276,["Re@Re.local",[[1,2260,"\n"]],[2259,2259],[2260,2260]]],[1528095154063,["Re@Re.local",[[-1,2260,"\n"]],[2260,2260],[0,0]]],[1528095155115,["Re@Re.local",[[-1,2259,"\n"],[1,2260,"s"]],[0,0],[2259,2260]]],[1528095155385,["Re@Re.local",[[1,2260,"h"]],[2259,2260],[2259,2261]]],[1528095155450,["Re@Re.local",[[1,2261,"i"]],[2259,2261],[2259,2262]]],[1528095155942,["Re@Re.local",[[-1,2261,"i"]],[2259,2262],[2259,2261]]],[1528095156181,["Re@Re.local",[[-1,2260,"h"]],[2259,2261],[2259,2260]]],[1528095156477,["Re@Re.local",[[-1,2259,"s"]],[2259,2260],[0,0]]],[1528095156760,["Re@Re.local",[[1,2259,"\n\n"]],[2259,2259],[2260,2260]]],[1528095158387,["Re@Re.local",[[-1,2260,"\n"],[1,2261,"实现"]],[2260,2260],[2262,2262]]],[1528095160228,["Re@Re.local",[[-1,2260,"实现"]],[2262,2262],[2260,2260]]],[1528095161081,["Re@Re.local",[[1,2260,"\n\n"]],[2260,2260],[2261,2261]]],[1528095181498,["Re@Re.local",[[-1,2261,"\n"],[1,2262,"实现图的最简单方式之一是使用二维矩阵。"]],[2261,2261],[2280,2280]]],[1528095187457,["Re@Re.local",[[-1,2279,"。"]],[2280,2280],[2279,2279]]],[1528095187842,["Re@Re.local",[[1,2279,"，"]],[2279,2279],[2280,2280]]],[1528095190389,["Re@Re.local",[[-1,2279,"，"]],[2280,2280],[2279,2279]]],[1528095191152,["Re@Re.local",[[1,2279,"。"]],[2279,2279],[2280,2280]]],[1528095195612,["Re@Re.local",[[-1,2279,"。"]],[2280,2280],[2279,2279]]],[1528095196065,["Re@Re.local",[[1,2279,"，"]],[2279,2279],[2280,2280]]],[1528095197600,["Re@Re.local",[[-1,2279,"，"]],[2280,2280],[2279,2279]]],[1528095200592,["Re@Re.local",[[1,2279,"。在二维矩阵"]],[2279,2279],[2285,2285]]],[1528095261153,[null,[[-1,2285,"（"]],[2285,2285],[2285,2285]]],[1528095261153,[null,[[1,2285,"（"]],[2285,2285],[2285,2285]]],[1528095205297,["Re@Re.local",[[1,2286,"，美航"]],[2286,2286],[2289,2289]]],[1528095205686,["Re@Re.local",[[-1,2287,"美航"]],[2289,2289],[2287,2287]]],[1528095222980,["Re@Re.local",[[1,2287,"每行每列的都代表了4"]],[2287,2287],[2297,2297]]],[1528095223553,["Re@Re.local",[[-1,2296,"4"]],[2297,2297],[2296,2296]]],[1528095259853,["Re@Re.local",[[1,2296,"图中的1个顶点。行v和列w的交叉点"]],[2296,2296],[2313,2313]]],[1528095321159,[null,[[-1,2285,"（"],[1,2286,"中"]],[2285,2285],[2287,2287]]],[1528095321159,[null,[[1,2285,"（"],[-1,2285,"中"]],[2287,2287],[2285,2285]]],[1528095264275,["Re@Re.local",[[1,2313,"存储"]],[2313,2313],[2315,2315]]],[1528095270198,["Re@Re.local",[[1,2304,"如果顶点v到w"]],[2304,2304],[2311,2311]]],[1528095270659,["Re@Re.local",[[-1,2310,"w"]],[2311,2311],[2310,2310]]],[1528095271473,["Re@Re.local",[[1,2310,"ding"]],[2310,2310],[2314,2314]]],[1528095272552,["Re@Re.local",[[-1,2310,"ding"]],[2314,2314],[2310,2310]]],[1528095278246,["Re@Re.local",[[1,2310,"顶点w有边，"]],[2310,2310],[2316,2316]]],[1528095290540,["Re@Re.local",[[1,2327,"这"]],[2327,2327],[2328,2328]]],[1528095290797,["Re@Re.local",[[-1,2327,"这"]],[2328,2328],[2327,2327]]],[1528095307247,["Re@Re.local",[[1,2325,"会"]],[2325,2325],[2326,2326]]],[1528095310319,["Re@Re.local",[[1,2328,"某个只"]],[2328,2328],[2331,2331]]],[1528095310897,["Re@Re.local",[[-1,2328,"某个只"]],[2331,2331],[2328,2328]]],[1528095313044,["Re@Re.local",[[1,2328,"值。"]],[2328,2328],[2330,2330]]],[1528095381159,[null,[[-1,2285,"（"],[1,2286,"中"]],[2285,2285],[2287,2287]]],[1528095381159,[null,[[1,2285,"（"],[-1,2285,"中"]],[2287,2287],[2285,2285]]],[1528095337075,["Re@Re.local",[[1,2330,"若两个顶点由边连接，便称之为为"]],[2330,2330],[2345,2345]]],[1528095337966,["Re@Re.local",[[-1,2342,"之为为"]],[2345,2345],[2342,2342]]],[1528095355730,["Re@Re.local",[[1,2342,"这两个顶点是**邻接**的。图3给出了图2中"]],[2342,2342],[2364,2364]]],[1528095356484,["Re@Re.local",[[-1,2363,"中"]],[2364,2364],[2363,2363]]],[1528095359518,["Re@Re.local",[[1,2363,"中所示的图"]],[2363,2363],[2368,2368]]],[1528095361513,["Re@Re.local",[[-1,2363,"中所示的图"]],[2368,2368],[2363,2363]]],[1528095365706,["Re@Re.local",[[1,2363,"的你姐"]],[2363,2363],[2366,2366]]],[1528095365981,["Re@Re.local",[[-1,2364,"你姐"]],[2366,2366],[2364,2364]]],[1528095369307,["Re@Re.local",[[1,2364,"邻接矩阵。"]],[2364,2364],[2369,2369]]],[1528095441164,[null,[[-1,2285,"（"],[1,2286,"中"]],[2285,2285],[2287,2287]]],[1528095441164,[null,[[1,2285,"（"],[-1,2285,"中"]],[2287,2287],[2285,2285]]],[1528095390377,["Re@Re.local",[[1,2325,"单元格"]],[2325,2325],[2328,2328]]],[1528095401146,["Re@Re.local",[[1,2372,"单元格中存储的值是v到w的权重。"]],[2372,2372],[2388,2388]]],[1528095401690,["Re@Re.local",[[1,2388,"\n\n"]],[2388,2388],[2389,2389]]],[1528095402146,["Re@Re.local",[[1,2390,"\n"]],[2389,2389],[2390,2390]]],[1528095406724,["Re@Re.local",[[1,2390,"![../_images/adjMat.png](http://interactivepython.org/courselib/static/pythonds/_images/adjMat.png)"]],[2390,2390],[2489,2489]]],[1528095406956,["Re@Re.local",[[1,2490,"\n"]],[2489,2489],[2490,2490]]],[1528095407212,["Re@Re.local",[[1,2491,"\n"]],[2490,2490],[2491,2491]]],[1528095438673,["Re@Re.local",[[-1,2491,"\n"],[1,2492,"邻接矩阵的优势是简便，并且对于小图来说，很容易看出哪些节点是相连的。"]],[2491,2491],[2525,2525]]],[1528095501169,[null,[[-1,2285,"（"],[1,2286,"中"]],[2285,2285],[2287,2287]]],[1528095501169,[null,[[1,2285,"（"],[-1,2285,"中"]],[2287,2287],[2285,2285]]],[1528095481859,["Re@Re.local",[[1,2525,"然而，注意到矩阵中大多数单元格都是空。因为大多数单元格都是空的，因此称该矩阵是**稀疏（spare"]],[2525,2525],[2574,2574]]],[1528095482171,["Re@Re.local",[[-1,2573,"e"]],[2574,2574],[2573,2573]]],[1528095483969,["Re@Re.local",[[1,2573,"se）*8的"]],[2573,2573],[2579,2579]]],[1528095484454,["Re@Re.local",[[-1,2577,"8的"]],[2579,2579],[2577,2577]]],[1528095496231,["Re@Re.local",[[1,2577,"*的。矩阵并不是"]],[2577,2577],[2585,2585]]],[1528095498009,["Re@Re.local",[[-1,2583,"不是"]],[2585,2585],[2583,2583]]],[1528095500238,["Re@Re.local",[[1,2583,"能高效"]],[2583,2583],[2586,2586]]],[1528095561209,[null,[[-1,2285,"（"],[1,2286,"中"]],[2285,2285],[2287,2287]]],[1528095561209,[null,[[1,2285,"（"],[-1,2285,"中"]],[2287,2287],[2285,2285]]],[1528095506736,["Re@Re.local",[[1,2586,"地存储这种稀疏数据。"]],[2586,2586],[2596,2596]]],[1528095510721,["Re@Re.local",[[1,2583,"不"]],[2583,2583],[2584,2584]]],[1528095556215,["Re@Re.local",[[1,2597,"实际上，在Python中像图3这种矩阵结构都很马鞍"]],[2597,2597],[2622,2622]]],[1528095556766,["Re@Re.local",[[-1,2620,"马鞍"]],[2622,2622],[2620,2620]]],[1528095557649,["Re@Re.local",[[1,2620,"麻烦。"]],[2620,2620],[2623,2623]]],[1528095557933,["Re@Re.local",[[1,2623,"\n\n"]],[2623,2623],[2624,2624]]],[1528095558171,["Re@Re.local",[[1,2625,"\n"]],[2624,2624],[2625,2625]]],[1528095560588,["Re@Re.local",[[-1,2625,"\n"],[1,2626,"邻接"]],[2625,2625],[2627,2627]]],[1528095621175,[null,[[-1,2285,"（"],[1,2286,"中"]],[2285,2285],[2287,2287]]],[1528095621175,[null,[[1,2285,"（"],[-1,2285,"中"]],[2287,2287],[2285,2285]]],[1528095563619,["Re@Re.local",[[1,2627,"矩阵是"]],[2627,2627],[2630,2630]]],[1528095567244,["Re@Re.local",[[-1,2629,"是"]],[2630,2630],[2629,2629]]],[1528095573158,["Re@Re.local",[[1,2629,"对于变数"]],[2629,2629],[2633,2633]]],[1528095573395,["Re@Re.local",[[-1,2631,"变数"]],[2633,2633],[2631,2631]]],[1528095587439,["Re@Re.local",[[1,2631,"边树较高的图来说是不错的实现。边书"]],[2631,2631],[2648,2648]]],[1528095587692,["Re@Re.local",[[-1,2646,"边书"]],[2648,2648],[2646,2646]]],[1528095590686,["Re@Re.local",[[1,2646,"“较高：是啥"]],[2646,2646],[2652,2652]]],[1528095591590,["Re@Re.local",[[-1,2649,"：是啥"]],[2652,2652],[2649,2649]]],[1528095619847,["Re@Re.local",[[1,2649,"”是什么意思？到底需要多少个边才能填满该矩阵？因此为对于每个"]],[2649,2649],[2679,2679]]],[1528095621046,["Re@Re.local",[[-1,2676,"于每个"]],[2679,2679],[2676,2676]]],[1528095681176,[null,[[-1,2285,"（"],[1,2286,"中"]],[2285,2285],[2287,2287]]],[1528095681176,[null,[[1,2285,"（"],[-1,2285,"中"]],[2287,2287],[2285,2285]]],[1528095621389,["Re@Re.local",[[-1,2675,"对"]],[2676,2676],[2675,2675]]],[1528095622571,["Re@Re.local",[[1,2675,"每个"]],[2675,2675],[2677,2677]]],[1528095624481,["Re@Re.local",[[-1,2676,"个"]],[2677,2677],[2676,2676]]],[1528095630314,["Re@Re.local",[[1,2676,"行、每列都对应1条"]],[2676,2676],[2685,2685]]],[1528095630568,["Re@Re.local",[[-1,2683,"1条"]],[2685,2685],[2683,2683]]],[1528095640226,["Re@Re.local",[[1,2683,"个顶点，因此矩阵"]],[2683,2683],[2691,2691]]],[1528095647946,["Re@Re.local",[[-1,2687,"因此矩阵"]],[2691,2691],[2687,2687]]],[1528095649133,["Re@Re.local",[[1,2687,"Tina 满"]],[2687,2687],[2693,2693]]],[1528095650597,["Re@Re.local",[[-1,2687,"Tina 满"]],[2693,2693],[2687,2687]]],[1528095657122,["Re@Re.local",[[1,2687,"填满矩阵需要的节点树"]],[2687,2687],[2697,2697]]],[1528095658142,["Re@Re.local",[[-1,2694,"节点树"]],[2697,2697],[2694,2694]]],[1528095660469,["Re@Re.local",[[1,2694,"顶点树"]],[2694,2694],[2697,2697]]],[1528095661132,["Re@Re.local",[[-1,2696,"树"]],[2697,2697],[2696,2696]]],[1528095662305,["Re@Re.local",[[1,2696,"树"]],[2696,2696],[2697,2697]]],[1528095665270,["Re@Re.local",[[-1,2696,"树"]],[2697,2697],[2696,2696]]],[1528095681023,["Re@Re.local",[[1,2696,"数是**|V|_2*"]],[2696,2696],[2706,2706]]],[1528095741188,[null,[[-1,2285,"（"],[1,2286,"中"]],[2285,2285],[2287,2287]]],[1528095741188,[null,[[1,2285,"（"],[-1,2285,"中"]],[2287,2287],[2285,2285]]],[1528095683588,["Re@Re.local",[[-1,2705,"**"]],[2707,2707],[2705,2705]]],[1528095684350,["Re@Re.local",[[1,2705,"$"]],[2705,2705],[2706,2706]]],[1528095686215,["Re@Re.local",[[-1,2698,"**"]],[2700,2700],[2698,2698]]],[1528095686850,["Re@Re.local",[[1,2698,"$"]],[2698,2698],[2699,2699]]],[1528095692869,["Re@Re.local",[[1,2705,"。顶点"]],[2699,2699],[2708,2708]]],[1528095693712,["Re@Re.local",[[-1,2706,"顶点"]],[2708,2708],[2706,2706]]],[1528095696883,["Re@Re.local",[[1,2706,"当每个顶级"]],[2706,2706],[2711,2711]]],[1528095697225,["Re@Re.local",[[-1,2709,"顶级"]],[2711,2711],[2709,2709]]],[1528095699683,["Re@Re.local",[[1,2709,"顶点斗鱼"]],[2709,2709],[2713,2713]]],[1528095700216,["Re@Re.local",[[-1,2711,"斗鱼"]],[2713,2713],[2711,2711]]],[1528095712435,["Re@Re.local",[[1,2711,"都与另外每一个顶点相连时，噶"]],[2711,2711],[2725,2725]]],[1528095712573,["Re@Re.local",[[-1,2724,"噶"]],[2725,2725],[2724,2724]]],[1528095738717,["Re@Re.local",[[1,2724,"则该矩阵被填满了。很少"]],[2724,2724],[2735,2735]]],[1528095739622,["Re@Re.local",[[-1,2705,"。当"]],[2707,2707],[2705,2705]]],[1528095740877,["Re@Re.local",[[1,2705,"。当"]],[2705,2705],[2707,2707]]],[1528095808952,[null,[[-1,2285,"（"],[1,2286,"中"]],[2285,2285],[2287,2287]]],[1528095808952,[null,[[1,2285,"（"],[-1,2285,"中"]],[2287,2287],[2285,2285]]],[1528095741368,["Re@Re.local",[[-1,2724,"则该矩阵被填满了。很少"]],[2735,2735],[2724,2724]]],[1528095742771,["Re@Re.local",[[1,2724,"则该矩阵被填满了。很少"]],[2724,2724],[2735,2735]]],[1528095743885,["Re@Re.local",[[-1,2733,"很少"]],[2735,2735],[2733,2733]]],[1528095746408,["Re@Re.local",[[1,2733,"实际"]],[2733,2733],[2735,2735]]],[1528095749069,["Re@Re.local",[[-1,2733,"实际"]],[2735,2735],[2733,2733]]],[1528095754485,["Re@Re.local",[[1,2733,"实践中很少会有"]],[2733,2733],[2740,2740]]],[1528095929819,[null,[[-1,2285,"（"],[1,2286,"中"]],[2285,2285],[2287,2287]]],[1528095929819,[null,[[1,2285,"（"],[-1,2285,"中"]],[2287,2287],[2285,2285]]],[1528095872079,["Re@Re.local",[[1,2740,"zh"]],[2743,2743],[2742,2742]]],[1528095872452,["Re@Re.local",[[-1,2740,"zh"]],[2742,2742],[2740,2740]]],[1528096111644,[null,[[-1,2285,"（"],[1,2286,"中"]],[2285,2285],[2287,2287]]],[1528096111644,[null,[[1,2285,"（"],[-1,2285,"中"]],[2287,2287],[2285,2285]]],[1528096084600,["Re@Re.local",[[-1,2739,"有"]],[2740,2740],[2739,2739]]],[1528096089261,["Re@Re.local",[[1,2739,"遇到这种情况的问题。"]],[2739,2739],[2749,2749]]],[1528096092026,["Re@Re.local",[[-1,2741,"这种情况的问题。"]],[2749,2749],[2741,2741]]],[1528096096877,["Re@Re.local",[[1,2741,"以这种方式连接的实际"]],[2741,2741],[2751,2751]]],[1528096097973,["Re@Re.local",[[-1,2749,"实际"]],[2751,2751],[2749,2749]]],[1528096111273,["Re@Re.local",[[1,2749,"问题。本章研究的所有无奈人体"]],[2749,2749],[2763,2763]]],[1528096171628,[null,[[-1,2285,"（"],[1,2286,"中"]],[2285,2285],[2287,2287]]],[1528096171629,[null,[[1,2285,"（"],[-1,2285,"中"]],[2287,2287],[2285,2285]]],[1528096113487,["Re@Re.local",[[-1,2759,"无奈人体"]],[2763,2763],[2759,2759]]],[1528096127646,["Re@Re.local",[[1,2759,"问题都是稀疏图。"]],[2759,2759],[2767,2767]]],[1528096127989,["Re@Re.local",[[1,2767,"\n\n"]],[2767,2767],[2768,2768]]],[1528096128201,["Re@Re.local",[[1,2769,"\n"]],[2768,2768],[2769,2769]]],[1528096148659,["Re@Re.local",[[-1,2769,"\n"],[1,2770,"## 7.5 邻接列表 ##"]],[2769,2769],[2783,2783]]],[1528096231640,[null,[[-1,2285,"（"],[1,2286,"中"]],[2285,2285],[2287,2287]]],[1528096231640,[null,[[1,2285,"（"],[-1,2285,"中"]],[2287,2287],[2285,2285]]],[1528096174701,["Re@Re.local",[[1,2780,"邻接表（adjacency list）"]],[2780,2780],[2799,2799]]],[1528096179545,["Re@Re.local",[[-1,2776,"邻接列表"]],[2780,2780],[2776,2776]]],[1528096181043,["Re@Re.local",[[1,2798,"\n\n"]],[2798,2798],[2799,2799]]],[1528096181430,["Re@Re.local",[[1,2800,"\n"]],[2799,2799],[2800,2800]]],[1528096182485,["Re@Re.local",[[-1,2800,"\n"]],[2800,2800],[0,0]]],[1528096183843,["Re@Re.local",[[-1,2799,"\n"],[1,2800,"c"]],[0,0],[2799,2800]]],[1528096184010,["Re@Re.local",[[1,2800,"h"]],[2799,2800],[2799,2801]]],[1528096184185,["Re@Re.local",[[1,2801,"u"]],[2799,2801],[2799,2802]]],[1528096184378,["Re@Re.local",[[1,2802," l"]],[2799,2802],[2799,2804]]],[1528096184554,["Re@Re.local",[[1,2804,"i"]],[2799,2804],[2799,2805]]],[1528096184695,["Re@Re.local",[[-1,2799,"chu li"],[1,2805,"处理"]],[2799,2805],[2801,2801]]],[1528096185458,["Re@Re.local",[[-1,2800,"理"]],[2801,2801],[2800,2800]]],[1528096185616,["Re@Re.local",[[-1,2799,"处"],[1,2800,"\n"]],[2800,2800],[2799,2799]]],[1528096185832,["Re@Re.local",[[1,2800,"\n"]],[2799,2799],[2800,2800]]],[1528096191979,["Re@Re.local",[[-1,2800,"\n"],[1,2801,"处理稀疏图的更"]],[2800,2800],[2807,2807]]],[1528096201618,["Re@Re.local",[[-1,2800,"处理稀疏图的更"]],[2807,2807],[2800,2800]]],[1528096202361,["Re@Re.local",[[1,2800,"\n\n"]],[2800,2800],[2801,2801]]],[1528096204737,["Re@Re.local",[[-1,2801,"\n"],[1,2802,"空间"]],[2801,2801],[2803,2803]]],[1528096208498,["Re@Re.local",[[-1,2801,"空间"]],[2803,2803],[2801,2801]]],[1528096208924,["Re@Re.local",[[-1,2800,"\n"]],[2801,2801],[2800,2800]]],[1528096209375,["Re@Re.local",[[1,2800,"\n\n"]],[2800,2800],[2801,2801]]],[1528096217351,["Re@Re.local",[[-1,2801,"\n"],[1,2802,"消耗空间更少的实现"]],[2801,2801],[2810,2810]]],[1528096218048,["Re@Re.local",[[-1,2807,"的实现"]],[2810,2810],[2807,2807]]],[1528096219698,["Re@Re.local",[[1,2807,"地"]],[2807,2807],[2808,2808]]],[1528096222814,["Re@Re.local",[[-1,2801,"消耗空间更少地"]],[2808,2808],[2801,2801]]],[1528096223043,["Re@Re.local",[[-1,2800,"\n"],[1,2801,"s"]],[2801,2801],[2800,2801]]],[1528096223223,["Re@Re.local",[[1,2801,"h"]],[2800,2801],[2800,2802]]],[1528096223294,["Re@Re.local",[[1,2802,"i"]],[2800,2802],[2800,2803]]],[1528096223452,["Re@Re.local",[[1,2803," y"]],[2800,2803],[2800,2805]]],[1528096223569,["Re@Re.local",[[1,2805,"o"]],[2800,2805],[2800,2806]]],[1528096223720,["Re@Re.local",[[1,2806,"n"]],[2800,2806],[2800,2807]]],[1528096223811,["Re@Re.local",[[1,2807,"g"]],[2800,2807],[2800,2808]]],[1528096225596,["Re@Re.local",[[-1,2800,"shi yong"],[1,2808,"使用领结标"]],[2800,2808],[2805,2805]]],[1528096226742,["Re@Re.local",[[-1,2800,"使用领结标"]],[2805,2805],[2800,2800]]],[1528096227032,["Re@Re.local",[[-1,2799,"\n"],[1,2800,"l"]],[2800,2800],[2799,2800]]],[1528096227237,["Re@Re.local",[[1,2800,"i"]],[2799,2800],[2799,2801]]],[1528096227516,["Re@Re.local",[[-1,2799,"li"],[1,2801,"李"]],[2799,2801],[2800,2800]]],[1528096227651,["Re@Re.local",[[-1,2799,"李"],[1,2800,"\n"]],[2800,2800],[2799,2799]]],[1528096228121,["Re@Re.local",[[1,2800,"\n"]],[2799,2799],[2800,2800]]],[1528096230060,["Re@Re.local",[[-1,2800,"\n"],[1,2801,"邻接表可以"]],[2800,2800],[2805,2805]]],[1528096291687,[null,[[-1,2285,"（"],[1,2286,"中"]],[2285,2285],[2287,2287]]],[1528096291687,[null,[[1,2285,"（"],[-1,2285,"中"]],[2287,2287],[2285,2285]]],[1528096238269,["Re@Re.local",[[1,2805,"用更少的空间实现稀疏图。"]],[2805,2805],[2817,2817]]],[1528096239484,["Re@Re.local",[[1,2817,"\n\n"]],[2817,2817],[2818,2818]]],[1528096239934,["Re@Re.local",[[-1,2818,"\n"]],[2818,2818],[2817,2817]]],[1528096245715,["Re@Re.local",[[1,2817,"邻接表将"]],[2817,2817],[2821,2821]]],[1528096256806,["Re@Re.local",[[-1,2817,"邻接表将"]],[2821,2821],[2817,2817]]],[1528096268126,["Re@Re.local",[[1,2817,"在邻接表的实现方法"]],[2817,2817],[2826,2826]]],[1528096268578,["Re@Re.local",[[-1,2824,"方法"]],[2826,2826],[2824,2824]]],[1528096277476,["Re@Re.local",[[1,2824,"中，先"]],[2824,2824],[2827,2827]]],[1528096277640,["Re@Re.local",[[-1,2826,"先"]],[2827,2827],[2826,2826]]],[1528096282452,["Re@Re.local",[[1,2826,"保存一个"]],[2826,2826],[2830,2830]]],[1528096283692,["Re@Re.local",[[-1,2826,"保存一个"]],[2830,2830],[2826,2826]]],[1528096285653,["Re@Re.local",[[1,2826,"维护一个"]],[2826,2826],[2830,2830]]],[1528096351647,[null,[[-1,2285,"（"],[1,2286,"中"]],[2285,2285],[2287,2287]]],[1528096351648,[null,[[1,2285,"（"],[-1,2285,"中"]],[2287,2287],[2285,2285]]],[1528096292837,["Re@Re.local",[[1,2830,"包含所"]],[2830,2830],[2833,2833]]],[1528096292954,["Re@Re.local",[[-1,2832,"所"]],[2833,2833],[2832,2832]]],[1528096294016,["Re@Re.local",[[1,2832,"图的"]],[2832,2832],[2834,2834]]],[1528096294238,["Re@Re.local",[[-1,2833,"的"]],[2834,2834],[2833,2833]]],[1528096298223,["Re@Re.local",[[1,2833,"对象所有顶点的列表（"]],[2833,2833],[2843,2843]]],[1528096300148,["Re@Re.local",[[-1,2840,"列表（"]],[2843,2843],[2840,2840]]],[1528096301259,["Re@Re.local",[[1,2840,"住"]],[2840,2840],[2841,2841]]],[1528096301589,["Re@Re.local",[[-1,2840,"住"]],[2841,2841],[2840,2840]]],[1528096306499,["Re@Re.local",[[1,2840,"主列表（"]],[2840,2840],[2844,2844]]],[1528096308265,["Re@Re.local",[[-1,2841,"列表（"]],[2844,2844],[2841,2841]]],[1528096315280,["Re@Re.local",[[1,2841,"列表，然后每"]],[2841,2841],[2847,2847]]],[1528096315395,["Re@Re.local",[[-1,2846,"每"]],[2847,2847],[2846,2846]]],[1528096317168,["Re@Re.local",[[1,2846,"对"]],[2846,2846],[2847,2847]]],[1528096317324,["Re@Re.local",[[-1,2846,"对"]],[2847,2847],[2846,2846]]],[1528096349724,["Re@Re.local",[[1,2846,"图对象中各个顶点对象都维护一个它"]],[2846,2846],[2862,2862]]],[1528096411649,[null,[[-1,2285,"（"],[1,2286,"中"]],[2285,2285],[2287,2287]]],[1528096411649,[null,[[1,2285,"（"],[-1,2285,"中"]],[2287,2287],[2285,2285]]],[1528096351813,["Re@Re.local",[[1,2862,"连"]],[2862,2862],[2863,2863]]],[1528096352068,["Re@Re.local",[[-1,2861,"它连"]],[2863,2863],[2861,2861]]],[1528096369782,["Re@Re.local",[[1,2861,"该对象连接的其它顶点对象的列表。在这种"]],[2861,2861],[2880,2880]]],[1528096371307,["Re@Re.local",[[-1,2878,"这种"]],[2880,2880],[2878,2878]]],[1528096391404,["Re@Re.local",[[1,2878,"Vertex类的实现中，使用字典而不是列表"]],[2878,2878],[2899,2899]]],[1528096394150,["Re@Re.local",[[1,2890,"将"]],[2890,2890],[2891,2891]]],[1528096409785,["Re@Re.local",[[1,2900,"，其中字典的键为顶点，值为权重。图4"]],[2900,2900],[2918,2918]]],[1528096471659,[null,[[-1,2285,"（"],[1,2286,"中"]],[2285,2285],[2287,2287]]],[1528096471659,[null,[[1,2285,"（"],[-1,2285,"中"]],[2287,2287],[2285,2285]]],[1528096425466,["Re@Re.local",[[1,2918,"给出了图2的邻接表实现。"]],[2918,2918],[2930,2930]]],[1528096425766,["Re@Re.local",[[1,2931,"\n"]],[2930,2930],[2931,2931]]],[1528096426849,["Re@Re.local",[[-1,2931,"\n"]],[2931,2931],[2930,2930]]],[1528096427420,["Re@Re.local",[[-1,2929,"。"]],[2930,2930],[2929,2929]]],[1528096428527,["Re@Re.local",[[1,2929,"示意图。"]],[2929,2929],[2933,2933]]],[1528096428794,["Re@Re.local",[[1,2934,"\n"]],[2933,2933],[2934,2934]]],[1528096434786,["Re@Re.local",[[1,2934,"![../_images/adjlist.png](http://interactivepython.org/courselib/static/pythonds/_images/adjlist.png)"]],[2934,2934],[3035,3035]]],[1528096457189,["Re@Re.local",[[1,3036,"\n"]],[3035,3035],[3036,3036]]],[1528096457640,["Re@Re.local",[[1,3037,"\n"]],[3036,3036],[3037,3037]]],[1528096462697,["Re@Re.local",[[-1,3037,"\n"],[1,3038,"邻接表的有时在于"]],[3037,3037],[3045,3045]]],[1528096531691,[null,[[-1,2285,"（"],[1,2286,"中"]],[2285,2285],[2287,2287]]],[1528096531691,[null,[[1,2285,"（"],[-1,2285,"中"]],[2287,2287],[2285,2285]]],[1528096474783,["Re@Re.local",[[1,3045,"它可以高效地"]],[3045,3045],[3051,3051]]],[1528096475976,["Re@Re.local",[[-1,3048,"高效地"]],[3051,3051],[3048,3048]]],[1528096481968,["Re@Re.local",[[1,3048,"紧凑地表示稀疏图。"]],[3048,3048],[3057,3057]]],[1528096483642,["Re@Re.local",[[-1,3056,"。"]],[3057,3057],[3056,3056]]],[1528096487457,["Re@Re.local",[[1,3056,"，稀疏图也"]],[3056,3056],[3061,3061]]],[1528096488798,["Re@Re.local",[[-1,3057,"稀疏图也"]],[3061,3061],[3057,3057]]],[1528096492755,["Re@Re.local",[[1,3057,"利用稀疏图也可以更"]],[3057,3057],[3066,3066]]],[1528096496176,["Re@Re.local",[[-1,3063,"可以更"]],[3066,3066],[3063,3063]]],[1528096496926,["Re@Re.local",[[1,3063,"和"]],[3063,3063],[3064,3064]]],[1528096496958,["Re@Re.local",[[-1,3063,"和"]],[3064,3064],[3063,3063]]],[1528096512261,["Re@Re.local",[[1,3063,"可以轻松地找到某1顶点"]],[3063,3063],[3074,3074]]],[1528096515823,["Re@Re.local",[[-1,3070,"某1顶点"]],[3074,3074],[3070,3070]]],[1528096520361,["Re@Re.local",[[1,3070,"某个顶点搜有的比啊"]],[3070,3070],[3079,3079]]],[1528096521426,["Re@Re.local",[[-1,3074,"搜有的比啊"]],[3079,3079],[3074,3074]]],[1528096530439,["Re@Re.local",[[1,3074,"所有的边。"]],[3074,3074],[3079,3079]]],[1528096591665,[null,[[-1,2285,"（"],[1,2286,"中"]],[2285,2285],[2287,2287]]],[1528096591665,[null,[[1,2285,"（"],[-1,2285,"中"]],[2287,2287],[2285,2285]]],[1528096536475,["Re@Re.local",[[-1,3077,"边。"]],[3079,3079],[3077,3077]]],[1528096539425,["Re@Re.local",[[1,3077,"连接情况。"]],[3077,3077],[3082,3082]]],[1528096539754,["Re@Re.local",[[1,3082,"\n\n"]],[3082,3082],[3083,3083]]],[1528096539967,["Re@Re.local",[[1,3084,"\n"]],[3083,3083],[3084,3084]]],[1528096541575,["Re@Re.local",[[-1,3084,"\n"],[1,3085,"## 6"]],[3084,3084],[3088,3088]]],[1528096541926,["Re@Re.local",[[-1,3087,"6"]],[3088,3088],[3087,3087]]],[1528096542432,["Re@Re.local",[[1,3087,"7/"]],[3087,3087],[3089,3089]]],[1528096542938,["Re@Re.local",[[-1,3088,"/"]],[3089,3089],[3088,3088]]],[1528096543582,["Re@Re.local",[[1,3088,"。6 "]],[3088,3088],[3091,3091]]],[1528096544343,["Re@Re.local",[[-1,3088,"。6 "]],[3091,3091],[3088,3088]]],[1528096548411,["Re@Re.local",[[1,3088,".6 实现 ##"]],[3088,3088],[3096,3096]]],[1528096548616,["Re@Re.local",[[1,3096,"\n\n"]],[3096,3096],[3097,3097]]],[1528096549468,["Re@Re.local",[[1,3098,"\n"]],[3097,3097],[3098,3098]]],[1528096564574,["Re@Re.local",[[-1,3098,"\n"],[1,3099,"使用字典可以很容易地在Python中实现邻接表算法"]],[3098,3098],[3123,3123]]],[1528096564935,["Re@Re.local",[[-1,3121,"算法"]],[3123,3123],[3121,3121]]],[1528096565547,["Re@Re.local",[[1,3121,"。"]],[3121,3121],[3122,3122]]],[1528096831846,[null,[[-1,2285,"（"],[1,2286,"中"]],[2285,2285],[2287,2287]]],[1528096831846,[null,[[1,2285,"（"],[-1,2285,"中"]],[2287,2287],[2285,2285]]],[1528096781354,["Re@Re.local",[[-1,3121,"。"]],[3122,3122],[3121,3121]]],[1528096787185,["Re@Re.local",[[1,3121,"。在本书的"]],[3121,3121],[3126,3126]]],[1528096789711,["Re@Re.local",[[-1,3125,"的"]],[3126,3126],[3125,3125]]],[1528096795069,["Re@Re.local",[[1,3125,"的实现中"]],[3125,3125],[3129,3129]]],[1528096795190,["Re@Re.local",[[-1,3128,"中"]],[3129,3129],[3128,3128]]],[1528096810088,["Re@Re.local",[[1,3128,"中会创建两个类（代码1、代码2），Graph，它"]],[3128,3128],[3152,3152]]],[1528096812412,["Re@Re.local",[[-1,3150,"，它"]],[3152,3152],[3150,3150]]],[1528096822297,["Re@Re.local",[[1,3150,"保存顶点的祝列表，和"]],[3150,3150],[3160,3160]]],[1528096822646,["Re@Re.local",[[-1,3158,"，和"]],[3160,3160],[3158,3158]]],[1528096828527,["Re@Re.local",[[1,3158,"，而Vertex保存"]],[3158,3158],[3168,3168]]],[1528096829270,["Re@Re.local",[[-1,3166,"保存"]],[3168,3168],[3166,3166]]],[1528096891687,[null,[[-1,2285,"（"],[1,2286,"中"]],[2285,2285],[2287,2287]]],[1528096891688,[null,[[1,2285,"（"],[-1,2285,"中"]],[2287,2287],[2285,2285]]],[1528096836004,["Re@Re.local",[[1,3166,"即图中每个顶点。"]],[3166,3166],[3174,3174]]],[1528096836338,["Re@Re.local",[[1,3174,"\n\n"]],[3174,3174],[3175,3175]]],[1528096836599,["Re@Re.local",[[1,3176,"\n"]],[3175,3175],[3176,3176]]],[1528096858871,["Re@Re.local",[[-1,3176,"\n"],[1,3177,"每个Vertex都使用字典来保存其连接的对象以及权重"]],[3176,3176],[3202,3202]]],[1528096859152,["Re@Re.local",[[-1,3200,"权重"]],[3202,3202],[3200,3200]]],[1528096879797,["Re@Re.local",[[1,3200,"每条边的权重。该字典被称之为connectedTo，"]],[3200,3200],[3226,3226]]],[1528096881879,["Re@Re.local",[[-1,3212,"之为"]],[3214,3214],[3212,3212]]],[1528096883093,["Re@Re.local",[[1,3212,"民营"]],[3212,3212],[3214,3214]]],[1528096883580,["Re@Re.local",[[-1,3211,"称民营"]],[3214,3214],[3211,3211]]],[1528096885712,["Re@Re.local",[[1,3211,"命名为"]],[3211,3211],[3214,3214]]],[1528096887227,["Re@Re.local",[[-1,3225,"，"]],[3226,3226],[3225,3225]]],[1528096891129,["Re@Re.local",[[1,3225,"。以下代码"]],[3225,3225],[3230,3230]]],[1528096891606,["Re@Re.local",[[-1,3229,"码"]],[3230,3230],[3229,3229]]],[1528096951693,[null,[[-1,2285,"（"],[1,2286,"中"]],[2285,2285],[2287,2287]]],[1528096951693,[null,[[1,2285,"（"],[-1,2285,"中"]],[2287,2287],[2285,2285]]],[1528096892285,["Re@Re.local",[[-1,3228,"代"]],[3229,3229],[3228,3228]]],[1528096901295,["Re@Re.local",[[1,3228,"代码便是Vertex类的实现。构造器只是"]],[3228,3228],[3248,3248]]],[1528096901740,["Re@Re.local",[[-1,3246,"只是"]],[3248,3248],[3246,3246]]],[1528096929863,["Re@Re.local",[[1,3246,"只是初始化了id，它可以是字符串"]],[3246,3246],[3262,3262]]],[1528096938019,["Re@Re.local",[[-1,3252,"id，它可以是字符串"]],[3262,3262],[3252,3252]]],[1528096951507,["Re@Re.local",[[1,3252,"可以是字符串的id以及connectedTo字典。add"]],[3252,3252],[3280,3280]]],[1528097011697,[null,[[-1,2285,"（"],[1,2286,"中"]],[2285,2285],[2287,2287]]],[1528097011697,[null,[[1,2285,"（"],[-1,2285,"中"]],[2287,2287],[2285,2285]]],[1528096953309,["Re@Re.local",[[1,3280,"Neighbr"]],[3280,3280],[3287,3287]]],[1528096953612,["Re@Re.local",[[-1,3286,"r"]],[3287,3287],[3286,3286]]],[1528096967253,["Re@Re.local",[[1,3286,"or方法用来添加从该vert"]],[3286,3286],[3300,3300]]],[1528096968161,["Re@Re.local",[[-1,3296,"vert"]],[3300,3300],[3296,3296]]],[1528096972846,["Re@Re.local",[[1,3296,"顶点到另一顶点的俩"]],[3296,3296],[3305,3305]]],[1528096972978,["Re@Re.local",[[-1,3304,"俩"]],[3305,3305],[3304,3304]]],[1528096986906,["Re@Re.local",[[1,3304,"连接。getConnections方法返回当前"]],[3304,3304],[3327,3327]]],[1528097071704,[null,[[-1,2285,"（"],[1,2286,"中"]],[2285,2285],[2287,2287]]],[1528097071704,[null,[[1,2285,"（"],[-1,2285,"中"]],[2287,2287],[2285,2285]]],[1528097041963,["Re@Re.local",[[-1,3323,"返回当前"]],[3327,3327],[3323,3323]]],[1528097044359,["Re@Re.local",[[1,3323,"返回当前"]],[3323,3323],[3327,3327]]],[1528097131701,[null,[[-1,2285,"（"],[1,2286,"中"]],[2285,2285],[2287,2287]]],[1528097131701,[null,[[1,2285,"（"],[-1,2285,"中"]],[2287,2287],[2285,2285]]],[1528097078910,["Re@Re.local",[[1,3327,"节点在"]],[3327,3327],[3330,3330]]],[1528097080303,["Re@Re.local",[[-1,3329,"在"]],[3330,3330],[3329,3329]]],[1528097081516,["Re@Re.local",[[1,3329,"的"]],[3329,3329],[3330,3330]]],[1528097087867,["Re@Re.local",[[-1,3325,"当前节点的"]],[3330,3330],[3325,3325]]],[1528097099373,["Re@Re.local",[[1,3325,"当前节点的邻接表中的所有解"]],[3325,3325],[3338,3338]]],[1528097099619,["Re@Re.local",[[-1,3337,"解"]],[3338,3338],[3337,3337]]],[1528097104197,["Re@Re.local",[[1,3337,"顶点，就"]],[3337,3337],[3341,3341]]],[1528097104316,["Re@Re.local",[[-1,3340,"就"]],[3341,3341],[3340,3340]]],[1528097111394,["Re@Re.local",[[1,3330,"con"]],[3330,3330],[3333,3333]]],[1528097111796,["Re@Re.local",[[-1,3332,"n"]],[3333,3333],[3332,3332]]],[1528097118094,["Re@Re.local",[[1,3332,"nnectedTo实例变量"]],[3332,3332],[3345,3345]]],[1528097125366,["Re@Re.local",[[1,3330,"表示"]],[3330,3330],[3332,3332]]],[1528097125893,["Re@Re.local",[[-1,3330,"表示"]],[3332,3332],[3330,3330]]],[1528097129718,["Re@Re.local",[[1,3345,"保存的"]],[3345,3345],[3348,3348]]],[1528097191779,[null,[[-1,2285,"（"],[1,2286,"中"]],[2285,2285],[2287,2287]]],[1528097191780,[null,[[1,2285,"（"],[-1,2285,"中"]],[2287,2287],[2285,2285]]],[1528097133181,["Re@Re.local",[[-1,3329,"的"]],[3330,3330],[3329,3329]]],[1528097134574,["Re@Re.local",[[-1,3356,"，"]],[3357,3357],[3356,3356]]],[1528097153548,["Re@Re.local",[[1,3356,"。getWeight方法返回从该节点到另一个"]],[3356,3356],[3378,3378]]],[1528097154374,["Re@Re.local",[[-1,3376,"一个"]],[3378,3378],[3376,3376]]],[1528097165146,["Re@Re.local",[[1,3376,"一个作为参数传入的节点的边的权重。"]],[3376,3376],[3393,3393]]],[1528097165448,["Re@Re.local",[[1,3393,"\n\n"]],[3393,3393],[3394,3394]]],[1528097165658,["Re@Re.local",[[1,3395,"\n"]],[3394,3394],[3395,3395]]],[1528097169531,["Re@Re.local",[[-1,3395,"\n"],[1,3396,"**代码1**"]],[3395,3395],[3402,3402]]],[1528097169816,["Re@Re.local",[[1,3402,"\n\n"]],[3402,3402],[3403,3403]]],[1528097171593,["Re@Re.local",[[-1,3403,"\n"],[1,3404,"```Pythion"]],[3403,3403],[3413,3413]]],[1528097176508,["Re@Re.local",[[1,3413,"\n\nclass Vertex:\n    def __init__(self,key):\n        self.id = key\n        self.connectedTo = {}\n\n    def addNeighbor(self,nbr,weight=0):\n        self.connectedTo[nbr] = weight\n\n    def __str__(self):\n        return str(self.id) + ' connectedTo: ' + str([x.id for x in self.connectedTo])\n\n    def getConnections(self):\n        return self.connectedTo.keys()\n\n    def getId(self):\n        return self.id\n\n    def getWeight(self,nbr):\n        return self.connectedTo[nbr]"]],[3413,3413],[3880,3880]]],[1528097176636,["Re@Re.local",[[1,3881,"\n"]],[3880,3880],[3881,3881]]],[1528097177248,["Re@Re.local",[[-1,3881,"\n"],[1,3882,"```"]],[3881,3881],[3884,3884]]],[1528097177438,["Re@Re.local",[[1,3884,"\n\n"]],[3884,3884],[3885,3885]]],[1528097187820,["Re@Re.local",[[-1,3885,"\n"],[1,3886,"Graph类，如下代码"]],[3885,3885],[3896,3896]]],[1528097188104,["Re@Re.local",[[-1,3894,"代码"]],[3896,3896],[3894,3894]]],[1528097189295,["Re@Re.local",[[1,3894,"卖弄的大"]],[3894,3894],[3898,3898]]],[1528097189903,["Re@Re.local",[[-1,3894,"卖弄的大"]],[3898,3898],[3894,3894]]],[1528097191542,["Re@Re.local",[[1,3894,"面的代码"]],[3894,3894],[3898,3898]]],[1528097251718,[null,[[-1,2285,"（"],[1,2286,"中"],[-1,3414,"\n"],[1,3881,"\n"]],[2285,2285],[3882,3882]]],[1528097251718,[null,[[1,2285,"（"],[-1,2285,"中"],[1,3414,"\n"],[-1,3880,"\n"]],[3882,3882],[2285,2285]]],[1528097211091,["Re@Re.local",[[1,3898,"所示，是"]],[3898,3898],[3902,3902]]],[1528097211630,["Re@Re.local",[[-1,3901,"是"]],[3902,3902],[3901,3901]]],[1528097217500,["Re@Re.local",[[1,3901,"保存了1个map"]],[3901,3901],[3909,3909]]],[1528097218568,["Re@Re.local",[[-1,3906,"map"]],[3909,3909],[3906,3906]]],[1528097220503,["Re@Re.local",[[1,3906,"Map对象"]],[3906,3906],[3911,3911]]],[1528097223017,["Re@Re.local",[[-1,3904,"1个Map对象"]],[3911,3911],[3904,3904]]],[1528097235868,["Re@Re.local",[[1,3904,"一个字典，将顶点名与顶点对象"]],[3904,3904],[3918,3918]]],[1528097238619,["Re@Re.local",[[-1,3913,"与"]],[3914,3914],[3913,3913]]],[1528097240119,["Re@Re.local",[[1,3913,"映射到"]],[3913,3913],[3916,3916]]],[1528097249303,["Re@Re.local",[[1,3920,"。在图4中，字典对象通过"]],[3920,3920],[3932,3932]]],[1528097311726,[null,[[-1,2285,"（"],[1,2286,"中"],[-1,3414,"\n"],[1,3881,"\n"]],[2285,2285],[3882,3882]]],[1528097311726,[null,[[1,2285,"（"],[-1,2285,"中"],[1,3414,"\n"],[-1,3880,"\n"]],[3882,3882],[2285,2285]]],[1528097260977,["Re@Re.local",[[1,3926,"该"]],[3926,3926],[3927,3927]]],[1528097262370,["Re@Re.local",[[-1,3931,"通过"]],[3933,3933],[3931,3931]]],[1528097265869,["Re@Re.local",[[1,3931,"表示为灰色"]],[3931,3931],[3936,3936]]],[1528097275690,["Re@Re.local",[[-1,3934,"灰色"]],[3936,3936],[3934,3934]]],[1528097277759,["Re@Re.local",[[1,3934,"阴影"]],[3934,3934],[3936,3936]]],[1528097279865,["Re@Re.local",[[1,3934,"灰色"]],[3934,3934],[3936,3936]]],[1528097297860,["Re@Re.local",[[1,3938,"框。Graph类也听过了方法用于天街顶点以及"]],[3938,3938],[3960,3960]]],[1528097300367,["Re@Re.local",[[-1,3954,"天街顶点以及"]],[3960,3960],[3954,3954]]],[1528097310415,["Re@Re.local",[[1,3954,"添加顶点和连接顶点。此外，__iter"]],[3954,3954],[3973,3973]]],[1528097311518,["Re@Re.local",[[-1,3967,"__iter"]],[3973,3973],[3967,3967]]],[1528097371726,[null,[[-1,2285,"（"],[1,2286,"中"],[-1,3414,"\n"],[1,3881,"\n"]],[2285,2285],[3882,3882]]],[1528097371726,[null,[[1,2285,"（"],[-1,2285,"中"],[1,3414,"\n"],[-1,3880,"\n"]],[3882,3882],[2285,2285]]],[1528097313247,["Re@Re.local",[[1,3968,"_\\-"]],[3968,3968],[3971,3971]]],[1528097313501,["Re@Re.local",[[-1,3970,"-"]],[3971,3971],[3970,3970]]],[1528097318498,["Re@Re.local",[[1,3970,"_iter\\_\\_方法"]],[3970,3970],[3981,3981]]],[1528097322576,["Re@Re.local",[[1,3967,"实现了"]],[3967,3967],[3970,3970]]],[1528097332953,["Re@Re.local",[[1,3984,"来使得在对某个图"]],[3984,3984],[3992,3992]]],[1528097334489,["Re@Re.local",[[-1,3987,"在对某个图"]],[3992,3992],[3987,3987]]],[1528097338966,["Re@Re.local",[[1,3987,"可以在图中对某个"]],[3987,3987],[3995,3995]]],[1528097339566,["Re@Re.local",[[-1,3993,"某个"]],[3995,3995],[3993,3993]]],[1528097371439,["Re@Re.local",[[1,3993,"所有顶点对象进行迭代。这两种方法可以用来实现"]],[3993,3993],[4015,4015]]],[1528097431726,[null,[[-1,2285,"（"],[1,2286,"中"],[-1,3414,"\n"],[1,3881,"\n"],[1,3970,"\\"],[-1,3972,"-"]],[2285,2285],[3972,3972]]],[1528097431726,[null,[[1,2285,"（"],[-1,2285,"中"],[1,3414,"\n"],[-1,3880,"\n"],[-1,3970,"\\"],[1,3973,"-"]],[3972,3972],[2285,2285]]],[1528097378322,["Re@Re.local",[[1,4015,"图中顶点的迭代"]],[4015,4015],[4022,4022]]],[1528097390085,["Re@Re.local",[[1,4015,"对"]],[4015,4015],[4016,4016]]],[1528097394295,["Re@Re.local",[[1,4015,"按明晨"]],[4015,4015],[4018,4018]]],[1528097395153,["Re@Re.local",[[-1,4016,"明晨"]],[4018,4018],[4016,4016]]],[1528097401769,["Re@Re.local",[[1,4016,"名称或者是象对本身来"]],[4016,4016],[4026,4026]]],[1528097403312,["Re@Re.local",[[1,4034,"。"]],[4034,4034],[4035,4035]]],[1528097403605,["Re@Re.local",[[1,4035,"\n\n"]],[4035,4035],[4036,4036]]],[1528097403817,["Re@Re.local",[[1,4037,"\n"]],[4036,4036],[4037,4037]]],[1528097409075,["Re@Re.local",[[-1,4037,"\n"],[1,4038,"**代码2**"]],[4037,4037],[4044,4044]]],[1528097409401,["Re@Re.local",[[1,4044,"\n\n"]],[4044,4044],[4045,4045]]],[1528097411340,["Re@Re.local",[[-1,4045,"\n"],[1,4046,"```Python"]],[4045,4045],[4054,4054]]],[1528097420162,["Re@Re.local",[[1,4054,"\n\nclass Graph:\n    def __init__(self):\n        self.vertList = {}\n        self.numVertices = 0\n\n    def addVertex(self,key):\n        self.numVertices = self.numVertices + 1\n        newVertex = Vertex(key)\n        self.vertList[key] = newVertex\n        return newVertex\n\n    def getVertex(self,n):\n        if n in self.vertList:\n            return self.vertList[n]\n        else:\n            return None\n\n    def __contains__(self,n):\n        return n in self.vertList\n\n    def addEdge(self,f,t,cost=0):\n        if f not in self.vertList:\n            nv = self.addVertex(f)\n        if t not in self.vertList:\n            nv = self.addVertex(t)\n        self.vertList[f].addNeighbor(self.vertList[t], cost)\n\n    def getVertices(self):\n        return self.vertList.keys()\n\n    def __iter__(self):\n        return iter(self.vertList.values())"]],[4054,4054],[4888,4888]]],[1528097420675,["Re@Re.local",[[1,4889,"\n"]],[4888,4888],[4889,4889]]],[1528097421662,["Re@Re.local",[[-1,4889,"\n"],[1,4890,"```"]],[4889,4889],[4892,4892]]],[1528098152002,[null,[[-1,2285,"（"],[1,2286,"中"],[-1,3414,"\n"],[1,3881,"\n"],[1,3970,"\\"],[-1,3972,"-"],[-1,4021,"象"],[1,4023,"象"],[-1,4055,"\n"],[-1,4846,""],[1,4889,"\n"]],[2285,2285],[4890,4890]]],[1528098152003,[null,[[1,2285,"（"],[-1,2285,"中"],[1,3414,"\n"],[-1,3880,"\n"],[-1,3970,"\\"],[1,3973,"-"],[1,4021,"象"],[-1,4022,"象"],[1,4055,"\n"],[1,4845,""],[-1,4888,"\n"]],[4890,4890],[2285,2285]]],[1528098131991,["Re@Re.local",[[1,4892,"\n\n"]],[4892,4892],[4893,4893]]],[1528098132223,["Re@Re.local",[[1,4894,"\n"]],[4893,4893],[4894,4894]]],[1528098133257,["Re@Re.local",[[-1,4894,"\n"],[1,4895,"shi"]],[4894,4894],[4897,4897]]],[1528098134068,["Re@Re.local",[[-1,4894,"shi"]],[4897,4897],[4894,4894]]],[1528098135225,["Re@Re.local",[[1,4894,"\n\n"]],[4894,4894],[4895,4895]]],[1528098135944,["Re@Re.local",[[-1,4895,"\n"]],[4895,4895],[0,0]]],[1528098136223,["Re@Re.local",[[-1,4894,"\n"]],[4895,4895],[4894,4894]]],[1528098137128,["Re@Re.local",[[-1,4893,"\n"],[1,4894,"s"]],[4894,4894],[4893,4894]]],[1528098137324,["Re@Re.local",[[1,4894,"h"]],[4893,4894],[4893,4895]]],[1528098137396,["Re@Re.local",[[1,4895,"i"]],[4893,4895],[4893,4896]]],[1528098137539,["Re@Re.local",[[1,4896," y"]],[4893,4896],[4893,4898]]],[1528098137668,["Re@Re.local",[[1,4898,"o"]],[4893,4898],[4893,4899]]],[1528098137794,["Re@Re.local",[[1,4899,"n"]],[4893,4899],[4893,4900]]],[1528098137877,["Re@Re.local",[[1,4900,"g"]],[4893,4900],[4893,4901]]],[1528098139301,["Re@Re.local",[[-1,4893,"shi yong"],[1,4901,"使用刚"]],[4893,4901],[4896,4896]]],[1528098139604,["Re@Re.local",[[-1,4895,"刚"]],[4896,4896],[4895,4895]]],[1528098151320,["Re@Re.local",[[1,4895,"以上定义的Graph"]],[4895,4895],[4905,4905]]],[1528098211767,[null,[[-1,2285,"（"],[1,2286,"中"],[-1,3414,"\n"],[1,3881,"\n"],[1,3970,"\\"],[-1,3972,"-"],[-1,4021,"象"],[1,4023,"象"],[-1,4055,"\n"],[-1,4846,""],[1,4889,"\n"]],[2285,2285],[4890,4890]]],[1528098211767,[null,[[1,2285,"（"],[-1,2285,"中"],[1,3414,"\n"],[-1,3880,"\n"],[-1,3970,"\\"],[1,3973,"-"],[1,4021,"象"],[-1,4022,"象"],[1,4055,"\n"],[1,4845,""],[-1,4888,"\n"]],[4890,4890],[2285,2285]]],[1528098152331,["Re@Re.local",[[1,4906,"v"]],[4906,4906],[4907,4907]]],[1528098152687,["Re@Re.local",[[-1,4906,"v"]],[4907,4907],[4906,4906]]],[1528098173215,["Re@Re.local",[[1,4906,"Vertex类，以下代码边可以表示图2."]],[4906,4906],[4926,4926]]],[1528098173939,["Re@Re.local",[[-1,4925,"."]],[4926,4926],[4925,4925]]],[1528098178194,["Re@Re.local",[[1,4925,"。首先叉"]],[4925,4925],[4929,4929]]],[1528098178283,["Re@Re.local",[[-1,4928,"叉"]],[4929,4929],[4928,4928]]],[1528098181028,["Re@Re.local",[[1,4928,"生辰6个"]],[4928,4928],[4932,4932]]],[1528098181471,["Re@Re.local",[[-1,4929,"辰6个"]],[4932,4932],[4929,4929]]],[1528098182410,["Re@Re.local",[[1,4929,"称6"]],[4929,4929],[4931,4931]]],[1528098184914,["Re@Re.local",[[-1,4928,"生称6"]],[4931,4931],[4928,4928]]],[1528098199675,["Re@Re.local",[[1,4928,"生成6个节点编号0-5，然后像是"]],[4928,4928],[4944,4944]]],[1528098201695,["Re@Re.local",[[-1,4940,"然后像是"]],[4944,4944],[4940,4940]]],[1528098204774,["Re@Re.local",[[1,4940,"查看以下"]],[4940,4940],[4944,4944]]],[1528098208420,["Re@Re.local",[[-1,4942,"以下"]],[4944,4944],[4942,4942]]],[1528098271768,[null,[[-1,2285,"（"],[1,2286,"中"],[-1,3414,"\n"],[1,3881,"\n"],[1,3970,"\\"],[-1,3972,"-"],[-1,4021,"象"],[1,4023,"象"],[-1,4055,"\n"],[1,4889,"\n"],[-1,4905,"v"],[1,4906,"和"]],[2285,2285],[4907,4907]]],[1528098271768,[null,[[1,2285,"（"],[-1,2285,"中"],[1,3414,"\n"],[-1,3880,"\n"],[-1,3970,"\\"],[1,3973,"-"],[1,4021,"象"],[-1,4022,"象"],[1,4055,"\n"],[-1,4888,"\n"],[1,4905,"v"],[-1,4905,"和"]],[4907,4907],[2285,2285]]],[1528098239160,["Re@Re.local",[[1,4942,"顶点字典，注意到对0-5的键都创建了1个Vertex实例。然后，将连接了边"]],[4942,4942],[4979,4979]]],[1528098239279,["Re@Re.local",[[-1,4978,"边"]],[4979,4979],[4978,4978]]],[1528098268202,["Re@Re.local",[[1,4978,"顶点的边集合到一起。最后，使用嵌套循环"]],[4978,4978],[4997,4997]]],[1528098331786,[null,[[-1,2285,"（"],[1,2286,"中"],[-1,3414,"\n"],[1,3881,"\n"],[1,3970,"\\"],[-1,3972,"-"],[-1,4021,"象"],[1,4023,"象"],[-1,4055,"\n"],[1,4889,"\n"],[-1,4905,"v"],[1,4906,"和"]],[2285,2285],[4907,4907]]],[1528098331786,[null,[[1,2285,"（"],[-1,2285,"中"],[1,3414,"\n"],[-1,3880,"\n"],[-1,3970,"\\"],[1,3973,"-"],[1,4021,"象"],[-1,4022,"象"],[1,4055,"\n"],[-1,4888,"\n"],[1,4905,"v"],[-1,4905,"和"]],[4907,4907],[2285,2285]]],[1528098277954,["Re@Re.local",[[1,4997,"确定每个"]],[4997,4997],[5001,5001]]],[1528098278169,["Re@Re.local",[[-1,4999,"每个"]],[5001,5001],[4999,4999]]],[1528098280792,["Re@Re.local",[[1,4999,"图中的美股额即"]],[4999,4999],[5006,5006]]],[1528098281521,["Re@Re.local",[[-1,5002,"美股额即"]],[5006,5006],[5002,5002]]],[1528098283764,["Re@Re.local",[[1,5002,"每个节点"]],[5002,5002],[5006,5006]]],[1528098284126,["Re@Re.local",[[-1,5004,"节点"]],[5006,5006],[5004,5004]]],[1528098291575,["Re@Re.local",[[1,5004,"边都正确存储了。你"]],[5004,5004],[5013,5013]]],[1528098291803,["Re@Re.local",[[-1,5012,"你"]],[5013,5013],[5012,5012]]],[1528098313051,["Re@Re.local",[[1,5012,"读者应该将输出结果与图2作一对比。"]],[5012,5012],[5029,5029]]],[1528098313344,["Re@Re.local",[[1,5029,"\n\n"]],[5029,5029],[5030,5030]]],[1528098316586,["Re@Re.local",[[-1,5030,"\n"],[1,5031,"```Pyho"]],[5030,5030],[5037,5037]]],[1528098317099,["Re@Re.local",[[-1,5035,"ho"]],[5037,5037],[5035,5035]]],[1528098317562,["Re@Re.local",[[1,5035,"thon"]],[5035,5035],[5039,5039]]],[1528098323859,["Re@Re.local",[[1,5039,"\n\n>>> g = Graph()\n>>> for i in range(6):\n...    g.addVertex(i)\n>>> g.vertList\n{0: <adjGraph.Vertex instance at 0x41e18>,\n 1: <adjGraph.Vertex instance at 0x7f2b0>,\n 2: <adjGraph.Vertex instance at 0x7f288>,\n 3: <adjGraph.Vertex instance at 0x7f350>,\n 4: <adjGraph.Vertex instance at 0x7f328>,\n 5: <adjGraph.Vertex instance at 0x7f300>}\n>>> g.addEdge(0,1,5)\n>>> g.addEdge(0,5,2)\n>>> g.addEdge(1,2,4)\n>>> g.addEdge(2,3,9)\n>>> g.addEdge(3,4,7)\n>>> g.addEdge(3,5,3)\n>>> g.addEdge(4,0,1)\n>>> g.addEdge(5,4,8)\n>>> g.addEdge(5,2,1)\n>>> for v in g:\n...    for w in v.getConnections():\n...        print(\"( %s , %s )\" % (v.getId(), w.getId()))\n...\n( 0 , 5 )\n( 0 , 1 )\n( 1 , 2 )\n( 2 , 3 )\n( 3 , 4 )\n( 3 , 5 )\n( 4 , 0 )\n( 5 , 4 )\n( 5 , 2 )"]],[5039,5039],[5765,5765]]],[1528098323992,["Re@Re.local",[[1,5766,"\n"]],[5765,5765],[5766,5766]]],[1528098324580,["Re@Re.local",[[-1,5766,"\n"],[1,5767,"```"]],[5766,5766],[5769,5769]]],[1528098324862,["Re@Re.local",[[1,5769,"\n\n"]],[5769,5769],[5770,5770]]],[1528098392666,[null,[[-1,2285,"（"],[1,2286,"中"],[-1,3414,"\n"],[1,3881,"\n"],[1,3970,"\\"],[-1,3972,"-"],[-1,4021,"象"],[1,4023,"象"],[-1,4055,"\n"],[1,4889,"\n"],[-1,4905,"v"],[1,4906,"和"],[-1,5040,"\n"],[-1,5757,""],[1,5766,"\n"]],[2285,2285],[5767,5767]]],[1528098392666,[null,[[1,2285,"（"],[-1,2285,"中"],[1,3414,"\n"],[-1,3880,"\n"],[-1,3970,"\\"],[1,3973,"-"],[1,4021,"象"],[-1,4022,"象"],[1,4055,"\n"],[-1,4888,"\n"],[1,4905,"v"],[-1,4905,"和"],[1,5040,"\n"],[1,5756,""],[-1,5765,"\n"]],[5767,5767],[2285,2285]]],[1528098362752,["Re@Re.local",[[-1,5770,"\n"],[1,5771,"## W"]],[5770,5770],[5774,5774]]],[1528098363155,["Re@Re.local",[[-1,5773,"W"]],[5774,5774],[5773,5773]]],[1528098366642,["Re@Re.local",[[1,5773,"词梯子"]],[5773,5773],[5776,5776]]],[1528098366698,["Re@Re.local",[[-1,5775,"子"]],[5776,5776],[5775,5775]]],[1528098367629,["Re@Re.local",[[1,5775,"问题"]],[5775,5775],[5777,5777]]],[1528098373478,["Re@Re.local",[[1,5775,"（word ladder)"]],[5775,5775],[5788,5788]]],[1528098375391,["Re@Re.local",[[-1,5787,")问"]],[5789,5789],[5787,5787]]],[1528098377999,["Re@Re.local",[[1,5787,"）问"]],[5787,5787],[5789,5789]]],[1528098379584,["Re@Re.local",[[1,5790," ##"]],[5790,5790],[5793,5793]]],[1528098379696,["Re@Re.local",[[1,5793,"\n\n"]],[5793,5793],[5794,5794]]],[1528098380725,["Re@Re.local",[[1,5795,"\n"]],[5794,5794],[5795,5795]]],[1528098386750,["Re@Re.local",[[-1,5795,"\n"],[1,5796,"在对图算法进行研究"]],[5795,5795],[5804,5804]]],[1528098389308,["Re@Re.local",[[-1,5795,"在对图算法进行研究"]],[5804,5804],[5795,5795]]],[1528098452657,[null,[[-1,2285,"（"],[1,2286,"中"],[-1,3414,"\n"],[1,3881,"\n"],[1,3970,"\\"],[-1,3972,"-"],[-1,4021,"象"],[1,4023,"象"],[-1,4055,"\n"],[1,4889,"\n"],[-1,4905,"v"],[1,4906,"和"],[-1,5040,"\n"],[-1,5757,""],[1,5766,"\n"]],[2285,2285],[5767,5767]]],[1528098452657,[null,[[1,2285,"（"],[-1,2285,"中"],[1,3414,"\n"],[-1,3880,"\n"],[-1,3970,"\\"],[1,3973,"-"],[1,4021,"象"],[-1,4022,"象"],[1,4055,"\n"],[-1,4888,"\n"],[1,4905,"v"],[-1,4905,"和"],[1,5040,"\n"],[1,5756,""],[-1,5765,"\n"]],[5767,5767],[2285,2285]]],[1528098398089,["Re@Re.local",[[1,5795,"\n\n"]],[5795,5795],[5796,5796]]],[1528098398921,["Re@Re.local",[[-1,5796,"\n"]],[5796,5796],[5795,5795]]],[1528098410265,["Re@Re.local",[[-1,5795,"\n"],[1,5796,"以词梯问题作为"]],[5795,5795],[5802,5802]]],[1528098416338,["Re@Re.local",[[-1,5800,"作为"]],[5802,5802],[5800,5800]]],[1528098417759,["Re@Re.local",[[1,5800,"开始对"]],[5800,5800],[5803,5803]]],[1528098418159,["Re@Re.local",[[-1,5802,"对"]],[5803,5803],[5802,5802]]],[1528098428811,["Re@Re.local",[[1,5802,"图算法的研究。将单词“FOl"]],[5802,5802],[5816,5816]]],[1528098429369,["Re@Re.local",[[-1,5815,"l"]],[5816,5816],[5815,5815]]],[1528098430352,["Re@Re.local",[[1,5815,"OL\""]],[5815,5815],[5818,5818]]],[1528098433036,["Re@Re.local",[[-1,5812,"“FOOL\""]],[5818,5818],[5812,5812]]],[1528098433406,["Re@Re.local",[[1,5812,"“"]],[5812,5812],[5813,5813]]],[1528098434165,["Re@Re.local",[[-1,5812,"“"]],[5813,5813],[5812,5812]]],[1528098434722,["Re@Re.local",[[1,5812,":"]],[5812,5812],[5813,5813]]],[1528098435230,["Re@Re.local",[[-1,5812,":"]],[5813,5813],[5812,5812]]],[1528098444807,["Re@Re.local",[[1,5812,"\"FOOL\"转化为\"SAGE\"。"]],[5812,5812],[5828,5828]]],[1528098512692,[null,[[-1,2285,"（"],[1,2286,"中"],[-1,3414,"\n"],[1,3881,"\n"],[1,3970,"\\"],[-1,3972,"-"],[-1,4021,"象"],[1,4023,"象"],[-1,4055,"\n"],[1,4889,"\n"],[-1,4905,"v"],[1,4906,"和"],[-1,5040,"\n"],[-1,5757,""],[1,5766,"\n"]],[2285,2285],[5767,5767]]],[1528098512692,[null,[[1,2285,"（"],[-1,2285,"中"],[1,3414,"\n"],[-1,3880,"\n"],[-1,3970,"\\"],[1,3973,"-"],[1,4021,"象"],[-1,4022,"象"],[1,4055,"\n"],[-1,4888,"\n"],[1,4905,"v"],[-1,4905,"和"],[1,5040,"\n"],[1,5756,""],[-1,5765,"\n"]],[5767,5767],[2285,2285]]],[1528098467630,["Re@Re.local",[[1,5828,"在词梯问题的规则中，"]],[5828,5828],[5838,5838]]],[1528098472193,["Re@Re.local",[[1,5829,"、"]],[5829,5829],[5830,5830]]],[1528098473145,["Re@Re.local",[[-1,5828,"在、"]],[5830,5830],[5828,5828]]],[1528098474200,["Re@Re.local",[[1,5828,"按"]],[5828,5828],[5829,5829]]],[1528098475605,["Re@Re.local",[[-1,5836,"中"]],[5837,5837],[5836,5836]]],[1528098481261,["Re@Re.local",[[1,5837,"1ci"]],[5837,5837],[5840,5840]]],[1528098481792,["Re@Re.local",[[-1,5838,"ci"]],[5840,5840],[5838,5838]]],[1528098482924,["Re@Re.local",[[1,5838,"词"]],[5838,5838],[5839,5839]]],[1528098483322,["Re@Re.local",[[-1,5838,"词"]],[5839,5839],[5838,5838]]],[1528098497144,["Re@Re.local",[[1,5838,"次只能修改1个字母，在每一步"]],[5838,5838],[5852,5852]]],[1528098497867,["Re@Re.local",[[-1,5850,"一步"]],[5852,5852],[5850,5850]]],[1528098512246,["Re@Re.local",[[1,5850,"1步都必须将单词转换为另一个单词，不允许"]],[5850,5850],[5870,5870]]],[1528098572664,[null,[[-1,2285,"（"],[1,2286,"中"],[-1,3414,"\n"],[1,3881,"\n"],[1,3970,"\\"],[-1,3972,"-"],[-1,4021,"象"],[1,4023,"象"],[-1,4055,"\n"],[1,4889,"\n"],[-1,4905,"v"],[1,4906,"和"],[-1,5040,"\n"],[-1,5757,""],[1,5766,"\n"]],[2285,2285],[5767,5767]]],[1528098572664,[null,[[1,2285,"（"],[-1,2285,"中"],[1,3414,"\n"],[-1,3880,"\n"],[-1,3970,"\\"],[1,3973,"-"],[1,4021,"象"],[-1,4022,"象"],[1,4055,"\n"],[-1,4888,"\n"],[1,4905,"v"],[-1,4905,"和"],[1,5040,"\n"],[1,5756,""],[-1,5765,"\n"]],[5767,5767],[2285,2285]]],[1528098542145,["Re@Re.local",[[1,5870,"转换为非单词。词梯问题是由lewis Carroll于1878年法民的，"]],[5870,5870],[5906,5906]]],[1528098544671,["Re@Re.local",[[-1,5902,"法民的，"]],[5906,5906],[5902,5902]]],[1528098545764,["Re@Re.local",[[1,5902,"发明的"]],[5902,5902],[5905,5905]]],[1528098568127,["Re@Re.local",[[1,5883,"*爱丽丝梦游仙境*的作者"]],[5883,5883],[5895,5895]]],[1528098570764,["Re@Re.local",[[1,5917,"。"]],[5917,5917],[5918,5918]]],[1528098572248,["Re@Re.local",[[-1,5915,"明的。"]],[5918,5918],[5915,5915]]],[1528098632666,[null,[[-1,2285,"（"],[1,2286,"中"],[-1,3414,"\n"],[1,3881,"\n"],[1,3970,"\\"],[-1,3972,"-"],[-1,4021,"象"],[1,4023,"象"],[-1,4055,"\n"],[1,4889,"\n"],[-1,4905,"v"],[1,4906,"和"],[-1,5040,"\n"],[-1,5757,""],[1,5766,"\n"]],[2285,2285],[5767,5767]]],[1528098632666,[null,[[1,2285,"（"],[-1,2285,"中"],[1,3414,"\n"],[-1,3880,"\n"],[-1,3970,"\\"],[1,3973,"-"],[1,4021,"象"],[-1,4022,"象"],[1,4055,"\n"],[-1,4888,"\n"],[1,4905,"v"],[-1,4905,"和"],[1,5040,"\n"],[1,5756,""],[-1,5765,"\n"]],[5767,5767],[2285,2285]]],[1528098572852,["Re@Re.local",[[-1,5914,"发"]],[5915,5915],[5914,5914]]],[1528098589101,["Re@Re.local",[[1,5914,"提出的。以下词"]],[5914,5914],[5921,5921]]],[1528098589221,["Re@Re.local",[[-1,5920,"词"]],[5921,5921],[5920,5920]]],[1528098600304,["Re@Re.local",[[1,5920,"单词序列是易守难攻问题"]],[5920,5920],[5931,5931]]],[1528098601348,["Re@Re.local",[[-1,5925,"易守难攻问题"]],[5931,5931],[5925,5925]]],[1528098608587,["Re@Re.local",[[1,5925,"刚才那个问题的一个可能的解。"]],[5925,5925],[5939,5939]]],[1528098610004,["Re@Re.local",[[-1,5934,"可能的解。"]],[5939,5939],[5934,5934]]],[1528098612895,["Re@Re.local",[[1,5934,"可行解。"]],[5934,5934],[5938,5938]]],[1528098613147,["Re@Re.local",[[1,5938,"\n\n"]],[5938,5938],[5939,5939]]],[1528098616421,["Re@Re.local",[[-1,5939,"\n"],[1,5940,"```Python"]],[5939,5939],[5948,5948]]],[1528098621609,["Re@Re.local",[[1,5948,"\n\nFOOL\nPOOL\nPOLL\nPOLE\nPALE\nSALE\nSAGE"]],[5948,5948],[5983,5983]]],[1528098622299,["Re@Re.local",[[1,5984,"\n"]],[5983,5983],[5984,5984]]],[1528098622982,["Re@Re.local",[[-1,5984,"\n"],[1,5985,"```"]],[5984,5984],[5987,5987]]],[1528098623224,["Re@Re.local",[[1,5987,"\n\n"]],[5987,5987],[5988,5988]]],[1528098631663,["Re@Re.local",[[-1,5988,"\n"],[1,5989,"词梯问题有许多"]],[5988,5988],[5995,5995]]],[1528098692682,[null,[[-1,2285,"（"],[1,2286,"中"],[-1,3414,"\n"],[1,3881,"\n"],[1,3970,"\\"],[-1,3972,"-"],[-1,4021,"象"],[1,4023,"象"],[-1,4055,"\n"],[1,4889,"\n"],[-1,4905,"v"],[1,4906,"和"],[-1,5040,"\n"],[1,5766,"\n"],[-1,5949,"\n"],[-1,5980,""],[1,5984,"\n"]],[2285,2285],[5985,5985]]],[1528098692682,[null,[[1,2285,"（"],[-1,2285,"中"],[1,3414,"\n"],[-1,3880,"\n"],[-1,3970,"\\"],[1,3973,"-"],[1,4021,"象"],[-1,4022,"象"],[1,4055,"\n"],[-1,4888,"\n"],[1,4905,"v"],[-1,4905,"和"],[1,5040,"\n"],[-1,5765,"\n"],[1,5949,"\n"],[1,5979,""],[-1,5983,"\n"]],[5985,5985],[2285,2285]]],[1528098637249,["Re@Re.local",[[1,5995,"变体。比如读者可能"]],[5995,5995],[6004,6004]]],[1528098643494,["Re@Re.local",[[-1,6002,"可能"]],[6004,6004],[6002,6002]]],[1528098644847,["Re@Re.local",[[1,6002,"遇到"]],[6002,6002],[6004,6004]]],[1528098645150,["Re@Re.local",[[-1,6002,"遇到"]],[6004,6004],[6002,6002]]],[1528098650772,["Re@Re.local",[[1,6002,"可能遇到过这种问题：给点"]],[6002,6002],[6014,6014]]],[1528098651299,["Re@Re.local",[[-1,6012,"给点"]],[6014,6014],[6012,6012]]],[1528098664747,["Re@Re.local",[[1,6012,"在给定步数来完成转换或"]],[6012,6012],[6023,6023]]],[1528098665171,["Re@Re.local",[[-1,6022,"或"]],[6023,6023],[6022,6022]]],[1528098668369,["Re@Re.local",[[1,6022,"，或"]],[6022,6022],[6024,6024]]],[1528098675018,["Re@Re.local",[[-1,6004,"遇到过这种问题："]],[6011,6011],[6004,6004]]],[1528098678294,["Re@Re.local",[[1,6004,"遇到要求"]],[6004,6004],[6008,6008]]],[1528098680819,["Re@Re.local",[[1,6018,"的版本"]],[6018,6018],[6021,6021]]],[1528098684123,["Re@Re.local",[[1,6023,"是必须与弄个"]],[6023,6023],[6029,6029]]],[1528098684559,["Re@Re.local",[[-1,6026,"与弄个"]],[6029,6029],[6026,6026]]],[1528098691507,["Re@Re.local",[[1,6026,"用给点单词的版本。在本站"]],[6026,6026],[6038,6038]]],[1528098692514,["Re@Re.local",[[-1,6035,"在本站"]],[6038,6038],[6035,6035]]],[1528098752745,[null,[[-1,2285,"（"],[1,2286,"中"],[-1,3414,"\n"],[1,3881,"\n"],[1,3970,"\\"],[-1,3972,"-"],[-1,4021,"象"],[1,4023,"象"],[-1,4055,"\n"],[1,4889,"\n"],[-1,4905,"v"],[1,4906,"和"],[-1,5040,"\n"],[1,5766,"\n"],[-1,5949,"\n"],[-1,5980,""],[1,5984,"\n"]],[2285,2285],[5985,5985]]],[1528098752746,[null,[[1,2285,"（"],[-1,2285,"中"],[1,3414,"\n"],[-1,3880,"\n"],[-1,3970,"\\"],[1,3973,"-"],[1,4021,"象"],[-1,4022,"象"],[1,4055,"\n"],[-1,4888,"\n"],[1,4905,"v"],[-1,4905,"和"],[1,5040,"\n"],[-1,5765,"\n"],[1,5949,"\n"],[1,5979,""],[-1,5983,"\n"]],[5985,5985],[2285,2285]]],[1528098719295,["Re@Re.local",[[1,6035,"本节仅关注计算出完成转换所需要的最小变换次数。"]],[6035,6035],[6058,6058]]],[1528098731062,["Re@Re.local",[[-1,6053,"变换"]],[6055,6055],[6053,6053]]],[1528098731981,["Re@Re.local",[[1,6053,"修改"]],[6053,6053],[6055,6055]]],[1528098733394,["Re@Re.local",[[1,6058,"\n\n"]],[6058,6058],[6059,6059]]],[1528098733674,["Re@Re.local",[[1,6060,"\n"]],[6059,6059],[6060,6060]]],[1528098749821,["Re@Re.local",[[-1,6060,"\n"],[1,6061,"当然，因为本章"]],[6060,6060],[6067,6067]]],[1528098812690,[null,[[-1,2285,"（"],[1,2286,"中"],[-1,3414,"\n"],[1,3881,"\n"],[1,3970,"\\"],[-1,3972,"-"],[-1,4021,"象"],[1,4023,"象"],[-1,4055,"\n"],[1,4889,"\n"],[-1,4905,"v"],[1,4906,"和"],[-1,5040,"\n"],[1,5766,"\n"],[-1,5949,"\n"],[-1,5980,""],[1,5984,"\n"]],[2285,2285],[5985,5985]]],[1528098812691,[null,[[1,2285,"（"],[-1,2285,"中"],[1,3414,"\n"],[-1,3880,"\n"],[-1,3970,"\\"],[1,3973,"-"],[1,4021,"象"],[-1,4022,"象"],[1,4055,"\n"],[-1,4888,"\n"],[1,4905,"v"],[-1,4905,"和"],[1,5040,"\n"],[-1,5765,"\n"],[1,5949,"\n"],[1,5979,""],[-1,5983,"\n"]],[5985,5985],[2285,2285]]],[1528098774527,["Re@Re.local",[[1,6067,"内容是图，因此可以用图算法来将其解决。以下是刚要"]],[6067,6067],[6091,6091]]],[1528098775284,["Re@Re.local",[[-1,6089,"刚要"]],[6091,6091],[6089,6089]]],[1528098776994,["Re@Re.local",[[1,6089,"纲要："]],[6089,6089],[6092,6092]]],[1528098777231,["Re@Re.local",[[1,6092,"\n\n"]],[6092,6092],[6093,6093]]],[1528098787530,["Re@Re.local",[[-1,6093,"\n"],[1,6094,"- 将单词之间的关系重新表示为图。"]],[6093,6093],[6110,6110]]],[1528098787837,["Re@Re.local",[[1,6110,"\n\n"]],[6110,6110],[6111,6111]]],[1528098793587,["Re@Re.local",[[-1,6111,"\n"],[1,6112,"- 使用图算法比如"]],[6111,6111],[6120,6120]]],[1528098795484,["Re@Re.local",[[-1,6118,"比如"]],[6120,6120],[6118,6118]]],[1528098797818,["Re@Re.local",[[1,6118,"比如"]],[6118,6118],[6120,6120]]],[1528098807192,["Re@Re.local",[[-1,6115,"图算法比如"]],[6120,6120],[6115,6115]]],[1528098809315,["Re@Re.local",[[1,6115,"数值"]],[6115,6115],[6117,6117]]],[1528098809636,["Re@Re.local",[[-1,6115,"数值"]],[6117,6117],[6115,6115]]],[1528098811841,["Re@Re.local",[[1,6115,"被称为"]],[6115,6115],[6118,6118]]],[1528098872702,[null,[[-1,2285,"（"],[1,2286,"中"],[-1,3414,"\n"],[1,3881,"\n"],[1,3970,"\\"],[-1,3972,"-"],[-1,4021,"象"],[1,4023,"象"],[-1,4055,"\n"],[1,4889,"\n"],[-1,4905,"v"],[1,4906,"和"],[-1,5040,"\n"],[1,5766,"\n"],[-1,5949,"\n"],[-1,5980,""],[1,5984,"\n"]],[2285,2285],[5985,5985]]],[1528098872702,[null,[[1,2285,"（"],[-1,2285,"中"],[1,3414,"\n"],[-1,3880,"\n"],[-1,3970,"\\"],[1,3973,"-"],[1,4021,"象"],[-1,4022,"象"],[1,4055,"\n"],[-1,4888,"\n"],[1,4905,"v"],[-1,4905,"和"],[1,5040,"\n"],[-1,5765,"\n"],[1,5949,"\n"],[1,5979,""],[-1,5983,"\n"]],[5985,5985],[2285,2285]]],[1528098813295,["Re@Re.local",[[-1,6115,"被称为"]],[6118,6118],[6115,6115]]],[1528098819685,["Re@Re.local",[[1,6115,"广度优先算法"]],[6115,6115],[6121,6121]]],[1528098821809,["Re@Re.local",[[1,6115,"**"]],[6115,6115],[6117,6117]]],[1528098823638,["Re@Re.local",[[1,6123,"**"]],[6117,6117],[6125,6125]]],[1528098831324,["Re@Re.local",[[1,6123,"（breadth first a"]],[6123,6123],[6139,6139]]],[1528098831968,["Re@Re.local",[[-1,6138,"a"]],[6139,6139],[6138,6138]]],[1528098833924,["Re@Re.local",[[1,6138,"search）"]],[6138,6138],[6145,6145]]],[1528098837596,["Re@Re.local",[[1,6121,"搜索"]],[6121,6121],[6123,6123]]],[1528098849262,["Re@Re.local",[[1,6149,"来找到从其实单词"]],[6149,6149],[6157,6157]]],[1528098849933,["Re@Re.local",[[-1,6153,"其实单词"]],[6157,6157],[6153,6153]]],[1528098862102,["Re@Re.local",[[1,6153,"起始单词到目标单词的最短路径。"]],[6153,6153],[6168,6168]]],[1528098862368,["Re@Re.local",[[1,6168,"\n\n"]],[6168,6168],[6169,6169]]],[1528098862560,["Re@Re.local",[[1,6170,"\n"]],[6169,6169],[6170,6170]]],[1528098871235,["Re@Re.local",[[-1,6170,"\n"],[1,6171,"## 7.8 "]],[6170,6170],[6177,6177]]],[1528099067313,[null,[[-1,2285,"（"],[1,2286,"中"],[-1,3414,"\n"],[1,3881,"\n"],[1,3970,"\\"],[-1,3972,"-"],[-1,4021,"象"],[1,4023,"象"],[-1,4055,"\n"],[1,4889,"\n"],[-1,4905,"v"],[1,4906,"和"],[-1,5040,"\n"],[1,5766,"\n"],[-1,5949,"\n"],[-1,5980,""],[1,5984,"\n"]],[2285,2285],[5985,5985]]],[1528099067313,[null,[[1,2285,"（"],[-1,2285,"中"],[1,3414,"\n"],[-1,3880,"\n"],[-1,3970,"\\"],[1,3973,"-"],[1,4021,"象"],[-1,4022,"象"],[1,4055,"\n"],[-1,4888,"\n"],[1,4905,"v"],[-1,4905,"和"],[1,5040,"\n"],[-1,5765,"\n"],[1,5949,"\n"],[1,5979,""],[-1,5983,"\n"]],[5985,5985],[2285,2285]]],[1528099043514,["Re@Re.local",[[1,6177,"建立"]],[6177,6177],[6179,6179]]],[1528099043874,["Re@Re.local",[[-1,6177,"建立"]],[6179,6179],[6177,6177]]],[1528099044564,["Re@Re.local",[[1,6177,"称"]],[6177,6177],[6178,6178]]],[1528099044651,["Re@Re.local",[[-1,6177,"称"]],[6178,6178],[6177,6177]]],[1528099046060,["Re@Re.local",[[1,6177,"省"]],[6177,6177],[6178,6178]]],[1528099046108,["Re@Re.local",[[-1,6177,"省"]],[6178,6178],[6177,6177]]],[1528099051158,["Re@Re.local",[[1,6177,"建立词梯图 ##"]],[6177,6177],[6185,6185]]],[1528099051277,["Re@Re.local",[[1,6185,"\n\n"]],[6185,6185],[6186,6186]]],[1528099051473,["Re@Re.local",[[1,6187,"\n"]],[6186,6186],[6187,6187]]],[1528099059517,["Re@Re.local",[[-1,6187,"\n"],[1,6188,"首先要解决的问题是"]],[6187,6187],[6196,6196]]],[1528099127679,[null,[[-1,2285,"（"],[1,2286,"中"],[-1,3414,"\n"],[1,3881,"\n"],[1,3970,"\\"],[-1,3972,"-"],[-1,4021,"象"],[1,4023,"象"],[-1,4055,"\n"],[1,4889,"\n"],[-1,4905,"v"],[1,4906,"和"],[-1,5040,"\n"],[1,5766,"\n"],[-1,5949,"\n"],[-1,5980,""],[1,5984,"\n"]],[2285,2285],[5985,5985]]],[1528099127679,[null,[[1,2285,"（"],[-1,2285,"中"],[1,3414,"\n"],[-1,3880,"\n"],[-1,3970,"\\"],[1,3973,"-"],[1,4021,"象"],[-1,4022,"象"],[1,4055,"\n"],[-1,4888,"\n"],[1,4905,"v"],[-1,4905,"和"],[1,5040,"\n"],[-1,5765,"\n"],[1,5949,"\n"],[1,5979,""],[-1,5983,"\n"]],[5985,5985],[2285,2285]]],[1528099092633,["Re@Re.local",[[1,6196,"如何将单词列表转换为图。"]],[6196,6196],[6208,6208]]],[1528099118651,["Re@Re.local",[[1,6187,"\n"],[-1,6187,"首先要解决的问题是如何将单词列表转换为图。"]],[6208,6208],[6187,6187]]],[1528099122334,["Re@Re.local",[[-1,6187,"\n"],[1,6188,"首先要解决的问题是如何将单词列表转换为图。我们需要"]],[6187,6187],[6212,6212]]],[1528099123140,["Re@Re.local",[[-1,6208,"我们需要"]],[6212,6212],[6208,6208]]],[1528099187701,[null,[[-1,2285,"（"],[1,2286,"中"],[-1,3414,"\n"],[1,3881,"\n"],[1,3970,"\\"],[-1,3972,"-"],[-1,4021,"象"],[1,4023,"象"],[-1,4055,"\n"],[1,4889,"\n"],[-1,4905,"v"],[1,4906,"和"],[-1,5040,"\n"],[1,5766,"\n"],[-1,5949,"\n"],[-1,5980,""],[1,5984,"\n"]],[2285,2285],[5985,5985]]],[1528099187701,[null,[[1,2285,"（"],[-1,2285,"中"],[1,3414,"\n"],[-1,3880,"\n"],[-1,3970,"\\"],[1,3973,"-"],[1,4021,"象"],[-1,4022,"象"],[1,4055,"\n"],[-1,4888,"\n"],[1,4905,"v"],[-1,4905,"和"],[1,5040,"\n"],[-1,5765,"\n"],[1,5949,"\n"],[1,5979,""],[-1,5983,"\n"]],[5985,5985],[2285,2285]]],[1528099132482,["Re@Re.local",[[1,6208,"、"]],[6208,6208],[6209,6209]]],[1528099133265,["Re@Re.local",[[-1,6207,"。、"]],[6209,6209],[6207,6207]]],[1528099136661,["Re@Re.local",[[1,6207,"。许哟啊"]],[6207,6207],[6211,6211]]],[1528099138276,["Re@Re.local",[[-1,6208,"许哟啊"]],[6211,6211],[6208,6208]]],[1528099140558,["Re@Re.local",[[1,6208,"需要的是"]],[6208,6208],[6212,6212]]],[1528099142537,["Re@Re.local",[[-1,6208,"需要的是"]],[6212,6212],[6208,6208]]],[1528099143565,["Re@Re.local",[[1,6208,"需要"]],[6208,6208],[6210,6210]]],[1528099145462,["Re@Re.local",[[-1,6208,"需要"]],[6210,6210],[6208,6208]]],[1528099155242,["Re@Re.local",[[1,6208,"对于边来说，需要保证它们是从"]],[6208,6208],[6222,6222]]],[1528099159903,["Re@Re.local",[[-1,6220,"是从"]],[6222,6222],[6220,6220]]],[1528099168556,["Re@Re.local",[[1,6220,"连接的是仅差"]],[6220,6220],[6226,6226]]],[1528099169240,["Re@Re.local",[[-1,6224,"仅差"]],[6226,6226],[6224,6224]]],[1528099171757,["Re@Re.local",[[1,6224,"差其IE"]],[6224,6224],[6228,6228]]],[1528099172566,["Re@Re.local",[[-1,6225,"其IE"]],[6228,6228],[6225,6225]]],[1528099186991,["Re@Re.local",[[1,6225,"且仅差了1个字母的单词。如果生成这种图"]],[6225,6225],[6244,6244]]],[1528099247711,[null,[[-1,2285,"（"],[1,2286,"中"],[-1,3414,"\n"],[1,3881,"\n"],[1,3970,"\\"],[-1,3972,"-"],[-1,4021,"象"],[1,4023,"象"],[-1,4055,"\n"],[1,4889,"\n"],[-1,4905,"v"],[1,4906,"和"],[-1,5040,"\n"],[1,5766,"\n"],[-1,5949,"\n"],[-1,5980,""],[1,5984,"\n"]],[2285,2285],[5985,5985]]],[1528099247711,[null,[[1,2285,"（"],[-1,2285,"中"],[1,3414,"\n"],[-1,3880,"\n"],[-1,3970,"\\"],[1,3973,"-"],[1,4021,"象"],[-1,4022,"象"],[1,4055,"\n"],[-1,4888,"\n"],[1,4905,"v"],[-1,4905,"和"],[1,5040,"\n"],[-1,5765,"\n"],[1,5949,"\n"],[1,5979,""],[-1,5983,"\n"]],[5985,5985],[2285,2285]]],[1528099199708,["Re@Re.local",[[1,6245,"那么任何路径"]],[6245,6245],[6251,6251]]],[1528099204378,["Re@Re.local",[[-1,6247,"任何路径"]],[6251,6251],[6247,6247]]],[1528099206406,["Re@Re.local",[[1,6247,"从任何"]],[6247,6247],[6250,6250]]],[1528099208025,["Re@Re.local",[[-1,6248,"任何"]],[6250,6250],[6248,6248]]],[1528099234429,["Re@Re.local",[[1,6248,"一个单词出发的任意路径都是该词梯问题的解。图1给出了一些"]],[6248,6248],[6276,6276]]],[1528099234815,["Re@Re.local",[[-1,6274,"一些"]],[6276,6276],[6274,6274]]],[1528099247514,["Re@Re.local",[[1,6274,"1个小的由单词构成的图"]],[6274,6274],[6285,6285]]],[1528099307761,[null,[[-1,2285,"（"],[1,2286,"中"],[-1,3414,"\n"],[1,3881,"\n"],[1,3970,"\\"],[-1,3972,"-"],[-1,4021,"象"],[1,4023,"象"],[-1,4055,"\n"],[1,4889,"\n"],[-1,4905,"v"],[1,4906,"和"],[-1,5040,"\n"],[1,5766,"\n"],[-1,5949,"\n"],[1,5984,"\n"],[1,6244,"，"],[-1,6246,"任"]],[2285,2285],[6246,6246]]],[1528099307761,[null,[[1,2285,"（"],[-1,2285,"中"],[1,3414,"\n"],[-1,3880,"\n"],[-1,3970,"\\"],[1,3973,"-"],[1,4021,"象"],[-1,4022,"象"],[1,4055,"\n"],[-1,4888,"\n"],[1,4905,"v"],[-1,4905,"和"],[1,5040,"\n"],[-1,5765,"\n"],[1,5949,"\n"],[-1,5983,"\n"],[-1,6244,"，"],[1,6247,"任"]],[6246,6246],[2285,2285]]],[1528099253604,["Re@Re.local",[[1,6285,"，它可以用来解决Foo"]],[6285,6285],[6296,6296]]],[1528099254194,["Re@Re.local",[[-1,6294,"oo"]],[6296,6296],[6294,6294]]],[1528099263423,["Re@Re.local",[[1,6294,"OOL到SAGE的词梯问题。注意，该瓷土"]],[6294,6294],[6314,6314]]],[1528099263801,["Re@Re.local",[[-1,6312,"瓷土"]],[6314,6314],[6312,6312]]],[1528099269692,["Re@Re.local",[[1,6312,"图是无向图，"]],[6312,6312],[6318,6318]]],[1528099284341,["Re@Re.local",[[-1,6317,"，"]],[6318,6318],[6317,6317]]],[1528099287451,["Re@Re.local",[[1,6317,"且无权重。"]],[6317,6317],[6322,6322]]],[1528099287706,["Re@Re.local",[[1,6322,"\n\n"]],[6322,6322],[6323,6323]]],[1528099287934,["Re@Re.local",[[1,6324,"\n"]],[6323,6323],[6324,6324]]],[1528099297649,["Re@Re.local",[[1,6324,"![../_images/wordgraph.png](http://interactivepython.org/courselib/static/pythonds/_images/wordgraph.png)"]],[6324,6324],[6429,6429]]],[1528099298340,["Re@Re.local",[[1,6430,"\n"]],[6429,6429],[6430,6430]]],[1528099298685,["Re@Re.local",[[1,6431,"\n"]],[6430,6430],[6431,6431]]],[1528099369450,[null,[[-1,2285,"（"],[1,2286,"中"],[-1,3414,"\n"],[1,3881,"\n"],[1,3970,"\\"],[-1,3972,"-"],[-1,4021,"象"],[1,4023,"象"],[-1,4055,"\n"],[1,4889,"\n"],[-1,4905,"v"],[1,4906,"和"],[-1,5040,"\n"],[1,5766,"\n"],[-1,5949,"\n"],[1,5984,"\n"],[1,6244,"，"],[-1,6246,"任"]],[2285,2285],[6246,6246]]],[1528099369450,[null,[[1,2285,"（"],[-1,2285,"中"],[1,3414,"\n"],[-1,3880,"\n"],[-1,3970,"\\"],[1,3973,"-"],[1,4021,"象"],[-1,4022,"象"],[1,4055,"\n"],[-1,4888,"\n"],[1,4905,"v"],[-1,4905,"和"],[1,5040,"\n"],[-1,5765,"\n"],[1,5949,"\n"],[-1,5983,"\n"],[-1,6244,"，"],[1,6247,"任"]],[6246,6246],[2285,2285]]],[1528099308911,["Re@Re.local",[[-1,6431,"\n"],[1,6432,"使用"]],[6431,6431],[6433,6433]]],[1528099309223,["Re@Re.local",[[-1,6431,"使用"]],[6433,6433],[6431,6431]]],[1528099309985,["Re@Re.local",[[1,6431,"\n\n"]],[6431,6431],[6432,6432]]],[1528099334039,["Re@Re.local",[[-1,6432,"\n"],[1,6433,"可以使用很多方法来生成这个图。首先假设有1组词汇"]],[6432,6432],[6456,6456]]],[1528099334540,["Re@Re.local",[[-1,6454,"词汇"]],[6456,6456],[6454,6454]]],[1528099335377,["Re@Re.local",[[1,6454,"单词，"]],[6454,6454],[6457,6457]]],[1528099336289,["Re@Re.local",[[-1,6456,"，"]],[6457,6457],[6456,6456]]],[1528099342345,["Re@Re.local",[[1,6454,"长度相同的"]],[6454,6454],[6459,6459]]],[1528099363767,["Re@Re.local",[[1,6461,"，从起点出发，为列表中的每一个单词创建1个顶点。为了"]],[6461,6461],[6487,6487]]],[1528099429430,[null,[[-1,2285,"（"],[1,2286,"中"],[-1,3414,"\n"],[1,3881,"\n"],[1,3970,"\\"],[-1,3972,"-"],[-1,4021,"象"],[1,4023,"象"],[-1,4055,"\n"],[1,4889,"\n"],[-1,4905,"v"],[1,4906,"和"],[-1,5040,"\n"],[1,5766,"\n"],[-1,5949,"\n"],[1,5984,"\n"],[1,6244,"，"],[-1,6246,"任"]],[2285,2285],[6246,6246]]],[1528099429431,[null,[[1,2285,"（"],[-1,2285,"中"],[1,3414,"\n"],[-1,3880,"\n"],[-1,3970,"\\"],[1,3973,"-"],[1,4021,"象"],[-1,4022,"象"],[1,4055,"\n"],[-1,4888,"\n"],[1,4905,"v"],[-1,4905,"和"],[1,5040,"\n"],[-1,5765,"\n"],[1,5949,"\n"],[-1,5983,"\n"],[-1,6244,"，"],[1,6247,"任"]],[6246,6246],[2285,2285]]],[1528099391830,["Re@Re.local",[[1,6487,"确定如何将这些单词连接起来，可以将列表中的每个单词与其它的单词意义"]],[6487,6487],[6520,6520]]],[1528099392100,["Re@Re.local",[[-1,6518,"意义"]],[6520,6520],[6518,6518]]],[1528099394614,["Re@Re.local",[[1,6518,"意义晋西"]],[6518,6518],[6522,6522]]],[1528099395395,["Re@Re.local",[[-1,6518,"意义晋西"]],[6522,6522],[6518,6518]]],[1528099399630,["Re@Re.local",[[1,6518,"一一进行比较。"]],[6518,6518],[6525,6525]]],[1528099403231,["Re@Re.local",[[-1,6524,"。"]],[6525,6525],[6524,6524]]],[1528099415487,["Re@Re.local",[[1,6524,"，在比较时值"]],[6524,6524],[6530,6530]]],[1528099415744,["Re@Re.local",[[-1,6529,"值"]],[6530,6530],[6529,6529]]],[1528099417701,["Re@Re.local",[[1,6529,"确定"]],[6529,6529],[6531,6531]]],[1528099418624,["Re@Re.local",[[-1,6529,"确定"]],[6531,6531],[6529,6529]]],[1528099429140,["Re@Re.local",[[1,6529,"确定有多少个字母不同"]],[6529,6529],[6539,6539]]],[1528099489492,[null,[[-1,2285,"（"],[1,2286,"中"],[-1,3414,"\n"],[1,3881,"\n"],[1,3970,"\\"],[-1,3972,"-"],[-1,4021,"象"],[1,4023,"象"],[-1,4055,"\n"],[1,4889,"\n"],[-1,4905,"v"],[1,4906,"和"],[-1,5040,"\n"],[1,5766,"\n"],[-1,5949,"\n"],[1,5984,"\n"],[1,6244,"，"],[-1,6246,"任"]],[2285,2285],[6246,6246]]],[1528099489492,[null,[[1,2285,"（"],[-1,2285,"中"],[1,3414,"\n"],[-1,3880,"\n"],[-1,3970,"\\"],[1,3973,"-"],[1,4021,"象"],[-1,4022,"象"],[1,4055,"\n"],[-1,4888,"\n"],[1,4905,"v"],[-1,4905,"和"],[1,5040,"\n"],[-1,5765,"\n"],[1,5949,"\n"],[-1,5983,"\n"],[-1,6244,"，"],[1,6247,"任"]],[6246,6246],[2285,2285]]],[1528099445825,["Re@Re.local",[[1,6539,"。如果两个字母仅相差1个字母，便可以在图中为这两个"]],[6539,6539],[6564,6564]]],[1528099446432,["Re@Re.local",[[-1,6562,"两个"]],[6564,6564],[6562,6562]]],[1528099446935,["Re@Re.local",[[1,6562,"2个"]],[6562,6562],[6564,6564]]],[1528099449290,["Re@Re.local",[[-1,6561,"这2个"]],[6564,6564],[6561,6561]]],[1528099467003,["Re@Re.local",[[1,6561,"它们两创建1条边。对于小规模的单词"]],[6561,6561],[6578,6578]]],[1528099468615,["Re@Re.local",[[-1,6570,"对于小规模的单词"]],[6578,6578],[6570,6570]]],[1528099470520,["Re@Re.local",[[1,6570,"单词书比较时"]],[6570,6570],[6576,6576]]],[1528099471155,["Re@Re.local",[[-1,6572,"书比较时"]],[6576,6576],[6572,6572]]],[1528099479600,["Re@Re.local",[[1,6572,"数较少时，这个方法还是可行的，"]],[6572,6572],[6587,6587]]],[1528099479985,["Re@Re.local",[[-1,6586,"，"]],[6587,6587],[6586,6586]]],[1528099481022,["Re@Re.local",[[1,6586,"，然而"]],[6586,6586],[6589,6589]]],[1528099482012,["Re@Re.local",[[-1,6586,"，然而"]],[6589,6589],[6586,6586]]],[1528099484945,["Re@Re.local",[[1,6586,"，然而结社"]],[6586,6586],[6591,6591]]],[1528099487043,["Re@Re.local",[[-1,6586,"，然而结社"]],[6591,6591],[6586,6586]]],[1528099488325,["Re@Re.local",[[1,6586,"。但是"]],[6586,6586],[6589,6589]]],[1528099549463,[null,[[-1,2285,"（"],[1,2286,"中"],[-1,3414,"\n"],[1,3881,"\n"],[1,3970,"\\"],[-1,3972,"-"],[-1,4021,"象"],[1,4023,"象"],[-1,4055,"\n"],[1,4889,"\n"],[-1,4905,"v"],[1,4906,"和"],[-1,5040,"\n"],[1,5766,"\n"],[-1,5949,"\n"],[1,5984,"\n"],[1,6244,"，"],[-1,6246,"任"]],[2285,2285],[6246,6246]]],[1528099549464,[null,[[1,2285,"（"],[-1,2285,"中"],[1,3414,"\n"],[-1,3880,"\n"],[-1,3970,"\\"],[1,3973,"-"],[1,4021,"象"],[-1,4022,"象"],[1,4055,"\n"],[-1,4888,"\n"],[1,4905,"v"],[-1,4905,"和"],[1,5040,"\n"],[-1,5765,"\n"],[1,5949,"\n"],[-1,5983,"\n"],[-1,6244,"，"],[1,6247,"任"]],[6246,6246],[2285,2285]]],[1528099500936,["Re@Re.local",[[1,6589,"假设有5110个单词的话，粗略估计一下，"]],[6589,6589],[6609,6609]]],[1528099509179,["Re@Re.local",[[1,6602,"（"]],[6602,6602],[6603,6603]]],[1528099511766,["Re@Re.local",[[-1,6601,"，"]],[6602,6602],[6601,6601]]],[1528099513502,["Re@Re.local",[[-1,6606,"一下，"]],[6609,6609],[6606,6606]]],[1528099523391,["Re@Re.local",[[1,6606,"一一进行的"]],[6606,6606],[6611,6611]]],[1528099523597,["Re@Re.local",[[-1,6610,"的"]],[6611,6611],[6610,6610]]],[1528099524610,["Re@Re.local",[[1,6610,"对比的"]],[6610,6610],[6613,6613]]],[1528099524981,["Re@Re.local",[[-1,6612,"的"]],[6613,6613],[6612,6612]]],[1528099526179,["Re@Re.local",[[1,6612,"需要O"]],[6612,6612],[6615,6615]]],[1528099527025,["Re@Re.local",[[-1,6614,"O"]],[6615,6615],[6614,6614]]],[1528099538791,["Re@Re.local",[[1,6614,"$O(n^2)$的时间复杂度），需要"]],[6614,6614],[6632,6632]]],[1528099539465,["Re@Re.local",[[-1,6630,"需要"]],[6632,6632],[6630,6630]]],[1528099542637,["Re@Re.local",[[1,6630,"需要进行26"]],[6630,6630],[6636,6636]]],[1528099543431,["Re@Re.local",[[-1,6634,"26"]],[6636,6636],[6634,6634]]],[1528099549082,["Re@Re.local",[[1,6634,"2500"]],[6634,6634],[6638,6638]]],[1528099609461,[null,[[-1,2285,"（"],[1,2286,"中"],[-1,3414,"\n"],[1,3881,"\n"],[1,3970,"\\"],[-1,3972,"-"],[-1,4021,"象"],[1,4023,"象"],[-1,4055,"\n"],[1,4889,"\n"],[-1,4905,"v"],[1,4906,"和"],[-1,5040,"\n"],[1,5766,"\n"],[-1,5949,"\n"],[1,5984,"\n"],[1,6244,"，"],[-1,6246,"任"]],[2285,2285],[6246,6246]]],[1528099609461,[null,[[1,2285,"（"],[-1,2285,"中"],[1,3414,"\n"],[-1,3880,"\n"],[-1,3970,"\\"],[1,3973,"-"],[1,4021,"象"],[-1,4022,"象"],[1,4055,"\n"],[-1,4888,"\n"],[1,4905,"v"],[-1,4905,"和"],[1,5040,"\n"],[-1,5765,"\n"],[1,5949,"\n"],[-1,5983,"\n"],[-1,6244,"，"],[1,6247,"任"]],[6246,6246],[2285,2285]]],[1528099552556,["Re@Re.local",[[1,6638,"万词对"]],[6638,6638],[6641,6641]]],[1528099552785,["Re@Re.local",[[-1,6639,"词对"]],[6641,6641],[6639,6639]]],[1528099554351,["Re@Re.local",[[1,6639,"次对比。"]],[6639,6639],[6643,6643]]],[1528099554636,["Re@Re.local",[[1,6643,"\n\n"]],[6643,6643],[6644,6644]]],[1528099554832,["Re@Re.local",[[1,6645,"\n"]],[6644,6644],[6645,6645]]],[1528099556463,["Re@Re.local",[[-1,6645,"\n"],[1,6646,"可以"]],[6645,6645],[6647,6647]]],[1528099556833,["Re@Re.local",[[-1,6645,"可以"]],[6647,6647],[6645,6645]]],[1528099557405,["Re@Re.local",[[1,6645,"\n\n"]],[6645,6645],[6646,6646]]],[1528099558013,["Re@Re.local",[[-1,6646,"\n"]],[6646,6646],[6645,6645]]],[1528099559057,["Re@Re.local",[[-1,6645,"\n"]],[6645,6645],[0,0]]],[1528099559225,["Re@Re.local",[[-1,6644,"\n"],[1,6645,"t"]],[0,0],[6644,6645]]],[1528099559304,["Re@Re.local",[[1,6645,"o"]],[6644,6645],[6644,6646]]],[1528099559426,["Re@Re.local",[[1,6646,"n"]],[6644,6646],[6644,6647]]],[1528099559508,["Re@Re.local",[[1,6647,"g"]],[6644,6647],[6644,6648]]],[1528099559726,["Re@Re.local",[[1,6648," u"]],[6644,6648],[6644,6650]]],[1528099559782,["Re@Re.local",[[1,6650,"o"]],[6644,6650],[6644,6651]]],[1528099559964,["Re@Re.local",[[-1,6644,"tong uo"],[1,6651,"痛殴"]],[6644,6651],[6646,6646]]],[1528099560427,["Re@Re.local",[[-1,6645,"殴"]],[6646,6646],[6645,6645]]],[1528099560616,["Re@Re.local",[[-1,6644,"痛"],[1,6645,"\n"]],[6645,6645],[6644,6644]]],[1528099560971,["Re@Re.local",[[1,6645,"\n"]],[6644,6644],[6645,6645]]],[1528099563095,["Re@Re.local",[[-1,6645,"\n"],[1,6646,"使用一下"]],[6645,6645],[6649,6649]]],[1528099563606,["Re@Re.local",[[-1,6647,"一下"]],[6649,6649],[6647,6647]]],[1528099568396,["Re@Re.local",[[1,6647,"以下方法可以做的"]],[6647,6647],[6655,6655]]],[1528099568630,["Re@Re.local",[[-1,6653,"做的"]],[6655,6655],[6653,6653]]],[1528099597996,["Re@Re.local",[[1,6653,"对其进行优化。假设有dalia"]],[6653,6653],[6668,6668]]],[1528099598919,["Re@Re.local",[[-1,6663,"dalia"]],[6668,6668],[6663,6663]]],[1528099604030,["Re@Re.local",[[1,6663,"大量桶，李"]],[6663,6663],[6668,6668]]],[1528099604117,["Re@Re.local",[[-1,6667,"李"]],[6668,6668],[6667,6667]]],[1528099608323,["Re@Re.local",[[1,6667,"每个桶李都"]],[6667,6667],[6672,6672]]],[1528099608905,["Re@Re.local",[[-1,6670,"李都"]],[6672,6672],[6670,6670]]],[1528099669553,[null,[[-1,2285,"（"],[1,2286,"中"],[-1,3414,"\n"],[1,3881,"\n"],[1,3970,"\\"],[-1,3972,"-"],[-1,4021,"象"],[1,4023,"象"],[-1,4055,"\n"],[1,4889,"\n"],[-1,4905,"v"],[1,4906,"和"],[-1,5040,"\n"],[1,5766,"\n"],[-1,5949,"\n"],[1,5984,"\n"],[1,6244,"，"],[-1,6246,"任"]],[2285,2285],[6246,6246]]],[1528099669553,[null,[[1,2285,"（"],[-1,2285,"中"],[1,3414,"\n"],[-1,3880,"\n"],[-1,3970,"\\"],[1,3973,"-"],[1,4021,"象"],[-1,4022,"象"],[1,4055,"\n"],[-1,4888,"\n"],[1,4905,"v"],[-1,4905,"和"],[1,5040,"\n"],[-1,5765,"\n"],[1,5949,"\n"],[-1,5983,"\n"],[-1,6244,"，"],[1,6247,"任"]],[6246,6246],[2285,2285]]],[1528099635327,["Re@Re.local",[[1,6670,"里都zhuan"]],[6670,6670],[6677,6677]]],[1528099644129,["Re@Re.local",[[-1,6667,"每个桶里都zhuan"]],[6677,6677],[6667,6667]]],[1528099650542,["Re@Re.local",[[1,6667,"每个桶外卖"]],[6667,6667],[6672,6672]]],[1528099650914,["Re@Re.local",[[-1,6671,"卖"]],[6672,6672],[6671,6671]]],[1528099656759,["Re@Re.local",[[1,6671,"面都贴着1个子"]],[6671,6671],[6678,6678]]],[1528099656850,["Re@Re.local",[[-1,6677,"子"]],[6678,6678],[6677,6677]]],[1528099665477,["Re@Re.local",[[1,6677,"4字母单词，但是字母中与"]],[6677,6677],[6689,6689]]],[1528099665783,["Re@Re.local",[[-1,6688,"与"]],[6689,6689],[6688,6688]]],[1528099668267,["Re@Re.local",[[1,6688,"有1个被"]],[6688,6688],[6692,6692]]],[1528099729472,[null,[[-1,2285,"（"],[1,2286,"中"],[-1,3414,"\n"],[1,3881,"\n"],[1,3970,"\\"],[-1,3972,"-"],[-1,4021,"象"],[1,4023,"象"],[-1,4055,"\n"],[1,4889,"\n"],[-1,4905,"v"],[1,4906,"和"],[-1,5040,"\n"],[1,5766,"\n"],[-1,5949,"\n"],[1,5984,"\n"],[1,6244,"，"],[-1,6246,"任"]],[2285,2285],[6246,6246]]],[1528099729473,[null,[[1,2285,"（"],[-1,2285,"中"],[1,3414,"\n"],[-1,3880,"\n"],[-1,3970,"\\"],[1,3973,"-"],[1,4021,"象"],[-1,4022,"象"],[1,4055,"\n"],[-1,4888,"\n"],[1,4905,"v"],[-1,4905,"和"],[1,5040,"\n"],[-1,5765,"\n"],[1,5949,"\n"],[-1,5983,"\n"],[-1,6244,"，"],[1,6247,"任"]],[6246,6246],[2285,2285]]],[1528099678521,["Re@Re.local",[[1,6692,"下划线替代。比如说，对于图2这种情况，可以"]],[6692,6692],[6713,6713]]],[1528099685769,["Re@Re.local",[[-1,6711,"可以"]],[6713,6713],[6711,6711]]],[1528099686845,["Re@Re.local",[[1,6711,"啃呢个"]],[6711,6711],[6714,6714]]],[1528099687666,["Re@Re.local",[[-1,6711,"啃呢个"]],[6714,6714],[6711,6711]]],[1528099693025,["Re@Re.local",[[1,6711,"可能会有个桶被贴上:"]],[6711,6711],[6721,6721]]],[1528099693700,["Re@Re.local",[[-1,6720,":"]],[6721,6721],[6720,6720]]],[1528099702597,["Re@Re.local",[[1,6720,"\"POP_\"。当在列表中搜索"]],[6720,6720],[6734,6734]]],[1528099705477,["Re@Re.local",[[-1,6732,"搜索"]],[6734,6734],[6732,6732]]],[1528099715229,["Re@Re.local",[[1,6732,"对每个单词进行处理时，都将"]],[6732,6732],[6745,6745]]],[1528099715529,["Re@Re.local",[[-1,6743,"都将"]],[6745,6745],[6743,6743]]],[1528099729130,["Re@Re.local",[[1,6743,"将该单词与每个桶进行对比，使用"]],[6743,6743],[6758,6758]]],[1528099789475,[null,[[-1,2285,"（"],[1,2286,"中"],[-1,3414,"\n"],[1,3881,"\n"],[1,3970,"\\"],[-1,3972,"-"],[-1,4021,"象"],[1,4023,"象"],[-1,4055,"\n"],[1,4889,"\n"],[-1,4905,"v"],[1,4906,"和"],[-1,5040,"\n"],[1,5766,"\n"],[-1,5949,"\n"],[1,5984,"\n"],[1,6244,"，"],[-1,6246,"任"]],[2285,2285],[6246,6246]]],[1528099789475,[null,[[1,2285,"（"],[-1,2285,"中"],[1,3414,"\n"],[-1,3880,"\n"],[-1,3970,"\\"],[1,3973,"-"],[1,4021,"象"],[-1,4022,"象"],[1,4055,"\n"],[-1,4888,"\n"],[1,4905,"v"],[-1,4905,"和"],[1,5040,"\n"],[-1,5765,"\n"],[1,5949,"\n"],[-1,5983,"\n"],[-1,6244,"，"],[1,6247,"任"]],[6246,6246],[2285,2285]]],[1528099742564,["Re@Re.local",[[-1,6756,"使用"]],[6758,6758],[6756,6756]]],[1528099750515,["Re@Re.local",[[1,6756,"将\"_\"用作通配符，因此"]],[6756,6756],[6768,6768]]],[1528099751251,["Re@Re.local",[[-1,6766,"因此"]],[6768,6768],[6766,6766]]],[1528099753635,["Re@Re.local",[[1,6766,"因此\"po"]],[6766,6766],[6771,6771]]],[1528099754192,["Re@Re.local",[[-1,6769,"po"]],[6771,6771],[6769,6769]]],[1528099755275,["Re@Re.local",[[1,6769,"POPO"]],[6769,6769],[6773,6773]]],[1528099755669,["Re@Re.local",[[-1,6772,"O"]],[6773,6773],[6772,6772]]],[1528099772186,["Re@Re.local",[[1,6772,"E\"和\"POPS\"都与\"POP_\"匹配。"]],[6772,6772],[6792,6792]]],[1528099774283,["Re@Re.local",[[1,6758,"\\"]],[6758,6758],[6759,6759]]],[1528099776912,["Re@Re.local",[[1,6788,"\\"]],[6788,6788],[6789,6789]]],[1528099849462,[null,[[-1,2285,"（"],[1,2286,"中"],[-1,3414,"\n"],[1,3881,"\n"],[1,3970,"\\"],[-1,3972,"-"],[-1,4021,"象"],[1,4023,"象"],[-1,4055,"\n"],[1,4889,"\n"],[-1,4905,"v"],[1,4906,"和"],[-1,5040,"\n"],[1,5766,"\n"],[-1,5949,"\n"],[1,5984,"\n"],[1,6244,"，"],[-1,6246,"任"]],[2285,2285],[6246,6246]]],[1528099849463,[null,[[1,2285,"（"],[-1,2285,"中"],[1,3414,"\n"],[-1,3880,"\n"],[-1,3970,"\\"],[1,3973,"-"],[1,4021,"象"],[-1,4022,"象"],[1,4055,"\n"],[-1,4888,"\n"],[1,4905,"v"],[-1,4905,"和"],[1,5040,"\n"],[-1,5765,"\n"],[1,5949,"\n"],[-1,5983,"\n"],[-1,6244,"，"],[1,6247,"任"]],[6246,6246],[2285,2285]]],[1528099840211,["Re@Re.local",[[1,6794,"\n\n"]],[6794,6794],[6795,6795]]],[1528099840606,["Re@Re.local",[[1,6796,"\n"]],[6795,6795],[6796,6796]]],[1528099909479,[null,[[-1,2285,"（"],[1,2286,"中"],[-1,3414,"\n"],[1,3881,"\n"],[1,3970,"\\"],[-1,3972,"-"],[-1,4021,"象"],[1,4023,"象"],[-1,4055,"\n"],[1,4889,"\n"],[-1,4905,"v"],[1,4906,"和"],[-1,5040,"\n"],[1,5766,"\n"],[-1,5949,"\n"],[1,5984,"\n"],[1,6244,"，"],[-1,6246,"任"]],[2285,2285],[6246,6246]]],[1528099909479,[null,[[1,2285,"（"],[-1,2285,"中"],[1,3414,"\n"],[-1,3880,"\n"],[-1,3970,"\\"],[1,3973,"-"],[1,4021,"象"],[-1,4022,"象"],[1,4055,"\n"],[-1,4888,"\n"],[1,4905,"v"],[-1,4905,"和"],[1,5040,"\n"],[-1,5765,"\n"],[1,5949,"\n"],[-1,5983,"\n"],[-1,6244,"，"],[1,6247,"任"]],[6246,6246],[2285,2285]]],[1528099906206,["Re@Re.local",[[1,6794,"每当找到1个匹配的桶时，都将该单词放进去。当所有的单词都放在了正确的桶里是"]],[6794,6794],[6831,6831]]],[1528099906507,["Re@Re.local",[[-1,6830,"是"]],[6831,6831],[6830,6830]]],[1528099907198,["Re@Re.local",[[1,6830,"时，"]],[6830,6830],[6832,6832]]],[1528099969501,[null,[[-1,2285,"（"],[1,2286,"中"],[-1,3414,"\n"],[1,3881,"\n"],[1,3970,"\\"],[-1,3972,"-"],[-1,4021,"象"],[1,4023,"象"],[-1,4055,"\n"],[1,4889,"\n"],[-1,4905,"v"],[1,4906,"和"],[-1,5040,"\n"],[1,5766,"\n"],[-1,5949,"\n"],[1,5984,"\n"],[1,6244,"，"],[-1,6246,"任"]],[2285,2285],[6246,6246]]],[1528099969501,[null,[[1,2285,"（"],[-1,2285,"中"],[1,3414,"\n"],[-1,3880,"\n"],[-1,3970,"\\"],[1,3973,"-"],[1,4021,"象"],[-1,4022,"象"],[1,4055,"\n"],[-1,4888,"\n"],[1,4905,"v"],[-1,4905,"和"],[1,5040,"\n"],[-1,5765,"\n"],[1,5949,"\n"],[-1,5983,"\n"],[-1,6244,"，"],[1,6247,"任"]],[6246,6246],[2285,2285]]],[1528099922517,["Re@Re.local",[[1,6832,"可以确定同一桶里的单词是相连的。"]],[6832,6832],[6848,6848]]],[1528099923034,["Re@Re.local",[[1,6851,"\n"]],[6848,6848],[6849,6849]]],[1528099923260,["Re@Re.local",[[1,6852,"\n"]],[6849,6849],[6850,6850]]],[1528099926657,["Re@Re.local",[[1,6850,"![../_images/wordbuckets.png](http://interactivepython.org/courselib/static/pythonds/_images/wordbuckets.png)"]],[6850,6850],[6959,6959]]],[1528099926862,["Re@Re.local",[[1,6962,"\n"]],[6959,6959],[6960,6960]]],[1528099927146,["Re@Re.local",[[1,6963,"\n"]],[6960,6960],[6961,6961]]],[1528099944638,["Re@Re.local",[[1,6961,"在Python中，可以通过字典实现行"]],[6961,6961],[6979,6979]]],[1528099944716,["Re@Re.local",[[-1,6978,"行"]],[6979,6979],[6978,6978]]],[1528099966692,["Re@Re.local",[[1,6978,"上述方案。桶的标签作为字典的键，键对应的值为列表"]],[6978,6978],[7002,7002]]],[1528099967190,["Re@Re.local",[[-1,7000,"列表"]],[7002,7002],[7000,7000]]],[1528099968459,["Re@Re.local",[[1,7000,"单词"]],[7000,7000],[7002,7002]]],[1528100029477,[null,[[-1,2285,"（"],[1,2286,"中"],[-1,3414,"\n"],[1,3881,"\n"],[1,3970,"\\"],[-1,3972,"-"],[-1,4021,"象"],[1,4023,"象"],[-1,4055,"\n"],[1,4889,"\n"],[-1,4905,"v"],[1,4906,"和"],[-1,5040,"\n"],[1,5766,"\n"],[-1,5949,"\n"],[1,5984,"\n"],[1,6244,"，"],[-1,6246,"任"]],[2285,2285],[6246,6246]]],[1528100029477,[null,[[1,2285,"（"],[-1,2285,"中"],[1,3414,"\n"],[-1,3880,"\n"],[-1,3970,"\\"],[1,3973,"-"],[1,4021,"象"],[-1,4022,"象"],[1,4055,"\n"],[-1,4888,"\n"],[1,4905,"v"],[-1,4905,"和"],[1,5040,"\n"],[-1,5765,"\n"],[1,5949,"\n"],[-1,5983,"\n"],[-1,6244,"，"],[1,6247,"任"]],[6246,6246],[2285,2285]]],[1528099971749,["Re@Re.local",[[1,7004,"。当"]],[7004,7004],[7006,7006]]],[1528099975021,["Re@Re.local",[[-1,7005,"当"]],[7006,7006],[7005,7005]]],[1528100015792,["Re@Re.local",[[1,7005,"首先为各个单词在图中创建1个节点。然后为即"]],[7005,7005],[7026,7026]]],[1528100016012,["Re@Re.local",[[-1,7025,"即"]],[7026,7026],[7025,7025]]],[1528100017615,["Re@Re.local",[[1,7025,"节点"]],[7025,7025],[7027,7027]]],[1528100017982,["Re@Re.local",[[-1,7025,"节点"]],[7027,7027],[7025,7025]]],[1528100019729,["Re@Re.local",[[-1,7018,"个节"]],[7020,7020],[7018,7018]]],[1528100022197,["Re@Re.local",[[1,7018,"个顶"]],[7018,7018],[7020,7020]]],[1528100028191,["Re@Re.local",[[1,7025,"各顶点直接"]],[7025,7025],[7030,7030]]],[1528100089522,[null,[[-1,2285,"（"],[1,2286,"中"],[-1,3414,"\n"],[1,3881,"\n"],[1,3970,"\\"],[-1,3972,"-"],[-1,4021,"象"],[1,4023,"象"],[-1,4055,"\n"],[1,4889,"\n"],[-1,4905,"v"],[1,4906,"和"],[-1,5040,"\n"],[-1,5766,""],[1,5766,"\n"],[-1,5949,"\n"],[-1,5984,""],[1,5984,"\n"],[1,6244,"，"],[-1,6246,"任"],[-1,7002,"\n\n"],[1,7004,"列表"],[1,7031,"\n\n"]],[2285,2285],[7033,7033]]],[1528100089522,[null,[[1,2285,"（"],[-1,2285,"中"],[1,3414,"\n"],[-1,3880,"\n"],[-1,3970,"\\"],[1,3973,"-"],[1,4021,"象"],[-1,4022,"象"],[1,4055,"\n"],[-1,4888,"\n"],[1,4905,"v"],[-1,4905,"和"],[1,5040,"\n"],[1,5765,""],[-1,5765,"\n"],[1,5949,"\n"],[1,5983,""],[-1,5983,"\n"],[-1,6244,"，"],[1,6247,"任"],[1,7002,"\n\n"],[-1,7002,"列表"],[-1,7031,"\n\n"]],[7033,7033],[2285,2285]]],[1528100030006,["Re@Re.local",[[1,7030,"创建"]],[7030,7030],[7032,7032]]],[1528100038133,["Re@Re.local",[[-1,7025,"各顶点直接创建"]],[7032,7032],[7025,7025]]],[1528100044103,["Re@Re.local",[[1,7025,"在字典中具有相同键"]],[7025,7025],[7034,7034]]],[1528100045856,["Re@Re.local",[[-1,7024,"为在字典中具有相同键"]],[7034,7034],[7024,7024]]],[1528100048045,["Re@Re.local",[[1,7024,"字典同意"]],[7024,7024],[7028,7028]]],[1528100048778,["Re@Re.local",[[-1,7026,"同意"]],[7028,7028],[7026,7026]]],[1528100051217,["Re@Re.local",[[1,7026,"同一键"]],[7026,7026],[7029,7029]]],[1528100053835,["Re@Re.local",[[1,7024,"为"]],[7024,7024],[7025,7025]]],[1528100056213,["Re@Re.local",[[1,7030,"x"]],[6985,7030],[7030,7031]]],[1528100056391,["Re@Re.local",[[1,7031,"i"]],[7030,7031],[7030,7032]]],[1528100056507,["Re@Re.local",[[1,7032,"a"]],[7030,7032],[7030,7033]]],[1528100062394,["Re@Re.local",[[-1,7030,"xia"],[1,7033,"下的单词一"]],[7030,7033],[7035,7035]]],[1528100062484,["Re@Re.local",[[-1,7034,"一"]],[7035,7035],[7034,7034]]],[1528100064201,["Re@Re.local",[[1,7034,"之间"]],[7034,7034],[7036,7036]]],[1528100069243,["Re@Re.local",[[1,7025,"处于"]],[7025,7025],[7027,7027]]],[1528100075780,["Re@Re.local",[[1,7038,"创建边。代码1"]],[7038,7038],[7045,7045]]],[1528100077460,["Re@Re.local",[[-1,7041,"。代码1"]],[7045,7045],[7041,7041]]],[1528100080261,["Re@Re.local",[[1,7041,"，如代码1所示。"]],[7041,7041],[7049,7049]]],[1528100080570,["Re@Re.local",[[1,7052,"\n"]],[7049,7049],[7050,7050]]],[1528100087357,["Re@Re.local",[[1,7053,"\n"]],[7050,7050],[7051,7051]]],[1528100088577,["Re@Re.local",[[1,7051,"**"]],[7051,7051],[7053,7053]]],[1528100149513,[null,[[-1,2285,"（"],[1,2286,"中"],[-1,3414,"\n"],[1,3881,"\n"],[1,3970,"\\"],[-1,3972,"-"],[-1,4021,"象"],[1,4023,"象"],[-1,4055,"\n"],[1,4889,"\n"],[-1,4905,"v"],[1,4906,"和"],[-1,5040,"\n"],[-1,5766,""],[1,5766,"\n"],[-1,5949,"\n"],[-1,5984,""],[1,5984,"\n"],[1,6244,"，"],[-1,6246,"任"],[-1,7002,"\n\n"],[1,7004,"列表"],[1,7054,"\n\n"]],[2285,2285],[7056,7056]]],[1528100149513,[null,[[1,2285,"（"],[-1,2285,"中"],[1,3414,"\n"],[-1,3880,"\n"],[-1,3970,"\\"],[1,3973,"-"],[1,4021,"象"],[-1,4022,"象"],[1,4055,"\n"],[-1,4888,"\n"],[1,4905,"v"],[-1,4905,"和"],[1,5040,"\n"],[1,5765,""],[-1,5765,"\n"],[1,5949,"\n"],[1,5983,""],[-1,5983,"\n"],[-1,6244,"，"],[1,6247,"任"],[1,7002,"\n\n"],[-1,7002,"列表"],[-1,7054,"\n\n"]],[7056,7056],[2285,2285]]],[1528100089966,["Re@Re.local",[[-1,7051,"**"]],[7053,7053],[7051,7051]]],[1528100090807,["Re@Re.local",[[1,7051,"```"]],[7051,7051],[7054,7054]]],[1528100091299,["Re@Re.local",[[-1,7051,"```"]],[7054,7054],[7051,7051]]],[1528100091579,["Re@Re.local",[[-1,7053,"\n"]],[7051,7051],[7050,7050]]],[1528100093472,["Re@Re.local",[[1,7050,"```Python"]],[7050,7050],[7059,7059]]],[1528100093681,["Re@Re.local",[[1,7062,"\n"]],[7059,7059],[7060,7060]]],[1528100093896,["Re@Re.local",[[1,7060,"from pythonds.graphs import Graph\n\ndef buildGraph(wordFile):\n    d = {}\n    g = Graph()\n    wfile = open(wordFile,'r')\n    # create buckets of words that differ by one letter\n    for line in wfile:\n        word = line[:-1]\n        for i in range(len(word)):\n            bucket = word[:i] + '_' + word[i+1:]\n            if bucket in d:\n                d[bucket].append(word)\n            else:\n                d[bucket] = [word]\n    # add vertices and edges for words in the same bucket\n    for bucket in d.keys():\n        for word1 in d[bucket]:\n            for word2 in d[bucket]:\n                if word1 != word2:\n                    g.addEdge(word1,word2)\n    return g"]],[7060,7060],[7731,7731]]],[1528100094052,["Re@Re.local",[[1,7734,"\n"]],[7731,7731],[7732,7732]]],[1528100094666,["Re@Re.local",[[1,7732,"```"]],[7732,7732],[7735,7735]]],[1528100094901,["Re@Re.local",[[1,7738,"\n"]],[7735,7735],[7736,7736]]],[1528100097272,["Re@Re.local",[[1,7736,"w"]],[7736,7736],[7737,7737]]],[1528100097526,["Re@Re.local",[[-1,7736,"w"]],[7737,7737],[7736,7736]]],[1528100099530,["Re@Re.local",[[1,7736,"因为这"]],[7736,7736],[7739,7739]]],[1528100100214,["Re@Re.local",[[-1,7736,"因为这"]],[7739,7739],[7736,7736]]],[1528100101757,["Re@Re.local",[[1,7736,"考虑到"]],[7736,7736],[7739,7739]]],[1528100102674,["Re@Re.local",[[-1,7736,"考虑到"]],[7739,7739],[7736,7736]]],[1528100115103,["Re@Re.local",[[1,7736,"这是第一个先"]],[7736,7736],[7742,7742]]],[1528100115206,["Re@Re.local",[[-1,7741,"先"]],[7742,7742],[7741,7741]]],[1528100116967,["Re@Re.local",[[1,7741,"跟显示生活"]],[7741,7741],[7746,7746]]],[1528100117568,["Re@Re.local",[[-1,7742,"显示生活"]],[7746,7746],[7742,7742]]],[1528100126234,["Re@Re.local",[[1,7742,"现实生活相关的图问题，读者肯能会"]],[7742,7742],[7758,7758]]],[1528100127121,["Re@Re.local",[[-1,7755,"肯能会"]],[7758,7758],[7755,7755]]],[1528100131128,["Re@Re.local",[[1,7755,"可能回想"]],[7755,7755],[7759,7759]]],[1528100131950,["Re@Re.local",[[-1,7757,"回想"]],[7759,7759],[7757,7757]]],[1528100132869,["Re@Re.local",[[1,7757,"回"]],[7757,7757],[7758,7758]]],[1528100133277,["Re@Re.local",[[-1,7757,"回"]],[7758,7758],[7757,7757]]],[1528100138938,["Re@Re.local",[[1,7757,"会好奇该图的树三度"]],[7757,7757],[7766,7766]]],[1528100139945,["Re@Re.local",[[-1,7763,"树三度"]],[7766,7766],[7763,7763]]],[1528100148895,["Re@Re.local",[[1,7763,"稀疏成都。对"]],[7763,7763],[7769,7769]]],[1528100149372,["Re@Re.local",[[-1,7766,"都。对"]],[7769,7769],[7766,7766]]],[1528100209517,[null,[[-1,2285,"（"],[1,2286,"中"],[-1,3414,"\n"],[1,3881,"\n"],[1,3970,"\\"],[-1,3972,"-"],[-1,4021,"象"],[1,4023,"象"],[-1,4055,"\n"],[1,4889,"\n"],[-1,4905,"v"],[1,4906,"和"],[-1,5040,"\n"],[1,5766,"\n"],[-1,5949,"\n"],[1,5984,"\n"],[1,6244,"，"],[-1,6246,"任"],[-1,7002,"\n\n"],[1,7004,"列表"],[-1,7736,""],[1,7766,"\n"]],[2285,2285],[7767,7767]]],[1528100209517,[null,[[1,2285,"（"],[-1,2285,"中"],[1,3414,"\n"],[-1,3880,"\n"],[-1,3970,"\\"],[1,3973,"-"],[1,4021,"象"],[-1,4022,"象"],[1,4055,"\n"],[-1,4888,"\n"],[1,4905,"v"],[-1,4905,"和"],[1,5040,"\n"],[-1,5765,"\n"],[1,5949,"\n"],[-1,5983,"\n"],[-1,6244,"，"],[1,6247,"任"],[1,7002,"\n\n"],[-1,7002,"列表"],[1,7736,""],[-1,7766,"\n"]],[7767,7767],[2285,2285]]],[1528100160815,["Re@Re.local",[[1,7765,"程度。对于该问题，其稀疏"]],[7765,7765],[7777,7777]]],[1528100164124,["Re@Re.local",[[-1,7774,"其稀疏"]],[7777,7777],[7774,7774]]],[1528100181826,["Re@Re.local",[[1,7774,"准备的单词列表有"]],[7774,7774],[7782,7782]]],[1528100182179,["Re@Re.local",[[-1,7781,"有"]],[7782,7782],[7781,7781]]],[1528100185664,["Re@Re.local",[[1,7781,"有5510长"]],[7781,7781],[7787,7787]]],[1528100185784,["Re@Re.local",[[-1,7786,"长"]],[7787,7787],[7786,7786]]],[1528100198404,["Re@Re.local",[[1,7786,"个。若果使用邻接矩阵，矩阵将会有2"]],[7786,7786],[7803,7803]]],[1528100199485,["Re@Re.local",[[-1,7802,"2"]],[7803,7803],[7802,7802]]],[1528100200430,["Re@Re.local",[[1,7802,"55"]],[7802,7802],[7804,7804]]],[1528100201013,["Re@Re.local",[[-1,7803,"5"]],[7804,7804],[7803,7803]]],[1528100201194,["Re@Re.local",[[1,7803,"1"]],[7803,7803],[7804,7804]]],[1528100201705,["Re@Re.local",[[-1,7803,"1"]],[7804,7804],[7803,7803]]],[1528100208891,["Re@Re.local",[[1,7803,"110*5110个单元格。"]],[7803,7803],[7816,7816]]],[1528100269544,[null,[[-1,2285,"（"],[1,2286,"中"],[-1,3414,"\n"],[1,3881,"\n"],[1,3970,"\\"],[-1,3972,"-"],[-1,4021,"象"],[1,4023,"象"],[-1,4055,"\n"],[1,4889,"\n"],[-1,4905,"v"],[1,4906,"和"],[-1,5040,"\n"],[1,5766,"\n"],[-1,5949,"\n"],[1,5984,"\n"],[1,6244,"，"],[-1,6246,"任"],[-1,7002,"\n\n"],[1,7004,"列表"],[-1,7816,"成"],[1,7817,"\n"]],[2285,2285],[7818,7818]]],[1528100269544,[null,[[1,2285,"（"],[-1,2285,"中"],[1,3414,"\n"],[-1,3880,"\n"],[-1,3970,"\\"],[1,3973,"-"],[1,4021,"象"],[-1,4022,"象"],[1,4055,"\n"],[-1,4888,"\n"],[1,4905,"v"],[-1,4905,"和"],[1,5040,"\n"],[-1,5765,"\n"],[1,5949,"\n"],[-1,5983,"\n"],[-1,6244,"，"],[1,6247,"任"],[1,7002,"\n\n"],[-1,7002,"列表"],[1,7816,"成"],[-1,7816,"\n"]],[7818,7818],[2285,2285]]],[1528100213798,["Re@Re.local",[[-1,7815,"。"]],[7816,7816],[7815,7815]]],[1528100218840,["Re@Re.local",[[1,7815,"，而使用bi"]],[7815,7815],[7821,7821]]],[1528100219250,["Re@Re.local",[[-1,7820,"i"]],[7821,7821],[7820,7820]]],[1528100229451,["Re@Re.local",[[1,7820,"uildGraph函数的图仅有53278"]],[7820,7820],[7840,7840]]],[1528100230147,["Re@Re.local",[[-1,7838,"78"]],[7840,7840],[7838,7838]]],[1528100247328,["Re@Re.local",[[1,7838,"86条边，因此仅有0.20%的单元格被填充了。"]],[7838,7838],[7861,7861]]],[1528100248932,["Re@Re.local",[[-1,7860,"。"]],[7861,7861],[7860,7860]]],[1528100255086,["Re@Re.local",[[1,7860,"，这实际上是一个很稀疏的矩阵。"]],[7860,7860],[7875,7875]]],[1528100255763,["Re@Re.local",[[-1,7874,"。"]],[7875,7875],[7874,7874]]],[1528100257985,["Re@Re.local",[[1,7874,"了/。"]],[7874,7874],[7877,7877]]],[1528100258824,["Re@Re.local",[[-1,7875,"/。"]],[7877,7877],[7875,7875]]],[1528100259271,["Re@Re.local",[[1,7875,"。"]],[7875,7875],[7876,7876]]],[1528100329543,[null,[[-1,2285,"（"],[1,2286,"中"],[-1,3414,"\n"],[1,3881,"\n"],[1,3970,"\\"],[-1,3972,"-"],[-1,4021,"象"],[1,4023,"象"],[-1,4055,"\n"],[1,4889,"\n"],[-1,4905,"v"],[1,4906,"和"],[-1,5040,"\n"],[1,5766,"\n"],[-1,5949,"\n"],[1,5984,"\n"],[1,6244,"，"],[-1,6246,"任"],[-1,7002,"\n\n"],[1,7004,"列表"],[-1,7876,"成"],[1,7877,"\n"]],[2285,2285],[7878,7878]]],[1528100329543,[null,[[1,2285,"（"],[-1,2285,"中"],[1,3414,"\n"],[-1,3880,"\n"],[-1,3970,"\\"],[1,3973,"-"],[1,4021,"象"],[-1,4022,"象"],[1,4055,"\n"],[-1,4888,"\n"],[1,4905,"v"],[-1,4905,"和"],[1,5040,"\n"],[-1,5765,"\n"],[1,5949,"\n"],[-1,5983,"\n"],[-1,6244,"，"],[1,6247,"任"],[1,7002,"\n\n"],[-1,7002,"列表"],[1,7876,"成"],[-1,7876,"\n"]],[7878,7878],[2285,2285]]],[1528100319373,["Re@Re.local",[[1,7879,"\n"]],[7876,7876],[7877,7877]]],[1528100319633,["Re@Re.local",[[1,7880,"\n"]],[7877,7877],[7878,7878]]],[1528100328650,["Re@Re.local",[[1,7878,"## 7.9 实现宽度优先搜索（"]],[7878,7878],[7894,7894]]],[1528100389527,[null,[[-1,2285,"（"],[1,2286,"中"],[-1,3414,"\n"],[1,3881,"\n"],[1,3970,"\\"],[-1,3972,"-"],[-1,4021,"象"],[1,4023,"象"],[-1,4055,"\n"],[1,4889,"\n"],[-1,4905,"v"],[1,4906,"和"],[-1,5040,"\n"],[1,5766,"\n"],[-1,5949,"\n"],[1,5984,"\n"],[1,6244,"，"],[-1,6246,"任"],[-1,7002,"\n\n"],[1,7004,"列表"],[-1,7876,"成"],[1,7877,"\n"]],[2285,2285],[7878,7878]]],[1528100389527,[null,[[1,2285,"（"],[-1,2285,"中"],[1,3414,"\n"],[-1,3880,"\n"],[-1,3970,"\\"],[1,3973,"-"],[1,4021,"象"],[-1,4022,"象"],[1,4055,"\n"],[-1,4888,"\n"],[1,4905,"v"],[-1,4905,"和"],[1,5040,"\n"],[-1,5765,"\n"],[1,5949,"\n"],[-1,5983,"\n"],[-1,6244,"，"],[1,6247,"任"],[1,7002,"\n\n"],[-1,7002,"列表"],[1,7876,"成"],[-1,7876,"\n"]],[7878,7878],[2285,2285]]],[1528100335877,["Re@Re.local",[[1,7894,"breadth first search） ##"]],[7894,7894],[7918,7918]]],[1528100336056,["Re@Re.local",[[1,7921,"\n"]],[7918,7918],[7919,7919]]],[1528100337031,["Re@Re.local",[[1,7922,"\n"]],[7919,7919],[7920,7920]]],[1528100351182,["Re@Re.local",[[1,7920,"创建好了图，边"]],[7920,7920],[7927,7927]]],[1528100351318,["Re@Re.local",[[-1,7926,"边"]],[7927,7927],[7926,7926]]],[1528100374316,["Re@Re.local",[[1,7926,"接下来便可以研究字梯问题的最优算法了。"]],[7926,7926],[7945,7945]]],[1528100377979,["Re@Re.local",[[1,7934,"解决"]],[7934,7934],[7936,7936]]],[1528100381499,["Re@Re.local",[[1,7947,"图"]],[7947,7947],[7948,7948]]],[1528100381663,["Re@Re.local",[[-1,7947,"图"]],[7948,7948],[7947,7947]]],[1528100386450,["Re@Re.local",[[1,7947,"这里使用的算法的"]],[7947,7947],[7955,7955]]],[1528100386557,["Re@Re.local",[[-1,7954,"的"]],[7955,7955],[7954,7954]]],[1528100387155,["Re@Re.local",[[1,7954,"是"]],[7954,7954],[7955,7955]]],[1528100387761,["Re@Re.local",[[-1,7954,"是"]],[7955,7955],[7954,7954]]],[1528100389103,["Re@Re.local",[[1,7954,"被称为"]],[7954,7954],[7957,7957]]],[1528100449523,[null,[[-1,2285,"（"],[1,2286,"中"],[-1,3414,"\n"],[1,3881,"\n"],[1,3970,"\\"],[-1,3972,"-"],[-1,4021,"象"],[1,4023,"象"],[-1,4055,"\n"],[1,4889,"\n"],[-1,4905,"v"],[1,4906,"和"],[-1,5040,"\n"],[1,5766,"\n"],[-1,5949,"\n"],[1,5984,"\n"],[1,6244,"，"],[-1,6246,"任"],[-1,7002,"\n\n"],[1,7004,"列表"],[-1,7876,"成"],[1,7877,"\n"]],[2285,2285],[7878,7878]]],[1528100449524,[null,[[1,2285,"（"],[-1,2285,"中"],[1,3414,"\n"],[-1,3880,"\n"],[-1,3970,"\\"],[1,3973,"-"],[1,4021,"象"],[-1,4022,"象"],[1,4055,"\n"],[-1,4888,"\n"],[1,4905,"v"],[-1,4905,"和"],[1,5040,"\n"],[-1,5765,"\n"],[1,5949,"\n"],[-1,5983,"\n"],[-1,6244,"，"],[1,6247,"任"],[1,7002,"\n\n"],[-1,7002,"列表"],[1,7876,"成"],[-1,7876,"\n"]],[7878,7878],[2285,2285]]],[1528100402192,["Re@Re.local",[[1,7957,"**宽度优先搜索（breadth first search）**，"]],[7957,7957],[7990,7990]]],[1528100403283,["Re@Re.local",[[-1,7989,"，"]],[7990,7990],[7989,7989]]],[1528100405685,["Re@Re.local",[[1,7989,"。图算法"]],[7989,7989],[7993,7993]]],[1528100406701,["Re@Re.local",[[-1,7990,"图算法"]],[7993,7993],[7990,7990]]],[1528100409998,["Re@Re.local",[[1,7990,"BFG"]],[7990,7990],[7993,7993]]],[1528100410826,["Re@Re.local",[[-1,7992,"G"]],[7993,7993],[7992,7992]]],[1528100411563,["Re@Re.local",[[1,7992,"s"]],[7992,7992],[7993,7993]]],[1528100411884,["Re@Re.local",[[-1,7992,"s"]],[7993,7993],[7992,7992]]],[1528100412207,["Re@Re.local",[[1,7992,"S"]],[7992,7992],[7993,7993]]],[1528100415521,["Re@Re.local",[[1,7986,",BFS"]],[7986,7986],[7990,7990]]],[1528100420682,["Re@Re.local",[[1,7997,"是一种"]],[7997,7997],[8000,8000]]],[1528100424144,["Re@Re.local",[[-1,7997,"是一种"]],[8000,8000],[7997,7997]]],[1528100428932,["Re@Re.local",[[1,7997,"对图搜索的组简单"]],[7997,7997],[8005,8005]]],[1528100429574,["Re@Re.local",[[-1,8002,"组简单"]],[8005,8005],[8002,8002]]],[1528100433436,["Re@Re.local",[[1,8002,"最简单的算法之一。"]],[8002,8002],[8011,8011]]],[1528100509533,[null,[[-1,2285,"（"],[1,2286,"中"],[-1,3414,"\n"],[1,3881,"\n"],[1,3970,"\\"],[-1,3972,"-"],[-1,4021,"象"],[1,4023,"象"],[-1,4055,"\n"],[1,4889,"\n"],[-1,4905,"v"],[1,4906,"和"],[-1,5040,"\n"],[1,5766,"\n"],[-1,5949,"\n"],[1,5984,"\n"],[1,6244,"，"],[-1,6246,"任"],[-1,7002,"\n\n"],[1,7004,"列表"],[-1,7876,"成"],[1,7877,"\n"]],[2285,2285],[7878,7878]]],[1528100509533,[null,[[1,2285,"（"],[-1,2285,"中"],[1,3414,"\n"],[-1,3880,"\n"],[-1,3970,"\\"],[1,3973,"-"],[1,4021,"象"],[-1,4022,"象"],[1,4055,"\n"],[-1,4888,"\n"],[1,4905,"v"],[-1,4905,"和"],[1,5040,"\n"],[-1,5765,"\n"],[1,5949,"\n"],[-1,5983,"\n"],[-1,6244,"，"],[1,6247,"任"],[1,7002,"\n\n"],[-1,7002,"列表"],[1,7876,"成"],[-1,7876,"\n"]],[7878,7878],[2285,2285]]],[1528100454502,["Re@Re.local",[[1,7997,"是用于"]],[7997,7997],[8000,8000]]],[1528100456095,["Re@Re.local",[[-1,8000,"对"]],[8001,8001],[8000,8000]]],[1528100467854,["Re@Re.local",[[1,8013,"它也用"]],[8013,8013],[8016,8016]]],[1528100468025,["Re@Re.local",[[-1,8015,"用"]],[8016,8016],[8015,8015]]],[1528100469389,["Re@Re.local",[[1,8015,"作为"]],[8015,8015],[8017,8017]]],[1528100469724,["Re@Re.local",[[-1,8015,"作为"]],[8017,8017],[8015,8015]]],[1528100487321,["Re@Re.local",[[1,8015,"用作其它几种重要的图算法的原型"]],[8015,8015],[8030,8030]]],[1528100489916,["Re@Re.local",[[-1,8015,"用作"]],[8016,8016],[8015,8015]]],[1528100494241,["Re@Re.local",[[1,8015,"是之后将研究的"]],[8015,8015],[8022,8022]]],[1528100496339,["Re@Re.local",[[1,8035,"。"]],[8035,8035],[8036,8036]]],[1528100496780,["Re@Re.local",[[1,8039,"\n"]],[8036,8036],[8037,8037]]],[1528100497088,["Re@Re.local",[[1,8040,"\n"]],[8037,8037],[8038,8038]]],[1528100505708,["Re@Re.local",[[1,8038,"给定图G以及其实"]],[8038,8038],[8046,8046]]],[1528100506273,["Re@Re.local",[[-1,8044,"其实"]],[8046,8046],[8044,8044]]],[1528100509175,["Re@Re.local",[[1,8044,"起始顶点s，"]],[8044,8044],[8050,8050]]],[1528100569537,[null,[[-1,2285,"（"],[1,2286,"中"],[-1,3414,"\n"],[1,3881,"\n"],[1,3970,"\\"],[-1,3972,"-"],[-1,4021,"象"],[1,4023,"象"],[-1,4055,"\n"],[1,4889,"\n"],[-1,4905,"v"],[1,4906,"和"],[-1,5040,"\n"],[1,5766,"\n"],[-1,5949,"\n"],[1,5984,"\n"],[1,6244,"，"],[-1,6246,"任"],[-1,7002,"\n\n"],[1,7004,"列表"],[-1,7876,"成"],[1,7877,"\n"]],[2285,2285],[7878,7878]]],[1528100569538,[null,[[1,2285,"（"],[-1,2285,"中"],[1,3414,"\n"],[-1,3880,"\n"],[-1,3970,"\\"],[1,3973,"-"],[1,4021,"象"],[-1,4022,"象"],[1,4055,"\n"],[-1,4888,"\n"],[1,4905,"v"],[-1,4905,"和"],[1,5040,"\n"],[-1,5765,"\n"],[1,5949,"\n"],[-1,5983,"\n"],[-1,6244,"，"],[1,6247,"任"],[1,7002,"\n\n"],[-1,7002,"列表"],[1,7876,"成"],[-1,7876,"\n"]],[7878,7878],[2285,2285]]],[1528100517236,["Re@Re.local",[[1,8050,"宽度有限算通过"]],[8050,8050],[8057,8057]]],[1528100532004,["Re@Re.local",[[-1,8052,"有限算通过"]],[8057,8057],[8052,8052]]],[1528100553633,["Re@Re.local",[[1,8052,"优先算法将在图内进行搜索一"]],[8052,8052],[8065,8065]]],[1528100556069,["Re@Re.local",[[-1,8057,"在图内进行搜索一"]],[8065,8065],[8057,8057]]],[1528100564534,["Re@Re.local",[[1,8057,"对图内的边进行搜索以找到Gz"]],[8057,8057],[8071,8071]]],[1528100564893,["Re@Re.local",[[-1,8070,"z"]],[8071,8071],[8070,8070]]],[1528100566865,["Re@Re.local",[[1,8070,"中搜哦有"]],[8070,8070],[8074,8074]]],[1528100567880,["Re@Re.local",[[-1,8071,"搜哦有"]],[8074,8074],[8071,8071]]],[1528100569180,["Re@Re.local",[[1,8071,"所有的"]],[8071,8071],[8074,8074]]],[1528100629542,[null,[[-1,2285,"（"],[1,2286,"中"],[-1,3414,"\n"],[1,3881,"\n"],[1,3970,"\\"],[-1,3972,"-"],[-1,4021,"象"],[1,4023,"象"],[-1,4055,"\n"],[1,4889,"\n"],[-1,4905,"v"],[1,4906,"和"],[-1,5040,"\n"],[1,5766,"\n"],[-1,5949,"\n"],[1,5984,"\n"],[1,6244,"，"],[-1,6246,"任"],[-1,7002,"\n\n"],[1,7004,"列表"],[-1,7876,"成"],[1,7877,"\n"]],[2285,2285],[7878,7878]]],[1528100629543,[null,[[1,2285,"（"],[-1,2285,"中"],[1,3414,"\n"],[-1,3880,"\n"],[-1,3970,"\\"],[1,3973,"-"],[1,4021,"象"],[-1,4022,"象"],[1,4055,"\n"],[-1,4888,"\n"],[1,4905,"v"],[-1,4905,"和"],[1,5040,"\n"],[-1,5765,"\n"],[1,5949,"\n"],[-1,5983,"\n"],[-1,6244,"，"],[1,6247,"任"],[1,7002,"\n\n"],[-1,7002,"列表"],[1,7876,"成"],[-1,7876,"\n"]],[7878,7878],[2285,2285]]],[1528100577251,["Re@Re.local",[[1,8074,"顶点，并且"]],[8074,8074],[8079,8079]]],[1528100585473,["Re@Re.local",[[-1,8075,"点，并且"]],[8079,8079],[8075,8075]]],[1528100587918,["Re@Re.local",[[1,8073,"与s"]],[8073,8073],[8075,8075]]],[1528100589158,["Re@Re.local",[[1,8073,"有"]],[8073,8073],[8074,8074]]],[1528100589869,["Re@Re.local",[[-1,8073,"有"]],[8074,8074],[8073,8073]]],[1528100593245,["Re@Re.local",[[1,8075,"有路径相连"]],[8075,8075],[8080,8080]]],[1528100594275,["Re@Re.local",[[-1,8081,"顶"]],[8082,8082],[8081,8081]]],[1528100595421,["Re@Re.local",[[1,8081,"顶点。"]],[8081,8081],[8084,8084]]],[1528100689545,[null,[[-1,2285,"（"],[1,2286,"中"],[-1,3414,"\n"],[1,3881,"\n"],[1,3970,"\\"],[-1,3972,"-"],[-1,4021,"象"],[1,4023,"象"],[-1,4055,"\n"],[1,4889,"\n"],[-1,4905,"v"],[1,4906,"和"],[-1,5040,"\n"],[1,5766,"\n"],[-1,5949,"\n"],[1,5984,"\n"],[1,6244,"，"],[-1,6246,"任"],[-1,7002,"\n\n"],[1,7004,"列表"],[-1,7876,"成"],[1,7877,"\n"]],[2285,2285],[7878,7878]]],[1528100689545,[null,[[1,2285,"（"],[-1,2285,"中"],[1,3414,"\n"],[-1,3880,"\n"],[-1,3970,"\\"],[1,3973,"-"],[1,4021,"象"],[-1,4022,"象"],[1,4055,"\n"],[-1,4888,"\n"],[1,4905,"v"],[-1,4905,"和"],[1,5040,"\n"],[-1,5765,"\n"],[1,5949,"\n"],[-1,5983,"\n"],[-1,6244,"，"],[1,6247,"任"],[1,7002,"\n\n"],[-1,7002,"列表"],[1,7876,"成"],[-1,7876,"\n"]],[7878,7878],[2285,2285]]],[1528100638900,["Re@Re.local",[[1,8084,"宽度优先搜索的优势在于，它"]],[8084,8084],[8097,8097]]],[1528100639068,["Re@Re.local",[[-1,8096,"它"]],[8097,8097],[8096,8096]]],[1528100642451,["Re@Re.local",[[1,8096,"在找"]],[8096,8096],[8098,8098]]],[1528100642892,["Re@Re.local",[[-1,8096,"在找"]],[8098,8098],[8096,8096]]],[1528100660977,["Re@Re.local",[[1,8096,"在找到与s距离为k+1的所有顶点之前，它"]],[8096,8096],[8116,8116]]],[1528100661082,["Re@Re.local",[[-1,8115,"它"]],[8116,8116],[8115,8115]]],[1528100663108,["Re@Re.local",[[1,8115,"先找到"]],[8115,8115],[8118,8118]]],[1528100664082,["Re@Re.local",[[-1,8116,"找到"]],[8118,8118],[8116,8116]]],[1528100665721,["Re@Re.local",[[1,8116,"给出"]],[8116,8116],[8118,8118]]],[1528100667432,["Re@Re.local",[[-1,8115,"先给出"]],[8118,8118],[8115,8115]]],[1528100674656,["Re@Re.local",[[1,8115,"它会先找出所有距离为kde "]],[8115,8115],[8129,8129]]],[1528100675338,["Re@Re.local",[[-1,8126,"de "]],[8129,8129],[8126,8126]]],[1528100677114,["Re@Re.local",[[1,8126,"的顶带你。"]],[8126,8126],[8131,8131]]],[1528100679125,["Re@Re.local",[[-1,8127,"顶带你。"]],[8131,8131],[8127,8127]]],[1528100688745,["Re@Re.local",[[1,8127,"顶点。可以"]],[8127,8127],[8132,8132]]],[1528100749553,[null,[[-1,2285,"（"],[1,2286,"中"],[-1,3414,"\n"],[1,3881,"\n"],[1,3970,"\\"],[-1,3972,"-"],[-1,4021,"象"],[1,4023,"象"],[-1,4055,"\n"],[1,4889,"\n"],[-1,4905,"v"],[1,4906,"和"],[-1,5040,"\n"],[1,5766,"\n"],[-1,5949,"\n"],[1,5984,"\n"],[1,6244,"，"],[-1,6246,"任"],[-1,7002,"\n\n"],[1,7004,"列表"],[-1,7876,"成"],[1,7877,"\n"]],[2285,2285],[7878,7878]]],[1528100749553,[null,[[1,2285,"（"],[-1,2285,"中"],[1,3414,"\n"],[-1,3880,"\n"],[-1,3970,"\\"],[1,3973,"-"],[1,4021,"象"],[-1,4022,"象"],[1,4055,"\n"],[-1,4888,"\n"],[1,4905,"v"],[-1,4905,"和"],[1,5040,"\n"],[-1,5765,"\n"],[1,5949,"\n"],[-1,5983,"\n"],[-1,6244,"，"],[1,6247,"任"],[1,7002,"\n\n"],[-1,7002,"列表"],[1,7876,"成"],[-1,7876,"\n"]],[7878,7878],[2285,2285]]],[1528100691381,["Re@Re.local",[[-1,8130,"可以"]],[8132,8132],[8130,8130]]],[1528100704486,["Re@Re.local",[[1,8130,"BFS的运行过程与"]],[8130,8130],[8139,8139]]],[1528100704601,["Re@Re.local",[[-1,8138,"与"]],[8139,8139],[8138,8138]]],[1528100734017,["Re@Re.local",[[1,8138,"可以想象为生成树的过程，每次都生成树的一层。宽度优先搜索算法"]],[8138,8138],[8168,8168]]],[1528100736119,["Re@Re.local",[[-1,8160,"宽度优先搜索算法"]],[8168,8168],[8160,8160]]],[1528100737107,["Re@Re.local",[[1,8160,"VFS"]],[8160,8160],[8163,8163]]],[1528100737806,["Re@Re.local",[[-1,8160,"VFS"]],[8163,8163],[8160,8160]]],[1528100739691,["Re@Re.local",[[1,8160,"BFS在"]],[8160,8160],[8164,8164]]],[1528100739825,["Re@Re.local",[[-1,8163,"在"]],[8164,8164],[8163,8163]]],[1528100740758,["Re@Re.local",[[1,8163,"将"]],[8163,8163],[8164,8164]]],[1528100809558,[null,[[-1,2285,"（"],[1,2286,"中"],[-1,3414,"\n"],[1,3881,"\n"],[1,3970,"\\"],[-1,3972,"-"],[-1,4021,"象"],[1,4023,"象"],[-1,4055,"\n"],[1,4889,"\n"],[-1,4905,"v"],[1,4906,"和"],[-1,5040,"\n"],[1,5766,"\n"],[-1,5949,"\n"],[1,5984,"\n"],[1,6244,"，"],[-1,6246,"任"],[-1,7002,"\n\n"],[1,7004,"列表"],[-1,7876,"成"],[1,7877,"\n"]],[2285,2285],[7878,7878]]],[1528100809559,[null,[[1,2285,"（"],[-1,2285,"中"],[1,3414,"\n"],[-1,3880,"\n"],[-1,3970,"\\"],[1,3973,"-"],[1,4021,"象"],[-1,4022,"象"],[1,4055,"\n"],[-1,4888,"\n"],[1,4905,"v"],[-1,4905,"和"],[1,5040,"\n"],[-1,5765,"\n"],[1,5949,"\n"],[-1,5983,"\n"],[-1,6244,"，"],[1,6247,"任"],[1,7002,"\n\n"],[-1,7002,"列表"],[1,7876,"成"],[-1,7876,"\n"]],[7878,7878],[2285,2285]]],[1528100751048,["Re@Re.local",[[1,8164,"在"]],[8164,8164],[8165,8165]]],[1528100751384,["Re@Re.local",[[-1,8163,"将在"]],[8165,8165],[8163,8163]]],[1528100773829,["Re@Re.local",[[1,8163,"在对子孙顶点进行搜索前，先对初始顶点的子顶点进行"]],[8163,8163],[8187,8187]]],[1528100775564,["Re@Re.local",[[-1,8185,"进行"]],[8187,8187],[8185,8185]]],[1528100792588,["Re@Re.local",[[1,8185,"加入进来。"]],[8185,8185],[8190,8190]]],[1528100793008,["Re@Re.local",[[1,8193,"\n"]],[8190,8190],[8191,8191]]],[1528100793320,["Re@Re.local",[[1,8194,"\n"]],[8191,8191],[8192,8192]]],[1528100798274,["Re@Re.local",[[-1,8176,"对"]],[8177,8177],[8176,8176]]],[1528100799427,["Re@Re.local",[[1,8176,"将"]],[8176,8176],[8177,8177]]],[1528100800415,["Re@Re.local",[[1,8195,"\n"]],[8190,8190],[8191,8191]]],[1528100800643,["Re@Re.local",[[1,8196,"\n"]],[8191,8191],[8192,8192]]],[1528100809043,["Re@Re.local",[[1,8192,"为了将"]],[8192,8192],[8195,8195]]],[1528100869630,[null,[[-1,2285,"（"],[1,2286,"中"],[-1,3414,"\n"],[1,3881,"\n"],[1,3970,"\\"],[-1,3972,"-"],[-1,4021,"象"],[1,4023,"象"],[-1,4055,"\n"],[1,4889,"\n"],[-1,4905,"v"],[1,4906,"和"],[-1,5040,"\n"],[1,5766,"\n"],[-1,5949,"\n"],[1,5984,"\n"],[1,6244,"，"],[-1,6246,"任"],[-1,7002,"\n\n"],[1,7004,"列表"],[-1,7876,"成"],[1,7877,"\n"]],[2285,2285],[7878,7878]]],[1528100869630,[null,[[1,2285,"（"],[-1,2285,"中"],[1,3414,"\n"],[-1,3880,"\n"],[-1,3970,"\\"],[1,3973,"-"],[1,4021,"象"],[-1,4022,"象"],[1,4055,"\n"],[-1,4888,"\n"],[1,4905,"v"],[-1,4905,"和"],[1,5040,"\n"],[-1,5765,"\n"],[1,5949,"\n"],[-1,5983,"\n"],[-1,6244,"，"],[1,6247,"任"],[1,7002,"\n\n"],[-1,7002,"列表"],[1,7876,"成"],[-1,7876,"\n"]],[7878,7878],[2285,2285]]],[1528100809801,["Re@Re.local",[[-1,8194,"将"]],[8195,8195],[8194,8194]]],[1528100811353,["Re@Re.local",[[1,8194,"跟踪其"]],[8194,8194],[8197,8197]]],[1528100811494,["Re@Re.local",[[-1,8196,"其"]],[8197,8197],[8196,8196]]],[1528100821042,["Re@Re.local",[[1,8196,"运行过程，BFS将顶点好"]],[8196,8196],[8208,8208]]],[1528100821121,["Re@Re.local",[[-1,8207,"好"]],[8208,8208],[8207,8207]]],[1528100853427,["Re@Re.local",[[1,8207,"染成白色，灰色或黑色。所有的顶点都被初始化"]],[8207,8207],[8228,8228]]],[1528100853914,["Re@Re.local",[[-1,8227,"化"]],[8228,8228],[8227,8227]]],[1528100855329,["Re@Re.local",[[1,8227,"为白色"]],[8227,8227],[8230,8230]]],[1528100859263,["Re@Re.local",[[1,8218,"在狗"]],[8218,8218],[8220,8220]]],[1528100865360,["Re@Re.local",[[-1,8218,"在狗"]],[8220,8220],[8218,8218]]],[1528100869385,["Re@Re.local",[[-1,8218,"所有的顶点都被初始为白色"]],[8230,8230],[8218,8218]]],[1528100929592,[null,[[-1,2285,"（"],[1,2286,"中"],[-1,3414,"\n"],[1,3881,"\n"],[1,3970,"\\"],[-1,3972,"-"],[-1,4021,"象"],[1,4023,"象"],[-1,4055,"\n"],[1,4889,"\n"],[-1,4905,"v"],[1,4906,"和"],[-1,5040,"\n"],[1,5766,"\n"],[-1,5949,"\n"],[1,5984,"\n"],[1,6244,"，"],[-1,6246,"任"],[-1,7002,"\n\n"],[1,7004,"列表"],[-1,7876,"成"],[1,7877,"\n"]],[2285,2285],[7878,7878]]],[1528100929593,[null,[[1,2285,"（"],[-1,2285,"中"],[1,3414,"\n"],[-1,3880,"\n"],[-1,3970,"\\"],[1,3973,"-"],[1,4021,"象"],[-1,4022,"象"],[1,4055,"\n"],[-1,4888,"\n"],[1,4905,"v"],[-1,4905,"和"],[1,5040,"\n"],[-1,5765,"\n"],[1,5949,"\n"],[-1,5983,"\n"],[-1,6244,"，"],[1,6247,"任"],[1,7002,"\n\n"],[-1,7002,"列表"],[1,7876,"成"],[-1,7876,"\n"]],[7878,7878],[2285,2285]]],[1528100869924,["Re@Re.local",[[1,8218,"在"]],[8218,8218],[8219,8219]]],[1528100870935,["Re@Re.local",[[-1,8218,"在"]],[8219,8219],[8218,8218]]],[1528100894758,["Re@Re.local",[[1,8218,"所有的顶点都被初始为白色。白色顶点是未被发现的顶点。当"]],[8218,8218],[8245,8245]]],[1528100897962,["Re@Re.local",[[-1,8243,"。当"]],[8245,8245],[8243,8243]]],[1528100898672,["Re@Re.local",[[1,8243,"，"]],[8243,8243],[8244,8244]]],[1528100900180,["Re@Re.local",[[-1,8238,"发现的顶点，"]],[8244,8244],[8238,8238]]],[1528100903737,["Re@Re.local",[[1,8238,"遍历到的顶带你，"]],[8238,8238],[8246,8246]]],[1528100904786,["Re@Re.local",[[-1,8242,"顶带你，"]],[8246,8246],[8242,8242]]],[1528100907127,["Re@Re.local",[[1,8242,"顶点，当"]],[8242,8242],[8246,8246]]],[1528100909338,["Re@Re.local",[[-1,8245,"当"]],[8246,8246],[8245,8245]]],[1528100911468,["Re@Re.local",[[1,8245,"当讴歌"]],[8245,8245],[8248,8248]]],[1528100911772,["Re@Re.local",[[-1,8246,"讴歌"]],[8248,8248],[8246,8246]]],[1528100913143,["Re@Re.local",[[1,8246,"茉欧哥顶"]],[8246,8246],[8250,8250]]],[1528100913737,["Re@Re.local",[[-1,8246,"茉欧哥顶"]],[8250,8250],[8246,8246]]],[1528100918110,["Re@Re.local",[[1,8246,"某个顶点被第一次"]],[8246,8246],[8254,8254]]],[1528100918599,["Re@Re.local",[[-1,8251,"第一次"]],[8254,8254],[8251,8251]]],[1528100929453,["Re@Re.local",[[1,8251,"初次遍历到时，将其染称灰色，"]],[8251,8251],[8265,8265]]],[1528100989648,[null,[[-1,2285,"（"],[1,2286,"中"],[-1,3414,"\n"],[1,3881,"\n"],[1,3970,"\\"],[-1,3972,"-"],[-1,4021,"象"],[1,4023,"象"],[-1,4055,"\n"],[1,4889,"\n"],[-1,4905,"v"],[1,4906,"和"],[-1,5040,"\n"],[1,5766,"\n"],[-1,5949,"\n"],[1,5984,"\n"],[1,6244,"，"],[-1,6246,"任"],[-1,7002,"\n\n"],[1,7004,"列表"],[-1,7876,"成"],[1,7877,"\n"]],[2285,2285],[7878,7878]]],[1528100989649,[null,[[1,2285,"（"],[-1,2285,"中"],[1,3414,"\n"],[-1,3880,"\n"],[-1,3970,"\\"],[1,3973,"-"],[1,4021,"象"],[-1,4022,"象"],[1,4055,"\n"],[-1,4888,"\n"],[1,4905,"v"],[-1,4905,"和"],[1,5040,"\n"],[-1,5765,"\n"],[1,5949,"\n"],[-1,5983,"\n"],[-1,6244,"，"],[1,6247,"任"],[1,7002,"\n\n"],[-1,7002,"列表"],[1,7876,"成"],[-1,7876,"\n"]],[7878,7878],[2285,2285]]],[1528100944977,["Re@Re.local",[[-1,8238,"遍历"]],[8240,8240],[8238,8238]]],[1528100946140,["Re@Re.local",[[1,8238,"探索"]],[8238,8238],[8240,8240]]],[1528100946995,["Re@Re.local",[[1,8241,"、"]],[8241,8241],[8242,8242]]],[1528100948692,["Re@Re.local",[[-1,8240,"到、"]],[8242,8242],[8240,8240]]],[1528100951662,["Re@Re.local",[[-1,8250,"初次遍历"]],[8254,8254],[8250,8250]]],[1528100952643,["Re@Re.local",[[1,8250,"塔诺"]],[8250,8250],[8252,8252]]],[1528100954405,["Re@Re.local",[[-1,8249,"被塔诺到"]],[8253,8253],[8249,8249]]],[1528100957627,["Re@Re.local",[[1,8249,"被初次探索"]],[8249,8249],[8254,8254]]],[1528100960060,["Re@Re.local",[[-1,8259,"称灰色，"]],[8263,8263],[8259,8259]]],[1528100963600,["Re@Re.local",[[1,8259,"成灰色，"]],[8259,8259],[8263,8263]]],[1528100964015,["Re@Re.local",[[-1,8262,"，"]],[8263,8263],[8262,8262]]],[1528100966005,["Re@Re.local",[[-1,8243,"，"]],[8244,8244],[8243,8243]]],[1528100966350,["Re@Re.local",[[1,8243,"。"]],[8243,8243],[8244,8244]]],[1528100967913,["Re@Re.local",[[1,8262,"。"]],[8262,8262],[8263,8263]]],[1528100975842,["Re@Re.local",[[-1,8262,"。"]],[8263,8263],[8262,8262]]],[1528100982490,["Re@Re.local",[[1,8262,"，当BFS完成对欧冠"]],[8262,8262],[8272,8272]]],[1528100983083,["Re@Re.local",[[-1,8270,"欧冠"]],[8272,8272],[8270,8270]]],[1528100988844,["Re@Re.local",[[1,8270,"某个顶点的探索时，将其"]],[8270,8270],[8281,8281]]],[1528101049652,[null,[[-1,2285,"（"],[1,2286,"中"],[-1,3414,"\n"],[1,3881,"\n"],[1,3970,"\\"],[-1,3972,"-"],[-1,4021,"象"],[1,4023,"象"],[-1,4055,"\n"],[1,4889,"\n"],[-1,4905,"v"],[1,4906,"和"],[-1,5040,"\n"],[1,5766,"\n"],[-1,5949,"\n"],[1,5984,"\n"],[1,6244,"，"],[-1,6246,"任"],[-1,7002,"\n\n"],[1,7004,"列表"],[-1,7876,"成"],[1,7877,"\n"]],[2285,2285],[7878,7878]]],[1528101049653,[null,[[1,2285,"（"],[-1,2285,"中"],[1,3414,"\n"],[-1,3880,"\n"],[-1,3970,"\\"],[1,3973,"-"],[1,4021,"象"],[-1,4022,"象"],[1,4055,"\n"],[-1,4888,"\n"],[1,4905,"v"],[-1,4905,"和"],[1,5040,"\n"],[-1,5765,"\n"],[1,5949,"\n"],[-1,5983,"\n"],[-1,6244,"，"],[1,6247,"任"],[1,7002,"\n\n"],[-1,7002,"列表"],[1,7876,"成"],[-1,7876,"\n"]],[7878,7878],[2285,2285]]],[1528101007489,["Re@Re.local",[[1,8281,"染成黑色。这意味着，对于黑色的顶点，它是没有白色的"]],[8281,8281],[8306,8306]]],[1528101007565,["Re@Re.local",[[-1,8305,"的"]],[8306,8306],[8305,8305]]],[1528101012447,["Re@Re.local",[[1,8305,"节点与之临近"]],[8305,8305],[8311,8311]]],[1528101012857,["Re@Re.local",[[-1,8309,"临近"]],[8311,8311],[8309,8309]]],[1528101026967,["Re@Re.local",[[1,8309,"邻接的。灰色节点，有可能会有些"]],[8309,8309],[8324,8324]]],[1528101027646,["Re@Re.local",[[-1,8322,"有些"]],[8324,8324],[8322,8322]]],[1528101033536,["Re@Re.local",[[1,8322,"存在白色节点与之邻接。"]],[8322,8322],[8333,8333]]],[1528101034262,["Re@Re.local",[[-1,8332,"。"]],[8333,8333],[8332,8332]]],[1528101040220,["Re@Re.local",[[1,8332,"，需要"]],[8332,8332],[8335,8335]]],[1528101042847,["Re@Re.local",[[-1,8333,"需要"]],[8335,8335],[8333,8333]]],[1528101044500,["Re@Re.local",[[1,8333,"可能"]],[8333,8333],[8335,8335]]],[1528101044896,["Re@Re.local",[[-1,8333,"可能"]],[8335,8335],[8333,8333]]],[1528101046635,["Re@Re.local",[[1,8333,"虚啊摇"]],[8333,8333],[8336,8336]]],[1528101047209,["Re@Re.local",[[-1,8333,"虚啊摇"]],[8336,8336],[8333,8333]]],[1528101048984,["Re@Re.local",[[1,8333,"需要"]],[8333,8333],[8335,8335]]],[1528101109733,[null,[[-1,2285,"（"],[1,2286,"中"],[-1,3414,"\n"],[1,3881,"\n"],[1,3970,"\\"],[-1,3972,"-"],[-1,4021,"象"],[1,4023,"象"],[-1,4055,"\n"],[1,4889,"\n"],[-1,4905,"v"],[1,4906,"和"],[-1,5040,"\n"],[1,5766,"\n"],[-1,5949,"\n"],[1,5984,"\n"],[1,6244,"，"],[-1,6246,"任"],[-1,7002,"\n\n"],[1,7004,"列表"],[-1,7876,"成"],[1,7877,"\n"]],[2285,2285],[7878,7878]]],[1528101109734,[null,[[1,2285,"（"],[-1,2285,"中"],[1,3414,"\n"],[-1,3880,"\n"],[-1,3970,"\\"],[1,3973,"-"],[1,4021,"象"],[-1,4022,"象"],[1,4055,"\n"],[-1,4888,"\n"],[1,4905,"v"],[-1,4905,"和"],[1,5040,"\n"],[-1,5765,"\n"],[1,5949,"\n"],[-1,5983,"\n"],[-1,6244,"，"],[1,6247,"任"],[1,7002,"\n\n"],[-1,7002,"列表"],[1,7876,"成"],[-1,7876,"\n"]],[7878,7878],[2285,2285]]],[1528101052533,["Re@Re.local",[[1,8335,"进一步晋西"]],[8335,8335],[8340,8340]]],[1528101052836,["Re@Re.local",[[-1,8338,"晋西"]],[8340,8340],[8338,8338]]],[1528101053759,["Re@Re.local",[[1,8338,"探索。"]],[8338,8338],[8341,8341]]],[1528101054373,["Re@Re.local",[[1,8346,"\n"]],[8341,8341],[8342,8342]]],[1528101054628,["Re@Re.local",[[1,8347,"\n"]],[8342,8342],[8343,8343]]],[1528101069479,["Re@Re.local",[[1,8343,"此外，BFS算法使用了Vertex类的改进版本"]],[8343,8343],[8366,8366]]],[1528101069555,["Re@Re.local",[[-1,8365,"本"]],[8366,8366],[8365,8365]]],[1528101080230,["Re@Re.local",[[1,8365,"。这种新的顶点类将"]],[8365,8365],[8374,8374]]],[1528101080363,["Re@Re.local",[[-1,8373,"将"]],[8374,8374],[8373,8373]]],[1528101086443,["Re@Re.local",[[1,8373,"新增了3中实例"]],[8373,8373],[8380,8380]]],[1528101087346,["Re@Re.local",[[-1,8377,"中实例"]],[8380,8380],[8377,8377]]],[1528101097417,["Re@Re.local",[[1,8377,"种实例变量，即distance,predecessor,"]],[8377,8377],[8405,8405]]],[1528101098880,["Re@Re.local",[[-1,8404,","]],[8405,8405],[8404,8404]]],[1528101105459,["Re@Re.local",[[1,8404,"以及颜色。诶个"]],[8404,8404],[8411,8411]]],[1528101106076,["Re@Re.local",[[-1,8409,"诶个"]],[8411,8411],[8409,8409]]],[1528101109313,["Re@Re.local",[[1,8409,"每个实例变量"]],[8409,8409],[8415,8415]]],[1528101169605,[null,[[-1,2285,"（"],[1,2286,"中"],[-1,3414,"\n"],[1,3881,"\n"],[1,3970,"\\"],[-1,3972,"-"],[-1,4021,"象"],[1,4023,"象"],[-1,4055,"\n"],[1,4889,"\n"],[-1,4905,"v"],[1,4906,"和"],[-1,5040,"\n"],[1,5766,"\n"],[-1,5949,"\n"],[1,5984,"\n"],[1,6244,"，"],[-1,6246,"任"],[-1,7002,"\n\n"],[1,7004,"列表"],[-1,7876,"成"],[1,7877,"\n"]],[2285,2285],[7878,7878]]],[1528101169605,[null,[[1,2285,"（"],[-1,2285,"中"],[1,3414,"\n"],[-1,3880,"\n"],[-1,3970,"\\"],[1,3973,"-"],[1,4021,"象"],[-1,4022,"象"],[1,4055,"\n"],[-1,4888,"\n"],[1,4905,"v"],[-1,4905,"和"],[1,5040,"\n"],[-1,5765,"\n"],[1,5949,"\n"],[-1,5983,"\n"],[-1,6244,"，"],[1,6247,"任"],[1,7002,"\n\n"],[-1,7002,"列表"],[1,7876,"成"],[-1,7876,"\n"]],[7878,7878],[2285,2285]]],[1528101112983,["Re@Re.local",[[1,8415,"都有正确的gett4er"]],[8415,8415],[8427,8427]]],[1528101113932,["Re@Re.local",[[-1,8424,"4er"]],[8427,8427],[8424,8424]]],[1528101115482,["Re@Re.local",[[1,8424,"erhe"]],[8424,8424],[8428,8428]]],[1528101115888,["Re@Re.local",[[-1,8426,"he"]],[8428,8428],[8426,8426]]],[1528101119123,["Re@Re.local",[[1,8426,"和setter方法。"]],[8426,8426],[8436,8436]]],[1528101349638,[null,[[-1,2285,"（"],[1,2286,"中"],[-1,3414,"\n"],[1,3881,"\n"],[1,3970,"\\"],[-1,3972,"-"],[-1,4021,"象"],[1,4023,"象"],[-1,4055,"\n"],[1,4889,"\n"],[-1,4905,"v"],[1,4906,"和"],[-1,5040,"\n"],[1,5766,"\n"],[-1,5949,"\n"],[1,5984,"\n"],[1,6244,"，"],[-1,6246,"任"],[-1,7002,"\n\n"],[1,7004,"列表"],[-1,7876,"成"],[1,7877,"\n"]],[2285,2285],[7878,7878]]],[1528101349639,[null,[[1,2285,"（"],[-1,2285,"中"],[1,3414,"\n"],[-1,3880,"\n"],[-1,3970,"\\"],[1,3973,"-"],[1,4021,"象"],[-1,4022,"象"],[1,4055,"\n"],[-1,4888,"\n"],[1,4905,"v"],[-1,4905,"和"],[1,5040,"\n"],[-1,5765,"\n"],[1,5949,"\n"],[-1,5983,"\n"],[-1,6244,"，"],[1,6247,"任"],[1,7002,"\n\n"],[-1,7002,"列表"],[1,7876,"成"],[-1,7876,"\n"]],[7878,7878],[2285,2285]]],[1528101320211,["Re@Re.local",[[-1,8383,"即"]],[8384,8384],[8383,8383]]],[1528101322149,["Re@Re.local",[[1,8383,"即"]],[8383,8383],[8384,8384]]],[1528101409766,[null,[[-1,2285,"（"],[1,2286,"中"],[-1,3414,"\n"],[1,3881,"\n"],[1,3970,"\\"],[-1,3972,"-"],[-1,4021,"象"],[1,4023,"象"],[-1,4055,"\n"],[1,4889,"\n"],[-1,4905,"v"],[1,4906,"和"],[-1,5040,"\n"],[1,5766,"\n"],[-1,5949,"\n"],[1,5984,"\n"],[1,6244,"，"],[-1,6246,"任"],[-1,7002,"\n\n"],[1,7004,"列表"],[-1,7876,"成"],[1,7877,"\n"]],[2285,2285],[7878,7878]]],[1528101409766,[null,[[1,2285,"（"],[-1,2285,"中"],[1,3414,"\n"],[-1,3880,"\n"],[-1,3970,"\\"],[1,3973,"-"],[1,4021,"象"],[-1,4022,"象"],[1,4055,"\n"],[-1,4888,"\n"],[1,4905,"v"],[-1,4905,"和"],[1,5040,"\n"],[-1,5765,"\n"],[1,5949,"\n"],[-1,5983,"\n"],[-1,6244,"，"],[1,6247,"任"],[1,7002,"\n\n"],[-1,7002,"列表"],[1,7876,"成"],[-1,7876,"\n"]],[7878,7878],[2285,2285]]],[1528101367947,["Re@Re.local",[[1,8436,"这里就不作展示了，因为只是加了3个实例变量而已。"]],[8436,8436],[8460,8460]]],[1528101369777,["Re@Re.local",[[1,8465,"\n"]],[8460,8460],[8461,8461]]],[1528101370000,["Re@Re.local",[[1,8466,"\n"]],[8461,8461],[8462,8462]]],[1528101380962,["Re@Re.local",[[1,8462,"BFS从起点"]],[8462,8462],[8468,8468]]],[1528101382263,["Re@Re.local",[[-1,8466,"起点"]],[8468,8468],[8466,8466]]],[1528101386186,["Re@Re.local",[[1,8466,"起始解"]],[8466,8466],[8469,8469]]],[1528101386252,["Re@Re.local",[[-1,8468,"解"]],[8469,8469],[8468,8468]]],[1528101391598,["Re@Re.local",[[1,8468,"顶点s开发，将"]],[8468,8468],[8475,8475]]],[1528101392248,["Re@Re.local",[[-1,8471,"开发，将"]],[8475,8475],[8471,8471]]],[1528101409051,["Re@Re.local",[[1,8471,"开始，将start染成灰色来表示当前正在"]],[8471,8471],[8491,8491]]],[1528101469637,[null,[[-1,2285,"（"],[1,2286,"中"],[-1,3414,"\n"],[1,3881,"\n"],[1,3970,"\\"],[-1,3972,"-"],[-1,4021,"象"],[1,4023,"象"],[-1,4055,"\n"],[1,4889,"\n"],[-1,4905,"v"],[1,4906,"和"],[-1,5040,"\n"],[1,5766,"\n"],[-1,5949,"\n"],[1,5984,"\n"],[1,6244,"，"],[-1,6246,"任"],[-1,7002,"\n\n"],[1,7004,"列表"],[-1,7876,"成"],[1,7877,"\n"]],[2285,2285],[7878,7878]]],[1528101469637,[null,[[1,2285,"（"],[-1,2285,"中"],[1,3414,"\n"],[-1,3880,"\n"],[-1,3970,"\\"],[1,3973,"-"],[1,4021,"象"],[-1,4022,"象"],[1,4055,"\n"],[-1,4888,"\n"],[1,4905,"v"],[-1,4905,"和"],[1,5040,"\n"],[-1,5765,"\n"],[1,5949,"\n"],[-1,5983,"\n"],[-1,6244,"，"],[1,6247,"任"],[1,7002,"\n\n"],[-1,7002,"列表"],[1,7876,"成"],[-1,7876,"\n"]],[7878,7878],[2285,2285]]],[1528101432959,["Re@Re.local",[[1,8493,"进行搜索。另外两个值，distn"]],[8493,8493],[8509,8509]]],[1528101433233,["Re@Re.local",[[-1,8508,"n"]],[8509,8509],[8508,8508]]],[1528101445745,["Re@Re.local",[[1,8508,"ance和predecessor分别被初始化为0和NO"]],[8508,8508],[8535,8535]]],[1528101446131,["Re@Re.local",[[-1,8534,"O"]],[8535,8535],[8534,8534]]],[1528101446776,["Re@Re.local",[[1,8534,"one"]],[8534,8534],[8537,8537]]],[1528101456708,["Re@Re.local",[[1,8505,"dui"]],[8504,8504],[8507,8507]]],[1528101457315,["Re@Re.local",[[-1,8504,"dui"]],[8507,8507],[8504,8504]]],[1528101463583,["Re@Re.local",[[1,8498,"对于起始顶点，"]],[8498,8498],[8505,8505]]],[1528101469401,["Re@Re.local",[[1,8544,"。最后，sta"]],[8544,8544],[8551,8551]]],[1528101529710,[null,[[-1,2285,"（"],[1,2286,"中"],[-1,3414,"\n"],[1,3881,"\n"],[1,3970,"\\"],[-1,3972,"-"],[-1,4021,"象"],[1,4023,"象"],[-1,4055,"\n"],[1,4889,"\n"],[-1,4905,"v"],[1,4906,"和"],[-1,5040,"\n"],[-1,5766,""],[1,5766,"\n"],[-1,5949,"\n"],[-1,5984,""],[1,5984,"\n"],[1,6244,"，"],[-1,6246,"任"],[-1,7002,"\n\n"],[1,7004,"列表"],[-1,7876,"成"],[1,7877,"\n"],[-1,8491,"\n\n"],[1,8493,"对其"],[-1,8511,"i"],[1,8512,"d"],[1,8551,"\n\n"]],[2285,2285],[8553,8553]]],[1528101529710,[null,[[1,2285,"（"],[-1,2285,"中"],[1,3414,"\n"],[-1,3880,"\n"],[-1,3970,"\\"],[1,3973,"-"],[1,4021,"象"],[-1,4022,"象"],[1,4055,"\n"],[-1,4888,"\n"],[1,4905,"v"],[-1,4905,"和"],[1,5040,"\n"],[1,5765,""],[-1,5765,"\n"],[1,5949,"\n"],[1,5983,""],[-1,5983,"\n"],[-1,6244,"，"],[1,6247,"任"],[1,7002,"\n\n"],[-1,7002,"列表"],[1,7876,"成"],[-1,7876,"\n"],[1,8491,"\n\n"],[-1,8491,"对其"],[1,8511,"i"],[-1,8511,"d"],[-1,8551,"\n\n"]],[8553,8553],[2285,2285]]],[1528101479262,["Re@Re.local",[[1,8552,"t被放入1个Queue中。"]],[8552,8552],[8565,8565]]],[1528101479934,["Re@Re.local",[[-1,8564,"。"]],[8565,8565],[8564,8564]]],[1528101486625,["Re@Re.local",[[1,8564,"。下一步便是系统性地"]],[8564,8564],[8574,8574]]],[1528101487581,["Re@Re.local",[[-1,8572,"性地"]],[8574,8574],[8572,8572]]],[1528101492408,["Re@Re.local",[[1,8572,"地对激励"]],[8572,8572],[8576,8576]]],[1528101492683,["Re@Re.local",[[-1,8574,"激励"]],[8576,8576],[8574,8574]]],[1528101495435,["Re@Re.local",[[1,8574,"队列前的"]],[8574,8574],[8578,8578]]],[1528101499084,["Re@Re.local",[[-1,8577,"的"]],[8578,8578],[8577,8577]]],[1528101503664,["Re@Re.local",[[1,8577,"部的顶点进行搜索。"]],[8577,8577],[8586,8586]]],[1528101589645,[null,[[-1,2285,"（"],[1,2286,"中"],[-1,3414,"\n"],[1,3881,"\n"],[1,3970,"\\"],[-1,3972,"-"],[-1,4021,"象"],[1,4023,"象"],[-1,4055,"\n"],[1,4889,"\n"],[-1,4905,"v"],[1,4906,"和"],[-1,5040,"\n"],[-1,5766,""],[1,5766,"\n"],[-1,5949,"\n"],[-1,5984,""],[1,5984,"\n"],[1,6244,"，"],[-1,6246,"任"],[-1,7002,"\n\n"],[1,7004,"列表"],[-1,7876,"成"],[1,7877,"\n"],[-1,8491,"\n\n"],[1,8493,"对其"],[-1,8511,"i"],[1,8512,"d"],[-1,8551,"\n"],[1,8552,"r"],[1,8588,"\n\n\n"]],[2285,2285],[8591,8591]]],[1528101589646,[null,[[1,2285,"（"],[-1,2285,"中"],[1,3414,"\n"],[-1,3880,"\n"],[-1,3970,"\\"],[1,3973,"-"],[1,4021,"象"],[-1,4022,"象"],[1,4055,"\n"],[-1,4888,"\n"],[1,4905,"v"],[-1,4905,"和"],[1,5040,"\n"],[1,5765,""],[-1,5765,"\n"],[1,5949,"\n"],[1,5983,""],[-1,5983,"\n"],[-1,6244,"，"],[1,6247,"任"],[1,7002,"\n\n"],[-1,7002,"列表"],[1,7876,"成"],[-1,7876,"\n"],[1,8491,"\n\n"],[-1,8491,"对其"],[1,8511,"i"],[-1,8511,"d"],[1,8551,"\n"],[-1,8551,"r"],[-1,8588,"\n\n\n"]],[8591,8591],[2285,2285]]],[1528101545438,["Re@Re.local",[[1,8586,"所谓搜索，即是对队列前部的某1个节点的"]],[8586,8586],[8605,8605]]],[1528101546803,["Re@Re.local",[[-1,8604,"的"]],[8605,8605],[8604,8604]]],[1528101558684,["Re@Re.local",[[1,8604,"的邻接列表作迭代。在每次"]],[8604,8604],[8616,8616]]],[1528101565957,["Re@Re.local",[[-1,8613,"在每次"]],[8616,8616],[8613,8613]]],[1528101569461,["Re@Re.local",[[1,8613,"每当"]],[8613,8613],[8615,8615]]],[1528101569941,["Re@Re.local",[[-1,8613,"每当"]],[8615,8615],[8613,8613]]],[1528101570852,["Re@Re.local",[[1,8613,"每"]],[8613,8613],[8614,8614]]],[1528101570961,["Re@Re.local",[[-1,8613,"每"]],[8614,8614],[8613,8613]]],[1528101588808,["Re@Re.local",[[1,8613,"每当对邻接列表中的节点作检查时，"]],[8613,8613],[8629,8629]]],[1528101649727,[null,[[-1,2285,"（"],[1,2286,"中"],[-1,3414,"\n"],[1,3881,"\n"],[1,3970,"\\"],[-1,3972,"-"],[-1,4021,"象"],[1,4023,"象"],[-1,4055,"\n"],[1,4889,"\n"],[-1,4905,"v"],[1,4906,"和"],[-1,5040,"\n"],[-1,5766,""],[1,5766,"\n"],[-1,5949,"\n"],[-1,5984,""],[1,5984,"\n"],[1,6244,"，"],[-1,6246,"任"],[-1,7002,"\n\n"],[1,7004,"列表"],[-1,7876,"成"],[1,7877,"\n"],[-1,8491,"\n\n"],[1,8493,"对其"],[-1,8511,"i"],[1,8512,"d"],[-1,8551,"\n"],[1,8552,"r"],[1,8631,"\n\n\n"]],[2285,2285],[8634,8634]]],[1528101649728,[null,[[1,2285,"（"],[-1,2285,"中"],[1,3414,"\n"],[-1,3880,"\n"],[-1,3970,"\\"],[1,3973,"-"],[1,4021,"象"],[-1,4022,"象"],[1,4055,"\n"],[-1,4888,"\n"],[1,4905,"v"],[-1,4905,"和"],[1,5040,"\n"],[1,5765,""],[-1,5765,"\n"],[1,5949,"\n"],[1,5983,""],[-1,5983,"\n"],[-1,6244,"，"],[1,6247,"任"],[1,7002,"\n\n"],[-1,7002,"列表"],[1,7876,"成"],[-1,7876,"\n"],[1,8491,"\n\n"],[-1,8491,"对其"],[1,8511,"i"],[-1,8511,"d"],[1,8551,"\n"],[-1,8551,"r"],[-1,8631,"\n\n\n"]],[8634,8634],[2285,2285]]],[1528101593985,["Re@Re.local",[[-1,8625,"检查时，"]],[8629,8629],[8625,8625]]],[1528101598885,["Re@Re.local",[[1,8625,"检查是"]],[8625,8625],[8628,8628]]],[1528101599334,["Re@Re.local",[[-1,8625,"检查是"]],[8628,8628],[8625,8625]]],[1528101602210,["Re@Re.local",[[1,8625,"处理时，先"]],[8625,8625],[8630,8630]]],[1528101602615,["Re@Re.local",[[-1,8629,"先"]],[8630,8630],[8629,8629]]],[1528101607821,["Re@Re.local",[[1,8629,"对对其"]],[8629,8629],[8632,8632]]],[1528101608307,["Re@Re.local",[[-1,8629,"对对其"]],[8632,8632],[8629,8629]]],[1528101623401,["Re@Re.local",[[1,8629,"先对其颜色进行判断。如果是白色的，则该节点尚未搜索过，边"]],[8629,8629],[8657,8657]]],[1528101623658,["Re@Re.local",[[-1,8656,"边"]],[8657,8657],[8656,8656]]],[1528101628507,["Re@Re.local",[[1,8656,"于是便有4中情况"]],[8656,8656],[8664,8664]]],[1528101629067,["Re@Re.local",[[-1,8661,"中情况"]],[8664,8664],[8661,8661]]],[1528101631570,["Re@Re.local",[[1,8661,"种情况了："]],[8661,8661],[8666,8666]]],[1528101631851,["Re@Re.local",[[1,8671,"\n"]],[8666,8666],[8667,8667]]],[1528101632245,["Re@Re.local",[[1,8672,"\n"]],[8667,8667],[8668,8668]]],[1528101633128,["Re@Re.local",[[-1,8672,"\n"]],[8668,8668],[8667,8667]]],[1528101647310,["Re@Re.local",[[1,8667,"1. 新的、未探索的丁姐"]],[8667,8667],[8679,8679]]],[1528101647712,["Re@Re.local",[[-1,8677,"丁姐"]],[8679,8679],[8677,8677]]],[1528101709660,[null,[[-1,2285,"（"],[1,2286,"中"],[-1,3414,"\n"],[1,3881,"\n"],[1,3970,"\\"],[-1,3972,"-"],[-1,4021,"象"],[1,4023,"象"],[-1,4055,"\n"],[1,4889,"\n"],[-1,4905,"v"],[1,4906,"和"],[-1,5040,"\n"],[-1,5766,""],[1,5766,"\n"],[-1,5949,"\n"],[-1,5984,""],[1,5984,"\n"],[1,6244,"，"],[-1,6246,"任"],[-1,7002,"\n\n"],[1,7004,"列表"],[-1,7876,"成"],[1,7877,"\n"],[-1,8491,"\n\n"],[1,8493,"对其"],[-1,8511,"i"],[1,8512,"d"],[-1,8551,"\n"],[1,8552,"r"],[1,8677,"\n\n"]],[2285,2285],[8679,8679]]],[1528101709660,[null,[[1,2285,"（"],[-1,2285,"中"],[1,3414,"\n"],[-1,3880,"\n"],[-1,3970,"\\"],[1,3973,"-"],[1,4021,"象"],[-1,4022,"象"],[1,4055,"\n"],[-1,4888,"\n"],[1,4905,"v"],[-1,4905,"和"],[1,5040,"\n"],[1,5765,""],[-1,5765,"\n"],[1,5949,"\n"],[1,5983,""],[-1,5983,"\n"],[-1,6244,"，"],[1,6247,"任"],[1,7002,"\n\n"],[-1,7002,"列表"],[1,7876,"成"],[-1,7876,"\n"],[1,8491,"\n\n"],[-1,8491,"对其"],[1,8511,"i"],[-1,8511,"d"],[1,8551,"\n"],[-1,8551,"r"],[-1,8677,"\n\n"]],[8679,8679],[2285,2285]]],[1528101654038,["Re@Re.local",[[1,8677,"顶点nbr是灰色的"]],[8677,8677],[8686,8686]]],[1528101654303,["Re@Re.local",[[1,8691,"\n"]],[8686,8686],[8687,8687]]],[1528101655467,["Re@Re.local",[[1,8687,"2. "]],[8687,8687],[8690,8690]]],[1528101664180,["Re@Re.local",[[-1,8658,"便有4种情况了："]],[8666,8666],[8658,8658]]],[1528101665086,["Re@Re.local",[[1,8658,"bian"]],[8658,8658],[8662,8662]]],[1528101666406,["Re@Re.local",[[-1,8658,"bian"]],[8662,8662],[8658,8658]]],[1528101672439,["Re@Re.local",[[1,8658,"执行以下4步操作："]],[8658,8658],[8667,8667]]],[1528101676067,["Re@Re.local",[[-1,8671,"新的、未探索的顶点nbr是灰色的"]],[8674,8687],[8671,8671]]],[1528101685907,["Re@Re.local",[[1,8671,"将新的，未搜索的顶点nbr染成灰色。"]],[8671,8671],[8689,8689]]],[1528101705219,["Re@Re.local",[[1,8693,"将nbr的前任设置为当前节点"]],[8693,8693],[8707,8707]]],[1528101769658,[null,[[-1,2285,"（"],[1,2286,"中"],[-1,3414,"\n"],[1,3881,"\n"],[1,3970,"\\"],[-1,3972,"-"],[-1,4021,"象"],[1,4023,"象"],[-1,4055,"\n"],[1,4889,"\n"],[-1,4905,"v"],[1,4906,"和"],[-1,5040,"\n"],[1,5766,"\n"],[-1,5949,"\n"],[1,5984,"\n"],[1,6244,"，"],[-1,6246,"任"],[-1,7002,"\n\n"],[1,7004,"列表"],[-1,7876,"成"],[1,7877,"\n"],[-1,8491,"\n\n"],[1,8493,"对其"],[-1,8511,"i"],[1,8512,"d"],[-1,8551,"\n"],[1,8552,"r"],[-1,8690,""],[1,8707,"\n\n"]],[2285,2285],[8709,8709]]],[1528101769658,[null,[[1,2285,"（"],[-1,2285,"中"],[1,3414,"\n"],[-1,3880,"\n"],[-1,3970,"\\"],[1,3973,"-"],[1,4021,"象"],[-1,4022,"象"],[1,4055,"\n"],[-1,4888,"\n"],[1,4905,"v"],[-1,4905,"和"],[1,5040,"\n"],[-1,5765,"\n"],[1,5949,"\n"],[-1,5983,"\n"],[-1,6244,"，"],[1,6247,"任"],[1,7002,"\n\n"],[-1,7002,"列表"],[1,7876,"成"],[-1,7876,"\n"],[1,8491,"\n\n"],[-1,8491,"对其"],[1,8511,"i"],[-1,8511,"d"],[1,8551,"\n"],[-1,8551,"r"],[1,8690,""],[-1,8707,"\n\n"]],[8709,8709],[2285,2285]]],[1528101711094,["Re@Re.local",[[-1,8698,"前任"]],[8700,8700],[8698,8698]]],[1528101713683,["Re@Re.local",[[1,8698,"predecessor"]],[8698,8698],[8709,8709]]],[1528101728278,["Re@Re.local",[[1,8716,"currentVert。"]],[8716,8716],[8728,8728]]],[1528101729229,["Re@Re.local",[[1,8733,"\n"]],[8728,8728],[8729,8729]]],[1528101754103,["Re@Re.local",[[1,8729,"3. 到nbr的距离被射"]],[8729,8729],[8741,8741]]],[1528101754664,["Re@Re.local",[[-1,8739,"被射"]],[8741,8741],[8739,8739]]],[1528101766465,["Re@Re.local",[[1,8739,"设为currentVert + 1。"]],[8739,8739],[8757,8757]]],[1528101767174,["Re@Re.local",[[1,8762,"\n"]],[8757,8757],[8758,8758]]],[1528101829664,[null,[[-1,2285,"（"],[1,2286,"中"],[-1,3414,"\n"],[1,3881,"\n"],[1,3970,"\\"],[-1,3972,"-"],[-1,4021,"象"],[1,4023,"象"],[-1,4055,"\n"],[1,4889,"\n"],[-1,4905,"v"],[1,4906,"和"],[-1,5040,"\n"],[1,5766,"\n"],[-1,5949,"\n"],[1,5984,"\n"],[1,6244,"，"],[-1,6246,"任"],[-1,7002,"\n\n"],[1,7004,"列表"],[-1,7876,"成"],[1,7877,"\n"],[-1,8491,"\n\n"],[1,8493,"对其"],[-1,8511,"i"],[1,8512,"d"],[-1,8551,"\n"],[1,8552,"r"],[-1,8729,""],[1,8757,"\n\n"]],[2285,2285],[8759,8759]]],[1528101829664,[null,[[1,2285,"（"],[-1,2285,"中"],[1,3414,"\n"],[-1,3880,"\n"],[-1,3970,"\\"],[1,3973,"-"],[1,4021,"象"],[-1,4022,"象"],[1,4055,"\n"],[-1,4888,"\n"],[1,4905,"v"],[-1,4905,"和"],[1,5040,"\n"],[-1,5765,"\n"],[1,5949,"\n"],[-1,5983,"\n"],[-1,6244,"，"],[1,6247,"任"],[1,7002,"\n\n"],[-1,7002,"列表"],[1,7876,"成"],[-1,7876,"\n"],[1,8491,"\n\n"],[-1,8491,"对其"],[1,8511,"i"],[-1,8511,"d"],[1,8551,"\n"],[-1,8551,"r"],[1,8729,""],[-1,8757,"\n\n"]],[8759,8759],[2285,2285]]],[1528101776094,["Re@Re.local",[[1,8759,". 将nbr放入队列"]],[8759,8759],[8769,8769]]],[1528101776770,["Re@Re.local",[[-1,8768,"列"]],[8769,8769],[8768,8768]]],[1528101778404,["Re@Re.local",[[1,8768,"尾。。"]],[8768,8768],[8771,8771]]],[1528101779071,["Re@Re.local",[[-1,8770,"。"]],[8771,8771],[8770,8770]]],[1528101793472,["Re@Re.local",[[1,8770,"将nbr放在队尾"]],[8770,8770],[8778,8778]]],[1528101889673,[null,[[-1,2285,"（"],[1,2286,"中"],[-1,3414,"\n"],[1,3881,"\n"],[1,3970,"\\"],[-1,3972,"-"],[-1,4021,"象"],[1,4023,"象"],[-1,4055,"\n"],[1,4889,"\n"],[-1,4905,"v"],[1,4906,"和"],[-1,5040,"\n"],[-1,5766,""],[1,5766,"\n"],[-1,5949,"\n"],[-1,5984,""],[1,5984,"\n"],[1,6244,"，"],[-1,6246,"任"],[-1,7002,"\n\n"],[1,7004,"列表"],[-1,7876,"成"],[1,7877,"\n"],[-1,8491,"\n\n"],[1,8493,"对其"],[-1,8511,"i"],[1,8512,"d"],[-1,8551,"\n"],[1,8552,"r"],[-1,8758,"\n"],[1,8759,"4"],[1,8780,"\n\n\n"]],[2285,2285],[8783,8783]]],[1528101889673,[null,[[1,2285,"（"],[-1,2285,"中"],[1,3414,"\n"],[-1,3880,"\n"],[-1,3970,"\\"],[1,3973,"-"],[1,4021,"象"],[-1,4022,"象"],[1,4055,"\n"],[-1,4888,"\n"],[1,4905,"v"],[-1,4905,"和"],[1,5040,"\n"],[1,5765,""],[-1,5765,"\n"],[1,5949,"\n"],[1,5983,""],[-1,5983,"\n"],[-1,6244,"，"],[1,6247,"任"],[1,7002,"\n\n"],[-1,7002,"列表"],[1,7876,"成"],[-1,7876,"\n"],[1,8491,"\n\n"],[-1,8491,"对其"],[1,8511,"i"],[-1,8511,"d"],[1,8551,"\n"],[-1,8551,"r"],[1,8758,"\n"],[-1,8758,"4"],[-1,8780,"\n\n\n"]],[8783,8783],[2285,2285]]],[1528101856411,["Re@Re.local",[[1,8778,"使得该节点只有"]],[8778,8778],[8785,8785]]],[1528101858924,["Re@Re.local",[[-1,8783,"只有"]],[8785,8785],[8783,8783]]],[1528101869314,["Re@Re.local",[[1,8783,"只有在currentVeart"]],[8783,8783],[8798,8798]]],[1528101869973,["Re@Re.local",[[-1,8795,"art"]],[8798,8798],[8795,8795]]],[1528101873265,["Re@Re.local",[[1,8795,"rt的子咧"]],[8795,8795],[8800,8800]]],[1528101873540,["Re@Re.local",[[-1,8798,"子咧"]],[8800,8800],[8798,8798]]],[1528101889406,["Re@Re.local",[[1,8798,"邻接列表中的所有其它顶点都被搜索过了才会"]],[8798,8798],[8818,8818]]],[1528101949676,[null,[[-1,2285,"（"],[1,2286,"中"],[-1,3414,"\n"],[1,3881,"\n"],[1,3970,"\\"],[-1,3972,"-"],[-1,4021,"象"],[1,4023,"象"],[-1,4055,"\n"],[1,4889,"\n"],[-1,4905,"v"],[1,4906,"和"],[-1,5040,"\n"],[-1,5766,""],[1,5766,"\n"],[-1,5949,"\n"],[-1,5984,""],[1,5984,"\n"],[1,6244,"，"],[-1,6246,"任"],[-1,7002,"\n\n"],[1,7004,"列表"],[-1,7876,"成"],[1,7877,"\n"],[-1,8491,"\n\n"],[1,8493,"对其"],[-1,8511,"i"],[1,8512,"d"],[-1,8551,"\n"],[1,8552,"r"],[-1,8758,"\n"],[1,8759,"4"],[1,8820,"\n\n\n"]],[2285,2285],[8823,8823]]],[1528101949676,[null,[[1,2285,"（"],[-1,2285,"中"],[1,3414,"\n"],[-1,3880,"\n"],[-1,3970,"\\"],[1,3973,"-"],[1,4021,"象"],[-1,4022,"象"],[1,4055,"\n"],[-1,4888,"\n"],[1,4905,"v"],[-1,4905,"和"],[1,5040,"\n"],[1,5765,""],[-1,5765,"\n"],[1,5949,"\n"],[1,5983,""],[-1,5983,"\n"],[-1,6244,"，"],[1,6247,"任"],[1,7002,"\n\n"],[-1,7002,"列表"],[1,7876,"成"],[-1,7876,"\n"],[1,8491,"\n\n"],[-1,8491,"对其"],[1,8511,"i"],[-1,8511,"d"],[1,8551,"\n"],[-1,8551,"r"],[1,8758,"\n"],[-1,8758,"4"],[-1,8820,"\n\n\n"]],[8823,8823],[2285,2285]]],[1528101900376,["Re@Re.local",[[1,8818,"继续被搜索。"]],[8818,8818],[8824,8824]]],[1528101900692,["Re@Re.local",[[1,8829,"\n"]],[8824,8824],[8825,8825]]],[1528101900895,["Re@Re.local",[[1,8830,"\n"]],[8825,8825],[8826,8826]]],[1528101902630,["Re@Re.local",[[1,8826,"*8"]],[8826,8826],[8828,8828]]],[1528101904046,["Re@Re.local",[[-1,8827,"8"]],[8828,8828],[8827,8827]]],[1528101906680,["Re@Re.local",[[1,8827,"*代码2**"]],[8827,8827],[8833,8833]]],[1528101906934,["Re@Re.local",[[1,8838,"\n"]],[8833,8833],[8834,8834]]],[1528101908693,["Re@Re.local",[[1,8834,"```Python"]],[8834,8834],[8843,8843]]],[1528101914327,["Re@Re.local",[[1,8848,"\n"]],[8843,8843],[8844,8844]]],[1528101914601,["Re@Re.local",[[1,8844,"from pythonds.graphs import Graph, Vertex\nfrom pythonds.basic import Queue\n\ndef bfs(g,start):\n  start.setDistance(0)\n  start.setPred(None)\n  vertQueue = Queue()\n  vertQueue.enqueue(start)\n  while (vertQueue.size() > 0):\n    currentVert = vertQueue.dequeue()\n    for nbr in currentVert.getConnections():\n      if (nbr.getColor() == 'white'):\n        nbr.setColor('gray')\n        nbr.setDistance(currentVert.getDistance() + 1)\n        nbr.setPred(currentVert)\n        vertQueue.enqueue(nbr)\n    currentVert.setColor('black')"]],[8844,8844],[9366,9366]]],[1528101914766,["Re@Re.local",[[1,9371,"\n"]],[9366,9366],[9367,9367]]],[1528101915244,["Re@Re.local",[[1,9367,"11"]],[9367,9367],[9369,9369]]],[1528101916053,["Re@Re.local",[[-1,9367,"11"]],[9369,9369],[9367,9367]]],[1528101916659,["Re@Re.local",[[1,9367,"```"]],[9367,9367],[9370,9370]]],[1528101917008,["Re@Re.local",[[1,9375,"\n"]],[9370,9370],[9371,9371]]],[1528164746709,[null,[[-1,2285,"（"],[1,2286,"中"],[-1,3414,"\n"],[1,3881,"\n"],[1,3970,"\\"],[-1,3972,"-"],[-1,4021,"象"],[1,4023,"象"],[-1,4055,"\n"],[1,4889,"\n"],[-1,4905,"v"],[1,4906,"和"],[-1,5040,"\n"],[1,5766,"\n"],[-1,5949,"\n"],[1,5984,"\n"],[1,6244,"，"],[-1,6246,"任"],[-1,7002,"\n\n"],[1,7004,"列表"],[-1,7876,"成"],[1,7877,"\n"],[-1,8491,"\n\n"],[1,8493,"对其"],[-1,8511,"i"],[1,8512,"d"],[-1,8551,"\n"],[1,8552,"r"],[-1,8758,"\n"],[1,8759,"4"],[-1,9367,""],[1,9373,"\n\n\n"]],[2285,2285],[9376,9376]]],[1528164746709,[null,[[1,2285,"（"],[-1,2285,"中"],[1,3414,"\n"],[-1,3880,"\n"],[-1,3970,"\\"],[1,3973,"-"],[1,4021,"象"],[-1,4022,"象"],[1,4055,"\n"],[-1,4888,"\n"],[1,4905,"v"],[-1,4905,"和"],[1,5040,"\n"],[-1,5765,"\n"],[1,5949,"\n"],[-1,5983,"\n"],[-1,6244,"，"],[1,6247,"任"],[1,7002,"\n\n"],[-1,7002,"列表"],[1,7876,"成"],[-1,7876,"\n"],[1,8491,"\n\n"],[-1,8491,"对其"],[1,8511,"i"],[-1,8511,"d"],[1,8551,"\n"],[-1,8551,"r"],[1,8758,"\n"],[-1,8758,"4"],[1,9367,""],[-1,9373,"\n\n\n"]],[9376,9376],[2285,2285]]],[1528164746416,["Re@Re.local",[[1,9371,"现在来仔细研究下bf"]],[9371,9371],[9381,9381]]],[1528164806697,[null,[[-1,2285,"（"],[1,2286,"中"],[-1,3414,"\n"],[1,3881,"\n"],[1,3970,"\\"],[-1,3972,"-"],[-1,4021,"象"],[1,4023,"象"],[-1,4055,"\n"],[1,4889,"\n"],[-1,4905,"v"],[1,4906,"和"],[-1,5040,"\n"],[1,5766,"\n"],[-1,5949,"\n"],[1,5984,"\n"],[1,6244,"，"],[-1,6246,"任"],[-1,7002,"\n\n"],[1,7004,"列表"],[-1,7876,"成"],[1,7877,"\n"],[-1,8491,"\n\n"],[1,8493,"对其"],[-1,8511,"i"],[1,8512,"d"],[-1,8551,"\n"],[1,8552,"r"],[-1,8758,"\n"],[1,8759,"4"],[-1,9371,""],[1,9383,"\n\n\n"]],[2285,2285],[9386,9386]]],[1528164806697,[null,[[1,2285,"（"],[-1,2285,"中"],[1,3414,"\n"],[-1,3880,"\n"],[-1,3970,"\\"],[1,3973,"-"],[1,4021,"象"],[-1,4022,"象"],[1,4055,"\n"],[-1,4888,"\n"],[1,4905,"v"],[-1,4905,"和"],[1,5040,"\n"],[-1,5765,"\n"],[1,5949,"\n"],[-1,5983,"\n"],[-1,6244,"，"],[1,6247,"任"],[1,7002,"\n\n"],[-1,7002,"列表"],[1,7876,"成"],[-1,7876,"\n"],[1,8491,"\n\n"],[-1,8491,"对其"],[1,8511,"i"],[-1,8511,"d"],[1,8551,"\n"],[-1,8551,"r"],[1,8758,"\n"],[-1,8758,"4"],[1,9371,""],[-1,9383,"\n\n\n"]],[9386,9386],[2285,2285]]],[1528164766668,["Re@Re.local",[[1,9381,"s函数是如何对图1构件宽度有限树的"]],[9381,9381],[9398,9398]]],[1528164767333,["Re@Re.local",[[-1,9394,"有限树的"]],[9398,9398],[9394,9394]]],[1528164789120,["Re@Re.local",[[1,9394,"优先树的。从FOOL出发，将所欲"]],[9394,9394],[9410,9410]]],[1528164789359,["Re@Re.local",[[-1,9409,"欲"]],[9410,9410],[9409,9409]]],[1528164789525,["Re@Re.local",[[1,9409,"="]],[9409,9409],[9410,9410]]],[1528164791208,["Re@Re.local",[[-1,9408,"所="]],[9410,9410],[9408,9408]]],[1528164792035,["Re@Re.local",[[1,9408,"所"]],[9408,9408],[9409,9409]]],[1528164792561,["Re@Re.local",[[-1,9408,"所"]],[9409,9409],[9408,9408]]],[1528164799976,["Re@Re.local",[[1,9408,"所有与其邻接的单词"]],[9408,9408],[9417,9417]]],[1528164800325,["Re@Re.local",[[-1,9415,"单词"]],[9417,9417],[9415,9415]]],[1528164804886,["Re@Re.local",[[1,9415,"节点与"]],[9415,9415],[9418,9418]]],[1528164805416,["Re@Re.local",[[-1,9417,"与"]],[9418,9418],[9417,9417]]],[1528164868127,[null,[[-1,2285,"（"],[1,2286,"中"],[-1,3414,"\n"],[1,3881,"\n"],[1,3970,"\\"],[-1,3972,"-"],[-1,4021,"象"],[1,4023,"象"],[-1,4055,"\n"],[1,4889,"\n"],[-1,4905,"v"],[1,4906,"和"],[-1,5040,"\n"],[1,5766,"\n"],[-1,5949,"\n"],[1,5984,"\n"],[1,6244,"，"],[-1,6246,"任"],[-1,7002,"\n\n"],[1,7004,"列表"],[-1,7876,"成"],[1,7877,"\n"],[-1,8491,"\n\n"],[1,8493,"对其"],[-1,8511,"i"],[1,8512,"d"],[-1,8551,"\n"],[1,8552,"r"],[-1,8758,"\n"],[1,8759,"4"],[-1,9371,""],[1,9419,"\n\n\n"]],[2285,2285],[9422,9422]]],[1528164868127,[null,[[1,2285,"（"],[-1,2285,"中"],[1,3414,"\n"],[-1,3880,"\n"],[-1,3970,"\\"],[1,3973,"-"],[1,4021,"象"],[-1,4022,"象"],[1,4055,"\n"],[-1,4888,"\n"],[1,4905,"v"],[-1,4905,"和"],[1,5040,"\n"],[-1,5765,"\n"],[1,5949,"\n"],[-1,5983,"\n"],[-1,6244,"，"],[1,6247,"任"],[1,7002,"\n\n"],[-1,7002,"列表"],[1,7876,"成"],[-1,7876,"\n"],[1,8491,"\n\n"],[-1,8491,"对其"],[1,8511,"i"],[-1,8511,"d"],[1,8551,"\n"],[-1,8551,"r"],[1,8758,"\n"],[-1,8758,"4"],[1,9371,""],[-1,9419,"\n\n\n"]],[9422,9422],[2285,2285]]],[1528164810795,["Re@Re.local",[[1,9417,"连接到该书"]],[9417,9417],[9422,9422]]],[1528164812894,["Re@Re.local",[[-1,9411,"其"]],[9412,9412],[9411,9411]]],[1528164814311,["Re@Re.local",[[1,9411,"FOOL"]],[9411,9411],[9415,9415]]],[1528164817571,["Re@Re.local",[[-1,9429,"\n"]],[9426,9426],[9425,9425]]],[1528164817760,["Re@Re.local",[[-1,9424,"书"]],[9425,9425],[9424,9424]]],[1528164820325,["Re@Re.local",[[1,9424,"树上，"]],[9424,9424],[9427,9427]]],[1528164821429,["Re@Re.local",[[-1,9426,"，"]],[9427,9427],[9426,9426]]],[1528164831154,["Re@Re.local",[[1,9426,"。临近节点包括树"]],[9426,9426],[9434,9434]]],[1528164831231,["Re@Re.local",[[-1,9433,"树"]],[9434,9434],[9433,9433]]],[1528164832452,["Re@Re.local",[[1,9433,"p"]],[9433,9433],[9434,9434]]],[1528164832800,["Re@Re.local",[[-1,9433,"p"]],[9434,9434],[9433,9433]]],[1528164852301,["Re@Re.local",[[1,9433,"POOL，FOIL，FOUL和COOL。每个但节点都被加入"]],[9433,9433],[9462,9462]]],[1528165348769,[null,[[-1,2285,"（"],[1,2286,"中"],[-1,3414,"\n"],[1,3881,"\n"],[1,3970,"\\"],[-1,3972,"-"],[-1,4021,"象"],[1,4023,"象"],[-1,4055,"\n"],[1,4889,"\n"],[-1,4905,"v"],[1,4906,"和"],[-1,5040,"\n"],[1,5766,"\n"],[-1,5949,"\n"],[1,5984,"\n"],[1,6244,"，"],[-1,6246,"任"],[-1,7002,"\n\n"],[1,7004,"列表"],[-1,7876,"成"],[1,7877,"\n"],[-1,8491,"\n\n"],[1,8493,"对其"],[-1,8511,"i"],[1,8512,"d"],[-1,8551,"\n"],[1,8552,"r"],[-1,8758,"\n"],[1,8759,"4"],[-1,9371,""],[1,9464,"\n\n"]],[2285,2285],[9466,9466]]],[1528165348769,[null,[[1,2285,"（"],[-1,2285,"中"],[1,3414,"\n"],[-1,3880,"\n"],[-1,3970,"\\"],[1,3973,"-"],[1,4021,"象"],[-1,4022,"象"],[1,4055,"\n"],[-1,4888,"\n"],[1,4905,"v"],[-1,4905,"和"],[1,5040,"\n"],[-1,5765,"\n"],[1,5949,"\n"],[-1,5983,"\n"],[-1,6244,"，"],[1,6247,"任"],[1,7002,"\n\n"],[-1,7002,"列表"],[1,7876,"成"],[-1,7876,"\n"],[1,8491,"\n\n"],[-1,8491,"对其"],[1,8511,"i"],[-1,8511,"d"],[1,8551,"\n"],[-1,8551,"r"],[1,8758,"\n"],[-1,8758,"4"],[1,9371,""],[-1,9464,"\n\n"]],[9466,9466],[2285,2285]]],[1528165329722,["Re@Re.local",[[-1,9455,"但"]],[9456,9456],[9455,9455]]],[1528165343634,["Re@Re.local",[[1,9461,"xin"]],[9461,9461],[9464,9464]]],[1528165344307,["Re@Re.local",[[-1,9461,"xin"]],[9464,9464],[9461,9461]]],[1528166248860,[null,[[-1,2285,"（"],[1,2286,"中"],[-1,3414,"\n"],[1,3881,"\n"],[1,3970,"\\"],[-1,3972,"-"],[-1,4021,"象"],[1,4023,"象"],[-1,4055,"\n"],[1,4889,"\n"],[-1,4905,"v"],[1,4906,"和"],[-1,5040,"\n"],[1,5766,"\n"],[-1,5949,"\n"],[1,5984,"\n"],[1,6244,"，"],[-1,6246,"任"],[-1,7002,"\n\n"],[1,7004,"列表"],[-1,7876,"成"],[1,7877,"\n"],[-1,8491,"\n\n"],[1,8493,"对其"],[-1,8511,"i"],[1,8512,"d"],[-1,8551,"\n"],[1,8552,"r"],[-1,8758,"\n"],[1,8759,"4"],[-1,9371,""],[1,9463,"\n\n"]],[2285,2285],[9465,9465]]],[1528166248860,[null,[[1,2285,"（"],[-1,2285,"中"],[1,3414,"\n"],[-1,3880,"\n"],[-1,3970,"\\"],[1,3973,"-"],[1,4021,"象"],[-1,4022,"象"],[1,4055,"\n"],[-1,4888,"\n"],[1,4905,"v"],[-1,4905,"和"],[1,5040,"\n"],[-1,5765,"\n"],[1,5949,"\n"],[-1,5983,"\n"],[-1,6244,"，"],[1,6247,"任"],[1,7002,"\n\n"],[-1,7002,"列表"],[1,7876,"成"],[-1,7876,"\n"],[1,8491,"\n\n"],[-1,8491,"对其"],[1,8511,"i"],[-1,8511,"d"],[1,8551,"\n"],[-1,8551,"r"],[1,8758,"\n"],[-1,8758,"4"],[1,9371,""],[-1,9463,"\n\n"]],[9465,9465],[2285,2285]]],[1528166238592,["Re@Re.local",[[-1,9458,"被加入"]],[9461,9461],[9458,9458]]],[1528166240502,["Re@Re.local",[[1,9458,"fang"]],[9458,9458],[9462,9462]]],[1528166241526,["Re@Re.local",[[-1,9458,"fang"]],[9462,9462],[9458,9458]]],[1528166248512,["Re@Re.local",[[1,9458,"放入了待"]],[9458,9458],[9462,9462]]],[1528166308744,[null,[[-1,2285,"（"],[1,2286,"中"],[-1,3414,"\n"],[1,3881,"\n"],[1,3970,"\\"],[-1,3972,"-"],[-1,4021,"象"],[1,4023,"象"],[-1,4055,"\n"],[1,4889,"\n"],[-1,4905,"v"],[1,4906,"和"],[-1,5040,"\n"],[1,5766,"\n"],[-1,5949,"\n"],[1,5984,"\n"],[1,6244,"，"],[-1,6246,"任"],[-1,7002,"\n\n"],[1,7004,"列表"],[-1,7876,"成"],[1,7877,"\n"],[-1,8491,"\n\n"],[1,8493,"对其"],[-1,8511,"i"],[1,8512,"d"],[-1,8551,"\n"],[1,8552,"r"],[-1,8758,"\n"],[1,8759,"4"],[-1,9371,""],[1,9464,"\n\n"]],[2285,2285],[9466,9466]]],[1528166308744,[null,[[1,2285,"（"],[-1,2285,"中"],[1,3414,"\n"],[-1,3880,"\n"],[-1,3970,"\\"],[1,3973,"-"],[1,4021,"象"],[-1,4022,"象"],[1,4055,"\n"],[-1,4888,"\n"],[1,4905,"v"],[-1,4905,"和"],[1,5040,"\n"],[-1,5765,"\n"],[1,5949,"\n"],[-1,5983,"\n"],[-1,6244,"，"],[1,6247,"任"],[1,7002,"\n\n"],[-1,7002,"列表"],[1,7876,"成"],[-1,7876,"\n"],[1,8491,"\n\n"],[-1,8491,"对其"],[1,8511,"i"],[-1,8511,"d"],[1,8551,"\n"],[-1,8551,"r"],[1,8758,"\n"],[-1,8758,"4"],[1,9371,""],[-1,9464,"\n\n"]],[9466,9466],[2285,2285]]],[1528166251545,["Re@Re.local",[[1,9462,"搜索新"]],[9462,9462],[9465,9465]]],[1528166251815,["Re@Re.local",[[-1,9464,"新"]],[9465,9465],[9464,9464]]],[1528166274231,["Re@Re.local",[[1,9464,"待新节点。图3是"]],[9464,9464],[9472,9472]]],[1528166275436,["Re@Re.local",[[-1,9469,"图3是"]],[9472,9472],[9469,9469]]],[1528166282695,["Re@Re.local",[[1,9469,"图3给出了该"]],[9469,9469],[9475,9475]]],[1528166285655,["Re@Re.local",[[-1,9474,"该"]],[9475,9475],[9474,9474]]],[1528166300514,["Re@Re.local",[[1,9474,"该操作中的树及其"]],[9474,9474],[9482,9482]]],[1528166306198,["Re@Re.local",[[-1,9481,"其"]],[9482,9482],[9481,9481]]],[1528166307683,["Re@Re.local",[[1,9481,"完成"]],[9481,9481],[9483,9483]]],[1528166368742,[null,[[-1,2285,"（"],[1,2286,"中"],[-1,3414,"\n"],[1,3881,"\n"],[1,3970,"\\"],[-1,3972,"-"],[-1,4021,"象"],[1,4023,"象"],[-1,4055,"\n"],[1,4889,"\n"],[-1,4905,"v"],[1,4906,"和"],[-1,5040,"\n"],[1,5766,"\n"],[-1,5949,"\n"],[1,5984,"\n"],[1,6244,"，"],[-1,6246,"任"],[-1,7002,"\n\n"],[1,7004,"列表"],[-1,7876,"成"],[1,7877,"\n"],[-1,8491,"\n\n"],[1,8493,"对其"],[-1,8511,"i"],[1,8512,"d"],[-1,8551,"\n"],[1,8552,"r"],[-1,8758,"\n"],[1,8759,"4"],[-1,9371,""],[1,9485,"\n\n"]],[2285,2285],[9487,9487]]],[1528166368742,[null,[[1,2285,"（"],[-1,2285,"中"],[1,3414,"\n"],[-1,3880,"\n"],[-1,3970,"\\"],[1,3973,"-"],[1,4021,"象"],[-1,4022,"象"],[1,4055,"\n"],[-1,4888,"\n"],[1,4905,"v"],[-1,4905,"和"],[1,5040,"\n"],[-1,5765,"\n"],[1,5949,"\n"],[-1,5983,"\n"],[-1,6244,"，"],[1,6247,"任"],[1,7002,"\n\n"],[-1,7002,"列表"],[1,7876,"成"],[-1,7876,"\n"],[1,8491,"\n\n"],[-1,8491,"对其"],[1,8511,"i"],[-1,8511,"d"],[1,8551,"\n"],[-1,8551,"r"],[1,8758,"\n"],[-1,8758,"4"],[1,9371,""],[-1,9485,"\n\n"]],[9487,9487],[2285,2285]]],[1528166310730,["Re@Re.local",[[1,9483,"后的队列。"]],[9483,9483],[9488,9488]]],[1528166311052,["Re@Re.local",[[1,9492,"\n"]],[9488,9488],[9489,9489]]],[1528166311244,["Re@Re.local",[[1,9493,"\n"]],[9489,9489],[9490,9490]]],[1528166314272,["Re@Re.local",[[-1,9493,"\n"]],[9490,9490],[9489,9489]]],[1528166318964,["Re@Re.local",[[1,9489,"![../_images/bfs1.png](http://interactivepython.org/courselib/static/pythonds/_images/bfs1.png)"]],[9489,9489],[9584,9584]]],[1528166319214,["Re@Re.local",[[1,9588,"\n"]],[9584,9584],[9585,9585]]],[1528166324990,["Re@Re.local",[[1,9589,"\n"]],[9586,9586],[9587,9587]]],[1528166325987,["Re@Re.local",[[1,9587,"在"]],[9587,9587],[9588,9588]]],[1528166327736,["Re@Re.local",[[-1,9587,"在"]],[9588,9588],[9587,9587]]],[1528166327932,["Re@Re.local",[[-1,9589,"\n"]],[9587,9587],[9586,9586]]],[1528166328671,["Re@Re.local",[[1,9586,"z"]],[9586,9586],[9587,9587]]],[1528166329294,["Re@Re.local",[[-1,9586,"z"]],[9587,9587],[9586,9586]]],[1528166330977,["Re@Re.local",[[-1,9588,"\n"]],[9588,9588],[9587,9587]]],[1528166331967,["Re@Re.local",[[-1,9587,"\n"]],[9587,9587],[0,0]]],[1528166332185,["Re@Re.local",[[-1,9586,"\n"]],[9587,9587],[9586,9586]]],[1528166333152,["Re@Re.local",[[1,9586,"\n\n"]],[9586,9586],[9587,9587]]],[1528166335924,["Re@Re.local",[[-1,9587,"\n"],[1,9588,"接下来，bfd"]],[9587,9587],[9594,9594]]],[1528166336357,["Re@Re.local",[[-1,9593,"d"]],[9594,9594],[9593,9593]]],[1528166340078,["Re@Re.local",[[1,9593,"s去掉了p"]],[9593,9593],[9598,9598]]],[1528166340476,["Re@Re.local",[[-1,9597,"p"]],[9598,9598],[9597,9597]]],[1528166343717,["Re@Re.local",[[1,9597,"(POOL)"]],[9597,9597],[9603,9603]]],[1528166349499,["Re@Re.local",[[1,9597,"下一个节点"]],[9597,9597],[9602,9602]]],[1528166351647,["Re@Re.local",[[-1,9594,"去掉了下一个节点"]],[9602,9602],[9594,9594]]],[1528166354792,["Re@Re.local",[[1,9594,"从队列前"]],[9594,9594],[9598,9598]]],[1528166355268,["Re@Re.local",[[-1,9595,"队列前"]],[9598,9598],[9595,9595]]],[1528166356759,["Re@Re.local",[[1,9595,"首"]],[9595,9595],[9596,9596]]],[1528166357700,["Re@Re.local",[[-1,9595,"首"]],[9596,9596],[9595,9595]]],[1528166360210,["Re@Re.local",[[1,9595,"队首去屌"]],[9595,9595],[9599,9599]]],[1528166360712,["Re@Re.local",[[-1,9598,"屌"]],[9599,9599],[9598,9598]]],[1528166365332,["Re@Re.local",[[1,9598,"掉了下一个节点"]],[9598,9598],[9605,9605]]],[1528166428874,[null,[[-1,2285,"（"],[1,2286,"中"],[-1,3414,"\n"],[1,3881,"\n"],[1,3970,"\\"],[-1,3972,"-"],[-1,4021,"象"],[1,4023,"象"],[-1,4055,"\n"],[1,4889,"\n"],[-1,4905,"v"],[1,4906,"和"],[-1,5040,"\n"],[1,5766,"\n"],[-1,5949,"\n"],[1,5984,"\n"],[1,6244,"，"],[-1,6246,"任"],[-1,7002,"\n\n"],[1,7004,"列表"],[-1,7876,"成"],[1,7877,"\n"],[-1,8491,"\n\n"],[1,8493,"对其"],[-1,8511,"i"],[1,8512,"d"],[-1,8551,"\n"],[1,8552,"r"],[-1,8758,"\n"],[1,8759,"4"]],[2285,2285],[8760,8760]]],[1528166428874,[null,[[1,2285,"（"],[-1,2285,"中"],[1,3414,"\n"],[-1,3880,"\n"],[-1,3970,"\\"],[1,3973,"-"],[1,4021,"象"],[-1,4022,"象"],[1,4055,"\n"],[-1,4888,"\n"],[1,4905,"v"],[-1,4905,"和"],[1,5040,"\n"],[-1,5765,"\n"],[1,5949,"\n"],[-1,5983,"\n"],[-1,6244,"，"],[1,6247,"任"],[1,7002,"\n\n"],[-1,7002,"列表"],[1,7876,"成"],[-1,7876,"\n"],[1,8491,"\n\n"],[-1,8491,"对其"],[1,8511,"i"],[-1,8511,"d"],[1,8551,"\n"],[-1,8551,"r"],[1,8758,"\n"],[-1,8758,"4"]],[8760,8760],[2285,2285]]],[1528166384795,["Re@Re.local",[[1,9611,"，并对所有林"]],[9611,9611],[9617,9617]]],[1528166385352,["Re@Re.local",[[-1,9614,"所有林"]],[9617,9617],[9614,9614]]],[1528166403582,["Re@Re.local",[[1,9614,"其所有邻接节点重复该操作。然而，当bfs检查到节点co"]],[9614,9614],[9641,9641]]],[1528166404329,["Re@Re.local",[[-1,9639,"co"]],[9641,9641],[9639,9639]]],[1528166417232,["Re@Re.local",[[1,9639,"COOL时，它发现COOL的颜色咋"]],[9639,9639],[9656,9656]]],[1528166417341,["Re@Re.local",[[-1,9655,"咋"]],[9656,9656],[9655,9655]]],[1528166424853,["Re@Re.local",[[1,9655,"已经是灰色了，。这意味则"]],[9655,9655],[9667,9667]]],[1528166425881,["Re@Re.local",[[-1,9661,"，。这意味则"]],[9667,9667],[9661,9661]]],[1528166428376,["Re@Re.local",[[1,9661,"。这意味着"]],[9661,9661],[9666,9666]]],[1528166488840,[null,[[-1,2285,"（"],[1,2286,"中"],[-1,3414,"\n"],[1,3881,"\n"],[1,3970,"\\"],[-1,3972,"-"],[-1,4021,"象"],[1,4023,"象"],[-1,4055,"\n"],[1,4889,"\n"],[-1,4905,"v"],[1,4906,"和"],[-1,5040,"\n"],[1,5766,"\n"],[-1,5949,"\n"],[1,5984,"\n"],[1,6244,"，"],[-1,6246,"任"],[-1,7002,"\n\n"],[1,7004,"列表"],[-1,7876,"成"],[1,7877,"\n"],[-1,8491,"\n\n"],[1,8493,"对其"],[-1,8511,"i"],[1,8512,"d"],[-1,8551,"\n"],[1,8552,"r"],[-1,8758,"\n"],[1,8759,"4"]],[2285,2285],[8760,8760]]],[1528166488840,[null,[[1,2285,"（"],[-1,2285,"中"],[1,3414,"\n"],[-1,3880,"\n"],[-1,3970,"\\"],[1,3973,"-"],[1,4021,"象"],[-1,4022,"象"],[1,4055,"\n"],[-1,4888,"\n"],[1,4905,"v"],[-1,4905,"和"],[1,5040,"\n"],[-1,5765,"\n"],[1,5949,"\n"],[-1,5983,"\n"],[-1,6244,"，"],[1,6247,"任"],[1,7002,"\n\n"],[-1,7002,"列表"],[1,7876,"成"],[-1,7876,"\n"],[1,8491,"\n\n"],[-1,8491,"对其"],[1,8511,"i"],[-1,8511,"d"],[1,8551,"\n"],[-1,8551,"r"],[1,8758,"\n"],[-1,8758,"4"]],[8760,8760],[2285,2285]]],[1528166458806,["Re@Re.local",[[1,9666,"有更短的路径到达COOL，并且COOL已经iu"]],[9666,9666],[9689,9689]]],[1528166459118,["Re@Re.local",[[-1,9687,"iu"]],[9689,9689],[9687,9687]]],[1528166484872,["Re@Re.local",[[1,9687,"留在队列中以待进一步搜索。在对"]],[9687,9687],[9702,9702]]],[1528166485097,["Re@Re.local",[[-1,9701,"对"]],[9702,9702],[9701,9701]]],[1528166486989,["Re@Re.local",[[1,9701,"监测P"]],[9701,9701],[9704,9704]]],[1528166488036,["Re@Re.local",[[-1,9701,"监测P"]],[9704,9704],[9701,9701]]],[1528166548756,[null,[[-1,2285,"（"],[1,2286,"中"],[-1,3414,"\n"],[1,3881,"\n"],[1,3970,"\\"],[-1,3972,"-"],[-1,4021,"象"],[1,4023,"象"],[-1,4055,"\n"],[1,4889,"\n"],[-1,4905,"v"],[1,4906,"和"],[-1,5040,"\n"],[1,5766,"\n"],[-1,5949,"\n"],[1,5984,"\n"],[1,6244,"，"],[-1,6246,"任"],[-1,7002,"\n\n"],[1,7004,"列表"],[-1,7876,"成"],[1,7877,"\n"],[-1,8491,"\n\n"],[1,8493,"对其"],[-1,8511,"i"],[1,8512,"d"],[-1,8551,"\n"],[1,8552,"r"],[-1,8758,"\n"],[1,8759,"4"]],[2285,2285],[8760,8760]]],[1528166548756,[null,[[1,2285,"（"],[-1,2285,"中"],[1,3414,"\n"],[-1,3880,"\n"],[-1,3970,"\\"],[1,3973,"-"],[1,4021,"象"],[-1,4022,"象"],[1,4055,"\n"],[-1,4888,"\n"],[1,4905,"v"],[-1,4905,"和"],[1,5040,"\n"],[-1,5765,"\n"],[1,5949,"\n"],[-1,5983,"\n"],[-1,6244,"，"],[1,6247,"任"],[1,7002,"\n\n"],[-1,7002,"列表"],[1,7876,"成"],[-1,7876,"\n"],[1,8491,"\n\n"],[-1,8491,"对其"],[1,8511,"i"],[-1,8511,"d"],[1,8551,"\n"],[-1,8551,"r"],[1,8758,"\n"],[-1,8758,"4"]],[8760,8760],[2285,2285]]],[1528166500773,["Re@Re.local",[[1,9702,"POOL进行监测时唯一新加入队列的是OO"]],[9702,9702],[9722,9722]]],[1528166501372,["Re@Re.local",[[-1,9720,"OO"]],[9722,9722],[9720,9720]]],[1528166504112,["Re@Re.local",[[1,9720,"POLL，"]],[9720,9720],[9725,9725]]],[1528166504731,["Re@Re.local",[[-1,9724,"，"]],[9725,9725],[9724,9724]]],[1528166506222,["Re@Re.local",[[1,9724,"，心中"]],[9724,9724],[9727,9727]]],[1528166506611,["Re@Re.local",[[-1,9724,"，心中"]],[9727,9727],[9724,9724]]],[1528166513181,["Re@Re.local",[[1,9724,"。新状态如图4所示。"]],[9724,9724],[9734,9734]]],[1528166524082,["Re@Re.local",[[1,9734,"\n\n"]],[9734,9734],[9735,9735]]],[1528166524296,["Re@Re.local",[[1,9736,"\n"]],[9735,9735],[9736,9736]]],[1528166524632,["Re@Re.local",[[1,9736,"![../_images/bfs2.png](http://interactivepython.org/courselib/static/pythonds/_images/bfs2.png)"]],[9736,9736],[9831,9831]]],[1528166525321,["Re@Re.local",[[1,9832,"\n"]],[9831,9831],[9832,9832]]],[1528166525742,["Re@Re.local",[[1,9833,"\n"]],[9832,9832],[9833,9833]]],[1528166668800,[null,[[-1,2285,"（"],[1,2286,"中"],[-1,3414,"\n"],[1,3881,"\n"],[1,3970,"\\"],[-1,3972,"-"],[-1,4021,"象"],[1,4023,"象"],[-1,4055,"\n"],[1,4889,"\n"],[-1,4905,"v"],[1,4906,"和"],[-1,5040,"\n"],[1,5766,"\n"],[-1,5949,"\n"],[1,5984,"\n"],[1,6244,"，"],[-1,6246,"任"],[-1,7002,"\n\n"],[1,7004,"列表"],[-1,7876,"成"],[1,7877,"\n"],[-1,8491,"\n\n"],[1,8493,"对其"],[-1,8511,"i"],[1,8512,"d"],[-1,8551,"\n"],[1,8552,"r"],[-1,8758,"\n"],[1,8759,"4"],[1,9701,"对"],[-1,9719,"O"]],[2285,2285],[9719,9719]]],[1528166668801,[null,[[1,2285,"（"],[-1,2285,"中"],[1,3414,"\n"],[-1,3880,"\n"],[-1,3970,"\\"],[1,3973,"-"],[1,4021,"象"],[-1,4022,"象"],[1,4055,"\n"],[-1,4888,"\n"],[1,4905,"v"],[-1,4905,"和"],[1,5040,"\n"],[-1,5765,"\n"],[1,5949,"\n"],[-1,5983,"\n"],[-1,6244,"，"],[1,6247,"任"],[1,7002,"\n\n"],[-1,7002,"列表"],[1,7876,"成"],[-1,7876,"\n"],[1,8491,"\n\n"],[-1,8491,"对其"],[1,8511,"i"],[-1,8511,"d"],[1,8551,"\n"],[-1,8551,"r"],[1,8758,"\n"],[-1,8758,"4"],[-1,9701,"对"],[1,9720,"O"]],[9719,9719],[2285,2285]]],[1528166662197,["Re@Re.local",[[1,9834,"\n"]],[9832,9832],[9833,9833]]],[1528166668166,["Re@Re.local",[[1,9833,"du"]],[9833,9833],[9835,9835]]],[1528166668602,["Re@Re.local",[[-1,9833,"du"]],[9835,9835],[9833,9833]]],[1528166728772,[null,[[-1,2285,"（"],[1,2286,"中"],[-1,3414,"\n"],[1,3881,"\n"],[1,3970,"\\"],[-1,3972,"-"],[-1,4021,"象"],[1,4023,"象"],[-1,4055,"\n"],[1,4889,"\n"],[-1,4905,"v"],[1,4906,"和"],[-1,5040,"\n"],[1,5766,"\n"],[-1,5949,"\n"],[1,5984,"\n"],[1,6244,"，"],[-1,6246,"任"],[-1,7002,"\n\n"],[1,7004,"列表"],[-1,7876,"成"],[1,7877,"\n"],[-1,8491,"\n\n"],[1,8493,"对其"],[-1,8511,"i"],[1,8512,"d"],[-1,8551,"\n"],[1,8552,"r"],[-1,8758,"\n"],[1,8759,"4"],[1,9701,"对"],[-1,9719,"O"]],[2285,2285],[9719,9719]]],[1528166728772,[null,[[1,2285,"（"],[-1,2285,"中"],[1,3414,"\n"],[-1,3880,"\n"],[-1,3970,"\\"],[1,3973,"-"],[1,4021,"象"],[-1,4022,"象"],[1,4055,"\n"],[-1,4888,"\n"],[1,4905,"v"],[-1,4905,"和"],[1,5040,"\n"],[-1,5765,"\n"],[1,5949,"\n"],[-1,5983,"\n"],[-1,6244,"，"],[1,6247,"任"],[1,7002,"\n\n"],[-1,7002,"列表"],[1,7876,"成"],[-1,7876,"\n"],[1,8491,"\n\n"],[-1,8491,"对其"],[1,8511,"i"],[-1,8511,"d"],[1,8551,"\n"],[-1,8551,"r"],[1,8758,"\n"],[-1,8758,"4"],[-1,9701,"对"],[1,9720,"O"]],[9719,9719],[2285,2285]]],[1528166688250,["Re@Re.local",[[1,9833,"队列中的下一个定额点是f"]],[9833,9833],[9845,9845]]],[1528166688528,["Re@Re.local",[[-1,9844,"f"]],[9845,9845],[9844,9844]]],[1528166689230,["Re@Re.local",[[1,9844,"FOI"]],[9844,9844],[9847,9847]]],[1528166690642,["Re@Re.local",[[-1,9840,"定额点是FOI"]],[9847,9847],[9840,9840]]],[1528166698482,["Re@Re.local",[[1,9840,"顶点是FOIL。心机"]],[9840,9840],[9850,9850]]],[1528166698807,["Re@Re.local",[[-1,9848,"心机"]],[9850,9850],[9848,9848]]],[1528166706065,["Re@Re.local",[[1,9848,"FOIL可以加入队列中的新价格"]],[9848,9848],[9863,9863]]],[1528166708452,["Re@Re.local",[[-1,9856,"队列中的新价格"]],[9863,9863],[9856,9856]]],[1528166712342,["Re@Re.local",[[1,9856,"树的级嗲"]],[9856,9856],[9860,9860]]],[1528166712592,["Re@Re.local",[[-1,9858,"级嗲"]],[9860,9860],[9858,9858]]],[1528166725313,["Re@Re.local",[[1,9858,"节点是FAIL，当bfs方法继续处理队列时"]],[9858,9858],[9879,9879]]],[1528166848802,[null,[[-1,2285,"（"],[1,2286,"中"],[-1,3414,"\n"],[1,3881,"\n"],[1,3970,"\\"],[-1,3972,"-"],[-1,4021,"象"],[1,4023,"象"],[-1,4055,"\n"],[1,4889,"\n"],[-1,4905,"v"],[1,4906,"和"],[-1,5040,"\n"],[1,5766,"\n"],[-1,5949,"\n"],[1,5984,"\n"],[1,6244,"，"],[-1,6246,"任"],[-1,7002,"\n\n"],[1,7004,"列表"],[-1,7876,"成"],[1,7877,"\n"],[-1,8491,"\n\n"],[1,8493,"对其"],[-1,8511,"i"],[1,8512,"d"],[-1,8551,"\n"],[1,8552,"r"],[-1,8758,"\n"],[1,8759,"4"],[1,9701,"对"],[-1,9719,"O"]],[2285,2285],[9719,9719]]],[1528166848802,[null,[[1,2285,"（"],[-1,2285,"中"],[1,3414,"\n"],[-1,3880,"\n"],[-1,3970,"\\"],[1,3973,"-"],[1,4021,"象"],[-1,4022,"象"],[1,4055,"\n"],[-1,4888,"\n"],[1,4905,"v"],[-1,4905,"和"],[1,5040,"\n"],[-1,5765,"\n"],[1,5949,"\n"],[-1,5983,"\n"],[-1,6244,"，"],[1,6247,"任"],[1,7002,"\n\n"],[-1,7002,"列表"],[1,7876,"成"],[-1,7876,"\n"],[1,8491,"\n\n"],[-1,8491,"对其"],[1,8511,"i"],[-1,8511,"d"],[1,8551,"\n"],[-1,8551,"r"],[1,8758,"\n"],[-1,8758,"4"],[-1,9701,"对"],[1,9720,"O"]],[9719,9719],[2285,2285]]],[1528166827571,["Re@Re.local",[[1,9879,"，"]],[9879,9879],[9880,9880]]],[1528166909878,[null,[[-1,2285,"（"],[1,2286,"中"],[-1,3414,"\n"],[1,3881,"\n"],[1,3970,"\\"],[-1,3972,"-"],[-1,4021,"象"],[1,4023,"象"],[-1,4055,"\n"],[1,4889,"\n"],[-1,4905,"v"],[1,4906,"和"],[-1,5040,"\n"],[1,5766,"\n"],[-1,5949,"\n"],[1,5984,"\n"],[1,6244,"，"],[-1,6246,"任"],[-1,7002,"\n\n"],[1,7004,"列表"],[-1,7876,"成"],[1,7877,"\n"],[-1,8491,"\n\n"],[1,8493,"对其"],[-1,8511,"i"],[1,8512,"d"],[-1,8551,"\n"],[1,8552,"r"],[-1,8758,"\n"],[1,8759,"4"],[1,9701,"对"],[-1,9719,"O"]],[2285,2285],[9719,9719]]],[1528166909878,[null,[[1,2285,"（"],[-1,2285,"中"],[1,3414,"\n"],[-1,3880,"\n"],[-1,3970,"\\"],[1,3973,"-"],[1,4021,"象"],[-1,4022,"象"],[1,4055,"\n"],[-1,4888,"\n"],[1,4905,"v"],[-1,4905,"和"],[1,5040,"\n"],[-1,5765,"\n"],[1,5949,"\n"],[-1,5983,"\n"],[-1,6244,"，"],[1,6247,"任"],[1,7002,"\n\n"],[-1,7002,"列表"],[1,7876,"成"],[-1,7876,"\n"],[1,8491,"\n\n"],[-1,8491,"对其"],[1,8511,"i"],[-1,8511,"d"],[1,8551,"\n"],[-1,8551,"r"],[1,8758,"\n"],[-1,8758,"4"],[-1,9701,"对"],[1,9720,"O"]],[9719,9719],[2285,2285]]],[1528166861821,["Re@Re.local",[[1,9880,"发现没有加入新的节点到"]],[9880,9880],[9891,9891]]],[1528166871273,["Re@Re.local",[[1,9880,"这两个节点"]],[9880,9880],[9885,9885]]],[1528166872406,["Re@Re.local",[[-1,9880,"这两个节点"]],[9885,9885],[9880,9880]]],[1528166877459,["Re@Re.local",[[1,9880,"接下来两个节点都没有"]],[9880,9880],[9890,9890]]],[1528166880600,["Re@Re.local",[[-1,9889,"有发现没有"]],[9894,9894],[9889,9889]]],[1528166884738,["Re@Re.local",[[1,9889,"有向树"]],[9889,9889],[9892,9892]]],[1528166889132,["Re@Re.local",[[-1,9892,"加入新的节点到"]],[9899,9899],[9892,9892]]],[1528166901020,["Re@Re.local",[[1,9892,"或者队列加入新的节点。图65"]],[9892,9892],[9906,9906]]],[1528166902120,["Re@Re.local",[[-1,9904,"65"]],[9906,9906],[9904,9904]]],[1528166902287,["Re@Re.local",[[1,9904,"5"]],[9904,9904],[9905,9905]]],[1528166969876,[null,[[-1,2285,"（"],[1,2286,"中"],[-1,3414,"\n"],[1,3881,"\n"],[1,3970,"\\"],[-1,3972,"-"],[-1,4021,"象"],[1,4023,"象"],[-1,4055,"\n"],[1,4889,"\n"],[-1,4905,"v"],[1,4906,"和"],[-1,5040,"\n"],[1,5766,"\n"],[-1,5949,"\n"],[1,5984,"\n"],[1,6244,"，"],[-1,6246,"任"],[-1,7002,"\n\n"],[1,7004,"列表"],[-1,7876,"成"],[1,7877,"\n"],[-1,8491,"\n\n"],[1,8493,"对其"],[-1,8511,"i"],[1,8512,"d"],[-1,8551,"\n"],[1,8552,"r"],[-1,8758,"\n"],[1,8759,"4"],[1,9701,"对"],[-1,9719,"O"]],[2285,2285],[9719,9719]]],[1528166969877,[null,[[1,2285,"（"],[-1,2285,"中"],[1,3414,"\n"],[-1,3880,"\n"],[-1,3970,"\\"],[1,3973,"-"],[1,4021,"象"],[-1,4022,"象"],[1,4055,"\n"],[-1,4888,"\n"],[1,4905,"v"],[-1,4905,"和"],[1,5040,"\n"],[-1,5765,"\n"],[1,5949,"\n"],[-1,5983,"\n"],[-1,6244,"，"],[1,6247,"任"],[1,7002,"\n\n"],[-1,7002,"列表"],[1,7876,"成"],[-1,7876,"\n"],[1,8491,"\n\n"],[-1,8491,"对其"],[1,8511,"i"],[-1,8511,"d"],[1,8551,"\n"],[-1,8551,"r"],[1,8758,"\n"],[-1,8758,"4"],[-1,9701,"对"],[1,9720,"O"]],[9719,9719],[2285,2285]]],[1528166922623,["Re@Re.local",[[1,9905,"展示的是在"]],[9905,9905],[9910,9910]]],[1528166925887,["Re@Re.local",[[-1,9909,"在"]],[9910,9910],[9909,9909]]],[1528166926743,["Re@Re.local",[[1,9909,"第"]],[9909,9909],[9910,9910]]],[1528166927023,["Re@Re.local",[[-1,9909,"第"]],[9910,9910],[9909,9909]]],[1528166944880,["Re@Re.local",[[1,9909,"对树的第二层所有顶点都探索完成了后的树和队列。"]],[9909,9909],[9932,9932]]],[1528166945187,["Re@Re.local",[[1,9934,"\n"]],[9932,9932],[9933,9933]]],[1528166945402,["Re@Re.local",[[1,9935,"\n"]],[9933,9933],[9934,9934]]],[1528166948880,["Re@Re.local",[[1,9934,"![../_images/bfs3.png](http://interactivepython.org/courselib/static/pythonds/_images/bfs3.png)"]],[9934,9934],[10029,10029]]],[1528166959205,["Re@Re.local",[[1,10031,"\n"]],[10029,10029],[10030,10030]]],[1528166959832,["Re@Re.local",[[1,10030,"![../_images/bfsDone.png](http://interactivepython.org/courselib/static/pythonds/_images/bfsDone.png)"]],[10030,10030],[10131,10131]]],[1528166964165,["Re@Re.local",[[1,10133,"\n"]],[10131,10131],[10132,10132]]],[1528166964783,["Re@Re.local",[[1,10134,"\n"]],[10132,10132],[10133,10133]]],[1528166968937,["Re@Re.local",[[1,10133,"读者"]],[10133,10133],[10135,10135]]],[1528167029922,[null,[[-1,2285,"（"],[1,2286,"中"],[-1,3414,"\n"],[1,3881,"\n"],[1,3970,"\\"],[-1,3972,"-"],[-1,4021,"象"],[1,4023,"象"],[-1,4055,"\n"],[1,4889,"\n"],[-1,4905,"v"],[1,4906,"和"],[-1,5040,"\n"],[1,5766,"\n"],[-1,5949,"\n"],[1,5984,"\n"],[1,6244,"，"],[-1,6246,"任"],[-1,7002,"\n\n"],[1,7004,"列表"],[-1,7876,"成"],[1,7877,"\n"],[-1,8491,"\n\n"],[1,8493,"对其"],[-1,8511,"i"],[1,8512,"d"],[-1,8551,"\n"],[1,8552,"r"],[-1,8758,"\n"],[1,8759,"4"],[1,9701,"对"],[-1,9719,"O"]],[2285,2285],[9719,9719]]],[1528167029922,[null,[[1,2285,"（"],[-1,2285,"中"],[1,3414,"\n"],[-1,3880,"\n"],[-1,3970,"\\"],[1,3973,"-"],[1,4021,"象"],[-1,4022,"象"],[1,4055,"\n"],[-1,4888,"\n"],[1,4905,"v"],[-1,4905,"和"],[1,5040,"\n"],[-1,5765,"\n"],[1,5949,"\n"],[-1,5983,"\n"],[-1,6244,"，"],[1,6247,"任"],[1,7002,"\n\n"],[-1,7002,"列表"],[1,7876,"成"],[-1,7876,"\n"],[1,8491,"\n\n"],[-1,8491,"对其"],[1,8511,"i"],[-1,8511,"d"],[1,8551,"\n"],[-1,8551,"r"],[1,8758,"\n"],[-1,8758,"4"],[-1,9701,"对"],[1,9720,"O"]],[9719,9719],[2285,2285]]],[1528166980537,["Re@Re.local",[[1,10135,"应该自己俄动手"]],[10135,10135],[10142,10142]]],[1528166981489,["Re@Re.local",[[-1,10139,"俄动手"]],[10142,10142],[10139,10139]]],[1528167005986,["Re@Re.local",[[1,10139,"动手过一遍该算法，以对该算法获得更好的理解。图6给出="]],[10139,10139],[10166,10166]]],[1528167006755,["Re@Re.local",[[-1,10163,"给出="]],[10166,10166],[10163,10163]]],[1528167013587,["Re@Re.local",[[1,10163,"是宽度优先搜索树"]],[10163,10163],[10171,10171]]],[1528167018708,["Re@Re.local",[[1,10164,"在"]],[10164,10164],[10165,10165]]],[1528167018850,["Re@Re.local",[[-1,10164,"在"]],[10165,10165],[10164,10164]]],[1528167026319,["Re@Re.local",[[1,10164,"图3中已完成所有节点"]],[10164,10164],[10174,10174]]],[1528167026817,["Re@Re.local",[[-1,10172,"节点"]],[10174,10174],[10172,10172]]],[1528167029729,["Re@Re.local",[[1,10172,"顶点"]],[10172,10172],[10174,10174]]],[1528167089919,[null,[[-1,2285,"（"],[1,2286,"中"],[-1,3414,"\n"],[1,3881,"\n"],[1,3970,"\\"],[-1,3972,"-"],[-1,4021,"象"],[1,4023,"象"],[-1,4055,"\n"],[1,4889,"\n"],[-1,4905,"v"],[1,4906,"和"],[-1,5040,"\n"],[1,5766,"\n"],[-1,5949,"\n"],[1,5984,"\n"],[1,6244,"，"],[-1,6246,"任"],[-1,7002,"\n\n"],[1,7004,"列表"],[-1,7876,"成"],[1,7877,"\n"],[-1,8491,"\n\n"],[1,8493,"对其"],[-1,8511,"i"],[1,8512,"d"],[-1,8551,"\n"],[1,8552,"r"],[-1,8758,"\n"],[1,8759,"4"],[1,9701,"对"],[-1,9719,"O"]],[2285,2285],[9719,9719]]],[1528167089919,[null,[[1,2285,"（"],[-1,2285,"中"],[1,3414,"\n"],[-1,3880,"\n"],[-1,3970,"\\"],[1,3973,"-"],[1,4021,"象"],[-1,4022,"象"],[1,4055,"\n"],[-1,4888,"\n"],[1,4905,"v"],[-1,4905,"和"],[1,5040,"\n"],[-1,5765,"\n"],[1,5949,"\n"],[-1,5983,"\n"],[-1,6244,"，"],[1,6247,"任"],[1,7002,"\n\n"],[-1,7002,"列表"],[1,7876,"成"],[-1,7876,"\n"],[1,8491,"\n\n"],[-1,8491,"对其"],[1,8511,"i"],[-1,8511,"d"],[1,8551,"\n"],[-1,8551,"r"],[1,8758,"\n"],[-1,8758,"4"],[-1,9701,"对"],[1,9720,"O"]],[9719,9719],[2285,2285]]],[1528167038094,["Re@Re.local",[[1,10175,"搜索后的最红"]],[10175,10175],[10181,10181]]],[1528167038701,["Re@Re.local",[[-1,10179,"最红"]],[10181,10181],[10179,10179]]],[1528167039854,["Re@Re.local",[[1,10179,"最终"]],[10179,10179],[10181,10181]]],[1528167059939,["Re@Re.local",[[1,10188,"。神奇的是，宽度优先搜索解=接发是"]],[10188,10188],[10205,10205]]],[1528167071509,["Re@Re.local",[[-1,10189,"神奇的是，宽度优先搜索解=接发是"]],[10205,10205],[10189,10189]]],[1528167149925,[null,[[-1,2285,"（"],[1,2286,"中"],[-1,3414,"\n"],[1,3881,"\n"],[1,3970,"\\"],[-1,3972,"-"],[-1,4021,"象"],[1,4023,"象"],[-1,4055,"\n"],[1,4889,"\n"],[-1,4905,"v"],[1,4906,"和"],[-1,5040,"\n"],[1,5766,"\n"],[-1,5949,"\n"],[1,5984,"\n"],[1,6244,"，"],[-1,6246,"任"],[-1,7002,"\n\n"],[1,7004,"列表"],[-1,7876,"成"],[1,7877,"\n"],[-1,8491,"\n\n"],[1,8493,"对其"],[-1,8511,"i"],[1,8512,"d"],[-1,8551,"\n"],[1,8552,"r"],[-1,8758,"\n"],[1,8759,"4"],[1,9701,"对"],[-1,9719,"O"],[-1,10174,"宽"],[1,10175,"的"],[1,10181,"宽"],[-1,10187,"\n"],[1,10190,"\n"]],[2285,2285],[10191,10191]]],[1528167149925,[null,[[1,2285,"（"],[-1,2285,"中"],[1,3414,"\n"],[-1,3880,"\n"],[-1,3970,"\\"],[1,3973,"-"],[1,4021,"象"],[-1,4022,"象"],[1,4055,"\n"],[-1,4888,"\n"],[1,4905,"v"],[-1,4905,"和"],[1,5040,"\n"],[-1,5765,"\n"],[1,5949,"\n"],[-1,5983,"\n"],[-1,6244,"，"],[1,6247,"任"],[1,7002,"\n\n"],[-1,7002,"列表"],[1,7876,"成"],[-1,7876,"\n"],[1,8491,"\n\n"],[-1,8491,"对其"],[1,8511,"i"],[-1,8511,"d"],[1,8551,"\n"],[-1,8551,"r"],[1,8758,"\n"],[-1,8758,"4"],[-1,9701,"对"],[1,9720,"O"],[1,10174,"宽"],[-1,10174,"的"],[-1,10181,"宽"],[1,10188,"\n"],[-1,10190,"\n"]],[10191,10191],[2285,2285]]],[1528167095963,["Re@Re.local",[[1,10189,"s"]],[10189,10189],[10190,10190]]],[1528167096269,["Re@Re.local",[[-1,10189,"s"]],[10190,10190],[10189,10189]]],[1528167098275,["Re@Re.local",[[1,10189,"神钦"]],[10189,10189],[10191,10191]]],[1528167098553,["Re@Re.local",[[-1,10189,"神钦"]],[10191,10191],[10189,10189]]],[1528167100980,["Re@Re.local",[[1,10189,"申请"]],[10189,10189],[10191,10191]]],[1528167101255,["Re@Re.local",[[-1,10189,"申请"]],[10191,10191],[10189,10189]]],[1528167109458,["Re@Re.local",[[1,10189,"宽度优先搜索的惊人之处不经"]],[10189,10189],[10202,10202]]],[1528167110828,["Re@Re.local",[[-1,10200,"不经"]],[10202,10202],[10200,10200]]],[1528167124661,["Re@Re.local",[[1,10200,"在于，它不仅解决了开的的"]],[10200,10200],[10212,10212]]],[1528167125159,["Re@Re.local",[[-1,10209,"开的的"]],[10212,10212],[10209,10209]]],[1528167127674,["Re@Re.local",[[1,10209,"开始的FOLL_"]],[10209,10209],[10217,10217]]],[1528167128304,["Re@Re.local",[[-1,10214,"LL_"]],[10217,10217],[10214,10214]]],[1528167129235,["Re@Re.local",[[1,10214,"OL_"]],[10214,10214],[10217,10217]]],[1528167129849,["Re@Re.local",[[-1,10216,"_"]],[10217,10217],[10216,10216]]],[1528167146299,["Re@Re.local",[[1,10216,"-SAGE问题，也解决了许多其它问题。从"]],[10216,10216],[10236,10236]]],[1528167148876,["Re@Re.local",[[-1,10234,"。从"]],[10236,10236],[10234,10234]]],[1528167210773,[null,[[-1,2285,"（"],[1,2286,"中"],[-1,3414,"\n"],[1,3881,"\n"],[1,3970,"\\"],[-1,3972,"-"],[-1,4021,"象"],[1,4023,"象"],[-1,4055,"\n"],[1,4889,"\n"],[-1,4905,"v"],[1,4906,"和"],[-1,5040,"\n"],[1,5766,"\n"],[-1,5949,"\n"],[1,5984,"\n"],[1,6244,"，"],[-1,6246,"任"],[-1,7002,"\n\n"],[1,7004,"列表"],[-1,7876,"成"],[1,7877,"\n"],[-1,8491,"\n\n"],[1,8493,"对其"],[-1,8511,"i"],[1,8512,"d"],[-1,8551,"\n"],[1,8552,"r"],[-1,8758,"\n"],[1,8759,"4"],[1,9701,"对"],[-1,9719,"O"],[-1,10174,"宽"],[1,10175,"的"],[1,10181,"宽"],[-1,10187,"\n"],[1,10235,"\n"]],[2285,2285],[10236,10236]]],[1528167210773,[null,[[1,2285,"（"],[-1,2285,"中"],[1,3414,"\n"],[-1,3880,"\n"],[-1,3970,"\\"],[1,3973,"-"],[1,4021,"象"],[-1,4022,"象"],[1,4055,"\n"],[-1,4888,"\n"],[1,4905,"v"],[-1,4905,"和"],[1,5040,"\n"],[-1,5765,"\n"],[1,5949,"\n"],[-1,5983,"\n"],[-1,6244,"，"],[1,6247,"任"],[1,7002,"\n\n"],[-1,7002,"列表"],[1,7876,"成"],[-1,7876,"\n"],[1,8491,"\n\n"],[-1,8491,"对其"],[1,8511,"i"],[-1,8511,"d"],[1,8551,"\n"],[-1,8551,"r"],[1,8758,"\n"],[-1,8758,"4"],[-1,9701,"对"],[1,9720,"O"],[1,10174,"宽"],[-1,10174,"的"],[-1,10181,"宽"],[1,10188,"\n"],[-1,10235,"\n"]],[10236,10236],[2285,2285]]],[1528167153117,["Re@Re.local",[[1,10225,"顺便"]],[10225,10225],[10227,10227]]],[1528167155680,["Re@Re.local",[[1,10236,"。"]],[10236,10236],[10237,10237]]],[1528167158986,["Re@Re.local",[[-1,10209,"开始"]],[10211,10211],[10209,10209]]],[1528167160227,["Re@Re.local",[[1,10209,"初始"]],[10209,10209],[10211,10211]]],[1528167202269,["Re@Re.local",[[1,10237,"从宽度优先搜索树中的任一节点出发，沿着父节点的箭头返回到根节点"]],[10237,10237],[10268,10268]]],[1528167270775,[null,[[-1,2285,"（"],[1,2286,"中"],[-1,3414,"\n"],[1,3881,"\n"],[1,3970,"\\"],[-1,3972,"-"],[-1,4021,"象"],[1,4023,"象"],[-1,4055,"\n"],[1,4889,"\n"],[-1,4905,"v"],[1,4906,"和"],[-1,5040,"\n"],[1,5766,"\n"],[-1,5949,"\n"],[1,5984,"\n"],[1,6244,"，"],[-1,6246,"任"],[-1,7002,"\n\n"],[1,7004,"列表"],[-1,7876,"成"],[1,7877,"\n"],[-1,8491,"\n\n"],[1,8493,"对其"],[-1,8511,"i"],[1,8512,"d"],[-1,8551,"\n"],[1,8552,"r"],[-1,8758,"\n"],[1,8759,"4"],[1,9701,"对"],[-1,9719,"O"],[-1,10174,"宽"],[1,10175,"的"],[1,10181,"宽"],[-1,10187,"\n"],[1,10269,"\n"]],[2285,2285],[10270,10270]]],[1528167270775,[null,[[1,2285,"（"],[-1,2285,"中"],[1,3414,"\n"],[-1,3880,"\n"],[-1,3970,"\\"],[1,3973,"-"],[1,4021,"象"],[-1,4022,"象"],[1,4055,"\n"],[-1,4888,"\n"],[1,4905,"v"],[-1,4905,"和"],[1,5040,"\n"],[-1,5765,"\n"],[1,5949,"\n"],[-1,5983,"\n"],[-1,6244,"，"],[1,6247,"任"],[1,7002,"\n\n"],[-1,7002,"列表"],[1,7876,"成"],[-1,7876,"\n"],[1,8491,"\n\n"],[-1,8491,"对其"],[1,8511,"i"],[-1,8511,"d"],[1,8551,"\n"],[-1,8551,"r"],[1,8758,"\n"],[-1,8758,"4"],[-1,9701,"对"],[1,9720,"O"],[1,10174,"宽"],[-1,10174,"的"],[-1,10181,"宽"],[1,10188,"\n"],[-1,10269,"\n"]],[10270,10270],[2285,2285]]],[1528167226461,["Re@Re.local",[[1,10268,"，便可以得到该单词变为FOOL的最短词梯，"]],[10268,10268],[10289,10289]]],[1528167226958,["Re@Re.local",[[-1,10288,"，"]],[10289,10289],[10288,10288]]],[1528167232545,["Re@Re.local",[[1,10288,"。代码3中"]],[10288,10288],[10293,10293]]],[1528167233146,["Re@Re.local",[[-1,10292,"中"]],[10293,10293],[10292,10292]]],[1528167237438,["Re@Re.local",[[1,10292,"可以用来"]],[10292,10292],[10296,10296]]],[1528167241034,["Re@Re.local",[[-1,10292,"可以用来"]],[10296,10296],[10292,10292]]],[1528167257905,["Re@Re.local",[[1,10292,"沿着父节点链打印除了词梯"]],[10292,10292],[10304,10304]]],[1528167258568,["Re@Re.local",[[-1,10300,"除了词梯"]],[10304,10304],[10300,10300]]],[1528167261954,["Re@Re.local",[[1,10300,"出了词梯："]],[10300,10300],[10305,10305]]],[1528167262801,["Re@Re.local",[[1,10307,"\n"]],[10305,10305],[10306,10306]]],[1528167263276,["Re@Re.local",[[1,10308,"\n"]],[10306,10306],[10307,10307]]],[1528167263981,["Re@Re.local",[[1,10307,"```"]],[10307,10307],[10310,10310]]],[1528167264807,["Re@Re.local",[[-1,10307,"```"]],[10310,10310],[10307,10307]]],[1528167265207,["Re@Re.local",[[-1,10308,"\n"]],[10307,10307],[10306,10306]]],[1528167268016,["Re@Re.local",[[1,10306,"**代码3**"]],[10306,10306],[10313,10313]]],[1528167268233,["Re@Re.local",[[1,10315,"\n"]],[10313,10313],[10314,10314]]],[1528167270074,["Re@Re.local",[[1,10314,"```Python"]],[10314,10314],[10323,10323]]],[1528167330814,[null,[[-1,2285,"（"],[1,2286,"中"],[-1,3414,"\n"],[1,3881,"\n"],[1,3970,"\\"],[-1,3972,"-"],[-1,4021,"象"],[1,4023,"象"],[-1,4055,"\n"],[1,4889,"\n"],[-1,4905,"v"],[1,4906,"和"],[-1,5040,"\n"],[1,5766,"\n"],[-1,5949,"\n"],[1,5984,"\n"],[1,6244,"，"],[-1,6246,"任"],[-1,7002,"\n\n"],[1,7004,"列表"],[-1,7876,"成"],[1,7877,"\n"],[-1,8491,"\n\n"],[1,8493,"对其"],[-1,8511,"i"],[1,8512,"d"],[-1,8551,"\n"],[1,8552,"r"],[-1,8758,"\n"],[1,8759,"4"],[1,9701,"对"],[-1,9719,"O"],[-1,10174,"宽"],[1,10175,"的"],[1,10181,"宽"],[-1,10187,"\n"]],[2285,2285],[10187,10187]]],[1528167330814,[null,[[1,2285,"（"],[-1,2285,"中"],[1,3414,"\n"],[-1,3880,"\n"],[-1,3970,"\\"],[1,3973,"-"],[1,4021,"象"],[-1,4022,"象"],[1,4055,"\n"],[-1,4888,"\n"],[1,4905,"v"],[-1,4905,"和"],[1,5040,"\n"],[-1,5765,"\n"],[1,5949,"\n"],[-1,5983,"\n"],[-1,6244,"，"],[1,6247,"任"],[1,7002,"\n\n"],[-1,7002,"列表"],[1,7876,"成"],[-1,7876,"\n"],[1,8491,"\n\n"],[-1,8491,"对其"],[1,8511,"i"],[-1,8511,"d"],[1,8551,"\n"],[-1,8551,"r"],[1,8758,"\n"],[-1,8758,"4"],[-1,9701,"对"],[1,9720,"O"],[1,10174,"宽"],[-1,10174,"的"],[-1,10181,"宽"],[1,10188,"\n"]],[10187,10187],[2285,2285]]],[1528167271053,["Re@Re.local",[[1,10325,"\n"]],[10323,10323],[10324,10324]]],[1528167275010,["Re@Re.local",[[1,10324,"def traverse(y):\n    x = y\n    while (x.getPred()):\n        print(x.getId())\n        x = x.getPred()\n    print(x.getId())\n\ntraverse(g.getVertex('sage'))"]],[10324,10324],[10476,10476]]],[1528167275373,["Re@Re.local",[[1,10478,"\n"]],[10476,10476],[10477,10477]]],[1528167275972,["Re@Re.local",[[1,10477,"```"]],[10477,10477],[10480,10480]]],[1528167276180,["Re@Re.local",[[1,10482,"\n"]],[10480,10480],[10481,10481]]],[1528167311000,["Re@Re.local",[[1,10481,"## 7.10 kuan"]],[10481,10481],[10493,10493]]],[1528167311857,["Re@Re.local",[[-1,10489,"kuan"]],[10493,10493],[10489,10489]]],[1528167319346,["Re@Re.local",[[1,10489,"宽度优先搜索分析 ##"]],[10489,10489],[10500,10500]]],[1528167319519,["Re@Re.local",[[1,10502,"\n"]],[10500,10500],[10501,10501]]],[1528167320151,["Re@Re.local",[[1,10503,"\n"]],[10501,10501],[10502,10502]]],[1528168163640,[null,[[-1,2285,"（"],[1,2286,"中"],[-1,3414,"\n"],[1,3881,"\n"],[1,3970,"\\"],[-1,3972,"-"],[-1,4021,"象"],[1,4023,"象"],[-1,4055,"\n"],[1,4889,"\n"],[-1,4905,"v"],[1,4906,"和"],[-1,5040,"\n"],[1,5766,"\n"],[-1,5949,"\n"],[1,5984,"\n"],[1,6244,"，"],[-1,6246,"任"],[-1,7002,"\n\n"],[1,7004,"列表"],[-1,7876,"成"],[1,7877,"\n"],[-1,8491,"\n\n"],[1,8493,"对其"],[-1,8511,"i"],[1,8512,"d"],[-1,8551,"\n"],[1,8552,"r"],[-1,8758,"\n"],[1,8759,"4"],[1,9701,"对"],[-1,9719,"O"],[-1,10174,"宽"],[1,10175,"的"],[1,10181,"宽"],[-1,10187,"\n"]],[2285,2285],[10187,10187]]],[1528168163640,[null,[[1,2285,"（"],[-1,2285,"中"],[1,3414,"\n"],[-1,3880,"\n"],[-1,3970,"\\"],[1,3973,"-"],[1,4021,"象"],[-1,4022,"象"],[1,4055,"\n"],[-1,4888,"\n"],[1,4905,"v"],[-1,4905,"和"],[1,5040,"\n"],[-1,5765,"\n"],[1,5949,"\n"],[-1,5983,"\n"],[-1,6244,"，"],[1,6247,"任"],[1,7002,"\n\n"],[-1,7002,"列表"],[1,7876,"成"],[-1,7876,"\n"],[1,8491,"\n\n"],[-1,8491,"对其"],[1,8511,"i"],[-1,8511,"d"],[1,8551,"\n"],[-1,8551,"r"],[1,8758,"\n"],[-1,8758,"4"],[-1,9701,"对"],[1,9720,"O"],[1,10174,"宽"],[-1,10174,"的"],[-1,10181,"宽"],[1,10188,"\n"]],[10187,10187],[2285,2285]]],[1528168162142,["Re@Re.local",[[-1,6146,"）"]],[6147,6147],[6146,6146]]],[1528168886719,[null,[[-1,2285,"（"],[1,2286,"中"],[-1,3414,"\n"],[1,3881,"\n"],[1,3970,"\\"],[-1,3972,"-"],[-1,4021,"象"],[1,4023,"象"],[-1,4055,"\n"],[1,4889,"\n"],[-1,4905,"v"],[1,4906,"和"],[-1,5040,"\n"],[1,5766,"\n"],[-1,5949,"\n"],[1,5984,"\n"],[1,6243,"，"],[-1,6245,"任"],[-1,7001,"\n\n"],[1,7003,"列表"],[-1,7875,"成"],[1,7876,"\n"],[-1,8490,"\n\n"],[1,8492,"对其"],[-1,8510,"i"],[1,8511,"d"],[-1,8550,"\n"],[1,8551,"r"],[-1,8757,"\n"],[1,8758,"4"],[1,9700,"对"],[-1,9718,"O"],[-1,10173,"宽"],[1,10174,"的"],[1,10180,"宽"],[-1,10186,"\n"]],[2285,2285],[10186,10186]]],[1528168886720,[null,[[1,2285,"（"],[-1,2285,"中"],[1,3414,"\n"],[-1,3880,"\n"],[-1,3970,"\\"],[1,3973,"-"],[1,4021,"象"],[-1,4022,"象"],[1,4055,"\n"],[-1,4888,"\n"],[1,4905,"v"],[-1,4905,"和"],[1,5040,"\n"],[-1,5765,"\n"],[1,5949,"\n"],[-1,5983,"\n"],[-1,6243,"，"],[1,6246,"任"],[1,7001,"\n\n"],[-1,7001,"列表"],[1,7875,"成"],[-1,7875,"\n"],[1,8490,"\n\n"],[-1,8490,"对其"],[1,8510,"i"],[-1,8510,"d"],[1,8550,"\n"],[-1,8550,"r"],[1,8757,"\n"],[-1,8757,"4"],[-1,9700,"对"],[1,9719,"O"],[1,10173,"宽"],[-1,10173,"的"],[-1,10180,"宽"],[1,10187,"\n"]],[10186,10186],[2285,2285]]],[1528168844723,["Re@Re.local",[[-1,10502,"\n"],[1,10503,"za"]],[10502,10502],[10504,10504]]],[1528168845287,["Re@Re.local",[[-1,10502,"za"]],[10504,10504],[10502,10502]]],[1528168846257,["Re@Re.local",[[-1,10501,"\n"],[1,10502,"z"]],[10502,10502],[10501,10502]]],[1528168846491,["Re@Re.local",[[1,10502,"a"]],[10501,10502],[10501,10503]]],[1528168846663,["Re@Re.local",[[1,10503,"i"]],[10501,10503],[10501,10504]]],[1528168858897,["Re@Re.local",[[-1,10501,"zai"],[1,10504,"在继续分析图算法前，先分析下"]],[10501,10504],[10515,10515]]],[1528168861694,["Re@Re.local",[[-1,10506,"图算法前，先分析下"]],[10515,10515],[10506,10506]]],[1528168862592,["Re@Re.local",[[1,10506,"其它"]],[10506,10506],[10508,10508]]],[1528168863709,["Re@Re.local",[[-1,10504,"分析其它"]],[10508,10508],[10504,10504]]],[1528168881139,["Re@Re.local",[[1,10504,"研究其它图算法前，先来分析以下宽度优先搜索算法的运行性能。"]],[10504,10504],[10533,10533]]],[1528168946729,[null,[[-1,2285,"（"],[1,2286,"中"],[-1,3414,"\n"],[1,3881,"\n"],[1,3970,"\\"],[-1,3972,"-"],[-1,4021,"象"],[1,4023,"象"],[-1,4055,"\n"],[1,4889,"\n"],[-1,4905,"v"],[1,4906,"和"],[-1,5040,"\n"],[1,5766,"\n"],[-1,5949,"\n"],[1,5984,"\n"],[1,6243,"，"],[-1,6245,"任"],[-1,7001,"\n\n"],[1,7003,"列表"],[-1,7875,"成"],[1,7876,"\n"],[-1,8490,"\n\n"],[1,8492,"对其"],[-1,8510,"i"],[1,8511,"d"],[-1,8550,"\n"],[1,8551,"r"],[-1,8757,"\n"],[1,8758,"4"],[1,9700,"对"],[-1,9718,"O"],[-1,10173,"宽"],[1,10174,"的"],[1,10180,"宽"],[-1,10186,"\n"]],[2285,2285],[10186,10186]]],[1528168946729,[null,[[1,2285,"（"],[-1,2285,"中"],[1,3414,"\n"],[-1,3880,"\n"],[-1,3970,"\\"],[1,3973,"-"],[1,4021,"象"],[-1,4022,"象"],[1,4055,"\n"],[-1,4888,"\n"],[1,4905,"v"],[-1,4905,"和"],[1,5040,"\n"],[-1,5765,"\n"],[1,5949,"\n"],[-1,5983,"\n"],[-1,6243,"，"],[1,6246,"任"],[1,7001,"\n\n"],[-1,7001,"列表"],[1,7875,"成"],[-1,7875,"\n"],[1,8490,"\n\n"],[-1,8490,"对其"],[1,8510,"i"],[-1,8510,"d"],[1,8550,"\n"],[-1,8550,"r"],[1,8757,"\n"],[-1,8757,"4"],[-1,9700,"对"],[1,9719,"O"],[1,10173,"宽"],[-1,10173,"的"],[-1,10180,"宽"],[1,10187,"\n"]],[10186,10186],[2285,2285]]],[1528168908465,["Re@Re.local",[[1,10533,"首先应当观察到的是，整个循环是以"]],[10533,10533],[10549,10549]]],[1528168925962,["Re@Re.local",[[-1,10543,"整个循环是以"]],[10549,10549],[10543,10543]]],[1528168939702,["Re@Re.local",[[1,10543,"图|V|中的每个顶点在循环中最多被处理一次。"]],[10543,10543],[10565,10565]]],[1528169006798,[null,[[-1,2285,"（"],[1,2286,"中"],[-1,3414,"\n"],[1,3881,"\n"],[1,3970,"\\"],[-1,3972,"-"],[-1,4021,"象"],[1,4023,"象"],[-1,4055,"\n"],[1,4889,"\n"],[-1,4905,"v"],[1,4906,"和"],[-1,5040,"\n"],[1,5766,"\n"],[-1,5949,"\n"],[1,5984,"\n"],[1,6243,"，"],[-1,6245,"任"],[-1,7001,"\n\n"],[1,7003,"列表"],[-1,7875,"成"],[1,7876,"\n"],[-1,8490,"\n\n"],[1,8492,"对其"],[-1,8510,"i"],[1,8511,"d"],[-1,8550,"\n"],[1,8551,"r"],[-1,8757,"\n"],[1,8758,"4"],[1,9700,"对"],[-1,9718,"O"],[-1,10173,"宽"],[1,10174,"的"],[1,10180,"宽"],[-1,10186,"\n"]],[2285,2285],[10186,10186]]],[1528169006799,[null,[[1,2285,"（"],[-1,2285,"中"],[1,3414,"\n"],[-1,3880,"\n"],[-1,3970,"\\"],[1,3973,"-"],[1,4021,"象"],[-1,4022,"象"],[1,4055,"\n"],[-1,4888,"\n"],[1,4905,"v"],[-1,4905,"和"],[1,5040,"\n"],[-1,5765,"\n"],[1,5949,"\n"],[-1,5983,"\n"],[-1,6243,"，"],[1,6246,"任"],[1,7001,"\n\n"],[-1,7001,"列表"],[1,7875,"成"],[-1,7875,"\n"],[1,8490,"\n\n"],[-1,8490,"对其"],[1,8510,"i"],[-1,8510,"d"],[1,8550,"\n"],[-1,8550,"r"],[1,8757,"\n"],[-1,8757,"4"],[-1,9700,"对"],[1,9719,"O"],[1,10173,"宽"],[-1,10173,"的"],[-1,10180,"宽"],[1,10187,"\n"]],[10186,10186],[2285,2285]]],[1528168962547,["Re@Re.local",[[-1,10564,"。"]],[10565,10565],[10564,10564]]],[1528168969420,["Re@Re.local",[[1,10564,"，因为在监测"]],[10564,10564],[10570,10570]]],[1528168969828,["Re@Re.local",[[-1,10568,"监测"]],[10570,10570],[10568,10568]]],[1528169004714,["Re@Re.local",[[1,10568,"进行监测和加入队列前，该顶点必须是白色的。因此"]],[10568,10568],[10591,10591]]],[1528169066694,[null,[[-1,2285,"（"],[1,2286,"中"],[-1,3414,"\n"],[1,3881,"\n"],[1,3970,"\\"],[-1,3972,"-"],[-1,4021,"象"],[1,4023,"象"],[-1,4055,"\n"],[1,4889,"\n"],[-1,4905,"v"],[1,4906,"和"],[-1,5040,"\n"],[1,5766,"\n"],[-1,5949,"\n"],[1,5984,"\n"],[1,6243,"，"],[-1,6245,"任"],[-1,7001,"\n\n"],[1,7003,"列表"],[-1,7875,"成"],[1,7876,"\n"],[-1,8490,"\n\n"],[1,8492,"对其"],[-1,8510,"i"],[1,8511,"d"],[-1,8550,"\n"],[1,8551,"r"],[-1,8757,"\n"],[1,8758,"4"],[1,9700,"对"],[-1,9718,"O"],[-1,10173,"宽"],[1,10174,"的"],[1,10180,"宽"],[-1,10186,"\n"]],[2285,2285],[10186,10186]]],[1528169066695,[null,[[1,2285,"（"],[-1,2285,"中"],[1,3414,"\n"],[-1,3880,"\n"],[-1,3970,"\\"],[1,3973,"-"],[1,4021,"象"],[-1,4022,"象"],[1,4055,"\n"],[-1,4888,"\n"],[1,4905,"v"],[-1,4905,"和"],[1,5040,"\n"],[-1,5765,"\n"],[1,5949,"\n"],[-1,5983,"\n"],[-1,6243,"，"],[1,6246,"任"],[1,7001,"\n\n"],[-1,7001,"列表"],[1,7875,"成"],[-1,7875,"\n"],[1,8490,"\n\n"],[-1,8490,"对其"],[1,8510,"i"],[-1,8510,"d"],[1,8550,"\n"],[-1,8550,"r"],[1,8757,"\n"],[-1,8757,"4"],[-1,9700,"对"],[1,9719,"O"],[1,10173,"宽"],[-1,10173,"的"],[-1,10180,"宽"],[1,10187,"\n"]],[10186,10186],[2285,2285]]],[1528169008936,["Re@Re.local",[[1,10591,"整个循环的"]],[10591,10591],[10596,10596]]],[1528169010728,["Re@Re.local",[[-1,10595,"的"]],[10596,10596],[10595,10595]]],[1528169011875,["Re@Re.local",[[1,10595,"是o"]],[10595,10595],[10597,10597]]],[1528169012522,["Re@Re.local",[[-1,10596,"o"]],[10597,10597],[10596,10596]]],[1528169012902,["Re@Re.local",[[1,10596,"I"]],[10596,10596],[10597,10597]]],[1528169013347,["Re@Re.local",[[-1,10596,"I"]],[10597,10597],[10596,10596]]],[1528169015998,["Re@Re.local",[[1,10596,"O(V)的，"]],[10596,10596],[10602,10602]]],[1528169019027,["Re@Re.local",[[-1,10595,"是O(V)的，"]],[10602,10602],[10595,10595]]],[1528169025481,["Re@Re.local",[[1,10595,"为O(V)。该"]],[10595,10595],[10602,10602]]],[1528169025917,["Re@Re.local",[[-1,10601,"该"]],[10602,10602],[10601,10601]]],[1528169035029,["Re@Re.local",[[1,10601,"该for循环，嵌套"]],[10601,10601],[10610,10610]]],[1528169037040,["Re@Re.local",[[-1,10601,"该for循环，嵌套"]],[10610,10610],[10601,10601]]],[1528169045599,["Re@Re.local",[[1,10601,"嵌套在while中的for循环也"]],[10601,10601],[10617,10617]]],[1528169046209,["Re@Re.local",[[-1,10616,"也"]],[10617,10617],[10616,10616]]],[1528169055155,["Re@Re.local",[[1,10616,"对图中的每条边最多执行1词。"]],[10616,10616],[10630,10630]]],[1528169055964,["Re@Re.local",[[-1,10628,"词。"]],[10630,10630],[10628,10628]]],[1528169057074,["Re@Re.local",[[1,10628,"次。"]],[10628,10628],[10630,10630]]],[1528169058460,["Re@Re.local",[[-1,10629,"。"]],[10630,10630],[10629,10629]]],[1528169061213,["Re@Re.local",[[1,10629,"，|E|。"]],[10629,10629],[10634,10634]]],[1528169062985,["Re@Re.local",[[-1,10633,"。"]],[10634,10634],[10633,10633]]],[1528169065178,["Re@Re.local",[[1,10633,"，因此"]],[10633,10633],[10636,10636]]],[1528169126825,[null,[[-1,2285,"（"],[1,2286,"中"],[-1,3414,"\n"],[1,3881,"\n"],[1,3970,"\\"],[-1,3972,"-"],[-1,4021,"象"],[1,4023,"象"],[-1,4055,"\n"],[1,4889,"\n"],[-1,4905,"v"],[1,4906,"和"],[-1,5040,"\n"],[1,5766,"\n"],[-1,5949,"\n"],[1,5984,"\n"],[1,6243,"，"],[-1,6245,"任"],[-1,7001,"\n\n"],[1,7003,"列表"],[-1,7875,"成"],[1,7876,"\n"],[-1,8490,"\n\n"],[1,8492,"对其"],[-1,8510,"i"],[1,8511,"d"],[-1,8550,"\n"],[1,8551,"r"],[-1,8757,"\n"],[1,8758,"4"],[1,9700,"对"],[-1,9718,"O"],[-1,10173,"宽"],[1,10174,"的"],[1,10180,"宽"],[-1,10186,"\n"]],[2285,2285],[10186,10186]]],[1528169126826,[null,[[1,2285,"（"],[-1,2285,"中"],[1,3414,"\n"],[-1,3880,"\n"],[-1,3970,"\\"],[1,3973,"-"],[1,4021,"象"],[-1,4022,"象"],[1,4055,"\n"],[-1,4888,"\n"],[1,4905,"v"],[-1,4905,"和"],[1,5040,"\n"],[-1,5765,"\n"],[1,5949,"\n"],[-1,5983,"\n"],[-1,6243,"，"],[1,6246,"任"],[1,7001,"\n\n"],[-1,7001,"列表"],[1,7875,"成"],[-1,7875,"\n"],[1,8490,"\n\n"],[-1,8490,"对其"],[1,8510,"i"],[-1,8510,"d"],[1,8550,"\n"],[-1,8550,"r"],[1,8757,"\n"],[-1,8757,"4"],[-1,9700,"对"],[1,9719,"O"],[1,10173,"宽"],[-1,10173,"的"],[-1,10180,"宽"],[1,10187,"\n"]],[10186,10186],[2285,2285]]],[1528169087935,["Re@Re.local",[[1,10636,"每个顶点最多出队1次并且值"]],[10636,10636],[10649,10649]]],[1528169088435,["Re@Re.local",[[-1,10648,"值"]],[10649,10649],[10648,10648]]],[1528169095844,["Re@Re.local",[[1,10648,"只在节点u出队时才对"]],[10648,10648],[10658,10658]]],[1528169097231,["Re@Re.local",[[-1,10657,"对"]],[10658,10658],[10657,10657]]],[1528169101384,["Re@Re.local",[[1,10657,"检查u大"]],[10657,10657],[10661,10661]]],[1528169103480,["Re@Re.local",[[-1,10657,"检查u大"]],[10661,10661],[10657,10657]]],[1528169104159,["Re@Re.local",[[1,10657,"jianch"]],[10657,10657],[10663,10663]]],[1528169105462,["Re@Re.local",[[-1,10657,"jianch"]],[10663,10663],[10657,10657]]],[1528169110472,["Re@Re.local",[[1,10657,"检查节点u到节点v的边。"]],[10657,10657],[10669,10669]]],[1528169113995,["Re@Re.local",[[-1,10668,"。"]],[10669,10669],[10668,10668]]],[1528169116379,["Re@Re.local",[[1,10668,"，f"]],[10668,10668],[10670,10670]]],[1528169116749,["Re@Re.local",[[-1,10669,"f"]],[10670,10670],[10669,10669]]],[1528169118343,["Re@Re.local",[[1,10669,"该for "]],[10669,10669],[10674,10674]]],[1528169118783,["Re@Re.local",[[-1,10673," "]],[10674,10674],[10673,10673]]],[1528169125499,["Re@Re.local",[[1,10673,"循环为O(E)。因此"]],[10673,10673],[10683,10683]]],[1528169186803,[null,[[-1,2285,"（"],[1,2286,"中"],[-1,3414,"\n"],[1,3881,"\n"],[1,3970,"\\"],[-1,3972,"-"],[-1,4021,"象"],[1,4023,"象"],[-1,4055,"\n"],[1,4889,"\n"],[-1,4905,"v"],[1,4906,"和"],[-1,5040,"\n"],[1,5766,"\n"],[-1,5949,"\n"],[1,5984,"\n"],[1,6243,"，"],[-1,6245,"任"],[-1,7001,"\n\n"],[1,7003,"列表"],[-1,7875,"成"],[1,7876,"\n"],[-1,8490,"\n\n"],[1,8492,"对其"],[-1,8510,"i"],[1,8511,"d"],[-1,8550,"\n"],[1,8551,"r"],[-1,8757,"\n"],[1,8758,"4"],[1,9700,"对"],[-1,9718,"O"],[-1,10173,"宽"],[1,10174,"的"],[1,10180,"宽"],[-1,10186,"\n"]],[2285,2285],[10186,10186]]],[1528169186803,[null,[[1,2285,"（"],[-1,2285,"中"],[1,3414,"\n"],[-1,3880,"\n"],[-1,3970,"\\"],[1,3973,"-"],[1,4021,"象"],[-1,4022,"象"],[1,4055,"\n"],[-1,4888,"\n"],[1,4905,"v"],[-1,4905,"和"],[1,5040,"\n"],[-1,5765,"\n"],[1,5949,"\n"],[-1,5983,"\n"],[-1,6243,"，"],[1,6246,"任"],[1,7001,"\n\n"],[-1,7001,"列表"],[1,7875,"成"],[-1,7875,"\n"],[1,8490,"\n\n"],[-1,8490,"对其"],[1,8510,"i"],[-1,8510,"d"],[1,8550,"\n"],[-1,8550,"r"],[1,8757,"\n"],[-1,8757,"4"],[-1,9700,"对"],[1,9719,"O"],[1,10173,"宽"],[-1,10173,"的"],[-1,10180,"宽"],[1,10187,"\n"]],[10186,10186],[2285,2285]]],[1528169127872,["Re@Re.local",[[1,10685,"for"]],[10685,10685],[10688,10688]]],[1528169128984,["Re@Re.local",[[-1,10685,"for"]],[10688,10688],[10685,10685]]],[1528169139361,["Re@Re.local",[[1,10685,"循环的最终结果是O(V+E)，"]],[10685,10685],[10700,10700]]],[1528169139760,["Re@Re.local",[[1,10700,"\n\n"]],[10700,10700],[10701,10701]]],[1528169140323,["Re@Re.local",[[-1,10701,"\n"]],[10701,10701],[10700,10700]]],[1528169140786,["Re@Re.local",[[-1,10699,"，"]],[10700,10700],[10699,10699]]],[1528169141320,["Re@Re.local",[[1,10699,"。"]],[10699,10699],[10700,10700]]],[1528169141672,["Re@Re.local",[[1,10701,"\n"]],[10700,10700],[10701,10701]]],[1528169142066,["Re@Re.local",[[1,10702,"\n"]],[10701,10701],[10702,10702]]],[1528169157460,["Re@Re.local",[[-1,10702,"\n"],[1,10703,"当然，执行BFS仅仅"]],[10702,10702],[10712,10712]]],[1528169157621,["Re@Re.local",[[-1,10711,"仅"]],[10712,10712],[10711,10711]]],[1528169163476,["Re@Re.local",[[1,10711,"完成了该任务的一部分。沿着"]],[10711,10711],[10724,10724]]],[1528169166047,["Re@Re.local",[[-1,10722,"沿着"]],[10724,10724],[10722,10722]]],[1528169168874,["Re@Re.local",[[1,10722,"从起点"]],[10722,10722],[10725,10725]]],[1528169169412,["Re@Re.local",[[-1,10723,"起点"]],[10725,10725],[10723,10723]]],[1528169177729,["Re@Re.local",[[1,10723,"起始节点出发沿着"]],[10723,10723],[10731,10731]]],[1528169182331,["Re@Re.local",[[-1,10729,"沿着"]],[10731,10731],[10729,10729]]],[1528169183350,["Re@Re.local",[[1,10729,"找到"]],[10729,10729],[10731,10731]]],[1528169184339,["Re@Re.local",[[-1,10729,"找到"]],[10731,10731],[10729,10729]]],[1528169247344,[null,[[-1,2285,"（"],[1,2286,"中"],[-1,3414,"\n"],[1,3881,"\n"],[1,3970,"\\"],[-1,3972,"-"],[-1,4021,"象"],[1,4023,"象"],[-1,4055,"\n"],[1,4889,"\n"],[-1,4905,"v"],[1,4906,"和"],[-1,5040,"\n"],[1,5766,"\n"],[-1,5949,"\n"],[1,5984,"\n"],[1,6243,"，"],[-1,6245,"任"],[-1,7001,"\n\n"],[1,7003,"列表"],[-1,7875,"成"],[1,7876,"\n"],[-1,8490,"\n\n"],[1,8492,"对其"],[-1,8510,"i"],[1,8511,"d"],[-1,8550,"\n"],[1,8551,"r"],[-1,8757,"\n"],[1,8758,"4"],[1,9700,"对"],[-1,9718,"O"],[-1,10173,"宽"],[1,10174,"的"],[1,10180,"宽"],[-1,10186,"\n"],[-1,10683,"fo"],[1,10685,"两个"]],[2285,2285],[10687,10687]]],[1528169247344,[null,[[1,2285,"（"],[-1,2285,"中"],[1,3414,"\n"],[-1,3880,"\n"],[-1,3970,"\\"],[1,3973,"-"],[1,4021,"象"],[-1,4022,"象"],[1,4055,"\n"],[-1,4888,"\n"],[1,4905,"v"],[-1,4905,"和"],[1,5040,"\n"],[-1,5765,"\n"],[1,5949,"\n"],[-1,5983,"\n"],[-1,6243,"，"],[1,6246,"任"],[1,7001,"\n\n"],[-1,7001,"列表"],[1,7875,"成"],[-1,7875,"\n"],[1,8490,"\n\n"],[-1,8490,"对其"],[1,8510,"i"],[-1,8510,"d"],[1,8550,"\n"],[-1,8550,"r"],[1,8757,"\n"],[-1,8757,"4"],[-1,9700,"对"],[1,9719,"O"],[1,10173,"宽"],[-1,10173,"的"],[-1,10180,"宽"],[1,10187,"\n"],[1,10683,"fo"],[-1,10683,"两个"]],[10687,10687],[2285,2285]]],[1528169203107,["Re@Re.local",[[1,10729,"到达目标顶点是该任务的另一部分。最早"]],[10729,10729],[10747,10747]]],[1528169203217,["Re@Re.local",[[-1,10746,"早"]],[10747,10747],[10746,10746]]],[1528169232665,["Re@Re.local",[[1,10746,"坏情况是，该图是单链的。在这种情况下，遍历所有节点需要O(V)，"]],[10746,10746],[10778,10778]]],[1528169233293,["Re@Re.local",[[-1,10777,"，"]],[10778,10778],[10777,10777]]],[1528169234048,["Re@Re.local",[[1,10777,"。"]],[10777,10777],[10778,10778]]],[1528169306830,[null,[[-1,2285,"（"],[1,2286,"中"],[-1,3414,"\n"],[1,3881,"\n"],[1,3970,"\\"],[-1,3972,"-"],[-1,4021,"象"],[1,4023,"象"],[-1,4055,"\n"],[1,4889,"\n"],[-1,4905,"v"],[1,4906,"和"],[-1,5040,"\n"],[1,5766,"\n"],[-1,5949,"\n"],[1,5984,"\n"],[1,6243,"，"],[-1,6245,"任"],[-1,7001,"\n\n"],[1,7003,"列表"],[-1,7875,"成"],[1,7876,"\n"],[-1,8490,"\n\n"],[1,8492,"对其"],[-1,8510,"i"],[1,8511,"d"],[-1,8550,"\n"],[1,8551,"r"],[-1,8757,"\n"],[1,8758,"4"],[1,9700,"对"],[-1,9718,"O"],[-1,10173,"宽"],[1,10174,"的"],[1,10180,"宽"],[-1,10186,"\n"],[-1,10683,"fo"],[1,10685,"两个"]],[2285,2285],[10687,10687]]],[1528169306830,[null,[[1,2285,"（"],[-1,2285,"中"],[1,3414,"\n"],[-1,3880,"\n"],[-1,3970,"\\"],[1,3973,"-"],[1,4021,"象"],[-1,4022,"象"],[1,4055,"\n"],[-1,4888,"\n"],[1,4905,"v"],[-1,4905,"和"],[1,5040,"\n"],[-1,5765,"\n"],[1,5949,"\n"],[-1,5983,"\n"],[-1,6243,"，"],[1,6246,"任"],[1,7001,"\n\n"],[-1,7001,"列表"],[1,7875,"成"],[-1,7875,"\n"],[1,8490,"\n\n"],[-1,8490,"对其"],[1,8510,"i"],[-1,8510,"d"],[1,8550,"\n"],[-1,8550,"r"],[1,8757,"\n"],[-1,8757,"4"],[-1,9700,"对"],[1,9719,"O"],[1,10173,"宽"],[-1,10173,"的"],[-1,10180,"宽"],[1,10187,"\n"],[1,10683,"fo"],[-1,10683,"两个"]],[10687,10687],[2285,2285]]],[1528169262827,["Re@Re.local",[[1,10782,"下应该是|V|的某个分数，但四件"]],[10782,10782],[10798,10798]]],[1528169263237,["Re@Re.local",[[-1,10796,"四件"]],[10798,10798],[10796,10796]]],[1528169266839,["Re@Re.local",[[1,10796,"时间复杂度不会边，"]],[10796,10796],[10805,10805]]],[1528169267244,["Re@Re.local",[[-1,10803,"边，"]],[10805,10805],[10803,10803]]],[1528169268236,["Re@Re.local",[[1,10803,"便"]],[10803,10803],[10804,10804]]],[1528169268534,["Re@Re.local",[[-1,10803,"便"]],[10804,10804],[10803,10803]]],[1528169272859,["Re@Re.local",[[1,10803,"变，仍然是O(V)。"]],[10803,10803],[10813,10813]]],[1528169273170,["Re@Re.local",[[1,10813,"\n\n"]],[10813,10813],[10814,10814]]],[1528169273452,["Re@Re.local",[[1,10815,"\n"]],[10814,10814],[10815,10815]]],[1528169285120,["Re@Re.local",[[-1,10815,"\n"],[1,10816,"最后，至少对这个问题二氧，"]],[10815,10815],[10828,10828]]],[1528169291596,["Re@Re.local",[[-1,10825,"二氧，"]],[10828,10828],[10825,10825]]],[1528169292061,["Re@Re.local",[[1,10825,"，"]],[10825,10825],[10826,10826]]],[1528169293006,["Re@Re.local",[[-1,10822,"个问题，"]],[10826,10826],[10822,10822]]],[1528169306289,["Re@Re.local",[[1,10822,"哥问题而言，生成初始的图也需要时间，其时间"]],[10822,10822],[10843,10843]]],[1528169366728,[null,[[-1,2285,"（"],[1,2286,"中"],[-1,3414,"\n"],[1,3881,"\n"],[1,3970,"\\"],[-1,3972,"-"],[-1,4021,"象"],[1,4023,"象"],[-1,4055,"\n"],[1,4889,"\n"],[-1,4905,"v"],[1,4906,"和"],[-1,5040,"\n"],[-1,5766,""],[1,5766,"\n"],[-1,5949,"\n"],[-1,5984,""],[1,5984,"\n"],[1,6243,"，"],[-1,6245,"任"],[-1,7001,"\n\n"],[1,7003,"列表"],[-1,7875,"成"],[1,7876,"\n"],[-1,8490,"\n\n"],[1,8492,"对其"],[-1,8510,"i"],[1,8511,"d"],[-1,8550,"\n"],[1,8551,"r"],[-1,8757,"\n"],[1,8758,"4"],[1,9700,"对"],[-1,9718,"O"],[-1,10173,"宽"],[1,10174,"的"],[1,10180,"宽"],[-1,10186,"\n"],[-1,10683,"fo"],[1,10685,"两个"],[1,10778,"正常情况"],[-1,10792,"四件"],[-1,10801,"边，"]],[2285,2285],[10801,10801]]],[1528169366728,[null,[[1,2285,"（"],[-1,2285,"中"],[1,3414,"\n"],[-1,3880,"\n"],[-1,3970,"\\"],[1,3973,"-"],[1,4021,"象"],[-1,4022,"象"],[1,4055,"\n"],[-1,4888,"\n"],[1,4905,"v"],[-1,4905,"和"],[1,5040,"\n"],[1,5765,""],[-1,5765,"\n"],[1,5949,"\n"],[1,5983,""],[-1,5983,"\n"],[-1,6243,"，"],[1,6246,"任"],[1,7001,"\n\n"],[-1,7001,"列表"],[1,7875,"成"],[-1,7875,"\n"],[1,8490,"\n\n"],[-1,8490,"对其"],[1,8510,"i"],[-1,8510,"d"],[1,8550,"\n"],[-1,8550,"r"],[1,8757,"\n"],[-1,8757,"4"],[-1,9700,"对"],[1,9719,"O"],[1,10173,"宽"],[-1,10173,"的"],[-1,10180,"宽"],[1,10187,"\n"],[1,10683,"fo"],[-1,10683,"两个"],[-1,10778,"正常情况"],[1,10796,"四件"],[1,10803,"边，"]],[10801,10801],[2285,2285]]],[1528169308727,["Re@Re.local",[[1,10843,"复杂度就叫"]],[10843,10843],[10848,10848]]],[1528169308841,["Re@Re.local",[[-1,10847,"叫"]],[10848,10848],[10847,10847]]],[1528169311273,["Re@Re.local",[[1,10847,"作为练习"]],[10847,10847],[10851,10851]]],[1528169313834,["Re@Re.local",[[1,10846,"的分析"]],[10846,10846],[10849,10849]]],[1528169316206,["Re@Re.local",[[1,10854,"了。"]],[10854,10854],[10856,10856]]],[1528169316494,["Re@Re.local",[[1,10856,"\n\n"]],[10856,10856],[10857,10857]]],[1528169316751,["Re@Re.local",[[1,10858,"\n"]],[10857,10857],[10858,10858]]],[1528169319181,["Re@Re.local",[[-1,10858,"\n"],[1,10859,"## 7.11"]],[10858,10858],[10865,10865]]],[1528169325963,["Re@Re.local",[[-1,10517,"以"]],[10518,10518],[10517,10517]]],[1528169327396,["Re@Re.local",[[1,10517,"一"]],[10517,10517],[10518,10518]]],[1528169342579,["Re@Re.local",[[1,10865," 骑士周游问题 ##"]],[10865,10865],[10875,10875]]],[1528169342837,["Re@Re.local",[[1,10875,"\n\n"]],[10875,10875],[10876,10876]]],[1528169343100,["Re@Re.local",[[1,10877,"\n"]],[10876,10876],[10877,10877]]],[1528169353219,["Re@Re.local",[[-1,10877,"\n"],[1,10878,"另一个可以用来眼"]],[10877,10877],[10885,10885]]],[1528169353314,["Re@Re.local",[[-1,10884,"眼"]],[10885,10885],[10884,10884]]],[1528169364970,["Re@Re.local",[[1,10884,"演示第二种常见图算法的经典问题"]],[10884,10884],[10899,10899]]],[1528169426731,[null,[[-1,2285,"（"],[1,2286,"中"],[-1,3414,"\n"],[1,3881,"\n"],[1,3970,"\\"],[-1,3972,"-"],[-1,4021,"象"],[1,4023,"象"],[-1,4055,"\n"],[1,4889,"\n"],[-1,4905,"v"],[1,4906,"和"],[-1,5040,"\n"],[-1,5766,""],[1,5766,"\n"],[-1,5949,"\n"],[-1,5984,""],[1,5984,"\n"],[1,6243,"，"],[-1,6245,"任"],[-1,7001,"\n\n"],[1,7003,"列表"],[-1,7875,"成"],[1,7876,"\n"],[-1,8490,"\n\n"],[1,8492,"对其"],[-1,8510,"i"],[1,8511,"d"],[-1,8550,"\n"],[1,8551,"r"],[-1,8757,"\n"],[1,8758,"4"],[1,9700,"对"],[-1,9718,"O"],[-1,10173,"宽"],[1,10174,"的"],[1,10180,"宽"],[-1,10186,"\n"],[-1,10683,"fo"],[1,10685,"两个"],[1,10778,"正常情况"],[-1,10792,"四件"],[-1,10801,"边，"]],[2285,2285],[10801,10801]]],[1528169426731,[null,[[1,2285,"（"],[-1,2285,"中"],[1,3414,"\n"],[-1,3880,"\n"],[-1,3970,"\\"],[1,3973,"-"],[1,4021,"象"],[-1,4022,"象"],[1,4055,"\n"],[-1,4888,"\n"],[1,4905,"v"],[-1,4905,"和"],[1,5040,"\n"],[1,5765,""],[-1,5765,"\n"],[1,5949,"\n"],[1,5983,""],[-1,5983,"\n"],[-1,6243,"，"],[1,6246,"任"],[1,7001,"\n\n"],[-1,7001,"列表"],[1,7875,"成"],[-1,7875,"\n"],[1,8490,"\n\n"],[-1,8490,"对其"],[1,8510,"i"],[-1,8510,"d"],[1,8550,"\n"],[-1,8550,"r"],[1,8757,"\n"],[-1,8757,"4"],[-1,9700,"对"],[1,9719,"O"],[1,10173,"宽"],[-1,10173,"的"],[-1,10180,"宽"],[1,10187,"\n"],[1,10683,"fo"],[-1,10683,"两个"],[-1,10778,"正常情况"],[1,10796,"四件"],[1,10803,"边，"]],[10801,10801],[2285,2285]]],[1528169371826,["Re@Re.local",[[1,10877,"起始周游是"]],[10877,10877],[10882,10882]]],[1528169378460,["Re@Re.local",[[-1,10882,"另一个"]],[10885,10885],[10882,10882]]],[1528169410278,["Re@Re.local",[[1,10901,"。起始周游问题是在国际象棋期盼上仅"]],[10901,10901],[10918,10918]]],[1528169411009,["Re@Re.local",[[-1,10914,"期盼上仅"]],[10918,10918],[10914,10914]]],[1528169417664,["Re@Re.local",[[1,10914,"棋盘上仅使用1哥妻子"]],[10914,10914],[10924,10924]]],[1528169417972,["Re@Re.local",[[-1,10922,"妻子"]],[10924,10924],[10922,10922]]],[1528169420752,["Re@Re.local",[[-1,10902,"起始"]],[10903,10903],[10902,10902]]],[1528169421781,["Re@Re.local",[[1,10902,"骑士"]],[10902,10902],[10904,10904]]],[1528169422961,["Re@Re.local",[[-1,10921,"哥"]],[10922,10922],[10921,10921]]],[1528169425224,["Re@Re.local",[[1,10921,"个棋子"]],[10921,10921],[10924,10924]]],[1528169486987,[null,[[-1,2285,"（"],[1,2286,"中"],[-1,3414,"\n"],[1,3881,"\n"],[1,3970,"\\"],[-1,3972,"-"],[-1,4021,"象"],[1,4023,"象"],[-1,4055,"\n"],[1,4889,"\n"],[-1,4905,"v"],[1,4906,"和"],[-1,5040,"\n"],[-1,5766,""],[1,5766,"\n"],[-1,5949,"\n"],[-1,5984,""],[1,5984,"\n"],[1,6243,"，"],[-1,6245,"任"],[-1,7001,"\n\n"],[1,7003,"列表"],[-1,7875,"成"],[1,7876,"\n"],[-1,8490,"\n\n"],[1,8492,"对其"],[-1,8510,"i"],[1,8511,"d"],[-1,8550,"\n"],[1,8551,"r"],[-1,8757,"\n"],[1,8758,"4"],[1,9700,"对"],[-1,9718,"O"],[-1,10173,"宽"],[1,10174,"的"],[1,10180,"宽"],[-1,10186,"\n"],[-1,10683,"fo"],[1,10685,"两个"],[1,10778,"正常情况"],[-1,10792,"四件"],[-1,10801,"边，"]],[2285,2285],[10801,10801]]],[1528169486988,[null,[[1,2285,"（"],[-1,2285,"中"],[1,3414,"\n"],[-1,3880,"\n"],[-1,3970,"\\"],[1,3973,"-"],[1,4021,"象"],[-1,4022,"象"],[1,4055,"\n"],[-1,4888,"\n"],[1,4905,"v"],[-1,4905,"和"],[1,5040,"\n"],[1,5765,""],[-1,5765,"\n"],[1,5949,"\n"],[1,5983,""],[-1,5983,"\n"],[-1,6243,"，"],[1,6246,"任"],[1,7001,"\n\n"],[-1,7001,"列表"],[1,7875,"成"],[-1,7875,"\n"],[1,8490,"\n\n"],[-1,8490,"对其"],[1,8510,"i"],[-1,8510,"d"],[1,8550,"\n"],[-1,8550,"r"],[1,8757,"\n"],[-1,8757,"4"],[-1,9700,"对"],[1,9719,"O"],[1,10173,"宽"],[-1,10173,"的"],[-1,10180,"宽"],[1,10187,"\n"],[1,10683,"fo"],[-1,10683,"两个"],[-1,10778,"正常情况"],[1,10796,"四件"],[1,10803,"边，"]],[10801,10801],[2285,2285]]],[1528169440216,["Re@Re.local",[[1,10925,"即起始，该问题的目标是找到1"]],[10925,10925],[10939,10939]]],[1528169440648,["Re@Re.local",[[-1,10938,"1"]],[10939,10939],[10938,10938]]],[1528169441956,["Re@Re.local",[[1,10938,"1条"]],[10938,10938],[10940,10940]]],[1528169448779,["Re@Re.local",[[-1,10939,"条"]],[10940,10940],[10939,10939]]],[1528169468759,["Re@Re.local",[[1,10939,"个出棋序列使得起始"]],[10939,10939],[10948,10948]]],[1528169469244,["Re@Re.local",[[-1,10946,"起始"]],[10948,10948],[10946,10946]]],[1528169470267,["Re@Re.local",[[1,10946,"其实"]],[10946,10946],[10948,10948]]],[1528169470711,["Re@Re.local",[[-1,10946,"其实"]],[10948,10948],[10946,10946]]],[1528169479933,["Re@Re.local",[[1,10946,"骑士可以访问所有棋子1"]],[10946,10946],[10957,10957]]],[1528169480569,["Re@Re.local",[[-1,10956,"1"]],[10957,10957],[10956,10956]]],[1528169547138,[null,[[-1,2285,"（"],[1,2286,"中"],[-1,3414,"\n"],[1,3881,"\n"],[1,3970,"\\"],[-1,3972,"-"],[-1,4021,"象"],[1,4023,"象"],[-1,4055,"\n"],[1,4889,"\n"],[-1,4905,"v"],[1,4906,"和"],[-1,5040,"\n"],[-1,5766,""],[1,5766,"\n"],[-1,5949,"\n"],[-1,5984,""],[1,5984,"\n"],[1,6243,"，"],[-1,6245,"任"],[-1,7001,"\n\n"],[1,7003,"列表"],[-1,7875,"成"],[1,7876,"\n"],[-1,8490,"\n\n"],[1,8492,"对其"],[-1,8510,"i"],[1,8511,"d"],[-1,8550,"\n"],[1,8551,"r"],[-1,8757,"\n"],[1,8758,"4"],[1,9700,"对"],[-1,9718,"O"],[-1,10173,"宽"],[1,10174,"的"],[1,10180,"宽"],[-1,10186,"\n"],[-1,10683,"fo"],[1,10685,"两个"],[1,10778,"正常情况"],[-1,10792,"四件"],[-1,10801,"边，"],[1,10924,"，"],[-1,10937,"1"]],[2285,2285],[10937,10937]]],[1528169547138,[null,[[1,2285,"（"],[-1,2285,"中"],[1,3414,"\n"],[-1,3880,"\n"],[-1,3970,"\\"],[1,3973,"-"],[1,4021,"象"],[-1,4022,"象"],[1,4055,"\n"],[-1,4888,"\n"],[1,4905,"v"],[-1,4905,"和"],[1,5040,"\n"],[1,5765,""],[-1,5765,"\n"],[1,5949,"\n"],[1,5983,""],[-1,5983,"\n"],[-1,6243,"，"],[1,6246,"任"],[1,7001,"\n\n"],[-1,7001,"列表"],[1,7875,"成"],[-1,7875,"\n"],[1,8490,"\n\n"],[-1,8490,"对其"],[1,8510,"i"],[-1,8510,"d"],[1,8550,"\n"],[-1,8550,"r"],[1,8757,"\n"],[-1,8757,"4"],[-1,9700,"对"],[1,9719,"O"],[1,10173,"宽"],[-1,10173,"的"],[-1,10180,"宽"],[1,10187,"\n"],[1,10683,"fo"],[-1,10683,"两个"],[-1,10778,"正常情况"],[1,10796,"四件"],[1,10803,"边，"],[-1,10924,"，"],[1,10938,"1"]],[10937,10937],[2285,2285]]],[1528169489732,["Re@Re.local",[[1,10956,"恰好1次。"]],[10956,10956],[10961,10961]]],[1528169493850,["Re@Re.local",[[-1,10952,"所有"]],[10954,10954],[10952,10952]]],[1528169494801,["Re@Re.local",[[1,10952,"各个"]],[10952,10952],[10954,10954]]],[1528169497386,["Re@Re.local",[[-1,10954,"棋子"]],[10956,10956],[10954,10954]]],[1528169500230,["Re@Re.local",[[1,10954,"方格"]],[10954,10954],[10956,10956]]],[1528169544923,["Re@Re.local",[[1,10961,"这样的序列被称为周游。起始周游问题吸引了很多棋手、"]],[10961,10961],[10986,10986]]],[1528169607006,[null,[[-1,2285,"（"],[1,2286,"中"],[-1,3414,"\n"],[1,3881,"\n"],[1,3970,"\\"],[-1,3972,"-"],[-1,4021,"象"],[1,4023,"象"],[-1,4055,"\n"],[1,4889,"\n"],[-1,4905,"v"],[1,4906,"和"],[-1,5040,"\n"],[-1,5766,""],[1,5766,"\n"],[-1,5949,"\n"],[-1,5984,""],[1,5984,"\n"],[1,6243,"，"],[-1,6245,"任"],[-1,7001,"\n\n"],[1,7003,"列表"],[-1,7875,"成"],[1,7876,"\n"],[-1,8490,"\n\n"],[1,8492,"对其"],[-1,8510,"i"],[1,8511,"d"],[-1,8550,"\n"],[1,8551,"r"],[-1,8757,"\n"],[1,8758,"4"],[1,9700,"对"],[-1,9718,"O"],[-1,10173,"宽"],[1,10174,"的"],[1,10180,"宽"],[-1,10186,"\n"],[-1,10683,"fo"],[1,10685,"两个"],[1,10778,"正常情况"],[-1,10792,"四件"],[-1,10801,"边，"],[1,10924,"，"],[-1,10937,"1"]],[2285,2285],[10937,10937]]],[1528169607006,[null,[[1,2285,"（"],[-1,2285,"中"],[1,3414,"\n"],[-1,3880,"\n"],[-1,3970,"\\"],[1,3973,"-"],[1,4021,"象"],[-1,4022,"象"],[1,4055,"\n"],[-1,4888,"\n"],[1,4905,"v"],[-1,4905,"和"],[1,5040,"\n"],[1,5765,""],[-1,5765,"\n"],[1,5949,"\n"],[1,5983,""],[-1,5983,"\n"],[-1,6243,"，"],[1,6246,"任"],[1,7001,"\n\n"],[-1,7001,"列表"],[1,7875,"成"],[-1,7875,"\n"],[1,8490,"\n\n"],[-1,8490,"对其"],[1,8510,"i"],[-1,8510,"d"],[1,8550,"\n"],[-1,8550,"r"],[1,8757,"\n"],[-1,8757,"4"],[-1,9700,"对"],[1,9719,"O"],[1,10173,"宽"],[-1,10173,"的"],[-1,10180,"宽"],[1,10187,"\n"],[1,10683,"fo"],[-1,10683,"两个"],[-1,10778,"正常情况"],[1,10796,"四件"],[1,10803,"边，"],[-1,10924,"，"],[1,10938,"1"]],[10937,10937],[2285,2285]]],[1528169551512,["Re@Re.local",[[1,10990,"计算机科学家邓"]],[10990,10990],[10997,10997]]],[1528169555771,["Re@Re.local",[[1,10978,"多年来"]],[10978,10978],[10981,10981]]],[1528169557513,["Re@Re.local",[[-1,10999,"邓"]],[11000,11000],[10999,10999]]],[1528169558505,["Re@Re.local",[[1,10999,"邓"]],[10999,10999],[11000,11000]]],[1528169558892,["Re@Re.local",[[-1,10999,"邓"]],[11000,11000],[10999,10999]]],[1528169585369,["Re@Re.local",[[1,10999,"等。在8*8的棋盘上，可能的"]],[10999,10999],[11013,11013]]],[1528169587068,["Re@Re.local",[[-1,11010,"可能的"]],[11013,11013],[11010,11010]]],[1528169596765,["Re@Re.local",[[1,11010,"可行的序列数据"]],[11010,11010],[11017,11017]]],[1528169596928,["Re@Re.local",[[-1,11016,"据"]],[11017,11017],[11016,11016]]],[1528169598354,["Re@Re.local",[[1,11016,"似乎"]],[11016,11016],[11018,11018]]],[1528169598743,["Re@Re.local",[[-1,11016,"似乎"]],[11018,11018],[11016,11016]]],[1528169605081,["Re@Re.local",[[1,11016,"的上界"]],[11016,11016],[11019,11019]]],[1528169667094,[null,[[-1,2285,"（"],[1,2286,"中"],[-1,3414,"\n"],[1,3881,"\n"],[1,3970,"\\"],[-1,3972,"-"],[-1,4021,"象"],[1,4023,"象"],[-1,4055,"\n"],[1,4889,"\n"],[-1,4905,"v"],[1,4906,"和"],[-1,5040,"\n"],[-1,5766,""],[1,5766,"\n"],[-1,5949,"\n"],[-1,5984,""],[1,5984,"\n"],[1,6243,"，"],[-1,6245,"任"],[-1,7001,"\n\n"],[1,7003,"列表"],[-1,7875,"成"],[1,7876,"\n"],[-1,8490,"\n\n"],[1,8492,"对其"],[-1,8510,"i"],[1,8511,"d"],[-1,8550,"\n"],[1,8551,"r"],[-1,8757,"\n"],[1,8758,"4"],[1,9700,"对"],[-1,9718,"O"],[-1,10173,"宽"],[1,10174,"的"],[1,10180,"宽"],[-1,10186,"\n"],[-1,10683,"fo"],[1,10685,"两个"],[1,10778,"正常情况"],[-1,10792,"四件"],[-1,10801,"边，"],[1,10924,"，"],[-1,10937,"1"],[1,10989,"数学家和"],[-1,10995,"邓邓"],[-1,11008,"可能"]],[2285,2285],[11008,11008]]],[1528169667095,[null,[[1,2285,"（"],[-1,2285,"中"],[1,3414,"\n"],[-1,3880,"\n"],[-1,3970,"\\"],[1,3973,"-"],[1,4021,"象"],[-1,4022,"象"],[1,4055,"\n"],[-1,4888,"\n"],[1,4905,"v"],[-1,4905,"和"],[1,5040,"\n"],[1,5765,""],[-1,5765,"\n"],[1,5949,"\n"],[1,5983,""],[-1,5983,"\n"],[-1,6243,"，"],[1,6246,"任"],[1,7001,"\n\n"],[-1,7001,"列表"],[1,7875,"成"],[-1,7875,"\n"],[1,8490,"\n\n"],[-1,8490,"对其"],[1,8510,"i"],[-1,8510,"d"],[1,8550,"\n"],[-1,8550,"r"],[1,8757,"\n"],[-1,8757,"4"],[-1,9700,"对"],[1,9719,"O"],[1,10173,"宽"],[-1,10173,"的"],[-1,10180,"宽"],[1,10187,"\n"],[1,10683,"fo"],[-1,10683,"两个"],[-1,10778,"正常情况"],[1,10796,"四件"],[1,10803,"边，"],[-1,10924,"，"],[1,10938,"1"],[-1,10989,"数学家和"],[1,10999,"邓邓"],[1,11010,"可能"]],[11008,11008],[2285,2285]]],[1528169608275,["Re@Re.local",[[1,11021,"是1"]],[11021,11021],[11023,11023]]],[1528169610064,["Re@Re.local",[[-1,11019,"大概是1"]],[11023,11023],[11019,11019]]],[1528169615001,["Re@Re.local",[[1,11019,"为$1.305"]],[11019,11019],[11026,11026]]],[1528169727050,[null,[[-1,2285,"（"],[1,2286,"中"],[-1,3414,"\n"],[1,3881,"\n"],[1,3970,"\\"],[-1,3972,"-"],[-1,4021,"象"],[1,4023,"象"],[-1,4055,"\n"],[1,4889,"\n"],[-1,4905,"v"],[1,4906,"和"],[-1,5040,"\n"],[-1,5766,""],[1,5766,"\n"],[-1,5949,"\n"],[-1,5984,""],[1,5984,"\n"],[1,6243,"，"],[-1,6245,"任"],[-1,7001,"\n\n"],[1,7003,"列表"],[-1,7875,"成"],[1,7876,"\n"],[-1,8490,"\n\n"],[1,8492,"对其"],[-1,8510,"i"],[1,8511,"d"],[-1,8550,"\n"],[1,8551,"r"],[-1,8757,"\n"],[1,8758,"4"],[1,9700,"对"],[-1,9718,"O"],[-1,10173,"宽"],[1,10174,"的"],[1,10180,"宽"],[-1,10186,"\n"],[-1,10683,"fo"],[1,10685,"两个"],[1,10778,"正常情况"],[-1,10792,"四件"],[-1,10801,"边，"],[1,10924,"，"],[-1,10937,"1"],[1,10989,"数学家和"],[-1,10995,"邓邓"],[-1,11008,"可能"]],[2285,2285],[11008,11008]]],[1528169727050,[null,[[1,2285,"（"],[-1,2285,"中"],[1,3414,"\n"],[-1,3880,"\n"],[-1,3970,"\\"],[1,3973,"-"],[1,4021,"象"],[-1,4022,"象"],[1,4055,"\n"],[-1,4888,"\n"],[1,4905,"v"],[-1,4905,"和"],[1,5040,"\n"],[1,5765,""],[-1,5765,"\n"],[1,5949,"\n"],[1,5983,""],[-1,5983,"\n"],[-1,6243,"，"],[1,6246,"任"],[1,7001,"\n\n"],[-1,7001,"列表"],[1,7875,"成"],[-1,7875,"\n"],[1,8490,"\n\n"],[-1,8490,"对其"],[1,8510,"i"],[-1,8510,"d"],[1,8550,"\n"],[-1,8550,"r"],[1,8757,"\n"],[-1,8757,"4"],[-1,9700,"对"],[1,9719,"O"],[1,10173,"宽"],[-1,10173,"的"],[-1,10180,"宽"],[1,10187,"\n"],[1,10683,"fo"],[-1,10683,"两个"],[-1,10778,"正常情况"],[1,10796,"四件"],[1,10803,"边，"],[-1,10924,"，"],[1,10938,"1"],[-1,10989,"数学家和"],[1,10999,"邓邓"],[1,11010,"可能"]],[11008,11008],[2285,2285]]],[1528169690386,["Re@Re.local",[[1,11026,"、"]],[11026,11026],[11027,11027]]],[1528169691129,["Re@Re.local",[[-1,11026,"、"]],[11027,11027],[11026,11026]]],[1528169709470,["Re@Re.local",[[1,11026,"\\times 10^35$"]],[11026,11026],[11039,11039]]],[1528169717345,["Re@Re.local",[[1,11036,"{"]],[11036,11036],[11037,11037]]],[1528169719055,["Re@Re.local",[[1,11039,"}"]],[11039,11039],[11040,11040]]],[1528169723453,["Re@Re.local",[[1,11041,"；然而，"]],[11041,11041],[11045,11045]]],[1528169787021,[null,[[-1,2285,"（"],[1,2286,"中"],[-1,3414,"\n"],[1,3881,"\n"],[1,3970,"\\"],[-1,3972,"-"],[-1,4021,"象"],[1,4023,"象"],[-1,4055,"\n"],[1,4889,"\n"],[-1,4905,"v"],[1,4906,"和"],[-1,5040,"\n"],[-1,5766,""],[1,5766,"\n"],[-1,5949,"\n"],[-1,5984,""],[1,5984,"\n"],[1,6243,"，"],[-1,6245,"任"],[-1,7001,"\n\n"],[1,7003,"列表"],[-1,7875,"成"],[1,7876,"\n"],[-1,8490,"\n\n"],[1,8492,"对其"],[-1,8510,"i"],[1,8511,"d"],[-1,8550,"\n"],[1,8551,"r"],[-1,8757,"\n"],[1,8758,"4"],[1,9700,"对"],[-1,9718,"O"],[-1,10173,"宽"],[1,10174,"的"],[1,10180,"宽"],[-1,10186,"\n"],[-1,10683,"fo"],[1,10685,"两个"],[1,10778,"正常情况"],[-1,10792,"四件"],[-1,10801,"边，"],[1,10924,"，"],[-1,10937,"1"],[1,10989,"数学家和"],[-1,10995,"邓邓"],[-1,11008,"可能"]],[2285,2285],[11008,11008]]],[1528169787021,[null,[[1,2285,"（"],[-1,2285,"中"],[1,3414,"\n"],[-1,3880,"\n"],[-1,3970,"\\"],[1,3973,"-"],[1,4021,"象"],[-1,4022,"象"],[1,4055,"\n"],[-1,4888,"\n"],[1,4905,"v"],[-1,4905,"和"],[1,5040,"\n"],[1,5765,""],[-1,5765,"\n"],[1,5949,"\n"],[1,5983,""],[-1,5983,"\n"],[-1,6243,"，"],[1,6246,"任"],[1,7001,"\n\n"],[-1,7001,"列表"],[1,7875,"成"],[-1,7875,"\n"],[1,8490,"\n\n"],[-1,8490,"对其"],[1,8510,"i"],[-1,8510,"d"],[1,8550,"\n"],[-1,8550,"r"],[1,8757,"\n"],[-1,8757,"4"],[-1,9700,"对"],[1,9719,"O"],[1,10173,"宽"],[-1,10173,"的"],[-1,10180,"宽"],[1,10187,"\n"],[1,10683,"fo"],[-1,10683,"两个"],[-1,10778,"正常情况"],[1,10796,"四件"],[1,10803,"边，"],[-1,10924,"，"],[1,10938,"1"],[-1,10989,"数学家和"],[1,10999,"邓邓"],[1,11010,"可能"]],[11008,11008],[2285,2285]]],[1528169729172,["Re@Re.local",[[-1,11041,"；然而，其中"]],[11047,11047],[11041,11041]]],[1528169735643,["Re@Re.local",[[1,11041,"，然而其中"]],[11041,11041],[11046,11046]]],[1528169735907,["Re@Re.local",[[-1,11044,"其中"]],[11046,11046],[11044,11044]]],[1528169738677,["Re@Re.local",[[1,11044,"，其中还有很多"]],[11044,11044],[11051,11051]]],[1528169740500,["Re@Re.local",[[-1,11041,"，"]],[11042,11042],[11041,11041]]],[1528169740859,["Re@Re.local",[[1,11041,"。"]],[11041,11041],[11042,11042]]],[1528169743541,["Re@Re.local",[[-1,11045,"其中还有很多"]],[11051,11051],[11045,11045]]],[1528169753959,["Re@Re.local",[[1,11045,"还有很多时候会走到死期"]],[11045,11045],[11056,11056]]],[1528169754248,["Re@Re.local",[[-1,11055,"期"]],[11056,11056],[11055,11055]]],[1528169765614,["Re@Re.local",[[1,11055,"棋的情况。当然，"]],[11055,11055],[11063,11063]]]]],["288121e1-f49a-469f-8acb-a35052afc7e5",1528249696760,"## 7.1 目标 ##\n\n- 学习图的概念和使用方式。\n- 以多种方式实现抽象数据类型Gragh。\n- 了解图在解决多种问题时的应用。\n\n本章研究图像。图像是比上一章学习的树更加通用的结构，实际上可以认为树是一种特殊的图像。图像也可以用来表示真实世界中的很多东西，比如公路系统，航线系统，网路系统甚至是完成计算机科学学位所必须的课程序列。本章读者会看到，一旦给某个问题以合适的表示，利用一些图像算法便可以轻松将看起来很困难的问题解决。\n\n对人类来说，看懂道路地图并理解不同地点之间的关系并不困难，但是计算机并没有这种能力。然而，可以将道路系统看作是1个图像，如此一来便可以让计算机做一些有趣的事情了。比如在互联网地图中，计算机可以找到从某个地方到另一个地方的最近、最快或者最简单的路线。\n\n作为计算机科学的学生，读者可能对获得学位所需要的课程比较感兴趣。图像可以很好地表达课程之间的依赖关系。图1便是1个例子。\n\n![../_images/CS-Prereqs.png](http://interactivepython.org/courselib/static/pythonds/_images/CS-Prereqs.png)\n\n## 7.2 术语和定义 ##\n\n\n**顶点（vertex）**\n顶点（也称为节点**node**）是图像的基础构件。它可以有名称，即键。顶点也可以有其它额外信息，即负载。\n**边（Edge）**\n边有时也被称为弧（arc），是图像的另一种基础构件。边将2个顶点连接起来以表示这2者之间存在某种关系。边可以是单向的也可以是双向的。当某个图像中的所有边都是单向的时候，便称该图像是**有向图（directed gragh/digrah）**。上示的课程依赖图显示是有向图，因为必须先完成某些课程后才能继续其它某些课程。\n**权重（weight）**\n为了表示从某个顶点到另一个顶点所需的代价，可以顶点进行**赋权（weighted）**。比如说公路图中某个城市连接到另一个城市，边上的权重可以表示为两个城市之间的距离。\n\n有了以上基本概念，便可以来对图像作一定义了。图像可以表示为G，其中G=(V,E)。对于图像G，V是顶点的集合，E是边的集合。每个边都是一个元组（v,w)，其中$w,v∈V$。可以向边元组中加入第3个元素来表示权重。子图s是顶点的集合v和边的集合e，使得$e⊂E且v⊂V$。\n\n图2给出了1个简单的赋权有向图作为例子。该图像可以用集合严格地表示：\n$$ V={V0,V1,V2,V3,V4,V5} $$\n$$ E= \\left \\{ (v0,v1,5),(v1,v2,4),(v2,v3,9),(v3,v4,7),(v4,v0,1),(v0,v5,2),(v5,v4,8),(v3,v5,3),(v5,v2,1) \\right \\} $$\n![../_images/digraph.png](http://interactivepython.org/courselib/static/pythonds/_images/digraph.png)\n\n图2中的例子演示了图像的另外2个关键术语。\n**路径（path）**\n路径是由边连接起来的顶点的序列。一般地，将路径定义为 $w_1,w_2,...,w_n$ 使得 $(w_i,w_{i+1})\\in E$ 对所有 $1≤i≤n−1$ 成立。无权路径长度是路径中边的个数，即n-1。权重路径长度是路径中边的权重之和。比如图2中，从V3到V1的路径是顶点序列 $(V3,V4,V0,V1)$ 而边为 ${(v3,v4,7),(v4,v0,1),(v0,v1,5)}{(v3,v4,7),(v4,v0,1),(v0,v1,5)}$。\n**环（cycle）**\n有向图中的环是首尾顶点相同的路径。比如说，图2中路径 $(V5,V2,V3,V5)(V5,V2,V3,V5)$ 就是1个环。没有环的图被称为**无环图（acyclic graph）**。没有环的有向图被称为**有向无环图（directed acyclic graph，DAG）**。接下来读者会看到，一些很重要的问题可以通过表示为DAG获得解决。\n\n## 7.3 抽象数据类型：Graph ##\n\n抽象数据类型Gragh被定义为：\n- Graph()生成一个新的空图。\n- addVertex(vert) 将Vertex的1个实例添加至图。\n- addEdge(fromVert,toVert) 向图添加1个连接2个顶点的有向边。\n- addEdge(fromVert,toVert,weight)向图添加1个连接2个顶点的赋权有向边。\n- getVertex(vertKey) 找到途中以vertKey命名的顶点。\n- getVertices() 返回途中所有顶点的列表。\n- in 对于vertex in graph这种形式的语句，若给定的vertex在途中，返回True，反之则False。\n\n有了图像的正式定义，在Python中可以用多种方式实现，下面来看看使用不同方式实现该ADT的优劣与差别。有两个著名的图的实现，即**邻接矩阵（adjacency matrix）**和**邻接表（adjacency list）**，本书将对这两种都进行解释，并对其中1中以Python类的方式实现。\n\n## 7.4 邻接矩阵（adjacency matrix）##\n\n\n实现图的最简单方式之一是使用二维矩阵。在二维矩阵中，每行每列的都代表了图中的1个顶点。如果顶点v到顶点w有边，行v和列w的交叉点单元格会存储值。若两个顶点由边连接，便称这两个顶点是**邻接**的。图3给出了图2的邻接矩阵。单元格中存储的值是v到w的权重。\n\n![../_images/adjMat.png](http://interactivepython.org/courselib/static/pythonds/_images/adjMat.png)\n\n邻接矩阵的优势是简便，并且对于小图来说，很容易看出哪些节点是相连的。然而，注意到矩阵中大多数单元格都是空。因为大多数单元格都是空的，因此称该矩阵是**稀疏（sparse）**的。矩阵并不能高效地存储这种稀疏数据。实际上，在Python中像图3这种矩阵结构都很麻烦。\n\n邻接矩阵对于边树较高的图来说是不错的实现。“较高”是什么意思？到底需要多少个边才能填满该矩阵？因此为每行、每列都对应个顶点，填满矩阵需要的顶点数是$|V|_2$。当每个顶点都与另外每一个顶点相连时，则该矩阵被填满了。实践中很少会遇到以这种方式连接的问题。本章研究的所有问题都是稀疏图。\n\n## 7.5 邻接表（adjacency list） ##\n\n邻接表可以用更少的空间实现稀疏图。在邻接表的实现中，维护一个包含图对象所有顶点的主列表，然后图对象中各个顶点对象都维护一个该对象连接的其它顶点对象的列表。在Vertex类的实现中，将使用字典而不是列表，其中字典的键为顶点，值为权重。图4给出了图2的邻接表实现示意图。\n![../_images/adjlist.png](http://interactivepython.org/courselib/static/pythonds/_images/adjlist.png)\n\n邻接表的有时在于它可以紧凑地表示稀疏图，利用稀疏图也可以轻松地找到某个顶点所有的连接情况。\n\n## 7.6 实现 ##\n\n使用字典可以很容易地在Python中实现邻接表。在本书的实现中会创建两个类（代码1、代码2），Graph保存顶点的祝列表，而Vertex即图中每个顶点。\n\n每个Vertex都使用字典来保存其连接的对象以及每条边的权重。该字典被命名为connectedTo。以下代码便是Vertex类的实现。构造器只是初始化了可以是字符串的id以及connectedTo字典。addNeighbor方法用来添加从该顶点到另一顶点的连接。getConnections方法返回当前节点connectedTo实例变量保存的邻接表中的所有顶点。getWeight方法返回从该节点到另一个作为参数传入的节点的边的权重。\n\n**代码1**\n```Pythion\nclass Vertex:\n    def __init__(self,key):\n        self.id = key\n        self.connectedTo = {}\n\n    def addNeighbor(self,nbr,weight=0):\n        self.connectedTo[nbr] = weight\n\n    def __str__(self):\n        return str(self.id) + ' connectedTo: ' + str([x.id for x in self.connectedTo])\n\n    def getConnections(self):\n        return self.connectedTo.keys()\n\n    def getId(self):\n        return self.id\n\n    def getWeight(self,nbr):\n        return self.connectedTo[nbr]\n```\nGraph类，如下面的代码所示，保存了一个字典，将顶点名映射到顶点对象。在图4中，该字典对象表示为灰色阴影框。Graph类也听过了方法用于添加顶点和连接顶点。此外，实现了\\_\\_iter\\_\\_方法来使得可以在图中对所有顶点对象进行迭代。这两种方法可以用来实现按名称或者是对象本身来对图中顶点的迭代。\n\n**代码2**\n```Python\nclass Graph:\n    def __init__(self):\n        self.vertList = {}\n        self.numVertices = 0\n\n    def addVertex(self,key):\n        self.numVertices = self.numVertices + 1\n        newVertex = Vertex(key)\n        self.vertList[key] = newVertex\n        return newVertex\n\n    def getVertex(self,n):\n        if n in self.vertList:\n            return self.vertList[n]\n        else:\n            return None\n\n    def __contains__(self,n):\n        return n in self.vertList\n\n    def addEdge(self,f,t,cost=0):\n        if f not in self.vertList:\n            nv = self.addVertex(f)\n        if t not in self.vertList:\n            nv = self.addVertex(t)\n        self.vertList[f].addNeighbor(self.vertList[t], cost)\n\n    def getVertices(self):\n        return self.vertList.keys()\n\n    def __iter__(self):\n        return iter(self.vertList.values())\n```\n使用以上定义的Graph和Vertex类，以下代码边可以表示图2。首先生成6个节点编号0-5，查看顶点字典，注意到对0-5的键都创建了1个Vertex实例。然后，将连接了顶点的边集合到一起。最后，使用嵌套循环确定图中的每个边都正确存储了。读者应该将输出结果与图2作一对比。\n```Python\n>>> g = Graph()\n>>> for i in range(6):\n...    g.addVertex(i)\n>>> g.vertList\n{0: <adjGraph.Vertex instance at 0x41e18>,\n 1: <adjGraph.Vertex instance at 0x7f2b0>,\n 2: <adjGraph.Vertex instance at 0x7f288>,\n 3: <adjGraph.Vertex instance at 0x7f350>,\n 4: <adjGraph.Vertex instance at 0x7f328>,\n 5: <adjGraph.Vertex instance at 0x7f300>}\n>>> g.addEdge(0,1,5)\n>>> g.addEdge(0,5,2)\n>>> g.addEdge(1,2,4)\n>>> g.addEdge(2,3,9)\n>>> g.addEdge(3,4,7)\n>>> g.addEdge(3,5,3)\n>>> g.addEdge(4,0,1)\n>>> g.addEdge(5,4,8)\n>>> g.addEdge(5,2,1)\n>>> for v in g:\n...    for w in v.getConnections():\n...        print(\"( %s , %s )\" % (v.getId(), w.getId()))\n...\n( 0 , 5 )\n( 0 , 1 )\n( 1 , 2 )\n( 2 , 3 )\n( 3 , 4 )\n( 3 , 5 )\n( 4 , 0 )\n( 5 , 4 )\n( 5 , 2 )\n```\n## 词梯（word ladder）问题 ##\n\n以词梯问题开始图算法的研究。将单词\"FOOL\"转化为\"SAGE\"。按词梯问题的规则，1次只能修改1个字母，在每1步都必须将单词转换为另一个单词，不允许转换为非单词。词梯问题是由*爱丽丝梦游仙境*的作者lewis Carroll于1878年提出的。以下单词序列是刚才那个问题的一个可行解。\n```Python\nFOOL\nPOOL\nPOLL\nPOLE\nPALE\nSALE\nSAGE\n```\n词梯问题有许多变体。比如读者可能遇到要求在给定步数来完成转换的版本，或是必须用给点单词的版本。本节仅关注计算出完成转换所需要的最小修改次数。\n\n当然，因为本章内容是图，因此可以用图算法来将其解决。以下是纲要：\n- 将单词之间的关系重新表示为图。\n- 使用**广度优先搜索算法（breadth first search**来找到从起始单词到目标单词的最短路径。\n\n## 7.8 建立词梯图 ##\n\n首先要解决的问题是如何将单词列表转换为图。对于边来说，需要保证它们连接的是差且仅差了1个字母的单词。如果生成这种图，那么从一个单词出发的任意路径都是该词梯问题的解。图1给出了1个小的由单词构成的图，它可以用来解决FOOL到SAGE的词梯问题。注意，该图是无向图且无权重。\n\n![../_images/wordgraph.png](http://interactivepython.org/courselib/static/pythonds/_images/wordgraph.png)\n\n\n可以使用很多方法来生成这个图。首先假设有1组长度相同的单词，从起点出发，为列表中的每一个单词创建1个顶点。为了确定如何将这些单词连接起来，可以将列表中的每个单词与其它的单词一一进行比较，在比较时确定有多少个字母不同。如果两个字母仅相差1个字母，便可以在图中为它们两创建1条边。单词数较少时，这个方法还是可行的。但是假设有5110个单词的话（粗略估计一一进行对比需要$O(n^2)$的时间复杂度），需要进行2500万次对比。\n\n使用以下方法可以对其进行优化。假设有大量桶，每个桶外面都贴着1个4字母单词，但是字母中有1个被下划线替代。比如说，对于图2这种情况，可能会有个桶被贴上\"POP_\"。当在列表中对每个单词进行处理时，将该单词与每个桶进行对比，将\"\\_\"用作通配符，因此\"POPE\"和\"POPS\"都与\"POP\\_\"匹配。每当找到1个匹配的桶时，都将该单词放进去。当所有的单词都放在了正确的桶里时，可以确定同一桶里的单词是相连的。\n\n![../_images/wordbuckets.png](http://interactivepython.org/courselib/static/pythonds/_images/wordbuckets.png)\n\n在Python中，可以通过字典实现上述方案。桶的标签作为字典的键，键对应的值为单词列表。首先为各个单词在图中创建1个顶点。然后为处于字典同一键下的单词之间创建边，如代码1所示。\n```Python\nfrom pythonds.graphs import Graph\n\ndef buildGraph(wordFile):\n    d = {}\n    g = Graph()\n    wfile = open(wordFile,'r')\n    # create buckets of words that differ by one letter\n    for line in wfile:\n        word = line[:-1]\n        for i in range(len(word)):\n            bucket = word[:i] + '_' + word[i+1:]\n            if bucket in d:\n                d[bucket].append(word)\n            else:\n                d[bucket] = [word]\n    # add vertices and edges for words in the same bucket\n    for bucket in d.keys():\n        for word1 in d[bucket]:\n            for word2 in d[bucket]:\n                if word1 != word2:\n                    g.addEdge(word1,word2)\n    return g\n```\n这是第一个跟现实生活相关的图问题，读者可能会好奇该图的稀疏程度。对于该问题，准备的单词列表有5510个。若果使用邻接矩阵，矩阵将会有5110*5110个单元格，而使用buildGraph函数的图仅有53286条边，因此仅有0.20%的单元格被填充了，这实际上是一个很稀疏的矩阵了。\n\n## 7.9 实现宽度优先搜索（breadth first search） ##\n\n创建好了图，接下来便可以研究解决字梯问题的最优算法了。这里使用的算法被称为**宽度优先搜索（breadth first search,BFS）**。BFS是用于图搜索的最简单的算法之一。它也是之后将研究的其它几种重要的图算法的原型。\n\n给定图G以及起始顶点s，宽度优先算法将对图内的边进行搜索以找到G中所有与s有路径相连的顶点。宽度优先搜索的优势在于，在找到与s距离为k+1的所有顶点之前，它会先找出所有距离为k的顶点。BFS的运行过程可以想象为生成树的过程，每次都生成树的一层。BFS在对子孙顶点进行搜索前，先将初始顶点的子顶点加入进来。\n\n为了跟踪运行过程，BFS将顶点染成白色，灰色或黑色。所有的顶点都被初始为白色。白色顶点是未被探索的顶点。当某个顶点被初次探索时，将其染成灰色，当BFS完成对某个顶点的探索时，将其染成黑色。这意味着，对于黑色的顶点，它是没有白色节点与之邻接的。灰色节点，有可能会存在白色节点与之邻接，需要进一步探索。\n\n此外，BFS算法使用了Vertex类的改进版。这种新的顶点类新增了3种实例变量，即distance,predecessor以及颜色。每个实例变量都有正确的getter和setter方法。这里就不作展示了，因为只是加了3个实例变量而已。\n\nBFS从起始顶点s开始，将start染成灰色来表示当前正在对其进行搜索。对于起始顶点，另外两个值，distance和predecessor分别被初始化为0和None。最后，start被放入1个Queue中。下一步便是系统地对队列前部的顶点进行搜索。所谓搜索，即是对队列前部的某1个节点的邻接列表作迭代。每当对邻接列表中的节点作处理时，先对其颜色进行判断。如果是白色的，则该节点尚未搜索过，于是执行以下4步操作：\n1. 将新的，未搜索的顶点nbr染成灰色。\n2. 将nbr的predecessor设置为当前节点currentVert。\n3. 到nbr的距离设为currentVert + 1。\n4. 将nbr放入队尾。将nbr放在队尾使得该节点只有在currentVert的邻接列表中的所有其它顶点都被搜索过了才会继续被搜索。\n\n**代码2**\n```Python\nfrom pythonds.graphs import Graph, Vertex\nfrom pythonds.basic import Queue\n\ndef bfs(g,start):\n  start.setDistance(0)\n  start.setPred(None)\n  vertQueue = Queue()\n  vertQueue.enqueue(start)\n  while (vertQueue.size() > 0):\n    currentVert = vertQueue.dequeue()\n    for nbr in currentVert.getConnections():\n      if (nbr.getColor() == 'white'):\n        nbr.setColor('gray')\n        nbr.setDistance(currentVert.getDistance() + 1)\n        nbr.setPred(currentVert)\n        vertQueue.enqueue(nbr)\n    currentVert.setColor('black')\n```\n现在来仔细研究下bfs函数是如何对图1构件宽度优先树的。从FOOL出发，将所有与FOOL邻接的节点连接到该树上。临近节点包括POOL，FOIL，FOUL和COOL。每个节点都放入了待搜索待新节点。图3给出了该操作中的树及完成后的队列。\n![../_images/bfs1.png](http://interactivepython.org/courselib/static/pythonds/_images/bfs1.png)\n\n\n接下来，bfs从队首去掉了下一个节点(POOL)，并对其所有邻接节点重复该操作。然而，当bfs检查到节点COOL时，它发现COOL的颜色已经是灰色了。这意味着有更短的路径到达COOL，并且COOL已经留在队列中以待进一步搜索。在对POOL进行监测时唯一新加入队列的是POLL。新状态如图4所示。\n\n![../_images/bfs2.png](http://interactivepython.org/courselib/static/pythonds/_images/bfs2.png)\n\n队列中的下一个顶点是FOIL。FOIL可以加入树的节点是FAIL，当bfs方法继续处理队列时，接下来两个节点都没有向树或者队列加入新的节点。图5展示的是对树的第二层所有顶点都探索完成了后的树和队列。\n\n![../_images/bfs3.png](http://interactivepython.org/courselib/static/pythonds/_images/bfs3.png)\n![../_images/bfsDone.png](http://interactivepython.org/courselib/static/pythonds/_images/bfsDone.png)\n\n读者应该自己动手过一遍该算法，以对该算法获得更好的理解。图6是图3中已完成所有顶点的搜索后的最终宽度优先搜索树。宽度优先搜索的惊人之处在于，它不仅解决了初始的FOOL-SAGE问题，也顺便解决了许多其它问题。从宽度优先搜索树中的任一节点出发，沿着父节点的箭头返回到根节点，便可以得到该单词变为FOOL的最短词梯。代码3沿着父节点链打印出了词梯：\n**代码3**\n```Python\ndef traverse(y):\n    x = y\n    while (x.getPred()):\n        print(x.getId())\n        x = x.getPred()\n    print(x.getId())\n\ntraverse(g.getVertex('sage'))\n```\n## 7.10 宽度优先搜索分析 ##\n\n在继续研究其它图算法前，先来分析一下宽度优先搜索算法的运行性能。首先应当观察到的是，图|V|中的每个顶点在循环中最多被处理一次，因为在进行监测和加入队列前，该顶点必须是白色的。因此整个循环为O(V)。嵌套在while中的for循环对图中的每条边最多执行1次，|E|，因此每个顶点最多出队1次并且只在节点u出队时才检查节点u到节点v的边，该for循环为O(E)。因此两个循环的最终结果是O(V+E)。\n\n当然，执行BFS仅完成了该任务的一部分。从起始节点出发到达目标顶点是该任务的另一部分。最坏情况是，该图是单链的。在这种情况下，遍历所有节点需要O(V)。正常情况下应该是|V|的某个分数，但时间复杂度不会变，仍然是O(V)。\n\n最后，至少对这哥问题而言，生成初始的图也需要时间，其时间复杂度的分析就作为练习了。\n\n## 7.11 骑士周游问题 ##\n\n起始周游是可以用来演示第二种常见图算法的经典问题。骑士周游问题是在国际象棋棋盘上仅使用1个棋子，即起始，该问题的目标是找到1个出棋序列使得骑士可以访问各个方格恰好1次。这样的序列被称为周游。起始周游问题多年来吸引了很多棋手、数学家和计算机科学家等。在8*8的棋盘上，可行的序列数的上界为$1.305\\times 10^{35}$。然而，还有很多时候会走到死棋的情况。当然，",[[1528249645501,["Re@Re.local",[[1,11063,"嗨哟"]],[11063,11063],[11065,11065]]],[1528249646275,["Re@Re.local",[[-1,11063,"嗨哟"]],[11065,11065],[11063,11063]]],[1528249649955,["Re@Re.local",[[1,11063,"还有很多是以后会"]],[11063,11063],[11071,11071]]],[1528249650784,["Re@Re.local",[[-1,11067,"是以后会"]],[11071,11071],[11067,11067]]],[1528249655972,["Re@Re.local",[[1,11067,"时候会走到死期"]],[11067,11067],[11074,11074]]],[1528249656075,["Re@Re.local",[[-1,11073,"期"]],[11074,11074],[11073,11073]]],[1528249657435,["Re@Re.local",[[1,11073,"棋。"]],[11073,11073],[11075,11075]]],[1528249737387,["Re@Re.local",[[1,11075,"在这种"]],[11075,11075],[11078,11078]]],[1528249743663,["Re@Re.local",[[-1,11069,"会走到死棋。在这种"]],[11078,11078],[11069,11069]]],[1528249752226,["Re@Re.local",[[1,11069,"会失败。显然"]],[11069,11069],[11075,11075]]],[1528249759708,["Re@Re.local",[[1,11075,"这厮一个"]],[11075,11075],[11079,11079]]],[1528249760213,["Re@Re.local",[[-1,11076,"厮一个"]],[11079,11079],[11076,11076]]],[1528249814758,["Re@Re.local",[[1,11076,"是yige "]],[11076,11076],[11082,11082]]],[1528249815925,["Re@Re.local",[[-1,11077,"yige "]],[11082,11082],[11077,11077]]],[1528249832920,["Re@Re.local",[[1,11079,"需要些智慧和计算力的问题。"]],[11079,11079],[11092,11092]]],[1528249833207,["Re@Re.local",[[1,11092,"\n\n"]],[11092,11092],[11093,11093]]],[1528249833440,["Re@Re.local",[[1,11094,"\n"]],[11093,11093],[11094,11094]]],[1528249835339,["Re@Re.local",[[-1,11094,"\n"],[1,11095,"虽然"]],[11094,11094],[11096,11096]]],[1528249838466,["Re@Re.local",[[-1,11094,"虽然"]],[11096,11096],[11094,11094]]],[1528249839008,["Re@Re.local",[[1,11094,"\n\n"]],[11094,11094],[11095,11095]]],[1528249839582,["Re@Re.local",[[-1,11095,"\n"]],[11095,11095],[11094,11094]]],[1528249844692,["Re@Re.local",[[-1,11094,"\n"],[1,11095,"学者已经梯"]],[11094,11094],[11099,11099]]],[1528249845058,["Re@Re.local",[[-1,11098,"梯"]],[11099,11099],[11098,11098]]],[1528249846457,["Re@Re.local",[[1,11072,"i 出"],[1,11098,"t"]],[11072,11072],[11075,11075]]],[1528249847164,["Re@Re.local",[[-1,11072,"i 出"],[-1,11101,"t"]],[11075,11075],[11072,11072]]],[1528249847641,["Re@Re.local",[[1,11098,"梯"]],[11098,11098],[11099,11099]]],[1528249848284,["Re@Re.local",[[1,11094,"\n"],[-1,11094,"学者已经梯"]],[11099,11099],[11094,11094]]],[1528249849200,["Re@Re.local",[[1,11095,"\n"]],[11094,11094],[11095,11095]]],[1528249849635,["Re@Re.local",[[-1,11095,"\n"]],[11095,11095],[11094,11094]]],[1528249861540,["Re@Re.local",[[-1,11094,"\n"],[1,11095,"学者已经提出了很多该问题的接发，图搜索是最"]],[11094,11094],[11115,11115]]],[1528249936780,[null,[[1,11077,"一个"],[-1,11092,"\n虽"]],[11077,11077],[11092,11092]]],[1528249936780,[null,[[-1,11077,"一个"],[1,11094,"\n虽"]],[11092,11092],[11077,11077]]],[1528249933315,["Re@Re.local",[[1,11115,"最容易理解和编程的。"]],[11115,11115],[11125,11125]]],[1528249996834,[null,[[1,11077,"一个"],[-1,11092,"\n虽"]],[11077,11077],[11092,11092]]],[1528249996835,[null,[[-1,11077,"一个"],[1,11094,"\n虽"]],[11092,11092],[11077,11077]]],[1528249941695,["Re@Re.local",[[1,11125,"同样地，用两种"]],[11125,11125],[11132,11132]]],[1528249943145,["Re@Re.local",[[-1,11129,"用两种"]],[11132,11132],[11129,11129]]],[1528249945975,["Re@Re.local",[[1,11129,"分两部来"]],[11129,11129],[11133,11133]]],[1528249946178,["Re@Re.local",[[-1,11132,"来"]],[11133,11133],[11132,11132]]],[1528249947239,["Re@Re.local",[[1,11093,"唉"]],[11093,11093],[11094,11094]]],[1528249947330,["Re@Re.local",[[-1,11093,"唉"]],[11094,11094],[11093,11093]]],[1528249949137,["Re@Re.local",[[-1,11130,"两部"]],[11132,11132],[11130,11130]]],[1528249953026,["Re@Re.local",[[1,11130,"两步来解决该"]],[11130,11130],[11136,11136]]],[1528249953568,["Re@Re.local",[[-1,11133,"解决该"]],[11136,11136],[11133,11133]]],[1528249955683,["Re@Re.local",[[1,11133,"求解："]],[11133,11133],[11136,11136]]],[1528249955916,["Re@Re.local",[[1,11136,"\n\n"]],[11136,11136],[11137,11137]]],[1528249967000,["Re@Re.local",[[-1,11137,"\n"],[1,11138,"- 将其实"]],[11137,11137],[11142,11142]]],[1528249967477,["Re@Re.local",[[-1,11140,"其实"]],[11142,11142],[11140,11140]]],[1528249983956,["Re@Re.local",[[1,11140,"骑士在棋盘上符合规则的移动以图表示。"]],[11140,11140],[11158,11158]]],[1528249985608,["Re@Re.local",[[1,11158,"\n\n"]],[11158,11158],[11159,11159]]],[1528249996664,["Re@Re.local",[[-1,11159,"\n"],[1,11160,"- 使用图算法来找到长度为"]],[11159,11159],[11172,11172]]],[1528250056840,[null,[[1,11077,"一个"],[-1,11092,"\n虽"]],[11077,11077],[11092,11092]]],[1528250056840,[null,[[-1,11077,"一个"],[1,11094,"\n虽"]],[11092,11092],[11077,11077]]],[1528250003124,["Re@Re.local",[[1,11172,"$rows\\times columns "]],[11172,11172],[11192,11192]]],[1528250003552,["Re@Re.local",[[-1,11191," "]],[11192,11192],[11191,11191]]],[1528250012125,["Re@Re.local",[[1,11191,"-1$的路径，其中每个顶点"]],[11191,11191],[11204,11204]]],[1528250013442,["Re@Re.local",[[-1,11198,"其中每个顶点"]],[11204,11204],[11198,11198]]],[1528250014081,["Re@Re.local",[[1,11198,"图"]],[11198,11198],[11199,11199]]],[1528250014172,["Re@Re.local",[[-1,11198,"图"]],[11199,11199],[11198,11198]]],[1528250017213,["Re@Re.local",[[1,11198,"其中涂上"]],[11198,11198],[11202,11202]]],[1528250017985,["Re@Re.local",[[-1,11200,"涂上"]],[11202,11202],[11200,11200]]],[1528250027393,["Re@Re.local",[[1,11200,"图上的每个点都访问且"]],[11200,11200],[11210,11210]]],[1528250028002,["Re@Re.local",[[-1,11207,"访问且"]],[11210,11210],[11207,11207]]],[1528250033857,["Re@Re.local",[[1,11207,"恰好只访问"]],[11207,11207],[11212,11212]]],[1528250037603,["Re@Re.local",[[-1,11200,"图上的每"]],[11204,11204],[11200,11200]]],[1528250038990,["Re@Re.local",[[-1,11200,"个点"]],[11202,11202],[11200,11200]]],[1528250040641,["Re@Re.local",[[1,11200,"每个顶点"]],[11200,11200],[11204,11204]]],[1528250043704,["Re@Re.local",[[1,11210,"1次。"]],[11210,11210],[11213,11213]]],[1528250043940,["Re@Re.local",[[1,11213,"\n\n"]],[11213,11213],[11214,11214]]],[1528250044167,["Re@Re.local",[[1,11215,"\n"]],[11214,11214],[11215,11215]]],[1528250056467,["Re@Re.local",[[-1,11215,"\n"],[1,11216,"## 7.12 生成"]],[11215,11215],[11225,11225]]],[1528250117741,[null,[[1,11077,"一个"],[-1,11092,"\n虽"]],[11077,11077],[11092,11092]]],[1528250117741,[null,[[-1,11077,"一个"],[1,11094,"\n虽"]],[11092,11092],[11077,11077]]],[1528250063527,["Re@Re.local",[[1,11225,"骑士周游图 ##"]],[11225,11225],[11233,11233]]],[1528250063773,["Re@Re.local",[[1,11233,"\n\n"]],[11233,11233],[11234,11234]]],[1528250064748,["Re@Re.local",[[1,11235,"\n"]],[11234,11234],[11235,11235]]],[1528250071856,["Re@Re.local",[[-1,11235,"\n"],[1,11236,"为了表示"]],[11235,11235],[11239,11239]]],[1528250072153,["Re@Re.local",[[-1,11237,"表示"]],[11239,11239],[11237,11237]]],[1528250075377,["Re@Re.local",[[1,11237,"将骑士皱纹"]],[11237,11237],[11242,11242]]],[1528250075677,["Re@Re.local",[[-1,11240,"皱纹"]],[11242,11242],[11240,11240]]],[1528250086969,["Re@Re.local",[[1,11240,"周游问题表示为图，使用以下两种思想。每个"]],[11240,11240],[11260,11260]]],[1528250087408,["Re@Re.local",[[-1,11257,"。每个"]],[11260,11260],[11257,11257]]],[1528250089155,["Re@Re.local",[[1,11257,"：每个"]],[11257,11257],[11260,11260]]],[1528250089395,["Re@Re.local",[[-1,11258,"每个"]],[11260,11260],[11258,11258]]],[1528250100066,["Re@Re.local",[[1,11258,"棋盘上的每个方格都被表示为图中的一个节点。每个"]],[11258,11258],[11281,11281]]],[1528250177775,[null,[[1,11077,"一个"],[-1,11092,"\n虽"]],[11077,11077],[11092,11092]]],[1528250177775,[null,[[-1,11077,"一个"],[1,11094,"\n虽"]],[11092,11092],[11077,11077]]],[1528250158649,["Re@Re.local",[[-1,11278,"。每个"]],[11281,11281],[11278,11278]]],[1528250171950,["Re@Re.local",[[1,11278,"；每个合法的移动"]],[11278,11278],[11286,11286]]],[1528250174177,["Re@Re.local",[[-1,11279,"每个合法的移动"]],[11286,11286],[11279,11279]]],[1528250175795,["Re@Re.local",[[1,11279,"其实"]],[11279,11279],[11281,11281]]],[1528250176261,["Re@Re.local",[[-1,11279,"其实"]],[11281,11281],[11279,11279]]],[1528250177485,["Re@Re.local",[[1,11279,"骑士的"]],[11279,11279],[11282,11282]]],[1528250239012,[null,[[1,11077,"一个"],[-1,11092,"\n虽"]],[11077,11077],[11092,11092]]],[1528250239012,[null,[[-1,11077,"一个"],[1,11094,"\n虽"]],[11092,11092],[11077,11077]]],[1528250187703,["Re@Re.local",[[1,11282,"每个合法的移动都被标记为图中的变"]],[11282,11282],[11298,11298]]],[1528250187930,["Re@Re.local",[[-1,11297,"变"]],[11298,11298],[11297,11297]]],[1528250211973,["Re@Re.local",[[1,11297,"边。图1是骑士的1中合理"]],[11297,11297],[11309,11309]]],[1528250212243,["Re@Re.local",[[-1,11307,"合理"]],[11309,11309],[11307,11307]]],[1528250214107,["Re@Re.local",[[1,11307,"合法走法"]],[11307,11307],[11311,11311]]],[1528250214996,["Re@Re.local",[[-1,11307,"合法走法"]],[11311,11311],[11307,11307]]],[1528250225750,["Re@Re.local",[[1,11307,"合规走法，并给出了其对应的在图中的边。"]],[11307,11307],[11326,11326]]],[1528250226098,["Re@Re.local",[[1,11326,"\n\n"]],[11326,11326],[11327,11327]]],[1528250226418,["Re@Re.local",[[1,11328,"\n"]],[11327,11327],[11328,11328]]],[1528250230006,["Re@Re.local",[[1,11328,"![../_images/knightmoves.png](http://interactivepython.org/courselib/static/pythonds/_images/knightmoves.png)"]],[11328,11328],[11437,11437]]],[1528250230303,["Re@Re.local",[[1,11438,"\n"]],[11437,11437],[11438,11438]]],[1528250230522,["Re@Re.local",[[1,11439,"\n"]],[11438,11438],[11439,11439]]],[1528250235200,["Re@Re.local",[[-1,11439,"\n"],[1,11440,"为了对"]],[11439,11439],[11442,11442]]],[1528250299023,[null,[[1,11077,"一个"],[-1,11092,"\n虽"]],[11077,11077],[11092,11092]]],[1528250299024,[null,[[-1,11077,"一个"],[1,11094,"\n虽"]],[11092,11092],[11077,11077]]],[1528250243043,["Re@Re.local",[[1,11442,"$n*"]],[11442,11442],[11445,11445]]],[1528250243380,["Re@Re.local",[[-1,11444,"*"]],[11445,11445],[11444,11444]]],[1528250244282,["Re@Re.local",[[1,11444,"\\e"]],[11444,11444],[11446,11446]]],[1528250244573,["Re@Re.local",[[-1,11445,"e"]],[11446,11446],[11445,11445]]],[1528250244950,["Re@Re.local",[[1,11445,"te"]],[11445,11445],[11447,11447]]],[1528250245886,["Re@Re.local",[[-1,11446,"e"]],[11447,11447],[11446,11446]]],[1528250257384,["Re@Re.local",[[1,11446,"imes n$的棋盘使用Python函数"]],[11446,11446],[11466,11466]]],[1528250259918,["Re@Re.local",[[-1,11456,"使用Python函数"]],[11466,11466],[11456,11456]]],[1528250266837,["Re@Re.local",[[1,11456,"生成图，其"]],[11456,11456],[11461,11461]]],[1528250270757,["Re@Re.local",[[-1,11439,"为了"]],[11441,11441],[11439,11439]]],[1528250271669,["Re@Re.local",[[-1,11458,"其"]],[11459,11459],[11458,11458]]],[1528250271703,["Re@Re.local",[[1,11458,"="]],[11458,11458],[11459,11459]]],[1528250272708,["Re@Re.local",[[-1,11458,"="]],[11459,11459],[11458,11458]]],[1528250273038,["Re@Re.local",[[1,11458,"其"]],[11458,11458],[11459,11459]]],[1528250274585,["Re@Re.local",[[-1,11439,"对"]],[11440,11440],[11439,11439]]],[1528250275220,["Re@Re.local",[[1,11439,"为"]],[11439,11439],[11440,11440]]],[1528250281929,["Re@Re.local",[[1,11459,"代码如代码1所示"]],[11459,11459],[11467,11467]]],[1528250284336,["Re@Re.local",[[1,11459,"PYthion"]],[11459,11459],[11466,11466]]],[1528250285420,["Re@Re.local",[[-1,11460,"Ythion"]],[11466,11466],[11460,11460]]],[1528250286286,["Re@Re.local",[[1,11460,"ython"]],[11460,11460],[11465,11465]]],[1528250295380,["Re@Re.local",[[1,11473,"。knightGraph函数"]],[11473,11473],[11487,11487]]],[1528250359060,[null,[[1,11077,"一个"],[-1,11092,"\n虽"]],[11077,11077],[11092,11092]]],[1528250359060,[null,[[-1,11077,"一个"],[1,11094,"\n虽"]],[11092,11092],[11077,11077]]],[1528250324475,["Re@Re.local",[[1,11487,"遍历"]],[11487,11487],[11489,11489]]],[1528250324874,["Re@Re.local",[[-1,11487,"遍历"]],[11489,11489],[11487,11487]]],[1528250333414,["Re@Re.local",[[1,11487,"对整个棋盘作1次遍历，每个"]],[11487,11487],[11500,11500]]],[1528250334651,["Re@Re.local",[[-1,11498,"每个"]],[11500,11500],[11498,11498]]],[1528250337248,["Re@Re.local",[[1,11498,"在每个"]],[11498,11498],[11501,11501]]],[1528250337572,["Re@Re.local",[[-1,11499,"每个"]],[11501,11501],[11499,11499]]],[1528250340142,["Re@Re.local",[[1,11499,"棋盘上的每一个"]],[11499,11499],[11506,11506]]],[1528250340769,["Re@Re.local",[[-1,11504,"一个"]],[11506,11506],[11504,11504]]],[1528250346953,["Re@Re.local",[[1,11504,"1个方格，调用"]],[11504,11504],[11511,11511]]],[1528250347320,["Re@Re.local",[[-1,11509,"调用"]],[11511,11511],[11509,11509]]],[1528250351799,["Re@Re.local",[[1,11509,"kinightGraphhan"]],[11509,11509],[11524,11524]]],[1528250352493,["Re@Re.local",[[-1,11521,"han"]],[11524,11524],[11521,11521]]],[1528250358887,["Re@Re.local",[[1,11521,"函数都调用1个辅助函数genL"]],[11521,11521],[11536,11536]]],[1528250419274,[null,[[1,11077,"一个"],[-1,11092,"\n虽"]],[11077,11077],[11092,11092]]],[1528250419274,[null,[[-1,11077,"一个"],[1,11094,"\n虽"]],[11092,11092],[11077,11077]]],[1528250368944,["Re@Re.local",[[1,11537,"galMoves，为棋盘上的该节点的"]],[11537,11537],[11555,11555]]],[1528250369498,["Re@Re.local",[[-1,11554,"的"]],[11555,11555],[11554,11554]]],[1528250370423,["Re@Re.local",[[1,11554,"出"]],[11554,11554],[11555,11555]]],[1528250370679,["Re@Re.local",[[-1,11554,"出"]],[11555,11555],[11554,11554]]],[1528250418643,["Re@Re.local",[[1,11554,"处的合法走法生成1个列表。图中的所有合法走法最后都被"]],[11554,11554],[11580,11580]]],[1528250479070,[null,[[1,11077,"一个"],[-1,11092,"\n虽"],[1,11536,"e"],[-1,11553,"的"]],[11077,11077],[11553,11553]]],[1528250479070,[null,[[-1,11077,"一个"],[1,11094,"\n虽"],[-1,11536,"e"],[1,11554,"的"]],[11553,11553],[11077,11077]]],[1528250430386,["Re@Re.local",[[1,11580,"转换成了边。另一个辅助函数，posToNodeID"]],[11580,11580],[11605,11605]]],[1528250430927,["Re@Re.local",[[-1,11604,"D"]],[11605,11605],[11604,11604]]],[1528250464679,["Re@Re.local",[[1,11604,"d将棋盘上的1个位置转换"]],[11604,11604],[11616,11616]]],[1528250465126,["Re@Re.local",[[-1,11614,"转换"]],[11616,11616],[11614,11614]]],[1528250472494,["Re@Re.local",[[1,11614,"按照行、列的形式转"]],[11614,11614],[11623,11623]]],[1528250474356,["Re@Re.local",[[-1,11616,"行、列的形式转"]],[11623,11623],[11616,11616]]],[1528250478868,["Re@Re.local",[[1,11616,"其行列转换"]],[11616,11616],[11621,11621]]],[1528250539063,[null,[[1,11077,"一个"],[-1,11092,"\n虽"],[1,11536,"e"],[-1,11553,"的"]],[11077,11077],[11553,11553]]],[1528250539063,[null,[[-1,11077,"一个"],[1,11094,"\n虽"],[-1,11536,"e"],[1,11554,"的"]],[11553,11553],[11077,11077]]],[1528250479548,["Re@Re.local",[[-1,11619,"转"]],[11620,11620],[11619,11619]]],[1528250486434,["Re@Re.local",[[1,11619,"转换为现行"]],[11619,11619],[11624,11624]]],[1528250486871,["Re@Re.local",[[-1,11622,"现行"]],[11624,11624],[11622,11622]]],[1528250491718,["Re@Re.local",[[1,11622,"线性节点数"]],[11622,11622],[11627,11627]]],[1528250496886,["Re@Re.local",[[-1,11626,"数"]],[11627,11627],[11626,11626]]],[1528250504062,["Re@Re.local",[[1,11626,"编号，如图1所示。"]],[11626,11626],[11635,11635]]],[1528250507208,["Re@Re.local",[[1,11635,"\n\n"]],[11635,11635],[11636,11636]]],[1528250507572,["Re@Re.local",[[1,11637,"\n"]],[11636,11636],[11637,11637]]],[1528250513590,["Re@Re.local",[[-1,11637,"\n"],[1,11638,"**代码1**"]],[11637,11637],[11644,11644]]],[1528250513846,["Re@Re.local",[[1,11644,"\n\n"]],[11644,11644],[11645,11645]]],[1528250515876,["Re@Re.local",[[-1,11645,"\n"],[1,11646,"```Python"]],[11645,11645],[11654,11654]]],[1528250520802,["Re@Re.local",[[1,11654,"\n\nfrom pythonds.graphs import Graph\n\ndef knightGraph(bdSize):\n    ktGraph = Graph()\n    for row in range(bdSize):\n       for col in range(bdSize):\n           nodeId = posToNodeId(row,col,bdSize)\n           newPositions = genLegalMoves(row,col,bdSize)\n           for e in newPositions:\n               nid = posToNodeId(e[0],e[1],bdSize)\n               ktGraph.addEdge(nodeId,nid)\n    return ktGraph\n\ndef posToNodeId(row, column, board_size):\n    return (row * board_size) + column"]],[11654,11654],[12132,12132]]],[1528250521314,["Re@Re.local",[[1,12133,"\n"]],[12132,12132],[12133,12133]]],[1528250521978,["Re@Re.local",[[-1,12133,"\n"],[1,12134,"```"]],[12133,12133],[12136,12136]]],[1528250522197,["Re@Re.local",[[1,12136,"\n\n"]],[12136,12136],[12137,12137]]],[1528250534223,["Re@Re.local",[[-1,12137,"\n"],[1,12138,"代码2中的genLeagalMove函数将骑士"]],[12137,12137],[12160,12160]]],[1528250534522,["Re@Re.local",[[-1,12158,"骑士"]],[12160,12160],[12158,12158]]],[1528250538360,["Re@Re.local",[[1,12158,"以骑士的位置作为"]],[12158,12158],[12166,12166]]],[1528250599272,[null,[[1,11077,"一个"],[-1,11092,"\n虽"],[1,11536,"e"],[-1,11553,"的"],[-1,11655,"\n"],[1,12133,"\n"],[-1,12166,"换"]],[11077,11077],[12166,12166]]],[1528250599273,[null,[[-1,11077,"一个"],[1,11094,"\n虽"],[-1,11536,"e"],[1,11554,"的"],[1,11655,"\n"],[-1,12132,"\n"],[1,12166,"换"]],[12166,12166],[11077,11077]]],[1528250542716,["Re@Re.local",[[1,12166,"参数，并未每个"]],[12166,12166],[12173,12173]]],[1528250558902,["Re@Re.local",[[-1,12168,"，并未每个"]],[12173,12173],[12168,12168]]],[1528250575437,["Re@Re.local",[[1,12168,"，并创建了可能的8个走法。legalCoord辅助函数用来保证"]],[12168,12168],[12199,12199]]],[1528250590185,["Re@Re.local",[[-1,12197,"保证"]],[12199,12199],[12197,12197]]],[1528250593010,["Re@Re.local",[[1,12197,"确认床"]],[12197,12197],[12200,12200]]],[1528250593180,["Re@Re.local",[[-1,12199,"床"]],[12200,12200],[12199,12199]]],[1528250597064,["Re@Re.local",[[1,12199,"创建某个"]],[12199,12199],[12203,12203]]],[1528250597353,["Re@Re.local",[[-1,12201,"某个"]],[12203,12203],[12201,12201]]],[1528250598561,["Re@Re.local",[[1,12201,"的某个"]],[12201,12201],[12204,12204]]],[1528250669398,[null,[[1,11077,"一个"],[-1,11092,"\n虽"],[1,11536,"e"],[-1,11553,"的"],[-1,11655,"\n"],[1,12133,"\n"],[-1,12204,"换"]],[11077,11077],[12204,12204]]],[1528250669399,[null,[[-1,11077,"一个"],[1,11094,"\n虽"],[-1,11536,"e"],[1,11554,"的"],[1,11655,"\n"],[-1,12132,"\n"],[1,12204,"换"]],[12204,12204],[11077,11077]]],[1528250605379,["Re@Re.local",[[1,12206,"是在棋盘内的。"]],[12206,12206],[12213,12213]]],[1528250911403,[null,[[1,11077,"一个"],[-1,11092,"\n虽"],[1,11536,"e"],[-1,11553,"的"],[-1,11655,"\n"],[1,12133,"\n"],[-1,12204,"换"],[1,12205,"走法"]],[11077,11077],[12207,12207]]],[1528250911404,[null,[[-1,11077,"一个"],[1,11094,"\n虽"],[-1,11536,"e"],[1,11554,"的"],[1,11655,"\n"],[-1,12132,"\n"],[1,12204,"换"],[-1,12204,"走法"]],[12207,12207],[11077,11077]]],[1528250884953,["Re@Re.local",[[-1,12197,"确认"]],[12199,12199],[12197,12197]]],[1528250886175,["Re@Re.local",[[1,12197,"保证"]],[12197,12197],[12199,12199]]],[1528251031426,[null,[[1,11077,"一个"],[-1,11092,"\n虽"],[1,11536,"e"],[-1,11553,"的"],[-1,11655,"\n"],[1,12133,"\n"],[-1,12204,"换"],[1,12205,"走法"]],[11077,11077],[12207,12207]]],[1528251031426,[null,[[-1,11077,"一个"],[1,11094,"\n虽"],[-1,11536,"e"],[1,11554,"的"],[1,11655,"\n"],[-1,12132,"\n"],[1,12204,"换"],[-1,12204,"走法"]],[12207,12207],[11077,11077]]],[1528251021111,["Re@Re.local",[[1,12213,"该图红"]],[12213,12213],[12216,12216]]],[1528251023541,["Re@Re.local",[[-1,12215,"红"]],[12216,12216],[12215,12215]]],[1528251029624,["Re@Re.local",[[1,12215,"中有336条边注意"]],[12215,12215],[12224,12224]]],[1528251091374,[null,[[1,11077,"一个"],[-1,11092,"\n虽"],[1,11536,"e"],[-1,11553,"的"],[-1,11655,"\n"],[1,12133,"\n"],[-1,12204,"换"],[1,12205,"走法"],[-1,12214,"红"]],[11077,11077],[12214,12214]]],[1528251091374,[null,[[-1,11077,"一个"],[1,11094,"\n虽"],[-1,11536,"e"],[1,11554,"的"],[1,11655,"\n"],[-1,12132,"\n"],[1,12204,"换"],[-1,12204,"走法"],[1,12215,"红"]],[12214,12214],[11077,11077]]],[1528251053021,["Re@Re.local",[[-1,12222,"注意"]],[12224,12224],[12222,12222]]],[1528251053655,["Re@Re.local",[[1,12222,"。"]],[12222,12222],[12223,12223]]],[1528251054110,["Re@Re.local",[[-1,12222,"。"]],[12223,12223],[12222,12222]]],[1528251063174,["Re@Re.local",[[1,12222,"，并且可以发现，棋盘边缘的顶点的"]],[12222,12222],[12238,12238]]],[1528251063459,["Re@Re.local",[[-1,12237,"的"]],[12238,12238],[12237,12237]]],[1528251071229,["Re@Re.local",[[1,12237,"的边树"]],[12237,12237],[12240,12240]]],[1528251071362,["Re@Re.local",[[-1,12239,"树"]],[12240,12240],[12239,12239]]],[1528251073658,["Re@Re.local",[[1,12239,"合法"]],[12239,12239],[12241,12241]]],[1528251074101,["Re@Re.local",[[-1,12238,"边合法"]],[12241,12241],[12238,12238]]],[1528251076339,["Re@Re.local",[[1,12238,"合法走法"]],[12238,12238],[12242,12242]]],[1528251077039,["Re@Re.local",[[-1,12238,"合法走法"]],[12242,12242],[12238,12238]]],[1528251087673,["Re@Re.local",[[1,12238,"合规走法比棋盘内部的顶点少。"]],[12238,12238],[12252,12252]]],[1528251159077,[null,[[1,11077,"一个"],[-1,11092,"\n虽"],[1,11536,"e"],[-1,11553,"的"],[-1,11655,"\n"],[1,12133,"\n"],[-1,12204,"换"],[1,12205,"走法"],[-1,12214,"红"]],[11077,11077],[12214,12214]]],[1528251159077,[null,[[-1,11077,"一个"],[1,11094,"\n虽"],[-1,11536,"e"],[1,11554,"的"],[1,11655,"\n"],[-1,12132,"\n"],[1,12204,"换"],[-1,12204,"走法"],[1,12215,"红"]],[12214,12214],[11077,11077]]],[1528251093282,["Re@Re.local",[[-1,12251,"。"]],[12252,12252],[12251,12251]]],[1528251123286,["Re@Re.local",[[1,12251,"，此外该棋盘是稀疏的，填充率只有8.2%。"]],[12251,12251],[12272,12272]]],[1528251219131,[null,[[1,11077,"一个"],[-1,11092,"\n虽"],[1,11536,"e"],[-1,11553,"的"],[-1,11655,"\n"],[1,12133,"\n"],[-1,12204,"换"],[1,12205,"走法"],[-1,12214,"红"]],[11077,11077],[12214,12214]]],[1528251219131,[null,[[-1,11077,"一个"],[1,11094,"\n虽"],[-1,11536,"e"],[1,11554,"的"],[1,11655,"\n"],[-1,12132,"\n"],[1,12204,"换"],[-1,12204,"走法"],[1,12215,"红"]],[12214,12214],[11077,11077]]],[1528251190108,["Re@Re.local",[[1,12272,"\n\n"]],[12272,12272],[12273,12273]]],[1528251190523,["Re@Re.local",[[1,12274,"\n"]],[12273,12273],[12274,12274]]],[1528251190741,["Re@Re.local",[[1,12274,"![../_images/bigknight.png](http://interactivepython.org/courselib/static/pythonds/_images/bigknight.png)"]],[12274,12274],[12379,12379]]],[1528251191669,["Re@Re.local",[[1,12380,"\n"]],[12379,12379],[12380,12380]]],[1528251192038,["Re@Re.local",[[1,12381,"\n"]],[12380,12380],[12381,12381]]],[1528251203872,["Re@Re.local",[[-1,12381,"\n"],[1,12382,"## 7.13 实现其实"]],[12381,12381],[12393,12393]]],[1528251204270,["Re@Re.local",[[-1,12391,"其实"]],[12393,12393],[12391,12391]]],[1528251208664,["Re@Re.local",[[1,12391,"骑士周游 ##"]],[12391,12391],[12398,12398]]],[1528251209227,["Re@Re.local",[[1,12398,"\n\n"]],[12398,12398],[12399,12399]]],[1528251209459,["Re@Re.local",[[1,12400,"\n"]],[12399,12399],[12400,12400]]],[1528251213759,["Re@Re.local",[[-1,12400,"\n"]],[12400,12400],[0,0]]],[1528251214555,["Re@Re.local",[[1,12400,"\n\n"]],[12400,12400],[12401,12401]]],[1528251215324,["Re@Re.local",[[-1,12401,"\n"]],[12401,12401],[12400,12400]]],[1528251218912,["Re@Re.local",[[-1,12400,"\n"],[1,12401,"解决"]],[12400,12400],[12402,12402]]],[1528251281965,[null,[[1,11077,"一个"],[-1,11092,"\n虽"],[1,11536,"e"],[-1,11553,"的"],[-1,11655,"\n"],[1,12133,"\n"],[-1,12204,"换"],[1,12205,"走法"],[-1,12214,"红"]],[11077,11077],[12214,12214]]],[1528251281965,[null,[[-1,11077,"一个"],[1,11094,"\n虽"],[-1,11536,"e"],[1,11554,"的"],[1,11655,"\n"],[-1,12132,"\n"],[1,12204,"换"],[-1,12204,"走法"],[1,12215,"红"]],[12214,12214],[11077,11077]]],[1528251225828,["Re@Re.local",[[1,12402,"骑士周游问题将使用舍"]],[12402,12402],[12412,12412]]],[1528251225881,["Re@Re.local",[[-1,12411,"舍"]],[12412,12412],[12411,12411]]],[1528251237386,["Re@Re.local",[[1,12411,"**深度优先搜索（depth first search）**。"]],[12411,12411],[12442,12442]]],[1528251237975,["Re@Re.local",[[-1,12441,"。"]],[12442,12442],[12441,12441]]],[1528251238348,["Re@Re.local",[[1,12441,"，"]],[12441,12441],[12442,12442]]],[1528251238758,["Re@Re.local",[[-1,12441,"，"]],[12442,12442],[12441,12441]]],[1528251239043,["Re@Re.local",[[1,12441,"。"]],[12441,12441],[12442,12442]]],[1528251342149,[null,[[1,11077,"一个"],[-1,11092,"\n虽"],[1,11536,"e"],[-1,11553,"的"],[-1,11655,"\n"],[1,12133,"\n"],[-1,12204,"换"],[1,12205,"走法"],[-1,12214,"红"]],[11077,11077],[12214,12214]]],[1528251342150,[null,[[-1,11077,"一个"],[1,11094,"\n虽"],[-1,11536,"e"],[1,11554,"的"],[1,11655,"\n"],[-1,12132,"\n"],[1,12204,"换"],[-1,12204,"走法"],[1,12215,"红"]],[12214,12214],[11077,11077]]],[1528251311028,["Re@Re.local",[[1,12442,"当"]],[12442,12442],[12443,12443]]],[1528251312593,["Re@Re.local",[[-1,12442,"当"]],[12443,12443],[12442,12442]]],[1528251337401,["Re@Re.local",[[1,12442,"上一节套"]],[12442,12442],[12446,12446]]],[1528251337860,["Re@Re.local",[[-1,12445,"套"]],[12446,12446],[12445,12445]]],[1528251341247,["Re@Re.local",[[1,12445,"讨论的宽度"]],[12445,12445],[12450,12450]]],[1528251402136,[null,[[1,11077,"一个"],[-1,11092,"\n虽"],[1,11536,"e"],[-1,11553,"的"],[-1,11655,"\n"],[1,12133,"\n"],[-1,12204,"换"],[1,12205,"走法"],[-1,12214,"红"]],[11077,11077],[12214,12214]]],[1528251402136,[null,[[-1,11077,"一个"],[1,11094,"\n虽"],[-1,11536,"e"],[1,11554,"的"],[1,11655,"\n"],[-1,12132,"\n"],[1,12204,"换"],[-1,12204,"走法"],[1,12215,"红"]],[12214,12214],[11077,11077]]],[1528251352529,["Re@Re.local",[[1,12452,"搜索算法为每层"]],[12452,12452],[12459,12459]]],[1528251362910,["Re@Re.local",[[-1,12457,"每层"]],[12459,12459],[12457,12457]]],[1528251367749,["Re@Re.local",[[1,12457,"每一层"]],[12457,12457],[12460,12460]]],[1528251368247,["Re@Re.local",[[-1,12457,"每一层"]],[12460,12460],[12457,12457]]],[1528251376995,["Re@Re.local",[[1,12457,"树的每一层建立"]],[12457,12457],[12464,12464]]],[1528251385812,["Re@Re.local",[[-1,12456,"为树的每一层建立"]],[12464,12464],[12456,12456]]],[1528251401278,["Re@Re.local",[[1,12456,"是一次为搜索树建立一层，而深度"]],[12456,12456],[12471,12471]]],[1528251461947,[null,[[1,11077,"一个"],[-1,11092,"\n虽"],[1,11536,"e"],[-1,11553,"的"],[-1,11655,"\n"],[1,12133,"\n"],[-1,12204,"换"],[1,12205,"走法"],[-1,12214,"红"],[1,12450,"优先"],[-1,12454,"为每"]],[11077,11077],[12454,12454]]],[1528251461947,[null,[[-1,11077,"一个"],[1,11094,"\n虽"],[-1,11536,"e"],[1,11554,"的"],[1,11655,"\n"],[-1,12132,"\n"],[1,12204,"换"],[-1,12204,"走法"],[1,12215,"红"],[-1,12450,"优先"],[1,12456,"为每"]],[12454,12454],[11077,11077]]],[1528251405662,["Re@Re.local",[[1,12473,"算法为树"]],[12473,12473],[12477,12477]]],[1528251408047,["Re@Re.local",[[-1,12475,"为树"]],[12477,12477],[12475,12475]]],[1528251457495,["Re@Re.local",[[1,12475,"则尽量"]],[12475,12475],[12478,12478]]],[1528251521892,[null,[[1,11077,"一个"],[-1,11092,"\n虽"],[1,11536,"e"],[-1,11553,"的"],[-1,11655,"\n"],[1,12133,"\n"],[-1,12204,"换"],[1,12205,"走法"],[-1,12214,"红"],[1,12450,"优先"],[-1,12454,"为每"],[1,12471,"优先"],[-1,12473,"为树"]],[11077,11077],[12473,12473]]],[1528251521892,[null,[[-1,11077,"一个"],[1,11094,"\n虽"],[-1,11536,"e"],[1,11554,"的"],[1,11655,"\n"],[-1,12132,"\n"],[1,12204,"换"],[-1,12204,"走法"],[1,12215,"红"],[-1,12450,"优先"],[1,12456,"为每"],[-1,12471,"优先"],[1,12475,"为树"]],[12473,12473],[11077,11077]]],[1528251468605,["Re@Re.local",[[1,12478,"向枝的深处走"]],[12478,12478],[12484,12484]]],[1528251469016,["Re@Re.local",[[-1,12483,"走"]],[12484,12484],[12483,12483]]],[1528251470451,["Re@Re.local",[[1,12483,"搜索。"]],[12483,12483],[12486,12486]]],[1528251489973,["Re@Re.local",[[-1,12485,"。"]],[12486,12486],[12485,12485]]],[1528251490419,["Re@Re.local",[[1,12485,"，"]],[12485,12485],[12486,12486]]],[1528251490887,["Re@Re.local",[[-1,12485,"，"]],[12486,12486],[12485,12485]]],[1528251505703,["Re@Re.local",[[1,12485,"。本节介绍两种实现深度"]],[12485,12485],[12496,12496]]],[1528251506566,["Re@Re.local",[[-1,12494,"深度"]],[12496,12496],[12494,12494]]],[1528251518069,["Re@Re.local",[[1,12494,"DFS算法的"]],[12494,12494],[12500,12500]]],[1528251521536,["Re@Re.local",[[-1,12496,"S算法的"]],[12500,12500],[12496,12496]]],[1528251581910,[null,[[1,11077,"一个"],[-1,11092,"\n虽"],[1,11536,"e"],[-1,11553,"的"],[-1,11655,"\n"],[1,12133,"\n"],[-1,12204,"换"],[1,12205,"走法"],[-1,12214,"红"],[1,12450,"优先"],[-1,12454,"为每"],[1,12471,"优先"],[-1,12473,"为树"]],[11077,11077],[12473,12473]]],[1528251581910,[null,[[-1,11077,"一个"],[1,11094,"\n虽"],[-1,11536,"e"],[1,11554,"的"],[1,11655,"\n"],[-1,12132,"\n"],[1,12204,"换"],[-1,12204,"走法"],[1,12215,"红"],[-1,12450,"优先"],[1,12456,"为每"],[-1,12471,"优先"],[1,12475,"为树"]],[12473,12473],[11077,11077]]],[1528251561589,["Re@Re.local",[[1,12496,"S的算法。第1个算法是专用来枝"]],[12496,12496],[12511,12511]]],[1528251562833,["Re@Re.local",[[-1,12506,"是专用来枝"]],[12511,12511],[12506,12506]]],[1528251568804,["Re@Re.local",[[1,12506,"是专门用来解决其实周"]],[12506,12506],[12516,12516]]],[1528251569318,["Re@Re.local",[[-1,12513,"其实周"]],[12516,12516],[12513,12513]]],[1528251575213,["Re@Re.local",[[1,12513,"骑士周游问题的，它，"]],[12513,12513],[12523,12523]]],[1528251575858,["Re@Re.local",[[-1,12522,"，"]],[12523,12523],[12522,12522]]],[1528251580871,["Re@Re.local",[[1,12522,"禁止各节点"]],[12522,12522],[12527,12527]]],[1528251581563,["Re@Re.local",[[-1,12523,"止各节点"]],[12527,12527],[12523,12523]]],[1528251641906,[null,[[1,11077,"一个"],[-1,11092,"\n虽"],[1,11536,"e"],[-1,11553,"的"],[-1,11655,"\n"],[1,12133,"\n"],[-1,12204,"换"],[1,12205,"走法"],[-1,12214,"红"],[1,12450,"优先"],[-1,12454,"为每"],[1,12471,"优先"],[-1,12473,"为树"]],[11077,11077],[12473,12473]]],[1528251641907,[null,[[-1,11077,"一个"],[1,11094,"\n虽"],[-1,11536,"e"],[1,11554,"的"],[1,11655,"\n"],[-1,12132,"\n"],[1,12204,"换"],[-1,12204,"走法"],[1,12215,"红"],[-1,12450,"优先"],[1,12456,"为每"],[-1,12471,"优先"],[1,12475,"为树"]],[12473,12473],[11077,11077]]],[1528251584608,["Re@Re.local",[[1,12522,"现实、"]],[12522,12522],[12525,12525]]],[1528251585628,["Re@Re.local",[[-1,12522,"现实、"]],[12525,12525],[12522,12522]]],[1528251616296,["Re@Re.local",[[1,12522,"显式地要求各节点最多被访问1次。第2种实现更加通用，但是"]],[12522,12522],[12550,12550]]],[1528251618059,["Re@Re.local",[[-1,12549,"是"]],[12550,12550],[12549,12549]]],[1528251624189,["Re@Re.local",[[1,12549,"会允许生成"]],[12549,12549],[12554,12554]]],[1528251624755,["Re@Re.local",[[-1,12552,"生成"]],[12554,12554],[12552,12552]]],[1528251626547,["Re@Re.local",[[1,12552,"省"]],[12552,12552],[12553,12553]]],[1528251626673,["Re@Re.local",[[-1,12552,"省"]],[12553,12553],[12552,12552]]],[1528251630064,["Re@Re.local",[[1,12552,"在生成素是"]],[12552,12552],[12557,12557]]],[1528251630560,["Re@Re.local",[[-1,12554,"成素是"]],[12557,12557],[12554,12554]]],[1528251640543,["Re@Re.local",[[1,12554,"成树时对其某个节点访问不止一次。"]],[12554,12554],[12570,12570]]],[1528251701921,[null,[[1,11077,"一个"],[-1,11092,"\n虽"],[1,11536,"e"],[-1,11553,"的"],[-1,11655,"\n"],[1,12133,"\n"],[-1,12204,"换"],[1,12205,"走法"],[-1,12214,"红"],[1,12450,"优先"],[-1,12454,"为每"],[1,12471,"优先"],[-1,12473,"为树"],[-1,12570,"禁"]],[11077,11077],[12570,12570]]],[1528251701921,[null,[[-1,11077,"一个"],[1,11094,"\n虽"],[-1,11536,"e"],[1,11554,"的"],[1,11655,"\n"],[-1,12132,"\n"],[1,12204,"换"],[-1,12204,"走法"],[1,12215,"红"],[-1,12450,"优先"],[1,12456,"为每"],[-1,12471,"优先"],[1,12475,"为树"],[1,12570,"禁"]],[12570,12570],[11077,11077]]],[1528251656280,["Re@Re.local",[[1,12570,"第2种可以"]],[12570,12570],[12575,12575]]],[1528251656635,["Re@Re.local",[[-1,12573,"可以"]],[12575,12575],[12573,12573]]],[1528251661571,["Re@Re.local",[[1,12573,"在后续章节"]],[12573,12573],[12578,12578]]],[1528251662890,["Re@Re.local",[[-1,12570,"第2种在后续章节"]],[12578,12578],[12570,12570]]],[1528251669968,["Re@Re.local",[[1,12570,"在后续章节种，第2种算法可"]],[12570,12570],[12583,12583]]],[1528251670023,["Re@Re.local",[[-1,12582,"可"]],[12583,12583],[12582,12582]]],[1528251674563,["Re@Re.local",[[1,12577,"基于"]],[12577,12577],[12579,12579]]],[1528251678055,["Re@Re.local",[[1,12584,"开哦发"]],[12584,12584],[12587,12587]]],[1528251678610,["Re@Re.local",[[-1,12585,"哦发"]],[12587,12587],[12585,12585]]],[1528251680829,["Re@Re.local",[[1,12585,"发其它"]],[12585,12585],[12588,12588]]],[1528251681165,["Re@Re.local",[[-1,12586,"其它"]],[12588,12588],[12586,12586]]],[1528251683396,["Re@Re.local",[[1,12586,"了其它的算法"]],[12586,12586],[12592,12592]]],[1528251685407,["Re@Re.local",[[-1,12575,"种"]],[12576,12576],[12575,12575]]],[1528251686448,["Re@Re.local",[[1,12575,"中"]],[12575,12575],[12576,12576]]],[1528251688035,["Re@Re.local",[[1,12592,"。"]],[12592,12592],[12593,12593]]],[1528251688501,["Re@Re.local",[[1,12593,"\n\n"]],[12593,12593],[12594,12594]]],[1528251688720,["Re@Re.local",[[1,12595,"\n"]],[12594,12594],[12595,12595]]],[1528251692508,["Re@Re.local",[[-1,12595,"\n"],[1,12596,"DFS"]],[12595,12595],[12598,12598]]],[1528251694477,["Re@Re.local",[[-1,12595,"DFS"]],[12598,12598],[12595,12595]]],[1528251695020,["Re@Re.local",[[-1,12594,"\n"],[1,12595,"k"]],[12595,12595],[12594,12595]]],[1528251695254,["Re@Re.local",[[1,12595,"u"]],[12594,12595],[12594,12596]]],[1528251695370,["Re@Re.local",[[1,12596,"a"]],[12594,12596],[12594,12597]]],[1528251695456,["Re@Re.local",[[1,12597,"n"]],[12594,12597],[12594,12598]]],[1528251695591,["Re@Re.local",[[1,12598," d"]],[12594,12598],[12594,12600]]],[1528251695722,["Re@Re.local",[[1,12600,"u"]],[12594,12600],[12594,12601]]],[1528251695913,["Re@Re.local",[[-1,12594,"kuan du"],[1,12601,"宽度"]],[12594,12601],[12596,12596]]],[1528251696854,["Re@Re.local",[[-1,12595,"度"]],[12596,12596],[12595,12595]]],[1528251697060,["Re@Re.local",[[-1,12594,"宽"],[1,12595,"\n"]],[12595,12595],[12594,12594]]],[1528251697415,["Re@Re.local",[[1,12595,"\n"]],[12594,12594],[12595,12595]]],[1528251700983,["Re@Re.local",[[-1,12595,"\n"],[1,12596,"深度优先搜索"]],[12595,12595],[12601,12601]]],[1528251761936,[null,[[1,11077,"一个"],[-1,11092,"\n虽"],[1,11536,"e"],[-1,11553,"的"],[-1,11655,"\n"],[1,12133,"\n"],[-1,12204,"换"],[1,12205,"走法"],[-1,12214,"红"],[1,12450,"优先"],[-1,12454,"为每"],[1,12471,"优先"],[-1,12473,"为树"],[-1,12601,"禁"]],[11077,11077],[12601,12601]]],[1528251761937,[null,[[-1,11077,"一个"],[1,11094,"\n虽"],[-1,11536,"e"],[1,11554,"的"],[1,11655,"\n"],[-1,12132,"\n"],[1,12204,"换"],[-1,12204,"走法"],[1,12215,"红"],[-1,12450,"优先"],[1,12456,"为每"],[-1,12471,"优先"],[1,12475,"为树"],[1,12601,"禁"]],[12601,12601],[11077,11077]]],[1528251704695,["Re@Re.local",[[1,12595,"图的"]],[12595,12595],[12597,12597]]],[1528251747719,["Re@Re.local",[[1,12603,"很适合用来为63条边找到1条路径"]],[12603,12603],[12619,12619]]],[1528251750468,["Re@Re.local",[[-1,12608,"为63条边找到1条路径"]],[12619,12619],[12608,12608]]],[1528251754188,["Re@Re.local",[[1,12608,"找到1条吧"]],[12608,12608],[12613,12613]]],[1528251754237,["Re@Re.local",[[-1,12612,"吧"]],[12613,12613],[12612,12612]]],[1528251759621,["Re@Re.local",[[1,12612,"由63条边构成的"]],[12612,12612],[12620,12620]]],[1528251822091,[null,[[1,11077,"一个"],[-1,11092,"\n虽"],[1,11536,"e"],[-1,11553,"的"],[-1,11655,"\n"],[1,12133,"\n"],[-1,12204,"换"],[1,12205,"走法"],[-1,12214,"红"],[1,12450,"优先"],[-1,12454,"为每"],[1,12471,"优先"],[-1,12473,"为树"],[-1,12620,"禁"]],[11077,11077],[12620,12620]]],[1528251822091,[null,[[-1,11077,"一个"],[1,11094,"\n虽"],[-1,11536,"e"],[1,11554,"的"],[1,11655,"\n"],[-1,12132,"\n"],[1,12204,"换"],[-1,12204,"走法"],[1,12215,"红"],[-1,12450,"优先"],[1,12456,"为每"],[-1,12471,"优先"],[1,12475,"为树"],[1,12620,"禁"]],[12620,12620],[11077,11077]]],[1528251789745,["Re@Re.local",[[1,12620,"路径。当深度嗖嗖算"]],[12620,12620],[12629,12629]]],[1528251790200,["Re@Re.local",[[-1,12626,"嗖嗖算"]],[12629,12629],[12626,12626]]],[1528251794805,["Re@Re.local",[[1,12626,"搜索算法找到"]],[12626,12626],[12632,12632]]],[1528251795239,["Re@Re.local",[[-1,12630,"找到"]],[12632,12632],[12630,12630]]],[1528251798206,["Re@Re.local",[[1,12630,"发现1各"]],[12630,12630],[12634,12634]]],[1528251801660,["Re@Re.local",[[-1,12633,"各"]],[12634,12634],[12633,12633]]],[1528251806217,["Re@Re.local",[[1,12633,"条死路（每"]],[12633,12633],[12638,12638]]],[1528251806270,["Re@Re.local",[[-1,12637,"每"]],[12638,12638],[12637,12637]]],[1528251808356,["Re@Re.local",[[1,12637,"图中"]],[12637,12637],[12639,12639]]],[1528251808941,["Re@Re.local",[[-1,12637,"图中"]],[12639,12639],[12637,12637]]],[1528251821176,["Re@Re.local",[[1,12637,"图中的某个节点，使得接下来"]],[12637,12637],[12650,12650]]],[1528251881951,[null,[[1,11077,"一个"],[-1,11092,"\n虽"],[1,11536,"e"],[-1,11553,"的"],[-1,11655,"\n"],[1,12133,"\n"],[-1,12204,"换"],[1,12205,"走法"],[-1,12214,"红"],[1,12450,"优先"],[-1,12454,"为每"],[1,12471,"优先"],[-1,12473,"为树"],[-1,12650,"禁"]],[11077,11077],[12650,12650]]],[1528251881951,[null,[[-1,11077,"一个"],[1,11094,"\n虽"],[-1,11536,"e"],[1,11554,"的"],[1,11655,"\n"],[-1,12132,"\n"],[1,12204,"换"],[-1,12204,"走法"],[1,12215,"红"],[-1,12450,"优先"],[1,12456,"为每"],[-1,12471,"优先"],[1,12475,"为树"],[1,12650,"禁"]],[12650,12650],[11077,11077]]],[1528251854337,["Re@Re.local",[[1,12652,"合法的移动了），它便会返回次神"]],[12652,12652],[12667,12667]]],[1528251855032,["Re@Re.local",[[-1,12665,"次神"]],[12667,12667],[12665,12665]]],[1528251862017,["Re@Re.local",[[1,12665,"另一个最深的节点"]],[12665,12665],[12673,12673]]],[1528251866461,["Re@Re.local",[[-1,12665,"另一个最深的节点"]],[12673,12673],[12665,12665]]],[1528251876921,["Re@Re.local",[[1,12665,"，并且沿着另一条可以"]],[12665,12665],[12675,12675]]],[1528251878791,["Re@Re.local",[[-1,12673,"可以"]],[12675,12675],[12673,12673]]],[1528251881387,["Re@Re.local",[[1,12673,"有合法"]],[12673,12673],[12676,12676]]],[1528251942181,[null,[[1,11077,"一个"],[-1,11092,"\n虽"],[1,11536,"e"],[-1,11553,"的"],[-1,11655,"\n"],[1,12133,"\n"],[-1,12204,"换"],[1,12205,"走法"],[-1,12214,"红"],[1,12450,"优先"],[-1,12454,"为每"],[1,12471,"优先"],[-1,12473,"为树"],[-1,12650,"禁"],[1,12651,"没有"],[-1,12664,"次"]],[11077,11077],[12664,12664]]],[1528251942181,[null,[[-1,11077,"一个"],[1,11094,"\n虽"],[-1,11536,"e"],[1,11554,"的"],[1,11655,"\n"],[-1,12132,"\n"],[1,12204,"换"],[-1,12204,"走法"],[1,12215,"红"],[-1,12450,"优先"],[1,12456,"为每"],[-1,12471,"优先"],[1,12475,"为树"],[1,12650,"禁"],[-1,12650,"没有"],[1,12665,"次"]],[12664,12664],[11077,11077]]],[1528251888654,["Re@Re.local",[[1,12676,"移动的顶点"]],[12676,12676],[12681,12681]]],[1528251893930,["Re@Re.local",[[-1,12668,"沿着另一条"]],[12673,12673],[12668,12668]]],[1528251895342,["Re@Re.local",[[1,12668,"朝着"]],[12668,12668],[12670,12670]]],[1528251898263,["Re@Re.local",[[1,12676,"最深"]],[12676,12676],[12678,12678]]],[1528251901784,["Re@Re.local",[[-1,12676,"最深"]],[12678,12678],[12676,12676]]],[1528251906801,["Re@Re.local",[[1,12678,"的最深处移动。"]],[12678,12678],[12685,12685]]],[1528251907049,["Re@Re.local",[[1,12685,"\n\n"]],[12685,12685],[12686,12686]]],[1528251907239,["Re@Re.local",[[1,12687,"\n"]],[12686,12686],[12687,12687]]],[1528251912088,["Re@Re.local",[[-1,12687,"\n"],[1,12688,"其实"]],[12687,12687],[12689,12689]]],[1528251912486,["Re@Re.local",[[-1,12687,"其实"]],[12689,12689],[12687,12687]]],[1528251912599,["Re@Re.local",[[-1,12686,"\n"],[1,12687,"q"]],[12687,12687],[12686,12687]]],[1528251912710,["Re@Re.local",[[1,12687,"i"]],[12686,12687],[12686,12688]]],[1528251912782,["Re@Re.local",[[1,12688," s"]],[12686,12688],[12686,12690]]],[1528251912899,["Re@Re.local",[[1,12690,"h"]],[12686,12690],[12686,12691]]],[1528251912959,["Re@Re.local",[[1,12691,"i"]],[12686,12691],[12686,12692]]],[1528251913173,["Re@Re.local",[[-1,12686,"qi shi"],[1,12692,"其实"]],[12686,12692],[12688,12688]]],[1528251913287,["Re@Re.local",[[-1,12687,"实"]],[12688,12688],[12687,12687]]],[1528251913460,["Re@Re.local",[[-1,12686,"其"],[1,12687,"\n"]],[12687,12687],[12686,12686]]],[1528251913759,["Re@Re.local",[[1,12687,"\n"]],[12686,12686],[12687,12687]]],[1528251925999,["Re@Re.local",[[-1,12687,"\n"],[1,12688,"骑士周游函数接受4各参数：n，当前搜索树的"]],[12687,12687],[12708,12708]]],[1528251927420,["Re@Re.local",[[-1,12702,"当前搜索树的"]],[12708,12708],[12702,12702]]],[1528251941565,["Re@Re.local",[[1,12702,"搜索树当前的深度；path，在"]],[12702,12702],[12717,12717]]],[1528252001975,[null,[[1,11077,"一个"],[-1,11092,"\n虽"],[1,11536,"e"],[-1,11553,"的"],[-1,11655,"\n"],[1,12133,"\n"],[-1,12204,"换"],[1,12205,"走法"],[-1,12214,"红"],[1,12450,"优先"],[-1,12454,"为每"],[1,12471,"优先"],[-1,12473,"为树"],[-1,12650,"禁"],[1,12651,"没有"],[-1,12664,"次"]],[11077,11077],[12664,12664]]],[1528252001975,[null,[[-1,11077,"一个"],[1,11094,"\n虽"],[-1,11536,"e"],[1,11554,"的"],[1,11655,"\n"],[-1,12132,"\n"],[1,12204,"换"],[-1,12204,"走法"],[1,12215,"红"],[-1,12450,"优先"],[1,12456,"为每"],[-1,12471,"优先"],[1,12475,"为树"],[1,12650,"禁"],[-1,12650,"没有"],[1,12665,"次"]],[12664,12664],[11077,11077]]],[1528251943685,["Re@Re.local",[[1,12717,"当前时刻"]],[12717,12717],[12721,12721]]],[1528251948115,["Re@Re.local",[[-1,12716,"在当前时刻"]],[12721,12721],[12716,12716]]],[1528251950174,["Re@Re.local",[[1,12716,"到该点"]],[12716,12716],[12719,12719]]],[1528251950901,["Re@Re.local",[[-1,12718,"点"]],[12719,12719],[12718,12718]]],[1528251968572,["Re@Re.local",[[1,12718,"节点为止已访问过的顶点；u，已访问"]],[12718,12718],[12735,12735]]],[1528251971286,["Re@Re.local",[[-1,12732,"已访问"]],[12735,12735],[12732,12732]]],[1528251976789,["Re@Re.local",[[1,12732,"待搜索节点；lit"]],[12732,12732],[12741,12741]]],[1528251977251,["Re@Re.local",[[-1,12740,"t"]],[12741,12741],[12740,12740]]],[1528251985573,["Re@Re.local",[[1,12740,"mit，"]],[12740,12740],[12744,12744]]],[1528251986260,["Re@Re.local",[[-1,12743,"，"]],[12744,12744],[12743,12743]]],[1528252000513,["Re@Re.local",[[1,12743,"，路径中的节点树"]],[12743,12743],[12751,12751]]],[1528252000769,["Re@Re.local",[[-1,12750,"树"]],[12751,12751],[12750,12750]]],[1528252001702,["Re@Re.local",[[1,12750,"数"]],[12750,12750],[12751,12751]]],[1528252061958,[null,[[1,11077,"一个"],[-1,11092,"\n虽"],[1,11536,"e"],[-1,11553,"的"],[-1,11655,"\n"],[1,12133,"\n"],[-1,12204,"换"],[1,12205,"走法"],[-1,12214,"红"],[1,12450,"优先"],[-1,12454,"为每"],[1,12471,"优先"],[-1,12473,"为树"],[-1,12650,"禁"],[1,12651,"没有"],[-1,12664,"次"]],[11077,11077],[12664,12664]]],[1528252061958,[null,[[-1,11077,"一个"],[1,11094,"\n虽"],[-1,11536,"e"],[1,11554,"的"],[1,11655,"\n"],[-1,12132,"\n"],[1,12204,"换"],[-1,12204,"走法"],[1,12215,"红"],[-1,12450,"优先"],[1,12456,"为每"],[-1,12471,"优先"],[1,12475,"为树"],[1,12650,"禁"],[-1,12650,"没有"],[1,12665,"次"]],[12664,12664],[11077,11077]]],[1528252003602,["Re@Re.local",[[-1,12696,"各"]],[12697,12697],[12696,12696]]],[1528252004387,["Re@Re.local",[[1,12696,"个"]],[12696,12696],[12697,12697]]],[1528252036528,["Re@Re.local",[[1,12752,"当"]],[12752,12752],[12753,12753]]],[1528252036696,["Re@Re.local",[[-1,12752,"当"]],[12753,12753],[12752,12752]]],[1528252043503,["Re@Re.local",[[1,12752,"knightTourhansh"]],[12752,12752],[12767,12767]]],[1528252044607,["Re@Re.local",[[-1,12762,"hansh"]],[12767,12767],[12762,12762]]],[1528252056512,["Re@Re.local",[[1,12762,"函数是递归的。当knightTour函数"]],[12762,12762],[12782,12782]]],[1528252057075,["Re@Re.local",[[-1,12781,"数"]],[12782,12782],[12781,12781]]],[1528252061509,["Re@Re.local",[[1,12781,"数被调用时"]],[12781,12781],[12786,12786]]],[1528252122894,[null,[[1,11077,"一个"],[-1,11092,"\n虽"],[1,11536,"e"],[-1,11553,"的"],[-1,11655,"\n"],[1,12133,"\n"],[-1,12204,"换"],[1,12205,"走法"],[-1,12214,"红"],[1,12450,"优先"],[-1,12454,"为每"],[1,12471,"优先"],[-1,12473,"为树"],[-1,12650,"禁"],[1,12651,"没有"],[-1,12664,"次"],[-1,12751,"当"],[1,12752,"。"]],[11077,11077],[12753,12753]]],[1528252122894,[null,[[-1,11077,"一个"],[1,11094,"\n虽"],[-1,11536,"e"],[1,11554,"的"],[1,11655,"\n"],[-1,12132,"\n"],[1,12204,"换"],[-1,12204,"走法"],[1,12215,"红"],[-1,12450,"优先"],[1,12456,"为每"],[-1,12471,"优先"],[1,12475,"为树"],[1,12650,"禁"],[-1,12650,"没有"],[1,12665,"次"],[1,12751,"当"],[-1,12751,"。"]],[12753,12753],[11077,11077]]],[1528252066542,["Re@Re.local",[[1,12787,"它首先监测"]],[12787,12787],[12792,12792]]],[1528252067446,["Re@Re.local",[[-1,12790,"监测"]],[12792,12792],[12790,12790]]],[1528252073933,["Re@Re.local",[[1,12790,"检查约束条件。如果"]],[12790,12790],[12799,12799]]]]],["66b534f6-6eb4-4c78-8163-71e746d1af61",1528284315447,"## 7.1 目标 ##\n\n- 学习图的概念和使用方式。\n- 以多种方式实现抽象数据类型Gragh。\n- 了解图在解决多种问题时的应用。\n\n本章研究图像。图像是比上一章学习的树更加通用的结构，实际上可以认为树是一种特殊的图像。图像也可以用来表示真实世界中的很多东西，比如公路系统，航线系统，网路系统甚至是完成计算机科学学位所必须的课程序列。本章读者会看到，一旦给某个问题以合适的表示，利用一些图像算法便可以轻松将看起来很困难的问题解决。\n\n对人类来说，看懂道路地图并理解不同地点之间的关系并不困难，但是计算机并没有这种能力。然而，可以将道路系统看作是1个图像，如此一来便可以让计算机做一些有趣的事情了。比如在互联网地图中，计算机可以找到从某个地方到另一个地方的最近、最快或者最简单的路线。\n\n作为计算机科学的学生，读者可能对获得学位所需要的课程比较感兴趣。图像可以很好地表达课程之间的依赖关系。图1便是1个例子。\n\n![../_images/CS-Prereqs.png](http://interactivepython.org/courselib/static/pythonds/_images/CS-Prereqs.png)\n\n## 7.2 术语和定义 ##\n\n\n**顶点（vertex）**\n顶点（也称为节点**node**）是图像的基础构件。它可以有名称，即键。顶点也可以有其它额外信息，即负载。\n**边（Edge）**\n边有时也被称为弧（arc），是图像的另一种基础构件。边将2个顶点连接起来以表示这2者之间存在某种关系。边可以是单向的也可以是双向的。当某个图像中的所有边都是单向的时候，便称该图像是**有向图（directed gragh/digrah）**。上示的课程依赖图显示是有向图，因为必须先完成某些课程后才能继续其它某些课程。\n**权重（weight）**\n为了表示从某个顶点到另一个顶点所需的代价，可以顶点进行**赋权（weighted）**。比如说公路图中某个城市连接到另一个城市，边上的权重可以表示为两个城市之间的距离。\n\n有了以上基本概念，便可以来对图像作一定义了。图像可以表示为G，其中G=(V,E)。对于图像G，V是顶点的集合，E是边的集合。每个边都是一个元组（v,w)，其中$w,v∈V$。可以向边元组中加入第3个元素来表示权重。子图s是顶点的集合v和边的集合e，使得$e⊂E且v⊂V$。\n\n图2给出了1个简单的赋权有向图作为例子。该图像可以用集合严格地表示：\n$$ V={V0,V1,V2,V3,V4,V5} $$\n$$ E= \\left \\{ (v0,v1,5),(v1,v2,4),(v2,v3,9),(v3,v4,7),(v4,v0,1),(v0,v5,2),(v5,v4,8),(v3,v5,3),(v5,v2,1) \\right \\} $$\n![../_images/digraph.png](http://interactivepython.org/courselib/static/pythonds/_images/digraph.png)\n\n图2中的例子演示了图像的另外2个关键术语。\n**路径（path）**\n路径是由边连接起来的顶点的序列。一般地，将路径定义为 $w_1,w_2,...,w_n$ 使得 $(w_i,w_{i+1})\\in E$ 对所有 $1≤i≤n−1$ 成立。无权路径长度是路径中边的个数，即n-1。权重路径长度是路径中边的权重之和。比如图2中，从V3到V1的路径是顶点序列 $(V3,V4,V0,V1)$ 而边为 ${(v3,v4,7),(v4,v0,1),(v0,v1,5)}{(v3,v4,7),(v4,v0,1),(v0,v1,5)}$。\n**环（cycle）**\n有向图中的环是首尾顶点相同的路径。比如说，图2中路径 $(V5,V2,V3,V5)(V5,V2,V3,V5)$ 就是1个环。没有环的图被称为**无环图（acyclic graph）**。没有环的有向图被称为**有向无环图（directed acyclic graph，DAG）**。接下来读者会看到，一些很重要的问题可以通过表示为DAG获得解决。\n\n## 7.3 抽象数据类型：Graph ##\n\n抽象数据类型Gragh被定义为：\n- Graph()生成一个新的空图。\n- addVertex(vert) 将Vertex的1个实例添加至图。\n- addEdge(fromVert,toVert) 向图添加1个连接2个顶点的有向边。\n- addEdge(fromVert,toVert,weight)向图添加1个连接2个顶点的赋权有向边。\n- getVertex(vertKey) 找到途中以vertKey命名的顶点。\n- getVertices() 返回途中所有顶点的列表。\n- in 对于vertex in graph这种形式的语句，若给定的vertex在途中，返回True，反之则False。\n\n有了图像的正式定义，在Python中可以用多种方式实现，下面来看看使用不同方式实现该ADT的优劣与差别。有两个著名的图的实现，即**邻接矩阵（adjacency matrix）**和**邻接表（adjacency list）**，本书将对这两种都进行解释，并对其中1中以Python类的方式实现。\n\n## 7.4 邻接矩阵（adjacency matrix）##\n\n\n实现图的最简单方式之一是使用二维矩阵。在二维矩阵中，每行每列的都代表了图中的1个顶点。如果顶点v到顶点w有边，行v和列w的交叉点单元格会存储值。若两个顶点由边连接，便称这两个顶点是**邻接**的。图3给出了图2的邻接矩阵。单元格中存储的值是v到w的权重。\n\n![../_images/adjMat.png](http://interactivepython.org/courselib/static/pythonds/_images/adjMat.png)\n\n邻接矩阵的优势是简便，并且对于小图来说，很容易看出哪些节点是相连的。然而，注意到矩阵中大多数单元格都是空。因为大多数单元格都是空的，因此称该矩阵是**稀疏（sparse）**的。矩阵并不能高效地存储这种稀疏数据。实际上，在Python中像图3这种矩阵结构都很麻烦。\n\n邻接矩阵对于边树较高的图来说是不错的实现。“较高”是什么意思？到底需要多少个边才能填满该矩阵？因此为每行、每列都对应个顶点，填满矩阵需要的顶点数是$|V|_2$。当每个顶点都与另外每一个顶点相连时，则该矩阵被填满了。实践中很少会遇到以这种方式连接的问题。本章研究的所有问题都是稀疏图。\n\n## 7.5 邻接表（adjacency list） ##\n\n邻接表可以用更少的空间实现稀疏图。在邻接表的实现中，维护一个包含图对象所有顶点的主列表，然后图对象中各个顶点对象都维护一个该对象连接的其它顶点对象的列表。在Vertex类的实现中，将使用字典而不是列表，其中字典的键为顶点，值为权重。图4给出了图2的邻接表实现示意图。\n![../_images/adjlist.png](http://interactivepython.org/courselib/static/pythonds/_images/adjlist.png)\n\n邻接表的有时在于它可以紧凑地表示稀疏图，利用稀疏图也可以轻松地找到某个顶点所有的连接情况。\n\n## 7.6 实现 ##\n\n使用字典可以很容易地在Python中实现邻接表。在本书的实现中会创建两个类（代码1、代码2），Graph保存顶点的祝列表，而Vertex即图中每个顶点。\n\n每个Vertex都使用字典来保存其连接的对象以及每条边的权重。该字典被命名为connectedTo。以下代码便是Vertex类的实现。构造器只是初始化了可以是字符串的id以及connectedTo字典。addNeighbor方法用来添加从该顶点到另一顶点的连接。getConnections方法返回当前节点connectedTo实例变量保存的邻接表中的所有顶点。getWeight方法返回从该节点到另一个作为参数传入的节点的边的权重。\n\n**代码1**\n```Pythion\nclass Vertex:\n    def __init__(self,key):\n        self.id = key\n        self.connectedTo = {}\n\n    def addNeighbor(self,nbr,weight=0):\n        self.connectedTo[nbr] = weight\n\n    def __str__(self):\n        return str(self.id) + ' connectedTo: ' + str([x.id for x in self.connectedTo])\n\n    def getConnections(self):\n        return self.connectedTo.keys()\n\n    def getId(self):\n        return self.id\n\n    def getWeight(self,nbr):\n        return self.connectedTo[nbr]\n```\nGraph类，如下面的代码所示，保存了一个字典，将顶点名映射到顶点对象。在图4中，该字典对象表示为灰色阴影框。Graph类也听过了方法用于添加顶点和连接顶点。此外，实现了\\_\\_iter\\_\\_方法来使得可以在图中对所有顶点对象进行迭代。这两种方法可以用来实现按名称或者是对象本身来对图中顶点的迭代。\n\n**代码2**\n```Python\nclass Graph:\n    def __init__(self):\n        self.vertList = {}\n        self.numVertices = 0\n\n    def addVertex(self,key):\n        self.numVertices = self.numVertices + 1\n        newVertex = Vertex(key)\n        self.vertList[key] = newVertex\n        return newVertex\n\n    def getVertex(self,n):\n        if n in self.vertList:\n            return self.vertList[n]\n        else:\n            return None\n\n    def __contains__(self,n):\n        return n in self.vertList\n\n    def addEdge(self,f,t,cost=0):\n        if f not in self.vertList:\n            nv = self.addVertex(f)\n        if t not in self.vertList:\n            nv = self.addVertex(t)\n        self.vertList[f].addNeighbor(self.vertList[t], cost)\n\n    def getVertices(self):\n        return self.vertList.keys()\n\n    def __iter__(self):\n        return iter(self.vertList.values())\n```\n使用以上定义的Graph和Vertex类，以下代码边可以表示图2。首先生成6个节点编号0-5，查看顶点字典，注意到对0-5的键都创建了1个Vertex实例。然后，将连接了顶点的边集合到一起。最后，使用嵌套循环确定图中的每个边都正确存储了。读者应该将输出结果与图2作一对比。\n```Python\n>>> g = Graph()\n>>> for i in range(6):\n...    g.addVertex(i)\n>>> g.vertList\n{0: <adjGraph.Vertex instance at 0x41e18>,\n 1: <adjGraph.Vertex instance at 0x7f2b0>,\n 2: <adjGraph.Vertex instance at 0x7f288>,\n 3: <adjGraph.Vertex instance at 0x7f350>,\n 4: <adjGraph.Vertex instance at 0x7f328>,\n 5: <adjGraph.Vertex instance at 0x7f300>}\n>>> g.addEdge(0,1,5)\n>>> g.addEdge(0,5,2)\n>>> g.addEdge(1,2,4)\n>>> g.addEdge(2,3,9)\n>>> g.addEdge(3,4,7)\n>>> g.addEdge(3,5,3)\n>>> g.addEdge(4,0,1)\n>>> g.addEdge(5,4,8)\n>>> g.addEdge(5,2,1)\n>>> for v in g:\n...    for w in v.getConnections():\n...        print(\"( %s , %s )\" % (v.getId(), w.getId()))\n...\n( 0 , 5 )\n( 0 , 1 )\n( 1 , 2 )\n( 2 , 3 )\n( 3 , 4 )\n( 3 , 5 )\n( 4 , 0 )\n( 5 , 4 )\n( 5 , 2 )\n```\n## 词梯（word ladder）问题 ##\n\n以词梯问题开始图算法的研究。将单词\"FOOL\"转化为\"SAGE\"。按词梯问题的规则，1次只能修改1个字母，在每1步都必须将单词转换为另一个单词，不允许转换为非单词。词梯问题是由*爱丽丝梦游仙境*的作者lewis Carroll于1878年提出的。以下单词序列是刚才那个问题的一个可行解。\n```Python\nFOOL\nPOOL\nPOLL\nPOLE\nPALE\nSALE\nSAGE\n```\n词梯问题有许多变体。比如读者可能遇到要求在给定步数来完成转换的版本，或是必须用给点单词的版本。本节仅关注计算出完成转换所需要的最小修改次数。\n\n当然，因为本章内容是图，因此可以用图算法来将其解决。以下是纲要：\n- 将单词之间的关系重新表示为图。\n- 使用**广度优先搜索算法（breadth first search**来找到从起始单词到目标单词的最短路径。\n\n## 7.8 建立词梯图 ##\n\n首先要解决的问题是如何将单词列表转换为图。对于边来说，需要保证它们连接的是差且仅差了1个字母的单词。如果生成这种图，那么从一个单词出发的任意路径都是该词梯问题的解。图1给出了1个小的由单词构成的图，它可以用来解决FOOL到SAGE的词梯问题。注意，该图是无向图且无权重。\n\n![../_images/wordgraph.png](http://interactivepython.org/courselib/static/pythonds/_images/wordgraph.png)\n\n\n可以使用很多方法来生成这个图。首先假设有1组长度相同的单词，从起点出发，为列表中的每一个单词创建1个顶点。为了确定如何将这些单词连接起来，可以将列表中的每个单词与其它的单词一一进行比较，在比较时确定有多少个字母不同。如果两个字母仅相差1个字母，便可以在图中为它们两创建1条边。单词数较少时，这个方法还是可行的。但是假设有5110个单词的话（粗略估计一一进行对比需要$O(n^2)$的时间复杂度），需要进行2500万次对比。\n\n使用以下方法可以对其进行优化。假设有大量桶，每个桶外面都贴着1个4字母单词，但是字母中有1个被下划线替代。比如说，对于图2这种情况，可能会有个桶被贴上\"POP_\"。当在列表中对每个单词进行处理时，将该单词与每个桶进行对比，将\"\\_\"用作通配符，因此\"POPE\"和\"POPS\"都与\"POP\\_\"匹配。每当找到1个匹配的桶时，都将该单词放进去。当所有的单词都放在了正确的桶里时，可以确定同一桶里的单词是相连的。\n\n![../_images/wordbuckets.png](http://interactivepython.org/courselib/static/pythonds/_images/wordbuckets.png)\n\n在Python中，可以通过字典实现上述方案。桶的标签作为字典的键，键对应的值为单词列表。首先为各个单词在图中创建1个顶点。然后为处于字典同一键下的单词之间创建边，如代码1所示。\n```Python\nfrom pythonds.graphs import Graph\n\ndef buildGraph(wordFile):\n    d = {}\n    g = Graph()\n    wfile = open(wordFile,'r')\n    # create buckets of words that differ by one letter\n    for line in wfile:\n        word = line[:-1]\n        for i in range(len(word)):\n            bucket = word[:i] + '_' + word[i+1:]\n            if bucket in d:\n                d[bucket].append(word)\n            else:\n                d[bucket] = [word]\n    # add vertices and edges for words in the same bucket\n    for bucket in d.keys():\n        for word1 in d[bucket]:\n            for word2 in d[bucket]:\n                if word1 != word2:\n                    g.addEdge(word1,word2)\n    return g\n```\n这是第一个跟现实生活相关的图问题，读者可能会好奇该图的稀疏程度。对于该问题，准备的单词列表有5510个。若果使用邻接矩阵，矩阵将会有5110*5110个单元格，而使用buildGraph函数的图仅有53286条边，因此仅有0.20%的单元格被填充了，这实际上是一个很稀疏的矩阵了。\n\n## 7.9 实现宽度优先搜索（breadth first search） ##\n\n创建好了图，接下来便可以研究解决字梯问题的最优算法了。这里使用的算法被称为**宽度优先搜索（breadth first search,BFS）**。BFS是用于图搜索的最简单的算法之一。它也是之后将研究的其它几种重要的图算法的原型。\n\n给定图G以及起始顶点s，宽度优先算法将对图内的边进行搜索以找到G中所有与s有路径相连的顶点。宽度优先搜索的优势在于，在找到与s距离为k+1的所有顶点之前，它会先找出所有距离为k的顶点。BFS的运行过程可以想象为生成树的过程，每次都生成树的一层。BFS在对子孙顶点进行搜索前，先将初始顶点的子顶点加入进来。\n\n为了跟踪运行过程，BFS将顶点染成白色，灰色或黑色。所有的顶点都被初始为白色。白色顶点是未被探索的顶点。当某个顶点被初次探索时，将其染成灰色，当BFS完成对某个顶点的探索时，将其染成黑色。这意味着，对于黑色的顶点，它是没有白色节点与之邻接的。灰色节点，有可能会存在白色节点与之邻接，需要进一步探索。\n\n此外，BFS算法使用了Vertex类的改进版。这种新的顶点类新增了3种实例变量，即distance,predecessor以及颜色。每个实例变量都有正确的getter和setter方法。这里就不作展示了，因为只是加了3个实例变量而已。\n\nBFS从起始顶点s开始，将start染成灰色来表示当前正在对其进行搜索。对于起始顶点，另外两个值，distance和predecessor分别被初始化为0和None。最后，start被放入1个Queue中。下一步便是系统地对队列前部的顶点进行搜索。所谓搜索，即是对队列前部的某1个节点的邻接列表作迭代。每当对邻接列表中的节点作处理时，先对其颜色进行判断。如果是白色的，则该节点尚未搜索过，于是执行以下4步操作：\n1. 将新的，未搜索的顶点nbr染成灰色。\n2. 将nbr的predecessor设置为当前节点currentVert。\n3. 到nbr的距离设为currentVert + 1。\n4. 将nbr放入队尾。将nbr放在队尾使得该节点只有在currentVert的邻接列表中的所有其它顶点都被搜索过了才会继续被搜索。\n\n**代码2**\n```Python\nfrom pythonds.graphs import Graph, Vertex\nfrom pythonds.basic import Queue\n\ndef bfs(g,start):\n  start.setDistance(0)\n  start.setPred(None)\n  vertQueue = Queue()\n  vertQueue.enqueue(start)\n  while (vertQueue.size() > 0):\n    currentVert = vertQueue.dequeue()\n    for nbr in currentVert.getConnections():\n      if (nbr.getColor() == 'white'):\n        nbr.setColor('gray')\n        nbr.setDistance(currentVert.getDistance() + 1)\n        nbr.setPred(currentVert)\n        vertQueue.enqueue(nbr)\n    currentVert.setColor('black')\n```\n现在来仔细研究下bfs函数是如何对图1构件宽度优先树的。从FOOL出发，将所有与FOOL邻接的节点连接到该树上。临近节点包括POOL，FOIL，FOUL和COOL。每个节点都放入了待搜索待新节点。图3给出了该操作中的树及完成后的队列。\n![../_images/bfs1.png](http://interactivepython.org/courselib/static/pythonds/_images/bfs1.png)\n\n\n接下来，bfs从队首去掉了下一个节点(POOL)，并对其所有邻接节点重复该操作。然而，当bfs检查到节点COOL时，它发现COOL的颜色已经是灰色了。这意味着有更短的路径到达COOL，并且COOL已经留在队列中以待进一步搜索。在对POOL进行监测时唯一新加入队列的是POLL。新状态如图4所示。\n\n![../_images/bfs2.png](http://interactivepython.org/courselib/static/pythonds/_images/bfs2.png)\n\n队列中的下一个顶点是FOIL。FOIL可以加入树的节点是FAIL，当bfs方法继续处理队列时，接下来两个节点都没有向树或者队列加入新的节点。图5展示的是对树的第二层所有顶点都探索完成了后的树和队列。\n\n![../_images/bfs3.png](http://interactivepython.org/courselib/static/pythonds/_images/bfs3.png)\n![../_images/bfsDone.png](http://interactivepython.org/courselib/static/pythonds/_images/bfsDone.png)\n\n读者应该自己动手过一遍该算法，以对该算法获得更好的理解。图6是图3中已完成所有顶点的搜索后的最终宽度优先搜索树。宽度优先搜索的惊人之处在于，它不仅解决了初始的FOOL-SAGE问题，也顺便解决了许多其它问题。从宽度优先搜索树中的任一节点出发，沿着父节点的箭头返回到根节点，便可以得到该单词变为FOOL的最短词梯。代码3沿着父节点链打印出了词梯：\n**代码3**\n```Python\ndef traverse(y):\n    x = y\n    while (x.getPred()):\n        print(x.getId())\n        x = x.getPred()\n    print(x.getId())\n\ntraverse(g.getVertex('sage'))\n```\n## 7.10 宽度优先搜索分析 ##\n\n在继续研究其它图算法前，先来分析一下宽度优先搜索算法的运行性能。首先应当观察到的是，图|V|中的每个顶点在循环中最多被处理一次，因为在进行监测和加入队列前，该顶点必须是白色的。因此整个循环为O(V)。嵌套在while中的for循环对图中的每条边最多执行1次，|E|，因此每个顶点最多出队1次并且只在节点u出队时才检查节点u到节点v的边，该for循环为O(E)。因此两个循环的最终结果是O(V+E)。\n\n当然，执行BFS仅完成了该任务的一部分。从起始节点出发到达目标顶点是该任务的另一部分。最坏情况是，该图是单链的。在这种情况下，遍历所有节点需要O(V)。正常情况下应该是|V|的某个分数，但时间复杂度不会变，仍然是O(V)。\n\n最后，至少对这哥问题而言，生成初始的图也需要时间，其时间复杂度的分析就作为练习了。\n\n## 7.11 骑士周游问题 ##\n\n起始周游是可以用来演示第二种常见图算法的经典问题。骑士周游问题是在国际象棋棋盘上仅使用1个棋子，即起始，该问题的目标是找到1个出棋序列使得骑士可以访问各个方格恰好1次。这样的序列被称为周游。起始周游问题多年来吸引了很多棋手、数学家和计算机科学家等。在8*8的棋盘上，可行的序列数的上界为$1.305\\times 10^{35}$。然而，还有很多时候会走到死棋的情况。当然，还有很多时候会失败。显然这是一个需要些智慧和计算力的问题。\n\n学者已经提出了很多该问题的接发，图搜索是最最容易理解和编程的。同样地，分两步来求解：\n- 将骑士在棋盘上符合规则的移动以图表示。\n- 使用图算法来找到长度为$rows\\times columns-1$的路径，其中每个顶点都恰好只访问1次。\n\n## 7.12 生成骑士周游图 ##\n\n为了将骑士周游问题表示为图，使用以下两种思想：棋盘上的每个方格都被表示为图中的一个节点；骑士的每个合法的移动都被标记为图中的边。图1是骑士的1中合规走法，并给出了其对应的在图中的边。\n\n![../_images/knightmoves.png](http://interactivepython.org/courselib/static/pythonds/_images/knightmoves.png)\n\n为$n\\times n$的棋盘生成图，其Python代码如代码1所示。knightGraph函数对整个棋盘作1次遍历，在棋盘上的每1个方格，kinightGraph函数都调用1个辅助函数genLegalMoves，为棋盘上的该节点处的合法走法生成1个列表。图中的所有合法走法最后都被转换成了边。另一个辅助函数，posToNodeId将棋盘上的1个位置按照其行列转换为线性节点编号，如图1所示。\n\n**代码1**\n```Python\nfrom pythonds.graphs import Graph\n\ndef knightGraph(bdSize):\n    ktGraph = Graph()\n    for row in range(bdSize):\n       for col in range(bdSize):\n           nodeId = posToNodeId(row,col,bdSize)\n           newPositions = genLegalMoves(row,col,bdSize)\n           for e in newPositions:\n               nid = posToNodeId(e[0],e[1],bdSize)\n               ktGraph.addEdge(nodeId,nid)\n    return ktGraph\n\ndef posToNodeId(row, column, board_size):\n    return (row * board_size) + column\n```\n代码2中的genLeagalMove函数将以骑士的位置作为参数，并创建了可能的8个走法。legalCoord辅助函数用来保证创建的某个走法是在棋盘内的。该图中有336条边，并且可以发现，棋盘边缘的顶点的合规走法比棋盘内部的顶点少，此外该棋盘是稀疏的，填充率只有8.2%。\n\n![../_images/bigknight.png](http://interactivepython.org/courselib/static/pythonds/_images/bigknight.png)\n\n## 7.13 实现骑士周游 ##\n\n解决骑士周游问题将使用**深度优先搜索（depth first search）**。上一节讨论的宽度优先搜索算法是一次为搜索树建立一层，而深度优先算法则尽量向枝的深处搜索。本节介绍两种实现DFS的算法。第1个算法是专门用来解决骑士周游问题的，它显式地要求各节点最多被访问1次。第2种实现更加通用，但会允许在生成树时对其某个节点访问不止一次。在后续章节中，基于第2种算法开发了其它的算法。\n\n图的深度优先搜索很适合用来找到1条由63条边构成的路径。当深度搜索算法发现1条死路（图中的某个节点，使得接下来没有合法的移动了），它便会返回，并且朝着有合法移动的顶点的最深处移动。\n\n骑士周游函数接受4个参数：n，搜索树当前的深度；path，到该节点为止已访问过的顶点；u，待搜索节点；limit，路径中的节点数。knightTour函数是递归的。当knightTour函数被调用时，它首先检查约束条件。如果",[[1528284277435,["Re@Re.local",[[1,12799,"w"]],[12797,12799],[12799,12800]]],[1528284278348,["Re@Re.local",[[-1,12799,"w"]],[12799,12800],[12799,12799]]],[1528284320557,["Re@Re.local",[[1,12799,"有条"]],[12799,12799],[12801,12801]]],[1528284320922,["Re@Re.local",[[-1,12799,"有条"]],[12801,12801],[12799,12799]]],[1528284334811,["Re@Re.local",[[1,12799,"某条路径含有64个顶点，将其从knightTour返回"]],[12799,12799],[12826,12826]]],[1528284337478,["Re@Re.local",[[-1,12813,"从"]],[12814,12814],[12813,12813]]],[1528284343342,["Re@Re.local",[[1,12813,"以True从"]],[12813,12813],[12819,12819]]],[1528284347326,["Re@Re.local",[[1,12831,"，表示"]],[12831,12831],[12834,12834]]],[1528284349818,["Re@Re.local",[[-1,12812,"其以"]],[12814,12814],[12812,12812]]],[1528284368563,["Re@Re.local",[[1,12832,"找到了一条可行的周游路径。若该路径不过"]],[12832,12832],[12851,12851]]],[1528284368929,["Re@Re.local",[[-1,12849,"不过"]],[12851,12851],[12849,12849]]],[1528284373130,["Re@Re.local",[[1,12849,"长度不够，则继续"]],[12849,12849],[12857,12857]]],[1528284388602,["Re@Re.local",[[1,12857,"向更深处搜索，"]],[12857,12857],[12864,12864]]],[1528284397099,["Re@Re.local",[[-1,12863,"，"]],[12864,12864],[12863,12863]]],[1528284404463,["Re@Re.local",[[1,12863,"————选"]],[12863,12863],[12868,12868]]],[1528284404604,["Re@Re.local",[[-1,12867,"选"]],[12868,12868],[12867,12867]]],[1528284405394,["Re@Re.local",[[1,12867,"从"]],[12867,12867],[12868,12868]]],[1528284405753,["Re@Re.local",[[-1,12867,"从"]],[12868,12868],[12867,12867]]],[1528284407471,["Re@Re.local",[[1,12867,"选则"]],[12867,12867],[12869,12869]]],[1528284408289,["Re@Re.local",[[-1,12867,"选则"]],[12869,12869],[12867,12867]]],[1528284414564,["Re@Re.local",[[1,12867,"选择1个新顶点以继续搜索，"]],[12867,12867],[12880,12880]]],[1528284415318,["Re@Re.local",[[-1,12879,"，"]],[12880,12880],[12879,12879]]],[1528284416570,["Re@Re.local",[[1,12879,"并"]],[12879,12879],[12880,12880]]],[1528284418669,["Re@Re.local",[[-1,12875,"继续"]],[12877,12877],[12875,12875]]],[1528284422299,["Re@Re.local",[[1,12878,"调用"]],[12878,12878],[12880,12880]]],[1528284422608,["Re@Re.local",[[-1,12878,"调用"]],[12880,12880],[12878,12878]]],[1528284423632,["Re@Re.local",[[1,12878,"吊柜"]],[12878,12878],[12880,12880]]],[1528284423935,["Re@Re.local",[[-1,12878,"吊柜"]],[12880,12880],[12878,12878]]],[1528284426240,["Re@Re.local",[[1,12878,"递归调用"]],[12878,12878],[12882,12882]]],[1528284428440,["Re@Re.local",[[1,12878,"对"]],[12878,12878],[12879,12879]]],[1528284614640,["Re@Re.local",[[1,12879," "]],[12879,12879],[12880,12880]]],[1528284616230,["Re@Re.local",[[-1,12878,"对 "]],[12880,12880],[12878,12878]]],[1528295594957,["Re@Re.local",[[1,12882,"knightTour。"]],[12881,12882],[12893,12893]]],[1528295595297,["Re@Re.local",[[1,12893,"\n\n"]],[12893,12893],[12894,12894]]],[1528295595550,["Re@Re.local",[[1,12895,"\n"]],[12894,12894],[12895,12895]]],[1528295597805,["Re@Re.local",[[-1,12895,"\n"],[1,12896,"DFS"]],[12895,12895],[12898,12898]]],[1528295601545,["Re@Re.local",[[-1,12895,"DFS"]],[12898,12898],[12895,12895]]],[1528295762036,["Re@Re.local",[[1,12895,"\n\n"]],[12895,12895],[12896,12896]]],[1528295762996,["Re@Re.local",[[-1,12896,"\n"]],[12896,12896],[12895,12895]]],[1528295764346,["Re@Re.local",[[-1,12895,"\n"]],[12895,12895],[0,0]]],[1528295767993,["Re@Re.local",[[1,12895,"\n\n"]],[12895,12895],[12896,12896]]],[1528295777925,["Re@Re.local",[[-1,12896,"\n"],[1,12897,"DFS也使用颜色来记录那些"]],[12896,12896],[12909,12909]]],[1528295778215,["Re@Re.local",[[-1,12907,"那些"]],[12909,12909],[12907,12907]]],[1528295785816,["Re@Re.local",[[1,12907,"图中哪些节点已经被"]],[12907,12907],[12916,12916]]],[1528296651765,["Re@Re.local",[[1,12916,"w"]],[12916,12916],[12917,12917]]],[1528296652025,["Re@Re.local",[[-1,12916,"w"]],[12917,12917],[12916,12916]]],[1528296698986,["Re@Re.local",[[-1,12915,"被"]],[12916,12916],[12915,12915]]],[1528296700755,["Re@Re.local",[[1,12915,"b诶"]],[12916,12916],[12917,12917]]],[1528296701072,["Re@Re.local",[[-1,12915,"b诶"]],[12917,12917],[12915,12915]]],[1528296704258,["Re@Re.local",[[1,12915,"被访问。"]],[12915,12915],[12919,12919]]],[1528296704933,["Re@Re.local",[[-1,12918,"。"]],[12919,12919],[12918,12918]]],[1528296714951,["Re@Re.local",[[1,12918,"，没有被访问过的顶点被图"]],[12918,12918],[12930,12930]]],[1528296715281,["Re@Re.local",[[-1,12929,"图"]],[12930,12930],[12929,12929]]],[1528296722132,["Re@Re.local",[[1,12929,"涂为白色，其"]],[12929,12929],[12935,12935]]],[1528296722305,["Re@Re.local",[[-1,12934,"其"]],[12935,12935],[12934,12934]]],[1528296733959,["Re@Re.local",[[1,12934,"访问过的是灰色。如果某"]],[12934,12934],[12945,12945]]],[1528296736211,["Re@Re.local",[[-1,12942,"如果某"]],[12945,12945],[12942,12942]]],[1528296751129,["Re@Re.local",[[1,12942,"若某一顶点所有的临近节点"]],[12942,12942],[12954,12954]]],[1528296751532,["Re@Re.local",[[-1,12952,"节点"]],[12954,12954],[12952,12952]]],[1528296754913,["Re@Re.local",[[1,12952,"顶点都被访问"]],[12952,12952],[12958,12958]]],[1528296755114,["Re@Re.local",[[-1,12956,"访问"]],[12958,12958],[12956,12956]]],[1528296756772,["Re@Re.local",[[1,12956,"搜索过"]],[12956,12956],[12959,12959]]],[1528296769936,["Re@Re.local",[[1,12959,"了并且还没有达到64个顶点的长度"]],[12959,12959],[12975,12975]]],[1528296823511,["Re@Re.local",[[1,12975,"为"]],[12975,12975],[12976,12976]]],[1528296823659,["Re@Re.local",[[-1,12975,"为"]],[12976,12976],[12975,12975]]],[1528296826994,["Re@Re.local",[[1,12975,"的"]],[12975,12975],[12976,12976]]],[1528296827226,["Re@Re.local",[[-1,12975,"的"]],[12976,12976],[12975,12975]]],[1528296832750,["Re@Re.local",[[1,12975,"的话，则"]],[12975,12975],[12979,12979]]],[1528296837309,["Re@Re.local",[[-1,12978,"则"]],[12979,12979],[12978,12978]]],[1528296852443,["Re@Re.local",[[-1,12950,"临近顶点"]],[12954,12954],[12950,12950]]],[1528296861733,["Re@Re.local",[[1,12950,"邻接"]],[12950,12950],[12952,12952]]],[1528297169139,["Re@Re.local",[[1,12976,"."]],[12976,12976],[12977,12977]]],[1528297169869,["Re@Re.local",[[-1,12975,"，."]],[12977,12977],[12975,12975]]],[1528297171258,["Re@Re.local",[[1,12975,"。"]],[12975,12975],[12976,12976]]],[1528297172110,["Re@Re.local",[[-1,12975,"。"]],[12976,12976],[12975,12975]]],[1528297172474,["Re@Re.local",[[1,12975,"。"]],[12975,12975],[12976,12976]]],[1528297175753,["Re@Re.local",[[-1,12975,"。"]],[12976,12976],[12975,12975]]],[1528297179475,["Re@Re.local",[[1,12975,"，则说明到达"]],[12975,12975],[12981,12981]]],[1528297181688,["Re@Re.local",[[-1,12977,"说明到达"]],[12981,12981],[12977,12977]]],[1528297182045,["Re@Re.local",[[1,12977,"【"]],[12977,12977],[12978,12978]]],[1528297182820,["Re@Re.local",[[-1,12977,"【"]],[12978,12978],[12977,12977]]],[1528297184657,["Re@Re.local",[[1,12977,"叨叨"]],[12977,12977],[12979,12979]]],[1528297185036,["Re@Re.local",[[-1,12977,"叨叨"]],[12979,12979],[12977,12977]]],[1528297187418,["Re@Re.local",[[1,12977,"到达"]],[12977,12977],[12979,12979]]],[1528297187738,["Re@Re.local",[[-1,12977,"到达"]],[12979,12979],[12977,12977]]],[1528297194895,["Re@Re.local",[[1,12977,"说明当前是一条死路。"]],[12977,12977],[12987,12987]]]]],["fc93c07b-7059-42ad-8687-ec3f3afadd4e",1528372722982,"## 7.1 目标 ##\n\n- 学习图的概念和使用方式。\n- 以多种方式实现抽象数据类型Gragh。\n- 了解图在解决多种问题时的应用。\n\n本章研究图像。图像是比上一章学习的树更加通用的结构，实际上可以认为树是一种特殊的图像。图像也可以用来表示真实世界中的很多东西，比如公路系统，航线系统，网路系统甚至是完成计算机科学学位所必须的课程序列。本章读者会看到，一旦给某个问题以合适的表示，利用一些图像算法便可以轻松将看起来很困难的问题解决。\n\n对人类来说，看懂道路地图并理解不同地点之间的关系并不困难，但是计算机并没有这种能力。然而，可以将道路系统看作是1个图像，如此一来便可以让计算机做一些有趣的事情了。比如在互联网地图中，计算机可以找到从某个地方到另一个地方的最近、最快或者最简单的路线。\n\n作为计算机科学的学生，读者可能对获得学位所需要的课程比较感兴趣。图像可以很好地表达课程之间的依赖关系。图1便是1个例子。\n\n![../_images/CS-Prereqs.png](http://interactivepython.org/courselib/static/pythonds/_images/CS-Prereqs.png)\n\n## 7.2 术语和定义 ##\n\n\n**顶点（vertex）**\n顶点（也称为节点**node**）是图像的基础构件。它可以有名称，即键。顶点也可以有其它额外信息，即负载。\n**边（Edge）**\n边有时也被称为弧（arc），是图像的另一种基础构件。边将2个顶点连接起来以表示这2者之间存在某种关系。边可以是单向的也可以是双向的。当某个图像中的所有边都是单向的时候，便称该图像是**有向图（directed gragh/digrah）**。上示的课程依赖图显示是有向图，因为必须先完成某些课程后才能继续其它某些课程。\n**权重（weight）**\n为了表示从某个顶点到另一个顶点所需的代价，可以顶点进行**赋权（weighted）**。比如说公路图中某个城市连接到另一个城市，边上的权重可以表示为两个城市之间的距离。\n\n有了以上基本概念，便可以来对图像作一定义了。图像可以表示为G，其中G=(V,E)。对于图像G，V是顶点的集合，E是边的集合。每个边都是一个元组（v,w)，其中$w,v∈V$。可以向边元组中加入第3个元素来表示权重。子图s是顶点的集合v和边的集合e，使得$e⊂E且v⊂V$。\n\n图2给出了1个简单的赋权有向图作为例子。该图像可以用集合严格地表示：\n$$ V={V0,V1,V2,V3,V4,V5} $$\n$$ E= \\left \\{ (v0,v1,5),(v1,v2,4),(v2,v3,9),(v3,v4,7),(v4,v0,1),(v0,v5,2),(v5,v4,8),(v3,v5,3),(v5,v2,1) \\right \\} $$\n![../_images/digraph.png](http://interactivepython.org/courselib/static/pythonds/_images/digraph.png)\n\n图2中的例子演示了图像的另外2个关键术语。\n**路径（path）**\n路径是由边连接起来的顶点的序列。一般地，将路径定义为 $w_1,w_2,...,w_n$ 使得 $(w_i,w_{i+1})\\in E$ 对所有 $1≤i≤n−1$ 成立。无权路径长度是路径中边的个数，即n-1。权重路径长度是路径中边的权重之和。比如图2中，从V3到V1的路径是顶点序列 $(V3,V4,V0,V1)$ 而边为 ${(v3,v4,7),(v4,v0,1),(v0,v1,5)}{(v3,v4,7),(v4,v0,1),(v0,v1,5)}$。\n**环（cycle）**\n有向图中的环是首尾顶点相同的路径。比如说，图2中路径 $(V5,V2,V3,V5)(V5,V2,V3,V5)$ 就是1个环。没有环的图被称为**无环图（acyclic graph）**。没有环的有向图被称为**有向无环图（directed acyclic graph，DAG）**。接下来读者会看到，一些很重要的问题可以通过表示为DAG获得解决。\n\n## 7.3 抽象数据类型：Graph ##\n\n抽象数据类型Gragh被定义为：\n- Graph()生成一个新的空图。\n- addVertex(vert) 将Vertex的1个实例添加至图。\n- addEdge(fromVert,toVert) 向图添加1个连接2个顶点的有向边。\n- addEdge(fromVert,toVert,weight)向图添加1个连接2个顶点的赋权有向边。\n- getVertex(vertKey) 找到途中以vertKey命名的顶点。\n- getVertices() 返回途中所有顶点的列表。\n- in 对于vertex in graph这种形式的语句，若给定的vertex在途中，返回True，反之则False。\n\n有了图像的正式定义，在Python中可以用多种方式实现，下面来看看使用不同方式实现该ADT的优劣与差别。有两个著名的图的实现，即**邻接矩阵（adjacency matrix）**和**邻接表（adjacency list）**，本书将对这两种都进行解释，并对其中1中以Python类的方式实现。\n\n## 7.4 邻接矩阵（adjacency matrix）##\n\n\n实现图的最简单方式之一是使用二维矩阵。在二维矩阵中，每行每列的都代表了图中的1个顶点。如果顶点v到顶点w有边，行v和列w的交叉点单元格会存储值。若两个顶点由边连接，便称这两个顶点是**邻接**的。图3给出了图2的邻接矩阵。单元格中存储的值是v到w的权重。\n\n![../_images/adjMat.png](http://interactivepython.org/courselib/static/pythonds/_images/adjMat.png)\n\n邻接矩阵的优势是简便，并且对于小图来说，很容易看出哪些节点是相连的。然而，注意到矩阵中大多数单元格都是空。因为大多数单元格都是空的，因此称该矩阵是**稀疏（sparse）**的。矩阵并不能高效地存储这种稀疏数据。实际上，在Python中像图3这种矩阵结构都很麻烦。\n\n邻接矩阵对于边树较高的图来说是不错的实现。“较高”是什么意思？到底需要多少个边才能填满该矩阵？因此为每行、每列都对应个顶点，填满矩阵需要的顶点数是$|V|_2$。当每个顶点都与另外每一个顶点相连时，则该矩阵被填满了。实践中很少会遇到以这种方式连接的问题。本章研究的所有问题都是稀疏图。\n\n## 7.5 邻接表（adjacency list） ##\n\n邻接表可以用更少的空间实现稀疏图。在邻接表的实现中，维护一个包含图对象所有顶点的主列表，然后图对象中各个顶点对象都维护一个该对象连接的其它顶点对象的列表。在Vertex类的实现中，将使用字典而不是列表，其中字典的键为顶点，值为权重。图4给出了图2的邻接表实现示意图。\n![../_images/adjlist.png](http://interactivepython.org/courselib/static/pythonds/_images/adjlist.png)\n\n邻接表的有时在于它可以紧凑地表示稀疏图，利用稀疏图也可以轻松地找到某个顶点所有的连接情况。\n\n## 7.6 实现 ##\n\n使用字典可以很容易地在Python中实现邻接表。在本书的实现中会创建两个类（代码1、代码2），Graph保存顶点的祝列表，而Vertex即图中每个顶点。\n\n每个Vertex都使用字典来保存其连接的对象以及每条边的权重。该字典被命名为connectedTo。以下代码便是Vertex类的实现。构造器只是初始化了可以是字符串的id以及connectedTo字典。addNeighbor方法用来添加从该顶点到另一顶点的连接。getConnections方法返回当前节点connectedTo实例变量保存的邻接表中的所有顶点。getWeight方法返回从该节点到另一个作为参数传入的节点的边的权重。\n\n**代码1**\n```Pythion\nclass Vertex:\n    def __init__(self,key):\n        self.id = key\n        self.connectedTo = {}\n\n    def addNeighbor(self,nbr,weight=0):\n        self.connectedTo[nbr] = weight\n\n    def __str__(self):\n        return str(self.id) + ' connectedTo: ' + str([x.id for x in self.connectedTo])\n\n    def getConnections(self):\n        return self.connectedTo.keys()\n\n    def getId(self):\n        return self.id\n\n    def getWeight(self,nbr):\n        return self.connectedTo[nbr]\n```\nGraph类，如下面的代码所示，保存了一个字典，将顶点名映射到顶点对象。在图4中，该字典对象表示为灰色阴影框。Graph类也听过了方法用于添加顶点和连接顶点。此外，实现了\\_\\_iter\\_\\_方法来使得可以在图中对所有顶点对象进行迭代。这两种方法可以用来实现按名称或者是对象本身来对图中顶点的迭代。\n\n**代码2**\n```Python\nclass Graph:\n    def __init__(self):\n        self.vertList = {}\n        self.numVertices = 0\n\n    def addVertex(self,key):\n        self.numVertices = self.numVertices + 1\n        newVertex = Vertex(key)\n        self.vertList[key] = newVertex\n        return newVertex\n\n    def getVertex(self,n):\n        if n in self.vertList:\n            return self.vertList[n]\n        else:\n            return None\n\n    def __contains__(self,n):\n        return n in self.vertList\n\n    def addEdge(self,f,t,cost=0):\n        if f not in self.vertList:\n            nv = self.addVertex(f)\n        if t not in self.vertList:\n            nv = self.addVertex(t)\n        self.vertList[f].addNeighbor(self.vertList[t], cost)\n\n    def getVertices(self):\n        return self.vertList.keys()\n\n    def __iter__(self):\n        return iter(self.vertList.values())\n```\n使用以上定义的Graph和Vertex类，以下代码边可以表示图2。首先生成6个节点编号0-5，查看顶点字典，注意到对0-5的键都创建了1个Vertex实例。然后，将连接了顶点的边集合到一起。最后，使用嵌套循环确定图中的每个边都正确存储了。读者应该将输出结果与图2作一对比。\n```Python\n>>> g = Graph()\n>>> for i in range(6):\n...    g.addVertex(i)\n>>> g.vertList\n{0: <adjGraph.Vertex instance at 0x41e18>,\n 1: <adjGraph.Vertex instance at 0x7f2b0>,\n 2: <adjGraph.Vertex instance at 0x7f288>,\n 3: <adjGraph.Vertex instance at 0x7f350>,\n 4: <adjGraph.Vertex instance at 0x7f328>,\n 5: <adjGraph.Vertex instance at 0x7f300>}\n>>> g.addEdge(0,1,5)\n>>> g.addEdge(0,5,2)\n>>> g.addEdge(1,2,4)\n>>> g.addEdge(2,3,9)\n>>> g.addEdge(3,4,7)\n>>> g.addEdge(3,5,3)\n>>> g.addEdge(4,0,1)\n>>> g.addEdge(5,4,8)\n>>> g.addEdge(5,2,1)\n>>> for v in g:\n...    for w in v.getConnections():\n...        print(\"( %s , %s )\" % (v.getId(), w.getId()))\n...\n( 0 , 5 )\n( 0 , 1 )\n( 1 , 2 )\n( 2 , 3 )\n( 3 , 4 )\n( 3 , 5 )\n( 4 , 0 )\n( 5 , 4 )\n( 5 , 2 )\n```\n## 词梯（word ladder）问题 ##\n\n以词梯问题开始图算法的研究。将单词\"FOOL\"转化为\"SAGE\"。按词梯问题的规则，1次只能修改1个字母，在每1步都必须将单词转换为另一个单词，不允许转换为非单词。词梯问题是由*爱丽丝梦游仙境*的作者lewis Carroll于1878年提出的。以下单词序列是刚才那个问题的一个可行解。\n```Python\nFOOL\nPOOL\nPOLL\nPOLE\nPALE\nSALE\nSAGE\n```\n词梯问题有许多变体。比如读者可能遇到要求在给定步数来完成转换的版本，或是必须用给点单词的版本。本节仅关注计算出完成转换所需要的最小修改次数。\n\n当然，因为本章内容是图，因此可以用图算法来将其解决。以下是纲要：\n- 将单词之间的关系重新表示为图。\n- 使用**广度优先搜索算法（breadth first search**来找到从起始单词到目标单词的最短路径。\n\n## 7.8 建立词梯图 ##\n\n首先要解决的问题是如何将单词列表转换为图。对于边来说，需要保证它们连接的是差且仅差了1个字母的单词。如果生成这种图，那么从一个单词出发的任意路径都是该词梯问题的解。图1给出了1个小的由单词构成的图，它可以用来解决FOOL到SAGE的词梯问题。注意，该图是无向图且无权重。\n\n![../_images/wordgraph.png](http://interactivepython.org/courselib/static/pythonds/_images/wordgraph.png)\n\n\n可以使用很多方法来生成这个图。首先假设有1组长度相同的单词，从起点出发，为列表中的每一个单词创建1个顶点。为了确定如何将这些单词连接起来，可以将列表中的每个单词与其它的单词一一进行比较，在比较时确定有多少个字母不同。如果两个字母仅相差1个字母，便可以在图中为它们两创建1条边。单词数较少时，这个方法还是可行的。但是假设有5110个单词的话（粗略估计一一进行对比需要$O(n^2)$的时间复杂度），需要进行2500万次对比。\n\n使用以下方法可以对其进行优化。假设有大量桶，每个桶外面都贴着1个4字母单词，但是字母中有1个被下划线替代。比如说，对于图2这种情况，可能会有个桶被贴上\"POP_\"。当在列表中对每个单词进行处理时，将该单词与每个桶进行对比，将\"\\_\"用作通配符，因此\"POPE\"和\"POPS\"都与\"POP\\_\"匹配。每当找到1个匹配的桶时，都将该单词放进去。当所有的单词都放在了正确的桶里时，可以确定同一桶里的单词是相连的。\n\n![../_images/wordbuckets.png](http://interactivepython.org/courselib/static/pythonds/_images/wordbuckets.png)\n\n在Python中，可以通过字典实现上述方案。桶的标签作为字典的键，键对应的值为单词列表。首先为各个单词在图中创建1个顶点。然后为处于字典同一键下的单词之间创建边，如代码1所示。\n```Python\nfrom pythonds.graphs import Graph\n\ndef buildGraph(wordFile):\n    d = {}\n    g = Graph()\n    wfile = open(wordFile,'r')\n    # create buckets of words that differ by one letter\n    for line in wfile:\n        word = line[:-1]\n        for i in range(len(word)):\n            bucket = word[:i] + '_' + word[i+1:]\n            if bucket in d:\n                d[bucket].append(word)\n            else:\n                d[bucket] = [word]\n    # add vertices and edges for words in the same bucket\n    for bucket in d.keys():\n        for word1 in d[bucket]:\n            for word2 in d[bucket]:\n                if word1 != word2:\n                    g.addEdge(word1,word2)\n    return g\n```\n这是第一个跟现实生活相关的图问题，读者可能会好奇该图的稀疏程度。对于该问题，准备的单词列表有5510个。若果使用邻接矩阵，矩阵将会有5110*5110个单元格，而使用buildGraph函数的图仅有53286条边，因此仅有0.20%的单元格被填充了，这实际上是一个很稀疏的矩阵了。\n\n## 7.9 实现宽度优先搜索（breadth first search） ##\n\n创建好了图，接下来便可以研究解决字梯问题的最优算法了。这里使用的算法被称为**宽度优先搜索（breadth first search,BFS）**。BFS是用于图搜索的最简单的算法之一。它也是之后将研究的其它几种重要的图算法的原型。\n\n给定图G以及起始顶点s，宽度优先算法将对图内的边进行搜索以找到G中所有与s有路径相连的顶点。宽度优先搜索的优势在于，在找到与s距离为k+1的所有顶点之前，它会先找出所有距离为k的顶点。BFS的运行过程可以想象为生成树的过程，每次都生成树的一层。BFS在对子孙顶点进行搜索前，先将初始顶点的子顶点加入进来。\n\n为了跟踪运行过程，BFS将顶点染成白色，灰色或黑色。所有的顶点都被初始为白色。白色顶点是未被探索的顶点。当某个顶点被初次探索时，将其染成灰色，当BFS完成对某个顶点的探索时，将其染成黑色。这意味着，对于黑色的顶点，它是没有白色节点与之邻接的。灰色节点，有可能会存在白色节点与之邻接，需要进一步探索。\n\n此外，BFS算法使用了Vertex类的改进版。这种新的顶点类新增了3种实例变量，即distance,predecessor以及颜色。每个实例变量都有正确的getter和setter方法。这里就不作展示了，因为只是加了3个实例变量而已。\n\nBFS从起始顶点s开始，将start染成灰色来表示当前正在对其进行搜索。对于起始顶点，另外两个值，distance和predecessor分别被初始化为0和None。最后，start被放入1个Queue中。下一步便是系统地对队列前部的顶点进行搜索。所谓搜索，即是对队列前部的某1个节点的邻接列表作迭代。每当对邻接列表中的节点作处理时，先对其颜色进行判断。如果是白色的，则该节点尚未搜索过，于是执行以下4步操作：\n1. 将新的，未搜索的顶点nbr染成灰色。\n2. 将nbr的predecessor设置为当前节点currentVert。\n3. 到nbr的距离设为currentVert + 1。\n4. 将nbr放入队尾。将nbr放在队尾使得该节点只有在currentVert的邻接列表中的所有其它顶点都被搜索过了才会继续被搜索。\n\n**代码2**\n```Python\nfrom pythonds.graphs import Graph, Vertex\nfrom pythonds.basic import Queue\n\ndef bfs(g,start):\n  start.setDistance(0)\n  start.setPred(None)\n  vertQueue = Queue()\n  vertQueue.enqueue(start)\n  while (vertQueue.size() > 0):\n    currentVert = vertQueue.dequeue()\n    for nbr in currentVert.getConnections():\n      if (nbr.getColor() == 'white'):\n        nbr.setColor('gray')\n        nbr.setDistance(currentVert.getDistance() + 1)\n        nbr.setPred(currentVert)\n        vertQueue.enqueue(nbr)\n    currentVert.setColor('black')\n```\n现在来仔细研究下bfs函数是如何对图1构件宽度优先树的。从FOOL出发，将所有与FOOL邻接的节点连接到该树上。临近节点包括POOL，FOIL，FOUL和COOL。每个节点都放入了待搜索待新节点。图3给出了该操作中的树及完成后的队列。\n![../_images/bfs1.png](http://interactivepython.org/courselib/static/pythonds/_images/bfs1.png)\n\n\n接下来，bfs从队首去掉了下一个节点(POOL)，并对其所有邻接节点重复该操作。然而，当bfs检查到节点COOL时，它发现COOL的颜色已经是灰色了。这意味着有更短的路径到达COOL，并且COOL已经留在队列中以待进一步搜索。在对POOL进行监测时唯一新加入队列的是POLL。新状态如图4所示。\n\n![../_images/bfs2.png](http://interactivepython.org/courselib/static/pythonds/_images/bfs2.png)\n\n队列中的下一个顶点是FOIL。FOIL可以加入树的节点是FAIL，当bfs方法继续处理队列时，接下来两个节点都没有向树或者队列加入新的节点。图5展示的是对树的第二层所有顶点都探索完成了后的树和队列。\n\n![../_images/bfs3.png](http://interactivepython.org/courselib/static/pythonds/_images/bfs3.png)\n![../_images/bfsDone.png](http://interactivepython.org/courselib/static/pythonds/_images/bfsDone.png)\n\n读者应该自己动手过一遍该算法，以对该算法获得更好的理解。图6是图3中已完成所有顶点的搜索后的最终宽度优先搜索树。宽度优先搜索的惊人之处在于，它不仅解决了初始的FOOL-SAGE问题，也顺便解决了许多其它问题。从宽度优先搜索树中的任一节点出发，沿着父节点的箭头返回到根节点，便可以得到该单词变为FOOL的最短词梯。代码3沿着父节点链打印出了词梯：\n**代码3**\n```Python\ndef traverse(y):\n    x = y\n    while (x.getPred()):\n        print(x.getId())\n        x = x.getPred()\n    print(x.getId())\n\ntraverse(g.getVertex('sage'))\n```\n## 7.10 宽度优先搜索分析 ##\n\n在继续研究其它图算法前，先来分析一下宽度优先搜索算法的运行性能。首先应当观察到的是，图|V|中的每个顶点在循环中最多被处理一次，因为在进行监测和加入队列前，该顶点必须是白色的。因此整个循环为O(V)。嵌套在while中的for循环对图中的每条边最多执行1次，|E|，因此每个顶点最多出队1次并且只在节点u出队时才检查节点u到节点v的边，该for循环为O(E)。因此两个循环的最终结果是O(V+E)。\n\n当然，执行BFS仅完成了该任务的一部分。从起始节点出发到达目标顶点是该任务的另一部分。最坏情况是，该图是单链的。在这种情况下，遍历所有节点需要O(V)。正常情况下应该是|V|的某个分数，但时间复杂度不会变，仍然是O(V)。\n\n最后，至少对这哥问题而言，生成初始的图也需要时间，其时间复杂度的分析就作为练习了。\n\n## 7.11 骑士周游问题 ##\n\n起始周游是可以用来演示第二种常见图算法的经典问题。骑士周游问题是在国际象棋棋盘上仅使用1个棋子，即起始，该问题的目标是找到1个出棋序列使得骑士可以访问各个方格恰好1次。这样的序列被称为周游。起始周游问题多年来吸引了很多棋手、数学家和计算机科学家等。在8*8的棋盘上，可行的序列数的上界为$1.305\\times 10^{35}$。然而，还有很多时候会走到死棋的情况。当然，还有很多时候会失败。显然这是一个需要些智慧和计算力的问题。\n\n学者已经提出了很多该问题的接发，图搜索是最最容易理解和编程的。同样地，分两步来求解：\n- 将骑士在棋盘上符合规则的移动以图表示。\n- 使用图算法来找到长度为$rows\\times columns-1$的路径，其中每个顶点都恰好只访问1次。\n\n## 7.12 生成骑士周游图 ##\n\n为了将骑士周游问题表示为图，使用以下两种思想：棋盘上的每个方格都被表示为图中的一个节点；骑士的每个合法的移动都被标记为图中的边。图1是骑士的1中合规走法，并给出了其对应的在图中的边。\n\n![../_images/knightmoves.png](http://interactivepython.org/courselib/static/pythonds/_images/knightmoves.png)\n\n为$n\\times n$的棋盘生成图，其Python代码如代码1所示。knightGraph函数对整个棋盘作1次遍历，在棋盘上的每1个方格，kinightGraph函数都调用1个辅助函数genLegalMoves，为棋盘上的该节点处的合法走法生成1个列表。图中的所有合法走法最后都被转换成了边。另一个辅助函数，posToNodeId将棋盘上的1个位置按照其行列转换为线性节点编号，如图1所示。\n\n**代码1**\n```Python\nfrom pythonds.graphs import Graph\n\ndef knightGraph(bdSize):\n    ktGraph = Graph()\n    for row in range(bdSize):\n       for col in range(bdSize):\n           nodeId = posToNodeId(row,col,bdSize)\n           newPositions = genLegalMoves(row,col,bdSize)\n           for e in newPositions:\n               nid = posToNodeId(e[0],e[1],bdSize)\n               ktGraph.addEdge(nodeId,nid)\n    return ktGraph\n\ndef posToNodeId(row, column, board_size):\n    return (row * board_size) + column\n```\n代码2中的genLeagalMove函数将以骑士的位置作为参数，并创建了可能的8个走法。legalCoord辅助函数用来保证创建的某个走法是在棋盘内的。该图中有336条边，并且可以发现，棋盘边缘的顶点的合规走法比棋盘内部的顶点少，此外该棋盘是稀疏的，填充率只有8.2%。\n\n![../_images/bigknight.png](http://interactivepython.org/courselib/static/pythonds/_images/bigknight.png)\n\n## 7.13 实现骑士周游 ##\n\n解决骑士周游问题将使用**深度优先搜索（depth first search）**。上一节讨论的宽度优先搜索算法是一次为搜索树建立一层，而深度优先算法则尽量向枝的深处搜索。本节介绍两种实现DFS的算法。第1个算法是专门用来解决骑士周游问题的，它显式地要求各节点最多被访问1次。第2种实现更加通用，但会允许在生成树时对其某个节点访问不止一次。在后续章节中，基于第2种算法开发了其它的算法。\n\n图的深度优先搜索很适合用来找到1条由63条边构成的路径。当深度搜索算法发现1条死路（图中的某个节点，使得接下来没有合法的移动了），它便会返回，并且朝着有合法移动的顶点的最深处移动。\n\n骑士周游函数接受4个参数：n，搜索树当前的深度；path，到该节点为止已访问过的顶点；u，待搜索节点；limit，路径中的节点数。knightTour函数是递归的。当knightTour函数被调用时，它首先检查约束条件。如果某条路径含有64个顶点，将True从knightTour返回，表示找到了一条可行的周游路径。若该路径长度不够，则继续向更深处搜索————选择1个新顶点以搜索并递归调用knightTour。\n\n\nDFS也使用颜色来记录图中哪些节点已经被访问，没有被访问过的顶点被涂为白色，访问过的是灰色。若某一顶点所有的邻接都被搜索过了并且还没有达到64个顶点的长度的话，则说明当前是一条死路。",[[1528372709506,["Re@Re.local",[[1,12987," "]],[12987,12987],[12988,12988]]],[1528372821219,["Re@Re.local",[[1,12952,"顶点"]],[12952,12952],[12954,12954]]],[1528372827057,["Re@Re.local",[[1,12990,"、"]],[12990,12990],[12991,12991]]],[1528372839719,["Re@Re.local",[[-1,12988,"。 、"]],[12991,12991],[12988,12988]]],[1528372842491,["Re@Re.local",[[1,12988,"，此时必须要"]],[12988,12988],[12994,12994]]],[1528372845406,["Re@Re.local",[[1,12994,"进行回溯。"]],[12994,12994],[12999,12999]]],[1528372847617,["Re@Re.local",[[-1,12998,"。"]],[12999,12999],[12998,12998]]],[1528372850785,["Re@Re.local",[[1,12998,"，这里是通过"]],[12998,12998],[13004,13004]]],[1528372852900,["Re@Re.local",[[-1,13002,"通过"]],[13004,13004],[13002,13002]]],[1528372857049,["Re@Re.local",[[1,13002,"通过让kni"]],[13002,13002],[13008,13008]]],[1528372858908,["Re@Re.local",[[-1,13004,"让kni"]],[13008,13008],[13004,13004]]],[1528372862121,["Re@Re.local",[[1,13004,"从knightTr"]],[13004,13004],[13013,13013]]],[1528372862462,["Re@Re.local",[[-1,13012,"r"]],[13013,13013],[13012,13012]]],[1528372865661,["Re@Re.local",[[1,13012,"our放回"]],[13012,13012],[13017,13017]]],[1528372865932,["Re@Re.local",[[-1,13015,"放回"]],[13017,13017],[13015,13015]]],[1528372884119,["Re@Re.local",[[1,13015,"返回False来实现回溯的。在宽度优先搜"]],[13015,13015],[13035,13035]]],[1528372885015,["Re@Re.local",[[-1,13034,"搜"]],[13035,13035],[13034,13034]]],[1528372892298,["Re@Re.local",[[1,13034,"搜索中使用的"]],[13034,13034],[13040,13040]]],[1528372892838,["Re@Re.local",[[-1,13039,"的"]],[13040,13040],[13039,13039]]],[1528372899994,["Re@Re.local",[[1,13039,"队列来记录下一个"]],[13039,13039],[13047,13047]]],[1528373016022,["Re@Re.local",[[-1,13042,"记录下一个"]],[13047,13047],[13042,13042]]],[1528373022268,["Re@Re.local",[[1,13042,"记录需要访问的节点。"]],[13042,13042],[13052,13052]]],[1528373023786,["Re@Re.local",[[1,13052,"而"]],[13052,13052],[13053,13053]]],[1528373026175,["Re@Re.local",[[-1,13052,"而"]],[13053,13053],[13052,13052]]],[1528373037388,["Re@Re.local",[[1,13052,"因为深度优先搜索是递归的，是"]],[13052,13052],[13066,13066]]],[1528373037704,["Re@Re.local",[[-1,13065,"是"]],[13066,13066],[13065,13065]]],[1528373043369,["Re@Re.local",[[1,13065,"其实是饮食"]],[13065,13065],[13070,13070]]],[1528373044228,["Re@Re.local",[[-1,13065,"其实是饮食"]],[13070,13070],[13065,13065]]],[1528373076858,["Re@Re.local",[[1,13065,"因此其实是隐式地十一哦那个"]],[13065,13065],[13078,13078]]],[1528373078228,["Re@Re.local",[[-1,13073,"十一哦那个"]],[13078,13078],[13073,13073]]],[1528373079765,["Re@Re.local",[[1,13073,"使用了"]],[13073,13073],[13076,13076]]],[1528373084742,["Re@Re.local",[[1,13076,"栈道"]],[13076,13076],[13078,13078]]],[1528373084838,["Re@Re.local",[[-1,13077,"道"]],[13078,13078],[13077,13077]]],[1528373090833,["Re@Re.local",[[1,13077,"来进行回溯。当"]],[13077,13077],[13084,13084]]],[1528373179251,["Re@Re.local",[[1,13084,"knightTour函数返回False的是、"]],[13084,13084],[13106,13106]]],[1528373180380,["Re@Re.local",[[-1,13104,"是、"]],[13106,13106],[13104,13104]]],[1528373181740,["Re@Re.local",[[1,13104,"时候，"]],[13104,13104],[13107,13107]]]]],["25d7ffb8-2e84-4d9b-a4da-a3210e5f0609",1528639166044,"## 7.1 目标 ##\n\n- 学习图的概念和使用方式。\n- 以多种方式实现抽象数据类型Gragh。\n- 了解图在解决多种问题时的应用。\n\n本章研究图像。图像是比上一章学习的树更加通用的结构，实际上可以认为树是一种特殊的图像。图像也可以用来表示真实世界中的很多东西，比如公路系统，航线系统，网路系统甚至是完成计算机科学学位所必须的课程序列。本章读者会看到，一旦给某个问题以合适的表示，利用一些图像算法便可以轻松将看起来很困难的问题解决。\n\n对人类来说，看懂道路地图并理解不同地点之间的关系并不困难，但是计算机并没有这种能力。然而，可以将道路系统看作是1个图像，如此一来便可以让计算机做一些有趣的事情了。比如在互联网地图中，计算机可以找到从某个地方到另一个地方的最近、最快或者最简单的路线。\n\n作为计算机科学的学生，读者可能对获得学位所需要的课程比较感兴趣。图像可以很好地表达课程之间的依赖关系。图1便是1个例子。\n\n![../_images/CS-Prereqs.png](http://interactivepython.org/courselib/static/pythonds/_images/CS-Prereqs.png)\n\n## 7.2 术语和定义 ##\n\n\n**顶点（vertex）**\n顶点（也称为节点**node**）是图像的基础构件。它可以有名称，即键。顶点也可以有其它额外信息，即负载。\n**边（Edge）**\n边有时也被称为弧（arc），是图像的另一种基础构件。边将2个顶点连接起来以表示这2者之间存在某种关系。边可以是单向的也可以是双向的。当某个图像中的所有边都是单向的时候，便称该图像是**有向图（directed gragh/digrah）**。上示的课程依赖图显示是有向图，因为必须先完成某些课程后才能继续其它某些课程。\n**权重（weight）**\n为了表示从某个顶点到另一个顶点所需的代价，可以顶点进行**赋权（weighted）**。比如说公路图中某个城市连接到另一个城市，边上的权重可以表示为两个城市之间的距离。\n\n有了以上基本概念，便可以来对图像作一定义了。图像可以表示为G，其中G=(V,E)。对于图像G，V是顶点的集合，E是边的集合。每个边都是一个元组（v,w)，其中$w,v∈V$。可以向边元组中加入第3个元素来表示权重。子图s是顶点的集合v和边的集合e，使得$e⊂E且v⊂V$。\n\n图2给出了1个简单的赋权有向图作为例子。该图像可以用集合严格地表示：\n$$ V={V0,V1,V2,V3,V4,V5} $$\n$$ E= \\left \\{ (v0,v1,5),(v1,v2,4),(v2,v3,9),(v3,v4,7),(v4,v0,1),(v0,v5,2),(v5,v4,8),(v3,v5,3),(v5,v2,1) \\right \\} $$\n![../_images/digraph.png](http://interactivepython.org/courselib/static/pythonds/_images/digraph.png)\n\n图2中的例子演示了图像的另外2个关键术语。\n**路径（path）**\n路径是由边连接起来的顶点的序列。一般地，将路径定义为 $w_1,w_2,...,w_n$ 使得 $(w_i,w_{i+1})\\in E$ 对所有 $1≤i≤n−1$ 成立。无权路径长度是路径中边的个数，即n-1。权重路径长度是路径中边的权重之和。比如图2中，从V3到V1的路径是顶点序列 $(V3,V4,V0,V1)$ 而边为 ${(v3,v4,7),(v4,v0,1),(v0,v1,5)}{(v3,v4,7),(v4,v0,1),(v0,v1,5)}$。\n**环（cycle）**\n有向图中的环是首尾顶点相同的路径。比如说，图2中路径 $(V5,V2,V3,V5)(V5,V2,V3,V5)$ 就是1个环。没有环的图被称为**无环图（acyclic graph）**。没有环的有向图被称为**有向无环图（directed acyclic graph，DAG）**。接下来读者会看到，一些很重要的问题可以通过表示为DAG获得解决。\n\n## 7.3 抽象数据类型：Graph ##\n\n抽象数据类型Gragh被定义为：\n- Graph()生成一个新的空图。\n- addVertex(vert) 将Vertex的1个实例添加至图。\n- addEdge(fromVert,toVert) 向图添加1个连接2个顶点的有向边。\n- addEdge(fromVert,toVert,weight)向图添加1个连接2个顶点的赋权有向边。\n- getVertex(vertKey) 找到途中以vertKey命名的顶点。\n- getVertices() 返回途中所有顶点的列表。\n- in 对于vertex in graph这种形式的语句，若给定的vertex在途中，返回True，反之则False。\n\n有了图像的正式定义，在Python中可以用多种方式实现，下面来看看使用不同方式实现该ADT的优劣与差别。有两个著名的图的实现，即**邻接矩阵（adjacency matrix）**和**邻接表（adjacency list）**，本书将对这两种都进行解释，并对其中1中以Python类的方式实现。\n\n## 7.4 邻接矩阵（adjacency matrix）##\n\n\n实现图的最简单方式之一是使用二维矩阵。在二维矩阵中，每行每列的都代表了图中的1个顶点。如果顶点v到顶点w有边，行v和列w的交叉点单元格会存储值。若两个顶点由边连接，便称这两个顶点是**邻接**的。图3给出了图2的邻接矩阵。单元格中存储的值是v到w的权重。\n\n![../_images/adjMat.png](http://interactivepython.org/courselib/static/pythonds/_images/adjMat.png)\n\n邻接矩阵的优势是简便，并且对于小图来说，很容易看出哪些节点是相连的。然而，注意到矩阵中大多数单元格都是空。因为大多数单元格都是空的，因此称该矩阵是**稀疏（sparse）**的。矩阵并不能高效地存储这种稀疏数据。实际上，在Python中像图3这种矩阵结构都很麻烦。\n\n邻接矩阵对于边树较高的图来说是不错的实现。“较高”是什么意思？到底需要多少个边才能填满该矩阵？因此为每行、每列都对应个顶点，填满矩阵需要的顶点数是$|V|_2$。当每个顶点都与另外每一个顶点相连时，则该矩阵被填满了。实践中很少会遇到以这种方式连接的问题。本章研究的所有问题都是稀疏图。\n\n## 7.5 邻接表（adjacency list） ##\n\n邻接表可以用更少的空间实现稀疏图。在邻接表的实现中，维护一个包含图对象所有顶点的主列表，然后图对象中各个顶点对象都维护一个该对象连接的其它顶点对象的列表。在Vertex类的实现中，将使用字典而不是列表，其中字典的键为顶点，值为权重。图4给出了图2的邻接表实现示意图。\n![../_images/adjlist.png](http://interactivepython.org/courselib/static/pythonds/_images/adjlist.png)\n\n邻接表的有时在于它可以紧凑地表示稀疏图，利用稀疏图也可以轻松地找到某个顶点所有的连接情况。\n\n## 7.6 实现 ##\n\n使用字典可以很容易地在Python中实现邻接表。在本书的实现中会创建两个类（代码1、代码2），Graph保存顶点的祝列表，而Vertex即图中每个顶点。\n\n每个Vertex都使用字典来保存其连接的对象以及每条边的权重。该字典被命名为connectedTo。以下代码便是Vertex类的实现。构造器只是初始化了可以是字符串的id以及connectedTo字典。addNeighbor方法用来添加从该顶点到另一顶点的连接。getConnections方法返回当前节点connectedTo实例变量保存的邻接表中的所有顶点。getWeight方法返回从该节点到另一个作为参数传入的节点的边的权重。\n\n**代码1**\n```Pythion\nclass Vertex:\n    def __init__(self,key):\n        self.id = key\n        self.connectedTo = {}\n\n    def addNeighbor(self,nbr,weight=0):\n        self.connectedTo[nbr] = weight\n\n    def __str__(self):\n        return str(self.id) + ' connectedTo: ' + str([x.id for x in self.connectedTo])\n\n    def getConnections(self):\n        return self.connectedTo.keys()\n\n    def getId(self):\n        return self.id\n\n    def getWeight(self,nbr):\n        return self.connectedTo[nbr]\n```\nGraph类，如下面的代码所示，保存了一个字典，将顶点名映射到顶点对象。在图4中，该字典对象表示为灰色阴影框。Graph类也听过了方法用于添加顶点和连接顶点。此外，实现了\\_\\_iter\\_\\_方法来使得可以在图中对所有顶点对象进行迭代。这两种方法可以用来实现按名称或者是对象本身来对图中顶点的迭代。\n\n**代码2**\n```Python\nclass Graph:\n    def __init__(self):\n        self.vertList = {}\n        self.numVertices = 0\n\n    def addVertex(self,key):\n        self.numVertices = self.numVertices + 1\n        newVertex = Vertex(key)\n        self.vertList[key] = newVertex\n        return newVertex\n\n    def getVertex(self,n):\n        if n in self.vertList:\n            return self.vertList[n]\n        else:\n            return None\n\n    def __contains__(self,n):\n        return n in self.vertList\n\n    def addEdge(self,f,t,cost=0):\n        if f not in self.vertList:\n            nv = self.addVertex(f)\n        if t not in self.vertList:\n            nv = self.addVertex(t)\n        self.vertList[f].addNeighbor(self.vertList[t], cost)\n\n    def getVertices(self):\n        return self.vertList.keys()\n\n    def __iter__(self):\n        return iter(self.vertList.values())\n```\n使用以上定义的Graph和Vertex类，以下代码边可以表示图2。首先生成6个节点编号0-5，查看顶点字典，注意到对0-5的键都创建了1个Vertex实例。然后，将连接了顶点的边集合到一起。最后，使用嵌套循环确定图中的每个边都正确存储了。读者应该将输出结果与图2作一对比。\n```Python\n>>> g = Graph()\n>>> for i in range(6):\n...    g.addVertex(i)\n>>> g.vertList\n{0: <adjGraph.Vertex instance at 0x41e18>,\n 1: <adjGraph.Vertex instance at 0x7f2b0>,\n 2: <adjGraph.Vertex instance at 0x7f288>,\n 3: <adjGraph.Vertex instance at 0x7f350>,\n 4: <adjGraph.Vertex instance at 0x7f328>,\n 5: <adjGraph.Vertex instance at 0x7f300>}\n>>> g.addEdge(0,1,5)\n>>> g.addEdge(0,5,2)\n>>> g.addEdge(1,2,4)\n>>> g.addEdge(2,3,9)\n>>> g.addEdge(3,4,7)\n>>> g.addEdge(3,5,3)\n>>> g.addEdge(4,0,1)\n>>> g.addEdge(5,4,8)\n>>> g.addEdge(5,2,1)\n>>> for v in g:\n...    for w in v.getConnections():\n...        print(\"( %s , %s )\" % (v.getId(), w.getId()))\n...\n( 0 , 5 )\n( 0 , 1 )\n( 1 , 2 )\n( 2 , 3 )\n( 3 , 4 )\n( 3 , 5 )\n( 4 , 0 )\n( 5 , 4 )\n( 5 , 2 )\n```\n## 词梯（word ladder）问题 ##\n\n以词梯问题开始图算法的研究。将单词\"FOOL\"转化为\"SAGE\"。按词梯问题的规则，1次只能修改1个字母，在每1步都必须将单词转换为另一个单词，不允许转换为非单词。词梯问题是由*爱丽丝梦游仙境*的作者lewis Carroll于1878年提出的。以下单词序列是刚才那个问题的一个可行解。\n```Python\nFOOL\nPOOL\nPOLL\nPOLE\nPALE\nSALE\nSAGE\n```\n词梯问题有许多变体。比如读者可能遇到要求在给定步数来完成转换的版本，或是必须用给点单词的版本。本节仅关注计算出完成转换所需要的最小修改次数。\n\n当然，因为本章内容是图，因此可以用图算法来将其解决。以下是纲要：\n- 将单词之间的关系重新表示为图。\n- 使用**广度优先搜索算法（breadth first search**来找到从起始单词到目标单词的最短路径。\n\n## 7.8 建立词梯图 ##\n\n首先要解决的问题是如何将单词列表转换为图。对于边来说，需要保证它们连接的是差且仅差了1个字母的单词。如果生成这种图，那么从一个单词出发的任意路径都是该词梯问题的解。图1给出了1个小的由单词构成的图，它可以用来解决FOOL到SAGE的词梯问题。注意，该图是无向图且无权重。\n\n![../_images/wordgraph.png](http://interactivepython.org/courselib/static/pythonds/_images/wordgraph.png)\n\n\n可以使用很多方法来生成这个图。首先假设有1组长度相同的单词，从起点出发，为列表中的每一个单词创建1个顶点。为了确定如何将这些单词连接起来，可以将列表中的每个单词与其它的单词一一进行比较，在比较时确定有多少个字母不同。如果两个字母仅相差1个字母，便可以在图中为它们两创建1条边。单词数较少时，这个方法还是可行的。但是假设有5110个单词的话（粗略估计一一进行对比需要$O(n^2)$的时间复杂度），需要进行2500万次对比。\n\n使用以下方法可以对其进行优化。假设有大量桶，每个桶外面都贴着1个4字母单词，但是字母中有1个被下划线替代。比如说，对于图2这种情况，可能会有个桶被贴上\"POP_\"。当在列表中对每个单词进行处理时，将该单词与每个桶进行对比，将\"\\_\"用作通配符，因此\"POPE\"和\"POPS\"都与\"POP\\_\"匹配。每当找到1个匹配的桶时，都将该单词放进去。当所有的单词都放在了正确的桶里时，可以确定同一桶里的单词是相连的。\n\n![../_images/wordbuckets.png](http://interactivepython.org/courselib/static/pythonds/_images/wordbuckets.png)\n\n在Python中，可以通过字典实现上述方案。桶的标签作为字典的键，键对应的值为单词列表。首先为各个单词在图中创建1个顶点。然后为处于字典同一键下的单词之间创建边，如代码1所示。\n```Python\nfrom pythonds.graphs import Graph\n\ndef buildGraph(wordFile):\n    d = {}\n    g = Graph()\n    wfile = open(wordFile,'r')\n    # create buckets of words that differ by one letter\n    for line in wfile:\n        word = line[:-1]\n        for i in range(len(word)):\n            bucket = word[:i] + '_' + word[i+1:]\n            if bucket in d:\n                d[bucket].append(word)\n            else:\n                d[bucket] = [word]\n    # add vertices and edges for words in the same bucket\n    for bucket in d.keys():\n        for word1 in d[bucket]:\n            for word2 in d[bucket]:\n                if word1 != word2:\n                    g.addEdge(word1,word2)\n    return g\n```\n这是第一个跟现实生活相关的图问题，读者可能会好奇该图的稀疏程度。对于该问题，准备的单词列表有5510个。若果使用邻接矩阵，矩阵将会有5110*5110个单元格，而使用buildGraph函数的图仅有53286条边，因此仅有0.20%的单元格被填充了，这实际上是一个很稀疏的矩阵了。\n\n## 7.9 实现宽度优先搜索（breadth first search） ##\n\n创建好了图，接下来便可以研究解决字梯问题的最优算法了。这里使用的算法被称为**宽度优先搜索（breadth first search,BFS）**。BFS是用于图搜索的最简单的算法之一。它也是之后将研究的其它几种重要的图算法的原型。\n\n给定图G以及起始顶点s，宽度优先算法将对图内的边进行搜索以找到G中所有与s有路径相连的顶点。宽度优先搜索的优势在于，在找到与s距离为k+1的所有顶点之前，它会先找出所有距离为k的顶点。BFS的运行过程可以想象为生成树的过程，每次都生成树的一层。BFS在对子孙顶点进行搜索前，先将初始顶点的子顶点加入进来。\n\n为了跟踪运行过程，BFS将顶点染成白色，灰色或黑色。所有的顶点都被初始为白色。白色顶点是未被探索的顶点。当某个顶点被初次探索时，将其染成灰色，当BFS完成对某个顶点的探索时，将其染成黑色。这意味着，对于黑色的顶点，它是没有白色节点与之邻接的。灰色节点，有可能会存在白色节点与之邻接，需要进一步探索。\n\n此外，BFS算法使用了Vertex类的改进版。这种新的顶点类新增了3种实例变量，即distance,predecessor以及颜色。每个实例变量都有正确的getter和setter方法。这里就不作展示了，因为只是加了3个实例变量而已。\n\nBFS从起始顶点s开始，将start染成灰色来表示当前正在对其进行搜索。对于起始顶点，另外两个值，distance和predecessor分别被初始化为0和None。最后，start被放入1个Queue中。下一步便是系统地对队列前部的顶点进行搜索。所谓搜索，即是对队列前部的某1个节点的邻接列表作迭代。每当对邻接列表中的节点作处理时，先对其颜色进行判断。如果是白色的，则该节点尚未搜索过，于是执行以下4步操作：\n1. 将新的，未搜索的顶点nbr染成灰色。\n2. 将nbr的predecessor设置为当前节点currentVert。\n3. 到nbr的距离设为currentVert + 1。\n4. 将nbr放入队尾。将nbr放在队尾使得该节点只有在currentVert的邻接列表中的所有其它顶点都被搜索过了才会继续被搜索。\n\n**代码2**\n```Python\nfrom pythonds.graphs import Graph, Vertex\nfrom pythonds.basic import Queue\n\ndef bfs(g,start):\n  start.setDistance(0)\n  start.setPred(None)\n  vertQueue = Queue()\n  vertQueue.enqueue(start)\n  while (vertQueue.size() > 0):\n    currentVert = vertQueue.dequeue()\n    for nbr in currentVert.getConnections():\n      if (nbr.getColor() == 'white'):\n        nbr.setColor('gray')\n        nbr.setDistance(currentVert.getDistance() + 1)\n        nbr.setPred(currentVert)\n        vertQueue.enqueue(nbr)\n    currentVert.setColor('black')\n```\n现在来仔细研究下bfs函数是如何对图1构件宽度优先树的。从FOOL出发，将所有与FOOL邻接的节点连接到该树上。临近节点包括POOL，FOIL，FOUL和COOL。每个节点都放入了待搜索待新节点。图3给出了该操作中的树及完成后的队列。\n![../_images/bfs1.png](http://interactivepython.org/courselib/static/pythonds/_images/bfs1.png)\n\n\n接下来，bfs从队首去掉了下一个节点(POOL)，并对其所有邻接节点重复该操作。然而，当bfs检查到节点COOL时，它发现COOL的颜色已经是灰色了。这意味着有更短的路径到达COOL，并且COOL已经留在队列中以待进一步搜索。在对POOL进行监测时唯一新加入队列的是POLL。新状态如图4所示。\n\n![../_images/bfs2.png](http://interactivepython.org/courselib/static/pythonds/_images/bfs2.png)\n\n队列中的下一个顶点是FOIL。FOIL可以加入树的节点是FAIL，当bfs方法继续处理队列时，接下来两个节点都没有向树或者队列加入新的节点。图5展示的是对树的第二层所有顶点都探索完成了后的树和队列。\n\n![../_images/bfs3.png](http://interactivepython.org/courselib/static/pythonds/_images/bfs3.png)\n![../_images/bfsDone.png](http://interactivepython.org/courselib/static/pythonds/_images/bfsDone.png)\n\n读者应该自己动手过一遍该算法，以对该算法获得更好的理解。图6是图3中已完成所有顶点的搜索后的最终宽度优先搜索树。宽度优先搜索的惊人之处在于，它不仅解决了初始的FOOL-SAGE问题，也顺便解决了许多其它问题。从宽度优先搜索树中的任一节点出发，沿着父节点的箭头返回到根节点，便可以得到该单词变为FOOL的最短词梯。代码3沿着父节点链打印出了词梯：\n**代码3**\n```Python\ndef traverse(y):\n    x = y\n    while (x.getPred()):\n        print(x.getId())\n        x = x.getPred()\n    print(x.getId())\n\ntraverse(g.getVertex('sage'))\n```\n## 7.10 宽度优先搜索分析 ##\n\n在继续研究其它图算法前，先来分析一下宽度优先搜索算法的运行性能。首先应当观察到的是，图|V|中的每个顶点在循环中最多被处理一次，因为在进行监测和加入队列前，该顶点必须是白色的。因此整个循环为O(V)。嵌套在while中的for循环对图中的每条边最多执行1次，|E|，因此每个顶点最多出队1次并且只在节点u出队时才检查节点u到节点v的边，该for循环为O(E)。因此两个循环的最终结果是O(V+E)。\n\n当然，执行BFS仅完成了该任务的一部分。从起始节点出发到达目标顶点是该任务的另一部分。最坏情况是，该图是单链的。在这种情况下，遍历所有节点需要O(V)。正常情况下应该是|V|的某个分数，但时间复杂度不会变，仍然是O(V)。\n\n最后，至少对这哥问题而言，生成初始的图也需要时间，其时间复杂度的分析就作为练习了。\n\n## 7.11 骑士周游问题 ##\n\n起始周游是可以用来演示第二种常见图算法的经典问题。骑士周游问题是在国际象棋棋盘上仅使用1个棋子，即起始，该问题的目标是找到1个出棋序列使得骑士可以访问各个方格恰好1次。这样的序列被称为周游。起始周游问题多年来吸引了很多棋手、数学家和计算机科学家等。在8*8的棋盘上，可行的序列数的上界为$1.305\\times 10^{35}$。然而，还有很多时候会走到死棋的情况。当然，还有很多时候会失败。显然这是一个需要些智慧和计算力的问题。\n\n学者已经提出了很多该问题的接发，图搜索是最最容易理解和编程的。同样地，分两步来求解：\n- 将骑士在棋盘上符合规则的移动以图表示。\n- 使用图算法来找到长度为$rows\\times columns-1$的路径，其中每个顶点都恰好只访问1次。\n\n## 7.12 生成骑士周游图 ##\n\n为了将骑士周游问题表示为图，使用以下两种思想：棋盘上的每个方格都被表示为图中的一个节点；骑士的每个合法的移动都被标记为图中的边。图1是骑士的1中合规走法，并给出了其对应的在图中的边。\n\n![../_images/knightmoves.png](http://interactivepython.org/courselib/static/pythonds/_images/knightmoves.png)\n\n为$n\\times n$的棋盘生成图，其Python代码如代码1所示。knightGraph函数对整个棋盘作1次遍历，在棋盘上的每1个方格，kinightGraph函数都调用1个辅助函数genLegalMoves，为棋盘上的该节点处的合法走法生成1个列表。图中的所有合法走法最后都被转换成了边。另一个辅助函数，posToNodeId将棋盘上的1个位置按照其行列转换为线性节点编号，如图1所示。\n\n**代码1**\n```Python\nfrom pythonds.graphs import Graph\n\ndef knightGraph(bdSize):\n    ktGraph = Graph()\n    for row in range(bdSize):\n       for col in range(bdSize):\n           nodeId = posToNodeId(row,col,bdSize)\n           newPositions = genLegalMoves(row,col,bdSize)\n           for e in newPositions:\n               nid = posToNodeId(e[0],e[1],bdSize)\n               ktGraph.addEdge(nodeId,nid)\n    return ktGraph\n\ndef posToNodeId(row, column, board_size):\n    return (row * board_size) + column\n```\n代码2中的genLeagalMove函数将以骑士的位置作为参数，并创建了可能的8个走法。legalCoord辅助函数用来保证创建的某个走法是在棋盘内的。该图中有336条边，并且可以发现，棋盘边缘的顶点的合规走法比棋盘内部的顶点少，此外该棋盘是稀疏的，填充率只有8.2%。\n\n![../_images/bigknight.png](http://interactivepython.org/courselib/static/pythonds/_images/bigknight.png)\n\n## 7.13 实现骑士周游 ##\n\n解决骑士周游问题将使用**深度优先搜索（depth first search）**。上一节讨论的宽度优先搜索算法是一次为搜索树建立一层，而深度优先算法则尽量向枝的深处搜索。本节介绍两种实现DFS的算法。第1个算法是专门用来解决骑士周游问题的，它显式地要求各节点最多被访问1次。第2种实现更加通用，但会允许在生成树时对其某个节点访问不止一次。在后续章节中，基于第2种算法开发了其它的算法。\n\n图的深度优先搜索很适合用来找到1条由63条边构成的路径。当深度搜索算法发现1条死路（图中的某个节点，使得接下来没有合法的移动了），它便会返回，并且朝着有合法移动的顶点的最深处移动。\n\n骑士周游函数接受4个参数：n，搜索树当前的深度；path，到该节点为止已访问过的顶点；u，待搜索节点；limit，路径中的节点数。knightTour函数是递归的。当knightTour函数被调用时，它首先检查约束条件。如果某条路径含有64个顶点，将True从knightTour返回，表示找到了一条可行的周游路径。若该路径长度不够，则继续向更深处搜索————选择1个新顶点以搜索并递归调用knightTour。\n\n\nDFS也使用颜色来记录图中哪些节点已经被访问，没有被访问过的顶点被涂为白色，访问过的是灰色。若某一顶点所有的邻接顶点都被搜索过了并且还没有达到64个顶点的长度的话，则说明当前是一条死路，此时必须要进行回溯，这里是通过从knightTour返回False来实现回溯的。在宽度优先搜索中使用队列来记录需要访问的节点。因为深度优先搜索是递归的，因此其实是隐式地使用了栈来进行回溯。当knightTour函数返回False的时候，",[[1528639163993,["Re@Re.local",[[1,12599,"ww"]],[12599,12599],[12601,12601]]],[1528639164518,["Re@Re.local",[[-1,12599,"ww"]],[12601,12601],[12599,12599]]]]],["47513669-ccac-491f-8866-9bd3e00b2b98",1528687392655,"## 7.1 目标 ##\n\n- 学习图的概念和使用方式。\n- 以多种方式实现抽象数据类型Gragh。\n- 了解图在解决多种问题时的应用。\n\n本章研究图像。图像是比上一章学习的树更加通用的结构，实际上可以认为树是一种特殊的图像。图像也可以用来表示真实世界中的很多东西，比如公路系统，航线系统，网路系统甚至是完成计算机科学学位所必须的课程序列。本章读者会看到，一旦给某个问题以合适的表示，利用一些图像算法便可以轻松将看起来很困难的问题解决。\n\n对人类来说，看懂道路地图并理解不同地点之间的关系并不困难，但是计算机并没有这种能力。然而，可以将道路系统看作是1个图像，如此一来便可以让计算机做一些有趣的事情了。比如在互联网地图中，计算机可以找到从某个地方到另一个地方的最近、最快或者最简单的路线。\n\n作为计算机科学的学生，读者可能对获得学位所需要的课程比较感兴趣。图像可以很好地表达课程之间的依赖关系。图1便是1个例子。\n\n![../_images/CS-Prereqs.png](http://interactivepython.org/courselib/static/pythonds/_images/CS-Prereqs.png)\n\n## 7.2 术语和定义 ##\n\n\n**顶点（vertex）**\n顶点（也称为节点**node**）是图像的基础构件。它可以有名称，即键。顶点也可以有其它额外信息，即负载。\n**边（Edge）**\n边有时也被称为弧（arc），是图像的另一种基础构件。边将2个顶点连接起来以表示这2者之间存在某种关系。边可以是单向的也可以是双向的。当某个图像中的所有边都是单向的时候，便称该图像是**有向图（directed gragh/digrah）**。上示的课程依赖图显示是有向图，因为必须先完成某些课程后才能继续其它某些课程。\n**权重（weight）**\n为了表示从某个顶点到另一个顶点所需的代价，可以顶点进行**赋权（weighted）**。比如说公路图中某个城市连接到另一个城市，边上的权重可以表示为两个城市之间的距离。\n\n有了以上基本概念，便可以来对图像作一定义了。图像可以表示为G，其中G=(V,E)。对于图像G，V是顶点的集合，E是边的集合。每个边都是一个元组（v,w)，其中$w,v∈V$。可以向边元组中加入第3个元素来表示权重。子图s是顶点的集合v和边的集合e，使得$e⊂E且v⊂V$。\n\n图2给出了1个简单的赋权有向图作为例子。该图像可以用集合严格地表示：\n$$ V={V0,V1,V2,V3,V4,V5} $$\n$$ E= \\left \\{ (v0,v1,5),(v1,v2,4),(v2,v3,9),(v3,v4,7),(v4,v0,1),(v0,v5,2),(v5,v4,8),(v3,v5,3),(v5,v2,1) \\right \\} $$\n![../_images/digraph.png](http://interactivepython.org/courselib/static/pythonds/_images/digraph.png)\n\n图2中的例子演示了图像的另外2个关键术语。\n**路径（path）**\n路径是由边连接起来的顶点的序列。一般地，将路径定义为 $w_1,w_2,...,w_n$ 使得 $(w_i,w_{i+1})\\in E$ 对所有 $1≤i≤n−1$ 成立。无权路径长度是路径中边的个数，即n-1。权重路径长度是路径中边的权重之和。比如图2中，从V3到V1的路径是顶点序列 $(V3,V4,V0,V1)$ 而边为 ${(v3,v4,7),(v4,v0,1),(v0,v1,5)}{(v3,v4,7),(v4,v0,1),(v0,v1,5)}$。\n**环（cycle）**\n有向图中的环是首尾顶点相同的路径。比如说，图2中路径 $(V5,V2,V3,V5)(V5,V2,V3,V5)$ 就是1个环。没有环的图被称为**无环图（acyclic graph）**。没有环的有向图被称为**有向无环图（directed acyclic graph，DAG）**。接下来读者会看到，一些很重要的问题可以通过表示为DAG获得解决。\n\n## 7.3 抽象数据类型：Graph ##\n\n抽象数据类型Gragh被定义为：\n- Graph()生成一个新的空图。\n- addVertex(vert) 将Vertex的1个实例添加至图。\n- addEdge(fromVert,toVert) 向图添加1个连接2个顶点的有向边。\n- addEdge(fromVert,toVert,weight)向图添加1个连接2个顶点的赋权有向边。\n- getVertex(vertKey) 找到途中以vertKey命名的顶点。\n- getVertices() 返回途中所有顶点的列表。\n- in 对于vertex in graph这种形式的语句，若给定的vertex在途中，返回True，反之则False。\n\n有了图像的正式定义，在Python中可以用多种方式实现，下面来看看使用不同方式实现该ADT的优劣与差别。有两个著名的图的实现，即**邻接矩阵（adjacency matrix）**和**邻接表（adjacency list）**，本书将对这两种都进行解释，并对其中1中以Python类的方式实现。\n\n## 7.4 邻接矩阵（adjacency matrix）##\n\n\n实现图的最简单方式之一是使用二维矩阵。在二维矩阵中，每行每列的都代表了图中的1个顶点。如果顶点v到顶点w有边，行v和列w的交叉点单元格会存储值。若两个顶点由边连接，便称这两个顶点是**邻接**的。图3给出了图2的邻接矩阵。单元格中存储的值是v到w的权重。\n\n![../_images/adjMat.png](http://interactivepython.org/courselib/static/pythonds/_images/adjMat.png)\n\n邻接矩阵的优势是简便，并且对于小图来说，很容易看出哪些节点是相连的。然而，注意到矩阵中大多数单元格都是空。因为大多数单元格都是空的，因此称该矩阵是**稀疏（sparse）**的。矩阵并不能高效地存储这种稀疏数据。实际上，在Python中像图3这种矩阵结构都很麻烦。\n\n邻接矩阵对于边树较高的图来说是不错的实现。“较高”是什么意思？到底需要多少个边才能填满该矩阵？因此为每行、每列都对应个顶点，填满矩阵需要的顶点数是$|V|_2$。当每个顶点都与另外每一个顶点相连时，则该矩阵被填满了。实践中很少会遇到以这种方式连接的问题。本章研究的所有问题都是稀疏图。\n\n## 7.5 邻接表（adjacency list） ##\n\n邻接表可以用更少的空间实现稀疏图。在邻接表的实现中，维护一个包含图对象所有顶点的主列表，然后图对象中各个顶点对象都维护一个该对象连接的其它顶点对象的列表。在Vertex类的实现中，将使用字典而不是列表，其中字典的键为顶点，值为权重。图4给出了图2的邻接表实现示意图。\n![../_images/adjlist.png](http://interactivepython.org/courselib/static/pythonds/_images/adjlist.png)\n\n邻接表的有时在于它可以紧凑地表示稀疏图，利用稀疏图也可以轻松地找到某个顶点所有的连接情况。\n\n## 7.6 实现 ##\n\n使用字典可以很容易地在Python中实现邻接表。在本书的实现中会创建两个类（代码1、代码2），Graph保存顶点的祝列表，而Vertex即图中每个顶点。\n\n每个Vertex都使用字典来保存其连接的对象以及每条边的权重。该字典被命名为connectedTo。以下代码便是Vertex类的实现。构造器只是初始化了可以是字符串的id以及connectedTo字典。addNeighbor方法用来添加从该顶点到另一顶点的连接。getConnections方法返回当前节点connectedTo实例变量保存的邻接表中的所有顶点。getWeight方法返回从该节点到另一个作为参数传入的节点的边的权重。\n\n**代码1**\n```Pythion\nclass Vertex:\n    def __init__(self,key):\n        self.id = key\n        self.connectedTo = {}\n\n    def addNeighbor(self,nbr,weight=0):\n        self.connectedTo[nbr] = weight\n\n    def __str__(self):\n        return str(self.id) + ' connectedTo: ' + str([x.id for x in self.connectedTo])\n\n    def getConnections(self):\n        return self.connectedTo.keys()\n\n    def getId(self):\n        return self.id\n\n    def getWeight(self,nbr):\n        return self.connectedTo[nbr]\n```\nGraph类，如下面的代码所示，保存了一个字典，将顶点名映射到顶点对象。在图4中，该字典对象表示为灰色阴影框。Graph类也听过了方法用于添加顶点和连接顶点。此外，实现了\\_\\_iter\\_\\_方法来使得可以在图中对所有顶点对象进行迭代。这两种方法可以用来实现按名称或者是对象本身来对图中顶点的迭代。\n\n**代码2**\n```Python\nclass Graph:\n    def __init__(self):\n        self.vertList = {}\n        self.numVertices = 0\n\n    def addVertex(self,key):\n        self.numVertices = self.numVertices + 1\n        newVertex = Vertex(key)\n        self.vertList[key] = newVertex\n        return newVertex\n\n    def getVertex(self,n):\n        if n in self.vertList:\n            return self.vertList[n]\n        else:\n            return None\n\n    def __contains__(self,n):\n        return n in self.vertList\n\n    def addEdge(self,f,t,cost=0):\n        if f not in self.vertList:\n            nv = self.addVertex(f)\n        if t not in self.vertList:\n            nv = self.addVertex(t)\n        self.vertList[f].addNeighbor(self.vertList[t], cost)\n\n    def getVertices(self):\n        return self.vertList.keys()\n\n    def __iter__(self):\n        return iter(self.vertList.values())\n```\n使用以上定义的Graph和Vertex类，以下代码边可以表示图2。首先生成6个节点编号0-5，查看顶点字典，注意到对0-5的键都创建了1个Vertex实例。然后，将连接了顶点的边集合到一起。最后，使用嵌套循环确定图中的每个边都正确存储了。读者应该将输出结果与图2作一对比。\n```Python\n>>> g = Graph()\n>>> for i in range(6):\n...    g.addVertex(i)\n>>> g.vertList\n{0: <adjGraph.Vertex instance at 0x41e18>,\n 1: <adjGraph.Vertex instance at 0x7f2b0>,\n 2: <adjGraph.Vertex instance at 0x7f288>,\n 3: <adjGraph.Vertex instance at 0x7f350>,\n 4: <adjGraph.Vertex instance at 0x7f328>,\n 5: <adjGraph.Vertex instance at 0x7f300>}\n>>> g.addEdge(0,1,5)\n>>> g.addEdge(0,5,2)\n>>> g.addEdge(1,2,4)\n>>> g.addEdge(2,3,9)\n>>> g.addEdge(3,4,7)\n>>> g.addEdge(3,5,3)\n>>> g.addEdge(4,0,1)\n>>> g.addEdge(5,4,8)\n>>> g.addEdge(5,2,1)\n>>> for v in g:\n...    for w in v.getConnections():\n...        print(\"( %s , %s )\" % (v.getId(), w.getId()))\n...\n( 0 , 5 )\n( 0 , 1 )\n( 1 , 2 )\n( 2 , 3 )\n( 3 , 4 )\n( 3 , 5 )\n( 4 , 0 )\n( 5 , 4 )\n( 5 , 2 )\n```\n## 词梯（word ladder）问题 ##\n\n以词梯问题开始图算法的研究。将单词\"FOOL\"转化为\"SAGE\"。按词梯问题的规则，1次只能修改1个字母，在每1步都必须将单词转换为另一个单词，不允许转换为非单词。词梯问题是由*爱丽丝梦游仙境*的作者lewis Carroll于1878年提出的。以下单词序列是刚才那个问题的一个可行解。\n```Python\nFOOL\nPOOL\nPOLL\nPOLE\nPALE\nSALE\nSAGE\n```\n词梯问题有许多变体。比如读者可能遇到要求在给定步数来完成转换的版本，或是必须用给点单词的版本。本节仅关注计算出完成转换所需要的最小修改次数。\n\n当然，因为本章内容是图，因此可以用图算法来将其解决。以下是纲要：\n- 将单词之间的关系重新表示为图。\n- 使用**广度优先搜索算法（breadth first search**来找到从起始单词到目标单词的最短路径。\n\n## 7.8 建立词梯图 ##\n\n首先要解决的问题是如何将单词列表转换为图。对于边来说，需要保证它们连接的是差且仅差了1个字母的单词。如果生成这种图，那么从一个单词出发的任意路径都是该词梯问题的解。图1给出了1个小的由单词构成的图，它可以用来解决FOOL到SAGE的词梯问题。注意，该图是无向图且无权重。\n\n![../_images/wordgraph.png](http://interactivepython.org/courselib/static/pythonds/_images/wordgraph.png)\n\n\n可以使用很多方法来生成这个图。首先假设有1组长度相同的单词，从起点出发，为列表中的每一个单词创建1个顶点。为了确定如何将这些单词连接起来，可以将列表中的每个单词与其它的单词一一进行比较，在比较时确定有多少个字母不同。如果两个字母仅相差1个字母，便可以在图中为它们两创建1条边。单词数较少时，这个方法还是可行的。但是假设有5110个单词的话（粗略估计一一进行对比需要$O(n^2)$的时间复杂度），需要进行2500万次对比。\n\n使用以下方法可以对其进行优化。假设有大量桶，每个桶外面都贴着1个4字母单词，但是字母中有1个被下划线替代。比如说，对于图2这种情况，可能会有个桶被贴上\"POP_\"。当在列表中对每个单词进行处理时，将该单词与每个桶进行对比，将\"\\_\"用作通配符，因此\"POPE\"和\"POPS\"都与\"POP\\_\"匹配。每当找到1个匹配的桶时，都将该单词放进去。当所有的单词都放在了正确的桶里时，可以确定同一桶里的单词是相连的。\n\n![../_images/wordbuckets.png](http://interactivepython.org/courselib/static/pythonds/_images/wordbuckets.png)\n\n在Python中，可以通过字典实现上述方案。桶的标签作为字典的键，键对应的值为单词列表。首先为各个单词在图中创建1个顶点。然后为处于字典同一键下的单词之间创建边，如代码1所示。\n```Python\nfrom pythonds.graphs import Graph\n\ndef buildGraph(wordFile):\n    d = {}\n    g = Graph()\n    wfile = open(wordFile,'r')\n    # create buckets of words that differ by one letter\n    for line in wfile:\n        word = line[:-1]\n        for i in range(len(word)):\n            bucket = word[:i] + '_' + word[i+1:]\n            if bucket in d:\n                d[bucket].append(word)\n            else:\n                d[bucket] = [word]\n    # add vertices and edges for words in the same bucket\n    for bucket in d.keys():\n        for word1 in d[bucket]:\n            for word2 in d[bucket]:\n                if word1 != word2:\n                    g.addEdge(word1,word2)\n    return g\n```\n这是第一个跟现实生活相关的图问题，读者可能会好奇该图的稀疏程度。对于该问题，准备的单词列表有5510个。若果使用邻接矩阵，矩阵将会有5110*5110个单元格，而使用buildGraph函数的图仅有53286条边，因此仅有0.20%的单元格被填充了，这实际上是一个很稀疏的矩阵了。\n\n## 7.9 实现宽度优先搜索（breadth first search） ##\n\n创建好了图，接下来便可以研究解决字梯问题的最优算法了。这里使用的算法被称为**宽度优先搜索（breadth first search,BFS）**。BFS是用于图搜索的最简单的算法之一。它也是之后将研究的其它几种重要的图算法的原型。\n\n给定图G以及起始顶点s，宽度优先算法将对图内的边进行搜索以找到G中所有与s有路径相连的顶点。宽度优先搜索的优势在于，在找到与s距离为k+1的所有顶点之前，它会先找出所有距离为k的顶点。BFS的运行过程可以想象为生成树的过程，每次都生成树的一层。BFS在对子孙顶点进行搜索前，先将初始顶点的子顶点加入进来。\n\n为了跟踪运行过程，BFS将顶点染成白色，灰色或黑色。所有的顶点都被初始为白色。白色顶点是未被探索的顶点。当某个顶点被初次探索时，将其染成灰色，当BFS完成对某个顶点的探索时，将其染成黑色。这意味着，对于黑色的顶点，它是没有白色节点与之邻接的。灰色节点，有可能会存在白色节点与之邻接，需要进一步探索。\n\n此外，BFS算法使用了Vertex类的改进版。这种新的顶点类新增了3种实例变量，即distance,predecessor以及颜色。每个实例变量都有正确的getter和setter方法。这里就不作展示了，因为只是加了3个实例变量而已。\n\nBFS从起始顶点s开始，将start染成灰色来表示当前正在对其进行搜索。对于起始顶点，另外两个值，distance和predecessor分别被初始化为0和None。最后，start被放入1个Queue中。下一步便是系统地对队列前部的顶点进行搜索。所谓搜索，即是对队列前部的某1个节点的邻接列表作迭代。每当对邻接列表中的节点作处理时，先对其颜色进行判断。如果是白色的，则该节点尚未搜索过，于是执行以下4步操作：\n1. 将新的，未搜索的顶点nbr染成灰色。\n2. 将nbr的predecessor设置为当前节点currentVert。\n3. 到nbr的距离设为currentVert + 1。\n4. 将nbr放入队尾。将nbr放在队尾使得该节点只有在currentVert的邻接列表中的所有其它顶点都被搜索过了才会继续被搜索。\n\n**代码2**\n```Python\nfrom pythonds.graphs import Graph, Vertex\nfrom pythonds.basic import Queue\n\ndef bfs(g,start):\n  start.setDistance(0)\n  start.setPred(None)\n  vertQueue = Queue()\n  vertQueue.enqueue(start)\n  while (vertQueue.size() > 0):\n    currentVert = vertQueue.dequeue()\n    for nbr in currentVert.getConnections():\n      if (nbr.getColor() == 'white'):\n        nbr.setColor('gray')\n        nbr.setDistance(currentVert.getDistance() + 1)\n        nbr.setPred(currentVert)\n        vertQueue.enqueue(nbr)\n    currentVert.setColor('black')\n```\n现在来仔细研究下bfs函数是如何对图1构件宽度优先树的。从FOOL出发，将所有与FOOL邻接的节点连接到该树上。临近节点包括POOL，FOIL，FOUL和COOL。每个节点都放入了待搜索待新节点。图3给出了该操作中的树及完成后的队列。\n![../_images/bfs1.png](http://interactivepython.org/courselib/static/pythonds/_images/bfs1.png)\n\n\n接下来，bfs从队首去掉了下一个节点(POOL)，并对其所有邻接节点重复该操作。然而，当bfs检查到节点COOL时，它发现COOL的颜色已经是灰色了。这意味着有更短的路径到达COOL，并且COOL已经留在队列中以待进一步搜索。在对POOL进行监测时唯一新加入队列的是POLL。新状态如图4所示。\n\n![../_images/bfs2.png](http://interactivepython.org/courselib/static/pythonds/_images/bfs2.png)\n\n队列中的下一个顶点是FOIL。FOIL可以加入树的节点是FAIL，当bfs方法继续处理队列时，接下来两个节点都没有向树或者队列加入新的节点。图5展示的是对树的第二层所有顶点都探索完成了后的树和队列。\n\n![../_images/bfs3.png](http://interactivepython.org/courselib/static/pythonds/_images/bfs3.png)\n![../_images/bfsDone.png](http://interactivepython.org/courselib/static/pythonds/_images/bfsDone.png)\n\n读者应该自己动手过一遍该算法，以对该算法获得更好的理解。图6是图3中已完成所有顶点的搜索后的最终宽度优先搜索树。宽度优先搜索的惊人之处在于，它不仅解决了初始的FOOL-SAGE问题，也顺便解决了许多其它问题。从宽度优先搜索树中的任一节点出发，沿着父节点的箭头返回到根节点，便可以得到该单词变为FOOL的最短词梯。代码3沿着父节点链打印出了词梯：\n**代码3**\n```Python\ndef traverse(y):\n    x = y\n    while (x.getPred()):\n        print(x.getId())\n        x = x.getPred()\n    print(x.getId())\n\ntraverse(g.getVertex('sage'))\n```\n## 7.10 宽度优先搜索分析 ##\n\n在继续研究其它图算法前，先来分析一下宽度优先搜索算法的运行性能。首先应当观察到的是，图|V|中的每个顶点在循环中最多被处理一次，因为在进行监测和加入队列前，该顶点必须是白色的。因此整个循环为O(V)。嵌套在while中的for循环对图中的每条边最多执行1次，|E|，因此每个顶点最多出队1次并且只在节点u出队时才检查节点u到节点v的边，该for循环为O(E)。因此两个循环的最终结果是O(V+E)。\n\n当然，执行BFS仅完成了该任务的一部分。从起始节点出发到达目标顶点是该任务的另一部分。最坏情况是，该图是单链的。在这种情况下，遍历所有节点需要O(V)。正常情况下应该是|V|的某个分数，但时间复杂度不会变，仍然是O(V)。\n\n最后，至少对这哥问题而言，生成初始的图也需要时间，其时间复杂度的分析就作为练习了。\n\n## 7.11 骑士周游问题 ##\n\n起始周游是可以用来演示第二种常见图算法的经典问题。骑士周游问题是在国际象棋棋盘上仅使用1个棋子，即起始，该问题的目标是找到1个出棋序列使得骑士可以访问各个方格恰好1次。这样的序列被称为周游。起始周游问题多年来吸引了很多棋手、数学家和计算机科学家等。在8*8的棋盘上，可行的序列数的上界为$1.305\\times 10^{35}$。然而，还有很多时候会走到死棋的情况。当然，还有很多时候会失败。显然这是一个需要些智慧和计算力的问题。\n\n学者已经提出了很多该问题的接发，图搜索是最最容易理解和编程的。同样地，分两步来求解：\n- 将骑士在棋盘上符合规则的移动以图表示。\n- 使用图算法来找到长度为$rows\\times columns-1$的路径，其中每个顶点都恰好只访问1次。\n\n## 7.12 生成骑士周游图 ##\n\n为了将骑士周游问题表示为图，使用以下两种思想：棋盘上的每个方格都被表示为图中的一个节点；骑士的每个合法的移动都被标记为图中的边。图1是骑士的1中合规走法，并给出了其对应的在图中的边。\n\n![../_images/knightmoves.png](http://interactivepython.org/courselib/static/pythonds/_images/knightmoves.png)\n\n为$n\\times n$的棋盘生成图，其Python代码如代码1所示。knightGraph函数对整个棋盘作1次遍历，在棋盘上的每1个方格，kinightGraph函数都调用1个辅助函数genLegalMoves，为棋盘上的该节点处的合法走法生成1个列表。图中的所有合法走法最后都被转换成了边。另一个辅助函数，posToNodeId将棋盘上的1个位置按照其行列转换为线性节点编号，如图1所示。\n\n**代码1**\n```Python\nfrom pythonds.graphs import Graph\n\ndef knightGraph(bdSize):\n    ktGraph = Graph()\n    for row in range(bdSize):\n       for col in range(bdSize):\n           nodeId = posToNodeId(row,col,bdSize)\n           newPositions = genLegalMoves(row,col,bdSize)\n           for e in newPositions:\n               nid = posToNodeId(e[0],e[1],bdSize)\n               ktGraph.addEdge(nodeId,nid)\n    return ktGraph\n\ndef posToNodeId(row, column, board_size):\n    return (row * board_size) + column\n```\n代码2中的genLeagalMove函数将以骑士的位置作为参数，并创建了可能的8个走法。legalCoord辅助函数用来保证创建的某个走法是在棋盘内的。该图中有336条边，并且可以发现，棋盘边缘的顶点的合规走法比棋盘内部的顶点少，此外该棋盘是稀疏的，填充率只有8.2%。\n\n![../_images/bigknight.png](http://interactivepython.org/courselib/static/pythonds/_images/bigknight.png)\n\n## 7.13 实现骑士周游 ##\n\n解决骑士周游问题将使用**深度优先搜索（depth first search）**。上一节讨论的宽度优先搜索算法是一次为搜索树建立一层，而深度优先算法则尽量向枝的深处搜索。本节介绍两种实现DFS的算法。第1个算法是专门用来解决骑士周游问题的，它显式地要求各节点最多被访问1次。第2种实现更加通用，但会允许在生成树时对其某个节点访问不止一次。在后续章节中，基于第2种算法开发了其它的算法。\n\n图的深度优先搜索很适合用来找到1条由63条边构成的路径。当深度搜索算法发现1条死路（图中的某个节点，使得接下来没有合法的移动了），它便会返回，并且朝着有合法移动的顶点的最深处移动。\n\n骑士周游函数接受4个参数：n，搜索树当前的深度；path，到该节点为止已访问过的顶点；u，待搜索节点；limit，路径中的节点数。knightTour函数是递归的。当knightTour函数被调用时，它首先检查约束条件。如果某条路径含有64个顶点，将True从knightTour返回，表示找到了一条可行的周游路径。若该路径长度不够，则继续向更深处搜索————选择1个新顶点以搜索并递归调用knightTour。\n\n\nDFS也使用颜色来记录图中哪些节点已经被访问，没有被访问过的顶点被涂为白色，访问过的是灰色。若某一顶点所有的邻接顶点都被搜索过了并且还没有达到64个顶点的长度的话，则说明当前是一条死路，此时必须要进行回溯，这里是通过从knightTour返回False来实现回溯的。在宽度优先搜索中使用队列来记录需要访问的节点。因为深度优先搜索是递归的，因此其实是隐式地使用了栈来进行回溯。当knightTour函数返回False的时候，",[[1528687390597,["Re@Re.local",[[1,13107,"shu"]],[13107,13107],[13110,13110]]],[1528687391169,["Re@Re.local",[[-1,13107,"shu"]],[13110,13110],[13107,13107]]],[1528687393055,["Re@Re.local",[[1,13107,"说明"]],[13107,13107],[13109,13109]]],[1528687393780,["Re@Re.local",[[-1,13107,"说明"]],[13109,13109],[13107,13107]]],[1528687409065,["Re@Re.local",[[1,13107,"则进行回溯。在DFS中，使用了"]],[13107,13107],[13122,13122]]],[1528687412603,["Re@Re.local",[[-1,13114,"DFS中，使用了"]],[13122,13122],[13114,13114]]],[1528687423112,["Re@Re.local",[[1,13114,"BFS中，使用的是队列来记录将要"]],[13114,13114],[13130,13130]]],[1528687424032,["Re@Re.local",[[-1,13128,"将要"]],[13130,13130],[13128,13128]]],[1528687426958,["Re@Re.local",[[1,13128,"需要访问的节点。"]],[13128,13128],[13136,13136]]],[1528687446688,["Re@Re.local",[[-1,13107,"则进行回溯。在BFS中，使用的是队列来记录需要访问的节点。"]],[13107,13136],[13107,13107]]],[1528687455420,["Re@Re.local",[[1,13107,"仍"]],[13107,13107],[13108,13108]]],[1528687455527,["Re@Re.local",[[-1,13107,"仍"]],[13108,13108],[13107,13107]]],[1528687468042,["Re@Re.local",[[1,13107,"while循环"]],[13107,13107],[13114,13114]]],[1528687469324,["Re@Re.local",[[-1,13107,"while循环"]],[13114,13114],[13107,13107]]],[1528687471768,["Re@Re.local",[[1,13107,"程序仍然"]],[13107,13107],[13111,13111]]],[1528687472665,["Re@Re.local",[[-1,13109,"仍然"]],[13111,13111],[13109,13109]]],[1528687473835,["Re@Re.local",[[1,13109,"仍然"]],[13109,13109],[13111,13111]]],[1528687473989,["Re@Re.local",[[-1,13110,"然"]],[13111,13111],[13110,13110]]],[1528687483981,["Re@Re.local",[[1,13110,"处于while循环中，并在nbrl"]],[13110,13110],[13127,13127]]],[1528687484339,["Re@Re.local",[[-1,13126,"l"]],[13127,13127],[13126,13126]]],[1528687491402,["Re@Re.local",[[1,13126,"List中寻找下一个节点"]],[13126,13126],[13138,13138]]],[1528687492131,["Re@Re.local",[[-1,13136,"节点"]],[13138,13138],[13136,13136]]],[1528687493263,["Re@Re.local",[[1,13136,"顶点。"]],[13136,13136],[13139,13139]]],[1528687493579,["Re@Re.local",[[1,13139,"\n\n"]],[13139,13139],[13140,13140]]],[1528687493771,["Re@Re.local",[[1,13141,"\n"]],[13140,13140],[13141,13141]]],[1528687497168,["Re@Re.local",[[-1,13141,"\n"],[1,13142,"**代码3**"]],[13141,13141],[13148,13148]]],[1528687502545,["Re@Re.local",[[1,13148,"\n\nfrom pythonds.graphs import Graph, Vertex\ndef knightTour(n,path,u,limit):\n        u.setColor('gray')\n        path.append(u)\n        if n < limit:\n            nbrList = list(u.getConnections())\n            i = 0\n            done = False\n            while i < len(nbrList) and not done:\n                if nbrList[i].getColor() == 'white':\n                    done = knightTour(n+1, path, nbrList[i], limit)\n                i = i + 1\n            if not done:  # prepare to backtrack\n                path.pop()\n                u.setColor('white')\n        else:\n            done = True\n        return done"]],[13148,13148],[13750,13750]]],[1528687502772,["Re@Re.local",[[1,13751,"\n"]],[13750,13750],[13751,13751]]],[1528687503729,["Re@Re.local",[[1,13752,"\n"]],[13751,13751],[13752,13752]]],[1528687512224,["Re@Re.local",[[-1,13752,"\n"],[1,13753,"来吗"]],[13752,13752],[13754,13754]]],[1528687573006,[null,[[-1,13149,"\n"],[1,13751,"\n"]],[13149,13149],[13752,13752]]],[1528687573006,[null,[[1,13149,"\n"],[-1,13750,"\n"]],[13752,13752],[13149,13149]]],[1528687512931,["Re@Re.local",[[-1,13752,"来吗"]],[13754,13754],[13752,13752]]],[1528687513105,["Re@Re.local",[[-1,13751,"\n"],[1,13752,"x"]],[13752,13752],[13751,13752]]],[1528687513261,["Re@Re.local",[[1,13752,"i"]],[13751,13752],[13751,13753]]],[1528687513436,["Re@Re.local",[[1,13753,"a"]],[13751,13753],[13751,13754]]],[1528687513560,["Re@Re.local",[[1,13754," m"]],[13751,13754],[13751,13756]]],[1528687572266,["Re@Re.local",[[-1,13751,"xia m"],[1,13756,"下面来简单地试运行。读者可以参考下面的图例来观察该"]],[13751,13756],[13776,13776]]],[1528687632709,[null,[[-1,13149,"\n"],[1,13751,"\n"]],[13149,13149],[13752,13752]]],[1528687632710,[null,[[1,13149,"\n"],[-1,13750,"\n"]],[13752,13752],[13149,13149]]],[1528687630986,["Re@Re.local",[[1,13779,"步骤。作为例子，假设getConnections方法返回的节点是按字母排序的。首先调用K"]],[13779,13779],[13823,13823]]],[1528687632068,["Re@Re.local",[[-1,13822,"K"]],[13823,13823],[13822,13822]]],[1528687632263,["Re@Re.local",[[1,13822,"k"]],[13822,13822],[13823,13823]]],[1528687692740,[null,[[-1,13149,"\n"],[1,13751,"\n"],[1,13776,"搜索的"],[-1,13819,"K"]],[13149,13149],[13819,13819]]],[1528687692741,[null,[[1,13149,"\n"],[-1,13750,"\n"],[-1,13776,"搜索的"],[1,13822,"K"]],[13819,13819],[13149,13149]]],[1528687639839,["Re@Re.local",[[1,13825,"ghtTour(0,path,A,6)。"]],[13825,13825],[13845,13845]]],[1528687640266,["Re@Re.local",[[1,13845,"\n\n"]],[13845,13845],[13846,13846]]],[1528687640622,["Re@Re.local",[[1,13847,"\n"]],[13846,13846],[13847,13847]]],[1528687643589,["Re@Re.local",[[-1,13847,"\n"],[1,13848,"knightTour"]],[13847,13847],[13857,13857]]],[1528687650823,["Re@Re.local",[[-1,13847,"knightTour"]],[13857,13857],[13847,13847]]],[1528687651110,["Re@Re.local",[[-1,13846,"\n"],[1,13847,"r"]],[13847,13847],[13846,13847]]],[1528687651488,["Re@Re.local",[[-1,13846,"r"]],[13846,13847],[0,0]]],[1528687651797,["Re@Re.local",[[1,13846,"\n\n"]],[13846,13846],[13847,13847]]],[1528687654376,["Re@Re.local",[[-1,13847,"\n"],[1,13848,"如图3松狮，"]],[13847,13847],[13853,13853]]],[1528687655270,["Re@Re.local",[[-1,13850,"松狮，"]],[13853,13853],[13850,13850]]],[1528687691792,["Re@Re.local",[[1,13850,"所示，knightTour从节点A开始。A的邻接节点为B和D，由于B在D之前（字母"]],[13850,13850],[13891,13891]]],[1528687752766,[null,[[-1,13149,"\n"],[1,13751,"\n"],[1,13776,"搜索的"],[-1,13819,"K"],[1,13821,"ni"],[-1,13842,"\n\nkn"]],[13149,13149],[13842,13842]]],[1528687752767,[null,[[1,13149,"\n"],[-1,13750,"\n"],[-1,13776,"搜索的"],[1,13822,"K"],[-1,13823,"ni"],[1,13846,"\n\nkn"]],[13842,13842],[13149,13149]]],[1528687698026,["Re@Re.local",[[1,13894,"，DFS徐安娥"]],[13894,13894],[13901,13901]]],[1528687699117,["Re@Re.local",[[-1,13898,"徐安娥"]],[13901,13901],[13898,13898]]],[1528687708812,["Re@Re.local",[[1,13898,"选择B来逐级"]],[13898,13898],[13904,13904]]],[1528687709658,["Re@Re.local",[[-1,13902,"逐级"]],[13904,13904],[13902,13902]]],[1528687720838,["Re@Re.local",[[1,13902,"对下一级进行搜索（图4）/"]],[13902,13902],[13915,13915]]],[1528687721543,["Re@Re.local",[[-1,13914,"/"]],[13915,13915],[13914,13914]]],[1528687722387,["Re@Re.local",[[1,13914,"。"]],[13914,13914],[13915,13915]]],[1528687812690,[null,[[-1,13149,"\n"],[1,13751,"\n"],[1,13776,"搜索的"],[-1,13819,"K"],[1,13821,"ni"],[-1,13843,"\nkn\n"],[1,13891,"排序）"],[-1,13895,"徐安娥"]],[13149,13149],[13895,13895]]],[1528687812690,[null,[[1,13149,"\n"],[-1,13750,"\n"],[-1,13776,"搜索的"],[1,13822,"K"],[-1,13823,"ni"],[1,13847,"\nkn\n"],[-1,13891,"排序）"],[1,13898,"徐安娥"]],[13895,13895],[13149,13149]]],[1528687793765,["Re@Re.local",[[1,13915,"d"]],[13914,13915],[13915,13916]]],[1528687794010,["Re@Re.local",[[1,13916,"u"]],[13915,13916],[13915,13917]]],[1528687794057,["Re@Re.local",[[1,13917,"i"]],[13915,13917],[13915,13918]]],[1528687796030,["Re@Re.local",[[-1,13915,"dui"],[1,13918,"对B d "]],[13915,13918],[13920,13920]]],[1528687799737,["Re@Re.local",[[-1,13915,"对B d "]],[13920,13920],[13915,13915]]],[1528687801629,["Re@Re.local",[[1,13915,"tong"]],[13915,13915],[13919,13919]]],[1528687802476,["Re@Re.local",[[-1,13915,"tong"]],[13919,13919],[13915,13915]]],[1528687804885,["Re@Re.local",[[1,13915,"通过需"]],[13915,13915],[13918,13918]]],[1528687804995,["Re@Re.local",[[-1,13917,"需"]],[13918,13918],[13917,13917]]],[1528687812381,["Re@Re.local",[[1,13917,"递归调用knightTour实现对"]],[13917,13917],[13934,13934]]],[1528687872732,[null,[[-1,13149,"\n"],[1,13751,"\n"],[1,13776,"搜索的"],[-1,13819,"K"],[1,13821,"ni"],[-1,13843,"\nkn\n"],[1,13891,"排序）"],[-1,13895,"徐安娥"]],[13149,13149],[13895,13895]]],[1528687872732,[null,[[1,13149,"\n"],[-1,13750,"\n"],[-1,13776,"搜索的"],[1,13822,"K"],[-1,13823,"ni"],[1,13847,"\nkn\n"],[-1,13891,"排序）"],[1,13898,"徐安娥"]],[13895,13895],[13149,13149]]],[1528687824429,["Re@Re.local",[[1,13934,"B的搜索。由于B是C"]],[13934,13934],[13944,13944]]],[1528687826785,["Re@Re.local",[[-1,13939,"由于B是C"]],[13944,13944],[13939,13939]]],[1528687831518,["Re@Re.local",[[1,13939,"由于C、D s"]],[13939,13939],[13946,13946]]],[1528687832045,["Re@Re.local",[[-1,13944," s"]],[13946,13946],[13944,13944]]],[1528687853482,["Re@Re.local",[[1,13944,"是B的邻接节点，因此knightTour接下来选择C以继续搜索，。"]],[13944,13944],[13977,13977]]],[1528687854138,["Re@Re.local",[[-1,13975,"，。"]],[13977,13977],[13975,13975]]],[1528687858479,["Re@Re.local",[[1,13975,"。然而，如图5所示"]],[13975,13975],[13984,13984]]],[1528687932923,[null,[[-1,13149,"\n"],[1,13751,"\n"],[1,13776,"搜索的"],[-1,13819,"K"],[1,13821,"ni"],[-1,13843,"\nkn\n"],[1,13891,"排序）"],[-1,13895,"徐安娥"]],[13149,13149],[13895,13895]]],[1528687932924,[null,[[1,13149,"\n"],[-1,13750,"\n"],[-1,13776,"搜索的"],[1,13822,"K"],[-1,13823,"ni"],[1,13847,"\nkn\n"],[-1,13891,"排序）"],[1,13898,"徐安娥"]],[13895,13895],[13149,13149]]],[1528687916229,["Re@Re.local",[[1,13984,"，节点C是一个"]],[13984,13984],[13991,13991]]],[1528687916399,["Re@Re.local",[[-1,13990,"个"]],[13991,13991],[13990,13990]]],[1528687926586,["Re@Re.local",[[1,13990,"条死路，因为它没有白色的邻接具"]],[13990,13990],[14005,14005]]],[1528687927542,["Re@Re.local",[[-1,14002,"邻接具"]],[14005,14005],[14002,14002]]],[1528687930254,["Re@Re.local",[[1,14002,"邻接节点，"]],[14002,14002],[14007,14007]]],[1528687931603,["Re@Re.local",[[-1,14004,"节点，"]],[14007,14007],[14004,14004]]],[1528687993943,[null,[[-1,13149,"\n"],[1,13751,"\n"],[1,13776,"搜索的"],[-1,13819,"K"],[1,13821,"ni"],[-1,13843,"\nkn\n"],[1,13891,"排序）"],[-1,13895,"徐安娥"]],[13149,13149],[13895,13895]]],[1528687993944,[null,[[1,13149,"\n"],[-1,13750,"\n"],[-1,13776,"搜索的"],[1,13822,"K"],[-1,13823,"ni"],[1,13847,"\nkn\n"],[-1,13891,"排序）"],[1,13898,"徐安娥"]],[13895,13895],[13149,13149]]],[1528687940011,["Re@Re.local",[[1,14007,"此时，将节点C d"]],[14007,14007],[14016,14016]]],[1528687940513,["Re@Re.local",[[-1,14014," d"]],[14016,14016],[14014,14014]]],[1528687941296,["Re@Re.local",[[1,14014,"de y"]],[14014,14014],[14018,14018]]],[1528687942125,["Re@Re.local",[[-1,14014,"de y"]],[14018,14018],[14014,14014]]],[1528687952448,["Re@Re.local",[[1,14014,"的颜色改为白色。knightTour"]],[14014,14014],[14032,14032]]],[1528687954929,["Re@Re.local",[[-1,14021,"。knightTour"]],[14032,14032],[14021,14021]]],[1528687983026,["Re@Re.local",[[1,14021,"，knightTour返回False。实际上该递归函数的调用"]],[14021,14021],[14051,14051]]],[1528688053728,[null,[[-1,13149,"\n"],[1,13751,"\n"],[1,13776,"搜索的"],[-1,13819,"K"],[1,13821,"ni"],[-1,13842,"\n\nkn"],[1,13891,"排序）"],[-1,13895,"徐安娥"],[1,14004,"节点。"],[-1,14011," dd"]],[13149,13149],[14011,14011]]],[1528688053728,[null,[[1,13149,"\n"],[-1,13750,"\n"],[-1,13776,"搜索的"],[1,13822,"K"],[-1,13823,"ni"],[1,13846,"\n\nkn"],[-1,13891,"排序）"],[1,13898,"徐安娥"],[-1,14004,"节点。"],[1,14014," dd"]],[14011,14011],[13149,13149]]],[1528688005761,["Re@Re.local",[[-1,14048,"的调用"]],[14051,14051],[14048,14048]]],[1528688014370,["Re@Re.local",[[1,14048,"的返回使得"]],[14048,14048],[14053,14053]]],[1528688017002,["Re@Re.local",[[-1,14051,"使得"]],[14053,14053],[14051,14051]]],[1528688024087,["Re@Re.local",[[1,14051,"导致了搜"]],[14051,14051],[14055,14055]]],[1528688024457,["Re@Re.local",[[-1,14053,"了搜"]],[14055,14055],[14053,14053]]],[1528688033937,["Re@Re.local",[[1,14053,"了回溯到节点B以继续索索。"]],[14053,14053],[14066,14066]]],[1528688034504,["Re@Re.local",[[-1,14063,"索索。"]],[14066,14066],[14063,14063]]],[1528688035503,["Re@Re.local",[[1,14063,"搜索。"]],[14063,14063],[14066,14066]]],[1528688041687,["Re@Re.local",[[-1,14065,"。"]],[14066,14066],[14065,14065]]],[1528688049951,["Re@Re.local",[[1,14065,"（如图6所示）。列表"]],[14065,14065],[14075,14075]]],[1528688050652,["Re@Re.local",[[-1,14073,"列表"]],[14075,14075],[14073,14073]]],[1528688051931,["Re@Re.local",[[1,14073,"该接"]],[14073,14073],[14075,14075]]],[1528688052266,["Re@Re.local",[[-1,14073,"该接"]],[14075,14075],[14073,14073]]],[1528688113729,[null,[[-1,13149,"\n"],[1,13751,"\n"],[1,13776,"搜索的"],[-1,13819,"K"],[1,13821,"ni"],[-1,13842,"\n\nkn"],[1,13891,"排序）"],[-1,13895,"徐安娥"],[1,14004,"节点。"],[-1,14011," dd"]],[13149,13149],[14011,14011]]],[1528688113730,[null,[[1,13149,"\n"],[-1,13750,"\n"],[-1,13776,"搜索的"],[1,13822,"K"],[-1,13823,"ni"],[1,13846,"\n\nkn"],[-1,13891,"排序）"],[1,13898,"徐安娥"],[-1,14004,"节点。"],[1,14014," dd"]],[14011,14011],[13149,13149]]],[1528688059016,["Re@Re.local",[[1,14073,"节点B中的下一个需要"]],[14073,14073],[14083,14083]]],[1528688064562,["Re@Re.local",[[-1,14081,"需要"]],[14083,14083],[14081,14081]]],[1528688073584,["Re@Re.local",[[1,14081,"可探索节点是D，因此knightTOur"]],[14081,14081],[14101,14101]]],[1528688074748,["Re@Re.local",[[-1,14098,"Our"]],[14101,14101],[14098,14098]]],[1528688099736,["Re@Re.local",[[1,14098,"our函数继续进行递归调用，直到再次遇到节点C（如图9"]],[14098,14098],[14125,14125]]],[1528688100060,["Re@Re.local",[[-1,14124,"9"]],[14125,14125],[14124,14124]]],[1528688106806,["Re@Re.local",[[1,14124,"8、9、10）。然而，这次"]],[14124,14124],[14137,14137]]],[1528688173775,[null,[[-1,13149,"\n"],[1,13751,"\n"],[1,13776,"搜索的"],[-1,13819,"K"],[1,13821,"ni"],[-1,13842,"\n\nkn"],[1,13891,"排序）"],[-1,13895,"徐安娥"],[1,14004,"节点。"],[-1,14011," dd"]],[13149,13149],[14011,14011]]],[1528688173775,[null,[[1,13149,"\n"],[-1,13750,"\n"],[-1,13776,"搜索的"],[1,13822,"K"],[-1,13823,"ni"],[1,13846,"\n\nkn"],[-1,13891,"排序）"],[1,13898,"徐安娥"],[-1,14004,"节点。"],[1,14014," dd"]],[14011,14011],[13149,13149]]],[1528688120367,["Re@Re.local",[[-1,14135,"这次"]],[14137,14137],[14135,14135]]],[1528688121599,["Re@Re.local",[[1,14135,"此时"]],[14135,14135],[14137,14137]]],[1528688123133,["Re@Re.local",[[-1,14135,"此时"]],[14137,14137],[14135,14135]]],[1528688125411,["Re@Re.local",[[1,14135,"当此时"]],[14135,14135],[14138,14138]]],[1528688129160,["Re@Re.local",[[-1,14135,"当此时"]],[14138,14138],[14135,14135]]],[1528688140476,["Re@Re.local",[[1,14135,"此时，进行n<limit的测试结果是false"]],[14135,14135],[14158,14158]]],[1528688141455,["Re@Re.local",[[-1,14153,"false"]],[14158,14158],[14153,14153]]],[1528688144217,["Re@Re.local",[[1,14153,"False,yinci"]],[14153,14153],[14164,14164]]],[1528688145719,["Re@Re.local",[[-1,14158,",yinci"]],[14164,14164],[14158,14158]]],[1528688159544,["Re@Re.local",[[1,14158,"，因此可以确认图中所有节点已经被遍历完。"]],[14158,14158],[14178,14178]]],[1528688164353,["Re@Re.local",[[-1,14135,"此时，"]],[14138,14138],[14135,14135]]],[1528688167269,["Re@Re.local",[[1,14135,"在接"]],[14135,14135],[14137,14137]]],[1528688167619,["Re@Re.local",[[-1,14136,"接"]],[14137,14137],[14136,14136]]],[1528688168829,["Re@Re.local",[[1,14136,"节点"]],[14136,14136],[14138,14138]]],[1528688170073,["Re@Re.local",[[-1,14135,"在节点"]],[14138,14138],[14135,14135]]],[1528688173157,["Re@Re.local",[[1,14135,"这次在"]],[14135,14135],[14138,14138]]],[1528688233736,[null,[[-1,13149,"\n"],[1,13751,"\n"],[1,13776,"搜索的"],[-1,13819,"K"],[1,13821,"ni"],[-1,13842,"\n\nkn"],[1,13891,"排序）"],[-1,13895,"徐安娥"],[1,14004,"节点。"],[-1,14011," dd"]],[13149,13149],[14011,14011]]],[1528688233736,[null,[[1,13149,"\n"],[-1,13750,"\n"],[-1,13776,"搜索的"],[1,13822,"K"],[-1,13823,"ni"],[1,13846,"\n\nkn"],[-1,13891,"排序）"],[1,13898,"徐安娥"],[-1,14004,"节点。"],[1,14014," dd"]],[14011,14011],[13149,13149]]],[1528688174986,["Re@Re.local",[[1,14140,"C"]],[14140,14140],[14141,14141]]],[1528688179932,["Re@Re.local",[[1,14181,"此时可"]],[14181,14181],[14184,14184]]],[1528688180098,["Re@Re.local",[[-1,14183,"可"]],[14184,14184],[14183,14183]]],[1528688185670,["Re@Re.local",[[1,14183,"返回True表示已经"]],[14183,14183],[14193,14193]]],[1528688353804,[null,[[-1,13149,"\n"],[1,13751,"\n"],[1,13776,"搜索的"],[-1,13819,"K"],[1,13821,"ni"],[-1,13843,"\nkn\n"],[1,13891,"排序）"],[-1,13895,"徐安娥"],[1,14004,"节点。"],[-1,14011," dd"],[1,14138,"节点C"],[-1,14140,"C"],[-1,14181,"可"]],[13149,13149],[14181,14181]]],[1528688353805,[null,[[1,13149,"\n"],[-1,13750,"\n"],[-1,13776,"搜索的"],[1,13822,"K"],[-1,13823,"ni"],[1,13847,"\nkn\n"],[-1,13891,"排序）"],[1,13898,"徐安娥"],[-1,14004,"节点。"],[1,14014," dd"],[-1,14138,"节点C"],[1,14143,"C"],[1,14183,"可"]],[14181,14181],[13149,13149]]],[1528688317836,["Re@Re.local",[[1,14193,"找到1条成功"]],[14193,14193],[14199,14199]]],[1528688318201,["Re@Re.local",[[-1,14197,"成功"]],[14199,14199],[14197,14197]]],[1528688325335,["Re@Re.local",[[1,14197,"实现"]],[14197,14197],[14199,14199]]],[1528688325983,["Re@Re.local",[[-1,14197,"实现"]],[14199,14199],[14197,14197]]],[1528688330821,["Re@Re.local",[[1,14197,"实现周游的路径。"]],[14197,14197],[14205,14205]]],[1528688335102,["Re@Re.local",[[-1,14204,"。"]],[14205,14205],[14204,14204]]],[1528688337032,["Re@Re.local",[[1,14204,"，即"]],[14204,14204],[14206,14206]]],[1528688337191,["Re@Re.local",[[-1,14205,"即"]],[14206,14206],[14205,14205]]],[1528688343503,["Re@Re.local",[[1,14205,"返回该列表，pa"]],[14205,14205],[14213,14213]]],[1528688344336,["Re@Re.local",[[-1,14210,"，pa"]],[14213,14213],[14210,14210]]],[1528688346499,["Re@Re.local",[[1,14210,"path，七"]],[14210,14210],[14216,14216]]],[1528688346757,["Re@Re.local",[[-1,14215,"七"]],[14216,14216],[14215,14215]]],[1528688349674,["Re@Re.local",[[1,14215,"其值为["]],[14215,14215],[14219,14219]]],[1528688413790,[null,[[-1,13149,"\n"],[1,13751,"\n"],[1,13776,"搜索的"],[-1,13819,"K"],[1,13821,"ni"],[-1,13841,"\n"],[-1,13844,"kn\n"],[1,13891,"排序）"],[-1,13895,"徐安娥"],[1,14004,"节点。"],[-1,14011," dd"],[1,14138,"节点C"],[-1,14140,"C"],[-1,14181,"可"],[-1,14196,"成"]],[13149,13149],[14196,14196]]],[1528688413790,[null,[[1,13149,"\n"],[-1,13750,"\n"],[-1,13776,"搜索的"],[1,13822,"K"],[-1,13823,"ni"],[1,13845,"\n"],[1,13847,"kn\n"],[-1,13891,"排序）"],[1,13898,"徐安娥"],[-1,14004,"节点。"],[1,14014," dd"],[-1,14138,"节点C"],[1,14143,"C"],[1,14183,"可"],[1,14197,"成"]],[14196,14196],[13149,13149]]],[1528688355176,["Re@Re.local",[[-1,14218,"["]],[14219,14219],[14218,14218]]],[1528688355421,["Re@Re.local",[[1,14218,"[A,B,D,E,F,C]"]],[14218,14218],[14231,14231]]],[1528688358184,["Re@Re.local",[[-1,14217,"为"]],[14218,14218],[14217,14217]]],[1528688362658,["Re@Re.local",[[1,14230,"，即为"]],[14230,14230],[14233,14233]]],[1528688370753,["Re@Re.local",[[-1,14231,"即为"]],[14233,14233],[14231,14231]]],[1528688374604,["Re@Re.local",[[1,14231,"它即是为"]],[14231,14231],[14235,14235]]],[1528688374794,["Re@Re.local",[[-1,14234,"为"]],[14235,14235],[14234,14234]]],[1528688380691,["Re@Re.local",[[1,14234,"对图中各节点"]],[14234,14234],[14240,14240]]],[1528688383751,["Re@Re.local",[[1,14234,"实现"]],[14234,14234],[14236,14236]]],[1528688392306,["Re@Re.local",[[1,14242,"访问恰好1次的顺序。"]],[14242,14242],[14252,14252]]],[1528688392633,["Re@Re.local",[[1,14252,"\n\n"]],[14252,14252],[14253,14253]]],[1528688392841,["Re@Re.local",[[1,14254,"\n"]],[14253,14253],[14254,14254]]],[1528688402179,["Re@Re.local",[[1,14254,"![../_images/ktdfsa.png](http://interactivepython.org/courselib/static/pythonds/_images/ktdfsa.png)"]],[14254,14254],[14353,14353]]],[1528688403484,["Re@Re.local",[[1,14354,"\n"]],[14353,14353],[14354,14354]]],[1528688473874,[null,[[-1,13149,"\n"],[1,13751,"\n"],[1,13776,"搜索的"],[-1,13819,"K"],[1,13821,"ni"],[-1,13841,"\n"],[-1,13844,"kn\n"],[1,13891,"排序）"],[-1,13895,"徐安娥"],[1,14004,"节点。"],[-1,14011," dd"],[1,14138,"节点C"],[-1,14140,"C"],[-1,14181,"可"],[-1,14196,"成"]],[13149,13149],[14196,14196]]],[1528688473874,[null,[[1,13149,"\n"],[-1,13750,"\n"],[-1,13776,"搜索的"],[1,13822,"K"],[-1,13823,"ni"],[1,13845,"\n"],[1,13847,"kn\n"],[-1,13891,"排序）"],[1,13898,"徐安娥"],[-1,14004,"节点。"],[1,14014," dd"],[-1,14138,"节点C"],[1,14143,"C"],[1,14183,"可"],[1,14197,"成"]],[14196,14196],[13149,13149]]],[1528688415330,["Re@Re.local",[[-1,14353,"\n"],[1,14354,"![../_images/ktdfsb.png](http://interactivepython.org/courselib/static/pythonds/_images/ktdfsb.png)"]],[14354,14354],[14452,14452]]],[1528688418279,["Re@Re.local",[[1,14353,"\n"],[-1,14353,"![../_images/ktdfsb.png](http://interactivepython.org/courselib/static/pythonds/_images/ktdfsb.png)"]],[14452,14452],[14354,14354]]],[1528688419059,["Re@Re.local",[[1,14355,"\n"]],[14354,14354],[14355,14355]]],[1528688419351,["Re@Re.local",[[1,14355,"![../_images/ktdfsb.png](http://interactivepython.org/courselib/static/pythonds/_images/ktdfsb.png)"]],[14355,14355],[14454,14454]]],[1528688419981,["Re@Re.local",[[1,14455,"\n"]],[14454,14454],[14455,14455]]],[1528688425869,["Re@Re.local",[[1,14456,"\n"]],[14455,14455],[14456,14456]]],[1528688426164,["Re@Re.local",[[1,14456,"![../_images/ktdfsc.png](http://interactivepython.org/courselib/static/pythonds/_images/ktdfsc.png)"]],[14456,14456],[14555,14555]]],[1528688427967,["Re@Re.local",[[1,14556,"\n"]],[14555,14555],[14556,14556]]],[1528688428437,["Re@Re.local",[[1,14557,"\n"]],[14556,14556],[14557,14557]]],[1528688432349,["Re@Re.local",[[1,14557,"![../_images/ktdfsd.png](http://interactivepython.org/courselib/static/pythonds/_images/ktdfsd.png)"]],[14557,14557],[14656,14656]]],[1528688432802,["Re@Re.local",[[1,14657,"\n"]],[14656,14656],[14657,14657]]],[1528688433133,["Re@Re.local",[[1,14658,"\n"]],[14657,14657],[14658,14658]]],[1528688438884,["Re@Re.local",[[1,14658,"![../_images/ktdfse.png](http://interactivepython.org/courselib/static/pythonds/_images/ktdfse.png)"]],[14658,14658],[14757,14757]]],[1528688439470,["Re@Re.local",[[1,14758,"\n"]],[14757,14757],[14758,14758]]],[1528688439965,["Re@Re.local",[[1,14759,"\n"]],[14758,14758],[14759,14759]]],[1528688445666,["Re@Re.local",[[1,14759,"![../_images/ktdfsf.png](http://interactivepython.org/courselib/static/pythonds/_images/ktdfsf.png)"]],[14759,14759],[14858,14858]]],[1528688445935,["Re@Re.local",[[1,14859,"\n"]],[14858,14858],[14859,14859]]],[1528688446524,["Re@Re.local",[[1,14860,"\n"]],[14859,14859],[14860,14860]]],[1528688451941,["Re@Re.local",[[1,14860,"![../_images/ktdfsg.png](http://interactivepython.org/courselib/static/pythonds/_images/ktdfsg.png)"]],[14860,14860],[14959,14959]]],[1528688452213,["Re@Re.local",[[1,14960,"\n"]],[14959,14959],[14960,14960]]],[1528688452433,["Re@Re.local",[[1,14961,"\n"]],[14960,14960],[14961,14961]]],[1528688457913,["Re@Re.local",[[1,14961,"![../_images/ktdfsh.png](http://interactivepython.org/courselib/static/pythonds/_images/ktdfsh.png)"]],[14961,14961],[15060,15060]]],[1528688458187,["Re@Re.local",[[1,15061,"\n"]],[15060,15060],[15061,15061]]],[1528688458410,["Re@Re.local",[[1,15062,"\n"]],[15061,15061],[15062,15062]]],[1528688464016,["Re@Re.local",[[-1,15062,"\n"],[1,15063,"图11给出"]],[15062,15062],[15067,15067]]],[1528688467437,["Re@Re.local",[[-1,15065,"给出"]],[15067,15067],[15065,15065]]],[1528688473172,["Re@Re.local",[[1,15065,"是8*8棋盘"]],[15065,15065],[15071,15071]]],[1528688534011,[null,[[-1,13149,"\n"],[1,13751,"\n"],[1,13776,"搜索的"],[-1,13819,"K"],[1,13821,"ni"],[-1,13841,"\n"],[-1,13844,"kn\n"],[1,13891,"排序）"],[-1,13895,"徐安娥"],[1,14004,"节点。"],[-1,14011," dd"],[1,14138,"节点C"],[-1,14140,"C"],[-1,14181,"可"],[-1,14196,"成"]],[13149,13149],[14196,14196]]],[1528688534011,[null,[[1,13149,"\n"],[-1,13750,"\n"],[-1,13776,"搜索的"],[1,13822,"K"],[-1,13823,"ni"],[1,13845,"\n"],[1,13847,"kn\n"],[-1,13891,"排序）"],[1,13898,"徐安娥"],[-1,14004,"节点。"],[1,14014," dd"],[-1,14138,"节点C"],[1,14143,"C"],[1,14183,"可"],[1,14197,"成"]],[14196,14196],[13149,13149]]],[1528688529713,["Re@Re.local",[[1,15072,"的周游例子。可以看出有多种可行的路径，并且其中有一些还是堆成的。略微调整"]],[15072,15072],[15108,15108]]],[1528688531273,["Re@Re.local",[[-1,15104,"略微调整"]],[15108,15108],[15104,15104]]],[1528688533479,["Re@Re.local",[[1,15104,"改进一下"]],[15104,15104],[15108,15108]]],[1528688593961,[null,[[-1,13149,"\n"],[1,13751,"\n"],[1,13776,"搜索的"],[-1,13819,"K"],[1,13821,"ni"],[-1,13841,"\n"],[-1,13844,"kn\n"],[1,13891,"排序）"],[-1,13895,"徐安娥"],[1,14004,"节点。"],[-1,14011," dd"],[1,14138,"节点C"],[-1,14140,"C"],[-1,14181,"可"],[-1,14196,"成"],[1,15071,"中"],[-1,15103,"略"]],[13149,13149],[15103,15103]]],[1528688593961,[null,[[1,13149,"\n"],[-1,13750,"\n"],[-1,13776,"搜索的"],[1,13822,"K"],[-1,13823,"ni"],[1,13845,"\n"],[1,13847,"kn\n"],[-1,13891,"排序）"],[1,13898,"徐安娥"],[-1,14004,"节点。"],[1,14014," dd"],[-1,14138,"节点C"],[1,14143,"C"],[1,14183,"可"],[1,14197,"成"],[-1,15071,"中"],[1,15104,"略"]],[15103,15103],[13149,13149]]],[1528688535196,["Re@Re.local",[[1,15111,"，"]],[15111,15111],[15112,15112]]],[1528688535535,["Re@Re.local",[[-1,15111,"，"]],[15112,15112],[15111,15111]]],[1528688547799,["Re@Re.local",[[1,15111,"读者也可以获得起始与结束为统一放个"]],[15111,15111],[15128,15128]]],[1528688549352,["Re@Re.local",[[-1,15124,"统一放个"]],[15128,15128],[15124,15124]]],[1528688555327,["Re@Re.local",[[1,15124,"同一个格子的循环路径。"]],[15124,15124],[15135,15135]]],[1528688560038,["Re@Re.local",[[1,15135,"\n\n"]],[15135,15135],[15136,15136]]],[1528688560290,["Re@Re.local",[[1,15137,"\n"]],[15136,15136],[15137,15137]]],[1528688560574,["Re@Re.local",[[1,15137,"![../_images/completeTour.png](http://interactivepython.org/courselib/static/pythonds/_images/completeTour.png)"]],[15137,15137],[15248,15248]]],[1528688560761,["Re@Re.local",[[1,15249,"\n"]],[15248,15248],[15249,15249]]],[1528688561035,["Re@Re.local",[[1,15250,"\n"]],[15249,15249],[15250,15250]]],[1528688579740,["Re@Re.local",[[-1,15250,"\n"],[1,15251,"## 7.14 骑士周游分析 ##"]],[15250,15250],[15267,15267]]],[1528688579911,["Re@Re.local",[[1,15267,"\n\n"]],[15267,15267],[15268,15268]]],[1528688580219,["Re@Re.local",[[1,15269,"\n"]],[15268,15268],[15269,15269]]],[1528688587225,["Re@Re.local",[[-1,15269,"\n"],[1,15270,"关于其实好走"]],[15269,15269],[15275,15275]]],[1528688588450,["Re@Re.local",[[-1,15271,"其实好走"]],[15275,15275],[15271,15271]]],[1528688593672,["Re@Re.local",[[1,15271,"骑士周游问题还有1"]],[15271,15271],[15280,15280]]],[1528688653969,[null,[[-1,13149,"\n"],[1,13751,"\n"],[1,13776,"搜索的"],[-1,13819,"K"],[1,13821,"ni"],[-1,13841,"\n"],[-1,13844,"kn\n"],[1,13891,"排序）"],[-1,13895,"徐安娥"],[1,14004,"节点。"],[-1,14011," dd"],[1,14138,"节点C"],[-1,14140,"C"],[-1,14181,"可"],[-1,14196,"成"],[1,15071,"中"],[-1,15103,"略"],[1,15108,"的话"],[-1,15122,"统一"]],[13149,13149],[15122,15122]]],[1528688653970,[null,[[1,13149,"\n"],[-1,13750,"\n"],[-1,13776,"搜索的"],[1,13822,"K"],[-1,13823,"ni"],[1,13845,"\n"],[1,13847,"kn\n"],[-1,13891,"排序）"],[1,13898,"徐安娥"],[-1,14004,"节点。"],[1,14014," dd"],[-1,14138,"节点C"],[1,14143,"C"],[1,14183,"可"],[1,14197,"成"],[-1,15071,"中"],[1,15104,"略"],[-1,15108,"的话"],[1,15124,"统一"]],[15122,15122],[13149,13149]]],[1528688594291,["Re@Re.local",[[1,15280,"各"]],[15280,15280],[15281,15281]]],[1528688605423,["Re@Re.local",[[-1,15280,"各"]],[15281,15281],[15280,15280]]],[1528688633360,["Re@Re.local",[[1,15280,"个要点，然后再继续介绍深度搜索的通用版本。"]],[15280,15280],[15301,15301]]],[1528688640349,["Re@Re.local",[[1,15283,"需要讲解"]],[15283,15283],[15287,15287]]],[1528688647741,["Re@Re.local",[[-1,15304,"。"]],[15305,15305],[15304,15304]]],[1528688648271,["Re@Re.local",[[1,15304,"，"]],[15304,15304],[15305,15305]]],[1528688713983,[null,[[-1,13149,"\n"],[1,13751,"\n"],[1,13776,"搜索的"],[-1,13819,"K"],[1,13821,"ni"],[-1,13841,"\n"],[-1,13844,"kn\n"],[1,13891,"排序）"],[-1,13895,"徐安娥"],[1,14004,"节点。"],[-1,14011," dd"],[1,14138,"节点C"],[-1,14140,"C"],[-1,14181,"可"],[-1,14196,"成"],[1,15071,"中"],[-1,15103,"略"],[1,15108,"的话"],[-1,15122,"统一"]],[13149,13149],[15122,15122]]],[1528688713983,[null,[[1,13149,"\n"],[-1,13750,"\n"],[-1,13776,"搜索的"],[1,13822,"K"],[-1,13823,"ni"],[1,13845,"\n"],[1,13847,"kn\n"],[-1,13891,"排序）"],[1,13898,"徐安娥"],[-1,14004,"节点。"],[1,14014," dd"],[-1,14138,"节点C"],[1,14143,"C"],[1,14183,"可"],[1,14197,"成"],[-1,15071,"中"],[1,15104,"略"],[-1,15108,"的话"],[1,15124,"统一"]],[15122,15122],[13149,13149]]],[1528688657266,["Re@Re.local",[[1,15283,"即性能"]],[15283,15283],[15286,15286]]],[1528688659214,["Re@Re.local",[[-1,15307,"，"]],[15308,15308],[15307,15307]]],[1528688675928,["Re@Re.local",[[1,15307,"。特别地，knightTour，"]],[15307,15307],[15323,15323]]],[1528688676651,["Re@Re.local",[[-1,15322,"，"]],[15323,15323],[15322,15322]]],[1528688682252,["Re@Re.local",[[1,15322,"高度依赖于选择"]],[15322,15322],[15329,15329]]],[1528688689570,["Re@Re.local",[[-1,15327,"选择"]],[15329,15329],[15327,15327]]],[1528688710828,["Re@Re.local",[[1,15327,"顶点搜索次序的方式。比如说，在5*5的棋盘上可以在1.5秒"]],[15327,15327],[15356,15356]]],[1528688774034,[null,[[-1,13149,"\n"],[1,13751,"\n"],[1,13776,"搜索的"],[-1,13819,"K"],[1,13821,"ni"],[-1,13841,"\n"],[-1,13844,"kn\n"],[1,13891,"排序）"],[-1,13895,"徐安娥"],[1,14004,"节点。"],[-1,14011," dd"],[1,14138,"节点C"],[-1,14140,"C"],[-1,14181,"可"],[-1,14196,"成"],[1,15071,"中"],[-1,15103,"略"],[1,15108,"的话"],[-1,15122,"统一"]],[13149,13149],[15122,15122]]],[1528688774034,[null,[[1,13149,"\n"],[-1,13750,"\n"],[-1,13776,"搜索的"],[1,13822,"K"],[-1,13823,"ni"],[1,13845,"\n"],[1,13847,"kn\n"],[-1,13891,"排序）"],[1,13898,"徐安娥"],[-1,14004,"节点。"],[1,14014," dd"],[-1,14138,"节点C"],[1,14143,"C"],[1,14183,"可"],[1,14197,"成"],[-1,15071,"中"],[1,15104,"略"],[-1,15108,"的话"],[1,15124,"统一"]],[15122,15122],[13149,13149]]],[1528688714355,["Re@Re.local",[[-1,15349,"可以"]],[15351,15351],[15349,15349]]],[1528688718590,["Re@Re.local",[[1,15350,"相对"]],[15350,15350],[15352,15352]]],[1528688719086,["Re@Re.local",[[-1,15350,"相对"]],[15352,15352],[15350,15350]]],[1528688723472,["Re@Re.local",[[1,15350,"　"]],[15350,15350],[15351,15351]]],[1528688751825,["Re@Re.local",[[-1,15349,"在　"]],[15351,15351],[15349,15349]]],[1528688753127,["Re@Re.local",[[1,15349,"zai "]],[15349,15349],[15353,15353]]],[1528688753974,["Re@Re.local",[[-1,15349,"zai "]],[15353,15353],[15349,15349]]],[1528688761690,["Re@Re.local",[[1,15349,"在还算比较快的电脑上以"]],[15349,15349],[15360,15360]]],[1528688761846,["Re@Re.local",[[-1,15359,"以"]],[15360,15360],[15359,15359]]],[1528688764264,["Re@Re.local",[[1,15359,"于"]],[15359,15359],[15360,15360]]],[1528688768788,["Re@Re.local",[[1,15364,"n"]],[15363,15364],[15364,15365]]],[1528688768949,["Re@Re.local",[[1,15365,"e"]],[15364,15365],[15364,15366]]],[1528688769087,["Re@Re.local",[[1,15366,"i"]],[15364,15366],[15364,15367]]],[1528688772218,["Re@Re.local",[[-1,15364,"nei"],[1,15367,"内计算玩车过"]],[15364,15367],[15370,15370]]],[1528688773094,["Re@Re.local",[[-1,15367,"玩车过"]],[15370,15370],[15367,15367]]],[1528688833984,[null,[[-1,13149,"\n"],[1,13751,"\n"],[1,13776,"搜索的"],[-1,13819,"K"],[1,13821,"ni"],[-1,13841,"\n"],[-1,13844,"kn\n"],[1,13891,"排序）"],[-1,13895,"徐安娥"],[1,14004,"节点。"],[-1,14011," dd"],[1,14138,"节点C"],[-1,14140,"C"],[-1,14181,"可"],[-1,14196,"成"],[1,15071,"中"],[-1,15103,"略"],[1,15108,"的话"],[-1,15122,"统一"]],[13149,13149],[15122,15122]]],[1528688833984,[null,[[1,13149,"\n"],[-1,13750,"\n"],[-1,13776,"搜索的"],[1,13822,"K"],[-1,13823,"ni"],[1,13845,"\n"],[1,13847,"kn\n"],[-1,13891,"排序）"],[1,13898,"徐安娥"],[-1,14004,"节点。"],[1,14014," dd"],[-1,14138,"节点C"],[1,14143,"C"],[1,14183,"可"],[1,14197,"成"],[-1,15071,"中"],[1,15104,"略"],[-1,15108,"的话"],[1,15124,"统一"]],[15122,15122],[13149,13149]]],[1528688775194,["Re@Re.local",[[1,15368,"1条"]],[15368,15368],[15370,15370]]],[1528688775739,["Re@Re.local",[[-1,15367,"处1条"]],[15370,15370],[15367,15367]]],[1528688781581,["Re@Re.local",[[1,15367,"出1条路径。"]],[15367,15367],[15373,15373]]],[1528696053929,[null,[[-1,13149,"\n"],[1,13751,"\n"],[1,13776,"搜索的"],[-1,13819,"K"],[1,13821,"ni"],[-1,13841,"\n"],[-1,13844,"kn\n"],[1,13891,"排序）"],[-1,13895,"徐安娥"],[1,14004,"节点。"],[-1,14011," dd"],[1,14138,"节点C"],[-1,14140,"C"],[-1,14181,"可"],[-1,14196,"成"],[1,15071,"中"],[-1,15103,"略"],[1,15108,"的话"],[-1,15122,"统一"]],[13149,13149],[15122,15122]]],[1528696053929,[null,[[1,13149,"\n"],[-1,13750,"\n"],[-1,13776,"搜索的"],[1,13822,"K"],[-1,13823,"ni"],[1,13845,"\n"],[1,13847,"kn\n"],[-1,13891,"排序）"],[1,13898,"徐安娥"],[-1,14004,"节点。"],[1,14014," dd"],[-1,14138,"节点C"],[1,14143,"C"],[1,14183,"可"],[1,14197,"成"],[-1,15071,"中"],[1,15104,"略"],[-1,15108,"的话"],[1,15124,"统一"]],[15122,15122],[13149,13149]]],[1528696004405,["Re@Re.local",[[-1,15372,"。"]],[15373,15373],[15372,15372]]],[1528696005726,["Re@Re.local",[[1,15372,",d"]],[15372,15372],[15374,15374]]],[1528696006344,["Re@Re.local",[[-1,15372,",d"]],[15374,15374],[15372,15372]]],[1528696030059,["Re@Re.local",[[1,15372,"，但对于8*8的棋盘来说又是怎样的？在这种情况下，取决于计算机的戏"]],[15372,15372],[15405,15405]]],[1528696030168,["Re@Re.local",[[-1,15404,"戏"]],[15405,15405],[15404,15404]]],[1528696049687,["Re@Re.local",[[1,15404,"速度，有可能需要半小时才能计算出答案。"]],[15404,15404],[15423,15423]]],[1528696113923,[null,[[-1,13149,"\n"],[1,13751,"\n"],[1,13776,"搜索的"],[-1,13819,"K"],[1,13821,"ni"],[-1,13841,"\n"],[-1,13844,"kn\n"],[1,13891,"排序）"],[-1,13895,"徐安娥"],[1,14004,"节点。"],[-1,14011," dd"],[1,14138,"节点C"],[-1,14140,"C"],[-1,14181,"可"],[-1,14196,"成"],[1,15071,"中"],[-1,15103,"略"],[1,15108,"的话"],[-1,15122,"统一"]],[13149,13149],[15122,15122]]],[1528696113924,[null,[[1,13149,"\n"],[-1,13750,"\n"],[-1,13776,"搜索的"],[1,13822,"K"],[-1,13823,"ni"],[1,13845,"\n"],[1,13847,"kn\n"],[-1,13891,"排序）"],[1,13898,"徐安娥"],[-1,14004,"节点。"],[1,14014," dd"],[-1,14138,"节点C"],[1,14143,"C"],[1,14183,"可"],[1,14197,"成"],[-1,15071,"中"],[1,15104,"略"],[-1,15108,"的话"],[1,15124,"统一"]],[15122,15122],[13149,13149]]],[1528696066276,["Re@Re.local",[[1,15423,"原因是其实中"]],[15423,15423],[15429,15429]]],[1528696066712,["Re@Re.local",[[-1,15426,"其实中"]],[15429,15429],[15426,15426]]],[1528696069532,["Re@Re.local",[[1,15426,"骑士周游的"]],[15426,15426],[15431,15431]]],[1528696070682,["Re@Re.local",[[-1,15430,"的"]],[15431,15431],[15430,15430]]],[1528696078545,["Re@Re.local",[[1,15426,"当前实现的"]],[15426,15426],[15431,15431]]],[1528696112334,["Re@Re.local",[[1,15435,"解法是时间复杂度为$O(k^N)$的算法，其中N是七班"]],[15435,15435],[15462,15462]]],[1528696112566,["Re@Re.local",[[-1,15460,"七班"]],[15462,15462],[15460,15460]]],[1528696173902,[null,[[-1,13149,"\n"],[1,13751,"\n"],[1,13776,"搜索的"],[-1,13819,"K"],[1,13821,"ni"],[-1,13841,"\n"],[-1,13844,"kn\n"],[1,13891,"排序）"],[-1,13895,"徐安娥"],[1,14004,"节点。"],[-1,14011," dd"],[1,14138,"节点C"],[-1,14140,"C"],[-1,14181,"可"],[-1,14196,"成"],[1,15071,"中"],[-1,15103,"略"],[1,15108,"的话"],[-1,15122,"统一"]],[13149,13149],[15122,15122]]],[1528696173902,[null,[[1,13149,"\n"],[-1,13750,"\n"],[-1,13776,"搜索的"],[1,13822,"K"],[-1,13823,"ni"],[1,13845,"\n"],[1,13847,"kn\n"],[-1,13891,"排序）"],[1,13898,"徐安娥"],[-1,14004,"节点。"],[1,14014," dd"],[-1,14138,"节点C"],[1,14143,"C"],[1,14183,"可"],[1,14197,"成"],[-1,15071,"中"],[1,15104,"略"],[-1,15108,"的话"],[1,15124,"统一"]],[15122,15122],[13149,13149]]],[1528696154643,["Re@Re.local",[[1,15462,"中方格数，而k是1个小常数。图12演示"]],[15462,15462],[15481,15481]]],[1528696154936,["Re@Re.local",[[-1,15479,"演示"]],[15481,15481],[15479,15479]]],[1528696164386,["Re@Re.local",[[1,15479,"以图形的方式进行了禅师。"]],[15479,15479],[15491,15491]]],[1528696166483,["Re@Re.local",[[-1,15488,"禅师。"]],[15491,15491],[15488,15488]]],[1528696173120,["Re@Re.local",[[1,15488,"阐释。树的根"]],[15488,15488],[15494,15494]]],[1528696233901,[null,[[-1,13149,"\n"],[1,13751,"\n"],[1,13776,"搜索的"],[-1,13819,"K"],[1,13821,"ni"],[-1,13841,"\n"],[-1,13844,"kn\n"],[1,13891,"排序）"],[-1,13895,"徐安娥"],[1,14004,"节点。"],[-1,14011," dd"],[1,14138,"节点C"],[-1,14140,"C"],[-1,14181,"可"],[-1,14196,"成"],[1,15071,"中"],[-1,15103,"略"],[1,15108,"的话"],[-1,15122,"统一"],[1,15460,"棋盘"],[-1,15477,"演示"]],[13149,13149],[15477,15477]]],[1528696233901,[null,[[1,13149,"\n"],[-1,13750,"\n"],[-1,13776,"搜索的"],[1,13822,"K"],[-1,13823,"ni"],[1,13845,"\n"],[1,13847,"kn\n"],[-1,13891,"排序）"],[1,13898,"徐安娥"],[-1,14004,"节点。"],[1,14014," dd"],[-1,14138,"节点C"],[1,14143,"C"],[1,14183,"可"],[1,14197,"成"],[-1,15071,"中"],[1,15104,"略"],[-1,15108,"的话"],[1,15124,"统一"],[-1,15460,"棋盘"],[1,15479,"演示"]],[15477,15477],[13149,13149]]],[1528696211218,["Re@Re.local",[[1,15494,"节点代表的是搜索树的起点，从起点出发，算法生成并检查每个可能"]],[15494,15494],[15524,15524]]],[1528696212747,["Re@Re.local",[[-1,15520,"每个可能"]],[15524,15524],[15520,15520]]],[1528696215406,["Re@Re.local",[[1,15520,"每一个可"]],[15520,15520],[15524,15524]]],[1528696215592,["Re@Re.local",[[-1,15523,"可"]],[15524,15524],[15523,15523]]],[1528696226516,["Re@Re.local",[[1,15523,"合法的移动。"]],[15523,15523],[15529,15529]]],[1528696293996,[null,[[-1,13149,"\n"],[1,13751,"\n"],[1,13776,"搜索的"],[-1,13819,"K"],[1,13821,"ni"],[-1,13841,"\n"],[-1,13844,"kn\n"],[1,13891,"排序）"],[-1,13895,"徐安娥"],[1,14004,"节点。"],[-1,14011," dd"],[1,14138,"节点C"],[-1,14140,"C"],[-1,14181,"可"],[-1,14196,"成"],[1,15071,"中"],[-1,15103,"略"],[1,15108,"的话"],[-1,15122,"统一"],[1,15460,"棋盘"],[-1,15477,"演示"]],[13149,13149],[15477,15477]]],[1528696293996,[null,[[1,13149,"\n"],[-1,13750,"\n"],[-1,13776,"搜索的"],[1,13822,"K"],[-1,13823,"ni"],[1,13845,"\n"],[1,13847,"kn\n"],[-1,13891,"排序）"],[1,13898,"徐安娥"],[-1,14004,"节点。"],[1,14014," dd"],[-1,14138,"节点C"],[1,14143,"C"],[1,14183,"可"],[1,14197,"成"],[-1,15071,"中"],[1,15104,"略"],[-1,15108,"的话"],[1,15124,"统一"],[-1,15460,"棋盘"],[1,15479,"演示"]],[15477,15477],[13149,13149]]],[1528696241946,["Re@Re.local",[[1,15529,"如亲啊所述"]],[15529,15529],[15534,15534]]],[1528696242607,["Re@Re.local",[[-1,15530,"亲啊所述"]],[15534,15534],[15530,15530]]],[1528696244335,["Re@Re.local",[[1,15530,"前所述"]],[15530,15530],[15533,15533]]],[1528696244933,["Re@Re.local",[[-1,15529,"如前所述"]],[15533,15533],[15529,15529]]],[1528696255580,["Re@Re.local",[[1,15529,"之前也说到过，可能"]],[15529,15529],[15538,15538]]],[1528696255948,["Re@Re.local",[[-1,15536,"可能"]],[15538,15538],[15536,15536]]],[1528696267045,["Re@Re.local",[[1,15536,"合法移动数的个数去"]],[15536,15536],[15545,15545]]],[1528696267154,["Re@Re.local",[[-1,15544,"去"]],[15545,15545],[15544,15544]]],[1528696278189,["Re@Re.local",[[1,15544,"依赖于骑士在棋盘上的位置。"]],[15544,15544],[15557,15557]]],[1528696413930,[null,[[-1,13149,"\n"],[1,13751,"\n"],[1,13776,"搜索的"],[-1,13819,"K"],[1,13821,"ni"],[-1,13841,"\n"],[-1,13844,"kn\n"],[1,13891,"排序）"],[-1,13895,"徐安娥"],[1,14004,"节点。"],[-1,14011," dd"],[1,14138,"节点C"],[-1,14140,"C"],[-1,14181,"可"],[-1,14196,"成"],[1,15071,"中"],[-1,15103,"略"],[1,15108,"的话"],[-1,15122,"统一"],[1,15460,"棋盘"],[-1,15477,"演示"]],[13149,13149],[15477,15477]]],[1528696413930,[null,[[1,13149,"\n"],[-1,13750,"\n"],[-1,13776,"搜索的"],[1,13822,"K"],[-1,13823,"ni"],[1,13845,"\n"],[1,13847,"kn\n"],[-1,13891,"排序）"],[1,13898,"徐安娥"],[-1,14004,"节点。"],[1,14014," dd"],[-1,14138,"节点C"],[1,14143,"C"],[1,14183,"可"],[1,14197,"成"],[-1,15071,"中"],[1,15104,"略"],[-1,15108,"的话"],[1,15124,"统一"],[-1,15460,"棋盘"],[1,15479,"演示"]],[15477,15477],[13149,13149]]],[1528696406906,["Re@Re.local",[[1,15557,"z"]],[15556,15557],[15557,15558]]],[1528696407099,["Re@Re.local",[[1,15558,"a"]],[15557,15558],[15557,15559]]],[1528696407242,["Re@Re.local",[[1,15559,"i"]],[15557,15559],[15557,15560]]],[1528696411006,["Re@Re.local",[[-1,15557,"zai"],[1,15560,"在角落的时候，】"]],[15557,15560],[15565,15565]]],[1528696413070,["Re@Re.local",[[-1,15564,"】"]],[15565,15565],[15564,15564]]],[1528696474017,[null,[[-1,13149,"\n"],[1,13751,"\n"],[1,13776,"搜索的"],[-1,13819,"K"],[1,13821,"ni"],[-1,13841,"\n"],[-1,13844,"kn\n"],[1,13891,"排序）"],[-1,13895,"徐安娥"],[1,14004,"节点。"],[-1,14011," dd"],[1,14138,"节点C"],[-1,14140,"C"],[-1,14181,"可"],[-1,14196,"成"],[1,15071,"中"],[-1,15103,"略"],[1,15108,"的话"],[-1,15122,"统一"],[1,15460,"棋盘"],[-1,15477,"演示"]],[13149,13149],[15477,15477]]],[1528696474017,[null,[[1,13149,"\n"],[-1,13750,"\n"],[-1,13776,"搜索的"],[1,13822,"K"],[-1,13823,"ni"],[1,13845,"\n"],[1,13847,"kn\n"],[-1,13891,"排序）"],[1,13898,"徐安娥"],[-1,14004,"节点。"],[1,14014," dd"],[-1,14138,"节点C"],[1,14143,"C"],[1,14183,"可"],[1,14197,"成"],[-1,15071,"中"],[1,15104,"略"],[-1,15108,"的话"],[1,15124,"统一"],[-1,15460,"棋盘"],[1,15479,"演示"]],[15477,15477],[13149,13149]]],[1528696416262,["Re@Re.local",[[1,15564,"尽可能"]],[15564,15564],[15567,15567]]],[1528696417042,["Re@Re.local",[[-1,15564,"尽可能"]],[15567,15567],[15564,15564]]],[1528696418393,["Re@Re.local",[[1,15564,"仅仅"]],[15564,15564],[15566,15566]]],[1528696418454,["Re@Re.local",[[-1,15565,"仅"]],[15566,15566],[15565,15565]]],[1528696449007,["Re@Re.local",[[1,15565,"可能有两个合法的移动，额"]],[15565,15565],[15577,15577]]],[1528696449385,["Re@Re.local",[[-1,15576,"额"]],[15577,15577],[15576,15576]]],[1528696450755,["Re@Re.local",[[1,15576,"而于"]],[15576,15576],[15578,15578]]],[1528696451031,["Re@Re.local",[[-1,15577,"于"]],[15578,15578],[15577,15577]]],[1528696452003,["Re@Re.local",[[1,15577,"与"]],[15577,15577],[15578,15578]]],[1528696453604,["Re@Re.local",[[-1,15559,"落"]],[15560,15560],[15559,15559]]],[1528696462237,["Re@Re.local",[[1,15577,"角羡林"]],[15577,15577],[15580,15580]]],[1528696462868,["Re@Re.local",[[-1,15577,"角羡林"]],[15580,15580],[15577,15577]]],[1528696464156,["Re@Re.local",[[1,15577,"考"]],[15577,15577],[15578,15578]]],[1528696464236,["Re@Re.local",[[-1,15577,"考"]],[15578,15578],[15577,15577]]],[1528696472921,["Re@Re.local",[[1,15577,"角相邻的位置则可能有3个"]],[15577,15577],[15589,15589]]],[1528696534942,[null,[[-1,13149,"\n"],[1,13751,"\n"],[1,13776,"搜索的"],[-1,13819,"K"],[1,13821,"ni"],[-1,13841,"\n"],[-1,13844,"kn\n"],[1,13891,"排序）"],[-1,13895,"徐安娥"],[1,14004,"节点。"],[-1,14011," dd"],[1,14138,"节点C"],[-1,14140,"C"],[-1,14181,"可"],[-1,14196,"成"],[1,15071,"中"],[-1,15103,"略"],[1,15108,"的话"],[-1,15122,"统一"],[1,15460,"棋盘"],[-1,15477,"演示"]],[13149,13149],[15477,15477]]],[1528696534943,[null,[[1,13149,"\n"],[-1,13750,"\n"],[-1,13776,"搜索的"],[1,13822,"K"],[-1,13823,"ni"],[1,13845,"\n"],[1,13847,"kn\n"],[-1,13891,"排序）"],[1,13898,"徐安娥"],[-1,14004,"节点。"],[1,14014," dd"],[-1,14138,"节点C"],[1,14143,"C"],[1,14183,"可"],[1,14197,"成"],[-1,15071,"中"],[1,15104,"略"],[-1,15108,"的话"],[1,15124,"统一"],[-1,15460,"棋盘"],[1,15479,"演示"]],[15477,15477],[13149,13149]]],[1528696475770,["Re@Re.local",[[1,15592,"yi懂，而"]],[15594,15594],[15597,15597]]],[1528696476819,["Re@Re.local",[[-1,15592,"yi懂，而"]],[15597,15597],[15592,15592]]],[1528696477933,["Re@Re.local",[[1,15592,"移动"]],[15592,15592],[15594,15594]]],[1528696480372,["Re@Re.local",[[-1,15567,"两"]],[15568,15568],[15567,15567]]],[1528696480555,["Re@Re.local",[[1,15567,"2"]],[15567,15567],[15568,15568]]],[1528696483544,["Re@Re.local",[[1,15594,"，而在"]],[15594,15594],[15597,15597]]],[1528696484621,["Re@Re.local",[[-1,15595,"而在"]],[15597,15597],[15595,15595]]],[1528696487310,["Re@Re.local",[[-1,15574,"，而"]],[15576,15576],[15574,15574]]],[1528696489191,["Re@Re.local",[[1,15574,"；在"]],[15574,15574],[15576,15576]]],[1528696491576,["Re@Re.local",[[-1,15594,"，"]],[15595,15595],[15594,15594]]],[1528696501343,["Re@Re.local",[[1,15594,"；而在棋盘中间的话，又啃呢个"]],[15594,15594],[15608,15608]]],[1528696502057,["Re@Re.local",[[-1,15604,"又啃呢个"]],[15608,15608],[15604,15604]]],[1528696504666,["Re@Re.local",[[1,15604,"可能会后8"]],[15604,15604],[15609,15609]]],[1528696505092,["Re@Re.local",[[-1,15607,"后8"]],[15609,15609],[15607,15607]]],[1528696510366,["Re@Re.local",[[1,15607,"有8个。图13给出了"]],[15607,15607],[15617,15617]]],[1528696594878,[null,[[-1,13149,"\n"],[1,13751,"\n"],[1,13776,"搜索的"],[-1,13819,"K"],[1,13821,"ni"],[-1,13841,"\n"],[-1,13844,"kn\n"],[1,13891,"排序）"],[-1,13895,"徐安娥"],[1,14004,"节点。"],[-1,14011," dd"],[1,14138,"节点C"],[-1,14140,"C"],[-1,14181,"可"],[-1,14196,"成"],[1,15071,"中"],[-1,15103,"略"],[1,15108,"的话"],[-1,15122,"统一"],[1,15460,"棋盘"],[-1,15477,"演示"],[-1,15589,"yi懂"],[1,15592,"合法的"]],[13149,13149],[15595,15595]]],[1528696594879,[null,[[1,13149,"\n"],[-1,13750,"\n"],[-1,13776,"搜索的"],[1,13822,"K"],[-1,13823,"ni"],[1,13845,"\n"],[1,13847,"kn\n"],[-1,13891,"排序）"],[1,13898,"徐安娥"],[-1,14004,"节点。"],[1,14014," dd"],[-1,14138,"节点C"],[1,14143,"C"],[1,14183,"可"],[1,14197,"成"],[-1,15071,"中"],[1,15104,"略"],[-1,15108,"的话"],[1,15124,"统一"],[-1,15460,"棋盘"],[1,15479,"演示"],[1,15589,"yi懂"],[-1,15589,"合法的"]],[15595,15595],[13149,13149]]],[1528696581117,["Re@Re.local",[[1,15617,"棋盘上每个位置可能的"]],[15617,15617],[15627,15627]]],[1528696582461,["Re@Re.local",[[-1,15624,"可能的"]],[15627,15627],[15624,15624]]],[1528696585747,["Re@Re.local",[[1,15624,"可能的合法移动。"]],[15624,15624],[15632,15632]]],[1528696654908,[null,[[-1,13149,"\n"],[1,13751,"\n"],[1,13776,"搜索的"],[-1,13819,"K"],[1,13821,"ni"],[-1,13841,"\n"],[-1,13844,"kn\n"],[1,13891,"排序）"],[-1,13895,"徐安娥"],[1,14004,"节点。"],[-1,14011," dd"],[1,14138,"节点C"],[-1,14140,"C"],[-1,14181,"可"],[-1,14196,"成"],[1,15071,"中"],[-1,15103,"略"],[1,15108,"的话"],[-1,15122,"统一"],[1,15460,"棋盘"],[-1,15477,"演示"],[-1,15589,"yi懂"],[1,15592,"合法的"]],[13149,13149],[15595,15595]]],[1528696654908,[null,[[1,13149,"\n"],[-1,13750,"\n"],[-1,13776,"搜索的"],[1,13822,"K"],[-1,13823,"ni"],[1,13845,"\n"],[1,13847,"kn\n"],[-1,13891,"排序）"],[1,13898,"徐安娥"],[-1,14004,"节点。"],[1,14014," dd"],[-1,14138,"节点C"],[1,14143,"C"],[1,14183,"可"],[1,14197,"成"],[-1,15071,"中"],[1,15104,"略"],[-1,15108,"的话"],[1,15124,"统一"],[-1,15460,"棋盘"],[1,15479,"演示"],[1,15589,"yi懂"],[-1,15589,"合法的"]],[15595,15595],[13149,13149]]],[1528696606371,["Re@Re.local",[[1,15632,"在当"]],[15632,15632],[15634,15634]]],[1528696606482,["Re@Re.local",[[-1,15633,"当"]],[15634,15634],[15633,15633]]],[1528696613902,["Re@Re.local",[[1,15633,"树的下一层，同样又又2-"]],[15633,15633],[15645,15645]]],[1528696614975,["Re@Re.local",[[-1,15642,"又2-"]],[15645,15645],[15642,15642]]],[1528696652030,["Re@Re.local",[[1,15642,"有2-8个可能的合法移动。当前"]],[15642,15642],[15657,15657]]],[1528696714912,[null,[[-1,13149,"\n"],[1,13751,"\n"],[1,13776,"搜索的"],[-1,13819,"K"],[1,13821,"ni"],[-1,13841,"\n"],[-1,13844,"kn\n"],[1,13891,"排序）"],[-1,13895,"徐安娥"],[1,14004,"节点。"],[-1,14011," dd"],[1,14138,"节点C"],[-1,14140,"C"],[-1,14181,"可"],[-1,14196,"成"],[1,15071,"中"],[-1,15103,"略"],[1,15108,"的话"],[-1,15122,"统一"],[1,15460,"棋盘"],[-1,15477,"演示"],[-1,15589,"yi懂"],[1,15592,"合法的"]],[13149,13149],[15595,15595]]],[1528696714912,[null,[[1,13149,"\n"],[-1,13750,"\n"],[-1,13776,"搜索的"],[1,13822,"K"],[-1,13823,"ni"],[1,13845,"\n"],[1,13847,"kn\n"],[-1,13891,"排序）"],[1,13898,"徐安娥"],[-1,14004,"节点。"],[1,14014," dd"],[-1,14138,"节点C"],[1,14143,"C"],[1,14183,"可"],[1,14197,"成"],[-1,15071,"中"],[1,15104,"略"],[-1,15108,"的话"],[1,15124,"统一"],[-1,15460,"棋盘"],[1,15479,"演示"],[1,15589,"yi懂"],[-1,15589,"合法的"]],[15595,15595],[13149,13149]]],[1528696674120,["Re@Re.local",[[-1,15655,"当前"]],[15657,15657],[15655,15655]]],[1528696680162,["Re@Re.local",[[1,15655,"需要检查的位置于"]],[15655,15655],[15663,15663]]],[1528696680579,["Re@Re.local",[[-1,15662,"于"]],[15663,15663],[15662,15662]]],[1528696683642,["Re@Re.local",[[1,15662,"对应于是"]],[15662,15662],[15666,15666]]],[1528696683712,["Re@Re.local",[[-1,15665,"是"]],[15666,15666],[15665,15665]]],[1528696687042,["Re@Re.local",[[1,15665,"搜索树中介个"]],[15665,15665],[15671,15671]]],[1528696687306,["Re@Re.local",[[-1,15669,"介个"]],[15671,15671],[15669,15669]]],[1528696690306,["Re@Re.local",[[1,15669,"节点个数。"]],[15669,15669],[15674,15674]]],[1528696690773,["Re@Re.local",[[1,15674,"\n\n"]],[15674,15674],[15675,15675]]],[1528696690983,["Re@Re.local",[[1,15676,"\n"]],[15675,15675],[15676,15676]]],[1528696713157,["Re@Re.local",[[-1,15676,"\n"],[1,15677,"读者"]],[15676,15676],[15678,15678]]],[1528696713574,["Re@Re.local",[[-1,15676,"读者"]],[15678,15678],[15676,15676]]],[1528696774908,[null,[[-1,13149,"\n"],[1,13751,"\n"],[1,13776,"搜索的"],[-1,13819,"K"],[1,13821,"ni"],[-1,13841,"\n"],[-1,13844,"kn\n"],[1,13891,"排序）"],[-1,13895,"徐安娥"],[1,14004,"节点。"],[-1,14011," dd"],[1,14138,"节点C"],[-1,14140,"C"],[-1,14181,"可"],[-1,14196,"成"],[1,15071,"中"],[-1,15103,"略"],[1,15108,"的话"],[-1,15122,"统一"],[1,15460,"棋盘"],[-1,15477,"演示"],[-1,15589,"yi懂"],[1,15592,"合法的"]],[13149,13149],[15595,15595]]],[1528696774908,[null,[[1,13149,"\n"],[-1,13750,"\n"],[-1,13776,"搜索的"],[1,13822,"K"],[-1,13823,"ni"],[1,13845,"\n"],[1,13847,"kn\n"],[-1,13891,"排序）"],[1,13898,"徐安娥"],[-1,14004,"节点。"],[1,14014," dd"],[-1,14138,"节点C"],[1,14143,"C"],[1,14183,"可"],[1,14197,"成"],[-1,15071,"中"],[1,15104,"略"],[-1,15108,"的话"],[1,15124,"统一"],[-1,15460,"棋盘"],[1,15479,"演示"],[1,15589,"yi懂"],[-1,15589,"合法的"]],[15595,15595],[13149,13149]]],[1528696719043,["Re@Re.local",[[1,15676,"\n\n![../_images/8arrayTree.png](http://interactivepython.org/courselib/static/pythonds/_images/8arrayTree.png)"]],[15676,15676],[15784,15784]]],[1528696719724,["Re@Re.local",[[1,15785,"\n"]],[15784,15784],[15785,15785]]],[1528696719994,["Re@Re.local",[[1,15786,"\n"]],[15785,15785],[15786,15786]]],[1528696722944,["Re@Re.local",[[1,15786,"![../_images/moveCount.png](http://interactivepython.org/courselib/static/pythonds/_images/moveCount.png)"]],[15786,15786],[15891,15891]]],[1528696723425,["Re@Re.local",[[1,15892,"\n"]],[15891,15891],[15892,15892]]],[1528696723638,["Re@Re.local",[[1,15893,"\n"]],[15892,15892],[15893,15893]]],[1528696733503,["Re@Re.local",[[-1,15893,"\n"],[1,15894,"读者已经直到，"]],[15893,15893],[15900,15900]]],[1528696735168,["Re@Re.local",[[-1,15897,"直到，"]],[15900,15900],[15897,15897]]],[1528696751034,["Re@Re.local",[[1,15897,"知道，高度为N的二叉树的节点数为$2^N"]],[15897,15897],[15917,15917]]],[1528696751488,["Re@Re.local",[[-1,15916,"N"]],[15917,15917],[15916,15916]]],[1528696758062,["Re@Re.local",[[1,15916,"{N+1}-1$，"]],[15916,15916],[15925,15925]]],[1528696758645,["Re@Re.local",[[-1,15924,"，"]],[15925,15925],[15924,15924]]],[1528696760796,["Re@Re.local",[[1,15924,"。对于"]],[15924,15924],[15927,15927]]],[1528696834925,[null,[[-1,13149,"\n"],[1,13751,"\n"],[1,13776,"搜索的"],[-1,13819,"K"],[1,13821,"ni"],[-1,13841,"\n"],[-1,13844,"kn\n"],[1,13891,"排序）"],[-1,13895,"徐安娥"],[1,14004,"节点。"],[-1,14011," dd"],[1,14138,"节点C"],[-1,14140,"C"],[-1,14181,"可"],[-1,14196,"成"],[1,15071,"中"],[-1,15103,"略"],[1,15108,"的话"],[-1,15122,"统一"],[1,15460,"棋盘"],[-1,15477,"演示"],[-1,15589,"yi懂"],[1,15592,"合法的"],[-1,15674,"\n"],[1,15785,"\n"]],[13149,13149],[15786,15786]]],[1528696834926,[null,[[1,13149,"\n"],[-1,13750,"\n"],[-1,13776,"搜索的"],[1,13822,"K"],[-1,13823,"ni"],[1,13845,"\n"],[1,13847,"kn\n"],[-1,13891,"排序）"],[1,13898,"徐安娥"],[-1,14004,"节点。"],[1,14014," dd"],[-1,14138,"节点C"],[1,14143,"C"],[1,14183,"可"],[1,14197,"成"],[-1,15071,"中"],[1,15104,"略"],[-1,15108,"的话"],[1,15124,"统一"],[-1,15460,"棋盘"],[1,15479,"演示"],[1,15589,"yi懂"],[-1,15589,"合法的"],[1,15674,"\n"],[-1,15784,"\n"]],[15786,15786],[13149,13149]]],[1528696794412,["Re@Re.local",[[1,15927,"一颗"]],[15927,15927],[15929,15929]]],[1528696807417,["Re@Re.local",[[-1,15925,"对于一颗"]],[15929,15929],[15925,15925]]],[1528696816684,["Re@Re.local",[[1,15925,"一颗有8个"]],[15925,15925],[15930,15930]]],[1528696818180,["Re@Re.local",[[-1,15925,"一颗有8个"]],[15930,15930],[15925,15925]]],[1528696823120,["Re@Re.local",[[1,15925,"子点解"]],[15925,15925],[15928,15928]]],[1528696823454,["Re@Re.local",[[-1,15926,"点解"]],[15928,15928],[15926,15926]]],[1528696832584,["Re@Re.local",[[1,15926,"节点为8的树"]],[15926,15926],[15932,15932]]],[1528696894933,[null,[[-1,13149,"\n"],[1,13751,"\n"],[1,13776,"搜索的"],[-1,13819,"K"],[1,13821,"ni"],[-1,13841,"\n"],[-1,13844,"kn\n"],[1,13891,"排序）"],[-1,13895,"徐安娥"],[1,14004,"节点。"],[-1,14011," dd"],[1,14138,"节点C"],[-1,14140,"C"],[-1,14181,"可"],[-1,14196,"成"],[1,15071,"中"],[-1,15103,"略"],[1,15108,"的话"],[-1,15122,"统一"],[1,15460,"棋盘"],[-1,15477,"演示"],[-1,15589,"yi懂"],[1,15592,"合法的"],[-1,15674,"\n"],[1,15785,"\n"]],[13149,13149],[15786,15786]]],[1528696894933,[null,[[1,13149,"\n"],[-1,13750,"\n"],[-1,13776,"搜索的"],[1,13822,"K"],[-1,13823,"ni"],[1,13845,"\n"],[1,13847,"kn\n"],[-1,13891,"排序）"],[1,13898,"徐安娥"],[-1,14004,"节点。"],[1,14014," dd"],[-1,14138,"节点C"],[1,14143,"C"],[1,14183,"可"],[1,14197,"成"],[-1,15071,"中"],[1,15104,"略"],[-1,15108,"的话"],[1,15124,"统一"],[-1,15460,"棋盘"],[1,15479,"演示"],[1,15589,"yi懂"],[-1,15589,"合法的"],[1,15674,"\n"],[-1,15784,"\n"]],[15786,15786],[13149,13149]]],[1528696857461,["Re@Re.local",[[1,15932,"的节点数是远远大于二叉树的。有"]],[15932,15932],[15947,15947]]],[1528696861171,["Re@Re.local",[[1,15928,"树"]],[15928,15928],[15929,15929]]],[1528696862128,["Re@Re.local",[[-1,15929,"为"]],[15930,15930],[15929,15929]]],[1528696863611,["Re@Re.local",[[1,15929,"可达到"]],[15929,15929],[15932,15932]]],[1528696863720,["Re@Re.local",[[-1,15931,"到"]],[15932,15932],[15931,15931]]],[1528696872511,["Re@Re.local",[[-1,15948,"有"]],[15949,15949],[15948,15948]]],[1528696893963,["Re@Re.local",[[1,15948,"由于每个节点的分枝因子是"]],[15948,15948],[15960,15960]]],[1528696954932,[null,[[-1,13149,"\n"],[1,13751,"\n"],[1,13776,"搜索的"],[-1,13819,"K"],[1,13821,"ni"],[-1,13841,"\n"],[-1,13844,"kn\n"],[1,13891,"排序）"],[-1,13895,"徐安娥"],[1,14004,"节点。"],[-1,14011," dd"],[1,14138,"节点C"],[-1,14140,"C"],[-1,14181,"可"],[-1,14196,"成"],[1,15071,"中"],[-1,15103,"略"],[1,15108,"的话"],[-1,15122,"统一"],[1,15460,"棋盘"],[-1,15477,"演示"],[-1,15589,"yi懂"],[1,15592,"合法的"],[-1,15674,"\n"],[1,15785,"\n"]],[13149,13149],[15786,15786]]],[1528696954932,[null,[[1,13149,"\n"],[-1,13750,"\n"],[-1,13776,"搜索的"],[1,13822,"K"],[-1,13823,"ni"],[1,13845,"\n"],[1,13847,"kn\n"],[-1,13891,"排序）"],[1,13898,"徐安娥"],[-1,14004,"节点。"],[1,14014," dd"],[-1,14138,"节点C"],[1,14143,"C"],[1,14183,"可"],[1,14197,"成"],[-1,15071,"中"],[1,15104,"略"],[-1,15108,"的话"],[1,15124,"统一"],[-1,15460,"棋盘"],[1,15479,"演示"],[1,15589,"yi懂"],[-1,15589,"合法的"],[1,15674,"\n"],[-1,15784,"\n"]],[15786,15786],[13149,13149]]],[1528696904309,["Re@Re.local",[[1,15960,"可变的，因此可以用平均"]],[15960,15960],[15971,15971]]],[1528696904816,["Re@Re.local",[[-1,15969,"平均"]],[15971,15971],[15969,15969]]],[1528696935826,["Re@Re.local",[[1,15969,"通过平均分枝因子来估计节点数。值得注意的是，该算法是常熟"]],[15969,15969],[15997,15997]]],[1528696936183,["Re@Re.local",[[-1,15995,"常熟"]],[15997,15997],[15995,15995]]],[1528696950424,["Re@Re.local",[[1,15995,"指数级的：$k^{N+1}-1$"]],[15995,15995],[16011,16011]]],[1528696953686,["Re@Re.local",[[1,15924," "]],[15924,15924],[15925,15925]]],[1528697014939,[null,[[-1,13149,"\n"],[1,13751,"\n"],[1,13776,"搜索的"],[-1,13819,"K"],[1,13821,"ni"],[-1,13841,"\n"],[-1,13844,"kn\n"],[1,13891,"排序）"],[-1,13895,"徐安娥"],[1,14004,"节点。"],[-1,14011," dd"],[1,14138,"节点C"],[-1,14140,"C"],[-1,14181,"可"],[-1,14196,"成"],[1,15071,"中"],[-1,15103,"略"],[1,15108,"的话"],[-1,15122,"统一"],[1,15460,"棋盘"],[-1,15477,"演示"],[-1,15589,"yi懂"],[1,15592,"合法的"],[-1,15674,"\n"],[1,15785,"\n"]],[13149,13149],[15786,15786]]],[1528697014940,[null,[[1,13149,"\n"],[-1,13750,"\n"],[-1,13776,"搜索的"],[1,13822,"K"],[-1,13823,"ni"],[1,13845,"\n"],[1,13847,"kn\n"],[-1,13891,"排序）"],[1,13898,"徐安娥"],[-1,14004,"节点。"],[1,14014," dd"],[-1,14138,"节点C"],[1,14143,"C"],[1,14183,"可"],[1,14197,"成"],[-1,15071,"中"],[1,15104,"略"],[-1,15108,"的话"],[1,15124,"统一"],[-1,15460,"棋盘"],[1,15479,"演示"],[1,15589,"yi懂"],[-1,15589,"合法的"],[1,15674,"\n"],[-1,15784,"\n"]],[15786,15786],[13149,13149]]],[1528696955137,["Re@Re.local",[[1,15913," "]],[15913,15913],[15914,15914]]],[1528697000922,["Re@Re.local",[[1,16013," ，其中k是棋盘的平均分枝因子。来看看它增长得有多块。对于5*5的棋盘，树会有25层深"]],[16013,16013],[16056,16056]]],[1528697135101,[null,[[-1,13149,"\n"],[1,13751,"\n"],[1,13776,"搜索的"],[-1,13819,"K"],[1,13821,"ni"],[-1,13841,"\n"],[-1,13844,"kn\n"],[1,13891,"排序）"],[-1,13895,"徐安娥"],[1,14004,"节点。"],[-1,14011," dd"],[1,14138,"节点C"],[-1,14140,"C"],[-1,14181,"可"],[-1,14196,"成"],[1,15071,"中"],[-1,15103,"略"],[1,15108,"的话"],[-1,15122,"统一"],[1,15460,"棋盘"],[-1,15477,"演示"],[-1,15589,"yi懂"],[1,15592,"合法的"],[-1,15674,"\n"],[1,15785,"\n"]],[13149,13149],[15786,15786]]],[1528697135101,[null,[[1,13149,"\n"],[-1,13750,"\n"],[-1,13776,"搜索的"],[1,13822,"K"],[-1,13823,"ni"],[1,13845,"\n"],[1,13847,"kn\n"],[-1,13891,"排序）"],[1,13898,"徐安娥"],[-1,14004,"节点。"],[1,14014," dd"],[-1,14138,"节点C"],[1,14143,"C"],[1,14183,"可"],[1,14197,"成"],[-1,15071,"中"],[1,15104,"略"],[-1,15108,"的话"],[1,15124,"统一"],[-1,15460,"棋盘"],[1,15479,"演示"],[1,15589,"yi懂"],[-1,15589,"合法的"],[1,15674,"\n"],[-1,15784,"\n"]],[15786,15786],[13149,13149]]],[1528697087445,["Re@Re.local",[[1,16056,"，或者说24，若果"]],[16056,16056],[16065,16065]]],[1528697091734,["Re@Re.local",[[-1,16056,"，或者说24，若果"]],[16065,16065],[16056,16056]]],[1528697096131,["Re@Re.local",[[1,16056,"（或者说24，接"]],[16056,16056],[16064,16064]]],[1528697096281,["Re@Re.local",[[-1,16063,"接"]],[16064,16064],[16063,16063]]],[1528697097548,["Re@Re.local",[[1,16063,"如"]],[16063,16063],[16064,16064]]],[1528697097957,["Re@Re.local",[[-1,16063,"如"]],[16064,16064],[16063,16063]]],[1528697120434,["Re@Re.local",[[1,16063,"若将第1层记为0）。平均分枝因子是k=3.8，因此节点数"]],[16063,16063],[16091,16091]]],[1528697133132,["Re@Re.local",[[-1,16088,"节点数"]],[16091,16091],[16088,16088]]],[1528697194978,[null,[[-1,13149,"\n"],[1,13751,"\n"],[1,13776,"搜索的"],[-1,13819,"K"],[1,13821,"ni"],[-1,13841,"\n"],[-1,13844,"kn\n"],[1,13891,"排序）"],[-1,13895,"徐安娥"],[1,14004,"节点。"],[-1,14011," dd"],[1,14138,"节点C"],[-1,14140,"C"],[-1,14181,"可"],[-1,14196,"成"],[1,15071,"中"],[-1,15103,"略"],[1,15108,"的话"],[-1,15122,"统一"],[1,15460,"棋盘"],[-1,15477,"演示"],[-1,15589,"yi懂"],[1,15592,"合法的"],[-1,15674,"\n"],[1,15785,"\n"]],[13149,13149],[15786,15786]]],[1528697194978,[null,[[1,13149,"\n"],[-1,13750,"\n"],[-1,13776,"搜索的"],[1,13822,"K"],[-1,13823,"ni"],[1,13845,"\n"],[1,13847,"kn\n"],[-1,13891,"排序）"],[1,13898,"徐安娥"],[-1,14004,"节点。"],[1,14014," dd"],[-1,14138,"节点C"],[1,14143,"C"],[1,14183,"可"],[1,14197,"成"],[-1,15071,"中"],[1,15104,"略"],[-1,15108,"的话"],[1,15124,"统一"],[-1,15460,"棋盘"],[1,15479,"演示"],[1,15589,"yi懂"],[-1,15589,"合法的"],[1,15674,"\n"],[-1,15784,"\n"]],[15786,15786],[13149,13149]]],[1528697139625,["Re@Re.local",[[1,16091,"中的节点数为：3"]],[16091,16091],[16099,16099]]],[1528697140244,["Re@Re.local",[[-1,16098,"3"]],[16099,16099],[16098,16098]]],[1528697140804,["Re@Re.local",[[1,16098,"$"]],[16098,16098],[16099,16099]]],[1528697141065,["Re@Re.local",[[-1,16098,"$"]],[16099,16099],[16098,16098]]],[1528697142905,["Re@Re.local",[[1,16098,"¥"]],[16098,16098],[16099,16099]]],[1528697143340,["Re@Re.local",[[-1,16098,"¥"]],[16099,16099],[16098,16098]]],[1528697145286,["Re@Re.local",[[1,16098," $."]],[16098,16098],[16101,16101]]],[1528697145629,["Re@Re.local",[[-1,16100,"."]],[16101,16101],[16100,16100]]],[1528697155385,["Re@Re.local",[[1,16100,"3.8^25-1$ huo"]],[16100,16100],[16113,16113]]],[1528697156082,["Re@Re.local",[[-1,16110,"huo"]],[16113,16113],[16110,16110]]],[1528697157208,["Re@Re.local",[[1,16110,"或者"]],[16110,16110],[16112,16112]]],[1528697157324,["Re@Re.local",[[-1,16111,"者"]],[16112,16112],[16111,16111]]],[1528697158448,["Re@Re.local",[[1,16111," ¥"]],[16111,16111],[16113,16113]]],[1528697159223,["Re@Re.local",[[-1,16112,"¥"]],[16113,16113],[16112,16112]]],[1528697160012,["Re@Re.local",[[1,16112,"$$"]],[16112,16112],[16114,16114]]],[1528697164320,["Re@Re.local",[[1,16113,"3.12\\time "]],[16113,16113],[16123,16123]]],[1528697164720,["Re@Re.local",[[-1,16122," "]],[16123,16123],[16122,16122]]],[1528697168770,["Re@Re.local",[[1,16122,"s 10^14"]],[16122,16122],[16129,16129]]],[1528697169248,["Re@Re.local",[[-1,16127,"14"]],[16129,16129],[16127,16127]]],[1528697170613,["Re@Re.local",[[1,16127,"{14}"]],[16127,16127],[16131,16131]]],[1528697172942,["Re@Re.local",[[1,16104,"{"]],[16104,16104],[16105,16105]]],[1528697176006,["Re@Re.local",[[1,16107,"}"]],[16107,16107],[16108,16108]]],[1528697189368,["Re@Re.local",[[1,16134,"。对于6.6"]],[16134,16134],[16140,16140]]],[1528697190764,["Re@Re.local",[[-1,16138,".6"]],[16140,16140],[16138,16138]]],[1528697193586,["Re@Re.local",[[1,16138,"*6的，有"]],[16138,16138],[16143,16143]]],[1528697254971,[null,[[-1,13149,"\n"],[1,13751,"\n"],[1,13776,"搜索的"],[-1,13819,"K"],[1,13821,"ni"],[-1,13841,"\n"],[-1,13844,"kn\n"],[1,13891,"排序）"],[-1,13895,"徐安娥"],[1,14004,"节点。"],[-1,14011," dd"],[1,14138,"节点C"],[-1,14140,"C"],[-1,14181,"可"],[-1,14196,"成"],[1,15071,"中"],[-1,15103,"略"],[1,15108,"的话"],[-1,15122,"统一"],[1,15460,"棋盘"],[-1,15477,"演示"],[-1,15589,"yi懂"],[1,15592,"合法的"],[-1,15674,"\n"],[1,15786,"\n"],[1,16088,"搜索树"],[-1,16095,"3$¥"]],[13149,13149],[16095,16095]]],[1528697254971,[null,[[1,13149,"\n"],[-1,13750,"\n"],[-1,13776,"搜索的"],[1,13822,"K"],[-1,13823,"ni"],[1,13845,"\n"],[1,13847,"kn\n"],[-1,13891,"排序）"],[1,13898,"徐安娥"],[-1,14004,"节点。"],[1,14014," dd"],[-1,14138,"节点C"],[1,14143,"C"],[1,14183,"可"],[1,14197,"成"],[-1,15071,"中"],[1,15104,"略"],[-1,15108,"的话"],[1,15124,"统一"],[-1,15460,"棋盘"],[1,15479,"演示"],[1,15589,"yi懂"],[-1,15589,"合法的"],[1,15674,"\n"],[-1,15785,"\n"],[-1,16088,"搜索树"],[1,16098,"3$¥"]],[16095,16095],[13149,13149]]],[1528697197196,["Re@Re.local",[[1,16143," $$"]],[16143,16143],[16146,16146]]],[1528697199771,["Re@Re.local",[[1,16134," "]],[16134,16134],[16135,16135]]],[1528697210635,["Re@Re.local",[[1,16146,"1.5\\times 10^{23}"]],[16146,16146],[16163,16163]]],[1528697218211,["Re@Re.local",[[1,16164," 个节点，而对于普通股"]],[16164,16164],[16175,16175]]],[1528697218574,["Re@Re.local",[[-1,16174,"股"]],[16175,16175],[16174,16174]]],[1528697223194,["Re@Re.local",[[1,16174,"的8*8棋盘，k"]],[16174,16174],[16182,16182]]],[1528697223548,["Re@Re.local",[[-1,16181,"k"]],[16182,16182],[16181,16181]]],[1528697233915,["Re@Re.local",[[1,16181,"k=5.25，则有 $$ 。"]],[16181,16181],[16195,16195]]],[1528697242926,["Re@Re.local",[[1,16192,"1.3\\times 10^46"]],[16192,16192],[16207,16207]]],[1528697253482,["Re@Re.local",[[1,16210,"当然，因为对于同一个问题"]],[16210,16210],[16222,16222]]],[1528697254342,["Re@Re.local",[[-1,16220,"问题"]],[16222,16222],[16220,16220]]],[1528697314969,[null,[[-1,13149,"\n"],[1,13751,"\n"],[1,13776,"搜索的"],[-1,13819,"K"],[1,13821,"ni"],[-1,13841,"\n"],[-1,13844,"kn\n"],[1,13891,"排序）"],[-1,13895,"徐安娥"],[1,14004,"节点。"],[-1,14011," dd"],[1,14138,"节点C"],[-1,14140,"C"],[-1,14181,"可"],[-1,14196,"成"],[1,15071,"中"],[-1,15103,"略"],[1,15108,"的话"],[-1,15122,"统一"],[1,15460,"棋盘"],[-1,15477,"演示"],[-1,15589,"yi懂"],[1,15592,"合法的"],[-1,15674,"\n"],[1,15786,"\n"],[1,16088,"搜索树"],[-1,16095,"3$¥"]],[13149,13149],[16095,16095]]],[1528697314969,[null,[[1,13149,"\n"],[-1,13750,"\n"],[-1,13776,"搜索的"],[1,13822,"K"],[-1,13823,"ni"],[1,13845,"\n"],[1,13847,"kn\n"],[-1,13891,"排序）"],[1,13898,"徐安娥"],[-1,14004,"节点。"],[1,14014," dd"],[-1,14138,"节点C"],[1,14143,"C"],[1,14183,"可"],[1,14197,"成"],[-1,15071,"中"],[1,15104,"略"],[-1,15108,"的话"],[1,15124,"统一"],[-1,15460,"棋盘"],[1,15479,"演示"],[1,15589,"yi懂"],[-1,15589,"合法的"],[1,15674,"\n"],[-1,15785,"\n"],[-1,16088,"搜索树"],[1,16098,"3$¥"]],[16095,16095],[13149,13149]]],[1528697255322,["Re@Re.local",[[-1,16217,"同"]],[16218,16218],[16217,16217]]],[1528697264609,["Re@Re.local",[[1,16217,"同一个问题可能有多重解法，也许"]],[16217,16217],[16232,16232]]],[1528697265458,["Re@Re.local",[[-1,16230,"也许"]],[16232,16232],[16230,16230]]],[1528697271734,["Re@Re.local",[[-1,16213,"因为"]],[16215,16215],[16213,16213]]],[1528697278528,["Re@Re.local",[[1,16228,"因此也不必唐所每个"]],[16228,16228],[16237,16237]]],[1528697279552,["Re@Re.local",[[-1,16233,"唐所每个"]],[16237,16237],[16233,16233]]],[1528697301934,["Re@Re.local",[[1,16233,"搜索每个单节点，但是节点数的"]],[16233,16233],[16247,16247]]],[1528697304604,["Re@Re.local",[[-1,16243,"节点数的"]],[16247,16247],[16243,16243]]],[1528697309675,["Re@Re.local",[[1,16243,"这也只能是节点数的"]],[16243,16243],[16252,16252]]],[1528697310761,["Re@Re.local",[[-1,16248,"节点数的"]],[16252,16252],[16248,16248]]],[1528697314104,["Re@Re.local",[[1,16248,"对节点数"]],[16248,16248],[16252,16252]]],[1528697374996,[null,[[-1,13149,"\n"],[1,13751,"\n"],[1,13776,"搜索的"],[-1,13819,"K"],[1,13821,"ni"],[-1,13841,"\n"],[-1,13844,"kn\n"],[1,13891,"排序）"],[-1,13895,"徐安娥"],[1,14004,"节点。"],[-1,14011," dd"],[1,14138,"节点C"],[-1,14140,"C"],[-1,14181,"可"],[-1,14196,"成"],[1,15071,"中"],[-1,15103,"略"],[1,15108,"的话"],[-1,15122,"统一"],[1,15460,"棋盘"],[-1,15477,"演示"],[-1,15589,"yi懂"],[1,15592,"合法的"],[-1,15674,"\n"],[1,15786,"\n"],[1,16088,"搜索树"],[-1,16095,"3$¥"],[-1,16252,"一个"]],[13149,13149],[16252,16252]]],[1528697374996,[null,[[1,13149,"\n"],[-1,13750,"\n"],[-1,13776,"搜索的"],[1,13822,"K"],[-1,13823,"ni"],[1,13845,"\n"],[1,13847,"kn\n"],[-1,13891,"排序）"],[1,13898,"徐安娥"],[-1,14004,"节点。"],[1,14014," dd"],[-1,14138,"节点C"],[1,14143,"C"],[1,14183,"可"],[1,14197,"成"],[-1,15071,"中"],[1,15104,"略"],[-1,15108,"的话"],[1,15124,"统一"],[-1,15460,"棋盘"],[1,15479,"演示"],[1,15589,"yi懂"],[-1,15589,"合法的"],[1,15674,"\n"],[-1,15785,"\n"],[-1,16088,"搜索树"],[1,16098,"3$¥"],[1,16252,"一个"]],[16252,16252],[13149,13149]]],[1528697342814,["Re@Re.local",[[1,16254,"个分数，事实上也并不会改变其指数级的性质。w"]],[16254,16254],[16276,16276]]],[1528697343148,["Re@Re.local",[[-1,16275,"w"]],[16276,16276],[16275,16275]]],[1528697353603,["Re@Re.local",[[1,16275,"至于将k表示为棋盘规模"]],[16275,16275],[16286,16286]]],[1528697353943,["Re@Re.local",[[-1,16284,"规模"]],[16286,16286],[16284,16284]]],[1528697355421,["Re@Re.local",[[1,16284,"规模"]],[16284,16284],[16286,16286]]],[1528697366503,["Re@Re.local",[[-1,16284,"规模"]],[16286,16286],[16284,16284]]],[1528697373739,["Re@Re.local",[[1,16284,"大小的函数，就作为联系了。"]],[16284,16284],[16297,16297]]],[1528697374034,["Re@Re.local",[[1,16297,"\n\n"]],[16297,16297],[16298,16298]]],[1528697374236,["Re@Re.local",[[1,16299,"\n"]],[16298,16298],[16299,16299]]],[1528697374589,["Re@Re.local",[[-1,16299,"\n"]],[16299,16299],[16298,16298]]],[1528697434981,[null,[[-1,13149,"\n"],[1,13751,"\n"],[1,13776,"搜索的"],[-1,13819,"K"],[1,13821,"ni"],[-1,13841,"\n"],[-1,13844,"kn\n"],[1,13891,"排序）"],[-1,13895,"徐安娥"],[1,14004,"节点。"],[-1,14011," dd"],[1,14138,"节点C"],[-1,14140,"C"],[-1,14181,"可"],[-1,14196,"成"],[1,15071,"中"],[-1,15103,"略"],[1,15108,"的话"],[-1,15122,"统一"],[1,15460,"棋盘"],[-1,15477,"演示"],[-1,15589,"yi懂"],[1,15592,"合法的"],[-1,15674,"\n"],[1,15786,"\n"],[1,16088,"搜索树"],[-1,16095,"3$¥"],[-1,16252,"一个"],[1,16254,"取了"]],[13149,13149],[16256,16256]]],[1528697434981,[null,[[1,13149,"\n"],[-1,13750,"\n"],[-1,13776,"搜索的"],[1,13822,"K"],[-1,13823,"ni"],[1,13845,"\n"],[1,13847,"kn\n"],[-1,13891,"排序）"],[1,13898,"徐安娥"],[-1,14004,"节点。"],[1,14014," dd"],[-1,14138,"节点C"],[1,14143,"C"],[1,14183,"可"],[1,14197,"成"],[-1,15071,"中"],[1,15104,"略"],[-1,15108,"的话"],[1,15124,"统一"],[-1,15460,"棋盘"],[1,15479,"演示"],[1,15589,"yi懂"],[-1,15589,"合法的"],[1,15674,"\n"],[-1,15785,"\n"],[-1,16088,"搜索树"],[1,16098,"3$¥"],[1,16252,"一个"],[-1,16252,"取了"]],[16256,16256],[13149,13149]]],[1528697376095,["Re@Re.local",[[-1,16293,"联系"]],[16295,16295],[16293,16293]]],[1528697377892,["Re@Re.local",[[1,16293,"练习了。"]],[16293,16293],[16297,16297]]],[1528697378171,["Re@Re.local",[[1,16298,"\n"]],[16297,16297],[16298,16298]]],[1528697378358,["Re@Re.local",[[1,16299,"\n"]],[16298,16298],[16299,16299]]],[1528697380401,["Re@Re.local",[[-1,16299,"\n"],[1,16300,"星魂的事"]],[16299,16299],[16303,16303]]],[1528697381118,["Re@Re.local",[[-1,16299,"星魂的事"]],[16303,16303],[16299,16299]]],[1528697381276,["Re@Re.local",[[-1,16298,"\n"],[1,16299,"x"]],[16299,16299],[16298,16299]]],[1528697381691,["Re@Re.local",[[-1,16298,"x"]],[16298,16299],[0,0]]],[1528697381920,["Re@Re.local",[[1,16298,"\n\n"]],[16298,16298],[16299,16299]]],[1528697383458,["Re@Re.local",[[-1,16299,"\n"]],[16299,16299],[0,0]]],[1528697383605,["Re@Re.local",[[-1,16298,"\n"],[1,16299,"x"]],[0,0],[16298,16299]]],[1528697384165,["Re@Re.local",[[-1,16298,"x"]],[16298,16299],[0,0]]],[1528697384785,["Re@Re.local",[[1,16298,"\n\n"]],[16298,16298],[16299,16299]]],[1528697385505,["Re@Re.local",[[1,16300,"\n"]],[16299,16299],[16300,16300]]],[1528697417610,["Re@Re.local",[[1,16299,"幸运的是，有种方法可以将8*8的情况控制在1秒内完成。在下面的代码中"]],[16299,16299],[16333,16333]]],[1528697420995,["Re@Re.local",[[-1,16325,"。在下面的代码中"]],[16333,16333],[16325,16325]]],[1528697428724,["Re@Re.local",[[1,16325,"，如下面的代码4所示。"]],[16325,16325],[16336,16336]]],[1528697429212,["Re@Re.local",[[-1,16335,"。"]],[16336,16336],[16335,16335]]],[1528697431537,["Re@Re.local",[[1,16335,"，它对n"]],[16335,16335],[16339,16339]]],[1528697432559,["Re@Re.local",[[-1,16335,"，它对n"]],[16339,16339],[16335,16335]]],[1528697433341,["Re@Re.local",[[1,16335,"。"]],[16335,16335],[16336,16336]]],[1528697494999,[null,[[-1,13149,"\n"],[1,13751,"\n"],[1,13776,"搜索的"],[-1,13819,"K"],[1,13821,"ni"],[-1,13841,"\n"],[-1,13844,"kn\n"],[1,13891,"排序）"],[-1,13895,"徐安娥"],[1,14004,"节点。"],[-1,14011," dd"],[1,14138,"节点C"],[-1,14140,"C"],[-1,14181,"可"],[-1,14196,"成"],[1,15071,"中"],[-1,15103,"略"],[1,15108,"的话"],[-1,15122,"统一"],[1,15460,"棋盘"],[-1,15477,"演示"],[-1,15589,"yi懂"],[1,15592,"合法的"],[-1,15677,"\n"],[1,15786,"\n"],[1,16088,"搜索树"],[-1,16095,"3$¥"],[-1,16252,"一个"],[1,16254,"取了"],[-1,16297,"了"],[1,16298,"\n"],[-1,16338,"。\n\n"]],[13149,13149],[16338,16338]]],[1528697494999,[null,[[1,13149,"\n"],[-1,13750,"\n"],[-1,13776,"搜索的"],[1,13822,"K"],[-1,13823,"ni"],[1,13845,"\n"],[1,13847,"kn\n"],[-1,13891,"排序）"],[1,13898,"徐安娥"],[-1,14004,"节点。"],[1,14014," dd"],[-1,14138,"节点C"],[1,14143,"C"],[1,14183,"可"],[1,14197,"成"],[-1,15071,"中"],[1,15104,"略"],[-1,15108,"的话"],[1,15124,"统一"],[-1,15460,"棋盘"],[1,15479,"演示"],[1,15589,"yi懂"],[-1,15589,"合法的"],[1,15677,"\n"],[-1,15785,"\n"],[-1,16088,"搜索树"],[1,16098,"3$¥"],[1,16252,"一个"],[-1,16252,"取了"],[1,16297,"了"],[-1,16297,"\n"],[1,16338,"。\n\n"]],[16338,16338],[13149,13149]]],[1528697437568,["Re@Re.local",[[1,16335,"，记or"]],[16335,16335],[16339,16339]]],[1528697438814,["Re@Re.local",[[-1,16335,"，记or"]],[16339,16339],[16335,16335]]],[1528697442152,["Re@Re.local",[[1,16335,"。其中的函数"]],[16335,16335],[16341,16341]]],[1528697443122,["Re@Re.local",[[-1,16338,"的函数"]],[16341,16341],[16338,16338]]],[1528697444221,["Re@Re.local",[[1,16338,"叫做"]],[16338,16338],[16340,16340]]],[1528697444579,["Re@Re.local",[[-1,16338,"叫做"]],[16340,16340],[16338,16338]]],[1528697451761,["Re@Re.local",[[1,16338,"orderbyAvail函数是用"]],[16338,16338],[16354,16354]]],[1528697452500,["Re@Re.local",[[-1,16352,"是用"]],[16354,16354],[16352,16352]]],[1528697468835,["Re@Re.local",[[1,16338,"用于u.getConnections中的"]],[16338,16338],[16358,16358]]],[1528697473787,["Re@Re.local",[[-1,16356,"中的"]],[16358,16358],[16356,16356]]],[1528697486870,["Re@Re.local",[[1,16356,"的"]],[16356,16356],[16357,16357]]],[1528697555046,[null,[[-1,13149,"\n"],[1,13751,"\n"],[1,13776,"搜索的"],[-1,13819,"K"],[1,13821,"ni"],[-1,13841,"\n"],[-1,13844,"kn\n"],[1,13891,"排序）"],[-1,13895,"徐安娥"],[1,14004,"节点。"],[-1,14011," dd"],[1,14138,"节点C"],[-1,14140,"C"],[-1,14181,"可"],[-1,14196,"成"],[1,15071,"中"],[-1,15103,"略"],[1,15108,"的话"],[-1,15122,"统一"],[1,15460,"棋盘"],[-1,15477,"演示"],[-1,15589,"yi懂"],[1,15592,"合法的"],[-1,15674,"\n"],[1,15785,"\n"],[1,16088,"搜索树"],[-1,16095,"3$¥"],[-1,16252,"一个"],[1,16254,"取了"],[-1,16297,"了"],[1,16298,"\n"],[-1,16371,"。\n\n。"]],[13149,13149],[16371,16371]]],[1528697555047,[null,[[1,13149,"\n"],[-1,13750,"\n"],[-1,13776,"搜索的"],[1,13822,"K"],[-1,13823,"ni"],[1,13845,"\n"],[1,13847,"kn\n"],[-1,13891,"排序）"],[1,13898,"徐安娥"],[-1,14004,"节点。"],[1,14014," dd"],[-1,14138,"节点C"],[1,14143,"C"],[1,14183,"可"],[1,14197,"成"],[-1,15071,"中"],[1,15104,"略"],[-1,15108,"的话"],[1,15124,"统一"],[-1,15460,"棋盘"],[1,15479,"演示"],[1,15589,"yi懂"],[-1,15589,"合法的"],[1,15674,"\n"],[-1,15784,"\n"],[-1,16088,"搜索树"],[1,16098,"3$¥"],[1,16252,"一个"],[-1,16252,"取了"],[1,16297,"了"],[-1,16297,"\n"],[1,16371,"。\n\n。"]],[16371,16371],[13149,13149]]],[1528697495789,["Re@Re.local",[[-1,16357,"orderbyAvail函数\n"]],[16357,16372],[16357,16357]]],[1528697498178,["Re@Re.local",[[1,16338,"orderbyAvail函数\n是"]],[16338,16338],[16354,16354]]],[1528697499375,["Re@Re.local",[[-1,16372,"的"]],[16373,16373],[16372,16372]]],[1528697502707,["Re@Re.local",[[1,16372,"被调用的"]],[16372,16372],[16376,16376]]],[1528697506504,["Re@Re.local",[[-1,16354,"用于"]],[16356,16356],[16354,16354]]],[1528697507090,["Re@Re.local",[[1,16354,"在"]],[16354,16354],[16355,16355]]],[1528697509243,["Re@Re.local",[[-1,16372,"调用的"]],[16375,16375],[16372,16372]]],[1528697513837,["Re@Re.local",[[1,16372,"调用时所使用的函数。"]],[16372,16372],[16382,16382]]],[1528697675123,[null,[[-1,13149,"\n"],[1,13751,"\n"],[1,13776,"搜索的"],[-1,13819,"K"],[1,13821,"ni"],[-1,13841,"\n"],[-1,13844,"kn\n"],[1,13891,"排序）"],[-1,13895,"徐安娥"],[1,14004,"节点。"],[-1,14011," dd"],[1,14138,"节点C"],[-1,14140,"C"],[-1,14181,"可"],[-1,14196,"成"],[1,15071,"中"],[-1,15103,"略"],[1,15108,"的话"],[-1,15122,"统一"],[1,15460,"棋盘"],[-1,15477,"演示"],[-1,15589,"yi懂"],[1,15592,"合法的"],[-1,15674,"\n"],[1,15786,"\n"],[1,16088,"搜索树"],[-1,16095,"3$¥"],[-1,16252,"一个"],[1,16254,"取了"],[-1,16297,"了"],[1,16298,"\n"],[-1,16383,"\n。\n\n"]],[13149,13149],[16383,16383]]],[1528697675123,[null,[[1,13149,"\n"],[-1,13750,"\n"],[-1,13776,"搜索的"],[1,13822,"K"],[-1,13823,"ni"],[1,13845,"\n"],[1,13847,"kn\n"],[-1,13891,"排序）"],[1,13898,"徐安娥"],[-1,14004,"节点。"],[1,14014," dd"],[-1,14138,"节点C"],[1,14143,"C"],[1,14183,"可"],[1,14197,"成"],[-1,15071,"中"],[1,15104,"略"],[-1,15108,"的话"],[1,15124,"统一"],[-1,15460,"棋盘"],[1,15479,"演示"],[1,15589,"yi懂"],[-1,15589,"合法的"],[1,15674,"\n"],[-1,15785,"\n"],[-1,16088,"搜索树"],[1,16098,"3$¥"],[1,16252,"一个"],[-1,16252,"取了"],[1,16297,"了"],[-1,16297,"\n"],[1,16383,"\n。\n\n"]],[16383,16383],[13149,13149]]],[1528697630138,["Re@Re.local",[[1,16382,"hang"]],[16382,16382],[16386,16386]]],[1528697630975,["Re@Re.local",[[-1,16382,"hang"]],[16386,16386],[16382,16382]]],[1528697640505,["Re@Re.local",[[1,16382,"行10是orderByAvail紫红最关键的"]],[16382,16382],[16404,16404]]],[1528697642229,["Re@Re.local",[[-1,16398,"紫红最关键的"]],[16404,16404],[16398,16398]]],[1528697654368,["Re@Re.local",[[1,16398,"中最关键的1行。该行确认"]],[16398,16398],[16410,16410]]],[1528697663993,["Re@Re.local",[[-1,16408,"确认"]],[16410,16410],[16408,16408]]],[1528697670047,["Re@Re.local",[[1,16408,"保证了选"]],[16408,16408],[16412,16412]]],[1528697670119,["Re@Re.local",[[-1,16411,"选"]],[16412,16412],[16411,16411]]],[1528697671723,["Re@Re.local",[[1,16411,"徐安娥的"]],[16411,16411],[16415,16415]]],[1528697673147,["Re@Re.local",[[-1,16411,"徐安娥的"]],[16415,16415],[16411,16411]]],[1528697674583,["Re@Re.local",[[1,16411,"选择的"]],[16411,16411],[16414,16414]]],[1528697735094,[null,[[-1,13149,"\n"],[1,13751,"\n"],[1,13776,"搜索的"],[-1,13819,"K"],[1,13821,"ni"],[-1,13841,"\n"],[-1,13844,"kn\n"],[1,13891,"排序）"],[-1,13895,"徐安娥"],[1,14004,"节点。"],[-1,14011," dd"],[1,14138,"节点C"],[-1,14140,"C"],[-1,14181,"可"],[-1,14196,"成"],[1,15071,"中"],[-1,15103,"略"],[1,15108,"的话"],[-1,15122,"统一"],[1,15460,"棋盘"],[-1,15477,"演示"],[-1,15589,"yi懂"],[1,15592,"合法的"],[-1,15674,"\n"],[1,15786,"\n"],[1,16088,"搜索树"],[-1,16095,"3$¥"],[-1,16252,"一个"],[1,16254,"取了"],[-1,16297,"了"],[1,16298,"\n"],[-1,16415,"\n。\n\n"]],[13149,13149],[16415,16415]]],[1528697735094,[null,[[1,13149,"\n"],[-1,13750,"\n"],[-1,13776,"搜索的"],[1,13822,"K"],[-1,13823,"ni"],[1,13845,"\n"],[1,13847,"kn\n"],[-1,13891,"排序）"],[1,13898,"徐安娥"],[-1,14004,"节点。"],[1,14014," dd"],[-1,14138,"节点C"],[1,14143,"C"],[1,14183,"可"],[1,14197,"成"],[-1,15071,"中"],[1,15104,"略"],[-1,15108,"的话"],[1,15124,"统一"],[-1,15460,"棋盘"],[1,15479,"演示"],[1,15589,"yi懂"],[-1,15589,"合法的"],[1,15674,"\n"],[-1,15785,"\n"],[-1,16088,"搜索树"],[1,16098,"3$¥"],[1,16252,"一个"],[-1,16252,"取了"],[1,16297,"了"],[-1,16297,"\n"],[1,16415,"\n。\n\n"]],[16415,16415],[13149,13149]]],[1528697676751,["Re@Re.local",[[1,16414,"顶点/"]],[16414,16414],[16417,16417]]],[1528697680001,["Re@Re.local",[[1,16414,"下一步"]],[16414,16414],[16417,16417]]],[1528697681057,["Re@Re.local",[[-1,16419,"/"]],[16420,16420],[16419,16419]]],[1528697682321,["Re@Re.local",[[1,16419,"是"]],[16419,16419],[16420,16420]]],[1528697696323,["Re@Re.local",[[-1,16419,"是"]],[16420,16420],[16419,16419]]],[1528697697407,["Re@Re.local",[[1,16419,"的"]],[16419,16419],[16420,16420]]],[1528697697576,["Re@Re.local",[[-1,16419,"的"]],[16420,16420],[16419,16419]]],[1528697727621,["Re@Re.local",[[1,16419,"是可能的合法走法最少的那个。读者可能觉得这有些起反作用，"]],[16419,16419],[16447,16447]]],[1528697728409,["Re@Re.local",[[-1,16446,"，"]],[16447,16447],[16446,16446]]],[1528697733079,["Re@Re.local",[[1,16446,"，为什么不选择"]],[16446,16446],[16453,16453]]],[1528697795068,[null,[[-1,13149,"\n"],[1,13751,"\n"],[1,13776,"搜索的"],[-1,13819,"K"],[1,13821,"ni"],[-1,13841,"\n"],[-1,13844,"kn\n"],[1,13891,"排序）"],[-1,13895,"徐安娥"],[1,14004,"节点。"],[-1,14011," dd"],[1,14138,"节点C"],[-1,14140,"C"],[-1,14181,"可"],[-1,14196,"成"],[1,15071,"中"],[-1,15103,"略"],[1,15108,"的话"],[-1,15122,"统一"],[1,15460,"棋盘"],[-1,15477,"演示"],[-1,15589,"yi懂"],[1,15592,"合法的"],[-1,15674,"\n"],[1,15786,"\n"],[1,16088,"搜索树"],[-1,16095,"3$¥"],[-1,16252,"一个"],[1,16254,"取了"],[-1,16297,"了"],[1,16298,"\n"],[-1,16454,"\n。\n\n"]],[13149,13149],[16454,16454]]],[1528697795068,[null,[[1,13149,"\n"],[-1,13750,"\n"],[-1,13776,"搜索的"],[1,13822,"K"],[-1,13823,"ni"],[1,13845,"\n"],[1,13847,"kn\n"],[-1,13891,"排序）"],[1,13898,"徐安娥"],[-1,14004,"节点。"],[1,14014," dd"],[-1,14138,"节点C"],[1,14143,"C"],[1,14183,"可"],[1,14197,"成"],[-1,15071,"中"],[1,15104,"略"],[-1,15108,"的话"],[1,15124,"统一"],[-1,15460,"棋盘"],[1,15479,"演示"],[1,15589,"yi懂"],[-1,15589,"合法的"],[1,15674,"\n"],[-1,15785,"\n"],[-1,16088,"搜索树"],[1,16098,"3$¥"],[1,16252,"一个"],[-1,16252,"取了"],[1,16297,"了"],[-1,16297,"\n"],[1,16454,"\n。\n\n"]],[16454,16454],[13149,13149]]],[1528697750214,["Re@Re.local",[[1,16453,"可行走法最多的？读者大可以自己试试。"]],[16453,16453],[16471,16471]]],[1528697750504,["Re@Re.local",[[1,16472,"\n"]],[16471,16471],[16472,16472]]],[1528697750770,["Re@Re.local",[[1,16473,"\n"]],[16472,16472],[16473,16473]]],[1528698104129,[null,[[-1,13149,"\n"],[1,13751,"\n"],[1,13776,"搜索的"],[-1,13819,"K"],[1,13821,"ni"],[-1,13841,"\n"],[-1,13844,"kn\n"],[1,13891,"排序）"],[-1,13895,"徐安娥"],[1,14004,"节点。"],[-1,14011," dd"],[1,14138,"节点C"],[-1,14140,"C"],[-1,14181,"可"],[-1,14196,"成"],[1,15071,"中"],[-1,15103,"略"],[1,15108,"的话"],[-1,15122,"统一"],[1,15460,"棋盘"],[-1,15477,"演示"],[-1,15589,"yi懂"],[1,15592,"合法的"],[-1,15674,"\n"],[1,15786,"\n"],[1,16088,"搜索树"],[-1,16095,"3$¥"],[-1,16252,"一个"],[1,16254,"取了"],[-1,16297,"了"],[1,16298,"\n"],[-1,16474,"\n。\n\n"]],[13149,13149],[16474,16474]]],[1528698104129,[null,[[1,13149,"\n"],[-1,13750,"\n"],[-1,13776,"搜索的"],[1,13822,"K"],[-1,13823,"ni"],[1,13845,"\n"],[1,13847,"kn\n"],[-1,13891,"排序）"],[1,13898,"徐安娥"],[-1,14004,"节点。"],[1,14014," dd"],[-1,14138,"节点C"],[1,14143,"C"],[1,14183,"可"],[1,14197,"成"],[-1,15071,"中"],[1,15104,"略"],[-1,15108,"的话"],[1,15124,"统一"],[-1,15460,"棋盘"],[1,15479,"演示"],[1,15589,"yi懂"],[-1,15589,"合法的"],[1,15674,"\n"],[-1,15785,"\n"],[-1,16088,"搜索树"],[1,16098,"3$¥"],[1,16252,"一个"],[-1,16252,"取了"],[1,16297,"了"],[-1,16297,"\n"],[1,16474,"\n。\n\n"]],[16474,16474],[13149,13149]]],[1528698079071,["Re@Re.local",[[-1,16473,"\n"]],[16473,16473],[0,0]]],[1528698082207,["Re@Re.local",[[-1,16472,"\n"],[1,16473,"w"]],[0,0],[16472,16473]]],[1528698082670,["Re@Re.local",[[-1,16472,"w"]],[16472,16473],[0,0]]],[1528698083132,["Re@Re.local",[[1,16472,"\n\n"]],[16472,16472],[16473,16473]]],[1528698094565,["Re@Re.local",[[-1,16473,"\n"],[1,16474,"在选择下一步顶点时选"]],[16473,16473],[16483,16483]]],[1528698094646,["Re@Re.local",[[-1,16482,"选"]],[16483,16483],[16482,16482]]],[1528698095837,["Re@Re.local",[[1,16482,"采取"]],[16482,16482],[16484,16484]]],[1528698096016,["Re@Re.local",[[-1,16483,"取"]],[16484,16484],[16483,16483]]],[1528698098347,["Re@Re.local",[[1,16483,"y哦那个"]],[16484,16484],[16487,16487]]],[1528698099605,["Re@Re.local",[[-1,16483,"y哦那个"]],[16487,16487],[16483,16483]]],[1528698100956,["Re@Re.local",[[1,16483,"用和"]],[16483,16483],[16485,16485]]],[1528698101014,["Re@Re.local",[[-1,16484,"和"]],[16485,16485],[16484,16484]]],[1528698103735,["Re@Re.local",[[1,16484,"可能合法树"]],[16484,16484],[16489,16489]]],[1528698164179,[null,[[-1,13149,"\n"],[1,13751,"\n"],[1,13776,"搜索的"],[-1,13819,"K"],[1,13821,"ni"],[-1,13841,"\n"],[-1,13844,"kn\n"],[1,13891,"排序）"],[-1,13895,"徐安娥"],[1,14004,"节点。"],[-1,14011," dd"],[1,14138,"节点C"],[-1,14140,"C"],[-1,14181,"可"],[-1,14196,"成"],[1,15071,"中"],[-1,15103,"略"],[1,15108,"的话"],[-1,15122,"统一"],[1,15460,"棋盘"],[-1,15477,"演示"],[-1,15589,"yi懂"],[1,15592,"合法的"],[-1,15674,"\n"],[1,15786,"\n"],[1,16088,"搜索树"],[-1,16095,"3$¥"],[-1,16252,"一个"],[1,16254,"取了"],[-1,16297,"了"],[1,16298,"\n"],[-1,16489,"\n。\n\n"],[1,16493,""]],[13149,13149],[16493,16493]]],[1528698164179,[null,[[1,13149,"\n"],[-1,13750,"\n"],[-1,13776,"搜索的"],[1,13822,"K"],[-1,13823,"ni"],[1,13845,"\n"],[1,13847,"kn\n"],[-1,13891,"排序）"],[1,13898,"徐安娥"],[-1,14004,"节点。"],[1,14014," dd"],[-1,14138,"节点C"],[1,14143,"C"],[1,14183,"可"],[1,14197,"成"],[-1,15071,"中"],[1,15104,"略"],[-1,15108,"的话"],[1,15124,"统一"],[-1,15460,"棋盘"],[1,15479,"演示"],[1,15589,"yi懂"],[-1,15589,"合法的"],[1,15674,"\n"],[-1,15785,"\n"],[-1,16088,"搜索树"],[1,16098,"3$¥"],[1,16252,"一个"],[-1,16252,"取了"],[1,16297,"了"],[-1,16297,"\n"],[1,16489,"\n。\n\n"],[-1,16489,""]],[16493,16493],[13149,13149]]],[1528698105872,["Re@Re.local",[[1,16491,"的那个"]],[16491,16491],[16494,16494]]],[1528698115446,["Re@Re.local",[[1,16476,"路径的"]],[16476,16476],[16479,16479]]],[1528698117444,["Re@Re.local",[[-1,16481,"步"]],[16482,16482],[16481,16481]]],[1528698118268,["Re@Re.local",[[1,16481,"个"]],[16481,16481],[16482,16482]]],[1528698137395,["Re@Re.local",[[1,16497,"会导致的问题是，这样一来，它可能"]],[16497,16497],[16513,16513]]],[1528698138293,["Re@Re.local",[[-1,16511,"可能"]],[16513,16513],[16511,16511]]],[1528698156098,["Re@Re.local",[[1,16511,"会倾向于在早起便"]],[16511,16511],[16519,16519]]],[1528698157171,["Re@Re.local",[[-1,16516,"早起便"]],[16519,16519],[16516,16516]]],[1528698163085,["Re@Re.local",[[1,16516,"早期便访问棋盘的"]],[16516,16516],[16524,16524]]],[1528698224977,[null,[[-1,13149,"\n"],[1,13751,"\n"],[1,13776,"搜索的"],[-1,13819,"K"],[1,13821,"ni"],[-1,13841,"\n"],[-1,13844,"kn\n"],[1,13891,"排序）"],[-1,13895,"徐安娥"],[1,14004,"节点。"],[-1,14011," dd"],[1,14138,"节点C"],[-1,14140,"C"],[-1,14181,"可"],[-1,14196,"成"],[1,15071,"中"],[-1,15103,"略"],[1,15108,"的话"],[-1,15122,"统一"],[1,15460,"棋盘"],[-1,15477,"演示"],[-1,15589,"yi懂"],[1,15592,"合法的"],[-1,15674,"\n"],[1,15786,"\n"],[1,16088,"搜索树"],[-1,16095,"3$¥"],[-1,16252,"一个"],[1,16254,"取了"],[-1,16297,"了"],[1,16298,"\n"],[-1,16492,"\n。"],[1,16494,"最多"],[-1,16524,"\n\n"]],[13149,13149],[16524,16524]]],[1528698224977,[null,[[1,13149,"\n"],[-1,13750,"\n"],[-1,13776,"搜索的"],[1,13822,"K"],[-1,13823,"ni"],[1,13845,"\n"],[1,13847,"kn\n"],[-1,13891,"排序）"],[1,13898,"徐安娥"],[-1,14004,"节点。"],[1,14014," dd"],[-1,14138,"节点C"],[1,14143,"C"],[1,14183,"可"],[1,14197,"成"],[-1,15071,"中"],[1,15104,"略"],[-1,15108,"的话"],[1,15124,"统一"],[-1,15460,"棋盘"],[1,15479,"演示"],[1,15589,"yi懂"],[-1,15589,"合法的"],[1,15674,"\n"],[-1,15785,"\n"],[-1,16088,"搜索树"],[1,16098,"3$¥"],[1,16252,"一个"],[-1,16252,"取了"],[1,16297,"了"],[-1,16297,"\n"],[1,16492,"\n。"],[-1,16492,"最多"],[1,16524,"\n\n"]],[16524,16524],[13149,13149]]],[1528698164660,["Re@Re.local",[[1,16524,"紫红家"]],[16524,16524],[16527,16527]]],[1528698165103,["Re@Re.local",[[-1,16524,"紫红家"]],[16527,16527],[16524,16524]]],[1528698166724,["Re@Re.local",[[1,16524,"中间，"]],[16524,16524],[16527,16527]]],[1528698186985,["Re@Re.local",[[-1,16504,"，这样一来，"]],[16510,16510],[16504,16504]]],[1528698188079,["Re@Re.local",[[1,16504,"，"]],[16504,16504],[16505,16505]]],[1528698189550,["Re@Re.local",[[-1,16505,"它"]],[16506,16506],[16505,16505]]],[1528698195543,["Re@Re.local",[[1,16505,"这样一来该"]],[16505,16505],[16510,16510]]],[1528698196597,["Re@Re.local",[[-1,16505,"这样一来该"]],[16510,16510],[16505,16505]]],[1528698198126,["Re@Re.local",[[1,16505,"这种"]],[16505,16505],[16507,16507]]],[1528698198779,["Re@Re.local",[[-1,16505,"这种"]],[16507,16507],[16505,16505]]],[1528698201608,["Re@Re.local",[[1,16505,"该机制下"]],[16505,16505],[16509,16509]]],[1528698207636,["Re@Re.local",[[1,16525,"而"]],[16525,16525],[16526,16526]]],[1528698207830,["Re@Re.local",[[-1,16525,"而"]],[16526,16526],[16525,16525]]],[1528698211119,["Re@Re.local",[[1,16525,"这样一来，"]],[16525,16525],[16530,16530]]],[1528698404963,[null,[[-1,13149,"\n"],[1,13751,"\n"],[1,13776,"搜索的"],[-1,13819,"K"],[1,13821,"ni"],[-1,13841,"\n"],[-1,13844,"kn\n"],[1,13891,"排序）"],[-1,13895,"徐安娥"],[1,14004,"节点。"],[-1,14011," dd"],[1,14138,"节点C"],[-1,14140,"C"],[-1,14181,"可"],[-1,14196,"成"],[1,15071,"中"],[-1,15103,"略"],[1,15108,"的话"],[-1,15122,"统一"],[1,15460,"棋盘"],[-1,15477,"演示"],[-1,15589,"yi懂"],[1,15592,"合法的"],[-1,15674,"\n"],[1,15786,"\n"],[1,16088,"搜索树"],[-1,16095,"3$¥"],[-1,16252,"一个"],[1,16254,"取了"],[-1,16297,"了"],[1,16298,"\n"],[-1,16492,"\n。"],[1,16494,"最多"],[-1,16530,"\n\n"]],[13149,13149],[16530,16530]]],[1528698404963,[null,[[1,13149,"\n"],[-1,13750,"\n"],[-1,13776,"搜索的"],[1,13822,"K"],[-1,13823,"ni"],[1,13845,"\n"],[1,13847,"kn\n"],[-1,13891,"排序）"],[1,13898,"徐安娥"],[-1,14004,"节点。"],[1,14014," dd"],[-1,14138,"节点C"],[1,14143,"C"],[1,14183,"可"],[1,14197,"成"],[-1,15071,"中"],[1,15104,"略"],[-1,15108,"的话"],[1,15124,"统一"],[-1,15460,"棋盘"],[1,15479,"演示"],[1,15589,"yi懂"],[-1,15589,"合法的"],[1,15674,"\n"],[-1,15785,"\n"],[-1,16088,"搜索树"],[1,16098,"3$¥"],[1,16252,"一个"],[-1,16252,"取了"],[1,16297,"了"],[-1,16297,"\n"],[1,16492,"\n。"],[-1,16492,"最多"],[1,16530,"\n\n"]],[16530,16530],[13149,13149]]],[1528698390184,["Re@Re.local",[[1,16530,"qishiqi shi"]],[16530,16530],[16535,16535]]],[1528698398113,["Re@Re.local",[[-1,16530,"qishiqi shi"]],[16541,16541],[16530,16530]]],[1528698399268,["Re@Re.local",[[1,16530,"w"]],[16530,16530],[16531,16531]]],[1528698399545,["Re@Re.local",[[-1,16530,"w"]],[16531,16531],[16530,16530]]],[1528698400888,["Re@Re.local",[[1,16530,"其实"]],[16530,16530],[16532,16532]]],[1528698401371,["Re@Re.local",[[-1,16530,"其实"]],[16532,16532],[16530,16530]]],[1528698464969,[null,[[-1,13149,"\n"],[1,13751,"\n"],[1,13776,"搜索的"],[-1,13819,"K"],[1,13821,"ni"],[-1,13841,"\n"],[-1,13844,"kn\n"],[1,13891,"排序）"],[-1,13895,"徐安娥"],[1,14004,"节点。"],[-1,14011," dd"],[1,14138,"节点C"],[-1,14140,"C"],[-1,14181,"可"],[-1,14196,"成"],[1,15071,"中"],[-1,15103,"略"],[1,15108,"的话"],[-1,15122,"统一"],[1,15460,"棋盘"],[-1,15477,"演示"],[-1,15589,"yi懂"],[1,15592,"合法的"],[-1,15674,"\n"],[1,15786,"\n"],[1,16088,"搜索树"],[-1,16095,"3$¥"],[-1,16252,"一个"],[1,16254,"取了"],[-1,16297,"了"],[1,16298,"\n"],[-1,16492,"\n。"],[1,16494,"最多"],[-1,16530,"\n\n"]],[13149,13149],[16530,16530]]],[1528698464969,[null,[[1,13149,"\n"],[-1,13750,"\n"],[-1,13776,"搜索的"],[1,13822,"K"],[-1,13823,"ni"],[1,13845,"\n"],[1,13847,"kn\n"],[-1,13891,"排序）"],[1,13898,"徐安娥"],[-1,14004,"节点。"],[1,14014," dd"],[-1,14138,"节点C"],[1,14143,"C"],[1,14183,"可"],[1,14197,"成"],[-1,15071,"中"],[1,15104,"略"],[-1,15108,"的话"],[1,15124,"统一"],[-1,15460,"棋盘"],[1,15479,"演示"],[1,15589,"yi懂"],[-1,15589,"合法的"],[1,15674,"\n"],[-1,15785,"\n"],[-1,16088,"搜索树"],[1,16098,"3$¥"],[1,16252,"一个"],[-1,16252,"取了"],[1,16297,"了"],[-1,16297,"\n"],[1,16492,"\n。"],[-1,16492,"最多"],[1,16530,"\n\n"]],[16530,16530],[13149,13149]]],[1528698437595,["Re@Re.local",[[1,16530,"骑士很容易会困在棋盘的一侧而不能访问棋盘另一侧的"]],[16530,16530],[16554,16554]]],[1528698446009,["Re@Re.local",[[-1,16553,"的"]],[16554,16554],[16553,16553]]],[1528698451419,["Re@Re.local",[[1,16553,"中为放"]],[16553,16553],[16556,16556]]],[1528698451702,["Re@Re.local",[[-1,16554,"为放"]],[16556,16556],[16554,16554]]],[1528698455093,["Re@Re.local",[[1,16554,"未访问的节点。"]],[16554,16554],[16561,16561]]],[1528698456273,["Re@Re.local",[[-1,16558,"节点。"]],[16561,16561],[16558,16558]]],[1528698464056,["Re@Re.local",[[1,16558,"方格。而如果采用"]],[16558,16558],[16566,16566]]],[1528698525115,[null,[[-1,13149,"\n"],[1,13751,"\n"],[1,13776,"搜索的"],[-1,13819,"K"],[1,13821,"ni"],[-1,13841,"\n"],[-1,13844,"kn\n"],[1,13891,"排序）"],[-1,13895,"徐安娥"],[1,14004,"节点。"],[-1,14011," dd"],[1,14138,"节点C"],[-1,14140,"C"],[-1,14181,"可"],[-1,14196,"成"],[1,15071,"中"],[-1,15103,"略"],[1,15108,"的话"],[-1,15122,"统一"],[1,15460,"棋盘"],[-1,15477,"演示"],[-1,15589,"yi懂"],[1,15592,"合法的"],[-1,15674,"\n"],[1,15786,"\n"],[1,16088,"搜索树"],[-1,16095,"3$¥"],[-1,16252,"一个"],[1,16254,"取了"],[-1,16297,"了"],[1,16298,"\n"],[-1,16492,"\n。"],[1,16494,"最多"],[-1,16566,"\n\n"]],[13149,13149],[16566,16566]]],[1528698525116,[null,[[1,13149,"\n"],[-1,13750,"\n"],[-1,13776,"搜索的"],[1,13822,"K"],[-1,13823,"ni"],[1,13845,"\n"],[1,13847,"kn\n"],[-1,13891,"排序）"],[1,13898,"徐安娥"],[-1,14004,"节点。"],[1,14014," dd"],[-1,14138,"节点C"],[1,14143,"C"],[1,14183,"可"],[1,14197,"成"],[-1,15071,"中"],[1,15104,"略"],[-1,15108,"的话"],[1,15124,"统一"],[-1,15460,"棋盘"],[1,15479,"演示"],[1,15589,"yi懂"],[-1,15589,"合法的"],[1,15674,"\n"],[-1,15785,"\n"],[-1,16088,"搜索树"],[1,16098,"3$¥"],[1,16252,"一个"],[-1,16252,"取了"],[1,16297,"了"],[-1,16297,"\n"],[1,16492,"\n。"],[-1,16492,"最多"],[1,16566,"\n\n"]],[16566,16566],[13149,13149]]],[1528698465601,["Re@Re.local",[[1,16566,"最傻"]],[16566,16566],[16568,16568]]],[1528698465649,["Re@Re.local",[[-1,16567,"傻"]],[16568,16568],[16567,16567]]],[1528698467057,["Re@Re.local",[[-1,16491,"树"]],[16492,16492],[16491,16491]]],[1528698468620,["Re@Re.local",[[1,16491,"数"]],[16491,16491],[16492,16492]]],[1528698469971,["Re@Re.local",[[-1,16566,"最"]],[16567,16567],[16566,16566]]],[1528698491580,["Re@Re.local",[[1,16566,"合法数最少的那个，则将骑士"]],[16566,16566],[16579,16579]]],[1528698499984,["Re@Re.local",[[-1,16575,"则将骑士"]],[16579,16579],[16575,16575]]],[1528698502200,["Re@Re.local",[[1,16575,"则要"]],[16575,16575],[16577,16577]]],[1528698502321,["Re@Re.local",[[-1,16576,"要"]],[16577,16577],[16576,16576]]],[1528698510965,["Re@Re.local",[[1,16576,"强迫其实首先访问节点"]],[16576,16576],[16586,16586]]],[1528698511551,["Re@Re.local",[[-1,16584,"节点"]],[16586,16586],[16584,16584]]],[1528698512037,["Re@Re.local",[[1,16584,"接"]],[16584,16584],[16585,16585]]],[1528698512181,["Re@Re.local",[[-1,16584,"接"]],[16585,16585],[16584,16584]]],[1528698518780,["Re@Re.local",[[1,16584,"棋盘的边缘，这样一来，其实"]],[16584,16584],[16597,16597]]],[1528698522290,["Re@Re.local",[[-1,16595,"其实"]],[16597,16597],[16595,16595]]],[1528698524494,["Re@Re.local",[[1,16595,"骑士一开始"]],[16595,16595],[16600,16600]]],[1528698585033,[null,[[-1,13149,"\n"],[1,13751,"\n"],[1,13776,"搜索的"],[-1,13819,"K"],[1,13821,"ni"],[-1,13841,"\n"],[-1,13844,"kn\n"],[1,13891,"排序）"],[-1,13895,"徐安娥"],[1,14004,"节点。"],[-1,14011," dd"],[1,14138,"节点C"],[-1,14140,"C"],[-1,14181,"可"],[-1,14196,"成"],[1,15071,"中"],[-1,15103,"略"],[1,15108,"的话"],[-1,15122,"统一"],[1,15460,"棋盘"],[-1,15477,"演示"],[-1,15589,"yi懂"],[1,15592,"合法的"],[-1,15674,"\n"],[1,15786,"\n"],[1,16088,"搜索树"],[-1,16095,"3$¥"],[-1,16252,"一个"],[1,16254,"取了"],[-1,16297,"了"],[1,16298,"\n"],[-1,16492,"\n。"],[1,16494,"最多"],[-1,16600,"\n\n"]],[13149,13149],[16600,16600]]],[1528698585034,[null,[[1,13149,"\n"],[-1,13750,"\n"],[-1,13776,"搜索的"],[1,13822,"K"],[-1,13823,"ni"],[1,13845,"\n"],[1,13847,"kn\n"],[-1,13891,"排序）"],[1,13898,"徐安娥"],[-1,14004,"节点。"],[1,14014," dd"],[-1,14138,"节点C"],[1,14143,"C"],[1,14183,"可"],[1,14197,"成"],[-1,15071,"中"],[1,15104,"略"],[-1,15108,"的话"],[1,15124,"统一"],[-1,15460,"棋盘"],[1,15479,"演示"],[1,15589,"yi懂"],[-1,15589,"合法的"],[1,15674,"\n"],[-1,15785,"\n"],[-1,16088,"搜索树"],[1,16098,"3$¥"],[1,16252,"一个"],[-1,16252,"取了"],[1,16297,"了"],[-1,16297,"\n"],[1,16492,"\n。"],[-1,16492,"最多"],[1,16600,"\n\n"]],[16600,16600],[13149,13149]]],[1528698539907,["Re@Re.local",[[1,16600,"便访问了\"很难达到\"的角落"]],[16600,16600],[16613,16613]]],[1528698644987,[null,[[-1,13149,"\n"],[1,13751,"\n"],[1,13776,"搜索的"],[-1,13819,"K"],[1,13821,"ni"],[-1,13841,"\n"],[-1,13844,"kn\n"],[1,13891,"排序）"],[-1,13895,"徐安娥"],[1,14004,"节点。"],[-1,14011," dd"],[1,14138,"节点C"],[-1,14140,"C"],[-1,14181,"可"],[-1,14196,"成"],[1,15071,"中"],[-1,15103,"略"],[1,15108,"的话"],[-1,15122,"统一"],[1,15460,"棋盘"],[-1,15477,"演示"],[-1,15589,"yi懂"],[1,15592,"合法的"],[-1,15674,"\n"],[1,15786,"\n"],[1,16088,"搜索树"],[-1,16095,"3$¥"],[-1,16252,"一个"],[1,16254,"取了"],[-1,16297,"了"],[1,16298,"\n"],[-1,16492,"\n。"],[1,16494,"最多"],[-1,16613,"\n\n"]],[13149,13149],[16613,16613]]],[1528698644987,[null,[[1,13149,"\n"],[-1,13750,"\n"],[-1,13776,"搜索的"],[1,13822,"K"],[-1,13823,"ni"],[1,13845,"\n"],[1,13847,"kn\n"],[-1,13891,"排序）"],[1,13898,"徐安娥"],[-1,14004,"节点。"],[1,14014," dd"],[-1,14138,"节点C"],[1,14143,"C"],[1,14183,"可"],[1,14197,"成"],[-1,15071,"中"],[1,15104,"略"],[-1,15108,"的话"],[1,15124,"统一"],[-1,15460,"棋盘"],[1,15479,"演示"],[1,15589,"yi懂"],[-1,15589,"合法的"],[1,15674,"\n"],[-1,15785,"\n"],[-1,16088,"搜索树"],[1,16098,"3$¥"],[1,16252,"一个"],[-1,16252,"取了"],[1,16297,"了"],[-1,16297,"\n"],[1,16492,"\n。"],[-1,16492,"最多"],[1,16613,"\n\n"]],[16613,16613],[13149,13149]]],[1528698606005,["Re@Re.local",[[1,16613,"，然后便可以shying"]],[16613,16613],[16625,16625]]],[1528698607609,["Re@Re.local",[[-1,16619,"shying"]],[16625,16625],[16619,16619]]],[1528698614744,["Re@Re.local",[[1,16619,"利用中间的方格来沟通"]],[16619,16619],[16629,16629]]],[1528698615659,["Re@Re.local",[[-1,16627,"沟通"]],[16629,16629],[16627,16627]]],[1528698620739,["Re@Re.local",[[1,16627,"哼"]],[16627,16627],[16628,16628]]],[1528698620879,["Re@Re.local",[[-1,16627,"哼"]],[16628,16628],[16627,16627]]],[1528698635764,["Re@Re.local",[[1,16616,"在有必要时"]],[16616,16616],[16621,16621]]],[1528698638430,["Re@Re.local",[[-1,16621,"便可以"]],[16624,16624],[16621,16621]]],[1528698642062,["Re@Re.local",[[1,16629,"达到"]],[16629,16629],[16631,16631]]],[1528698643542,["Re@Re.local",[[-1,16629,"达到"]],[16631,16631],[16629,16629]]],[1528698705750,[null,[[-1,13149,"\n"],[1,13751,"\n"],[1,13776,"搜索的"],[-1,13819,"K"],[1,13821,"ni"],[-1,13841,"\n"],[-1,13844,"kn\n"],[1,13891,"排序）"],[-1,13895,"徐安娥"],[1,14004,"节点。"],[-1,14011," dd"],[1,14138,"节点C"],[-1,14140,"C"],[-1,14181,"可"],[-1,14196,"成"],[1,15071,"中"],[-1,15103,"略"],[1,15108,"的话"],[-1,15122,"统一"],[1,15460,"棋盘"],[-1,15477,"演示"],[-1,15589,"yi懂"],[1,15592,"合法的"],[-1,15674,"\n"],[1,15786,"\n"],[1,16088,"搜索树"],[-1,16095,"3$¥"],[-1,16252,"一个"],[1,16254,"取了"],[-1,16297,"了"],[1,16298,"\n"],[-1,16492,"\n。"],[1,16494,"最多"],[-1,16629,"\n\n"]],[13149,13149],[16629,16629]]],[1528698705750,[null,[[1,13149,"\n"],[-1,13750,"\n"],[-1,13776,"搜索的"],[1,13822,"K"],[-1,13823,"ni"],[1,13845,"\n"],[1,13847,"kn\n"],[-1,13891,"排序）"],[1,13898,"徐安娥"],[-1,14004,"节点。"],[1,14014," dd"],[-1,14138,"节点C"],[1,14143,"C"],[1,14183,"可"],[1,14197,"成"],[-1,15071,"中"],[1,15104,"略"],[-1,15108,"的话"],[1,15124,"统一"],[-1,15460,"棋盘"],[1,15479,"演示"],[1,15589,"yi懂"],[-1,15589,"合法的"],[1,15674,"\n"],[-1,15785,"\n"],[-1,16088,"搜索树"],[1,16098,"3$¥"],[1,16252,"一个"],[-1,16252,"取了"],[1,16297,"了"],[-1,16297,"\n"],[1,16492,"\n。"],[-1,16492,"最多"],[1,16629,"\n\n"]],[16629,16629],[13149,13149]]],[1528698647136,["Re@Re.local",[[1,16629,"在="]],[16629,16629],[16631,16631]]],[1528698647758,["Re@Re.local",[[-1,16629,"在="]],[16631,16631],[16629,16629]]],[1528698650736,["Re@Re.local",[[1,16629,"达到另一侧"]],[16629,16629],[16634,16634]]],[1528698651153,["Re@Re.local",[[-1,16631,"另一侧"]],[16634,16634],[16631,16631]]],[1528698672456,["Re@Re.local",[[1,16631,"棋盘的另一侧。利用这种知识来计算"]],[16631,16631],[16647,16647]]],[1528698672952,["Re@Re.local",[[-1,16645,"计算"]],[16647,16647],[16645,16645]]],[1528698677815,["Re@Re.local",[[1,16645,"加速算法被称为“"]],[16645,16645],[16653,16653]]],[1528698678438,["Re@Re.local",[[-1,16652,"“"]],[16653,16653],[16652,16652]]],[1528698679110,["Re@Re.local",[[1,16652,"\"\""]],[16652,16652],[16654,16654]]],[1528698686584,["Re@Re.local",[[1,16653,"启发式"]],[16653,16653],[16656,16656]]],[1528698692509,["Re@Re.local",[[1,16657,"算法。人类可以"]],[16657,16657],[16664,16664]]],[1528698692921,["Re@Re.local",[[-1,16662,"可以"]],[16664,16664],[16662,16662]]],[1528698765732,[null,[[-1,13149,"\n"],[1,13751,"\n"],[1,13776,"搜索的"],[-1,13819,"K"],[1,13821,"ni"],[-1,13841,"\n"],[-1,13844,"kn\n"],[1,13891,"排序）"],[-1,13895,"徐安娥"],[1,14004,"节点。"],[-1,14011," dd"],[1,14138,"节点C"],[-1,14140,"C"],[-1,14181,"可"],[-1,14196,"成"],[1,15071,"中"],[-1,15103,"略"],[1,15108,"的话"],[-1,15122,"统一"],[1,15460,"棋盘"],[-1,15477,"演示"],[-1,15589,"yi懂"],[1,15592,"合法的"],[-1,15674,"\n"],[1,15786,"\n"],[1,16088,"搜索树"],[-1,16095,"3$¥"],[-1,16252,"一个"],[1,16254,"取了"],[-1,16297,"了"],[1,16298,"\n"],[-1,16492,"\n。"],[1,16494,"最多"],[-1,16662,"\n\n"]],[13149,13149],[16662,16662]]],[1528698765732,[null,[[1,13149,"\n"],[-1,13750,"\n"],[-1,13776,"搜索的"],[1,13822,"K"],[-1,13823,"ni"],[1,13845,"\n"],[1,13847,"kn\n"],[-1,13891,"排序）"],[1,13898,"徐安娥"],[-1,14004,"节点。"],[1,14014," dd"],[-1,14138,"节点C"],[1,14143,"C"],[1,14183,"可"],[1,14197,"成"],[-1,15071,"中"],[1,15104,"略"],[-1,15108,"的话"],[1,15124,"统一"],[-1,15460,"棋盘"],[1,15479,"演示"],[1,15589,"yi懂"],[-1,15589,"合法的"],[1,15674,"\n"],[-1,15785,"\n"],[-1,16088,"搜索树"],[1,16098,"3$¥"],[1,16252,"一个"],[-1,16252,"取了"],[1,16297,"了"],[-1,16297,"\n"],[1,16492,"\n。"],[-1,16492,"最多"],[1,16662,"\n\n"]],[16662,16662],[13149,13149]]],[1528698708785,["Re@Re.local",[[1,16662,"每条"]],[16662,16662],[16664,16664]]],[1528698709383,["Re@Re.local",[[-1,16662,"每条"]],[16664,16664],[16662,16662]]],[1528698726775,["Re@Re.local",[[1,16662,"日常中也是利用启发式规则来作出各种觉得点"]],[16662,16662],[16682,16682]]],[1528698727326,["Re@Re.local",[[-1,16679,"觉得点"]],[16682,16682],[16679,16679]]],[1528698742418,["Re@Re.local",[[1,16679,"决定的，启发式搜索常常用于AI领域。本次"]],[16679,16679],[16699,16699]]],[1528698742875,["Re@Re.local",[[-1,16698,"次"]],[16699,16699],[16698,16698]]],[1528698748407,["Re@Re.local",[[1,16698,"例子"]],[16698,16698],[16700,16700]]],[1528698748489,["Re@Re.local",[[-1,16699,"子"]],[16700,16700],[16699,16699]]],[1528698759198,["Re@Re.local",[[1,16699,"使用的启发式算法被称为Warnsdorff算法，"]],[16699,16699],[16723,16723]]],[1528698761300,["Re@Re.local",[[-1,16722,"，"]],[16723,16723],[16722,16722]]],[1528698761621,["Re@Re.local",[[1,16722,"。"]],[16722,16722],[16723,16723]]],[1528698762032,["Re@Re.local",[[1,16723,"\n\n"]],[16723,16723],[16724,16724]]],[1528698762274,["Re@Re.local",[[1,16725,"\n"]],[16724,16724],[16725,16725]]],[1528698765330,["Re@Re.local",[[-1,16725,"\n"],[1,16726,"**代码4**"]],[16725,16725],[16732,16732]]],[1528698825720,[null,[[-1,13149,"\n"],[1,13751,"\n"],[1,13776,"搜索的"],[-1,13819,"K"],[1,13821,"ni"],[-1,13841,"\n"],[-1,13844,"kn\n"],[1,13891,"排序）"],[-1,13895,"徐安娥"],[1,14004,"节点。"],[-1,14011," dd"],[1,14138,"节点C"],[-1,14140,"C"],[-1,14181,"可"],[-1,14196,"成"],[1,15071,"中"],[-1,15103,"略"],[1,15108,"的话"],[-1,15122,"统一"],[1,15460,"棋盘"],[-1,15477,"演示"],[-1,15589,"yi懂"],[1,15592,"合法的"],[-1,15677,"\n"],[1,15786,"\n"],[1,16088,"搜索树"],[-1,16095,"3$¥"],[-1,16252,"一个"],[1,16254,"取了"],[-1,16297,"了"],[1,16298,"\n"],[-1,16492,"\n。"],[1,16494,"最多"],[-1,16732,"\n\n"]],[13149,13149],[16732,16732]]],[1528698825720,[null,[[1,13149,"\n"],[-1,13750,"\n"],[-1,13776,"搜索的"],[1,13822,"K"],[-1,13823,"ni"],[1,13845,"\n"],[1,13847,"kn\n"],[-1,13891,"排序）"],[1,13898,"徐安娥"],[-1,14004,"节点。"],[1,14014," dd"],[-1,14138,"节点C"],[1,14143,"C"],[1,14183,"可"],[1,14197,"成"],[-1,15071,"中"],[1,15104,"略"],[-1,15108,"的话"],[1,15124,"统一"],[-1,15460,"棋盘"],[1,15479,"演示"],[1,15589,"yi懂"],[-1,15589,"合法的"],[1,15677,"\n"],[-1,15785,"\n"],[-1,16088,"搜索树"],[1,16098,"3$¥"],[1,16252,"一个"],[-1,16252,"取了"],[1,16297,"了"],[-1,16297,"\n"],[1,16492,"\n。"],[-1,16492,"最多"],[1,16732,"\n\n"]],[16732,16732],[13149,13149]]],[1528698766353,["Re@Re.local",[[1,16732,"\n\n"]],[16732,16732],[16733,16733]]],[1528698769652,["Re@Re.local",[[-1,16733,"\n"],[1,16734,"```Pythion"]],[16733,16733],[16743,16743]]],[1528698770496,["Re@Re.local",[[-1,16740,"ion"]],[16743,16743],[16740,16740]]],[1528698771065,["Re@Re.local",[[1,16740,"on"]],[16740,16740],[16742,16742]]],[1528698778246,["Re@Re.local",[[1,16742,"\n\ndef orderByAvail(n):\n    resList = []\n    for v in n.getConnections():\n        if v.getColor() == 'white':\n            c = 0\n            for w in v.getConnections():\n                if w.getColor() == 'white':\n                    c = c + 1\n            resList.append((c,v))\n    resList.sort(key=lambda x: x[0])\n    return [y[1] for y in resList]"]],[16742,16742],[17088,17088]]],[1528698780148,["Re@Re.local",[[-1,17088,"\n"],[1,17089,"```"]],[17088,17088],[17091,17091]]],[1528698781212,["Re@Re.local",[[-1,17088,"```"]],[17091,17091],[17088,17088]]],[1528698781516,["Re@Re.local",[[1,17088,"\n\n"]],[17088,17088],[17089,17089]]],[1528698782146,["Re@Re.local",[[-1,17089,"\n"],[1,17090,"```"]],[17089,17089],[17092,17092]]],[1528698782391,["Re@Re.local",[[1,17092,"\n\n"]],[17092,17092],[17093,17093]]],[1528698782849,["Re@Re.local",[[1,17094,"\n"]],[17093,17093],[17094,17094]]],[1528698783676,["Re@Re.local",[[-1,17094,"\n"]],[17094,17094],[17093,17093]]],[1528698796154,["Re@Re.local",[[-1,17093,"\n"],[1,17094,"## 7.15 通用深度搜索 ##"]],[17093,17093],[17110,17110]]],[1528698796357,["Re@Re.local",[[1,17110,"\n\n"]],[17110,17110],[17111,17111]]],[1528698796629,["Re@Re.local",[[1,17112,"\n"]],[17111,17111],[17112,17112]]],[1528698804356,["Re@Re.local",[[-1,17112,"\n"],[1,17113,"骑士周游上课DFS算法"]],[17112,17112],[17123,17123]]],[1528698804951,["Re@Re.local",[[-1,17121,"算法"]],[17123,17123],[17121,17121]]],[1528698805584,["Re@Re.local",[[1,17121,"搜"]],[17121,17121],[17122,17122]]],[1528698805777,["Re@Re.local",[[-1,17121,"搜"]],[17122,17122],[17121,17121]]],[1528698807949,["Re@Re.local",[[1,17121,"的"]],[17121,17121],[17122,17122]]],[1528698810088,["Re@Re.local",[[-1,17116,"上课DFS的"]],[17122,17122],[17116,17116]]],[1528698815833,["Re@Re.local",[[1,17116,"是DFS的1个特里，"]],[17116,17116],[17126,17126]]],[1528698816541,["Re@Re.local",[[-1,17123,"特里，"]],[17126,17126],[17123,17123]]],[1528698821120,["Re@Re.local",[[1,17123,"特例。"]],[17123,17123],[17126,17126]]],[1528698823256,["Re@Re.local",[[-1,17125,"。"]],[17126,17126],[17125,17125]]],[1528698823940,["Re@Re.local",[[1,17125,"，"]],[17125,17125],[17126,17126]]],[1528698885814,[null,[[-1,13149,"\n"],[1,13751,"\n"],[1,13776,"搜索的"],[-1,13819,"K"],[1,13821,"ni"],[-1,13841,"\n"],[-1,13844,"kn\n"],[1,13891,"排序）"],[-1,13895,"徐安娥"],[1,14004,"节点。"],[-1,14011," dd"],[1,14138,"节点C"],[-1,14140,"C"],[-1,14181,"可"],[-1,14196,"成"],[1,15071,"中"],[-1,15103,"略"],[1,15108,"的话"],[-1,15122,"统一"],[1,15460,"棋盘"],[-1,15477,"演示"],[-1,15589,"yi懂"],[1,15592,"合法的"],[-1,15674,"\n"],[1,15786,"\n"],[1,16088,"搜索树"],[-1,16095,"3$¥"],[-1,16252,"一个"],[1,16254,"取了"],[-1,16297,"了"],[1,16298,"\n"],[-1,16492,"\n。"],[1,16494,"最多"],[-1,16743,"\n"],[-1,17088,""],[1,17088,"]"],[-1,17126,"\n\n"],[1,17128,""]],[13149,13149],[17128,17128]]],[1528698885814,[null,[[1,13149,"\n"],[-1,13750,"\n"],[-1,13776,"搜索的"],[1,13822,"K"],[-1,13823,"ni"],[1,13845,"\n"],[1,13847,"kn\n"],[-1,13891,"排序）"],[1,13898,"徐安娥"],[-1,14004,"节点。"],[1,14014," dd"],[-1,14138,"节点C"],[1,14143,"C"],[1,14183,"可"],[1,14197,"成"],[-1,15071,"中"],[1,15104,"略"],[-1,15108,"的话"],[1,15124,"统一"],[-1,15460,"棋盘"],[1,15479,"演示"],[1,15589,"yi懂"],[-1,15589,"合法的"],[1,15674,"\n"],[-1,15785,"\n"],[-1,16088,"搜索树"],[1,16098,"3$¥"],[1,16252,"一个"],[-1,16252,"取了"],[1,16297,"了"],[-1,16297,"\n"],[1,16492,"\n。"],[-1,16492,"最多"],[1,16743,"\n"],[1,17087,""],[-1,17087,"]"],[1,17126,"\n\n"],[-1,17126,""]],[17128,17128],[13149,13149]]],[1528698829367,["Re@Re.local",[[1,17126,"它的木笔啊"]],[17126,17126],[17131,17131]]],[1528698830833,["Re@Re.local",[[-1,17128,"木笔啊"]],[17131,17131],[17128,17128]]],[1528698851326,["Re@Re.local",[[1,17128,"目标是生成深度深度"]],[17128,17128],[17137,17137]]],[1528698851582,["Re@Re.local",[[-1,17135,"深度"]],[17137,17137],[17135,17135]]],[1528698865383,["Re@Re.local",[[1,17135,"最大且无分枝的树。更通用的深度搜索"]],[17135,17135],[17152,17152]]],[1528698865640,["Re@Re.local",[[-1,17150,"搜索"]],[17152,17152],[17150,17150]]],[1528698868703,["Re@Re.local",[[1,17150,"优先搜索的"]],[17150,17150],[17155,17155]]],[1528698869486,["Re@Re.local",[[-1,17154,"的"]],[17155,17155],[17154,17154]]],[1528698872306,["Re@Re.local",[[1,17154,"要见"]],[17154,17154],[17156,17156]]],[1528698872577,["Re@Re.local",[[-1,17154,"要见"]],[17156,17156],[17154,17154]]],[1528698885197,["Re@Re.local",[[1,17154,"实际上还要简单一点。它的目标是尽可能深地"]],[17154,17154],[17174,17174]]],[1528698945752,[null,[[-1,13149,"\n"],[1,13751,"\n"],[1,13776,"搜索的"],[-1,13819,"K"],[1,13821,"ni"],[-1,13841,"\n"],[-1,13844,"kn\n"],[1,13891,"排序）"],[-1,13895,"徐安娥"],[1,14004,"节点。"],[-1,14011," dd"],[1,14138,"节点C"],[-1,14140,"C"],[-1,14181,"可"],[-1,14196,"成"],[1,15071,"中"],[-1,15103,"略"],[1,15108,"的话"],[-1,15122,"统一"],[1,15460,"棋盘"],[-1,15477,"演示"],[-1,15589,"yi懂"],[1,15592,"合法的"],[-1,15674,"\n"],[1,15786,"\n"],[1,16088,"搜索树"],[-1,16095,"3$¥"],[-1,16252,"一个"],[1,16254,"取了"],[-1,16297,"了"],[1,16298,"\n"],[-1,16492,"\n。"],[1,16494,"最多"],[-1,16743,"\n"],[1,17088,"]"],[-1,17174,"\n\n"]],[13149,13149],[17174,17174]]],[1528698945753,[null,[[1,13149,"\n"],[-1,13750,"\n"],[-1,13776,"搜索的"],[1,13822,"K"],[-1,13823,"ni"],[1,13845,"\n"],[1,13847,"kn\n"],[-1,13891,"排序）"],[1,13898,"徐安娥"],[-1,14004,"节点。"],[1,14014," dd"],[-1,14138,"节点C"],[1,14143,"C"],[1,14183,"可"],[1,14197,"成"],[-1,15071,"中"],[1,15104,"略"],[-1,15108,"的话"],[1,15124,"统一"],[-1,15460,"棋盘"],[1,15479,"演示"],[1,15589,"yi懂"],[-1,15589,"合法的"],[1,15674,"\n"],[-1,15785,"\n"],[-1,16088,"搜索树"],[1,16098,"3$¥"],[1,16252,"一个"],[-1,16252,"取了"],[1,16297,"了"],[-1,16297,"\n"],[1,16492,"\n。"],[-1,16492,"最多"],[1,16743,"\n"],[-1,17087,"]"],[1,17174,"\n\n"]],[17174,17174],[13149,13149]]],[1528698909188,["Re@Re.local",[[1,17174,"对树进行搜索，连接图中尽可能多的顶点并且在必要时进行分枝。"]],[17174,17174],[17203,17203]]],[1528698909389,["Re@Re.local",[[1,17203,"\n\n"]],[17203,17203],[17204,17204]]],[1528698909593,["Re@Re.local",[[1,17205,"\n"]],[17204,17204],[17205,17205]]],[1528700086015,[null,[[-1,13149,"\n"],[1,13751,"\n"],[1,13776,"搜索的"],[-1,13819,"K"],[1,13821,"ni"],[-1,13841,"\n"],[-1,13844,"kn\n"],[1,13891,"排序）"],[-1,13895,"徐安娥"],[1,14004,"节点。"],[-1,14011," dd"],[1,14138,"节点C"],[-1,14140,"C"],[-1,14181,"可"],[-1,14196,"成"],[1,15071,"中"],[-1,15103,"略"],[1,15108,"的话"],[-1,15122,"统一"],[1,15460,"棋盘"],[-1,15477,"演示"],[-1,15589,"yi懂"],[1,15592,"合法的"],[-1,15674,"\n"],[1,15786,"\n"],[1,16088,"搜索树"],[-1,16095,"3$¥"],[-1,16252,"一个"],[1,16254,"取了"],[-1,16297,"了"],[1,16298,"\n"],[-1,16492,"\n。"],[1,16494,"最多"],[-1,16743,"\n"],[1,17088,"]"],[-1,17203,"\n\n"]],[13149,13149],[17203,17203]]],[1528700086015,[null,[[1,13149,"\n"],[-1,13750,"\n"],[-1,13776,"搜索的"],[1,13822,"K"],[-1,13823,"ni"],[1,13845,"\n"],[1,13847,"kn\n"],[-1,13891,"排序）"],[1,13898,"徐安娥"],[-1,14004,"节点。"],[1,14014," dd"],[-1,14138,"节点C"],[1,14143,"C"],[1,14183,"可"],[1,14197,"成"],[-1,15071,"中"],[1,15104,"略"],[-1,15108,"的话"],[1,15124,"统一"],[-1,15460,"棋盘"],[1,15479,"演示"],[1,15589,"yi懂"],[-1,15589,"合法的"],[1,15674,"\n"],[-1,15785,"\n"],[-1,16088,"搜索树"],[1,16098,"3$¥"],[1,16252,"一个"],[-1,16252,"取了"],[1,16297,"了"],[-1,16297,"\n"],[1,16492,"\n。"],[-1,16492,"最多"],[1,16743,"\n"],[-1,17087,"]"],[1,17203,"\n\n"]],[17203,17203],[13149,13149]]],[1528700041012,["Re@Re.local",[[-1,17205,"\n"],[1,17206,"深度优先搜索也要"]],[17205,17205],[17213,17213]]],[1528700041366,["Re@Re.local",[[-1,17211,"也要"]],[17213,17213],[17211,17211]]],[1528700048597,["Re@Re.local",[[1,17211,"甚至可能创建多棵数据"]],[17211,17211],[17221,17221]]],[1528700048893,["Re@Re.local",[[-1,17219,"数据"]],[17221,17221],[17219,17219]]],[1528700071896,["Re@Re.local",[[1,17219,"树。当深度优先搜索算法生成了一组树时，这组树被称为"]],[17219,17219],[17244,17244]]],[1528700080331,["Re@Re.local",[[-1,17238,"这组树被称为"]],[17244,17244],[17238,17238]]],[1528700084733,["Re@Re.local",[[1,17238,"便称之为"]],[17238,17238],[17242,17242]]],[1528700145886,[null,[[-1,13149,"\n"],[1,13751,"\n"],[1,13776,"搜索的"],[-1,13819,"K"],[1,13821,"ni"],[-1,13841,"\n"],[-1,13844,"kn\n"],[1,13891,"排序）"],[-1,13895,"徐安娥"],[1,14004,"节点。"],[-1,14011," dd"],[1,14138,"节点C"],[-1,14140,"C"],[-1,14181,"可"],[-1,14196,"成"],[1,15071,"中"],[-1,15103,"略"],[1,15108,"的话"],[-1,15122,"统一"],[1,15460,"棋盘"],[-1,15477,"演示"],[-1,15589,"yi懂"],[1,15592,"合法的"],[-1,15674,"\n"],[1,15786,"\n"],[1,16088,"搜索树"],[-1,16095,"3$¥"],[-1,16252,"一个"],[1,16254,"取了"],[-1,16297,"了"],[1,16298,"\n"],[-1,16492,"\n。"],[1,16494,"最多"],[-1,16743,"\n"],[-1,17088,""],[1,17088,"]"],[-1,17242,"\n\n"],[1,17244,""]],[13149,13149],[17244,17244]]],[1528700145886,[null,[[1,13149,"\n"],[-1,13750,"\n"],[-1,13776,"搜索的"],[1,13822,"K"],[-1,13823,"ni"],[1,13845,"\n"],[1,13847,"kn\n"],[-1,13891,"排序）"],[1,13898,"徐安娥"],[-1,14004,"节点。"],[1,14014," dd"],[-1,14138,"节点C"],[1,14143,"C"],[1,14183,"可"],[1,14197,"成"],[-1,15071,"中"],[1,15104,"略"],[-1,15108,"的话"],[1,15124,"统一"],[-1,15460,"棋盘"],[1,15479,"演示"],[1,15589,"yi懂"],[-1,15589,"合法的"],[1,15674,"\n"],[-1,15785,"\n"],[-1,16088,"搜索树"],[1,16098,"3$¥"],[1,16252,"一个"],[-1,16252,"取了"],[1,16297,"了"],[-1,16297,"\n"],[1,16492,"\n。"],[-1,16492,"最多"],[1,16743,"\n"],[1,17087,""],[-1,17087,"]"],[1,17242,"\n\n"],[-1,17242,""]],[17244,17244],[13149,13149]]],[1528700103703,["Re@Re.local",[[1,17242,"深度优先森林。同宽度优先搜索一样，深度优先搜索利用"]],[17242,17242],[17267,17267]]],[1528700125673,["Re@Re.local",[[-1,17265,"利用"]],[17267,17267],[17265,17265]]],[1528700129859,["Re@Re.local",[[1,17265,"在生成"]],[17265,17265],[17268,17268]]],[1528700130159,["Re@Re.local",[[-1,17266,"生成"]],[17268,17268],[17266,17266]]],[1528700134901,["Re@Re.local",[[1,17266,"构造时也利用了前"]],[17266,17266],[17274,17274]]],[1528700134975,["Re@Re.local",[[-1,17273,"前"]],[17274,17274],[17273,17273]]],[1528700145550,["Re@Re.local",[[1,17273,"父节点引用"]],[17273,17273],[17278,17278]]],[1528700205908,[null,[[-1,13149,"\n"],[1,13751,"\n"],[1,13776,"搜索的"],[-1,13819,"K"],[1,13821,"ni"],[-1,13841,"\n"],[-1,13844,"kn\n"],[1,13891,"排序）"],[-1,13895,"徐安娥"],[1,14004,"节点。"],[-1,14011," dd"],[1,14138,"节点C"],[-1,14140,"C"],[-1,14181,"可"],[-1,14196,"成"],[1,15071,"中"],[-1,15103,"略"],[1,15108,"的话"],[-1,15122,"统一"],[1,15460,"棋盘"],[-1,15477,"演示"],[-1,15589,"yi懂"],[1,15592,"合法的"],[-1,15674,"\n"],[1,15786,"\n"],[1,16088,"搜索树"],[-1,16095,"3$¥"],[-1,16252,"一个"],[1,16254,"取了"],[-1,16297,"了"],[1,16298,"\n"],[-1,16492,"\n。"],[1,16494,"最多"],[-1,16743,"\n"],[-1,17088,""],[1,17088,"]"],[-1,17278,"\n\n"],[1,17280,""]],[13149,13149],[17280,17280]]],[1528700205908,[null,[[1,13149,"\n"],[-1,13750,"\n"],[-1,13776,"搜索的"],[1,13822,"K"],[-1,13823,"ni"],[1,13845,"\n"],[1,13847,"kn\n"],[-1,13891,"排序）"],[1,13898,"徐安娥"],[-1,14004,"节点。"],[1,14014," dd"],[-1,14138,"节点C"],[1,14143,"C"],[1,14183,"可"],[1,14197,"成"],[-1,15071,"中"],[1,15104,"略"],[-1,15108,"的话"],[1,15124,"统一"],[-1,15460,"棋盘"],[1,15479,"演示"],[1,15589,"yi懂"],[-1,15589,"合法的"],[1,15674,"\n"],[-1,15785,"\n"],[-1,16088,"搜索树"],[1,16098,"3$¥"],[1,16252,"一个"],[-1,16252,"取了"],[1,16297,"了"],[-1,16297,"\n"],[1,16492,"\n。"],[-1,16492,"最多"],[1,16743,"\n"],[1,17087,""],[-1,17087,"]"],[1,17278,"\n\n"],[-1,17278,""]],[17280,17280],[13149,13149]]],[1528700155195,["Re@Re.local",[[1,17278,"。此外，深度优先搜索还会使用两"]],[17278,17278],[17293,17293]]],[1528700155353,["Re@Re.local",[[-1,17292,"两"]],[17293,17293],[17292,17292]]],[1528700156260,["Re@Re.local",[[1,17292,"林"]],[17292,17292],[17293,17293]]],[1528700156377,["Re@Re.local",[[-1,17292,"林"]],[17293,17293],[17292,17292]]],[1528700160672,["Re@Re.local",[[1,17292,"额外两个实例变量，"]],[17292,17292],[17301,17301]]],[1528700161238,["Re@Re.local",[[-1,17300,"，"]],[17301,17301],[17300,17300]]],[1528700168076,["Re@Re.local",[[1,17288,"在Vertex蕾中"]],[17288,17288],[17297,17297]]],[1528700168594,["Re@Re.local",[[-1,17295,"蕾中"]],[17297,17297],[17295,17295]]],[1528700170421,["Re@Re.local",[[1,17295,"类中"]],[17295,17295],[17297,17297]]],[1528700697837,[null,[[-1,13149,"\n"],[1,13751,"\n"],[1,13776,"搜索的"],[-1,13819,"K"],[1,13821,"ni"],[-1,13841,"\n"],[-1,13844,"kn\n"],[1,13891,"排序）"],[-1,13895,"徐安娥"],[1,14004,"节点。"],[-1,14011," dd"],[1,14138,"节点C"],[-1,14140,"C"],[-1,14181,"可"],[-1,14196,"成"],[1,15071,"中"],[-1,15103,"略"],[1,15108,"的话"],[-1,15122,"统一"],[1,15460,"棋盘"],[-1,15477,"演示"],[-1,15589,"yi懂"],[1,15592,"合法的"],[-1,15674,"\n"],[1,15786,"\n"],[1,16088,"搜索树"],[-1,16095,"3$¥"],[-1,16252,"一个"],[1,16254,"取了"],[-1,16297,"了"],[1,16298,"\n"],[-1,16492,"\n。"],[1,16494,"最多"],[-1,16743,"\n"],[-1,17088,""],[1,17088,"]"],[-1,17309,"\n\n"],[1,17311,""]],[13149,13149],[17311,17311]]],[1528700697837,[null,[[1,13149,"\n"],[-1,13750,"\n"],[-1,13776,"搜索的"],[1,13822,"K"],[-1,13823,"ni"],[1,13845,"\n"],[1,13847,"kn\n"],[-1,13891,"排序）"],[1,13898,"徐安娥"],[-1,14004,"节点。"],[1,14014," dd"],[-1,14138,"节点C"],[1,14143,"C"],[1,14183,"可"],[1,14197,"成"],[-1,15071,"中"],[1,15104,"略"],[-1,15108,"的话"],[1,15124,"统一"],[-1,15460,"棋盘"],[1,15479,"演示"],[1,15589,"yi懂"],[-1,15589,"合法的"],[1,15674,"\n"],[-1,15785,"\n"],[-1,16088,"搜索树"],[1,16098,"3$¥"],[1,16252,"一个"],[-1,16252,"取了"],[1,16297,"了"],[-1,16297,"\n"],[1,16492,"\n。"],[-1,16492,"最多"],[1,16743,"\n"],[1,17087,""],[-1,17087,"]"],[1,17309,"\n\n"],[-1,17309,""]],[17311,17311],[13149,13149]]],[1528700691880,["Re@Re.local",[[1,17309,"。"]],[17309,17309],[17310,17310]]],[1528700693330,["Re@Re.local",[[-1,17309,"。"]],[17310,17310],[17309,17309]]],[1528700697426,["Re@Re.local",[[1,17309,"，即"]],[17309,17309],[17311,17311]]],[1528702611074,[null,[[-1,13149,"\n"],[1,13751,"\n"],[1,13776,"搜索的"],[-1,13819,"K"],[1,13821,"ni"],[-1,13841,"\n"],[-1,13844,"kn\n"],[1,13891,"排序）"],[-1,13895,"徐安娥"],[1,14004,"节点。"],[-1,14011," dd"],[1,14138,"节点C"],[-1,14140,"C"],[-1,14181,"可"],[-1,14196,"成"],[1,15071,"中"],[-1,15103,"略"],[1,15108,"的话"],[-1,15122,"统一"],[1,15460,"棋盘"],[-1,15477,"演示"],[-1,15589,"yi懂"],[1,15592,"合法的"],[-1,15674,"\n"],[1,15786,"\n"],[1,16088,"搜索树"],[-1,16095,"3$¥"],[-1,16252,"一个"],[1,16254,"取了"],[-1,16297,"了"],[1,16298,"\n"],[-1,16492,"\n。"],[1,16494,"最多"],[-1,16743,"\n"],[-1,17088,""],[1,17088,"]"],[-1,17311,"\n\n"],[1,17313,""]],[13149,13149],[17313,17313]]],[1528702611074,[null,[[1,13149,"\n"],[-1,13750,"\n"],[-1,13776,"搜索的"],[1,13822,"K"],[-1,13823,"ni"],[1,13845,"\n"],[1,13847,"kn\n"],[-1,13891,"排序）"],[1,13898,"徐安娥"],[-1,14004,"节点。"],[1,14014," dd"],[-1,14138,"节点C"],[1,14143,"C"],[1,14183,"可"],[1,14197,"成"],[-1,15071,"中"],[1,15104,"略"],[-1,15108,"的话"],[1,15124,"统一"],[-1,15460,"棋盘"],[1,15479,"演示"],[1,15589,"yi懂"],[-1,15589,"合法的"],[1,15674,"\n"],[-1,15785,"\n"],[-1,16088,"搜索树"],[1,16098,"3$¥"],[1,16252,"一个"],[-1,16252,"取了"],[1,16297,"了"],[-1,16297,"\n"],[1,16492,"\n。"],[-1,16492,"最多"],[1,16743,"\n"],[1,17087,""],[-1,17087,"]"],[1,17311,"\n\n"],[-1,17311,""]],[17313,17313],[13149,13149]]],[1528702556191,["Re@Re.local",[[1,17311,"y"]],[17313,17313],[17312,17312]]],[1528702556416,["Re@Re.local",[[-1,17311,"y"]],[17312,17312],[17311,17311]]],[1528702671137,[null,[[-1,13149,"\n"],[1,13751,"\n"],[1,13776,"搜索的"],[-1,13819,"K"],[1,13821,"ni"],[-1,13841,"\n"],[-1,13844,"kn\n"],[1,13891,"排序）"],[-1,13895,"徐安娥"],[1,14004,"节点。"],[-1,14011," dd"],[1,14138,"节点C"],[-1,14140,"C"],[-1,14181,"可"],[-1,14196,"成"],[1,15071,"中"],[-1,15103,"略"],[1,15108,"的话"],[-1,15122,"统一"],[1,15460,"棋盘"],[-1,15477,"演示"],[-1,15589,"yi懂"],[1,15592,"合法的"],[-1,15674,"\n"],[1,15786,"\n"],[1,16088,"搜索树"],[-1,16095,"3$¥"],[-1,16252,"一个"],[1,16254,"取了"],[-1,16297,"了"],[1,16298,"\n"],[-1,16492,"\n。"],[1,16494,"最多"],[-1,16743,"\n"],[-1,17088,""],[1,17088,"]"],[-1,17311,"\n\n"],[1,17313,""]],[13149,13149],[17313,17313]]],[1528702671137,[null,[[1,13149,"\n"],[-1,13750,"\n"],[-1,13776,"搜索的"],[1,13822,"K"],[-1,13823,"ni"],[1,13845,"\n"],[1,13847,"kn\n"],[-1,13891,"排序）"],[1,13898,"徐安娥"],[-1,14004,"节点。"],[1,14014," dd"],[-1,14138,"节点C"],[1,14143,"C"],[1,14183,"可"],[1,14197,"成"],[-1,15071,"中"],[1,15104,"略"],[-1,15108,"的话"],[1,15124,"统一"],[-1,15460,"棋盘"],[1,15479,"演示"],[1,15589,"yi懂"],[-1,15589,"合法的"],[1,15674,"\n"],[-1,15785,"\n"],[-1,16088,"搜索树"],[1,16098,"3$¥"],[1,16252,"一个"],[-1,16252,"取了"],[1,16297,"了"],[-1,16297,"\n"],[1,16492,"\n。"],[-1,16492,"最多"],[1,16743,"\n"],[1,17087,""],[-1,17087,"]"],[1,17311,"\n\n"],[-1,17311,""]],[17313,17313],[13149,13149]]],[1528702637696,["Re@Re.local",[[1,17311,"fa"]],[17311,17311],[17313,17313]]],[1528702638363,["Re@Re.local",[[-1,17311,"fa"]],[17313,17313],[17311,17311]]],[1528702661152,["Re@Re.local",[[1,17311,"发现时间和完成时间。发现时间记录算法中"]],[17311,17311],[17330,17330]]],[1528702670240,["Re@Re.local",[[-1,17328,"法中"]],[17330,17330],[17328,17328]]],[1528702731062,[null,[[-1,13149,"\n"],[1,13751,"\n"],[1,13776,"搜索的"],[-1,13819,"K"],[1,13821,"ni"],[-1,13841,"\n"],[-1,13844,"kn\n"],[1,13891,"排序）"],[-1,13895,"徐安娥"],[1,14004,"节点。"],[-1,14011," dd"],[1,14138,"节点C"],[-1,14140,"C"],[-1,14181,"可"],[-1,14196,"成"],[1,15071,"中"],[-1,15103,"略"],[1,15108,"的话"],[-1,15122,"统一"],[1,15460,"棋盘"],[-1,15477,"演示"],[-1,15589,"yi懂"],[1,15592,"合法的"],[-1,15674,"\n"],[1,15786,"\n"],[1,16088,"搜索树"],[-1,16095,"3$¥"],[-1,16252,"一个"],[1,16254,"取了"],[-1,16297,"了"],[1,16298,"\n"],[-1,16492,"\n。"],[1,16494,"最多"],[-1,16743,"\n"],[-1,17088,""],[1,17088,"]"],[-1,17328,"\n\n"],[1,17330,""]],[13149,13149],[17330,17330]]],[1528702731062,[null,[[1,13149,"\n"],[-1,13750,"\n"],[-1,13776,"搜索的"],[1,13822,"K"],[-1,13823,"ni"],[1,13845,"\n"],[1,13847,"kn\n"],[-1,13891,"排序）"],[1,13898,"徐安娥"],[-1,14004,"节点。"],[1,14014," dd"],[-1,14138,"节点C"],[1,14143,"C"],[1,14183,"可"],[1,14197,"成"],[-1,15071,"中"],[1,15104,"略"],[-1,15108,"的话"],[1,15124,"统一"],[-1,15460,"棋盘"],[1,15479,"演示"],[1,15589,"yi懂"],[-1,15589,"合法的"],[1,15674,"\n"],[-1,15785,"\n"],[-1,16088,"搜索树"],[1,16098,"3$¥"],[1,16252,"一个"],[-1,16252,"取了"],[1,16297,"了"],[-1,16297,"\n"],[1,16492,"\n。"],[-1,16492,"最多"],[1,16743,"\n"],[1,17087,""],[-1,17087,"]"],[1,17328,"\n\n"],[-1,17328,""]],[17330,17330],[13149,13149]]],[1528702677633,["Re@Re.local",[[-1,17327,"算"]],[17328,17328],[17327,17327]]],[1528702683048,["Re@Re.local",[[1,17327,"某个顶点第一次"]],[17327,17327],[17334,17334]]],[1528702683415,["Re@Re.local",[[-1,17332,"一次"]],[17334,17334],[17332,17332]]],[1528702713158,["Re@Re.local",[[1,17332,"1次出现前的步骤数，而完成时间记录奇偶"]],[17332,17332],[17351,17351]]],[1528702713729,["Re@Re.local",[[-1,17349,"奇偶"]],[17351,17351],[17349,17349]]],[1528702720327,["Re@Re.local",[[1,17349,"该顶点被涂为黑色时所"]],[17349,17349],[17359,17359]]],[1528702720520,["Re@Re.local",[[-1,17358,"所"]],[17359,17359],[17358,17358]]],[1528702721066,["Re@Re.local",[[1,17358,"的"]],[17358,17358],[17359,17359]]],[1528702721570,["Re@Re.local",[[-1,17358,"的"]],[17359,17359],[17358,17358]]],[1528702729066,["Re@Re.local",[[1,17358,"的步骤数。"]],[17358,17358],[17363,17363]]],[1528702791074,[null,[[-1,13149,"\n"],[1,13751,"\n"],[1,13776,"搜索的"],[-1,13819,"K"],[1,13821,"ni"],[-1,13841,"\n"],[-1,13844,"kn\n"],[1,13891,"排序）"],[-1,13895,"徐安娥"],[1,14004,"节点。"],[-1,14011," dd"],[1,14138,"节点C"],[-1,14140,"C"],[-1,14181,"可"],[-1,14196,"成"],[1,15071,"中"],[-1,15103,"略"],[1,15108,"的话"],[-1,15122,"统一"],[1,15460,"棋盘"],[-1,15477,"演示"],[-1,15589,"yi懂"],[1,15592,"合法的"],[-1,15674,"\n"],[1,15786,"\n"],[1,16088,"搜索树"],[-1,16095,"3$¥"],[-1,16252,"一个"],[1,16254,"取了"],[-1,16297,"了"],[1,16298,"\n"],[-1,16492,"\n。"],[1,16494,"最多"],[-1,16743,"\n"],[-1,17088,""],[1,17088,"]"],[-1,17363,"\n\n"],[1,17365,""]],[13149,13149],[17365,17365]]],[1528702791074,[null,[[1,13149,"\n"],[-1,13750,"\n"],[-1,13776,"搜索的"],[1,13822,"K"],[-1,13823,"ni"],[1,13845,"\n"],[1,13847,"kn\n"],[-1,13891,"排序）"],[1,13898,"徐安娥"],[-1,14004,"节点。"],[1,14014," dd"],[-1,14138,"节点C"],[1,14143,"C"],[1,14183,"可"],[1,14197,"成"],[-1,15071,"中"],[1,15104,"略"],[-1,15108,"的话"],[1,15124,"统一"],[-1,15460,"棋盘"],[1,15479,"演示"],[1,15589,"yi懂"],[-1,15589,"合法的"],[1,15674,"\n"],[-1,15785,"\n"],[-1,16088,"搜索树"],[1,16098,"3$¥"],[1,16252,"一个"],[-1,16252,"取了"],[1,16297,"了"],[-1,16297,"\n"],[1,16492,"\n。"],[-1,16492,"最多"],[1,16743,"\n"],[1,17087,""],[-1,17087,"]"],[1,17363,"\n\n"],[-1,17363,""]],[17365,17365],[13149,13149]]],[1528702738049,["Re@Re.local",[[1,17363,"在研究该算法后，"]],[17363,17363],[17371,17371]]],[1528702743201,["Re@Re.local",[[-1,17363,"在研究该算法后，"]],[17371,17371],[17363,17363]]],[1528702763734,["Re@Re.local",[[1,17363,"观察算法可以发现，发现时间和完成时间为"]],[17363,17363],[17382,17382]]],[1528702763857,["Re@Re.local",[[-1,17381,"为"]],[17382,17382],[17381,17381]]],[1528702776396,["Re@Re.local",[[1,17381,"可以提供一些有趣的性质可供后续的算法"]],[17381,17381],[17399,17399]]],[1528702778983,["Re@Re.local",[[-1,17381,"可以"]],[17383,17383],[17381,17381]]],[1528702780451,["Re@Re.local",[[1,17381,"能够"]],[17381,17381],[17383,17383]]],[1528702783443,["Re@Re.local",[[-1,17396,"的算法"]],[17399,17399],[17396,17396]]],[1528702786020,["Re@Re.local",[[1,17396,"的算法使用。"]],[17396,17396],[17402,17402]]],[1528702786449,["Re@Re.local",[[1,17402,"\n\n"]],[17402,17402],[17403,17403]]],[1528702786673,["Re@Re.local",[[1,17404,"\n"]],[17403,17403],[17404,17404]]],[1528702851048,[null,[[-1,13149,"\n"],[1,13751,"\n"],[1,13776,"搜索的"],[-1,13819,"K"],[1,13821,"ni"],[-1,13841,"\n"],[-1,13844,"kn\n"],[1,13891,"排序）"],[-1,13895,"徐安娥"],[1,14004,"节点。"],[-1,14011," dd"],[1,14138,"节点C"],[-1,14140,"C"],[-1,14181,"可"],[-1,14196,"成"],[1,15071,"中"],[-1,15103,"略"],[1,15108,"的话"],[-1,15122,"统一"],[1,15460,"棋盘"],[-1,15477,"演示"],[-1,15589,"yi懂"],[1,15592,"合法的"],[-1,15674,"\n"],[1,15786,"\n"],[1,16088,"搜索树"],[-1,16095,"3$¥"],[-1,16252,"一个"],[1,16254,"取了"],[-1,16297,"了"],[1,16298,"\n"],[-1,16492,"\n。"],[1,16494,"最多"],[-1,16743,"\n"],[-1,17088,""],[1,17088,"]"],[-1,17402,"\n\n"],[1,17404,""]],[13149,13149],[17404,17404]]],[1528702851049,[null,[[1,13149,"\n"],[-1,13750,"\n"],[-1,13776,"搜索的"],[1,13822,"K"],[-1,13823,"ni"],[1,13845,"\n"],[1,13847,"kn\n"],[-1,13891,"排序）"],[1,13898,"徐安娥"],[-1,14004,"节点。"],[1,14014," dd"],[-1,14138,"节点C"],[1,14143,"C"],[1,14183,"可"],[1,14197,"成"],[-1,15071,"中"],[1,15104,"略"],[-1,15108,"的话"],[1,15124,"统一"],[-1,15460,"棋盘"],[1,15479,"演示"],[1,15589,"yi懂"],[-1,15589,"合法的"],[1,15674,"\n"],[-1,15785,"\n"],[-1,16088,"搜索树"],[1,16098,"3$¥"],[1,16252,"一个"],[-1,16252,"取了"],[1,16297,"了"],[-1,16297,"\n"],[1,16492,"\n。"],[-1,16492,"最多"],[1,16743,"\n"],[1,17087,""],[-1,17087,"]"],[1,17402,"\n\n"],[-1,17402,""]],[17404,17404],[13149,13149]]],[1528702792038,["Re@Re.local",[[1,17407,"\n"]],[17405,17405],[17406,17406]]],[1528702798589,["Re@Re.local",[[1,17406,"深度"]],[17406,17406],[17408,17408]]],[1528702798733,["Re@Re.local",[[-1,17407,"度"]],[17408,17408],[17407,17407]]],[1528702799162,["Re@Re.local",[[1,17407,"又"]],[17407,17407],[17408,17408]]],[1528702799602,["Re@Re.local",[[-1,17406,"深又"]],[17408,17408],[17406,17406]]],[1528702803686,["Re@Re.local",[[1,17406,"深度优先搜索的代码如代码"]],[17406,17406],[17418,17418]]],[1528702805165,["Re@Re.local",[[-1,17412,"的代码如代码"]],[17418,17418],[17412,17412]]],[1528702808781,["Re@Re.local",[[1,17412,"如代码5所示因为"]],[17412,17412],[17420,17420]]],[1528702809376,["Re@Re.local",[[-1,17418,"因为"]],[17420,17420],[17418,17418]]],[1528702824863,["Re@Re.local",[[1,17418,"。因为两个函数dfs和其辅助函数dfsvisit使用了一个便"]],[17418,17418],[17448,17448]]],[1528702825428,["Re@Re.local",[[-1,17445,"一个便"]],[17448,17448],[17445,17445]]],[1528702828324,["Re@Re.local",[[1,17445,"1个变量唉记录"]],[17445,17445],[17452,17452]]],[1528702911066,[null,[[-1,13149,"\n"],[1,13751,"\n"],[1,13776,"搜索的"],[-1,13819,"K"],[1,13821,"ni"],[-1,13841,"\n"],[-1,13844,"kn\n"],[1,13891,"排序）"],[-1,13895,"徐安娥"],[1,14004,"节点。"],[-1,14011," dd"],[1,14138,"节点C"],[-1,14140,"C"],[-1,14181,"可"],[-1,14196,"成"],[1,15071,"中"],[-1,15103,"略"],[1,15108,"的话"],[-1,15122,"统一"],[1,15460,"棋盘"],[-1,15477,"演示"],[-1,15589,"yi懂"],[1,15592,"合法的"],[-1,15674,"\n"],[1,15786,"\n"],[1,16088,"搜索树"],[-1,16095,"3$¥"],[-1,16252,"一个"],[1,16254,"取了"],[-1,16297,"了"],[1,16298,"\n"],[-1,16492,"\n。"],[1,16494,"最多"],[-1,16743,"\n"],[-1,17088,""],[1,17088,"]"],[1,17397,"一些"],[-1,17402,"\n\n"]],[13149,13149],[17402,17402]]],[1528702911066,[null,[[1,13149,"\n"],[-1,13750,"\n"],[-1,13776,"搜索的"],[1,13822,"K"],[-1,13823,"ni"],[1,13845,"\n"],[1,13847,"kn\n"],[-1,13891,"排序）"],[1,13898,"徐安娥"],[-1,14004,"节点。"],[1,14014," dd"],[-1,14138,"节点C"],[1,14143,"C"],[1,14183,"可"],[1,14197,"成"],[-1,15071,"中"],[1,15104,"略"],[-1,15108,"的话"],[1,15124,"统一"],[-1,15460,"棋盘"],[1,15479,"演示"],[1,15589,"yi懂"],[-1,15589,"合法的"],[1,15674,"\n"],[-1,15785,"\n"],[-1,16088,"搜索树"],[1,16098,"3$¥"],[1,16252,"一个"],[-1,16252,"取了"],[1,16297,"了"],[-1,16297,"\n"],[1,16492,"\n。"],[-1,16492,"最多"],[1,16743,"\n"],[1,17087,""],[-1,17087,"]"],[-1,17397,"一些"],[1,17404,"\n\n"]],[17402,17402],[13149,13149]]],[1528702857674,["Re@Re.local",[[-1,17449,"唉记录"]],[17452,17452],[17449,17449]]],[1528702865996,["Re@Re.local",[[1,17449,"来记录通过调用达到"]],[17449,17449],[17458,17458]]],[1528702888672,["Re@Re.local",[[-1,17452,"通过调用达到"]],[17458,17458],[17452,17452]]],[1528702894684,["Re@Re.local",[[1,17452,"在调用dfsvisit时的"]],[17452,17452],[17465,17465]]],[1528702971071,[null,[[-1,13149,"\n"],[1,13751,"\n"],[1,13776,"搜索的"],[-1,13819,"K"],[1,13821,"ni"],[-1,13841,"\n"],[-1,13844,"kn\n"],[1,13891,"排序）"],[-1,13895,"徐安娥"],[1,14004,"节点。"],[-1,14011," dd"],[1,14138,"节点C"],[-1,14140,"C"],[-1,14181,"可"],[-1,14196,"成"],[1,15071,"中"],[-1,15103,"略"],[1,15108,"的话"],[-1,15122,"统一"],[1,15460,"棋盘"],[-1,15477,"演示"],[-1,15589,"yi懂"],[1,15592,"合法的"],[-1,15674,"\n"],[1,15786,"\n"],[1,16088,"搜索树"],[-1,16095,"3$¥"],[-1,16252,"一个"],[1,16254,"取了"],[-1,16297,"了"],[1,16298,"\n"],[-1,16492,"\n。"],[1,16494,"最多"],[-1,16743,"\n"],[-1,17088,""],[1,17088,"]"],[1,17397,"一些"],[-1,17402,"\n\n"]],[13149,13149],[17402,17402]]],[1528702971071,[null,[[1,13149,"\n"],[-1,13750,"\n"],[-1,13776,"搜索的"],[1,13822,"K"],[-1,13823,"ni"],[1,13845,"\n"],[1,13847,"kn\n"],[-1,13891,"排序）"],[1,13898,"徐安娥"],[-1,14004,"节点。"],[1,14014," dd"],[-1,14138,"节点C"],[1,14143,"C"],[1,14183,"可"],[1,14197,"成"],[-1,15071,"中"],[1,15104,"略"],[-1,15108,"的话"],[1,15124,"统一"],[-1,15460,"棋盘"],[1,15479,"演示"],[1,15589,"yi懂"],[-1,15589,"合法的"],[1,15674,"\n"],[-1,15785,"\n"],[-1,16088,"搜索树"],[1,16098,"3$¥"],[1,16252,"一个"],[-1,16252,"取了"],[1,16297,"了"],[-1,16297,"\n"],[1,16492,"\n。"],[-1,16492,"最多"],[1,16743,"\n"],[1,17087,""],[-1,17087,"]"],[-1,17397,"一些"],[1,17404,"\n\n"]],[17402,17402],[13149,13149]]],[1528702953231,["Re@Re.local",[[1,17465,"时间"]],[17465,17465],[17467,17467]]],[1528702954769,["Re@Re.local",[[-1,17465,"时间"]],[17467,17467],[17465,17465]]],[1528702963557,["Re@Re.local",[[1,17465,"时间，以是的将"]],[17465,17465],[17472,17472]]],[1528702966072,["Re@Re.local",[[-1,17468,"以是的将"]],[17472,17472],[17468,17468]]],[1528702970627,["Re@Re.local",[[1,17468,"从而将这部分代码"]],[17468,17468],[17476,17476]]],[1528703031100,[null,[[-1,13149,"\n"],[1,13751,"\n"],[1,13776,"搜索的"],[-1,13819,"K"],[1,13821,"ni"],[-1,13841,"\n"],[-1,13844,"kn\n"],[1,13891,"排序）"],[-1,13895,"徐安娥"],[1,14004,"节点。"],[-1,14011," dd"],[1,14138,"节点C"],[-1,14140,"C"],[-1,14181,"可"],[-1,14196,"成"],[1,15071,"中"],[-1,15103,"略"],[1,15108,"的话"],[-1,15122,"统一"],[1,15460,"棋盘"],[-1,15477,"演示"],[-1,15589,"yi懂"],[1,15592,"合法的"],[-1,15674,"\n"],[1,15786,"\n"],[1,16088,"搜索树"],[-1,16095,"3$¥"],[-1,16252,"一个"],[1,16254,"取了"],[-1,16297,"了"],[1,16298,"\n"],[-1,16492,"\n。"],[1,16494,"最多"],[-1,16743,"\n"],[-1,17088,""],[1,17088,"]"],[1,17397,"一些"],[-1,17402,"\n\n"]],[13149,13149],[17402,17402]]],[1528703031100,[null,[[1,13149,"\n"],[-1,13750,"\n"],[-1,13776,"搜索的"],[1,13822,"K"],[-1,13823,"ni"],[1,13845,"\n"],[1,13847,"kn\n"],[-1,13891,"排序）"],[1,13898,"徐安娥"],[-1,14004,"节点。"],[1,14014," dd"],[-1,14138,"节点C"],[1,14143,"C"],[1,14183,"可"],[1,14197,"成"],[-1,15071,"中"],[1,15104,"略"],[-1,15108,"的话"],[1,15124,"统一"],[-1,15460,"棋盘"],[1,15479,"演示"],[1,15589,"yi懂"],[-1,15589,"合法的"],[1,15674,"\n"],[-1,15785,"\n"],[-1,16088,"搜索树"],[1,16098,"3$¥"],[1,16252,"一个"],[-1,16252,"取了"],[1,16297,"了"],[-1,16297,"\n"],[1,16492,"\n。"],[-1,16492,"最多"],[1,16743,"\n"],[1,17087,""],[-1,17087,"]"],[-1,17397,"一些"],[1,17404,"\n\n"]],[17402,17402],[13149,13149]]],[1528702981476,["Re@Re.local",[[1,17476,"实现为Graph子类的一个方法。"]],[17476,17476],[17492,17492]]],[1528702990601,["Re@Re.local",[[1,17494,"\n"]],[17492,17492],[17493,17493]]],[1528702990828,["Re@Re.local",[[1,17495,"\n"]],[17493,17493],[17494,17494]]],[1528702991788,["Re@Re.local",[[1,17494,"from pythonds.graphs import Graph\nclass DFSGraph(Graph):\n    def __init__(self):\n        super().__init__()\n        self.time = 0\n\n    def dfs(self):\n        for aVertex in self:\n            aVertex.setColor('white')\n            aVertex.setPred(-1)\n        for aVertex in self:\n            if aVertex.getColor() == 'white':\n                self.dfsvisit(aVertex)\n\n    def dfsvisit(self,startVertex):\n        startVertex.setColor('gray')\n        self.time += 1\n        startVertex.setDiscovery(self.time)\n        for nextVertex in startVertex.getConnections():\n            if nextVertex.getColor() == 'white':\n                nextVertex.setPred(startVertex)\n                self.dfsvisit(nextVertex)\n        startVertex.setColor('black')\n        self.time += 1\n        startVertex.setFinish(self.time)"]],[17494,17494],[18294,18294]]],[1528702996659,["Re@Re.local",[[1,17494,"\n"]],[17493,17493],[17494,17494]]],[1528702996861,["Re@Re.local",[[1,17495,"\n"]],[17494,17494],[17495,17495]]],[1528702999047,["Re@Re.local",[[1,17495,"```Python"]],[17495,17495],[17504,17504]]],[1528703001777,["Re@Re.local",[[-1,18306,"\n"],[1,18307,"```"]],[18306,18306],[18309,18309]]],[1528703091088,[null,[[-1,13149,"\n"],[1,13751,"\n"],[1,13776,"搜索的"],[-1,13819,"K"],[1,13821,"ni"],[-1,13841,"\n"],[-1,13844,"kn\n"],[1,13891,"排序）"],[-1,13895,"徐安娥"],[1,14004,"节点。"],[-1,14011," dd"],[1,14138,"节点C"],[-1,14140,"C"],[-1,14181,"可"],[-1,14196,"成"],[1,15071,"中"],[-1,15103,"略"],[1,15108,"的话"],[-1,15122,"统一"],[1,15460,"棋盘"],[-1,15477,"演示"],[-1,15589,"yi懂"],[1,15592,"合法的"],[-1,15674,"\n"],[1,15786,"\n"],[1,16088,"搜索树"],[-1,16095,"3$¥"],[-1,16252,"一个"],[1,16254,"取了"],[-1,16297,"了"],[1,16298,"\n"],[-1,16492,"\n。"],[1,16494,"最多"],[-1,16743,"\n"],[-1,17088,""],[1,17088,"]"],[1,17397,"一些"],[-1,17402,"\n\n"]],[13149,13149],[17402,17402]]],[1528703091088,[null,[[1,13149,"\n"],[-1,13750,"\n"],[-1,13776,"搜索的"],[1,13822,"K"],[-1,13823,"ni"],[1,13845,"\n"],[1,13847,"kn\n"],[-1,13891,"排序）"],[1,13898,"徐安娥"],[-1,14004,"节点。"],[1,14014," dd"],[-1,14138,"节点C"],[1,14143,"C"],[1,14183,"可"],[1,14197,"成"],[-1,15071,"中"],[1,15104,"略"],[-1,15108,"的话"],[1,15124,"统一"],[-1,15460,"棋盘"],[1,15479,"演示"],[1,15589,"yi懂"],[-1,15589,"合法的"],[1,15674,"\n"],[-1,15785,"\n"],[-1,16088,"搜索树"],[1,16098,"3$¥"],[1,16252,"一个"],[-1,16252,"取了"],[1,16297,"了"],[-1,16297,"\n"],[1,16492,"\n。"],[-1,16492,"最多"],[1,16743,"\n"],[1,17087,""],[-1,17087,"]"],[-1,17397,"一些"],[1,17404,"\n\n"]],[17402,17402],[13149,13149]]],[1528703065090,["Re@Re.local",[[-1,17463,"时的时间"]],[17467,17467],[17463,17463]]],[1528703066741,["Re@Re.local",[[1,17463,"d "]],[17463,17463],[17465,17465]]],[1528703067340,["Re@Re.local",[[-1,17463,"d "]],[17465,17465],[17463,17463]]],[1528703071067,["Re@Re.local",[[1,17463,"时的时间"]],[17463,17463],[17467,17467]]],[1528703087080,["Re@Re.local",[[1,17492,"这里的"]],[17492,17492],[17495,17495]]],[1528703087791,["Re@Re.local",[[-1,17492,"这里的"]],[17495,17495],[17492,17492]]],[1528703089702,["Re@Re.local",[[1,17492,"这里的时"]],[17492,17492],[17496,17496]]],[1528703090085,["Re@Re.local",[[-1,17494,"的时"]],[17496,17496],[17494,17494]]],[1528703151093,[null,[[-1,13149,"\n"],[1,13751,"\n"],[1,13776,"搜索的"],[-1,13819,"K"],[1,13821,"ni"],[-1,13841,"\n"],[-1,13844,"kn\n"],[1,13891,"排序）"],[-1,13895,"徐安娥"],[1,14004,"节点。"],[-1,14011," dd"],[1,14138,"节点C"],[-1,14140,"C"],[-1,14181,"可"],[-1,14196,"成"],[1,15071,"中"],[-1,15103,"略"],[1,15108,"的话"],[-1,15122,"统一"],[1,15460,"棋盘"],[-1,15477,"演示"],[-1,15589,"yi懂"],[1,15592,"合法的"],[-1,15674,"\n"],[1,15786,"\n"],[1,16088,"搜索树"],[-1,16095,"3$¥"],[-1,16252,"一个"],[1,16254,"取了"],[-1,16297,"了"],[1,16298,"\n"],[-1,16492,"\n。"],[1,16494,"最多"],[-1,16743,"\n"],[-1,17088,""],[1,17088,"]"],[1,17397,"一些"],[-1,17402,"\n\n"]],[13149,13149],[17402,17402]]],[1528703151093,[null,[[1,13149,"\n"],[-1,13750,"\n"],[-1,13776,"搜索的"],[1,13822,"K"],[-1,13823,"ni"],[1,13845,"\n"],[1,13847,"kn\n"],[-1,13891,"排序）"],[1,13898,"徐安娥"],[-1,14004,"节点。"],[1,14014," dd"],[-1,14138,"节点C"],[1,14143,"C"],[1,14183,"可"],[1,14197,"成"],[-1,15071,"中"],[1,15104,"略"],[-1,15108,"的话"],[1,15124,"统一"],[-1,15460,"棋盘"],[1,15479,"演示"],[1,15589,"yi懂"],[-1,15589,"合法的"],[1,15674,"\n"],[-1,15785,"\n"],[-1,16088,"搜索树"],[1,16098,"3$¥"],[1,16252,"一个"],[-1,16252,"取了"],[1,16297,"了"],[-1,16297,"\n"],[1,16492,"\n。"],[-1,16492,"最多"],[1,16743,"\n"],[1,17087,""],[-1,17087,"]"],[-1,17397,"一些"],[1,17404,"\n\n"]],[17402,17402],[13149,13149]]],[1528703097357,["Re@Re.local",[[1,17494,"给出的实现将图类阔"]],[17494,17494],[17503,17503]]],[1528703099323,["Re@Re.local",[[-1,17499,"将图类阔"]],[17503,17503],[17499,17499]]],[1528703114365,["Re@Re.local",[[1,17499,"通过增加了1个time实例变量以及dfs\\"]],[17499,17499],[17520,17520]]],[1528703116451,["Re@Re.local",[[-1,17519,"\\"]],[17520,17520],[17519,17519]]],[1528703121485,["Re@Re.local",[[1,17519,"、dfsvisit方法实现"]],[17519,17519],[17532,17532]]],[1528703122027,["Re@Re.local",[[-1,17530,"实现"]],[17532,17532],[17530,17530]]],[1528703143486,["Re@Re.local",[[1,17530,"将Graph类进行了扩张。仔细研究行11，读者会"]],[17530,17530],[17554,17554]]],[1528703144177,["Re@Re.local",[[-1,17551,"读者会"]],[17554,17554],[17551,17551]]],[1528703149088,["Re@Re.local",[[1,17551,"可以发现dfs方法对"]],[17551,17551],[17561,17561]]],[1528703211110,[null,[[-1,13149,"\n"],[1,13751,"\n"],[1,13776,"搜索的"],[-1,13819,"K"],[1,13821,"ni"],[-1,13841,"\n"],[-1,13844,"kn\n"],[1,13891,"排序）"],[-1,13895,"徐安娥"],[1,14004,"节点。"],[-1,14011," dd"],[1,14138,"节点C"],[-1,14140,"C"],[-1,14181,"可"],[-1,14196,"成"],[1,15071,"中"],[-1,15103,"略"],[1,15108,"的话"],[-1,15122,"统一"],[1,15460,"棋盘"],[-1,15477,"演示"],[-1,15589,"yi懂"],[1,15592,"合法的"],[-1,15674,"\n"],[1,15786,"\n"],[1,16088,"搜索树"],[-1,16095,"3$¥"],[-1,16252,"一个"],[1,16254,"取了"],[-1,16297,"了"],[1,16298,"\n"],[-1,16492,"\n。"],[1,16494,"最多"],[-1,16743,"\n"],[-1,17088,""],[1,17088,"]"],[1,17397,"一些"],[-1,17402,"\n\n"]],[13149,13149],[17402,17402]]],[1528703211111,[null,[[1,13149,"\n"],[-1,13750,"\n"],[-1,13776,"搜索的"],[1,13822,"K"],[-1,13823,"ni"],[1,13845,"\n"],[1,13847,"kn\n"],[-1,13891,"排序）"],[1,13898,"徐安娥"],[-1,14004,"节点。"],[1,14014," dd"],[-1,14138,"节点C"],[1,14143,"C"],[1,14183,"可"],[1,14197,"成"],[-1,15071,"中"],[1,15104,"略"],[-1,15108,"的话"],[1,15124,"统一"],[-1,15460,"棋盘"],[1,15479,"演示"],[1,15589,"yi懂"],[-1,15589,"合法的"],[1,15674,"\n"],[-1,15785,"\n"],[-1,16088,"搜索树"],[1,16098,"3$¥"],[1,16252,"一个"],[-1,16252,"取了"],[1,16297,"了"],[-1,16297,"\n"],[1,16492,"\n。"],[-1,16492,"最多"],[1,16743,"\n"],[1,17087,""],[-1,17087,"]"],[-1,17397,"一些"],[1,17404,"\n\n"]],[17402,17402],[13149,13149]]],[1528703210417,["Re@Re.local",[[1,17561,"图中所有的顶点调用"]],[17561,17561],[17570,17570]]],[1528703271195,[null,[[-1,13149,"\n"],[1,13751,"\n"],[1,13776,"搜索的"],[-1,13819,"K"],[1,13821,"ni"],[-1,13841,"\n"],[-1,13844,"kn\n"],[1,13891,"排序）"],[-1,13895,"徐安娥"],[1,14004,"节点。"],[-1,14011," dd"],[1,14138,"节点C"],[-1,14140,"C"],[-1,14181,"可"],[-1,14196,"成"],[1,15071,"中"],[-1,15103,"略"],[1,15108,"的话"],[-1,15122,"统一"],[1,15460,"棋盘"],[-1,15477,"演示"],[-1,15589,"yi懂"],[1,15592,"合法的"],[-1,15674,"\n"],[1,15786,"\n"],[1,16088,"搜索树"],[-1,16095,"3$¥"],[-1,16252,"一个"],[1,16254,"取了"],[-1,16297,"了"],[1,16298,"\n"],[-1,16492,"\n。"],[1,16494,"最多"],[-1,16743,"\n"],[-1,17088,""],[1,17088,"]"],[1,17397,"一些"],[-1,17402,"\n\n"]],[13149,13149],[17402,17402]]],[1528703271195,[null,[[1,13149,"\n"],[-1,13750,"\n"],[-1,13776,"搜索的"],[1,13822,"K"],[-1,13823,"ni"],[1,13845,"\n"],[1,13847,"kn\n"],[-1,13891,"排序）"],[1,13898,"徐安娥"],[-1,14004,"节点。"],[1,14014," dd"],[-1,14138,"节点C"],[1,14143,"C"],[1,14183,"可"],[1,14197,"成"],[-1,15071,"中"],[1,15104,"略"],[-1,15108,"的话"],[1,15124,"统一"],[-1,15460,"棋盘"],[1,15479,"演示"],[1,15589,"yi懂"],[-1,15589,"合法的"],[1,15674,"\n"],[-1,15785,"\n"],[-1,16088,"搜索树"],[1,16098,"3$¥"],[1,16252,"一个"],[-1,16252,"取了"],[1,16297,"了"],[-1,16297,"\n"],[1,16492,"\n。"],[-1,16492,"最多"],[1,16743,"\n"],[1,17087,""],[-1,17087,"]"],[-1,17397,"一些"],[1,17404,"\n\n"]],[17402,17402],[13149,13149]]],[1528703211883,["Re@Re.local",[[-1,17568,"调用"]],[17570,17570],[17568,17568]]],[1528703221696,["Re@Re.local",[[1,17568,"进行了遍历，并对白色的"]],[17568,17568],[17579,17579]]],[1528703221991,["Re@Re.local",[[-1,17578,"的"]],[17579,17579],[17578,17578]]],[1528703239506,["Re@Re.local",[[1,17578,"节点调用dfsvisit方法。之所以对所有顶点进行遍历"]],[17578,17578],[17605,17605]]],[1528703239993,["Re@Re.local",[[-1,17603,"遍历"]],[17605,17605],[17603,17603]]],[1528703241124,["Re@Re.local",[[1,17603,"迭代，"]],[17603,17603],[17606,17606]]],[1528703244090,["Re@Re.local",[[-1,17605,"，"]],[17606,17606],[17605,17605]]],[1528703261883,["Re@Re.local",[[1,17605,"而不是从给定起点开始搜索，时为"]],[17605,17605],[17620,17620]]],[1528703262242,["Re@Re.local",[[-1,17618,"时为"]],[17620,17620],[17618,17618]]],[1528703264460,["Re@Re.local",[[1,17618,"是为"]],[17618,17618],[17620,17620]]],[1528703266102,["Re@Re.local",[[-1,17607,"是"]],[17608,17608],[17607,17607]]],[1528703270242,["Re@Re.local",[[1,17619,"了保证"]],[17619,17619],[17622,17622]]],[1528703334348,[null,[[-1,13149,"\n"],[1,13751,"\n"],[1,13776,"搜索的"],[-1,13819,"K"],[1,13821,"ni"],[-1,13841,"\n"],[-1,13844,"kn\n"],[1,13891,"排序）"],[-1,13895,"徐安娥"],[1,14004,"节点。"],[-1,14011," dd"],[1,14138,"节点C"],[-1,14140,"C"],[-1,14181,"可"],[-1,14196,"成"],[1,15071,"中"],[-1,15103,"略"],[1,15108,"的话"],[-1,15122,"统一"],[1,15460,"棋盘"],[-1,15477,"演示"],[-1,15589,"yi懂"],[1,15592,"合法的"],[-1,15674,"\n"],[1,15786,"\n"],[1,16088,"搜索树"],[-1,16095,"3$¥"],[-1,16252,"一个"],[1,16254,"取了"],[-1,16297,"了"],[1,16298,"\n"],[-1,16492,"\n。"],[1,16494,"最多"],[-1,16743,"\n"],[-1,17088,""],[1,17088,"]"],[1,17397,"一些"],[-1,17402,"\n\n"]],[13149,13149],[17402,17402]]],[1528703334348,[null,[[1,13149,"\n"],[-1,13750,"\n"],[-1,13776,"搜索的"],[1,13822,"K"],[-1,13823,"ni"],[1,13845,"\n"],[1,13847,"kn\n"],[-1,13891,"排序）"],[1,13898,"徐安娥"],[-1,14004,"节点。"],[1,14014," dd"],[-1,14138,"节点C"],[1,14143,"C"],[1,14183,"可"],[1,14197,"成"],[-1,15071,"中"],[1,15104,"略"],[-1,15108,"的话"],[1,15124,"统一"],[-1,15460,"棋盘"],[1,15479,"演示"],[1,15589,"yi懂"],[-1,15589,"合法的"],[1,15674,"\n"],[-1,15785,"\n"],[-1,16088,"搜索树"],[1,16098,"3$¥"],[1,16252,"一个"],[-1,16252,"取了"],[1,16297,"了"],[-1,16297,"\n"],[1,16492,"\n。"],[-1,16492,"最多"],[1,16743,"\n"],[1,17087,""],[-1,17087,"]"],[-1,17397,"一些"],[1,17404,"\n\n"]],[17402,17402],[13149,13149]]],[1528703274019,["Re@Re.local",[[1,17624,"所有顶"]],[17624,17624],[17627,17627]]],[1528703274151,["Re@Re.local",[[-1,17626,"顶"]],[17627,17627],[17626,17626]]],[1528703279047,["Re@Re.local",[[1,17626,"节点都被"]],[17626,17626],[17630,17630]]],[1528703283418,["Re@Re.local",[[-1,17629,"被"]],[17630,17630],[17629,17629]]],[1528703287337,["Re@Re.local",[[1,17629,"不被一楼并且"]],[17629,17629],[17635,17635]]],[1528703293356,["Re@Re.local",[[-1,17629,"不被一楼并且"]],[17635,17635],[17629,17629]]],[1528703312822,["Re@Re.local",[[1,17629,"被考虑了"]],[17629,17629],[17633,17633]]],[1528703313240,["Re@Re.local",[[-1,17632,"了"]],[17633,17633],[17632,17632]]],[1528703315898,["Re@Re.local",[[1,17632,"了并且"]],[17632,17632],[17635,17635]]],[1528706401135,[null,[[-1,13149,"\n"],[1,13751,"\n"],[1,13776,"搜索的"],[-1,13819,"K"],[1,13821,"ni"],[-1,13841,"\n"],[-1,13844,"kn\n"],[1,13891,"排序）"],[-1,13895,"徐安娥"],[1,14004,"节点。"],[-1,14011," dd"],[1,14138,"节点C"],[-1,14140,"C"],[-1,14181,"可"],[-1,14196,"成"],[1,15071,"中"],[-1,15103,"略"],[1,15108,"的话"],[-1,15122,"统一"],[1,15460,"棋盘"],[-1,15477,"演示"],[-1,15589,"yi懂"],[1,15592,"合法的"],[-1,15677,"\n"],[1,15786,"\n"],[1,16088,"搜索树"],[-1,16095,"3$¥"],[-1,16252,"一个"],[1,16254,"取了"],[-1,16297,"了"],[1,16298,"\n"],[-1,16492,"\n。"],[1,16494,"最多"],[-1,16743,"\n"],[-1,17088,""],[1,17088,"]"],[1,17397,"一些"],[-1,17402,"\n\n"],[-1,17622,"\n\n"],[1,17624,"图中"],[1,17635,"\n\n"]],[13149,13149],[17637,17637]]],[1528706401136,[null,[[1,13149,"\n"],[-1,13750,"\n"],[-1,13776,"搜索的"],[1,13822,"K"],[-1,13823,"ni"],[1,13845,"\n"],[1,13847,"kn\n"],[-1,13891,"排序）"],[1,13898,"徐安娥"],[-1,14004,"节点。"],[1,14014," dd"],[-1,14138,"节点C"],[1,14143,"C"],[1,14183,"可"],[1,14197,"成"],[-1,15071,"中"],[1,15104,"略"],[-1,15108,"的话"],[1,15124,"统一"],[-1,15460,"棋盘"],[1,15479,"演示"],[1,15589,"yi懂"],[-1,15589,"合法的"],[1,15677,"\n"],[-1,15785,"\n"],[-1,16088,"搜索树"],[1,16098,"3$¥"],[1,16252,"一个"],[-1,16252,"取了"],[1,16297,"了"],[-1,16297,"\n"],[1,16492,"\n。"],[-1,16492,"最多"],[1,16743,"\n"],[1,17087,""],[-1,17087,"]"],[-1,17397,"一些"],[1,17404,"\n\n"],[1,17622,"\n\n"],[-1,17622,"图中"],[-1,17635,"\n\n"]],[17637,17637],[13149,13149]]],[1528706376973,["Re@Re.local",[[1,17635,"meiy"]],[17635,17635],[17639,17639]]],[1528706377830,["Re@Re.local",[[-1,17635,"meiy"]],[17639,17639],[17635,17635]]],[1528706380963,["Re@Re.local",[[1,17635,"没有"]],[17635,17635],[17637,17637]]],[1528706381280,["Re@Re.local",[[-1,17635,"没有"]],[17637,17637],[17635,17635]]],[1528706385149,["Re@Re.local",[[1,17635,"在深度"]],[17635,17635],[17638,17638]]],[1528706385483,["Re@Re.local",[[-1,17636,"深度"]],[17638,17638],[17636,17636]]],[1528706389078,["Re@Re.local",[[1,17636,"深度"]],[17636,17636],[17638,17638]]],[1528706389371,["Re@Re.local",[[-1,17636,"深度"]],[17638,17638],[17636,17636]]],[1528706395344,["Re@Re.local",[[1,17636,"DFS树中没有顶点么"]],[17636,17636],[17646,17646]]],[1528706395427,["Re@Re.local",[[-1,17645,"么"]],[17646,17646],[17645,17645]]],[1528706397176,["Re@Re.local",[[1,17645,"被一楼。"]],[17645,17645],[17649,17649]]],[1528706461317,[null,[[-1,13149,"\n"],[1,13751,"\n"],[1,13776,"搜索的"],[-1,13819,"K"],[1,13821,"ni"],[-1,13841,"\n"],[-1,13844,"kn\n"],[1,13891,"排序）"],[-1,13895,"徐安娥"],[1,14004,"节点。"],[-1,14011," dd"],[1,14138,"节点C"],[-1,14140,"C"],[-1,14181,"可"],[-1,14196,"成"],[1,15071,"中"],[-1,15103,"略"],[1,15108,"的话"],[-1,15122,"统一"],[1,15460,"棋盘"],[-1,15477,"演示"],[-1,15589,"yi懂"],[1,15592,"合法的"],[-1,15677,"\n"],[1,15786,"\n"],[1,16088,"搜索树"],[-1,16095,"3$¥"],[-1,16252,"一个"],[1,16254,"取了"],[-1,16297,"了"],[1,16298,"\n"],[-1,16492,"\n。"],[1,16494,"最多"],[-1,16743,"\n"],[-1,17088,""],[1,17088,"]"],[1,17397,"一些"],[-1,17402,"\n\n"],[-1,17622,"\n\n"],[1,17624,"图中"],[1,17649,"\n\n"]],[13149,13149],[17651,17651]]],[1528706461318,[null,[[1,13149,"\n"],[-1,13750,"\n"],[-1,13776,"搜索的"],[1,13822,"K"],[-1,13823,"ni"],[1,13845,"\n"],[1,13847,"kn\n"],[-1,13891,"排序）"],[1,13898,"徐安娥"],[-1,14004,"节点。"],[1,14014," dd"],[-1,14138,"节点C"],[1,14143,"C"],[1,14183,"可"],[1,14197,"成"],[-1,15071,"中"],[1,15104,"略"],[-1,15108,"的话"],[1,15124,"统一"],[-1,15460,"棋盘"],[1,15479,"演示"],[1,15589,"yi懂"],[-1,15589,"合法的"],[1,15677,"\n"],[-1,15785,"\n"],[-1,16088,"搜索树"],[1,16098,"3$¥"],[1,16252,"一个"],[-1,16252,"取了"],[1,16297,"了"],[-1,16297,"\n"],[1,16492,"\n。"],[-1,16492,"最多"],[1,16743,"\n"],[1,17087,""],[-1,17087,"]"],[-1,17397,"一些"],[1,17404,"\n\n"],[1,17622,"\n\n"],[-1,17622,"图中"],[-1,17649,"\n\n"]],[17651,17651],[13149,13149]]],[1528706412626,["Re@Re.local",[[1,17649,"for aVa"]],[17649,17649],[17656,17656]]],[1528706413373,["Re@Re.local",[[-1,17655,"a"]],[17656,17656],[17655,17655]]],[1528706424387,["Re@Re.local",[[1,17655,"vertex in self可能看起来有点奇怪，但实际上srl"]],[17655,17655],[17686,17686]]],[1528706425167,["Re@Re.local",[[-1,17683,"srl"]],[17686,17686],[17683,17683]]],[1528706441406,["Re@Re.local",[[1,17683,"这里的self是DFSGraph的一个实例，对"]],[17683,17683],[17706,17706]]],[1528706441571,["Re@Re.local",[[-1,17705,"对"]],[17706,17706],[17705,17705]]],[1528706447430,["Re@Re.local",[[1,17705,"对"]],[17705,17705],[17706,17706]]],[1528706447753,["Re@Re.local",[[-1,17705,"对"]],[17706,17706],[17705,17705]]],[1528706452959,["Re@Re.local",[[1,17705,"对图中"]],[17705,17705],[17708,17708]]],[1528706455659,["Re@Re.local",[[-1,17706,"图中"]],[17708,17708],[17706,17706]]],[1528706460644,["Re@Re.local",[[1,17706,"Graph实例中的所有"]],[17706,17706],[17717,17717]]],[1528706522002,[null,[[-1,13149,"\n"],[1,13751,"\n"],[1,13776,"搜索的"],[-1,13819,"K"],[1,13821,"ni"],[-1,13841,"\n"],[-1,13844,"kn\n"],[1,13891,"排序）"],[-1,13895,"徐安娥"],[1,14004,"节点。"],[-1,14011," dd"],[1,14138,"节点C"],[-1,14140,"C"],[-1,14181,"可"],[-1,14196,"成"],[1,15071,"中"],[-1,15103,"略"],[1,15108,"的话"],[-1,15122,"统一"],[1,15460,"棋盘"],[-1,15477,"演示"],[-1,15589,"yi懂"],[1,15592,"合法的"],[-1,15677,"\n"],[1,15786,"\n"],[1,16088,"搜索树"],[-1,16095,"3$¥"],[-1,16252,"一个"],[1,16254,"取了"],[-1,16297,"了"],[1,16298,"\n"],[-1,16492,"\n。"],[1,16494,"最多"],[-1,16743,"\n"],[-1,17088,""],[1,17088,"]"],[1,17397,"一些"],[-1,17402,"\n\n"],[-1,17622,"\n\n"],[1,17624,"图中"],[1,17717,"\n\n"]],[13149,13149],[17719,17719]]],[1528706522003,[null,[[1,13149,"\n"],[-1,13750,"\n"],[-1,13776,"搜索的"],[1,13822,"K"],[-1,13823,"ni"],[1,13845,"\n"],[1,13847,"kn\n"],[-1,13891,"排序）"],[1,13898,"徐安娥"],[-1,14004,"节点。"],[1,14014," dd"],[-1,14138,"节点C"],[1,14143,"C"],[1,14183,"可"],[1,14197,"成"],[-1,15071,"中"],[1,15104,"略"],[-1,15108,"的话"],[1,15124,"统一"],[-1,15460,"棋盘"],[1,15479,"演示"],[1,15589,"yi懂"],[-1,15589,"合法的"],[1,15677,"\n"],[-1,15785,"\n"],[-1,16088,"搜索树"],[1,16098,"3$¥"],[1,16252,"一个"],[-1,16252,"取了"],[1,16297,"了"],[-1,16297,"\n"],[1,16492,"\n。"],[-1,16492,"最多"],[1,16743,"\n"],[1,17087,""],[-1,17087,"]"],[-1,17397,"一些"],[1,17404,"\n\n"],[1,17622,"\n\n"],[-1,17622,"图中"],[-1,17717,"\n\n"]],[17719,17719],[13149,13149]]],[1528706468789,["Re@Re.local",[[1,17717,"顶点进行迭代是很常规的操作。"]],[17717,17717],[17731,17731]]],[1528706475386,["Re@Re.local",[[1,17733,"**代码5**"]],[17733,17733],[17740,17740]]],[1528706477410,["Re@Re.local",[[1,18555,"\n\n"]],[18555,18555],[18556,18556]]],[1528706477608,["Re@Re.local",[[1,18557,"\n"]],[18556,18556],[18557,18557]]],[1528706483835,["Re@Re.local",[[1,18556,"景观此次"]],[18556,18556],[18560,18560]]],[1528706484454,["Re@Re.local",[[-1,18556,"景观此次"]],[18560,18560],[18556,18556]]],[1528706484885,["Re@Re.local",[[1,18558,"\n"]],[18556,18556],[18557,18557]]],[1528706491900,["Re@Re.local",[[1,18557,"虽然这里给出的bfs实现"]],[18557,18557],[18569,18569]]],[1528706581920,[null,[[-1,13149,"\n"],[1,13751,"\n"],[1,13776,"搜索的"],[-1,13819,"K"],[1,13821,"ni"],[-1,13841,"\n"],[-1,13844,"kn\n"],[1,13891,"排序）"],[-1,13895,"徐安娥"],[1,14004,"节点。"],[-1,14011," dd"],[1,14138,"节点C"],[-1,14140,"C"],[-1,14181,"可"],[-1,14196,"成"],[1,15071,"中"],[-1,15103,"略"],[1,15108,"的话"],[-1,15122,"统一"],[1,15460,"棋盘"],[-1,15477,"演示"],[-1,15589,"yi懂"],[1,15592,"合法的"],[-1,15677,"\n"],[1,15786,"\n"],[1,16088,"搜索树"],[-1,16095,"3$¥"],[-1,16252,"一个"],[1,16254,"取了"],[-1,16297,"了"],[1,16298,"\n"],[-1,16492,"\n。"],[1,16494,"最多"],[-1,16743,"\n"],[-1,17088,""],[1,17088,"]"],[1,17397,"一些"],[-1,17402,"\n\n"],[-1,17622,"\n\n"],[1,17624,"图中"],[-1,17732,"`"],[1,17733,"\n"],[1,17740,"\n`"],[-1,18555,"\n\n"],[1,18569,"\n\n"]],[13149,13149],[18571,18571]]],[1528706581920,[null,[[1,13149,"\n"],[-1,13750,"\n"],[-1,13776,"搜索的"],[1,13822,"K"],[-1,13823,"ni"],[1,13845,"\n"],[1,13847,"kn\n"],[-1,13891,"排序）"],[1,13898,"徐安娥"],[-1,14004,"节点。"],[1,14014," dd"],[-1,14138,"节点C"],[1,14143,"C"],[1,14183,"可"],[1,14197,"成"],[-1,15071,"中"],[1,15104,"略"],[-1,15108,"的话"],[1,15124,"统一"],[-1,15460,"棋盘"],[1,15479,"演示"],[1,15589,"yi懂"],[-1,15589,"合法的"],[1,15677,"\n"],[-1,15785,"\n"],[-1,16088,"搜索树"],[1,16098,"3$¥"],[1,16252,"一个"],[-1,16252,"取了"],[1,16297,"了"],[-1,16297,"\n"],[1,16492,"\n。"],[-1,16492,"最多"],[1,16743,"\n"],[1,17087,""],[-1,17087,"]"],[-1,17397,"一些"],[1,17404,"\n\n"],[1,17622,"\n\n"],[-1,17622,"图中"],[1,17732,"`"],[-1,17732,"\n"],[-1,17740,"\n`"],[1,18557,"\n\n"],[-1,18569,"\n\n"]],[18571,18571],[13149,13149]]],[1528706525300,["Re@Re.local",[[1,18569,"是"]],[18569,18569],[18570,18570]]],[1528706525468,["Re@Re.local",[[-1,18569,"是"]],[18570,18570],[18569,18569]]],[1528706529522,["Re@Re.local",[[1,18569,"着重与"]],[18569,18569],[18572,18572]]],[1528706539931,["Re@Re.local",[[-1,18571,"与"]],[18572,18572],[18571,18571]]],[1528706548981,["Re@Re.local",[[1,18571,"于那些可以回到起到"]],[18571,18571],[18580,18580]]],[1528706553558,["Re@Re.local",[[-1,18576,"回到起到"]],[18580,18580],[18576,18576]]],[1528706564766,["Re@Re.local",[[1,18576,"通过某条路径回到起点的节点"]],[18576,18576],[18589,18589]]],[1528706571395,["Re@Re.local",[[-1,18569,"着重于"]],[18572,18572],[18569,18569]]],[1528706573083,["Re@Re.local",[[1,18569,"只考虑了"]],[18569,18569],[18573,18573]]],[1528706575299,["Re@Re.local",[[-1,18591,"\n"],[1,18592,"，"]],[18591,18591],[18592,18592]]],[1528706575828,["Re@Re.local",[[-1,18591,"，"],[1,18592,"\n"]],[18592,18592],[18591,18591]]],[1528706576010,["Re@Re.local",[[-1,18591,"\n"]],[18591,18591],[18590,18590]]],[1528706577718,["Re@Re.local",[[1,18590,"，但是"]],[18590,18590],[18593,18593]]],[1528706642031,[null,[[-1,13149,"\n"],[1,13751,"\n"],[1,13776,"搜索的"],[-1,13819,"K"],[1,13821,"ni"],[-1,13841,"\n"],[-1,13844,"kn\n"],[1,13891,"排序）"],[-1,13895,"徐安娥"],[1,14004,"节点。"],[-1,14011," dd"],[1,14138,"节点C"],[-1,14140,"C"],[-1,14181,"可"],[-1,14196,"成"],[1,15071,"中"],[-1,15103,"略"],[1,15108,"的话"],[-1,15122,"统一"],[1,15460,"棋盘"],[-1,15477,"演示"],[-1,15589,"yi懂"],[1,15592,"合法的"],[-1,15674,"\n"],[1,15785,"\n"],[1,16088,"搜索树"],[-1,16095,"3$¥"],[-1,16252,"一个"],[1,16254,"取了"],[-1,16297,"了"],[1,16298,"\n"],[-1,16492,"\n。"],[1,16494,"最多"],[-1,16743,"\n"],[-1,17088,""],[1,17088,"]"],[1,17397,"一些"],[-1,17402,"\n\n"],[-1,17622,"\n\n"],[1,17624,"图中"],[-1,17732,"`"],[1,17733,"\n"],[1,17740,"\n`"],[-1,18555,"\n\n"],[-1,18593,"，"],[1,18594,"\n"]],[13149,13149],[18595,18595]]],[1528706642032,[null,[[1,13149,"\n"],[-1,13750,"\n"],[-1,13776,"搜索的"],[1,13822,"K"],[-1,13823,"ni"],[1,13845,"\n"],[1,13847,"kn\n"],[-1,13891,"排序）"],[1,13898,"徐安娥"],[-1,14004,"节点。"],[1,14014," dd"],[-1,14138,"节点C"],[1,14143,"C"],[1,14183,"可"],[1,14197,"成"],[-1,15071,"中"],[1,15104,"略"],[-1,15108,"的话"],[1,15124,"统一"],[-1,15460,"棋盘"],[1,15479,"演示"],[1,15589,"yi懂"],[-1,15589,"合法的"],[1,15674,"\n"],[-1,15784,"\n"],[-1,16088,"搜索树"],[1,16098,"3$¥"],[1,16252,"一个"],[-1,16252,"取了"],[1,16297,"了"],[-1,16297,"\n"],[1,16492,"\n。"],[-1,16492,"最多"],[1,16743,"\n"],[1,17087,""],[-1,17087,"]"],[-1,17397,"一些"],[1,17404,"\n\n"],[1,17622,"\n\n"],[-1,17622,"图中"],[1,17732,"`"],[-1,17732,"\n"],[-1,17740,"\n`"],[1,18557,"\n\n"],[1,18593,"，"],[-1,18593,"\n"]],[18595,18595],[13149,13149]]],[1528706589694,["Re@Re.local",[[1,18593,"也可以省"]],[18593,18593],[18597,18597]]],[1528706589863,["Re@Re.local",[[-1,18596,"省"]],[18597,18597],[18596,18596]]],[1528706595078,["Re@Re.local",[[1,18596,"生成某个"]],[18596,18596],[18600,18600]]],[1528706595719,["Re@Re.local",[[-1,18598,"某个"]],[18600,18600],[18598,18598]]],[1528706597620,["Re@Re.local",[[1,18598,"宽度"]],[18598,18598],[18600,18600]]],[1528706598299,["Re@Re.local",[[-1,18598,"宽度"]],[18600,18600],[18598,18598]]],[1528706600047,["Re@Re.local",[[1,18598,"BF"]],[18598,18598],[18600,18600]]],[1528706602552,["Re@Re.local",[[-1,18598,"BF"]],[18600,18600],[18598,18598]]],[1528706607004,["Re@Re.local",[[1,18598,"BFS树"]],[18598,18598],[18602,18602]]],[1528706615587,["Re@Re.local",[[1,18598,"代表了图中各节点"]],[18598,18598],[18606,18606]]],[1528706617977,["Re@Re.local",[[-1,18598,"代表了图中各节点"]],[18606,18606],[18598,18598]]],[1528706627121,["Re@Re.local",[[1,18598,"表示图中各节点最短路径但"]],[18598,18598],[18610,18610]]],[1528706629746,["Re@Re.local",[[-1,18609,"但"]],[18610,18610],[18609,18609]]],[1528706630405,["Re@Re.local",[[1,18609,"的"]],[18609,18609],[18610,18610]]],[1528706641346,["Re@Re.local",[[1,18614,"。这就作为练习了。"]],[18614,18614],[18623,18623]]],[1528706702170,[null,[[-1,13149,"\n"],[1,13751,"\n"],[1,13776,"搜索的"],[-1,13819,"K"],[1,13821,"ni"],[-1,13841,"\n"],[-1,13844,"kn\n"],[1,13891,"排序）"],[-1,13895,"徐安娥"],[1,14004,"节点。"],[-1,14011," dd"],[1,14138,"节点C"],[-1,14140,"C"],[-1,14181,"可"],[-1,14196,"成"],[1,15071,"中"],[-1,15103,"略"],[1,15108,"的话"],[-1,15122,"统一"],[1,15460,"棋盘"],[-1,15477,"演示"],[-1,15589,"yi懂"],[1,15592,"合法的"],[-1,15674,"\n"],[1,15785,"\n"],[1,16088,"搜索树"],[-1,16095,"3$¥"],[-1,16252,"一个"],[1,16254,"取了"],[-1,16297,"了"],[1,16298,"\n"],[-1,16492,"\n。"],[1,16494,"最多"],[-1,16743,"\n"],[-1,17088,""],[1,17088,"]"],[1,17397,"一些"],[-1,17402,"\n\n"],[-1,17622,"\n\n"],[1,17624,"图中"],[-1,17732,"`"],[1,17733,"\n"],[1,17740,"\n`"],[-1,18555,"\n\n"],[-1,18623,"，"],[1,18624,"\n"]],[13149,13149],[18625,18625]]],[1528706702171,[null,[[1,13149,"\n"],[-1,13750,"\n"],[-1,13776,"搜索的"],[1,13822,"K"],[-1,13823,"ni"],[1,13845,"\n"],[1,13847,"kn\n"],[-1,13891,"排序）"],[1,13898,"徐安娥"],[-1,14004,"节点。"],[1,14014," dd"],[-1,14138,"节点C"],[1,14143,"C"],[1,14183,"可"],[1,14197,"成"],[-1,15071,"中"],[1,15104,"略"],[-1,15108,"的话"],[1,15124,"统一"],[-1,15460,"棋盘"],[1,15479,"演示"],[1,15589,"yi懂"],[-1,15589,"合法的"],[1,15674,"\n"],[-1,15784,"\n"],[-1,16088,"搜索树"],[1,16098,"3$¥"],[1,16252,"一个"],[-1,16252,"取了"],[1,16297,"了"],[-1,16297,"\n"],[1,16492,"\n。"],[-1,16492,"最多"],[1,16743,"\n"],[1,17087,""],[-1,17087,"]"],[-1,17397,"一些"],[1,17404,"\n\n"],[1,17622,"\n\n"],[-1,17622,"图中"],[1,17732,"`"],[-1,17732,"\n"],[-1,17740,"\n`"],[1,18557,"\n\n"],[1,18623,"，"],[-1,18623,"\n"]],[18625,18625],[13149,13149]]],[1528706670671,["Re@Re.local",[[1,18623,"在下面的两个"]],[18623,18623],[18629,18629]]],[1528706672376,["Re@Re.local",[[-1,18624,"下面的两个"]],[18629,18629],[18624,18624]]],[1528706674409,["Re@Re.local",[[1,18624,"后续的两个"]],[18624,18624],[18629,18629]]],[1528706674825,["Re@Re.local",[[-1,18627,"两个"]],[18629,18629],[18627,18627]]],[1528706678153,["Re@Re.local",[[1,18627,"2个算法中，可以"]],[18627,18627],[18635,18635]]],[1528706678510,["Re@Re.local",[[-1,18633,"可以"]],[18635,18635],[18633,18633]]],[1528706686351,["Re@Re.local",[[1,18633,"可以看出记录深度游"]],[18633,18633],[18642,18642]]],[1528706687654,["Re@Re.local",[[-1,18639,"深度游"]],[18642,18642],[18639,18639]]],[1528706691488,["Re@Re.local",[[1,18639,"DFS树是"]],[18639,18639],[18644,18644]]],[1528706691812,["Re@Re.local",[[-1,18642,"树是"]],[18644,18644],[18642,18642]]],[1528706693089,["Re@Re.local",[[1,18642,"森林"]],[18642,18642],[18644,18644]]],[1528706696742,["Re@Re.local",[[-1,18613,"树"]],[18614,18614],[18613,18613]]],[1528706697710,["Re@Re.local",[[1,18613,"森林"]],[18613,18613],[18615,18615]]],[1528706762162,[null,[[-1,13149,"\n"],[1,13751,"\n"],[1,13776,"搜索的"],[-1,13819,"K"],[1,13821,"ni"],[-1,13841,"\n"],[-1,13844,"kn\n"],[1,13891,"排序）"],[-1,13895,"徐安娥"],[1,14004,"节点。"],[-1,14011," dd"],[1,14138,"节点C"],[-1,14140,"C"],[-1,14181,"可"],[-1,14196,"成"],[1,15071,"中"],[-1,15103,"略"],[1,15108,"的话"],[-1,15122,"统一"],[1,15460,"棋盘"],[-1,15477,"演示"],[-1,15589,"yi懂"],[1,15592,"合法的"],[-1,15674,"\n"],[1,15785,"\n"],[1,16088,"搜索树"],[-1,16095,"3$¥"],[-1,16252,"一个"],[1,16254,"取了"],[-1,16297,"了"],[1,16298,"\n"],[-1,16492,"\n。"],[1,16494,"最多"],[-1,16743,"\n"],[-1,17088,""],[1,17088,"]"],[1,17397,"一些"],[-1,17402,"\n\n"],[-1,17622,"\n\n"],[1,17624,"图中"],[-1,17732,"`"],[1,17733,"\n"],[1,17740,"\n`"],[-1,18555,"\n\n"],[-1,18645,"，"],[1,18646,"\n"]],[13149,13149],[18647,18647]]],[1528706762163,[null,[[1,13149,"\n"],[-1,13750,"\n"],[-1,13776,"搜索的"],[1,13822,"K"],[-1,13823,"ni"],[1,13845,"\n"],[1,13847,"kn\n"],[-1,13891,"排序）"],[1,13898,"徐安娥"],[-1,14004,"节点。"],[1,14014," dd"],[-1,14138,"节点C"],[1,14143,"C"],[1,14183,"可"],[1,14197,"成"],[-1,15071,"中"],[1,15104,"略"],[-1,15108,"的话"],[1,15124,"统一"],[-1,15460,"棋盘"],[1,15479,"演示"],[1,15589,"yi懂"],[-1,15589,"合法的"],[1,15674,"\n"],[-1,15784,"\n"],[-1,16088,"搜索树"],[1,16098,"3$¥"],[1,16252,"一个"],[-1,16252,"取了"],[1,16297,"了"],[-1,16297,"\n"],[1,16492,"\n。"],[-1,16492,"最多"],[1,16743,"\n"],[1,17087,""],[-1,17087,"]"],[-1,17397,"一些"],[1,17404,"\n\n"],[1,17622,"\n\n"],[-1,17622,"图中"],[1,17732,"`"],[-1,17732,"\n"],[-1,17740,"\n`"],[1,18557,"\n\n"],[1,18645,"，"],[-1,18645,"\n"]],[18647,18647],[13149,13149]]],[1528706719042,["Re@Re.local",[[1,18645,"的重要性了"]],[18645,18645],[18650,18650]]],[1528706719293,["Re@Re.local",[[-1,18649,"了"]],[18650,18650],[18649,18649]]],[1528706719595,["Re@Re.local",[[1,18649,"。"]],[18649,18649],[18650,18650]]],[1528706719848,["Re@Re.local",[[1,18651,"\n"]],[18650,18650],[18651,18651]]],[1528706720071,["Re@Re.local",[[1,18652,"\n"]],[18651,18651],[18652,18652]]],[1528706725882,["Re@Re.local",[[-1,18652,"\n"],[1,18653,"dfsvisit方法从大"]],[18652,18652],[18664,18664]]],[1528706726015,["Re@Re.local",[[-1,18663,"大"]],[18664,18664],[18663,18663]]],[1528706728930,["Re@Re.local",[[1,18663,"家"]],[18663,18663],[18664,18664]]],[1528706729013,["Re@Re.local",[[-1,18663,"家"]],[18664,18664],[18663,18663]]],[1528706738746,["Re@Re.local",[[1,18663,"startVertex这一单节点出发，然后"]],[18663,18663],[18684,18684]]],[1528706739133,["Re@Re.local",[[-1,18682,"然后"]],[18684,18684],[18682,18682]]],[1528706745194,["Re@Re.local",[[1,18682,"探索所有"]],[18682,18682],[18686,18686]]],[1528706746204,["Re@Re.local",[[-1,18682,"探索所有"]],[18686,18686],[18682,18682]]],[1528706747788,["Re@Re.local",[[1,18682,"今肯恩那个"]],[18682,18682],[18687,18687]]],[1528706748580,["Re@Re.local",[[-1,18682,"今肯恩那个"]],[18687,18687],[18682,18682]]],[1528706758088,["Re@Re.local",[[1,18682,"尽可能地探索所有临近"]],[18682,18682],[18692,18692]]],[1528706759146,["Re@Re.local",[[-1,18690,"临近"]],[18692,18692],[18690,18690]]],[1528706822159,[null,[[-1,13149,"\n"],[1,13751,"\n"],[1,13776,"搜索的"],[-1,13819,"K"],[1,13821,"ni"],[-1,13841,"\n"],[-1,13844,"kn\n"],[1,13891,"排序）"],[-1,13895,"徐安娥"],[1,14004,"节点。"],[-1,14011," dd"],[1,14138,"节点C"],[-1,14140,"C"],[-1,14181,"可"],[-1,14196,"成"],[1,15071,"中"],[-1,15103,"略"],[1,15108,"的话"],[-1,15122,"统一"],[1,15460,"棋盘"],[-1,15477,"演示"],[-1,15589,"yi懂"],[1,15592,"合法的"],[-1,15674,"\n"],[1,15785,"\n"],[1,16088,"搜索树"],[-1,16095,"3$¥"],[-1,16252,"一个"],[1,16254,"取了"],[-1,16297,"了"],[1,16298,"\n"],[-1,16492,"\n。"],[1,16494,"最多"],[-1,16743,"\n"],[-1,17088,""],[1,17088,"]"],[1,17397,"一些"],[-1,17402,"\n\n"],[-1,17622,"\n\n"],[1,17624,"图中"],[-1,17732,"`"],[1,17733,"\n"],[1,17740,"\n`"],[-1,18555,"\n\n"],[-1,18650,"，"],[1,18651,"\n"]],[13149,13149],[18652,18652]]],[1528706822159,[null,[[1,13149,"\n"],[-1,13750,"\n"],[-1,13776,"搜索的"],[1,13822,"K"],[-1,13823,"ni"],[1,13845,"\n"],[1,13847,"kn\n"],[-1,13891,"排序）"],[1,13898,"徐安娥"],[-1,14004,"节点。"],[1,14014," dd"],[-1,14138,"节点C"],[1,14143,"C"],[1,14183,"可"],[1,14197,"成"],[-1,15071,"中"],[1,15104,"略"],[-1,15108,"的话"],[1,15124,"统一"],[-1,15460,"棋盘"],[1,15479,"演示"],[1,15589,"yi懂"],[-1,15589,"合法的"],[1,15674,"\n"],[-1,15784,"\n"],[-1,16088,"搜索树"],[1,16098,"3$¥"],[1,16252,"一个"],[-1,16252,"取了"],[1,16297,"了"],[-1,16297,"\n"],[1,16492,"\n。"],[-1,16492,"最多"],[1,16743,"\n"],[1,17087,""],[-1,17087,"]"],[-1,17397,"一些"],[1,17404,"\n\n"],[1,17622,"\n\n"],[-1,17622,"图中"],[1,17732,"`"],[-1,17732,"\n"],[-1,17740,"\n`"],[1,18557,"\n\n"],[1,18650,"，"],[-1,18650,"\n"]],[18652,18652],[13149,13149]]],[1528706769720,["Re@Re.local",[[1,18690,"邻接白色顶带你。如果"]],[18690,18690],[18700,18700]]],[1528706771009,["Re@Re.local",[[-1,18694,"顶带你。如果"]],[18700,18700],[18694,18694]]],[1528706775759,["Re@Re.local",[[1,18694,"顶点。如果读者又"]],[18694,18694],[18702,18702]]],[1528706775857,["Re@Re.local",[[-1,18701,"又"]],[18702,18702],[18701,18701]]],[1528706792906,["Re@Re.local",[[1,18701,"仔细地研究dfsvisit的代码并且将其于BFS对比，可以发现dfsvisits"]],[18701,18701],[18741,18741]]],[1528706793261,["Re@Re.local",[[-1,18740,"s"]],[18741,18741],[18740,18740]]],[1528706820718,["Re@Re.local",[[1,18740,"算法几乎等同于bfs，除了for循环中的最后1行，dfsvisit掉"]],[18740,18740],[18774,18774]]],[1528706820818,["Re@Re.local",[[-1,18773,"掉"]],[18774,18774],[18773,18773]]],[1528706882212,[null,[[-1,13149,"\n"],[1,13751,"\n"],[1,13776,"搜索的"],[-1,13819,"K"],[1,13821,"ni"],[-1,13841,"\n"],[-1,13844,"kn\n"],[1,13891,"排序）"],[-1,13895,"徐安娥"],[1,14004,"节点。"],[-1,14011," dd"],[1,14138,"节点C"],[-1,14140,"C"],[-1,14181,"可"],[-1,14196,"成"],[1,15071,"中"],[-1,15103,"略"],[1,15108,"的话"],[-1,15122,"统一"],[1,15460,"棋盘"],[-1,15477,"演示"],[-1,15589,"yi懂"],[1,15592,"合法的"],[-1,15674,"\n"],[1,15785,"\n"],[1,16088,"搜索树"],[-1,16095,"3$¥"],[-1,16252,"一个"],[1,16254,"取了"],[-1,16297,"了"],[1,16298,"\n"],[-1,16492,"\n。"],[1,16494,"最多"],[-1,16743,"\n"],[-1,17088,""],[1,17088,"]"],[1,17397,"一些"],[-1,17402,"\n\n"],[-1,17622,"\n\n"],[1,17624,"图中"],[-1,17732,"`"],[1,17733,"\n"],[1,17740,"\n`"],[-1,18555,"\n\n"],[-1,18650,"，"],[1,18651,"\n"]],[13149,13149],[18652,18652]]],[1528706882213,[null,[[1,13149,"\n"],[-1,13750,"\n"],[-1,13776,"搜索的"],[1,13822,"K"],[-1,13823,"ni"],[1,13845,"\n"],[1,13847,"kn\n"],[-1,13891,"排序）"],[1,13898,"徐安娥"],[-1,14004,"节点。"],[1,14014," dd"],[-1,14138,"节点C"],[1,14143,"C"],[1,14183,"可"],[1,14197,"成"],[-1,15071,"中"],[1,15104,"略"],[-1,15108,"的话"],[1,15124,"统一"],[-1,15460,"棋盘"],[1,15479,"演示"],[1,15589,"yi懂"],[-1,15589,"合法的"],[1,15674,"\n"],[-1,15784,"\n"],[-1,16088,"搜索树"],[1,16098,"3$¥"],[1,16252,"一个"],[-1,16252,"取了"],[1,16297,"了"],[-1,16297,"\n"],[1,16492,"\n。"],[-1,16492,"最多"],[1,16743,"\n"],[1,17087,""],[-1,17087,"]"],[-1,17397,"一些"],[1,17404,"\n\n"],[1,17622,"\n\n"],[-1,17622,"图中"],[1,17732,"`"],[-1,17732,"\n"],[-1,17740,"\n`"],[1,18557,"\n\n"],[1,18650,"，"],[-1,18650,"\n"]],[18652,18652],[13149,13149]]],[1528706833567,["Re@Re.local",[[1,18773,"递归地调用其本身以向是"]],[18773,18773],[18784,18784]]],[1528706833643,["Re@Re.local",[[-1,18783,"是"]],[18784,18784],[18783,18783]]],[1528706837647,["Re@Re.local",[[1,18783,"更深的层仅"]],[18783,18783],[18788,18788]]],[1528706837779,["Re@Re.local",[[-1,18787,"仅"]],[18788,18788],[18787,18787]]],[1528706842553,["Re@Re.local",[[1,18787,"继续搜索，而bfs方法"]],[18787,18787],[18798,18798]]],[1528706846840,["Re@Re.local",[[-1,18796,"方法"]],[18798,18798],[18796,18796]]],[1528706863427,["Re@Re.local",[[1,18796,"将该节点加入队列供以后搜索。"]],[18796,18796],[18810,18810]]],[1528707002167,[null,[[-1,13149,"\n"],[1,13751,"\n"],[1,13776,"搜索的"],[-1,13819,"K"],[1,13821,"ni"],[-1,13841,"\n"],[-1,13844,"kn\n"],[1,13891,"排序）"],[-1,13895,"徐安娥"],[1,14004,"节点。"],[-1,14011," dd"],[1,14138,"节点C"],[-1,14140,"C"],[-1,14181,"可"],[-1,14196,"成"],[1,15071,"中"],[-1,15103,"略"],[1,15108,"的话"],[-1,15122,"统一"],[1,15460,"棋盘"],[-1,15477,"演示"],[-1,15589,"yi懂"],[1,15592,"合法的"],[-1,15674,"\n"],[1,15785,"\n"],[1,16088,"搜索树"],[-1,16095,"3$¥"],[-1,16252,"一个"],[1,16254,"取了"],[-1,16297,"了"],[1,16298,"\n"],[-1,16492,"\n。"],[1,16494,"最多"],[-1,16743,"\n"],[-1,17088,""],[1,17088,"]"],[1,17397,"一些"],[-1,17402,"\n\n"],[-1,17622,"\n\n"],[1,17624,"图中"],[-1,17732,"`"],[1,17733,"\n"],[1,17740,"\n`"],[-1,18555,"\n\n"],[-1,18650,"，"],[1,18651,"\n"]],[13149,13149],[18652,18652]]],[1528707002167,[null,[[1,13149,"\n"],[-1,13750,"\n"],[-1,13776,"搜索的"],[1,13822,"K"],[-1,13823,"ni"],[1,13845,"\n"],[1,13847,"kn\n"],[-1,13891,"排序）"],[1,13898,"徐安娥"],[-1,14004,"节点。"],[1,14014," dd"],[-1,14138,"节点C"],[1,14143,"C"],[1,14183,"可"],[1,14197,"成"],[-1,15071,"中"],[1,15104,"略"],[-1,15108,"的话"],[1,15124,"统一"],[-1,15460,"棋盘"],[1,15479,"演示"],[1,15589,"yi懂"],[-1,15589,"合法的"],[1,15674,"\n"],[-1,15784,"\n"],[-1,16088,"搜索树"],[1,16098,"3$¥"],[1,16252,"一个"],[-1,16252,"取了"],[1,16297,"了"],[-1,16297,"\n"],[1,16492,"\n。"],[-1,16492,"最多"],[1,16743,"\n"],[1,17087,""],[-1,17087,"]"],[-1,17397,"一些"],[1,17404,"\n\n"],[1,17622,"\n\n"],[-1,17622,"图中"],[1,17732,"`"],[-1,17732,"\n"],[-1,17740,"\n`"],[1,18557,"\n\n"],[1,18650,"，"],[-1,18650,"\n"]],[18652,18652],[13149,13149]]],[1528706948126,["Re@Re.local",[[1,18810,"\n\n"]],[18810,18810],[18811,18811]]],[1528706948350,["Re@Re.local",[[1,18812,"\n"]],[18811,18811],[18812,18812]]],[1528706963793,["Re@Re.local",[[-1,18812,"\n"]],[18812,18812],[0,0]]],[1528706967911,["Re@Re.local",[[1,18812,"\n\n"]],[18812,18812],[18813,18813]]],[1528706979537,["Re@Re.local",[[-1,18813,"\n"]],[18813,18813],[18812,18812]]],[1528706979840,["Re@Re.local",[[-1,18812,"\n"]],[18812,18812],[18811,18811]]],[1528706980467,["Re@Re.local",[[-1,18811,"\n"]],[18811,18811],[18810,18810]]],[1528706999186,["Re@Re.local",[[1,18810,"有趣的是，bfs使用的是队列，而dfsvisit使用的是"]],[18810,18810],[18838,18838]]],[1528707062611,[null,[[-1,13149,"\n"],[1,13751,"\n"],[1,13776,"搜索的"],[-1,13819,"K"],[1,13821,"ni"],[-1,13841,"\n"],[-1,13844,"kn\n"],[1,13891,"排序）"],[-1,13895,"徐安娥"],[1,14004,"节点。"],[-1,14011," dd"],[1,14138,"节点C"],[-1,14140,"C"],[-1,14181,"可"],[-1,14196,"成"],[1,15071,"中"],[-1,15103,"略"],[1,15108,"的话"],[-1,15122,"统一"],[1,15460,"棋盘"],[-1,15477,"演示"],[-1,15589,"yi懂"],[1,15592,"合法的"],[-1,15674,"\n"],[1,15785,"\n"],[1,16088,"搜索树"],[-1,16095,"3$¥"],[-1,16252,"一个"],[1,16254,"取了"],[-1,16297,"了"],[1,16298,"\n"],[-1,16492,"\n。"],[1,16494,"最多"],[-1,16743,"\n"],[-1,17088,""],[1,17088,"]"],[1,17397,"一些"],[-1,17402,"\n\n"],[-1,17622,"\n\n"],[1,17624,"图中"],[-1,17732,"`"],[1,17733,"\n"],[1,17740,"\n`"],[-1,18555,"\n\n"],[-1,18650,"，"],[1,18651,"\n"]],[13149,13149],[18652,18652]]],[1528707062611,[null,[[1,13149,"\n"],[-1,13750,"\n"],[-1,13776,"搜索的"],[1,13822,"K"],[-1,13823,"ni"],[1,13845,"\n"],[1,13847,"kn\n"],[-1,13891,"排序）"],[1,13898,"徐安娥"],[-1,14004,"节点。"],[1,14014," dd"],[-1,14138,"节点C"],[1,14143,"C"],[1,14183,"可"],[1,14197,"成"],[-1,15071,"中"],[1,15104,"略"],[-1,15108,"的话"],[1,15124,"统一"],[-1,15460,"棋盘"],[1,15479,"演示"],[1,15589,"yi懂"],[-1,15589,"合法的"],[1,15674,"\n"],[-1,15784,"\n"],[-1,16088,"搜索树"],[1,16098,"3$¥"],[1,16252,"一个"],[-1,16252,"取了"],[1,16297,"了"],[-1,16297,"\n"],[1,16492,"\n。"],[-1,16492,"最多"],[1,16743,"\n"],[1,17087,""],[-1,17087,"]"],[-1,17397,"一些"],[1,17404,"\n\n"],[1,17622,"\n\n"],[-1,17622,"图中"],[1,17732,"`"],[-1,17732,"\n"],[-1,17740,"\n`"],[1,18557,"\n\n"],[1,18650,"，"],[-1,18650,"\n"]],[18652,18652],[13149,13149]]],[1528707032805,["Re@Re.local",[[1,18838,"栈。当然读者并不能在代码中看到栈，实际上是通过递归调用dfsvisit而使用了栈。"]],[18838,18838],[18879,18879]]],[1528707033083,["Re@Re.local",[[1,18880,"\n"]],[18879,18879],[18880,18880]]],[1528707033266,["Re@Re.local",[[1,18881,"\n"]],[18880,18880],[18881,18881]]],[1528707048105,["Re@Re.local",[[-1,18881,"\n"],[1,18882,"下面的1组图是以"]],[18881,18881],[18889,18889]]],[1528707048912,["Re@Re.local",[[-1,18887,"是以"]],[18889,18889],[18887,18887]]],[1528707057639,["Re@Re.local",[[1,18887,"是以了深度优先搜索算法"]],[18887,18887],[18898,18898]]],[1528707061381,["Re@Re.local",[[-1,18887,"是以了"]],[18890,18890],[18887,18887]]],[1528707122231,[null,[[-1,13149,"\n"],[1,13751,"\n"],[1,13776,"搜索的"],[-1,13819,"K"],[1,13821,"ni"],[-1,13841,"\n"],[-1,13844,"kn\n"],[1,13891,"排序）"],[-1,13895,"徐安娥"],[1,14004,"节点。"],[-1,14011," dd"],[1,14138,"节点C"],[-1,14140,"C"],[-1,14181,"可"],[-1,14196,"成"],[1,15071,"中"],[-1,15103,"略"],[1,15108,"的话"],[-1,15122,"统一"],[1,15460,"棋盘"],[-1,15477,"演示"],[-1,15589,"yi懂"],[1,15592,"合法的"],[-1,15674,"\n"],[1,15785,"\n"],[1,16088,"搜索树"],[-1,16095,"3$¥"],[-1,16252,"一个"],[1,16254,"取了"],[-1,16297,"了"],[1,16298,"\n"],[-1,16492,"\n。"],[1,16494,"最多"],[-1,16743,"\n"],[-1,17088,""],[1,17088,"]"],[1,17397,"一些"],[-1,17402,"\n\n"],[-1,17622,"\n\n"],[1,17624,"图中"],[-1,17732,"`"],[1,17733,"\n"],[1,17740,"\n`"],[-1,18555,"\n\n"],[-1,18650,"，"],[1,18651,"\n"]],[13149,13149],[18652,18652]]],[1528707122232,[null,[[1,13149,"\n"],[-1,13750,"\n"],[-1,13776,"搜索的"],[1,13822,"K"],[-1,13823,"ni"],[1,13845,"\n"],[1,13847,"kn\n"],[-1,13891,"排序）"],[1,13898,"徐安娥"],[-1,14004,"节点。"],[1,14014," dd"],[-1,14138,"节点C"],[1,14143,"C"],[1,14183,"可"],[1,14197,"成"],[-1,15071,"中"],[1,15104,"略"],[-1,15108,"的话"],[1,15124,"统一"],[-1,15460,"棋盘"],[1,15479,"演示"],[1,15589,"yi懂"],[-1,15589,"合法的"],[1,15674,"\n"],[-1,15784,"\n"],[-1,16088,"搜索树"],[1,16098,"3$¥"],[1,16252,"一个"],[-1,16252,"取了"],[1,16297,"了"],[-1,16297,"\n"],[1,16492,"\n。"],[-1,16492,"最多"],[1,16743,"\n"],[1,17087,""],[-1,17087,"]"],[-1,17397,"一些"],[1,17404,"\n\n"],[1,17622,"\n\n"],[-1,17622,"图中"],[1,17732,"`"],[-1,17732,"\n"],[-1,17740,"\n`"],[1,18557,"\n\n"],[1,18650,"，"],[-1,18650,"\n"]],[18652,18652],[13149,13149]]],[1528707066527,["Re@Re.local",[[1,18890,"用于小图的"]],[18890,18890],[18895,18895]]],[1528707073261,["Re@Re.local",[[1,18903,"是"]],[18903,18903],[18904,18904]]],[1528707073397,["Re@Re.local",[[-1,18903,"是"]],[18904,18904],[18903,18903]]],[1528707084120,["Re@Re.local",[[1,18903,"的实际运行。在这些图中，下滑"]],[18903,18903],[18917,18917]]],[1528707084486,["Re@Re.local",[[-1,18915,"下滑"]],[18917,18917],[18915,18915]]],[1528707103263,["Re@Re.local",[[1,18915,"许仙"]],[18915,18915],[18917,18917]]],[1528707104015,["Re@Re.local",[[-1,18915,"许仙"]],[18917,18917],[18915,18915]]],[1528707108674,["Re@Re.local",[[1,18915,"虚线表示该便"]],[18915,18915],[18921,18921]]],[1528707109363,["Re@Re.local",[[-1,18919,"该便"]],[18921,18921],[18919,18919]]],[1528707114245,["Re@Re.local",[[1,18919,"检查过的边，"]],[18919,18919],[18925,18925]]],[1528707182195,[null,[[-1,13149,"\n"],[1,13751,"\n"],[1,13776,"搜索的"],[-1,13819,"K"],[1,13821,"ni"],[-1,13841,"\n"],[-1,13844,"kn\n"],[1,13891,"排序）"],[-1,13895,"徐安娥"],[1,14004,"节点。"],[-1,14011," dd"],[1,14138,"节点C"],[-1,14140,"C"],[-1,14181,"可"],[-1,14196,"成"],[1,15071,"中"],[-1,15103,"略"],[1,15108,"的话"],[-1,15122,"统一"],[1,15460,"棋盘"],[-1,15477,"演示"],[-1,15589,"yi懂"],[1,15592,"合法的"],[-1,15674,"\n"],[1,15785,"\n"],[1,16088,"搜索树"],[-1,16095,"3$¥"],[-1,16252,"一个"],[1,16254,"取了"],[-1,16297,"了"],[1,16298,"\n"],[-1,16492,"\n。"],[1,16494,"最多"],[-1,16743,"\n"],[-1,17088,""],[1,17088,"]"],[1,17397,"一些"],[-1,17402,"\n\n"],[-1,17622,"\n\n"],[1,17624,"图中"],[-1,17732,"`"],[1,17733,"\n"],[1,17740,"\n`"],[-1,18555,"\n\n"],[-1,18650,"，"],[1,18651,"\n"],[-1,18887,"深度优"],[1,18890,"演示了"],[1,18895,"深度优"],[-1,18900,"是"],[-1,18913,"下滑"]],[13149,13149],[18913,18913]]],[1528707182196,[null,[[1,13149,"\n"],[-1,13750,"\n"],[-1,13776,"搜索的"],[1,13822,"K"],[-1,13823,"ni"],[1,13845,"\n"],[1,13847,"kn\n"],[-1,13891,"排序）"],[1,13898,"徐安娥"],[-1,14004,"节点。"],[1,14014," dd"],[-1,14138,"节点C"],[1,14143,"C"],[1,14183,"可"],[1,14197,"成"],[-1,15071,"中"],[1,15104,"略"],[-1,15108,"的话"],[1,15124,"统一"],[-1,15460,"棋盘"],[1,15479,"演示"],[1,15589,"yi懂"],[-1,15589,"合法的"],[1,15674,"\n"],[-1,15784,"\n"],[-1,16088,"搜索树"],[1,16098,"3$¥"],[1,16252,"一个"],[-1,16252,"取了"],[1,16297,"了"],[-1,16297,"\n"],[1,16492,"\n。"],[-1,16492,"最多"],[1,16743,"\n"],[1,17087,""],[-1,17087,"]"],[-1,17397,"一些"],[1,17404,"\n\n"],[1,17622,"\n\n"],[-1,17622,"图中"],[1,17732,"`"],[-1,17732,"\n"],[-1,17740,"\n`"],[1,18557,"\n\n"],[1,18650,"，"],[-1,18650,"\n"],[1,18887,"深度优"],[-1,18887,"演示了"],[-1,18895,"深度优"],[1,18903,"是"],[1,18915,"下滑"]],[18913,18913],[13149,13149]]],[1528707145021,["Re@Re.local",[[1,18925,"但在另一段"]],[18925,18925],[18930,18930]]],[1528707152909,["Re@Re.local",[[-1,18925,"但在另一段"]],[18930,18930],[18925,18925]]],[1528707157721,["Re@Re.local",[[1,18925,"但边的另一段"]],[18925,18925],[18931,18931]]],[1528707158977,["Re@Re.local",[[-1,18930,"段"]],[18931,18931],[18930,18930]]],[1528707181236,["Re@Re.local",[[1,18930,"端的节点已经被加入了深度优先树。在代码中，这是通过检查"]],[18930,18930],[18957,18957]]],[1528707242318,[null,[[-1,13149,"\n"],[1,13751,"\n"],[1,13776,"搜索的"],[-1,13819,"K"],[1,13821,"ni"],[-1,13841,"\n"],[-1,13844,"kn\n"],[1,13891,"排序）"],[-1,13895,"徐安娥"],[1,14004,"节点。"],[-1,14011," dd"],[1,14138,"节点C"],[-1,14140,"C"],[-1,14181,"可"],[-1,14196,"成"],[1,15071,"中"],[-1,15103,"略"],[1,15108,"的话"],[-1,15122,"统一"],[1,15460,"棋盘"],[-1,15477,"演示"],[-1,15589,"yi懂"],[1,15592,"合法的"],[-1,15674,"\n"],[1,15785,"\n"],[1,16088,"搜索树"],[-1,16095,"3$¥"],[-1,16252,"一个"],[1,16254,"取了"],[-1,16297,"了"],[1,16298,"\n"],[-1,16492,"\n。"],[1,16494,"最多"],[-1,16743,"\n"],[-1,17088,""],[1,17088,"]"],[1,17397,"一些"],[-1,17402,"\n\n"],[-1,17622,"\n\n"],[1,17624,"图中"],[-1,17732,"`"],[1,17733,"\n"],[1,17740,"\n`"],[-1,18555,"\n\n"],[-1,18650,"，"],[1,18651,"\n"],[-1,18887,"深度优"],[1,18890,"演示了"],[1,18895,"深度优"],[-1,18900,"是"],[-1,18913,"下滑"]],[13149,13149],[18913,18913]]],[1528707242318,[null,[[1,13149,"\n"],[-1,13750,"\n"],[-1,13776,"搜索的"],[1,13822,"K"],[-1,13823,"ni"],[1,13845,"\n"],[1,13847,"kn\n"],[-1,13891,"排序）"],[1,13898,"徐安娥"],[-1,14004,"节点。"],[1,14014," dd"],[-1,14138,"节点C"],[1,14143,"C"],[1,14183,"可"],[1,14197,"成"],[-1,15071,"中"],[1,15104,"略"],[-1,15108,"的话"],[1,15124,"统一"],[-1,15460,"棋盘"],[1,15479,"演示"],[1,15589,"yi懂"],[-1,15589,"合法的"],[1,15674,"\n"],[-1,15784,"\n"],[-1,16088,"搜索树"],[1,16098,"3$¥"],[1,16252,"一个"],[-1,16252,"取了"],[1,16297,"了"],[-1,16297,"\n"],[1,16492,"\n。"],[-1,16492,"最多"],[1,16743,"\n"],[1,17087,""],[-1,17087,"]"],[-1,17397,"一些"],[1,17404,"\n\n"],[1,17622,"\n\n"],[-1,17622,"图中"],[1,17732,"`"],[-1,17732,"\n"],[-1,17740,"\n`"],[1,18557,"\n\n"],[1,18650,"，"],[-1,18650,"\n"],[1,18887,"深度优"],[-1,18887,"演示了"],[-1,18895,"深度优"],[1,18903,"是"],[1,18915,"下滑"]],[18913,18913],[13149,13149]]],[1528707200626,["Re@Re.local",[[1,18957,"另一节点的颜色为非白色。"]],[18957,18957],[18969,18969]]],[1528707201156,["Re@Re.local",[[1,18969,"\n\n"]],[18969,18969],[18970,18970]]],[1528707201351,["Re@Re.local",[[1,18971,"\n"]],[18970,18970],[18971,18971]]],[1528707207975,["Re@Re.local",[[-1,18968,"。"]],[18969,18969],[18968,18968]]],[1528707210076,["Re@Re.local",[[1,18968,"来实现的。"]],[18968,18968],[18973,18973]]],[1528707210269,["Re@Re.local",[[1,18976,"\n"]],[18973,18973],[18974,18974]]],[1528707210456,["Re@Re.local",[[1,18977,"\n"]],[18974,18974],[18975,18975]]],[1528707216043,["Re@Re.local",[[1,18975,"嗖嗖"]],[18975,18975],[18977,18977]]],[1528707216826,["Re@Re.local",[[-1,18975,"嗖嗖"]],[18977,18977],[18975,18975]]],[1528707219476,["Re@Re.local",[[1,18975,"搜索从顶点A"]],[18975,18975],[18981,18981]]],[1528707221884,["Re@Re.local",[[1,18978,"图中的"]],[18978,18978],[18981,18981]]],[1528707228743,["Re@Re.local",[[1,18984,"（图14）开始。因为所有的"]],[18984,18984],[18997,18997]]],[1528707239728,["Re@Re.local",[[-1,18992,"因为所有的"]],[18997,18997],[18992,18992]]],[1528707241652,["Re@Re.local",[[1,18992,"由于"]],[18992,18992],[18994,18994]]],[1528707302216,[null,[[-1,13149,"\n"],[1,13751,"\n"],[1,13776,"搜索的"],[-1,13819,"K"],[1,13821,"ni"],[-1,13841,"\n"],[-1,13844,"kn\n"],[1,13891,"排序）"],[-1,13895,"徐安娥"],[1,14004,"节点。"],[-1,14011," dd"],[1,14138,"节点C"],[-1,14140,"C"],[-1,14181,"可"],[-1,14196,"成"],[1,15071,"中"],[-1,15103,"略"],[1,15108,"的话"],[-1,15122,"统一"],[1,15460,"棋盘"],[-1,15477,"演示"],[-1,15589,"yi懂"],[1,15592,"合法的"],[-1,15674,"\n"],[1,15785,"\n"],[1,16088,"搜索树"],[-1,16095,"3$¥"],[-1,16252,"一个"],[1,16254,"取了"],[-1,16297,"了"],[1,16298,"\n"],[-1,16492,"\n。"],[1,16494,"最多"],[-1,16743,"\n"],[-1,17088,""],[1,17088,"]"],[1,17397,"一些"],[-1,17402,"\n\n"],[-1,17622,"\n\n"],[1,17624,"图中"],[-1,17732,"`"],[1,17733,"\n"],[1,17740,"\n`"],[-1,18555,"\n\n"],[-1,18650,"，"],[1,18651,"\n"],[-1,18887,"深度优"],[1,18890,"演示了"],[1,18895,"深度优"],[-1,18900,"是"],[-1,18913,"下滑"]],[13149,13149],[18913,18913]]],[1528707302216,[null,[[1,13149,"\n"],[-1,13750,"\n"],[-1,13776,"搜索的"],[1,13822,"K"],[-1,13823,"ni"],[1,13845,"\n"],[1,13847,"kn\n"],[-1,13891,"排序）"],[1,13898,"徐安娥"],[-1,14004,"节点。"],[1,14014," dd"],[-1,14138,"节点C"],[1,14143,"C"],[1,14183,"可"],[1,14197,"成"],[-1,15071,"中"],[1,15104,"略"],[-1,15108,"的话"],[1,15124,"统一"],[-1,15460,"棋盘"],[1,15479,"演示"],[1,15589,"yi懂"],[-1,15589,"合法的"],[1,15674,"\n"],[-1,15784,"\n"],[-1,16088,"搜索树"],[1,16098,"3$¥"],[1,16252,"一个"],[-1,16252,"取了"],[1,16297,"了"],[-1,16297,"\n"],[1,16492,"\n。"],[-1,16492,"最多"],[1,16743,"\n"],[1,17087,""],[-1,17087,"]"],[-1,17397,"一些"],[1,17404,"\n\n"],[1,17622,"\n\n"],[-1,17622,"图中"],[1,17732,"`"],[-1,17732,"\n"],[-1,17740,"\n`"],[1,18557,"\n\n"],[1,18650,"，"],[-1,18650,"\n"],[1,18887,"深度优"],[-1,18887,"演示了"],[-1,18895,"深度优"],[1,18903,"是"],[1,18915,"下滑"]],[18913,18913],[13149,13149]]],[1528707260646,["Re@Re.local",[[1,18995,"搜索开始时，所有的顶点都是白色的，算法首先方法顶点A"]],[18995,18995],[19021,19021]]],[1528707263333,["Re@Re.local",[[-1,19016,"方法"]],[19018,19018],[19016,19016]]],[1528707264401,["Re@Re.local",[[1,19016,"访问了"]],[19016,19016],[19019,19019]]],[1528707266126,["Re@Re.local",[[1,19022,"。"]],[19022,19022],[19023,19023]]],[1528708806270,[null,[[-1,13149,"\n"],[1,13751,"\n"],[1,13776,"搜索的"],[-1,13819,"K"],[1,13821,"ni"],[-1,13841,"\n"],[-1,13844,"kn\n"],[1,13891,"排序）"],[-1,13895,"徐安娥"],[1,14004,"节点。"],[-1,14011," dd"],[1,14138,"节点C"],[-1,14140,"C"],[-1,14181,"可"],[-1,14196,"成"],[1,15071,"中"],[-1,15103,"略"],[1,15108,"的话"],[-1,15122,"统一"],[1,15460,"棋盘"],[-1,15477,"演示"],[-1,15589,"yi懂"],[1,15592,"合法的"],[-1,15674,"\n"],[1,15786,"\n"],[1,16088,"搜索树"],[-1,16095,"3$¥"],[-1,16252,"一个"],[1,16254,"取了"],[-1,16297,"了"],[1,16298,"\n"],[-1,16492,"\n。"],[1,16494,"最多"],[-1,16743,"\n"],[-1,17088,""],[1,17088,"]"],[1,17397,"一些"],[-1,17402,"\n\n"],[-1,17622,"\n\n"],[1,17624,"图中"],[-1,17732,"`"],[1,17733,"\n"],[1,17740,"\n`"],[-1,18555,"\n\n"],[-1,18650,"，"],[1,18651,"\n"],[-1,18887,"深度优"],[1,18890,"演示了"],[1,18895,"深度优"],[-1,18900,"是"],[-1,18913,"下滑"],[-1,18994,"\n"],[1,18995,"在"],[1,19023,"\n"]],[13149,13149],[19024,19024]]],[1528708806270,[null,[[1,13149,"\n"],[-1,13750,"\n"],[-1,13776,"搜索的"],[1,13822,"K"],[-1,13823,"ni"],[1,13845,"\n"],[1,13847,"kn\n"],[-1,13891,"排序）"],[1,13898,"徐安娥"],[-1,14004,"节点。"],[1,14014," dd"],[-1,14138,"节点C"],[1,14143,"C"],[1,14183,"可"],[1,14197,"成"],[-1,15071,"中"],[1,15104,"略"],[-1,15108,"的话"],[1,15124,"统一"],[-1,15460,"棋盘"],[1,15479,"演示"],[1,15589,"yi懂"],[-1,15589,"合法的"],[1,15674,"\n"],[-1,15785,"\n"],[-1,16088,"搜索树"],[1,16098,"3$¥"],[1,16252,"一个"],[-1,16252,"取了"],[1,16297,"了"],[-1,16297,"\n"],[1,16492,"\n。"],[-1,16492,"最多"],[1,16743,"\n"],[1,17087,""],[-1,17087,"]"],[-1,17397,"一些"],[1,17404,"\n\n"],[1,17622,"\n\n"],[-1,17622,"图中"],[1,17732,"`"],[-1,17732,"\n"],[-1,17740,"\n`"],[1,18557,"\n\n"],[1,18650,"，"],[-1,18650,"\n"],[1,18887,"深度优"],[-1,18887,"演示了"],[-1,18895,"深度优"],[1,18903,"是"],[1,18915,"下滑"],[1,18994,"\n"],[-1,18994,"在"],[-1,19023,"\n"]],[19024,19024],[13149,13149]]],[1528708759285,["Re@Re.local",[[1,19023,"首先"]],[19023,19023],[19025,19025]]],[1528708759672,["Re@Re.local",[[-1,19023,"首先"]],[19025,19025],[19023,19023]]],[1528708792117,["Re@Re.local",[[1,19023,"访问节点的第一步是将该节点的颜色设置为灰色，表示该节点正在被搜索，并"]],[19023,19023],[19057,19057]]],[1528708792417,["Re@Re.local",[[-1,19055,"，并"]],[19057,19057],[19055,19055]]],[1528708803755,["Re@Re.local",[[1,19055,"，并且把发现世界设置为1."]],[19055,19055],[19068,19068]]],[1528708804409,["Re@Re.local",[[-1,19067,"."]],[19068,19068],[19067,19067]]],[1528708804711,["Re@Re.local",[[1,19067,"."]],[19067,19067],[19068,19068]]],[1528708805327,["Re@Re.local",[[-1,19067,"."]],[19068,19068],[19067,19067]]],[1528708866200,[null,[[-1,13149,"\n"],[1,13751,"\n"],[1,13776,"搜索的"],[-1,13819,"K"],[1,13821,"ni"],[-1,13841,"\n"],[-1,13844,"kn\n"],[1,13891,"排序）"],[-1,13895,"徐安娥"],[1,14004,"节点。"],[-1,14011," dd"],[1,14138,"节点C"],[-1,14140,"C"],[-1,14181,"可"],[-1,14196,"成"],[1,15071,"中"],[-1,15103,"略"],[1,15108,"的话"],[-1,15122,"统一"],[1,15460,"棋盘"],[-1,15477,"演示"],[-1,15589,"yi懂"],[1,15592,"合法的"],[-1,15674,"\n"],[1,15786,"\n"],[1,16088,"搜索树"],[-1,16095,"3$¥"],[-1,16252,"一个"],[1,16254,"取了"],[-1,16297,"了"],[1,16298,"\n"],[-1,16492,"\n。"],[1,16494,"最多"],[-1,16743,"\n"],[-1,17088,""],[1,17088,"]"],[1,17397,"一些"],[-1,17402,"\n\n"],[-1,17622,"\n\n"],[1,17624,"图中"],[-1,17732,"`"],[1,17733,"\n"],[1,17740,"\n`"],[-1,18555,"\n\n"],[-1,18650,"，"],[1,18651,"\n"],[-1,18887,"深度优"],[1,18890,"演示了"],[1,18895,"深度优"],[-1,18900,"是"],[-1,18913,"下滑"],[-1,18994,"\n"],[1,18995,"在"],[1,19067,"\n"]],[13149,13149],[19068,19068]]],[1528708866200,[null,[[1,13149,"\n"],[-1,13750,"\n"],[-1,13776,"搜索的"],[1,13822,"K"],[-1,13823,"ni"],[1,13845,"\n"],[1,13847,"kn\n"],[-1,13891,"排序）"],[1,13898,"徐安娥"],[-1,14004,"节点。"],[1,14014," dd"],[-1,14138,"节点C"],[1,14143,"C"],[1,14183,"可"],[1,14197,"成"],[-1,15071,"中"],[1,15104,"略"],[-1,15108,"的话"],[1,15124,"统一"],[-1,15460,"棋盘"],[1,15479,"演示"],[1,15589,"yi懂"],[-1,15589,"合法的"],[1,15674,"\n"],[-1,15785,"\n"],[-1,16088,"搜索树"],[1,16098,"3$¥"],[1,16252,"一个"],[-1,16252,"取了"],[1,16297,"了"],[-1,16297,"\n"],[1,16492,"\n。"],[-1,16492,"最多"],[1,16743,"\n"],[1,17087,""],[-1,17087,"]"],[-1,17397,"一些"],[1,17404,"\n\n"],[1,17622,"\n\n"],[-1,17622,"图中"],[1,17732,"`"],[-1,17732,"\n"],[-1,17740,"\n`"],[1,18557,"\n\n"],[1,18650,"，"],[-1,18650,"\n"],[1,18887,"深度优"],[-1,18887,"演示了"],[-1,18895,"深度优"],[1,18903,"是"],[1,18915,"下滑"],[1,18994,"\n"],[-1,18994,"在"],[-1,19067,"\n"]],[19068,19068],[13149,13149]]],[1528708806704,["Re@Re.local",[[1,19068,"。"]],[19068,19068],[19069,19069]]],[1528708807161,["Re@Re.local",[[-1,19068,"。"]],[19069,19069],[19068,19068]]],[1528708812414,["Re@Re.local",[[1,19068,"由于顶点A "]],[19068,19068],[19074,19074]]],[1528708812812,["Re@Re.local",[[-1,19073," "]],[19074,19074],[19073,19073]]],[1528708814547,["Re@Re.local",[[1,19073,"又连个"]],[19073,19073],[19076,19076]]],[1528708815134,["Re@Re.local",[[-1,19073,"又连个"]],[19076,19076],[19073,19073]]],[1528708821067,["Re@Re.local",[[1,19073,"有两个邻接顶点"]],[19073,19073],[19080,19080]]],[1528708926485,[null,[[-1,13149,"\n"],[1,13751,"\n"],[1,13776,"搜索的"],[-1,13819,"K"],[1,13821,"ni"],[-1,13841,"\n"],[-1,13844,"kn\n"],[1,13891,"排序）"],[-1,13895,"徐安娥"],[1,14004,"节点。"],[-1,14011," dd"],[1,14138,"节点C"],[-1,14140,"C"],[-1,14181,"可"],[-1,14196,"成"],[1,15071,"中"],[-1,15103,"略"],[1,15108,"的话"],[-1,15122,"统一"],[1,15460,"棋盘"],[-1,15477,"演示"],[-1,15589,"yi懂"],[1,15592,"合法的"],[-1,15674,"\n"],[1,15786,"\n"],[1,16088,"搜索树"],[-1,16095,"3$¥"],[-1,16252,"一个"],[1,16254,"取了"],[-1,16297,"了"],[1,16298,"\n"],[-1,16492,"\n。"],[1,16494,"最多"],[-1,16743,"\n"],[-1,17088,""],[1,17088,"]"],[1,17397,"一些"],[-1,17402,"\n\n"],[-1,17622,"\n\n"],[1,17624,"图中"],[-1,17732,"`"],[1,17733,"\n"],[1,17740,"\n`"],[-1,18555,"\n\n"],[-1,18650,"，"],[1,18651,"\n"],[-1,18887,"深度优"],[1,18890,"演示了"],[1,18895,"深度优"],[-1,18900,"是"],[-1,18913,"下滑"],[-1,18994,"\n"],[1,18995,"在"],[-1,19067,"\n"],[1,19068,"。"],[1,19081,"\n\n"]],[13149,13149],[19083,19083]]],[1528708926485,[null,[[1,13149,"\n"],[-1,13750,"\n"],[-1,13776,"搜索的"],[1,13822,"K"],[-1,13823,"ni"],[1,13845,"\n"],[1,13847,"kn\n"],[-1,13891,"排序）"],[1,13898,"徐安娥"],[-1,14004,"节点。"],[1,14014," dd"],[-1,14138,"节点C"],[1,14143,"C"],[1,14183,"可"],[1,14197,"成"],[-1,15071,"中"],[1,15104,"略"],[-1,15108,"的话"],[1,15124,"统一"],[-1,15460,"棋盘"],[1,15479,"演示"],[1,15589,"yi懂"],[-1,15589,"合法的"],[1,15674,"\n"],[-1,15785,"\n"],[-1,16088,"搜索树"],[1,16098,"3$¥"],[1,16252,"一个"],[-1,16252,"取了"],[1,16297,"了"],[-1,16297,"\n"],[1,16492,"\n。"],[-1,16492,"最多"],[1,16743,"\n"],[1,17087,""],[-1,17087,"]"],[-1,17397,"一些"],[1,17404,"\n\n"],[1,17622,"\n\n"],[-1,17622,"图中"],[1,17732,"`"],[-1,17732,"\n"],[-1,17740,"\n`"],[1,18557,"\n\n"],[1,18650,"，"],[-1,18650,"\n"],[1,18887,"深度优"],[-1,18887,"演示了"],[-1,18895,"深度优"],[1,18903,"是"],[1,18915,"下滑"],[1,18994,"\n"],[-1,18994,"在"],[1,19067,"\n"],[-1,19067,"。"],[-1,19081,"\n\n"]],[19083,19083],[13149,13149]]],[1528708884753,["Re@Re.local",[[1,19080,"（B，D），并且每个"]],[19080,19080],[19090,19090]]],[1528708885616,["Re@Re.local",[[-1,19086,"并且每个"]],[19090,19090],[19086,19086]]],[1528708889946,["Re@Re.local",[[1,19086,"每一个都需要被访问。"]],[19086,19086],[19096,19096]]],[1528708890992,["Re@Re.local",[[-1,19095,"。"]],[19096,19096],[19095,19095]]],[1528708893883,["Re@Re.local",[[1,19095,"，因此将"]],[19095,19095],[19099,19099]]],[1528708904221,["Re@Re.local",[[-1,19098,"将"]],[19099,19099],[19098,19098]]],[1528708908411,["Re@Re.local",[[1,19098,"就随意地以"]],[19098,19098],[19103,19103]]],[1528708908844,["Re@Re.local",[[-1,19102,"以"]],[19103,19103],[19102,19102]]],[1528708913643,["Re@Re.local",[[1,19102,"按字母顺序进行访问了。"]],[19102,19102],[19113,19113]]],[1528708917532,["Re@Re.local",[[1,19116,"\n"]],[19113,19113],[19114,19114]]],[1528708917769,["Re@Re.local",[[1,19117,"\n"]],[19114,19114],[19115,19115]]],[1528708918846,["Re@Re.local",[[1,19115,"接"]],[19115,19115],[19116,19116]]],[1528708919024,["Re@Re.local",[[-1,19115,"接"]],[19116,19116],[19115,19115]]],[1528708921046,["Re@Re.local",[[1,19115,"顶点B"]],[19115,19115],[19118,19118]]],[1528708923473,["Re@Re.local",[[-1,19115,"顶点B"]],[19118,19118],[19115,19115]]],[1528708925762,["Re@Re.local",[[1,19115,"接下来访问的"]],[19115,19115],[19121,19121]]],[1528708986631,[null,[[-1,13149,"\n"],[1,13751,"\n"],[1,13776,"搜索的"],[-1,13819,"K"],[1,13821,"ni"],[-1,13841,"\n"],[-1,13844,"kn\n"],[1,13891,"排序）"],[-1,13895,"徐安娥"],[1,14004,"节点。"],[-1,14011," dd"],[1,14138,"节点C"],[-1,14140,"C"],[-1,14181,"可"],[-1,14196,"成"],[1,15071,"中"],[-1,15103,"略"],[1,15108,"的话"],[-1,15122,"统一"],[1,15460,"棋盘"],[-1,15477,"演示"],[-1,15589,"yi懂"],[1,15592,"合法的"],[-1,15677,"\n"],[1,15786,"\n"],[1,16088,"搜索树"],[-1,16095,"3$¥"],[-1,16252,"一个"],[1,16254,"取了"],[-1,16297,"了"],[1,16298,"\n"],[-1,16492,"\n。"],[1,16494,"最多"],[-1,16743,"\n"],[-1,17088,""],[1,17088,"]"],[1,17397,"一些"],[-1,17402,"\n\n"],[-1,17622,"\n\n"],[1,17624,"图中"],[-1,17732,"`"],[1,17733,"\n"],[1,17740,"\n`"],[-1,18555,"\n\n"],[-1,18650,"，"],[1,18651,"\n"],[-1,18887,"深度优"],[1,18890,"演示了"],[1,18895,"深度优"],[-1,18900,"是"],[-1,18913,"下滑"],[-1,18994,"\n"],[1,18995,"在"],[-1,19067,"\n"],[1,19068,"。"],[1,19122,"\n\n"]],[13149,13149],[19124,19124]]],[1528708986631,[null,[[1,13149,"\n"],[-1,13750,"\n"],[-1,13776,"搜索的"],[1,13822,"K"],[-1,13823,"ni"],[1,13845,"\n"],[1,13847,"kn\n"],[-1,13891,"排序）"],[1,13898,"徐安娥"],[-1,14004,"节点。"],[1,14014," dd"],[-1,14138,"节点C"],[1,14143,"C"],[1,14183,"可"],[1,14197,"成"],[-1,15071,"中"],[1,15104,"略"],[-1,15108,"的话"],[1,15124,"统一"],[-1,15460,"棋盘"],[1,15479,"演示"],[1,15589,"yi懂"],[-1,15589,"合法的"],[1,15677,"\n"],[-1,15785,"\n"],[-1,16088,"搜索树"],[1,16098,"3$¥"],[1,16252,"一个"],[-1,16252,"取了"],[1,16297,"了"],[-1,16297,"\n"],[1,16492,"\n。"],[-1,16492,"最多"],[1,16743,"\n"],[1,17087,""],[-1,17087,"]"],[-1,17397,"一些"],[1,17404,"\n\n"],[1,17622,"\n\n"],[-1,17622,"图中"],[1,17732,"`"],[-1,17732,"\n"],[-1,17740,"\n`"],[1,18557,"\n\n"],[1,18650,"，"],[-1,18650,"\n"],[1,18887,"深度优"],[-1,18887,"演示了"],[-1,18895,"深度优"],[1,18903,"是"],[1,18915,"下滑"],[1,18994,"\n"],[-1,18994,"在"],[1,19067,"\n"],[-1,19067,"。"],[-1,19122,"\n\n"]],[19124,19124],[13149,13149]]],[1528708943780,["Re@Re.local",[[1,19122,"节点B（如图15），因此将其颜色设置为灰色，并将发现世界"]],[19122,19122],[19150,19150]]],[1528708944869,["Re@Re.local",[[-1,19146,"发现世界"]],[19150,19150],[19146,19146]]],[1528708948300,["Re@Re.local",[[1,19146,"其发现世界舍"]],[19146,19146],[19152,19152]]],[1528708948770,["Re@Re.local",[[-1,19149,"世界舍"]],[19152,19152],[19149,19149]]],[1528708951814,["Re@Re.local",[[1,19149,"时间设置为2，"]],[19149,19149],[19156,19156]]],[1528708952247,["Re@Re.local",[[-1,19155,"，"]],[19156,19156],[19155,19155]]],[1528708953772,["Re@Re.local",[[1,19155,"。节点"]],[19155,19155],[19158,19158]]],[1528708954358,["Re@Re.local",[[-1,19156,"节点"]],[19158,19158],[19156,19156]]],[1528708957524,["Re@Re.local",[[1,19156,"顶点B于"]],[19156,19156],[19160,19160]]],[1528708958227,["Re@Re.local",[[-1,19159,"于"]],[19160,19160],[19159,19159]]],[1528708973113,["Re@Re.local",[[1,19159,"与（C，D）邻接，因此按照字母顺序先访问节点"]],[19159,19159],[19181,19181]]],[1528708974287,["Re@Re.local",[[-1,19176,"先访问节点"]],[19181,19181],[19176,19176]]],[1528708976809,["Re@Re.local",[[1,19176,"，接下来放"]],[19176,19176],[19181,19181]]],[1528708977693,["Re@Re.local",[[-1,19176,"，接下来放"]],[19181,19181],[19176,19176]]],[1528708981860,["Re@Re.local",[[1,19176,"访问节点C。"]],[19176,19176],[19182,19182]]],[1528708982576,["Re@Re.local",[[1,19185,"\n"]],[19182,19182],[19183,19183]]],[1528708982806,["Re@Re.local",[[1,19186,"\n"]],[19183,19183],[19184,19184]]],[1528708985128,["Re@Re.local",[[1,19184,"放"]],[19184,19184],[19185,19185]]],[1528708985584,["Re@Re.local",[[-1,19184,"放"]],[19185,19185],[19184,19184]]],[1528709046244,[null,[[-1,13149,"\n"],[1,13751,"\n"],[1,13776,"搜索的"],[-1,13819,"K"],[1,13821,"ni"],[-1,13841,"\n"],[-1,13844,"kn\n"],[1,13891,"排序）"],[-1,13895,"徐安娥"],[1,14004,"节点。"],[-1,14011," dd"],[1,14138,"节点C"],[-1,14140,"C"],[-1,14181,"可"],[-1,14196,"成"],[1,15071,"中"],[-1,15103,"略"],[1,15108,"的话"],[-1,15122,"统一"],[1,15460,"棋盘"],[-1,15477,"演示"],[-1,15589,"yi懂"],[1,15592,"合法的"],[-1,15674,"\n"],[1,15786,"\n"],[1,16088,"搜索树"],[-1,16095,"3$¥"],[-1,16252,"一个"],[1,16254,"取了"],[-1,16297,"了"],[1,16298,"\n"],[-1,16492,"\n。"],[1,16494,"最多"],[-1,16743,"\n"],[-1,17088,""],[1,17088,"]"],[1,17397,"一些"],[-1,17402,"\n\n"],[-1,17622,"\n\n"],[1,17624,"图中"],[-1,17732,"`"],[1,17733,"\n"],[1,17740,"\n`"],[-1,18555,"\n\n"],[-1,18650,"，"],[1,18651,"\n"],[-1,18887,"深度优"],[1,18890,"演示了"],[1,18895,"深度优"],[-1,18900,"是"],[-1,18913,"下滑"],[-1,18994,"\n"],[1,18995,"在"],[-1,19067,"\n"],[1,19068,"。"],[-1,19121,"\n"],[1,19122,"是"],[1,19184,"\n\n\n"]],[13149,13149],[19187,19187]]],[1528709046244,[null,[[1,13149,"\n"],[-1,13750,"\n"],[-1,13776,"搜索的"],[1,13822,"K"],[-1,13823,"ni"],[1,13845,"\n"],[1,13847,"kn\n"],[-1,13891,"排序）"],[1,13898,"徐安娥"],[-1,14004,"节点。"],[1,14014," dd"],[-1,14138,"节点C"],[1,14143,"C"],[1,14183,"可"],[1,14197,"成"],[-1,15071,"中"],[1,15104,"略"],[-1,15108,"的话"],[1,15124,"统一"],[-1,15460,"棋盘"],[1,15479,"演示"],[1,15589,"yi懂"],[-1,15589,"合法的"],[1,15674,"\n"],[-1,15785,"\n"],[-1,16088,"搜索树"],[1,16098,"3$¥"],[1,16252,"一个"],[-1,16252,"取了"],[1,16297,"了"],[-1,16297,"\n"],[1,16492,"\n。"],[-1,16492,"最多"],[1,16743,"\n"],[1,17087,""],[-1,17087,"]"],[-1,17397,"一些"],[1,17404,"\n\n"],[1,17622,"\n\n"],[-1,17622,"图中"],[1,17732,"`"],[-1,17732,"\n"],[-1,17740,"\n`"],[1,18557,"\n\n"],[1,18650,"，"],[-1,18650,"\n"],[1,18887,"深度优"],[-1,18887,"演示了"],[-1,18895,"深度优"],[1,18903,"是"],[1,18915,"下滑"],[1,18994,"\n"],[-1,18994,"在"],[1,19067,"\n"],[-1,19067,"。"],[1,19121,"\n"],[-1,19121,"是"],[-1,19184,"\n\n\n"]],[19187,19187],[13149,13149]]],[1528709000539,["Re@Re.local",[[1,19186,"节点C（图16）后来到了树的一个分枝点"]],[19186,19186],[19205,19205]]],[1528709007490,["Re@Re.local",[[-1,19200,"一个分枝点"]],[19205,19205],[19200,19200]]],[1528709008326,["Re@Re.local",[[1,19200,"分"]],[19200,19200],[19201,19201]]],[1528709008425,["Re@Re.local",[[-1,19200,"分"]],[19201,19201],[19200,19200]]],[1528709009219,["Re@Re.local",[[1,19200,"一个"]],[19200,19200],[19202,19202]]],[1528709009811,["Re@Re.local",[[-1,19200,"一个"]],[19202,19202],[19200,19200]]],[1528709019765,["Re@Re.local",[[1,19200,"一个分枝的末端。将节点图"]],[19200,19200],[19212,19212]]],[1528709019886,["Re@Re.local",[[-1,19211,"图"]],[19212,19212],[19211,19211]]],[1528709028990,["Re@Re.local",[[1,19211,"涂成灰色并且将其发现时间设置为3，"]],[19211,19211],[19228,19228]]],[1528709036101,["Re@Re.local",[[-1,19215,"并且"]],[19217,19217],[19215,19215]]],[1528709036892,["Re@Re.local",[[1,19215,"，"]],[19215,19215],[19216,19216]]],[1528709039664,["Re@Re.local",[[1,19227,"却"]],[19227,19227],[19228,19228]]],[1528709039770,["Re@Re.local",[[-1,19227,"却"]],[19228,19228],[19227,19227]]],[1528709040802,["Re@Re.local",[[1,19227,"算法"]],[19227,19227],[19229,19229]]],[1528709041809,["Re@Re.local",[[-1,19227,"算法"]],[19229,19229],[19227,19227]]],[1528709044964,["Re@Re.local",[[1,19227,"并且算法也确定了"]],[19227,19227],[19235,19235]]],[1528709106245,[null,[[-1,13149,"\n"],[1,13751,"\n"],[1,13776,"搜索的"],[-1,13819,"K"],[1,13821,"ni"],[-1,13841,"\n"],[-1,13844,"kn\n"],[1,13891,"排序）"],[-1,13895,"徐安娥"],[1,14004,"节点。"],[-1,14011," dd"],[1,14138,"节点C"],[-1,14140,"C"],[-1,14181,"可"],[-1,14196,"成"],[1,15071,"中"],[-1,15103,"略"],[1,15108,"的话"],[-1,15122,"统一"],[1,15460,"棋盘"],[-1,15477,"演示"],[-1,15589,"yi懂"],[1,15592,"合法的"],[-1,15674,"\n"],[1,15785,"\n"],[1,16088,"搜索树"],[-1,16095,"3$¥"],[-1,16252,"一个"],[1,16254,"取了"],[-1,16297,"了"],[1,16298,"\n"],[-1,16492,"\n。"],[1,16494,"最多"],[-1,16743,"\n"],[-1,17088,""],[1,17088,"]"],[1,17397,"一些"],[-1,17402,"\n\n"],[-1,17622,"\n\n"],[1,17624,"图中"],[-1,17732,"`"],[1,17733,"\n"],[1,17740,"\n`"],[-1,18555,"\n\n"],[-1,18650,"，"],[1,18651,"\n"],[-1,18887,"深度优"],[1,18890,"演示了"],[1,18895,"深度优"],[-1,18900,"是"],[-1,18913,"下滑"],[-1,18994,"\n"],[1,18995,"在"],[-1,19067,"\n"],[1,19068,"。"],[-1,19121,"\n"],[1,19122,"是"],[1,19184,"访问"],[-1,19198,"一个"],[1,19235,"\n\n\n"]],[13149,13149],[19238,19238]]],[1528709106246,[null,[[1,13149,"\n"],[-1,13750,"\n"],[-1,13776,"搜索的"],[1,13822,"K"],[-1,13823,"ni"],[1,13845,"\n"],[1,13847,"kn\n"],[-1,13891,"排序）"],[1,13898,"徐安娥"],[-1,14004,"节点。"],[1,14014," dd"],[-1,14138,"节点C"],[1,14143,"C"],[1,14183,"可"],[1,14197,"成"],[-1,15071,"中"],[1,15104,"略"],[-1,15108,"的话"],[1,15124,"统一"],[-1,15460,"棋盘"],[1,15479,"演示"],[1,15589,"yi懂"],[-1,15589,"合法的"],[1,15674,"\n"],[-1,15784,"\n"],[-1,16088,"搜索树"],[1,16098,"3$¥"],[1,16252,"一个"],[-1,16252,"取了"],[1,16297,"了"],[-1,16297,"\n"],[1,16492,"\n。"],[-1,16492,"最多"],[1,16743,"\n"],[1,17087,""],[-1,17087,"]"],[-1,17397,"一些"],[1,17404,"\n\n"],[1,17622,"\n\n"],[-1,17622,"图中"],[1,17732,"`"],[-1,17732,"\n"],[-1,17740,"\n`"],[1,18557,"\n\n"],[1,18650,"，"],[-1,18650,"\n"],[1,18887,"深度优"],[-1,18887,"演示了"],[-1,18895,"深度优"],[1,18903,"是"],[1,18915,"下滑"],[1,18994,"\n"],[-1,18994,"在"],[1,19067,"\n"],[-1,19067,"。"],[1,19121,"\n"],[-1,19121,"是"],[-1,19184,"访问"],[1,19200,"一个"],[-1,19235,"\n\n\n"]],[19238,19238],[13149,13149]]],[1528709051684,["Re@Re.local",[[1,19235,"C是没有邻接顶点的。这"]],[19235,19235],[19246,19246]]],[1528709052137,["Re@Re.local",[[-1,19244,"。这"]],[19246,19246],[19244,19244]]],[1528709067695,["Re@Re.local",[[1,19244,"，这意味着已经完成了对节点C的搜索，以次"]],[19244,19244],[19264,19264]]],[1528709068084,["Re@Re.local",[[-1,19262,"以次"]],[19264,19264],[19262,19262]]],[1528709081225,["Re@Re.local",[[1,19262,"将其涂成黑色，并且将完成时间设置为4."]],[19262,19262],[19281,19281]]],[1528709081875,["Re@Re.local",[[-1,19280,"."]],[19281,19281],[19280,19280]]],[1528709091902,["Re@Re.local",[[1,19280,"。此时的状态如涂1"]],[19280,19280],[19289,19289]]],[1528709092670,["Re@Re.local",[[-1,19287,"涂1"]],[19289,19289],[19287,19287]]],[1528709094702,["Re@Re.local",[[1,19287,"图17所示。"]],[19287,19287],[19293,19293]]],[1528709094965,["Re@Re.local",[[1,19296,"\n"]],[19293,19293],[19294,19294]]],[1528709095155,["Re@Re.local",[[1,19297,"\n"]],[19294,19294],[19295,19295]]],[1528709101157,["Re@Re.local",[[1,19295,"由于顶点"]],[19295,19295],[19299,19299]]],[1528709102671,["Re@Re.local",[[-1,19186,"节"]],[19187,19187],[19186,19186]]],[1528709103628,["Re@Re.local",[[1,19186,"顶"]],[19186,19186],[19187,19187]]],[1528709105579,["Re@Re.local",[[1,19299,"C是"]],[19299,19299],[19301,19301]]],[1528709166711,[null,[[-1,13149,"\n"],[1,13751,"\n"],[1,13776,"搜索的"],[-1,13819,"K"],[1,13821,"ni"],[-1,13841,"\n"],[-1,13844,"kn\n"],[1,13891,"排序）"],[-1,13895,"徐安娥"],[1,14004,"节点。"],[-1,14011," dd"],[1,14138,"节点C"],[-1,14140,"C"],[-1,14181,"可"],[-1,14196,"成"],[1,15071,"中"],[-1,15103,"略"],[1,15108,"的话"],[-1,15122,"统一"],[1,15460,"棋盘"],[-1,15477,"演示"],[-1,15589,"yi懂"],[1,15592,"合法的"],[-1,15674,"\n"],[1,15786,"\n"],[1,16088,"搜索树"],[-1,16095,"3$¥"],[-1,16252,"一个"],[1,16254,"取了"],[-1,16297,"了"],[1,16298,"\n"],[-1,16492,"\n。"],[1,16494,"最多"],[-1,16743,"\n"],[-1,17088,""],[1,17088,"]"],[1,17397,"一些"],[-1,17402,"\n\n"],[-1,17622,"\n\n"],[1,17624,"图中"],[-1,17732,"`"],[1,17733,"\n"],[1,17740,"\n`"],[-1,18555,"\n\n"],[-1,18650,"，"],[1,18651,"\n"],[-1,18887,"深度优"],[1,18890,"演示了"],[1,18895,"深度优"],[-1,18900,"是"],[-1,18913,"下滑"],[-1,18994,"\n"],[1,18995,"在"],[-1,19067,"\n"],[1,19068,"。"],[-1,19121,"\n"],[1,19122,"是"],[-1,19184,"节点顶"],[1,19187,"访问顶点C"],[-1,19198,"一个"],[1,19301,"\n\n\n"]],[13149,13149],[19304,19304]]],[1528709166712,[null,[[1,13149,"\n"],[-1,13750,"\n"],[-1,13776,"搜索的"],[1,13822,"K"],[-1,13823,"ni"],[1,13845,"\n"],[1,13847,"kn\n"],[-1,13891,"排序）"],[1,13898,"徐安娥"],[-1,14004,"节点。"],[1,14014," dd"],[-1,14138,"节点C"],[1,14143,"C"],[1,14183,"可"],[1,14197,"成"],[-1,15071,"中"],[1,15104,"略"],[-1,15108,"的话"],[1,15124,"统一"],[-1,15460,"棋盘"],[1,15479,"演示"],[1,15589,"yi懂"],[-1,15589,"合法的"],[1,15674,"\n"],[-1,15785,"\n"],[-1,16088,"搜索树"],[1,16098,"3$¥"],[1,16252,"一个"],[-1,16252,"取了"],[1,16297,"了"],[-1,16297,"\n"],[1,16492,"\n。"],[-1,16492,"最多"],[1,16743,"\n"],[1,17087,""],[-1,17087,"]"],[-1,17397,"一些"],[1,17404,"\n\n"],[1,17622,"\n\n"],[-1,17622,"图中"],[1,17732,"`"],[-1,17732,"\n"],[-1,17740,"\n`"],[1,18557,"\n\n"],[1,18650,"，"],[-1,18650,"\n"],[1,18887,"深度优"],[-1,18887,"演示了"],[-1,18895,"深度优"],[1,18903,"是"],[1,18915,"下滑"],[1,18994,"\n"],[-1,18994,"在"],[1,19067,"\n"],[-1,19067,"。"],[1,19121,"\n"],[-1,19121,"是"],[1,19184,"节点顶"],[-1,19184,"访问顶点C"],[1,19200,"一个"],[-1,19301,"\n\n\n"]],[19304,19304],[13149,13149]]],[1528709116886,["Re@Re.local",[[1,19301,"一个分枝的末端，现在回到顶点B，，"]],[19301,19301],[19318,19318]]],[1528709117238,["Re@Re.local",[[-1,19317,"，"]],[19318,19318],[19317,19317]]],[1528709121331,["Re@Re.local",[[1,19317,"并继续探索"]],[19317,19317],[19322,19322]]],[1528709121641,["Re@Re.local",[[-1,19320,"探索"]],[19322,19322],[19320,19320]]],[1528709126867,["Re@Re.local",[[1,19320,"搜索B的领结"]],[19320,19320],[19326,19326]]],[1528709127262,["Re@Re.local",[[-1,19324,"领结"]],[19326,19326],[19324,19324]]],[1528709131704,["Re@Re.local",[[1,19324,"邻接顶点。出"]],[19324,19324],[19330,19330]]],[1528709132397,["Re@Re.local",[[-1,19329,"出"]],[19330,19330],[19329,19329]]],[1528709149959,["Re@Re.local",[[1,19329,"除了C以外仅剩D了，因此现在"]],[19329,19329],[19343,19343]]],[1528709150540,["Re@Re.local",[[-1,19341,"现在"]],[19343,19343],[19341,19341]]],[1528709151173,["Re@Re.local",[[1,19341,"烦"]],[19341,19341],[19342,19342]]],[1528709151295,["Re@Re.local",[[-1,19341,"烦"]],[19342,19342],[19341,19341]]],[1528709153777,["Re@Re.local",[[1,19341,"现在访问D"]],[19341,19341],[19346,19346]]],[1528709154628,["Re@Re.local",[[-1,19345,"D"]],[19346,19346],[19345,19345]]],[1528709162095,["Re@Re.local",[[1,19345,"D（图18），并且继续"]],[19345,19345],[19356,19356]]],[1528709164539,["Re@Re.local",[[-1,19354,"继续"]],[19356,19356],[19354,19354]]],[1528709165361,["Re@Re.local",[[1,19354,"从"]],[19354,19354],[19355,19355]]],[1528709226233,[null,[[-1,13149,"\n"],[1,13751,"\n"],[1,13776,"搜索的"],[-1,13819,"K"],[1,13821,"ni"],[-1,13841,"\n"],[-1,13844,"kn\n"],[1,13891,"排序）"],[-1,13895,"徐安娥"],[1,14004,"节点。"],[-1,14011," dd"],[1,14138,"节点C"],[-1,14140,"C"],[-1,14181,"可"],[-1,14196,"成"],[1,15071,"中"],[-1,15103,"略"],[1,15108,"的话"],[-1,15122,"统一"],[1,15460,"棋盘"],[-1,15477,"演示"],[-1,15589,"yi懂"],[1,15592,"合法的"],[-1,15674,"\n"],[1,15786,"\n"],[1,16088,"搜索树"],[-1,16095,"3$¥"],[-1,16252,"一个"],[1,16254,"取了"],[-1,16297,"了"],[1,16298,"\n"],[-1,16492,"\n。"],[1,16494,"最多"],[-1,16743,"\n"],[-1,17088,""],[1,17088,"]"],[1,17397,"一些"],[-1,17402,"\n\n"],[-1,17622,"\n\n"],[1,17624,"图中"],[-1,17732,"`"],[1,17733,"\n"],[1,17740,"\n`"],[-1,18555,"\n\n"],[-1,18650,"，"],[1,18651,"\n"],[-1,18887,"深度优"],[1,18890,"演示了"],[1,18895,"深度优"],[-1,18900,"是"],[-1,18913,"下滑"],[-1,18994,"\n"],[1,18995,"在"],[-1,19067,"\n"],[1,19068,"。"],[-1,19121,"\n"],[1,19122,"是"],[-1,19184,"节点顶"],[1,19187,"访问顶点C"],[-1,19198,"一个"],[1,19355,"\n\n\n"]],[13149,13149],[19358,19358]]],[1528709226233,[null,[[1,13149,"\n"],[-1,13750,"\n"],[-1,13776,"搜索的"],[1,13822,"K"],[-1,13823,"ni"],[1,13845,"\n"],[1,13847,"kn\n"],[-1,13891,"排序）"],[1,13898,"徐安娥"],[-1,14004,"节点。"],[1,14014," dd"],[-1,14138,"节点C"],[1,14143,"C"],[1,14183,"可"],[1,14197,"成"],[-1,15071,"中"],[1,15104,"略"],[-1,15108,"的话"],[1,15124,"统一"],[-1,15460,"棋盘"],[1,15479,"演示"],[1,15589,"yi懂"],[-1,15589,"合法的"],[1,15674,"\n"],[-1,15785,"\n"],[-1,16088,"搜索树"],[1,16098,"3$¥"],[1,16252,"一个"],[-1,16252,"取了"],[1,16297,"了"],[-1,16297,"\n"],[1,16492,"\n。"],[-1,16492,"最多"],[1,16743,"\n"],[1,17087,""],[-1,17087,"]"],[-1,17397,"一些"],[1,17404,"\n\n"],[1,17622,"\n\n"],[-1,17622,"图中"],[1,17732,"`"],[-1,17732,"\n"],[-1,17740,"\n`"],[1,18557,"\n\n"],[1,18650,"，"],[-1,18650,"\n"],[1,18887,"深度优"],[-1,18887,"演示了"],[-1,18895,"深度优"],[1,18903,"是"],[1,18915,"下滑"],[1,18994,"\n"],[-1,18994,"在"],[1,19067,"\n"],[-1,19067,"。"],[1,19121,"\n"],[-1,19121,"是"],[1,19184,"节点顶"],[-1,19184,"访问顶点C"],[1,19200,"一个"],[-1,19355,"\n\n\n"]],[19358,19358],[13149,13149]]],[1528709169666,["Re@Re.local",[[1,19357,"D继续算法"]],[19357,19357],[19362,19362]]],[1528709170067,["Re@Re.local",[[-1,19360,"算法"]],[19362,19362],[19360,19360]]],[1528709178450,["Re@Re.local",[[1,19360,"搜索。顶点D很快就将"]],[19360,19360],[19370,19370]]],[1528709180211,["Re@Re.local",[[-1,19363,"顶点D很快就将"]],[19370,19370],[19363,19363]]],[1528709183876,["Re@Re.local",[[1,19363,"通过顶点D"]],[19363,19363],[19368,19368]]],[1528709184319,["Re@Re.local",[[-1,19367,"D"]],[19368,19368],[19367,19367]]],[1528709185452,["Re@Re.local",[[1,19367,"很快"]],[19367,19367],[19369,19369]]],[1528709185808,["Re@Re.local",[[-1,19367,"很快"]],[19369,19369],[19367,19367]]],[1528709187768,["Re@Re.local",[[1,19367,"D边来"]],[19367,19367],[19370,19370]]],[1528709188026,["Re@Re.local",[[-1,19368,"边来"]],[19370,19370],[19368,19368]]],[1528709212485,["Re@Re.local",[[1,19368,"便来到了顶点E（图19），顶点E有两个邻接顶点，B和F。按"]],[19368,19368],[19397,19397]]],[1528709212857,["Re@Re.local",[[-1,19396,"按"]],[19397,19397],[19396,19396]]],[1528709225530,["Re@Re.local",[[1,19396,"正常情况下会按照字母顺序来访问邻接顶点，但是"]],[19396,19396],[19418,19418]]],[1528709286261,[null,[[-1,13149,"\n"],[1,13751,"\n"],[1,13776,"搜索的"],[-1,13819,"K"],[1,13821,"ni"],[-1,13841,"\n"],[-1,13844,"kn\n"],[1,13891,"排序）"],[-1,13895,"徐安娥"],[1,14004,"节点。"],[-1,14011," dd"],[1,14138,"节点C"],[-1,14140,"C"],[-1,14181,"可"],[-1,14196,"成"],[1,15071,"中"],[-1,15103,"略"],[1,15108,"的话"],[-1,15122,"统一"],[1,15460,"棋盘"],[-1,15477,"演示"],[-1,15589,"yi懂"],[1,15592,"合法的"],[-1,15674,"\n"],[1,15786,"\n"],[1,16088,"搜索树"],[-1,16095,"3$¥"],[-1,16252,"一个"],[1,16254,"取了"],[-1,16297,"了"],[1,16298,"\n"],[-1,16492,"\n。"],[1,16494,"最多"],[-1,16743,"\n"],[-1,17088,""],[1,17088,"]"],[1,17397,"一些"],[-1,17402,"\n\n"],[-1,17622,"\n\n"],[1,17624,"图中"],[-1,17732,"`"],[1,17733,"\n"],[1,17740,"\n`"],[-1,18555,"\n\n"],[-1,18650,"，"],[1,18651,"\n"],[-1,18887,"深度优"],[1,18890,"演示了"],[1,18895,"深度优"],[-1,18900,"是"],[-1,18913,"下滑"],[-1,18994,"\n"],[1,18995,"在"],[-1,19067,"\n"],[1,19068,"。"],[-1,19121,"\n"],[1,19122,"是"],[-1,19184,"节点顶"],[1,19187,"访问顶点C"],[-1,19198,"一个"],[1,19355,"顶点"],[-1,19358,"算法"],[1,19418,"\n\n\n"]],[13149,13149],[19421,19421]]],[1528709286261,[null,[[1,13149,"\n"],[-1,13750,"\n"],[-1,13776,"搜索的"],[1,13822,"K"],[-1,13823,"ni"],[1,13845,"\n"],[1,13847,"kn\n"],[-1,13891,"排序）"],[1,13898,"徐安娥"],[-1,14004,"节点。"],[1,14014," dd"],[-1,14138,"节点C"],[1,14143,"C"],[1,14183,"可"],[1,14197,"成"],[-1,15071,"中"],[1,15104,"略"],[-1,15108,"的话"],[1,15124,"统一"],[-1,15460,"棋盘"],[1,15479,"演示"],[1,15589,"yi懂"],[-1,15589,"合法的"],[1,15674,"\n"],[-1,15785,"\n"],[-1,16088,"搜索树"],[1,16098,"3$¥"],[1,16252,"一个"],[-1,16252,"取了"],[1,16297,"了"],[-1,16297,"\n"],[1,16492,"\n。"],[-1,16492,"最多"],[1,16743,"\n"],[1,17087,""],[-1,17087,"]"],[-1,17397,"一些"],[1,17404,"\n\n"],[1,17622,"\n\n"],[-1,17622,"图中"],[1,17732,"`"],[-1,17732,"\n"],[-1,17740,"\n`"],[1,18557,"\n\n"],[1,18650,"，"],[-1,18650,"\n"],[1,18887,"深度优"],[-1,18887,"演示了"],[-1,18895,"深度优"],[1,18903,"是"],[1,18915,"下滑"],[1,18994,"\n"],[-1,18994,"在"],[1,19067,"\n"],[-1,19067,"。"],[1,19121,"\n"],[-1,19121,"是"],[1,19184,"节点顶"],[-1,19184,"访问顶点C"],[1,19200,"一个"],[-1,19355,"顶点"],[1,19360,"算法"],[-1,19418,"\n\n\n"]],[19421,19421],[13149,13149]]],[1528709244557,["Re@Re.local",[[1,19418,"由于B已经被涂成灰色了，算法对其进行识别，确认不用"]],[19418,19418],[19443,19443]]],[1528709244874,["Re@Re.local",[[-1,19441,"不用"]],[19443,19443],[19441,19441]]],[1528709251791,["Re@Re.local",[[1,19441,"不能访问顶"]],[19441,19441],[19446,19446]]],[1528709252054,["Re@Re.local",[[-1,19445,"顶"]],[19446,19446],[19445,19445]]],[1528709275063,["Re@Re.local",[[1,19445,"B，因为这样一来该算法便陷入了无限循环了。因此，算法是"]],[19445,19445],[19472,19472]]],[1528709275292,["Re@Re.local",[[-1,19471,"是"]],[19472,19472],[19471,19471]]],[1528709283919,["Re@Re.local",[[1,19471,"从顶点F开始（图20）。"]],[19471,19471],[19483,19483]]],[1528709346265,[null,[[-1,13149,"\n"],[1,13751,"\n"],[1,13776,"搜索的"],[-1,13819,"K"],[1,13821,"ni"],[-1,13841,"\n"],[-1,13844,"kn\n"],[1,13891,"排序）"],[-1,13895,"徐安娥"],[1,14004,"节点。"],[-1,14011," dd"],[1,14138,"节点C"],[-1,14140,"C"],[-1,14181,"可"],[-1,14196,"成"],[1,15071,"中"],[-1,15103,"略"],[1,15108,"的话"],[-1,15122,"统一"],[1,15460,"棋盘"],[-1,15477,"演示"],[-1,15589,"yi懂"],[1,15592,"合法的"],[-1,15674,"\n"],[1,15786,"\n"],[1,16088,"搜索树"],[-1,16095,"3$¥"],[-1,16252,"一个"],[1,16254,"取了"],[-1,16297,"了"],[1,16298,"\n"],[-1,16492,"\n。"],[1,16494,"最多"],[-1,16743,"\n"],[-1,17088,""],[1,17088,"]"],[1,17397,"一些"],[-1,17402,"\n\n"],[-1,17622,"\n\n"],[1,17624,"图中"],[-1,17732,"`"],[1,17733,"\n"],[1,17740,"\n`"],[-1,18555,"\n\n"],[-1,18650,"，"],[1,18651,"\n"],[-1,18887,"深度优"],[1,18890,"演示了"],[1,18895,"深度优"],[-1,18900,"是"],[-1,18913,"下滑"],[-1,18994,"\n"],[1,18995,"在"],[-1,19067,"\n"],[1,19068,"。"],[-1,19121,"\n"],[1,19122,"是"],[-1,19184,"节点顶"],[1,19187,"访问顶点C"],[-1,19200,"一个"],[1,19355,"顶点"],[-1,19358,"算法"],[1,19483,"\n\n\n"]],[13149,13149],[19486,19486]]],[1528709346266,[null,[[1,13149,"\n"],[-1,13750,"\n"],[-1,13776,"搜索的"],[1,13822,"K"],[-1,13823,"ni"],[1,13845,"\n"],[1,13847,"kn\n"],[-1,13891,"排序）"],[1,13898,"徐安娥"],[-1,14004,"节点。"],[1,14014," dd"],[-1,14138,"节点C"],[1,14143,"C"],[1,14183,"可"],[1,14197,"成"],[-1,15071,"中"],[1,15104,"略"],[-1,15108,"的话"],[1,15124,"统一"],[-1,15460,"棋盘"],[1,15479,"演示"],[1,15589,"yi懂"],[-1,15589,"合法的"],[1,15674,"\n"],[-1,15785,"\n"],[-1,16088,"搜索树"],[1,16098,"3$¥"],[1,16252,"一个"],[-1,16252,"取了"],[1,16297,"了"],[-1,16297,"\n"],[1,16492,"\n。"],[-1,16492,"最多"],[1,16743,"\n"],[1,17087,""],[-1,17087,"]"],[-1,17397,"一些"],[1,17404,"\n\n"],[1,17622,"\n\n"],[-1,17622,"图中"],[1,17732,"`"],[-1,17732,"\n"],[-1,17740,"\n`"],[1,18557,"\n\n"],[1,18650,"，"],[-1,18650,"\n"],[1,18887,"深度优"],[-1,18887,"演示了"],[-1,18895,"深度优"],[1,18903,"是"],[1,18915,"下滑"],[1,18994,"\n"],[-1,18994,"在"],[1,19067,"\n"],[-1,19067,"。"],[1,19121,"\n"],[-1,19121,"是"],[1,19184,"节点顶"],[-1,19184,"访问顶点C"],[1,19202,"一个"],[-1,19355,"顶点"],[1,19360,"算法"],[-1,19483,"\n\n\n"]],[19486,19486],[13149,13149]]],[1528709287901,["Re@Re.local",[[-1,19475,"开始"]],[19477,19477],[19475,19475]]],[1528709290506,["Re@Re.local",[[1,19475,"继续"]],[19475,19475],[19477,19477]]],[1528709291385,["Re@Re.local",[[1,19486,"\n"]],[19483,19483],[19484,19484]]],[1528709291602,["Re@Re.local",[[1,19487,"\n"]],[19484,19484],[19485,19485]]],[1528709309776,["Re@Re.local",[[1,19485,"顶点F仅有1个邻接顶点C，但是C是黑色的，因此咩有"]],[19485,19485],[19510,19510]]],[1528709310796,["Re@Re.local",[[-1,19508,"咩有"]],[19510,19510],[19508,19508]]],[1528709314802,["Re@Re.local",[[1,19508,"就不用进行搜索了，"]],[19508,19508],[19517,19517]]],[1528709315996,["Re@Re.local",[[-1,19516,"，"]],[19517,19517],[19516,19516]]],[1528709320081,["Re@Re.local",[[1,19516,"：算法已经叨叨了"]],[19516,19516],[19524,19524]]],[1528709320693,["Re@Re.local",[[-1,19521,"叨叨了"]],[19524,19524],[19521,19521]]],[1528709342926,["Re@Re.local",[[1,19521,"到达了另一分枝的末端。以下是个图"]],[19521,19521],[19537,19537]]],[1528709344419,["Re@Re.local",[[-1,19532,"以下是个图"]],[19537,19537],[19532,19532]]],[1528709345013,["Re@Re.local",[[1,19535,"\n"]],[19532,19532],[19533,19533]]],[1528709345209,["Re@Re.local",[[1,19536,"\n"]],[19533,19533],[19534,19534]]],[1528709406437,[null,[[-1,13149,"\n"],[1,13751,"\n"],[1,13776,"搜索的"],[-1,13819,"K"],[1,13821,"ni"],[-1,13841,"\n"],[-1,13844,"kn\n"],[1,13891,"排序）"],[-1,13895,"徐安娥"],[1,14004,"节点。"],[-1,14011," dd"],[1,14138,"节点C"],[-1,14140,"C"],[-1,14181,"可"],[-1,14196,"成"],[1,15071,"中"],[-1,15103,"略"],[1,15108,"的话"],[-1,15122,"统一"],[1,15460,"棋盘"],[-1,15477,"演示"],[-1,15589,"yi懂"],[1,15592,"合法的"],[-1,15674,"\n"],[1,15786,"\n"],[1,16088,"搜索树"],[-1,16095,"3$¥"],[-1,16252,"一个"],[1,16254,"取了"],[-1,16297,"了"],[1,16298,"\n"],[-1,16492,"\n。"],[1,16494,"最多"],[-1,16743,"\n"],[-1,17088,""],[1,17088,"]"],[1,17397,"一些"],[-1,17402,"\n\n"],[-1,17622,"\n\n"],[1,17624,"图中"],[-1,17732,"`"],[1,17733,"\n"],[1,17740,"\n`"],[-1,18555,"\n\n"],[-1,18650,"，"],[1,18651,"\n"],[-1,18887,"深度优"],[1,18890,"演示了"],[1,18895,"深度优"],[-1,18900,"是"],[-1,18913,"下滑"],[-1,18994,"\n"],[1,18995,"在"],[-1,19067,"\n"],[1,19068,"。"],[-1,19121,"\n"],[1,19122,"是"],[-1,19184,"节点顶"],[1,19187,"访问顶点C"],[-1,19200,"一个"],[1,19355,"顶点"],[-1,19358,"算法"],[1,19534,"\n\n\n"]],[13149,13149],[19537,19537]]],[1528709406438,[null,[[1,13149,"\n"],[-1,13750,"\n"],[-1,13776,"搜索的"],[1,13822,"K"],[-1,13823,"ni"],[1,13845,"\n"],[1,13847,"kn\n"],[-1,13891,"排序）"],[1,13898,"徐安娥"],[-1,14004,"节点。"],[1,14014," dd"],[-1,14138,"节点C"],[1,14143,"C"],[1,14183,"可"],[1,14197,"成"],[-1,15071,"中"],[1,15104,"略"],[-1,15108,"的话"],[1,15124,"统一"],[-1,15460,"棋盘"],[1,15479,"演示"],[1,15589,"yi懂"],[-1,15589,"合法的"],[1,15674,"\n"],[-1,15785,"\n"],[-1,16088,"搜索树"],[1,16098,"3$¥"],[1,16252,"一个"],[-1,16252,"取了"],[1,16297,"了"],[-1,16297,"\n"],[1,16492,"\n。"],[-1,16492,"最多"],[1,16743,"\n"],[1,17087,""],[-1,17087,"]"],[-1,17397,"一些"],[1,17404,"\n\n"],[1,17622,"\n\n"],[-1,17622,"图中"],[1,17732,"`"],[-1,17732,"\n"],[-1,17740,"\n`"],[1,18557,"\n\n"],[1,18650,"，"],[-1,18650,"\n"],[1,18887,"深度优"],[-1,18887,"演示了"],[-1,18895,"深度优"],[1,18903,"是"],[1,18915,"下滑"],[1,18994,"\n"],[-1,18994,"在"],[1,19067,"\n"],[-1,19067,"。"],[1,19121,"\n"],[-1,19121,"是"],[1,19184,"节点顶"],[-1,19184,"访问顶点C"],[1,19202,"一个"],[-1,19355,"顶点"],[1,19360,"算法"],[-1,19534,"\n\n\n"]],[19537,19537],[13149,13149]]],[1528709349020,["Re@Re.local",[[1,19534,"![../_images/gendfsa.png](http://interactivepython.org/courselib/static/pythonds/_images/gendfsa.png)"]],[19534,19534],[19635,19635]]],[1528709349302,["Re@Re.local",[[1,19638,"\n"]],[19635,19635],[19636,19636]]],[1528709349733,["Re@Re.local",[[1,19639,"\n"]],[19636,19636],[19637,19637]]],[1528709355429,["Re@Re.local",[[1,19637,"![../_images/gendfsb.png](http://interactivepython.org/courselib/static/pythonds/_images/gendfsb.png)"]],[19637,19637],[19738,19738]]],[1528709355615,["Re@Re.local",[[1,19741,"\n"]],[19738,19738],[19739,19739]]],[1528709355820,["Re@Re.local",[[1,19742,"\n"]],[19739,19739],[19740,19740]]],[1528709360973,["Re@Re.local",[[1,19740,"![../_images/gendfsc.png](http://interactivepython.org/courselib/static/pythonds/_images/gendfsc.png)"]],[19740,19740],[19841,19841]]],[1528709361235,["Re@Re.local",[[1,19844,"\n"]],[19841,19841],[19842,19842]]],[1528709361677,["Re@Re.local",[[1,19845,"\n"]],[19842,19842],[19843,19843]]],[1528709365978,["Re@Re.local",[[1,19843,"![../_images/gendfsd.png](http://interactivepython.org/courselib/static/pythonds/_images/gendfsd.png)"]],[19843,19843],[19944,19944]]],[1528709366120,["Re@Re.local",[[1,19947,"\n"]],[19944,19944],[19945,19945]]],[1528709366376,["Re@Re.local",[[1,19948,"\n"]],[19945,19945],[19946,19946]]],[1528709369792,["Re@Re.local",[[1,19946,"![../_images/gendfse.png](http://interactivepython.org/courselib/static/pythonds/_images/gendfse.png)"]],[19946,19946],[20047,20047]]],[1528709370038,["Re@Re.local",[[1,20050,"\n"]],[20047,20047],[20048,20048]]],[1528709370291,["Re@Re.local",[[1,20051,"\n"]],[20048,20048],[20049,20049]]],[1528709373765,["Re@Re.local",[[1,20049,"![../_images/gendfsf.png](http://interactivepython.org/courselib/static/pythonds/_images/gendfsf.png)"]],[20049,20049],[20150,20150]]],[1528709374020,["Re@Re.local",[[1,20153,"\n"]],[20150,20150],[20151,20151]]],[1528709374210,["Re@Re.local",[[1,20154,"\n"]],[20151,20151],[20152,20152]]],[1528709378808,["Re@Re.local",[[1,20152,"![../_images/gendfsg.png](http://interactivepython.org/courselib/static/pythonds/_images/gendfsg.png)"]],[20152,20152],[20253,20253]]],[1528709379000,["Re@Re.local",[[1,20256,"\n"]],[20253,20253],[20254,20254]]],[1528709379502,["Re@Re.local",[[1,20257,"\n"]],[20254,20254],[20255,20255]]],[1528709382867,["Re@Re.local",[[1,20255,"![../_images/gendfsh.png](http://interactivepython.org/courselib/static/pythonds/_images/gendfsh.png)"]],[20255,20255],[20356,20356]]],[1528709383049,["Re@Re.local",[[1,20359,"\n"]],[20356,20356],[20357,20357]]],[1528709383270,["Re@Re.local",[[1,20360,"\n"]],[20357,20357],[20358,20358]]],[1528709466280,[null,[[-1,13149,"\n"],[1,13751,"\n"],[1,13776,"搜索的"],[-1,13819,"K"],[1,13821,"ni"],[-1,13841,"\n"],[-1,13844,"kn\n"],[1,13891,"排序）"],[-1,13895,"徐安娥"],[1,14004,"节点。"],[-1,14011," dd"],[1,14138,"节点C"],[-1,14140,"C"],[-1,14181,"可"],[-1,14196,"成"],[1,15071,"中"],[-1,15103,"略"],[1,15108,"的话"],[-1,15122,"统一"],[1,15460,"棋盘"],[-1,15477,"演示"],[-1,15589,"yi懂"],[1,15592,"合法的"],[-1,15674,"\n"],[1,15786,"\n"],[1,16088,"搜索树"],[-1,16095,"3$¥"],[-1,16252,"一个"],[1,16254,"取了"],[-1,16297,"了"],[1,16298,"\n"],[-1,16492,"\n。"],[1,16494,"最多"],[-1,16743,"\n"],[-1,17088,""],[1,17088,"]"],[1,17397,"一些"],[-1,17402,"\n\n"],[-1,17622,"\n\n"],[1,17624,"图中"],[-1,17732,"`"],[1,17733,"\n"],[1,17740,"\n`"],[-1,18555,"\n\n"],[-1,18650,"，"],[1,18651,"\n"],[-1,18887,"深度优"],[1,18890,"演示了"],[1,18895,"深度优"],[-1,18900,"是"],[-1,18913,"下滑"],[-1,18994,"\n"],[1,18995,"在"],[-1,19067,"\n"],[1,19068,"。"],[-1,19121,"\n"],[1,19122,"是"],[-1,19184,"节点顶"],[1,19187,"访问顶点C"],[-1,19198,"一个"],[1,19355,"顶点"],[-1,19358,"算法"],[-1,20356,""],[1,20356,"\n\n\n"]],[13149,13149],[20359,20359]]],[1528709466280,[null,[[1,13149,"\n"],[-1,13750,"\n"],[-1,13776,"搜索的"],[1,13822,"K"],[-1,13823,"ni"],[1,13845,"\n"],[1,13847,"kn\n"],[-1,13891,"排序）"],[1,13898,"徐安娥"],[-1,14004,"节点。"],[1,14014," dd"],[-1,14138,"节点C"],[1,14143,"C"],[1,14183,"可"],[1,14197,"成"],[-1,15071,"中"],[1,15104,"略"],[-1,15108,"的话"],[1,15124,"统一"],[-1,15460,"棋盘"],[1,15479,"演示"],[1,15589,"yi懂"],[-1,15589,"合法的"],[1,15674,"\n"],[-1,15785,"\n"],[-1,16088,"搜索树"],[1,16098,"3$¥"],[1,16252,"一个"],[-1,16252,"取了"],[1,16297,"了"],[-1,16297,"\n"],[1,16492,"\n。"],[-1,16492,"最多"],[1,16743,"\n"],[1,17087,""],[-1,17087,"]"],[-1,17397,"一些"],[1,17404,"\n\n"],[1,17622,"\n\n"],[-1,17622,"图中"],[1,17732,"`"],[-1,17732,"\n"],[-1,17740,"\n`"],[1,18557,"\n\n"],[1,18650,"，"],[-1,18650,"\n"],[1,18887,"深度优"],[-1,18887,"演示了"],[-1,18895,"深度优"],[1,18903,"是"],[1,18915,"下滑"],[1,18994,"\n"],[-1,18994,"在"],[1,19067,"\n"],[-1,19067,"。"],[1,19121,"\n"],[-1,19121,"是"],[1,19184,"节点顶"],[-1,19184,"访问顶点C"],[1,19200,"一个"],[-1,19355,"顶点"],[1,19360,"算法"],[1,20356,""],[-1,20356,"\n\n\n"]],[20359,20359],[13149,13149]]],[1528709408028,["Re@Re.local",[[1,20358,"![../_images/gendfsi.png](http://interactivepython.org/courselib/static/pythonds/_images/gendfsi.png)"]],[20358,20358],[20459,20459]]],[1528709409047,["Re@Re.local",[[1,20462,"\n"]],[20459,20459],[20460,20460]]],[1528709409718,["Re@Re.local",[[1,20463,"\n"]],[20460,20460],[20461,20461]]],[1528709417173,["Re@Re.local",[[1,20461,"![../_images/gendfsj.png](http://interactivepython.org/courselib/static/pythonds/_images/gendfsj.png)"]],[20461,20461],[20562,20562]]],[1528709417962,["Re@Re.local",[[1,20565,"\n"]],[20562,20562],[20563,20563]]],[1528709418328,["Re@Re.local",[[1,20566,"\n"]],[20563,20563],[20564,20564]]],[1528709424106,["Re@Re.local",[[1,20564,"![../_images/gendfsk.png](http://interactivepython.org/courselib/static/pythonds/_images/gendfsk.png)"]],[20564,20564],[20665,20665]]],[1528709424371,["Re@Re.local",[[1,20668,"\n"]],[20665,20665],[20666,20666]]],[1528709424794,["Re@Re.local",[[1,20669,"\n"]],[20666,20666],[20667,20667]]],[1528709428363,["Re@Re.local",[[1,20667,"![../_images/gendfsl.png](http://interactivepython.org/courselib/static/pythonds/_images/gendfsl.png)"]],[20667,20667],[20768,20768]]],[1528709428593,["Re@Re.local",[[1,20771,"\n"]],[20768,20768],[20769,20769]]],[1528709428814,["Re@Re.local",[[1,20772,"\n"]],[20769,20769],[20770,20770]]],[1528709454693,["Re@Re.local",[[1,20770,"每个节点的开始是"]],[20770,20770],[20778,20778]]],[1528709454768,["Re@Re.local",[[-1,20777,"是"]],[20778,20778],[20777,20777]]],[1528709456177,["Re@Re.local",[[1,20777,"和完成"]],[20777,20777],[20780,20780]]],[1528709457249,["Re@Re.local",[[-1,20775,"开始和完成"]],[20780,20780],[20775,20775]]],[1528709460902,["Re@Re.local",[[1,20775,"发现和完成时间"]],[20775,20775],[20782,20782]]],[1528709526388,[null,[[-1,13149,"\n"],[1,13751,"\n"],[1,13776,"搜索的"],[-1,13819,"K"],[1,13821,"ni"],[-1,13841,"\n"],[-1,13844,"kn\n"],[1,13891,"排序）"],[-1,13895,"徐安娥"],[1,14004,"节点。"],[-1,14011," dd"],[1,14138,"节点C"],[-1,14140,"C"],[-1,14181,"可"],[-1,14196,"成"],[1,15071,"中"],[-1,15103,"略"],[1,15108,"的话"],[-1,15122,"统一"],[1,15460,"棋盘"],[-1,15477,"演示"],[-1,15589,"yi懂"],[1,15592,"合法的"],[-1,15674,"\n"],[1,15786,"\n"],[1,16088,"搜索树"],[-1,16095,"3$¥"],[-1,16252,"一个"],[1,16254,"取了"],[-1,16297,"了"],[1,16298,"\n"],[-1,16492,"\n。"],[1,16494,"最多"],[-1,16743,"\n"],[-1,17088,""],[1,17088,"]"],[1,17397,"一些"],[-1,17402,"\n\n"],[-1,17622,"\n\n"],[1,17624,"图中"],[-1,17732,"`"],[1,17733,"\n"],[1,17740,"\n`"],[-1,18555,"\n\n"],[-1,18650,"，"],[1,18651,"\n"],[-1,18887,"深度优"],[1,18890,"演示了"],[1,18895,"深度优"],[-1,18900,"是"],[-1,18913,"下滑"],[-1,18994,"\n"],[1,18995,"在"],[-1,19067,"\n"],[1,19068,"。"],[-1,19121,"\n"],[1,19122,"是"],[-1,19184,"节点顶"],[1,19187,"访问顶点C"],[-1,19198,"一个"],[1,19355,"顶点"],[-1,19358,"算法"],[-1,20782,""],[1,20782,"\n\n\n"]],[13149,13149],[20785,20785]]],[1528709526389,[null,[[1,13149,"\n"],[-1,13750,"\n"],[-1,13776,"搜索的"],[1,13822,"K"],[-1,13823,"ni"],[1,13845,"\n"],[1,13847,"kn\n"],[-1,13891,"排序）"],[1,13898,"徐安娥"],[-1,14004,"节点。"],[1,14014," dd"],[-1,14138,"节点C"],[1,14143,"C"],[1,14183,"可"],[1,14197,"成"],[-1,15071,"中"],[1,15104,"略"],[-1,15108,"的话"],[1,15124,"统一"],[-1,15460,"棋盘"],[1,15479,"演示"],[1,15589,"yi懂"],[-1,15589,"合法的"],[1,15674,"\n"],[-1,15785,"\n"],[-1,16088,"搜索树"],[1,16098,"3$¥"],[1,16252,"一个"],[-1,16252,"取了"],[1,16297,"了"],[-1,16297,"\n"],[1,16492,"\n。"],[-1,16492,"最多"],[1,16743,"\n"],[1,17087,""],[-1,17087,"]"],[-1,17397,"一些"],[1,17404,"\n\n"],[1,17622,"\n\n"],[-1,17622,"图中"],[1,17732,"`"],[-1,17732,"\n"],[-1,17740,"\n`"],[1,18557,"\n\n"],[1,18650,"，"],[-1,18650,"\n"],[1,18887,"深度优"],[-1,18887,"演示了"],[-1,18895,"深度优"],[1,18903,"是"],[1,18915,"下滑"],[1,18994,"\n"],[-1,18994,"在"],[1,19067,"\n"],[-1,19067,"。"],[1,19121,"\n"],[-1,19121,"是"],[1,19184,"节点顶"],[-1,19184,"访问顶点C"],[1,19200,"一个"],[-1,19355,"顶点"],[1,19360,"算法"],[1,20782,""],[-1,20782,"\n\n\n"]],[20785,20785],[13149,13149]]],[1528709468739,["Re@Re.local",[[1,20782,"表示了"]],[20782,20782],[20785,20785]]],[1528709470164,["Re@Re.local",[[-1,20782,"表示了"]],[20785,20785],[20782,20782]]],[1528709477432,["Re@Re.local",[[1,20782,"表示了名为**括号属性*"]],[20782,20782],[20794,20794]]],[1528709478207,["Re@Re.local",[[-1,20793,"*"]],[20794,20794],[20793,20793]]],[1528709478799,["Re@Re.local",[[1,20793,"*"]],[20793,20793],[20794,20794]]],[1528709480654,["Re@Re.local",[[-1,20793,"*"]],[20794,20794],[20793,20793]]],[1528709482364,["Re@Re.local",[[1,20793,"()"]],[20793,20793],[20795,20795]]],[1528709482872,["Re@Re.local",[[-1,20793,"()"]],[20795,20795],[20793,20793]]],[1528709483683,["Re@Re.local",[[1,20793,"（）"]],[20793,20793],[20795,20795]]],[1528709486801,["Re@Re.local",[[1,20794,"para"]],[20794,20794],[20798,20798]]],[1528709488148,["Re@Re.local",[[-1,20797,"a"]],[20798,20798],[20797,20797]]],[1528709490561,["Re@Re.local",[[1,20797,"enthess"]],[20797,20797],[20804,20804]]],[1528709490893,["Re@Re.local",[[-1,20803,"s"]],[20804,20804],[20803,20803]]],[1528709494337,["Re@Re.local",[[1,20803,"is property"]],[20803,20803],[20814,20814]]],[1528709497498,["Re@Re.local",[[1,20815,"**"]],[20815,20815],[20817,20817]]],[1528709499335,["Re@Re.local",[[-1,20785,"名为"]],[20787,20787],[20785,20785]]],[1528709503062,["Re@Re.local",[[1,20815,"。这种"]],[20815,20815],[20818,20818]]],[1528709504390,["Re@Re.local",[[-1,20815,"。这种"]],[20818,20818],[20815,20815]]],[1528709504832,["Re@Re.local",[[1,20815,"。"]],[20815,20815],[20816,20816]]],[1528709505164,["Re@Re.local",[[-1,20815,"。"]],[20816,20816],[20815,20815]]],[1528709516792,["Re@Re.local",[[1,20815,"，意味着某个节点的所有子"]],[20815,20815],[20827,20827]]],[1528709516913,["Re@Re.local",[[-1,20826,"子"]],[20827,20827],[20826,20826]]],[1528709525941,["Re@Re.local",[[1,20823,"在深度与哦先树"]],[20823,20823],[20830,20830]]],[1528709586546,[null,[[-1,13149,"\n"],[1,13751,"\n"],[1,13776,"搜索的"],[-1,13819,"K"],[1,13821,"ni"],[-1,13841,"\n"],[-1,13844,"kn\n"],[1,13891,"排序）"],[-1,13895,"徐安娥"],[1,14004,"节点。"],[-1,14011," dd"],[1,14138,"节点C"],[-1,14140,"C"],[-1,14181,"可"],[-1,14196,"成"],[1,15071,"中"],[-1,15103,"略"],[1,15108,"的话"],[-1,15122,"统一"],[1,15460,"棋盘"],[-1,15477,"演示"],[-1,15589,"yi懂"],[1,15592,"合法的"],[-1,15674,"\n"],[1,15786,"\n"],[1,16088,"搜索树"],[-1,16095,"3$¥"],[-1,16252,"一个"],[1,16254,"取了"],[-1,16297,"了"],[1,16298,"\n"],[-1,16492,"\n。"],[1,16494,"最多"],[-1,16743,"\n"],[-1,17088,""],[1,17088,"]"],[1,17397,"一些"],[-1,17402,"\n\n"],[-1,17622,"\n\n"],[1,17624,"图中"],[-1,17732,"`"],[1,17733,"\n"],[1,17740,"\n`"],[-1,18555,"\n\n"],[-1,18650,"，"],[1,18651,"\n"],[-1,18887,"深度优"],[1,18890,"演示了"],[1,18895,"深度优"],[-1,18900,"是"],[-1,18913,"下滑"],[-1,18994,"\n"],[1,18995,"在"],[-1,19067,"\n"],[1,19068,"。"],[-1,19121,"\n"],[1,19122,"是"],[-1,19184,"节点顶"],[1,19187,"访问顶点C"],[-1,19198,"一个"],[1,19355,"顶点"],[-1,19358,"算法"],[-1,20833,""],[1,20833,"\n\n\n"]],[13149,13149],[20836,20836]]],[1528709586547,[null,[[1,13149,"\n"],[-1,13750,"\n"],[-1,13776,"搜索的"],[1,13822,"K"],[-1,13823,"ni"],[1,13845,"\n"],[1,13847,"kn\n"],[-1,13891,"排序）"],[1,13898,"徐安娥"],[-1,14004,"节点。"],[1,14014," dd"],[-1,14138,"节点C"],[1,14143,"C"],[1,14183,"可"],[1,14197,"成"],[-1,15071,"中"],[1,15104,"略"],[-1,15108,"的话"],[1,15124,"统一"],[-1,15460,"棋盘"],[1,15479,"演示"],[1,15589,"yi懂"],[-1,15589,"合法的"],[1,15674,"\n"],[-1,15785,"\n"],[-1,16088,"搜索树"],[1,16098,"3$¥"],[1,16252,"一个"],[-1,16252,"取了"],[1,16297,"了"],[-1,16297,"\n"],[1,16492,"\n。"],[-1,16492,"最多"],[1,16743,"\n"],[1,17087,""],[-1,17087,"]"],[-1,17397,"一些"],[1,17404,"\n\n"],[1,17622,"\n\n"],[-1,17622,"图中"],[1,17732,"`"],[-1,17732,"\n"],[-1,17740,"\n`"],[1,18557,"\n\n"],[1,18650,"，"],[-1,18650,"\n"],[1,18887,"深度优"],[-1,18887,"演示了"],[-1,18895,"深度优"],[1,18903,"是"],[1,18915,"下滑"],[1,18994,"\n"],[-1,18994,"在"],[1,19067,"\n"],[-1,19067,"。"],[1,19121,"\n"],[-1,19121,"是"],[1,19184,"节点顶"],[-1,19184,"访问顶点C"],[1,19200,"一个"],[-1,19355,"顶点"],[1,19360,"算法"],[1,20833,""],[-1,20833,"\n\n\n"]],[20836,20836],[13149,13149]]],[1528709527620,["Re@Re.local",[[1,20830,"中 "]],[20830,20830],[20832,20832]]],[1528709528967,["Re@Re.local",[[-1,20826,"与哦先树中 "]],[20832,20832],[20826,20826]]],[1528709529847,["Re@Re.local",[[1,20826,"在"]],[20826,20826],[20827,20827]]],[1528709530038,["Re@Re.local",[[-1,20826,"在"]],[20827,20827],[20826,20826]]],[1528709532537,["Re@Re.local",[[1,20826,"优先数中"]],[20826,20826],[20830,20830]]],[1528709533799,["Re@Re.local",[[-1,20828,"数中"]],[20830,20830],[20828,20828]]],[1528709536071,["Re@Re.local",[[1,20828,"树中"]],[20828,20828],[20830,20830]]],[1528709543180,["Re@Re.local",[[1,20833,"子节点"]],[20833,20833],[20836,20836]]],[1528709766392,[null,[[-1,13149,"\n"],[1,13751,"\n"],[1,13776,"搜索的"],[-1,13819,"K"],[1,13821,"ni"],[-1,13841,"\n"],[-1,13844,"kn\n"],[1,13891,"排序）"],[-1,13895,"徐安娥"],[1,14004,"节点。"],[-1,14011," dd"],[1,14138,"节点C"],[-1,14140,"C"],[-1,14181,"可"],[-1,14196,"成"],[1,15071,"中"],[-1,15103,"略"],[1,15108,"的话"],[-1,15122,"统一"],[1,15460,"棋盘"],[-1,15477,"演示"],[-1,15589,"yi懂"],[1,15592,"合法的"],[-1,15674,"\n"],[1,15786,"\n"],[1,16088,"搜索树"],[-1,16095,"3$¥"],[-1,16252,"一个"],[1,16254,"取了"],[-1,16297,"了"],[1,16298,"\n"],[-1,16492,"\n。"],[1,16494,"最多"],[-1,16743,"\n"],[-1,17088,""],[1,17088,"]"],[1,17397,"一些"],[-1,17402,"\n\n"],[-1,17622,"\n\n"],[1,17624,"图中"],[-1,17732,"`"],[1,17733,"\n"],[1,17740,"\n`"],[-1,18555,"\n\n"],[-1,18650,"，"],[1,18651,"\n"],[-1,18887,"深度优"],[1,18890,"演示了"],[1,18895,"深度优"],[-1,18900,"是"],[-1,18913,"下滑"],[-1,18994,"\n"],[1,18995,"在"],[-1,19067,"\n"],[1,19068,"。"],[-1,19121,"\n"],[1,19122,"是"],[-1,19184,"节点顶"],[1,19187,"访问顶点C"],[-1,19198,"一个"],[1,19355,"顶点"],[-1,19358,"算法"],[-1,20836,""],[1,20836,"\n\n\n"]],[13149,13149],[20839,20839]]],[1528709766392,[null,[[1,13149,"\n"],[-1,13750,"\n"],[-1,13776,"搜索的"],[1,13822,"K"],[-1,13823,"ni"],[1,13845,"\n"],[1,13847,"kn\n"],[-1,13891,"排序）"],[1,13898,"徐安娥"],[-1,14004,"节点。"],[1,14014," dd"],[-1,14138,"节点C"],[1,14143,"C"],[1,14183,"可"],[1,14197,"成"],[-1,15071,"中"],[1,15104,"略"],[-1,15108,"的话"],[1,15124,"统一"],[-1,15460,"棋盘"],[1,15479,"演示"],[1,15589,"yi懂"],[-1,15589,"合法的"],[1,15674,"\n"],[-1,15785,"\n"],[-1,16088,"搜索树"],[1,16098,"3$¥"],[1,16252,"一个"],[-1,16252,"取了"],[1,16297,"了"],[-1,16297,"\n"],[1,16492,"\n。"],[-1,16492,"最多"],[1,16743,"\n"],[1,17087,""],[-1,17087,"]"],[-1,17397,"一些"],[1,17404,"\n\n"],[1,17622,"\n\n"],[-1,17622,"图中"],[1,17732,"`"],[-1,17732,"\n"],[-1,17740,"\n`"],[1,18557,"\n\n"],[1,18650,"，"],[-1,18650,"\n"],[1,18887,"深度优"],[-1,18887,"演示了"],[-1,18895,"深度优"],[1,18903,"是"],[1,18915,"下滑"],[1,18994,"\n"],[-1,18994,"在"],[1,19067,"\n"],[-1,19067,"。"],[1,19121,"\n"],[-1,19121,"是"],[1,19184,"节点顶"],[-1,19184,"访问顶点C"],[1,19200,"一个"],[-1,19355,"顶点"],[1,19360,"算法"],[1,20836,""],[-1,20836,"\n\n\n"]],[20839,20839],[13149,13149]]],[1528709763120,["Re@Re.local",[[1,20836,"的"]],[20836,20836],[20837,20837]]],[1528709826440,[null,[[-1,13149,"\n"],[1,13751,"\n"],[1,13776,"搜索的"],[-1,13819,"K"],[1,13821,"ni"],[-1,13841,"\n"],[-1,13844,"kn\n"],[1,13891,"排序）"],[-1,13895,"徐安娥"],[1,14004,"节点。"],[-1,14011," dd"],[1,14138,"节点C"],[-1,14140,"C"],[-1,14181,"可"],[-1,14196,"成"],[1,15071,"中"],[-1,15103,"略"],[1,15108,"的话"],[-1,15122,"统一"],[1,15460,"棋盘"],[-1,15477,"演示"],[-1,15589,"yi懂"],[1,15592,"合法的"],[-1,15674,"\n"],[1,15786,"\n"],[1,16088,"搜索树"],[-1,16095,"3$¥"],[-1,16252,"一个"],[1,16254,"取了"],[-1,16297,"了"],[1,16298,"\n"],[-1,16492,"\n。"],[1,16494,"最多"],[-1,16743,"\n"],[-1,17088,""],[1,17088,"]"],[1,17397,"一些"],[-1,17402,"\n\n"],[-1,17622,"\n\n"],[1,17624,"图中"],[-1,17732,"`"],[1,17733,"\n"],[1,17740,"\n`"],[-1,18555,"\n\n"],[-1,18650,"，"],[1,18651,"\n"],[-1,18887,"深度优"],[1,18890,"演示了"],[1,18895,"深度优"],[-1,18900,"是"],[-1,18913,"下滑"],[-1,18994,"\n"],[1,18995,"在"],[-1,19067,"\n"],[1,19068,"。"],[-1,19121,"\n"],[1,19122,"是"],[-1,19184,"节点顶"],[1,19187,"访问顶点C"],[-1,19198,"一个"],[1,19355,"顶点"],[-1,19358,"算法"],[-1,20837,""],[1,20837,"\n\n\n"]],[13149,13149],[20840,20840]]],[1528709826440,[null,[[1,13149,"\n"],[-1,13750,"\n"],[-1,13776,"搜索的"],[1,13822,"K"],[-1,13823,"ni"],[1,13845,"\n"],[1,13847,"kn\n"],[-1,13891,"排序）"],[1,13898,"徐安娥"],[-1,14004,"节点。"],[1,14014," dd"],[-1,14138,"节点C"],[1,14143,"C"],[1,14183,"可"],[1,14197,"成"],[-1,15071,"中"],[1,15104,"略"],[-1,15108,"的话"],[1,15124,"统一"],[-1,15460,"棋盘"],[1,15479,"演示"],[1,15589,"yi懂"],[-1,15589,"合法的"],[1,15674,"\n"],[-1,15785,"\n"],[-1,16088,"搜索树"],[1,16098,"3$¥"],[1,16252,"一个"],[-1,16252,"取了"],[1,16297,"了"],[-1,16297,"\n"],[1,16492,"\n。"],[-1,16492,"最多"],[1,16743,"\n"],[1,17087,""],[-1,17087,"]"],[-1,17397,"一些"],[1,17404,"\n\n"],[1,17622,"\n\n"],[-1,17622,"图中"],[1,17732,"`"],[-1,17732,"\n"],[-1,17740,"\n`"],[1,18557,"\n\n"],[1,18650,"，"],[-1,18650,"\n"],[1,18887,"深度优"],[-1,18887,"演示了"],[-1,18895,"深度优"],[1,18903,"是"],[1,18915,"下滑"],[1,18994,"\n"],[-1,18994,"在"],[1,19067,"\n"],[-1,19067,"。"],[1,19121,"\n"],[-1,19121,"是"],[1,19184,"节点顶"],[-1,19184,"访问顶点C"],[1,19200,"一个"],[-1,19355,"顶点"],[1,19360,"算法"],[1,20837,""],[-1,20837,"\n\n\n"]],[20840,20840],[13149,13149]]],[1528709781938,["Re@Re.local",[[1,20837,"发现时间都比其父节点晚，而结束时间比其父节点早。"]],[20837,20837],[20861,20861]]],[1528709797134,["Re@Re.local",[[1,20864,"\n"]],[20861,20861],[20862,20862]]],[1528709797369,["Re@Re.local",[[1,20865,"\n"]],[20862,20862],[20863,20863]]],[1528709818660,["Re@Re.local",[[1,20863,"## 7.16 深度优先分"]],[20863,20863],[20876,20876]]],[1528709819881,["Re@Re.local",[[-1,20871,"深度优先分"]],[20876,20876],[20871,20871]]],[1528709821912,["Re@Re.local",[[1,20871,"DFS"]],[20871,20871],[20874,20874]]],[1528709823405,["Re@Re.local",[[-1,20871,"DFS"]],[20874,20874],[20871,20871]]],[1528709825105,["Re@Re.local",[[1,20871,"深度优先"]],[20871,20871],[20875,20875]]],[1528709886406,[null,[[-1,13149,"\n"],[1,13751,"\n"],[1,13776,"搜索的"],[-1,13819,"K"],[1,13821,"ni"],[-1,13841,"\n"],[-1,13844,"kn\n"],[1,13891,"排序）"],[-1,13895,"徐安娥"],[1,14004,"节点。"],[-1,14011," dd"],[1,14138,"节点C"],[-1,14140,"C"],[-1,14181,"可"],[-1,14196,"成"],[1,15071,"中"],[-1,15103,"略"],[1,15108,"的话"],[-1,15122,"统一"],[1,15460,"棋盘"],[-1,15477,"演示"],[-1,15589,"yi懂"],[1,15592,"合法的"],[-1,15674,"\n"],[1,15786,"\n"],[1,16088,"搜索树"],[-1,16095,"3$¥"],[-1,16252,"一个"],[1,16254,"取了"],[-1,16297,"了"],[1,16298,"\n"],[-1,16492,"\n。"],[1,16494,"最多"],[-1,16743,"\n"],[-1,17088,""],[1,17088,"]"],[1,17397,"一些"],[-1,17402,"\n\n"],[-1,17622,"\n\n"],[1,17624,"图中"],[-1,17732,"`"],[1,17733,"\n"],[1,17740,"\n`"],[-1,18555,"\n\n"],[-1,18650,"，"],[1,18651,"\n"],[-1,18887,"深度优"],[1,18890,"演示了"],[1,18895,"深度优"],[-1,18900,"是"],[-1,18913,"下滑"],[-1,18994,"\n"],[1,18995,"在"],[-1,19067,"\n"],[1,19068,"。"],[-1,19121,"\n"],[1,19122,"是"],[-1,19184,"节点顶"],[1,19187,"访问顶点C"],[-1,19198,"一个"],[1,19355,"顶点"],[-1,19358,"算法"],[-1,20875,""],[1,20875,"\n\n\n"]],[13149,13149],[20878,20878]]],[1528709886407,[null,[[1,13149,"\n"],[-1,13750,"\n"],[-1,13776,"搜索的"],[1,13822,"K"],[-1,13823,"ni"],[1,13845,"\n"],[1,13847,"kn\n"],[-1,13891,"排序）"],[1,13898,"徐安娥"],[-1,14004,"节点。"],[1,14014," dd"],[-1,14138,"节点C"],[1,14143,"C"],[1,14183,"可"],[1,14197,"成"],[-1,15071,"中"],[1,15104,"略"],[-1,15108,"的话"],[1,15124,"统一"],[-1,15460,"棋盘"],[1,15479,"演示"],[1,15589,"yi懂"],[-1,15589,"合法的"],[1,15674,"\n"],[-1,15785,"\n"],[-1,16088,"搜索树"],[1,16098,"3$¥"],[1,16252,"一个"],[-1,16252,"取了"],[1,16297,"了"],[-1,16297,"\n"],[1,16492,"\n。"],[-1,16492,"最多"],[1,16743,"\n"],[1,17087,""],[-1,17087,"]"],[-1,17397,"一些"],[1,17404,"\n\n"],[1,17622,"\n\n"],[-1,17622,"图中"],[1,17732,"`"],[-1,17732,"\n"],[-1,17740,"\n`"],[1,18557,"\n\n"],[1,18650,"，"],[-1,18650,"\n"],[1,18887,"深度优"],[-1,18887,"演示了"],[-1,18895,"深度优"],[1,18903,"是"],[1,18915,"下滑"],[1,18994,"\n"],[-1,18994,"在"],[1,19067,"\n"],[-1,19067,"。"],[1,19121,"\n"],[-1,19121,"是"],[1,19184,"节点顶"],[-1,19184,"访问顶点C"],[1,19200,"一个"],[-1,19355,"顶点"],[1,19360,"算法"],[1,20875,""],[-1,20875,"\n\n\n"]],[20878,20878],[13149,13149]]],[1528709828048,["Re@Re.local",[[1,20877,"分析 ##"]],[20877,20877],[20882,20882]]],[1528709828226,["Re@Re.local",[[1,20885,"\n"]],[20882,20882],[20883,20883]]],[1528709828425,["Re@Re.local",[[1,20886,"\n"]],[20883,20883],[20884,20884]]],[1528709841916,["Re@Re.local",[[1,20884,"深度优先搜索一般运行时间如下"]],[20884,20884],[20898,20898]]],[1528709845078,["Re@Re.local",[[-1,20896,"如下"]],[20898,20898],[20896,20896]]],[1528709860288,["Re@Re.local",[[1,20896,"分析如下。dfs中的循环都是O(V0的，"]],[20896,20896],[20916,20916]]],[1528709861359,["Re@Re.local",[[-1,20913,"0的，"]],[20916,20916],[20913,20913]]],[1528709862968,["Re@Re.local",[[1,20913,"），"]],[20913,20913],[20915,20915]]],[1528709882372,["Re@Re.local",[[1,20901,"不考虑dfsvisit中的"]],[20901,20901],[20914,20914]]],[1528709884622,["Re@Re.local",[[-1,20912,"中的"]],[20914,20914],[20912,20912]]],[1528709885538,["Re@Re.local",[[1,20912,"的"]],[20912,20912],[20913,20913]]],[1528709946399,[null,[[-1,13149,"\n"],[1,13751,"\n"],[1,13776,"搜索的"],[-1,13819,"K"],[1,13821,"ni"],[-1,13841,"\n"],[-1,13844,"kn\n"],[1,13891,"排序）"],[-1,13895,"徐安娥"],[1,14004,"节点。"],[-1,14011," dd"],[1,14138,"节点C"],[-1,14140,"C"],[-1,14181,"可"],[-1,14196,"成"],[1,15071,"中"],[-1,15103,"略"],[1,15108,"的话"],[-1,15122,"统一"],[1,15460,"棋盘"],[-1,15477,"演示"],[-1,15589,"yi懂"],[1,15592,"合法的"],[-1,15674,"\n"],[1,15786,"\n"],[1,16088,"搜索树"],[-1,16095,"3$¥"],[-1,16252,"一个"],[1,16254,"取了"],[-1,16297,"了"],[1,16298,"\n"],[-1,16492,"\n。"],[1,16494,"最多"],[-1,16743,"\n"],[-1,17088,""],[1,17088,"]"],[1,17397,"一些"],[-1,17402,"\n\n"],[-1,17622,"\n\n"],[1,17624,"图中"],[-1,17732,"`"],[1,17733,"\n"],[1,17740,"\n`"],[-1,18555,"\n\n"],[-1,18650,"，"],[1,18651,"\n"],[-1,18887,"深度优"],[1,18890,"演示了"],[1,18895,"深度优"],[-1,18900,"是"],[-1,18913,"下滑"],[-1,18994,"\n"],[1,18995,"在"],[-1,19067,"\n"],[1,19068,"。"],[-1,19121,"\n"],[1,19122,"是"],[-1,19184,"节点顶"],[1,19187,"访问顶点C"],[-1,19198,"一个"],[1,19355,"顶点"],[-1,19358,"算法"],[1,20875,"搜索"],[-1,20894,"如下"],[1,20927,"\n\n\n"]],[13149,13149],[20930,20930]]],[1528709946399,[null,[[1,13149,"\n"],[-1,13750,"\n"],[-1,13776,"搜索的"],[1,13822,"K"],[-1,13823,"ni"],[1,13845,"\n"],[1,13847,"kn\n"],[-1,13891,"排序）"],[1,13898,"徐安娥"],[-1,14004,"节点。"],[1,14014," dd"],[-1,14138,"节点C"],[1,14143,"C"],[1,14183,"可"],[1,14197,"成"],[-1,15071,"中"],[1,15104,"略"],[-1,15108,"的话"],[1,15124,"统一"],[-1,15460,"棋盘"],[1,15479,"演示"],[1,15589,"yi懂"],[-1,15589,"合法的"],[1,15674,"\n"],[-1,15785,"\n"],[-1,16088,"搜索树"],[1,16098,"3$¥"],[1,16252,"一个"],[-1,16252,"取了"],[1,16297,"了"],[-1,16297,"\n"],[1,16492,"\n。"],[-1,16492,"最多"],[1,16743,"\n"],[1,17087,""],[-1,17087,"]"],[-1,17397,"一些"],[1,17404,"\n\n"],[1,17622,"\n\n"],[-1,17622,"图中"],[1,17732,"`"],[-1,17732,"\n"],[-1,17740,"\n`"],[1,18557,"\n\n"],[1,18650,"，"],[-1,18650,"\n"],[1,18887,"深度优"],[-1,18887,"演示了"],[-1,18895,"深度优"],[1,18903,"是"],[1,18915,"下滑"],[1,18994,"\n"],[-1,18994,"在"],[1,19067,"\n"],[-1,19067,"。"],[1,19121,"\n"],[-1,19121,"是"],[1,19184,"节点顶"],[-1,19184,"访问顶点C"],[1,19200,"一个"],[-1,19355,"顶点"],[1,19360,"算法"],[-1,20875,"搜索"],[1,20896,"如下"],[-1,20927,"\n\n\n"]],[20930,20930],[13149,13149]]],[1528709888401,["Re@Re.local",[[1,20913,"代码"]],[20913,20913],[20915,20915]]],[1528709889939,["Re@Re.local",[[-1,20912,"的代码"]],[20915,20915],[20912,20912]]],[1528709894161,["Re@Re.local",[[1,20912,"的详细大"]],[20912,20912],[20916,20916]]],[1528709894635,["Re@Re.local",[[-1,20913,"详细大"]],[20916,20916],[20913,20913]]],[1528709896772,["Re@Re.local",[[1,20913,"具体情况，"]],[20913,20913],[20918,20918]]],[1528709903163,["Re@Re.local",[[-1,20931,"，"]],[20932,20932],[20931,20931]]],[1528709916552,["Re@Re.local",[[1,20931,"的，因为它们都是遍历图中所"]],[20931,20931],[20944,20944]]],[1528709916640,["Re@Re.local",[[-1,20943,"所"]],[20944,20944],[20943,20943]]],[1528709918310,["Re@Re.local",[[1,20943,"各节点"]],[20943,20943],[20946,20946]]],[1528709919151,["Re@Re.local",[[-1,20944,"节点"]],[20946,20946],[20944,20944]]],[1528709928324,["Re@Re.local",[[1,20944,"顶点。在dfsvisit中，该虚幻"]],[20944,20944],[20961,20961]]],[1528709929188,["Re@Re.local",[[-1,20959,"虚幻"]],[20961,20961],[20959,20959]]],[1528709932920,["Re@Re.local",[[1,20959,"循环为每条边"]],[20959,20959],[20965,20965]]],[1528709941007,["Re@Re.local",[[-1,20958,"该循环为每条边"]],[20965,20965],[20958,20958]]],[1528710006423,[null,[[-1,13149,"\n"],[1,13751,"\n"],[1,13776,"搜索的"],[-1,13819,"K"],[1,13821,"ni"],[-1,13841,"\n"],[-1,13844,"kn\n"],[1,13891,"排序）"],[-1,13895,"徐安娥"],[1,14004,"节点。"],[-1,14011," dd"],[1,14138,"节点C"],[-1,14140,"C"],[-1,14181,"可"],[-1,14196,"成"],[1,15071,"中"],[-1,15103,"略"],[1,15108,"的话"],[-1,15122,"统一"],[1,15460,"棋盘"],[-1,15477,"演示"],[-1,15589,"yi懂"],[1,15592,"合法的"],[-1,15674,"\n"],[1,15786,"\n"],[1,16088,"搜索树"],[-1,16095,"3$¥"],[-1,16252,"一个"],[1,16254,"取了"],[-1,16297,"了"],[1,16298,"\n"],[-1,16492,"\n。"],[1,16494,"最多"],[-1,16743,"\n"],[-1,17088,""],[1,17088,"]"],[1,17397,"一些"],[-1,17402,"\n\n"],[-1,17622,"\n\n"],[1,17624,"图中"],[-1,17732,"`"],[1,17733,"\n"],[1,17740,"\n`"],[-1,18555,"\n\n"],[-1,18650,"，"],[1,18651,"\n"],[-1,18887,"深度优"],[1,18890,"演示了"],[1,18895,"深度优"],[-1,18900,"是"],[-1,18913,"下滑"],[-1,18994,"\n"],[1,18995,"在"],[-1,19067,"\n"],[1,19068,"。"],[-1,19121,"\n"],[1,19122,"是"],[-1,19184,"节点顶"],[1,19187,"访问顶点C"],[-1,19198,"一个"],[1,19355,"顶点"],[-1,19358,"算法"],[1,20875,"搜索"],[-1,20894,"如下"],[1,20958,"\n\n\n"]],[13149,13149],[20961,20961]]],[1528710006423,[null,[[1,13149,"\n"],[-1,13750,"\n"],[-1,13776,"搜索的"],[1,13822,"K"],[-1,13823,"ni"],[1,13845,"\n"],[1,13847,"kn\n"],[-1,13891,"排序）"],[1,13898,"徐安娥"],[-1,14004,"节点。"],[1,14014," dd"],[-1,14138,"节点C"],[1,14143,"C"],[1,14183,"可"],[1,14197,"成"],[-1,15071,"中"],[1,15104,"略"],[-1,15108,"的话"],[1,15124,"统一"],[-1,15460,"棋盘"],[1,15479,"演示"],[1,15589,"yi懂"],[-1,15589,"合法的"],[1,15674,"\n"],[-1,15785,"\n"],[-1,16088,"搜索树"],[1,16098,"3$¥"],[1,16252,"一个"],[-1,16252,"取了"],[1,16297,"了"],[-1,16297,"\n"],[1,16492,"\n。"],[-1,16492,"最多"],[1,16743,"\n"],[1,17087,""],[-1,17087,"]"],[-1,17397,"一些"],[1,17404,"\n\n"],[1,17622,"\n\n"],[-1,17622,"图中"],[1,17732,"`"],[-1,17732,"\n"],[-1,17740,"\n`"],[1,18557,"\n\n"],[1,18650,"，"],[-1,18650,"\n"],[1,18887,"深度优"],[-1,18887,"演示了"],[-1,18895,"深度优"],[1,18903,"是"],[1,18915,"下滑"],[1,18994,"\n"],[-1,18994,"在"],[1,19067,"\n"],[-1,19067,"。"],[1,19121,"\n"],[-1,19121,"是"],[1,19184,"节点顶"],[-1,19184,"访问顶点C"],[1,19200,"一个"],[-1,19355,"顶点"],[1,19360,"算法"],[-1,20875,"搜索"],[1,20896,"如下"],[-1,20958,"\n\n\n"]],[20961,20961],[13149,13149]]],[1528709962835,["Re@Re.local",[[1,20958,"遍历当前顶点的邻接列表中的顶点"]],[20958,20958],[20973,20973]]],[1528709963330,["Re@Re.local",[[-1,20971,"顶点"]],[20973,20973],[20971,20971]]],[1528709981030,["Re@Re.local",[[1,20971,"边。由于dfsvisit尽在vertex为白色"]],[20971,20971],[20994,20994]]],[1528709983302,["Re@Re.local",[[-1,20983,"尽在vertex为白色"]],[20994,20994],[20983,20983]]],[1528709984633,["Re@Re.local",[[1,20983,"仅仅"]],[20983,20983],[20985,20985]]],[1528709984725,["Re@Re.local",[[-1,20984,"仅"]],[20985,20985],[20984,20984]]],[1528709994901,["Re@Re.local",[[1,20984,"在顶点为白色时进行递归调用，循环"]],[20984,20984],[21000,21000]]],[1528710066425,[null,[[-1,13149,"\n"],[1,13751,"\n"],[1,13776,"搜索的"],[-1,13819,"K"],[1,13821,"ni"],[-1,13841,"\n"],[-1,13844,"kn\n"],[1,13891,"排序）"],[-1,13895,"徐安娥"],[1,14004,"节点。"],[-1,14011," dd"],[1,14138,"节点C"],[-1,14140,"C"],[-1,14181,"可"],[-1,14196,"成"],[1,15071,"中"],[-1,15103,"略"],[1,15108,"的话"],[-1,15122,"统一"],[1,15460,"棋盘"],[-1,15477,"演示"],[-1,15589,"yi懂"],[1,15592,"合法的"],[-1,15674,"\n"],[1,15786,"\n"],[1,16088,"搜索树"],[-1,16095,"3$¥"],[-1,16252,"一个"],[1,16254,"取了"],[-1,16297,"了"],[1,16298,"\n"],[-1,16492,"\n。"],[1,16494,"最多"],[-1,16743,"\n"],[-1,17088,""],[1,17088,"]"],[1,17397,"一些"],[-1,17402,"\n\n"],[-1,17622,"\n\n"],[1,17624,"图中"],[-1,17732,"`"],[1,17733,"\n"],[1,17740,"\n`"],[-1,18555,"\n\n"],[-1,18650,"，"],[1,18651,"\n"],[-1,18887,"深度优"],[1,18890,"演示了"],[1,18895,"深度优"],[-1,18900,"是"],[-1,18913,"下滑"],[-1,18994,"\n"],[1,18995,"在"],[-1,19067,"\n"],[1,19068,"。"],[-1,19121,"\n"],[1,19122,"是"],[-1,19184,"节点顶"],[1,19187,"访问顶点C"],[-1,19198,"一个"],[1,19355,"顶点"],[-1,19358,"算法"],[1,20875,"搜索"],[-1,20894,"如下"],[1,21000,"\n\n\n"]],[13149,13149],[21003,21003]]],[1528710066426,[null,[[1,13149,"\n"],[-1,13750,"\n"],[-1,13776,"搜索的"],[1,13822,"K"],[-1,13823,"ni"],[1,13845,"\n"],[1,13847,"kn\n"],[-1,13891,"排序）"],[1,13898,"徐安娥"],[-1,14004,"节点。"],[1,14014," dd"],[-1,14138,"节点C"],[1,14143,"C"],[1,14183,"可"],[1,14197,"成"],[-1,15071,"中"],[1,15104,"略"],[-1,15108,"的话"],[1,15124,"统一"],[-1,15460,"棋盘"],[1,15479,"演示"],[1,15589,"yi懂"],[-1,15589,"合法的"],[1,15674,"\n"],[-1,15785,"\n"],[-1,16088,"搜索树"],[1,16098,"3$¥"],[1,16252,"一个"],[-1,16252,"取了"],[1,16297,"了"],[-1,16297,"\n"],[1,16492,"\n。"],[-1,16492,"最多"],[1,16743,"\n"],[1,17087,""],[-1,17087,"]"],[-1,17397,"一些"],[1,17404,"\n\n"],[1,17622,"\n\n"],[-1,17622,"图中"],[1,17732,"`"],[-1,17732,"\n"],[-1,17740,"\n`"],[1,18557,"\n\n"],[1,18650,"，"],[-1,18650,"\n"],[1,18887,"深度优"],[-1,18887,"演示了"],[-1,18895,"深度优"],[1,18903,"是"],[1,18915,"下滑"],[1,18994,"\n"],[-1,18994,"在"],[1,19067,"\n"],[-1,19067,"。"],[1,19121,"\n"],[-1,19121,"是"],[1,19184,"节点顶"],[-1,19184,"访问顶点C"],[1,19200,"一个"],[-1,19355,"顶点"],[1,19360,"算法"],[-1,20875,"搜索"],[1,20896,"如下"],[-1,21000,"\n\n\n"]],[21003,21003],[13149,13149]]],[1528710008261,["Re@Re.local",[[1,21000,"仅"]],[21000,21000],[21001,21001]]],[1528710009349,["Re@Re.local",[[-1,20998,"循环仅"]],[21001,21001],[20998,20998]]],[1528710038832,["Re@Re.local",[[1,20998,"该循环对图中的每条边最多执行1次，或者说O(E)。因此，DFS的总时间是O(V+E)的。"]],[20998,20998],[21042,21042]]],[1528710039134,["Re@Re.local",[[1,21045,"\n"]],[21042,21042],[21043,21043]]],[1528710039338,["Re@Re.local",[[1,21046,"\n"]],[21043,21043],[21044,21044]]],[1528710049642,["Re@Re.local",[[1,21044,"# "]],[21044,21044],[21046,21046]]],[1528710050160,["Re@Re.local",[[-1,21045," "]],[21046,21046],[21045,21045]]],[1528710056175,["Re@Re.local",[[1,21045,"# 7.17 拓扑排序 ##"]],[21045,21045],[21059,21059]]],[1528710056340,["Re@Re.local",[[1,21062,"\n"]],[21059,21059],[21060,21060]]],[1528710056579,["Re@Re.local",[[1,21063,"\n"]],[21060,21060],[21061,21061]]],[1528710061942,["Re@Re.local",[[1,21061,"在"]],[21061,21061],[21062,21062]]],[1528710126662,[null,[[-1,13149,"\n"],[1,13751,"\n"],[1,13776,"搜索的"],[-1,13819,"K"],[1,13821,"ni"],[-1,13841,"\n"],[-1,13844,"kn\n"],[1,13891,"排序）"],[-1,13895,"徐安娥"],[1,14004,"节点。"],[-1,14011," dd"],[1,14138,"节点C"],[-1,14140,"C"],[-1,14181,"可"],[-1,14196,"成"],[1,15071,"中"],[-1,15103,"略"],[1,15108,"的话"],[-1,15122,"统一"],[1,15460,"棋盘"],[-1,15477,"演示"],[-1,15589,"yi懂"],[1,15592,"合法的"],[-1,15677,"\n"],[1,15786,"\n"],[1,16088,"搜索树"],[-1,16095,"3$¥"],[-1,16252,"一个"],[1,16254,"取了"],[-1,16297,"了"],[1,16298,"\n"],[-1,16492,"\n。"],[1,16494,"最多"],[-1,16743,"\n"],[-1,17088,""],[1,17088,"]"],[1,17397,"一些"],[-1,17402,"\n\n"],[-1,17622,"\n\n"],[1,17624,"图中"],[-1,17732,"`"],[1,17733,"\n"],[1,17740,"\n`"],[-1,18555,"\n\n"],[-1,18650,"，"],[1,18651,"\n"],[-1,18887,"深度优"],[1,18890,"演示了"],[1,18895,"深度优"],[-1,18900,"是"],[-1,18913,"下滑"],[-1,18994,"\n"],[1,18995,"在"],[-1,19067,"\n"],[1,19068,"。"],[-1,19121,"\n"],[1,19122,"是"],[-1,19184,"节点顶"],[1,19187,"访问顶点C"],[-1,19198,"一个"],[1,19355,"顶点"],[-1,19358,"算法"],[1,20875,"搜索"],[-1,20894,"如下"],[-1,21062,""],[1,21062,"\n\n\n"]],[13149,13149],[21065,21065]]],[1528710126662,[null,[[1,13149,"\n"],[-1,13750,"\n"],[-1,13776,"搜索的"],[1,13822,"K"],[-1,13823,"ni"],[1,13845,"\n"],[1,13847,"kn\n"],[-1,13891,"排序）"],[1,13898,"徐安娥"],[-1,14004,"节点。"],[1,14014," dd"],[-1,14138,"节点C"],[1,14143,"C"],[1,14183,"可"],[1,14197,"成"],[-1,15071,"中"],[1,15104,"略"],[-1,15108,"的话"],[1,15124,"统一"],[-1,15460,"棋盘"],[1,15479,"演示"],[1,15589,"yi懂"],[-1,15589,"合法的"],[1,15677,"\n"],[-1,15785,"\n"],[-1,16088,"搜索树"],[1,16098,"3$¥"],[1,16252,"一个"],[-1,16252,"取了"],[1,16297,"了"],[-1,16297,"\n"],[1,16492,"\n。"],[-1,16492,"最多"],[1,16743,"\n"],[1,17087,""],[-1,17087,"]"],[-1,17397,"一些"],[1,17404,"\n\n"],[1,17622,"\n\n"],[-1,17622,"图中"],[1,17732,"`"],[-1,17732,"\n"],[-1,17740,"\n`"],[1,18557,"\n\n"],[1,18650,"，"],[-1,18650,"\n"],[1,18887,"深度优"],[-1,18887,"演示了"],[-1,18895,"深度优"],[1,18903,"是"],[1,18915,"下滑"],[1,18994,"\n"],[-1,18994,"在"],[1,19067,"\n"],[-1,19067,"。"],[1,19121,"\n"],[-1,19121,"是"],[1,19184,"节点顶"],[-1,19184,"访问顶点C"],[1,19200,"一个"],[-1,19355,"顶点"],[1,19360,"算法"],[-1,20875,"搜索"],[1,20896,"如下"],[1,21062,""],[-1,21062,"\n\n\n"]],[21065,21065],[13149,13149]]],[1528710075006,["Re@Re.local",[[-1,21061,"在"]],[21062,21062],[21061,21061]]],[1528710094521,["Re@Re.local",[[1,21061,"计算机科学家几乎可以把所有问题都转化为图问题，为了"]],[21061,21061],[21086,21086]]],[1528710095730,["Re@Re.local",[[-1,21084,"为了"]],[21086,21086],[21084,21084]]],[1528710099235,["Re@Re.local",[[1,21084,"下面以1各"]],[21084,21084],[21089,21089]]],[1528710099986,["Re@Re.local",[[-1,21088,"各"]],[21089,21089],[21088,21088]]],[1528710108234,["Re@Re.local",[[1,21088,"个复杂问题作演示，即"]],[21088,21088],[21098,21098]]],[1528710367148,[null,[[-1,13149,"\n"],[1,13751,"\n"],[1,13776,"搜索的"],[-1,13819,"K"],[1,13821,"ni"],[-1,13841,"\n"],[-1,13844,"kn\n"],[1,13891,"排序）"],[-1,13895,"徐安娥"],[1,14004,"节点。"],[-1,14011," dd"],[1,14138,"节点C"],[-1,14140,"C"],[-1,14181,"可"],[-1,14196,"成"],[1,15071,"中"],[-1,15103,"略"],[1,15108,"的话"],[-1,15122,"统一"],[1,15460,"棋盘"],[-1,15477,"演示"],[-1,15589,"yi懂"],[1,15592,"合法的"],[-1,15677,"\n"],[1,15786,"\n"],[1,16088,"搜索树"],[-1,16095,"3$¥"],[-1,16252,"一个"],[1,16254,"取了"],[-1,16297,"了"],[1,16298,"\n"],[-1,16492,"\n。"],[1,16494,"最多"],[-1,16743,"\n"],[-1,17088,""],[1,17088,"]"],[1,17397,"一些"],[-1,17402,"\n\n"],[-1,17622,"\n\n"],[1,17624,"图中"],[-1,17732,"`"],[1,17733,"\n"],[1,17740,"\n`"],[-1,18555,"\n\n"],[-1,18650,"，"],[1,18651,"\n"],[-1,18887,"深度优"],[1,18890,"演示了"],[1,18895,"深度优"],[-1,18900,"是"],[-1,18913,"下滑"],[-1,18994,"\n"],[1,18995,"在"],[-1,19067,"\n"],[1,19068,"。"],[-1,19121,"\n"],[1,19122,"是"],[-1,19184,"节点顶"],[1,19187,"访问顶点C"],[-1,19198,"一个"],[1,19355,"顶点"],[-1,19358,"算法"],[1,20875,"搜索"],[-1,20894,"如下"],[1,21098,"\n\n\n"]],[13149,13149],[21101,21101]]],[1528710367148,[null,[[1,13149,"\n"],[-1,13750,"\n"],[-1,13776,"搜索的"],[1,13822,"K"],[-1,13823,"ni"],[1,13845,"\n"],[1,13847,"kn\n"],[-1,13891,"排序）"],[1,13898,"徐安娥"],[-1,14004,"节点。"],[1,14014," dd"],[-1,14138,"节点C"],[1,14143,"C"],[1,14183,"可"],[1,14197,"成"],[-1,15071,"中"],[1,15104,"略"],[-1,15108,"的话"],[1,15124,"统一"],[-1,15460,"棋盘"],[1,15479,"演示"],[1,15589,"yi懂"],[-1,15589,"合法的"],[1,15677,"\n"],[-1,15785,"\n"],[-1,16088,"搜索树"],[1,16098,"3$¥"],[1,16252,"一个"],[-1,16252,"取了"],[1,16297,"了"],[-1,16297,"\n"],[1,16492,"\n。"],[-1,16492,"最多"],[1,16743,"\n"],[1,17087,""],[-1,17087,"]"],[-1,17397,"一些"],[1,17404,"\n\n"],[1,17622,"\n\n"],[-1,17622,"图中"],[1,17732,"`"],[-1,17732,"\n"],[-1,17740,"\n`"],[1,18557,"\n\n"],[1,18650,"，"],[-1,18650,"\n"],[1,18887,"深度优"],[-1,18887,"演示了"],[-1,18895,"深度优"],[1,18903,"是"],[1,18915,"下滑"],[1,18994,"\n"],[-1,18994,"在"],[1,19067,"\n"],[-1,19067,"。"],[1,19121,"\n"],[-1,19121,"是"],[1,19184,"节点顶"],[-1,19184,"访问顶点C"],[1,19200,"一个"],[-1,19355,"顶点"],[1,19360,"算法"],[-1,20875,"搜索"],[1,20896,"如下"],[-1,21098,"\n\n\n"]],[21101,21101],[13149,13149]]],[1528710355870,["Re@Re.local",[[1,21098,"jiao"]],[21098,21098],[21102,21102]]],[1528710356800,["Re@Re.local",[[-1,21098,"jiao"]],[21102,21102],[21098,21098]]],[1528710361032,["Re@Re.local",[[1,21098,"搅拌鸡蛋比"]],[21098,21098],[21103,21103]]],[1528710362589,["Re@Re.local",[[-1,21100,"鸡蛋比"]],[21103,21103],[21100,21100]]],[1528710364303,["Re@Re.local",[[1,21100,"鸡蛋饼。"]],[21100,21100],[21104,21104]]],[1528710427277,[null,[[-1,13149,"\n"],[1,13751,"\n"],[1,13776,"搜索的"],[-1,13819,"K"],[1,13821,"ni"],[-1,13841,"\n"],[-1,13844,"kn\n"],[1,13891,"排序）"],[-1,13895,"徐安娥"],[1,14004,"节点。"],[-1,14011," dd"],[1,14138,"节点C"],[-1,14140,"C"],[-1,14181,"可"],[-1,14196,"成"],[1,15071,"中"],[-1,15103,"略"],[1,15108,"的话"],[-1,15122,"统一"],[1,15460,"棋盘"],[-1,15477,"演示"],[-1,15589,"yi懂"],[1,15592,"合法的"],[-1,15677,"\n"],[1,15786,"\n"],[1,16088,"搜索树"],[-1,16095,"3$¥"],[-1,16252,"一个"],[1,16254,"取了"],[-1,16297,"了"],[1,16298,"\n"],[-1,16492,"\n。"],[1,16494,"最多"],[-1,16743,"\n"],[-1,17088,""],[1,17088,"]"],[1,17397,"一些"],[-1,17402,"\n\n"],[-1,17622,"\n\n"],[1,17624,"图中"],[-1,17732,"`"],[1,17733,"\n"],[1,17740,"\n`"],[-1,18555,"\n\n"],[-1,18650,"，"],[1,18651,"\n"],[-1,18887,"深度优"],[1,18890,"演示了"],[1,18895,"深度优"],[-1,18900,"是"],[-1,18913,"下滑"],[-1,18994,"\n"],[1,18995,"在"],[-1,19067,"\n"],[1,19068,"。"],[-1,19121,"\n"],[1,19122,"是"],[-1,19184,"节点顶"],[1,19187,"访问顶点C"],[-1,19198,"一个"],[1,19355,"顶点"],[-1,19358,"算法"],[1,20875,"搜索"],[-1,20894,"如下"],[1,21104,"\n\n\n"]],[13149,13149],[21107,21107]]],[1528710427277,[null,[[1,13149,"\n"],[-1,13750,"\n"],[-1,13776,"搜索的"],[1,13822,"K"],[-1,13823,"ni"],[1,13845,"\n"],[1,13847,"kn\n"],[-1,13891,"排序）"],[1,13898,"徐安娥"],[-1,14004,"节点。"],[1,14014," dd"],[-1,14138,"节点C"],[1,14143,"C"],[1,14183,"可"],[1,14197,"成"],[-1,15071,"中"],[1,15104,"略"],[-1,15108,"的话"],[1,15124,"统一"],[-1,15460,"棋盘"],[1,15479,"演示"],[1,15589,"yi懂"],[-1,15589,"合法的"],[1,15677,"\n"],[-1,15785,"\n"],[-1,16088,"搜索树"],[1,16098,"3$¥"],[1,16252,"一个"],[-1,16252,"取了"],[1,16297,"了"],[-1,16297,"\n"],[1,16492,"\n。"],[-1,16492,"最多"],[1,16743,"\n"],[1,17087,""],[-1,17087,"]"],[-1,17397,"一些"],[1,17404,"\n\n"],[1,17622,"\n\n"],[-1,17622,"图中"],[1,17732,"`"],[-1,17732,"\n"],[-1,17740,"\n`"],[1,18557,"\n\n"],[1,18650,"，"],[-1,18650,"\n"],[1,18887,"深度优"],[-1,18887,"演示了"],[-1,18895,"深度优"],[1,18903,"是"],[1,18915,"下滑"],[1,18994,"\n"],[-1,18994,"在"],[1,19067,"\n"],[-1,19067,"。"],[1,19121,"\n"],[-1,19121,"是"],[1,19184,"节点顶"],[-1,19184,"访问顶点C"],[1,19200,"一个"],[-1,19355,"顶点"],[1,19360,"算法"],[-1,20875,"搜索"],[1,20896,"如下"],[-1,21104,"\n\n\n"]],[21107,21107],[13149,13149]]],[1528710371294,["Re@Re.local",[[1,21104,"配方很简单："]],[21104,21104],[21110,21110]]],[1528710371727,["Re@Re.local",[[-1,21109,"："]],[21110,21110],[21109,21109]]],[1528710376484,["Re@Re.local",[[1,21109,"，1个鸡蛋，1呗"]],[21109,21109],[21117,21117]]],[1528710377616,["Re@Re.local",[[-1,21116,"呗"]],[21117,21117],[21116,21116]]],[1528710402579,["Re@Re.local",[[1,21116,"杯面粉，1勺子"]],[21116,21116],[21123,21123]]],[1528710402700,["Re@Re.local",[[-1,21122,"子"]],[21123,21123],[21122,21122]]],[1528710412693,["Re@Re.local",[[1,21122,"油以及$3"]],[21122,21122],[21127,21127]]],[1528710414862,["Re@Re.local",[[-1,21126,"3"]],[21127,21127],[21126,21126]]],[1528710416683,["Re@Re.local",[[1,21126,"3="]],[21126,21126],[21128,21128]]],[1528710417567,["Re@Re.local",[[-1,21126,"3="]],[21128,21128],[21126,21126]]],[1528710425901,["Re@Re.local",[[1,21126,"\\frac{3}{4}$杯"]],[21126,21126],[21139,21139]]],[1528710487340,[null,[[-1,13149,"\n"],[1,13751,"\n"],[1,13776,"搜索的"],[-1,13819,"K"],[1,13821,"ni"],[-1,13841,"\n"],[-1,13844,"kn\n"],[1,13891,"排序）"],[-1,13895,"徐安娥"],[1,14004,"节点。"],[-1,14011," dd"],[1,14138,"节点C"],[-1,14140,"C"],[-1,14181,"可"],[-1,14196,"成"],[1,15071,"中"],[-1,15103,"略"],[1,15108,"的话"],[-1,15122,"统一"],[1,15460,"棋盘"],[-1,15477,"演示"],[-1,15589,"yi懂"],[1,15592,"合法的"],[-1,15677,"\n"],[1,15786,"\n"],[1,16088,"搜索树"],[-1,16095,"3$¥"],[-1,16252,"一个"],[1,16254,"取了"],[-1,16297,"了"],[1,16298,"\n"],[-1,16492,"\n。"],[1,16494,"最多"],[-1,16743,"\n"],[-1,17088,""],[1,17088,"]"],[1,17397,"一些"],[-1,17402,"\n\n"],[-1,17622,"\n\n"],[1,17624,"图中"],[-1,17732,"`"],[1,17733,"\n"],[1,17740,"\n`"],[-1,18555,"\n\n"],[-1,18650,"，"],[1,18651,"\n"],[-1,18887,"深度优"],[1,18890,"演示了"],[1,18895,"深度优"],[-1,18900,"是"],[-1,18913,"下滑"],[-1,18994,"\n"],[1,18995,"在"],[-1,19067,"\n"],[1,19068,"。"],[-1,19121,"\n"],[1,19122,"是"],[-1,19184,"节点顶"],[1,19187,"访问顶点C"],[-1,19198,"一个"],[1,19355,"顶点"],[-1,19358,"算法"],[1,20875,"搜索"],[-1,20894,"如下"],[1,21139,"\n\n\n"]],[13149,13149],[21142,21142]]],[1528710487341,[null,[[1,13149,"\n"],[-1,13750,"\n"],[-1,13776,"搜索的"],[1,13822,"K"],[-1,13823,"ni"],[1,13845,"\n"],[1,13847,"kn\n"],[-1,13891,"排序）"],[1,13898,"徐安娥"],[-1,14004,"节点。"],[1,14014," dd"],[-1,14138,"节点C"],[1,14143,"C"],[1,14183,"可"],[1,14197,"成"],[-1,15071,"中"],[1,15104,"略"],[-1,15108,"的话"],[1,15124,"统一"],[-1,15460,"棋盘"],[1,15479,"演示"],[1,15589,"yi懂"],[-1,15589,"合法的"],[1,15677,"\n"],[-1,15785,"\n"],[-1,16088,"搜索树"],[1,16098,"3$¥"],[1,16252,"一个"],[-1,16252,"取了"],[1,16297,"了"],[-1,16297,"\n"],[1,16492,"\n。"],[-1,16492,"最多"],[1,16743,"\n"],[1,17087,""],[-1,17087,"]"],[-1,17397,"一些"],[1,17404,"\n\n"],[1,17622,"\n\n"],[-1,17622,"图中"],[1,17732,"`"],[-1,17732,"\n"],[-1,17740,"\n`"],[1,18557,"\n\n"],[1,18650,"，"],[-1,18650,"\n"],[1,18887,"深度优"],[-1,18887,"演示了"],[-1,18895,"深度优"],[1,18903,"是"],[1,18915,"下滑"],[1,18994,"\n"],[-1,18994,"在"],[1,19067,"\n"],[-1,19067,"。"],[1,19121,"\n"],[-1,19121,"是"],[1,19184,"节点顶"],[-1,19184,"访问顶点C"],[1,19200,"一个"],[-1,19355,"顶点"],[1,19360,"算法"],[-1,20875,"搜索"],[1,20896,"如下"],[-1,21139,"\n\n\n"]],[21142,21142],[13149,13149]]],[1528710474650,["Re@Re.local",[[1,21139,"牛奶。为了制造"]],[21139,21139],[21146,21146]]],[1528710474920,["Re@Re.local",[[-1,21144,"制造"]],[21146,21146],[21144,21144]]],[1528710481207,["Re@Re.local",[[1,21144,"制作鸡蛋饼，必须要加热"]],[21144,21144],[21155,21155]]],[1528710548741,[null,[[-1,13149,"\n"],[1,13751,"\n"],[1,13776,"搜索的"],[-1,13819,"K"],[1,13821,"ni"],[-1,13841,"\n"],[-1,13844,"kn\n"],[1,13891,"排序）"],[-1,13895,"徐安娥"],[1,14004,"节点。"],[-1,14011," dd"],[1,14138,"节点C"],[-1,14140,"C"],[-1,14181,"可"],[-1,14196,"成"],[1,15071,"中"],[-1,15103,"略"],[1,15108,"的话"],[-1,15122,"统一"],[1,15460,"棋盘"],[-1,15477,"演示"],[-1,15589,"yi懂"],[1,15592,"合法的"],[-1,15677,"\n"],[1,15786,"\n"],[1,16088,"搜索树"],[-1,16095,"3$¥"],[-1,16252,"一个"],[1,16254,"取了"],[-1,16297,"了"],[1,16298,"\n"],[-1,16492,"\n。"],[1,16494,"最多"],[-1,16743,"\n"],[-1,17088,""],[1,17088,"]"],[1,17397,"一些"],[-1,17402,"\n\n"],[-1,17622,"\n\n"],[1,17624,"图中"],[-1,17732,"`"],[1,17733,"\n"],[1,17740,"\n`"],[-1,18555,"\n\n"],[-1,18650,"，"],[1,18651,"\n"],[-1,18887,"深度优"],[1,18890,"演示了"],[1,18895,"深度优"],[-1,18900,"是"],[-1,18913,"下滑"],[-1,18994,"\n"],[1,18995,"在"],[-1,19067,"\n"],[1,19068,"。"],[-1,19121,"\n"],[1,19122,"是"],[-1,19184,"节点顶"],[1,19187,"访问顶点C"],[-1,19198,"一个"],[1,19355,"顶点"],[-1,19358,"算法"],[1,20875,"搜索"],[-1,20894,"如下"],[1,21155,"\n\n\n"]],[13149,13149],[21158,21158]]],[1528710548741,[null,[[1,13149,"\n"],[-1,13750,"\n"],[-1,13776,"搜索的"],[1,13822,"K"],[-1,13823,"ni"],[1,13845,"\n"],[1,13847,"kn\n"],[-1,13891,"排序）"],[1,13898,"徐安娥"],[-1,14004,"节点。"],[1,14014," dd"],[-1,14138,"节点C"],[1,14143,"C"],[1,14183,"可"],[1,14197,"成"],[-1,15071,"中"],[1,15104,"略"],[-1,15108,"的话"],[1,15124,"统一"],[-1,15460,"棋盘"],[1,15479,"演示"],[1,15589,"yi懂"],[-1,15589,"合法的"],[1,15677,"\n"],[-1,15785,"\n"],[-1,16088,"搜索树"],[1,16098,"3$¥"],[1,16252,"一个"],[-1,16252,"取了"],[1,16297,"了"],[-1,16297,"\n"],[1,16492,"\n。"],[-1,16492,"最多"],[1,16743,"\n"],[1,17087,""],[-1,17087,"]"],[-1,17397,"一些"],[1,17404,"\n\n"],[1,17622,"\n\n"],[-1,17622,"图中"],[1,17732,"`"],[-1,17732,"\n"],[-1,17740,"\n`"],[1,18557,"\n\n"],[1,18650,"，"],[-1,18650,"\n"],[1,18887,"深度优"],[-1,18887,"演示了"],[-1,18895,"深度优"],[1,18903,"是"],[1,18915,"下滑"],[1,18994,"\n"],[-1,18994,"在"],[1,19067,"\n"],[-1,19067,"。"],[1,19121,"\n"],[-1,19121,"是"],[1,19184,"节点顶"],[-1,19184,"访问顶点C"],[1,19200,"一个"],[-1,19355,"顶点"],[1,19360,"算法"],[-1,20875,"搜索"],[1,20896,"如下"],[-1,21155,"\n\n\n"]],[21158,21158],[13149,13149]]],[1528710498138,["Re@Re.local",[[1,21155,"铁锅"]],[21155,21155],[21157,21157]]],[1528710498869,["Re@Re.local",[[-1,21155,"铁锅"]],[21157,21157],[21155,21155]]],[1528710502076,["Re@Re.local",[[1,21155,"平底锅，而"]],[21155,21155],[21160,21160]]],[1528710502218,["Re@Re.local",[[-1,21159,"而"]],[21160,21160],[21159,21159]]],[1528710508119,["Re@Re.local",[[1,21159,"将所有配方"]],[21159,21159],[21164,21164]]],[1528710508401,["Re@Re.local",[[-1,21162,"配方"]],[21164,21164],[21162,21162]]],[1528710521734,["Re@Re.local",[[1,21162,"材料混合在一起，然后将混合物1勺"]],[21162,21162],[21178,21178]]],[1528710523143,["Re@Re.local",[[-1,21176,"1勺"]],[21178,21178],[21176,21176]]],[1528720664451,[null,[[-1,13149,"\n"],[1,13751,"\n"],[1,13776,"搜索的"],[-1,13819,"K"],[1,13821,"ni"],[-1,13841,"\n"],[-1,13844,"kn\n"],[1,13891,"排序）"],[-1,13895,"徐安娥"],[1,14004,"节点。"],[-1,14011," dd"],[1,14138,"节点C"],[-1,14140,"C"],[-1,14181,"可"],[-1,14196,"成"],[1,15071,"中"],[-1,15103,"略"],[1,15108,"的话"],[-1,15122,"统一"],[1,15460,"棋盘"],[-1,15477,"演示"],[-1,15589,"yi懂"],[1,15592,"合法的"],[-1,15677,"\n"],[1,15786,"\n"],[1,16088,"搜索树"],[-1,16095,"3$¥"],[-1,16252,"一个"],[1,16254,"取了"],[-1,16297,"了"],[1,16298,"\n"],[-1,16492,"\n。"],[1,16494,"最多"],[-1,16743,"\n"],[-1,17088,""],[1,17088,"]"],[1,17397,"一些"],[-1,17402,"\n\n"],[-1,17622,"\n\n"],[1,17624,"图中"],[-1,17732,"`"],[1,17733,"\n"],[1,17740,"\n`"],[-1,18555,"\n\n"],[-1,18650,"，"],[1,18651,"\n"],[-1,18887,"深度优"],[1,18890,"演示了"],[1,18895,"深度优"],[-1,18900,"是"],[-1,18913,"下滑"],[-1,18994,"\n"],[1,18995,"在"],[-1,19067,"\n"],[1,19068,"。"],[-1,19121,"\n"],[1,19122,"是"],[-1,19184,"节点顶"],[1,19187,"访问顶点C"],[-1,19198,"一个"],[1,19355,"顶点"],[-1,19358,"算法"],[1,20875,"搜索"],[-1,20894,"如下"],[1,21176,"\n\n\n"]],[13149,13149],[21179,21179]]],[1528720664452,[null,[[1,13149,"\n"],[-1,13750,"\n"],[-1,13776,"搜索的"],[1,13822,"K"],[-1,13823,"ni"],[1,13845,"\n"],[1,13847,"kn\n"],[-1,13891,"排序）"],[1,13898,"徐安娥"],[-1,14004,"节点。"],[1,14014," dd"],[-1,14138,"节点C"],[1,14143,"C"],[1,14183,"可"],[1,14197,"成"],[-1,15071,"中"],[1,15104,"略"],[-1,15108,"的话"],[1,15124,"统一"],[-1,15460,"棋盘"],[1,15479,"演示"],[1,15589,"yi懂"],[-1,15589,"合法的"],[1,15677,"\n"],[-1,15785,"\n"],[-1,16088,"搜索树"],[1,16098,"3$¥"],[1,16252,"一个"],[-1,16252,"取了"],[1,16297,"了"],[-1,16297,"\n"],[1,16492,"\n。"],[-1,16492,"最多"],[1,16743,"\n"],[1,17087,""],[-1,17087,"]"],[-1,17397,"一些"],[1,17404,"\n\n"],[1,17622,"\n\n"],[-1,17622,"图中"],[1,17732,"`"],[-1,17732,"\n"],[-1,17740,"\n`"],[1,18557,"\n\n"],[1,18650,"，"],[-1,18650,"\n"],[1,18887,"深度优"],[-1,18887,"演示了"],[-1,18895,"深度优"],[1,18903,"是"],[1,18915,"下滑"],[1,18994,"\n"],[-1,18994,"在"],[1,19067,"\n"],[-1,19067,"。"],[1,19121,"\n"],[-1,19121,"是"],[1,19184,"节点顶"],[-1,19184,"访问顶点C"],[1,19200,"一个"],[-1,19355,"顶点"],[1,19360,"算法"],[-1,20875,"搜索"],[1,20896,"如下"],[-1,21176,"\n\n\n"]],[21179,21179],[13149,13149]]],[1528720607025,["Re@Re.local",[[1,21176,"yon"]],[21176,21176],[21179,21179]]],[1528720607725,["Re@Re.local",[[-1,21176,"yon"]],[21179,21179],[21176,21176]]],[1528720620671,["Re@Re.local",[[1,21176,"用勺子放入热好的锅中。当简单吧"]],[21176,21176],[21191,21191]]],[1528720621662,["Re@Re.local",[[-1,21188,"简单吧"]],[21191,21191],[21188,21188]]],[1528720628124,["Re@Re.local",[[1,21188,"鸡蛋饼"]],[21188,21188],[21191,21191]]],[1528720636493,["Re@Re.local",[[-1,21188,"鸡蛋饼"]],[21191,21191],[21188,21188]]],[1528720637686,["Re@Re.local",[[1,21188,"煎饼"]],[21188,21188],[21190,21190]]],[1528720639951,["Re@Re.local",[[-1,21146,"鸡蛋饼"]],[21149,21149],[21146,21146]]],[1528720641116,["Re@Re.local",[[1,21146,"煎饼"]],[21146,21146],[21148,21148]]],[1528720644201,["Re@Re.local",[[-1,21098,"搅拌鸡蛋饼"],[1,21103,"z"]],[21098,21103],[21098,21099]]],[1528720644378,["Re@Re.local",[[1,21099,"h"]],[21098,21099],[21098,21100]]],[1528720644458,["Re@Re.local",[[1,21100,"i"]],[21098,21100],[21098,21101]]],[1528720644596,["Re@Re.local",[[1,21101," z"]],[21098,21101],[21098,21103]]],[1528720644751,["Re@Re.local",[[1,21103,"u"]],[21098,21103],[21098,21104]]],[1528720644842,["Re@Re.local",[[1,21104,"o"]],[21098,21104],[21098,21105]]],[1528720646823,["Re@Re.local",[[-1,21098,"zhi zuo"],[1,21105,"制作煎蛋饼"]],[21098,21105],[21103,21103]]],[1528721390046,[null,[[-1,13149,"\n"],[1,13751,"\n"],[1,13776,"搜索的"],[-1,13819,"K"],[1,13821,"ni"],[-1,13841,"\n"],[-1,13844,"kn\n"],[1,13891,"排序）"],[-1,13895,"徐安娥"],[1,14004,"节点。"],[-1,14011," dd"],[1,14138,"节点C"],[-1,14140,"C"],[-1,14181,"可"],[-1,14196,"成"],[1,15071,"中"],[-1,15103,"略"],[1,15108,"的话"],[-1,15122,"统一"],[1,15460,"棋盘"],[-1,15477,"演示"],[-1,15589,"yi懂"],[1,15592,"合法的"],[-1,15677,"\n"],[1,15786,"\n"],[1,16088,"搜索树"],[-1,16095,"3$¥"],[-1,16252,"一个"],[1,16254,"取了"],[-1,16297,"了"],[1,16298,"\n"],[-1,16492,"\n。"],[1,16494,"最多"],[-1,16743,"\n"],[-1,17088,""],[1,17088,"]"],[1,17397,"一些"],[-1,17402,"\n\n"],[-1,17622,"\n\n"],[1,17624,"图中"],[-1,17732,"`"],[1,17733,"\n"],[1,17740,"\n`"],[-1,18555,"\n\n"],[-1,18650,"，"],[1,18651,"\n"],[-1,18887,"深度优"],[1,18890,"演示了"],[1,18895,"深度优"],[-1,18900,"是"],[-1,18913,"下滑"],[-1,18994,"\n"],[1,18995,"在"],[-1,19067,"\n"],[1,19068,"。"],[-1,19121,"\n"],[1,19122,"是"],[-1,19184,"节点顶"],[1,19187,"访问顶点C"],[-1,19198,"一个"],[1,19355,"顶点"],[-1,19358,"算法"],[1,20875,"搜索"],[-1,20894,"如下"],[1,21189,"\n\n\n"]],[13149,13149],[21192,21192]]],[1528721390046,[null,[[1,13149,"\n"],[-1,13750,"\n"],[-1,13776,"搜索的"],[1,13822,"K"],[-1,13823,"ni"],[1,13845,"\n"],[1,13847,"kn\n"],[-1,13891,"排序）"],[1,13898,"徐安娥"],[-1,14004,"节点。"],[1,14014," dd"],[-1,14138,"节点C"],[1,14143,"C"],[1,14183,"可"],[1,14197,"成"],[-1,15071,"中"],[1,15104,"略"],[-1,15108,"的话"],[1,15124,"统一"],[-1,15460,"棋盘"],[1,15479,"演示"],[1,15589,"yi懂"],[-1,15589,"合法的"],[1,15677,"\n"],[-1,15785,"\n"],[-1,16088,"搜索树"],[1,16098,"3$¥"],[1,16252,"一个"],[-1,16252,"取了"],[1,16297,"了"],[-1,16297,"\n"],[1,16492,"\n。"],[-1,16492,"最多"],[1,16743,"\n"],[1,17087,""],[-1,17087,"]"],[-1,17397,"一些"],[1,17404,"\n\n"],[1,17622,"\n\n"],[-1,17622,"图中"],[1,17732,"`"],[-1,17732,"\n"],[-1,17740,"\n`"],[1,18557,"\n\n"],[1,18650,"，"],[-1,18650,"\n"],[1,18887,"深度优"],[-1,18887,"演示了"],[-1,18895,"深度优"],[1,18903,"是"],[1,18915,"下滑"],[1,18994,"\n"],[-1,18994,"在"],[1,19067,"\n"],[-1,19067,"。"],[1,19121,"\n"],[-1,19121,"是"],[1,19184,"节点顶"],[-1,19184,"访问顶点C"],[1,19200,"一个"],[-1,19355,"顶点"],[1,19360,"算法"],[-1,20875,"搜索"],[1,20896,"如下"],[-1,21189,"\n\n\n"]],[21192,21192],[13149,13149]]],[1528721370624,["Re@Re.local",[[1,21189,"开始冒泡时，将其反转过来，煎至"]],[21189,21189],[21204,21204]]],[1528721450065,[null,[[-1,13149,"\n"],[1,13751,"\n"],[1,13776,"搜索的"],[-1,13819,"K"],[1,13821,"ni"],[-1,13841,"\n"],[-1,13844,"kn\n"],[1,13891,"排序）"],[-1,13895,"徐安娥"],[1,14004,"节点。"],[-1,14011," dd"],[1,14138,"节点C"],[-1,14140,"C"],[-1,14181,"可"],[-1,14196,"成"],[1,15071,"中"],[-1,15103,"略"],[1,15108,"的话"],[-1,15122,"统一"],[1,15460,"棋盘"],[-1,15477,"演示"],[-1,15589,"yi懂"],[1,15592,"合法的"],[-1,15677,"\n"],[1,15786,"\n"],[1,16088,"搜索树"],[-1,16095,"3$¥"],[-1,16252,"一个"],[1,16254,"取了"],[-1,16297,"了"],[1,16298,"\n"],[-1,16492,"\n。"],[1,16494,"最多"],[-1,16743,"\n"],[-1,17088,""],[1,17088,"]"],[1,17397,"一些"],[-1,17402,"\n\n"],[-1,17622,"\n\n"],[1,17624,"图中"],[-1,17732,"`"],[1,17733,"\n"],[1,17740,"\n`"],[-1,18555,"\n\n"],[-1,18650,"，"],[1,18651,"\n"],[-1,18887,"深度优"],[1,18890,"演示了"],[1,18895,"深度优"],[-1,18900,"是"],[-1,18913,"下滑"],[-1,18994,"\n"],[1,18995,"在"],[-1,19067,"\n"],[1,19068,"。"],[-1,19121,"\n"],[1,19122,"是"],[-1,19184,"节点顶"],[1,19187,"访问顶点C"],[-1,19198,"一个"],[1,19355,"顶点"],[-1,19358,"算法"],[1,20875,"搜索"],[-1,20894,"如下"],[1,21204,"\n\n\n"]],[13149,13149],[21207,21207]]],[1528721450065,[null,[[1,13149,"\n"],[-1,13750,"\n"],[-1,13776,"搜索的"],[1,13822,"K"],[-1,13823,"ni"],[1,13845,"\n"],[1,13847,"kn\n"],[-1,13891,"排序）"],[1,13898,"徐安娥"],[-1,14004,"节点。"],[1,14014," dd"],[-1,14138,"节点C"],[1,14143,"C"],[1,14183,"可"],[1,14197,"成"],[-1,15071,"中"],[1,15104,"略"],[-1,15108,"的话"],[1,15124,"统一"],[-1,15460,"棋盘"],[1,15479,"演示"],[1,15589,"yi懂"],[-1,15589,"合法的"],[1,15677,"\n"],[-1,15785,"\n"],[-1,16088,"搜索树"],[1,16098,"3$¥"],[1,16252,"一个"],[-1,16252,"取了"],[1,16297,"了"],[-1,16297,"\n"],[1,16492,"\n。"],[-1,16492,"最多"],[1,16743,"\n"],[1,17087,""],[-1,17087,"]"],[-1,17397,"一些"],[1,17404,"\n\n"],[1,17622,"\n\n"],[-1,17622,"图中"],[1,17732,"`"],[-1,17732,"\n"],[-1,17740,"\n`"],[1,18557,"\n\n"],[1,18650,"，"],[-1,18650,"\n"],[1,18887,"深度优"],[-1,18887,"演示了"],[-1,18895,"深度优"],[1,18903,"是"],[1,18915,"下滑"],[1,18994,"\n"],[-1,18994,"在"],[1,19067,"\n"],[-1,19067,"。"],[1,19121,"\n"],[-1,19121,"是"],[1,19184,"节点顶"],[-1,19184,"访问顶点C"],[1,19200,"一个"],[-1,19355,"顶点"],[1,19360,"算法"],[-1,20875,"搜索"],[1,20896,"如下"],[-1,21204,"\n\n\n"]],[21207,21207],[13149,13149]]],[1528721436005,["Re@Re.local",[[1,21204,"第"]],[21204,21204],[21205,21205]]],[1528721436256,["Re@Re.local",[[-1,21204,"第"]],[21205,21205],[21204,21204]]],[1528721443196,["Re@Re.local",[[1,21204,"其"]],[21204,21204],[21205,21205]]],[1528721443367,["Re@Re.local",[[-1,21204,"其"]],[21205,21205],[21204,21204]]],[1528721447269,["Re@Re.local",[[1,21204,"地步为"]],[21204,21204],[21207,21207]]],[1528721449830,["Re@Re.local",[[-1,21206,"为"]],[21207,21207],[21206,21206]]],[1528721510085,[null,[[-1,13149,"\n"],[1,13751,"\n"],[1,13776,"搜索的"],[-1,13819,"K"],[1,13821,"ni"],[-1,13841,"\n"],[-1,13844,"kn\n"],[1,13891,"排序）"],[-1,13895,"徐安娥"],[1,14004,"节点。"],[-1,14011," dd"],[1,14138,"节点C"],[-1,14140,"C"],[-1,14181,"可"],[-1,14196,"成"],[1,15071,"中"],[-1,15103,"略"],[1,15108,"的话"],[-1,15122,"统一"],[1,15460,"棋盘"],[-1,15477,"演示"],[-1,15589,"yi懂"],[1,15592,"合法的"],[-1,15677,"\n"],[1,15786,"\n"],[1,16088,"搜索树"],[-1,16095,"3$¥"],[-1,16252,"一个"],[1,16254,"取了"],[-1,16297,"了"],[1,16298,"\n"],[-1,16492,"\n。"],[1,16494,"最多"],[-1,16743,"\n"],[-1,17088,""],[1,17088,"]"],[1,17397,"一些"],[-1,17402,"\n\n"],[-1,17622,"\n\n"],[1,17624,"图中"],[-1,17732,"`"],[1,17733,"\n"],[1,17740,"\n`"],[-1,18555,"\n\n"],[-1,18650,"，"],[1,18651,"\n"],[-1,18887,"深度优"],[1,18890,"演示了"],[1,18895,"深度优"],[-1,18900,"是"],[-1,18913,"下滑"],[-1,18994,"\n"],[1,18995,"在"],[-1,19067,"\n"],[1,19068,"。"],[-1,19121,"\n"],[1,19122,"是"],[-1,19184,"节点顶"],[1,19187,"访问顶点C"],[-1,19198,"一个"],[1,19355,"顶点"],[-1,19358,"算法"],[1,20875,"搜索"],[-1,20894,"如下"],[1,21206,"\n\n\n"]],[13149,13149],[21209,21209]]],[1528721510085,[null,[[1,13149,"\n"],[-1,13750,"\n"],[-1,13776,"搜索的"],[1,13822,"K"],[-1,13823,"ni"],[1,13845,"\n"],[1,13847,"kn\n"],[-1,13891,"排序）"],[1,13898,"徐安娥"],[-1,14004,"节点。"],[1,14014," dd"],[-1,14138,"节点C"],[1,14143,"C"],[1,14183,"可"],[1,14197,"成"],[-1,15071,"中"],[1,15104,"略"],[-1,15108,"的话"],[1,15124,"统一"],[-1,15460,"棋盘"],[1,15479,"演示"],[1,15589,"yi懂"],[-1,15589,"合法的"],[1,15677,"\n"],[-1,15785,"\n"],[-1,16088,"搜索树"],[1,16098,"3$¥"],[1,16252,"一个"],[-1,16252,"取了"],[1,16297,"了"],[-1,16297,"\n"],[1,16492,"\n。"],[-1,16492,"最多"],[1,16743,"\n"],[1,17087,""],[-1,17087,"]"],[-1,17397,"一些"],[1,17404,"\n\n"],[1,17622,"\n\n"],[-1,17622,"图中"],[1,17732,"`"],[-1,17732,"\n"],[-1,17740,"\n`"],[1,18557,"\n\n"],[1,18650,"，"],[-1,18650,"\n"],[1,18887,"深度优"],[-1,18887,"演示了"],[-1,18895,"深度优"],[1,18903,"是"],[1,18915,"下滑"],[1,18994,"\n"],[-1,18994,"在"],[1,19067,"\n"],[-1,19067,"。"],[1,19121,"\n"],[-1,19121,"是"],[1,19184,"节点顶"],[-1,19184,"访问顶点C"],[1,19200,"一个"],[-1,19355,"顶点"],[1,19360,"算法"],[-1,20875,"搜索"],[1,20896,"如下"],[-1,21206,"\n\n\n"]],[21209,21209],[13149,13149]]],[1528721450255,["Re@Re.local",[[-1,21204,"地"]],[21205,21205],[21204,21204]]],[1528721457016,["Re@Re.local",[[1,21204,"底部变为金黄色。在想用煎"]],[21204,21204],[21216,21216]]],[1528721457823,["Re@Re.local",[[-1,21213,"想用煎"]],[21216,21216],[21213,21213]]],[1528721480883,["Re@Re.local",[[1,21213,"享用煎饼之前，也可以加一些果酱。"]],[21213,21213],[21229,21229]]],[1528721481266,["Re@Re.local",[[-1,21228,"。"]],[21229,21229],[21228,21228]]],[1528721485366,["Re@Re.local",[[1,21228,"。图27是以"]],[21228,21228],[21234,21234]]],[1528721485662,["Re@Re.local",[[-1,21232,"是以"]],[21234,21234],[21232,21232]]],[1528721492628,["Re@Re.local",[[1,21232,"将以上过程表示为图。"]],[21232,21232],[21242,21242]]],[1528723392126,[null,[[-1,13149,"\n"],[1,13751,"\n"],[1,13776,"搜索的"],[-1,13819,"K"],[1,13821,"ni"],[-1,13841,"\n"],[-1,13844,"kn\n"],[1,13891,"排序）"],[-1,13895,"徐安娥"],[1,14004,"节点。"],[-1,14011," dd"],[1,14138,"节点C"],[-1,14140,"C"],[-1,14181,"可"],[-1,14196,"成"],[1,15071,"中"],[-1,15103,"略"],[1,15108,"的话"],[-1,15122,"统一"],[1,15460,"棋盘"],[-1,15477,"演示"],[-1,15589,"yi懂"],[1,15592,"合法的"],[-1,15677,"\n"],[1,15786,"\n"],[1,16088,"搜索树"],[-1,16095,"3$¥"],[-1,16252,"一个"],[1,16254,"取了"],[-1,16297,"了"],[1,16298,"\n"],[-1,16492,"\n。"],[1,16494,"最多"],[-1,16743,"\n"],[-1,17088,""],[1,17088,"]"],[1,17397,"一些"],[-1,17402,"\n\n"],[-1,17622,"\n\n"],[1,17624,"图中"],[-1,17732,"`"],[1,17733,"\n"],[1,17740,"\n`"],[-1,18555,"\n\n"],[-1,18650,"，"],[1,18651,"\n"],[-1,18887,"深度优"],[1,18890,"演示了"],[1,18895,"深度优"],[-1,18900,"是"],[-1,18913,"下滑"],[-1,18994,"\n"],[1,18995,"在"],[-1,19067,"\n"],[1,19068,"。"],[-1,19121,"\n"],[1,19122,"是"],[-1,19184,"节点顶"],[1,19187,"访问顶点C"],[-1,19198,"一个"],[1,19355,"顶点"],[-1,19358,"算法"],[1,20875,"搜索"],[-1,20894,"如下"],[-1,21242,"步"],[1,21243,"\n\n\n"]],[13149,13149],[21246,21246]]],[1528723392126,[null,[[1,13149,"\n"],[-1,13750,"\n"],[-1,13776,"搜索的"],[1,13822,"K"],[-1,13823,"ni"],[1,13845,"\n"],[1,13847,"kn\n"],[-1,13891,"排序）"],[1,13898,"徐安娥"],[-1,14004,"节点。"],[1,14014," dd"],[-1,14138,"节点C"],[1,14143,"C"],[1,14183,"可"],[1,14197,"成"],[-1,15071,"中"],[1,15104,"略"],[-1,15108,"的话"],[1,15124,"统一"],[-1,15460,"棋盘"],[1,15479,"演示"],[1,15589,"yi懂"],[-1,15589,"合法的"],[1,15677,"\n"],[-1,15785,"\n"],[-1,16088,"搜索树"],[1,16098,"3$¥"],[1,16252,"一个"],[-1,16252,"取了"],[1,16297,"了"],[-1,16297,"\n"],[1,16492,"\n。"],[-1,16492,"最多"],[1,16743,"\n"],[1,17087,""],[-1,17087,"]"],[-1,17397,"一些"],[1,17404,"\n\n"],[1,17622,"\n\n"],[-1,17622,"图中"],[1,17732,"`"],[-1,17732,"\n"],[-1,17740,"\n`"],[1,18557,"\n\n"],[1,18650,"，"],[-1,18650,"\n"],[1,18887,"深度优"],[-1,18887,"演示了"],[-1,18895,"深度优"],[1,18903,"是"],[1,18915,"下滑"],[1,18994,"\n"],[-1,18994,"在"],[1,19067,"\n"],[-1,19067,"。"],[1,19121,"\n"],[-1,19121,"是"],[1,19184,"节点顶"],[-1,19184,"访问顶点C"],[1,19200,"一个"],[-1,19355,"顶点"],[1,19360,"算法"],[-1,20875,"搜索"],[1,20896,"如下"],[1,21242,"步"],[-1,21242,"\n\n\n"]],[21246,21246],[13149,13149]]],[1528723367342,["Re@Re.local",[[1,21245,"\n"]],[21242,21242],[21243,21243]]],[1528723367560,["Re@Re.local",[[1,21246,"\n"]],[21243,21243],[21244,21244]]],[1528723367807,["Re@Re.local",[[1,21244,"![../_images/pancakes.png](http://interactivepython.org/courselib/static/pythonds/_images/pancakes.png)"]],[21244,21244],[21347,21347]]],[1528723368062,["Re@Re.local",[[1,21350,"\n"]],[21347,21347],[21348,21348]]],[1528723368651,["Re@Re.local",[[1,21351,"\n"]],[21348,21348],[21349,21349]]]]],["f6e68f45-9e65-4958-973d-b59a3fbf6bbe",1528768364355,"## 7.1 目标 ##\n\n- 学习图的概念和使用方式。\n- 以多种方式实现抽象数据类型Gragh。\n- 了解图在解决多种问题时的应用。\n\n本章研究图像。图像是比上一章学习的树更加通用的结构，实际上可以认为树是一种特殊的图像。图像也可以用来表示真实世界中的很多东西，比如公路系统，航线系统，网路系统甚至是完成计算机科学学位所必须的课程序列。本章读者会看到，一旦给某个问题以合适的表示，利用一些图像算法便可以轻松将看起来很困难的问题解决。\n\n对人类来说，看懂道路地图并理解不同地点之间的关系并不困难，但是计算机并没有这种能力。然而，可以将道路系统看作是1个图像，如此一来便可以让计算机做一些有趣的事情了。比如在互联网地图中，计算机可以找到从某个地方到另一个地方的最近、最快或者最简单的路线。\n\n作为计算机科学的学生，读者可能对获得学位所需要的课程比较感兴趣。图像可以很好地表达课程之间的依赖关系。图1便是1个例子。\n\n![../_images/CS-Prereqs.png](http://interactivepython.org/courselib/static/pythonds/_images/CS-Prereqs.png)\n\n## 7.2 术语和定义 ##\n\n\n**顶点（vertex）**\n顶点（也称为节点**node**）是图像的基础构件。它可以有名称，即键。顶点也可以有其它额外信息，即负载。\n**边（Edge）**\n边有时也被称为弧（arc），是图像的另一种基础构件。边将2个顶点连接起来以表示这2者之间存在某种关系。边可以是单向的也可以是双向的。当某个图像中的所有边都是单向的时候，便称该图像是**有向图（directed gragh/digrah）**。上示的课程依赖图显示是有向图，因为必须先完成某些课程后才能继续其它某些课程。\n**权重（weight）**\n为了表示从某个顶点到另一个顶点所需的代价，可以顶点进行**赋权（weighted）**。比如说公路图中某个城市连接到另一个城市，边上的权重可以表示为两个城市之间的距离。\n\n有了以上基本概念，便可以来对图像作一定义了。图像可以表示为G，其中G=(V,E)。对于图像G，V是顶点的集合，E是边的集合。每个边都是一个元组（v,w)，其中$w,v∈V$。可以向边元组中加入第3个元素来表示权重。子图s是顶点的集合v和边的集合e，使得$e⊂E且v⊂V$。\n\n图2给出了1个简单的赋权有向图作为例子。该图像可以用集合严格地表示：\n$$ V={V0,V1,V2,V3,V4,V5} $$\n$$ E= \\left \\{ (v0,v1,5),(v1,v2,4),(v2,v3,9),(v3,v4,7),(v4,v0,1),(v0,v5,2),(v5,v4,8),(v3,v5,3),(v5,v2,1) \\right \\} $$\n![../_images/digraph.png](http://interactivepython.org/courselib/static/pythonds/_images/digraph.png)\n\n图2中的例子演示了图像的另外2个关键术语。\n**路径（path）**\n路径是由边连接起来的顶点的序列。一般地，将路径定义为 $w_1,w_2,...,w_n$ 使得 $(w_i,w_{i+1})\\in E$ 对所有 $1≤i≤n−1$ 成立。无权路径长度是路径中边的个数，即n-1。权重路径长度是路径中边的权重之和。比如图2中，从V3到V1的路径是顶点序列 $(V3,V4,V0,V1)$ 而边为 ${(v3,v4,7),(v4,v0,1),(v0,v1,5)}{(v3,v4,7),(v4,v0,1),(v0,v1,5)}$。\n**环（cycle）**\n有向图中的环是首尾顶点相同的路径。比如说，图2中路径 $(V5,V2,V3,V5)(V5,V2,V3,V5)$ 就是1个环。没有环的图被称为**无环图（acyclic graph）**。没有环的有向图被称为**有向无环图（directed acyclic graph，DAG）**。接下来读者会看到，一些很重要的问题可以通过表示为DAG获得解决。\n\n## 7.3 抽象数据类型：Graph ##\n\n抽象数据类型Gragh被定义为：\n- Graph()生成一个新的空图。\n- addVertex(vert) 将Vertex的1个实例添加至图。\n- addEdge(fromVert,toVert) 向图添加1个连接2个顶点的有向边。\n- addEdge(fromVert,toVert,weight)向图添加1个连接2个顶点的赋权有向边。\n- getVertex(vertKey) 找到途中以vertKey命名的顶点。\n- getVertices() 返回途中所有顶点的列表。\n- in 对于vertex in graph这种形式的语句，若给定的vertex在途中，返回True，反之则False。\n\n有了图像的正式定义，在Python中可以用多种方式实现，下面来看看使用不同方式实现该ADT的优劣与差别。有两个著名的图的实现，即**邻接矩阵（adjacency matrix）**和**邻接表（adjacency list）**，本书将对这两种都进行解释，并对其中1中以Python类的方式实现。\n\n## 7.4 邻接矩阵（adjacency matrix）##\n\n\n实现图的最简单方式之一是使用二维矩阵。在二维矩阵中，每行每列的都代表了图中的1个顶点。如果顶点v到顶点w有边，行v和列w的交叉点单元格会存储值。若两个顶点由边连接，便称这两个顶点是**邻接**的。图3给出了图2的邻接矩阵。单元格中存储的值是v到w的权重。\n\n![../_images/adjMat.png](http://interactivepython.org/courselib/static/pythonds/_images/adjMat.png)\n\n邻接矩阵的优势是简便，并且对于小图来说，很容易看出哪些节点是相连的。然而，注意到矩阵中大多数单元格都是空。因为大多数单元格都是空的，因此称该矩阵是**稀疏（sparse）**的。矩阵并不能高效地存储这种稀疏数据。实际上，在Python中像图3这种矩阵结构都很麻烦。\n\n邻接矩阵对于边树较高的图来说是不错的实现。“较高”是什么意思？到底需要多少个边才能填满该矩阵？因此为每行、每列都对应个顶点，填满矩阵需要的顶点数是$|V|_2$。当每个顶点都与另外每一个顶点相连时，则该矩阵被填满了。实践中很少会遇到以这种方式连接的问题。本章研究的所有问题都是稀疏图。\n\n## 7.5 邻接表（adjacency list） ##\n\n邻接表可以用更少的空间实现稀疏图。在邻接表的实现中，维护一个包含图对象所有顶点的主列表，然后图对象中各个顶点对象都维护一个该对象连接的其它顶点对象的列表。在Vertex类的实现中，将使用字典而不是列表，其中字典的键为顶点，值为权重。图4给出了图2的邻接表实现示意图。\n![../_images/adjlist.png](http://interactivepython.org/courselib/static/pythonds/_images/adjlist.png)\n\n邻接表的有时在于它可以紧凑地表示稀疏图，利用稀疏图也可以轻松地找到某个顶点所有的连接情况。\n\n## 7.6 实现 ##\n\n使用字典可以很容易地在Python中实现邻接表。在本书的实现中会创建两个类（代码1、代码2），Graph保存顶点的祝列表，而Vertex即图中每个顶点。\n\n每个Vertex都使用字典来保存其连接的对象以及每条边的权重。该字典被命名为connectedTo。以下代码便是Vertex类的实现。构造器只是初始化了可以是字符串的id以及connectedTo字典。addNeighbor方法用来添加从该顶点到另一顶点的连接。getConnections方法返回当前节点connectedTo实例变量保存的邻接表中的所有顶点。getWeight方法返回从该节点到另一个作为参数传入的节点的边的权重。\n\n**代码1**\n```Pythion\nclass Vertex:\n    def __init__(self,key):\n        self.id = key\n        self.connectedTo = {}\n\n    def addNeighbor(self,nbr,weight=0):\n        self.connectedTo[nbr] = weight\n\n    def __str__(self):\n        return str(self.id) + ' connectedTo: ' + str([x.id for x in self.connectedTo])\n\n    def getConnections(self):\n        return self.connectedTo.keys()\n\n    def getId(self):\n        return self.id\n\n    def getWeight(self,nbr):\n        return self.connectedTo[nbr]\n```\nGraph类，如下面的代码所示，保存了一个字典，将顶点名映射到顶点对象。在图4中，该字典对象表示为灰色阴影框。Graph类也听过了方法用于添加顶点和连接顶点。此外，实现了\\_\\_iter\\_\\_方法来使得可以在图中对所有顶点对象进行迭代。这两种方法可以用来实现按名称或者是对象本身来对图中顶点的迭代。\n\n**代码2**\n```Python\nclass Graph:\n    def __init__(self):\n        self.vertList = {}\n        self.numVertices = 0\n\n    def addVertex(self,key):\n        self.numVertices = self.numVertices + 1\n        newVertex = Vertex(key)\n        self.vertList[key] = newVertex\n        return newVertex\n\n    def getVertex(self,n):\n        if n in self.vertList:\n            return self.vertList[n]\n        else:\n            return None\n\n    def __contains__(self,n):\n        return n in self.vertList\n\n    def addEdge(self,f,t,cost=0):\n        if f not in self.vertList:\n            nv = self.addVertex(f)\n        if t not in self.vertList:\n            nv = self.addVertex(t)\n        self.vertList[f].addNeighbor(self.vertList[t], cost)\n\n    def getVertices(self):\n        return self.vertList.keys()\n\n    def __iter__(self):\n        return iter(self.vertList.values())\n```\n使用以上定义的Graph和Vertex类，以下代码边可以表示图2。首先生成6个节点编号0-5，查看顶点字典，注意到对0-5的键都创建了1个Vertex实例。然后，将连接了顶点的边集合到一起。最后，使用嵌套循环确定图中的每个边都正确存储了。读者应该将输出结果与图2作一对比。\n```Python\n>>> g = Graph()\n>>> for i in range(6):\n...    g.addVertex(i)\n>>> g.vertList\n{0: <adjGraph.Vertex instance at 0x41e18>,\n 1: <adjGraph.Vertex instance at 0x7f2b0>,\n 2: <adjGraph.Vertex instance at 0x7f288>,\n 3: <adjGraph.Vertex instance at 0x7f350>,\n 4: <adjGraph.Vertex instance at 0x7f328>,\n 5: <adjGraph.Vertex instance at 0x7f300>}\n>>> g.addEdge(0,1,5)\n>>> g.addEdge(0,5,2)\n>>> g.addEdge(1,2,4)\n>>> g.addEdge(2,3,9)\n>>> g.addEdge(3,4,7)\n>>> g.addEdge(3,5,3)\n>>> g.addEdge(4,0,1)\n>>> g.addEdge(5,4,8)\n>>> g.addEdge(5,2,1)\n>>> for v in g:\n...    for w in v.getConnections():\n...        print(\"( %s , %s )\" % (v.getId(), w.getId()))\n...\n( 0 , 5 )\n( 0 , 1 )\n( 1 , 2 )\n( 2 , 3 )\n( 3 , 4 )\n( 3 , 5 )\n( 4 , 0 )\n( 5 , 4 )\n( 5 , 2 )\n```\n## 词梯（word ladder）问题 ##\n\n以词梯问题开始图算法的研究。将单词\"FOOL\"转化为\"SAGE\"。按词梯问题的规则，1次只能修改1个字母，在每1步都必须将单词转换为另一个单词，不允许转换为非单词。词梯问题是由*爱丽丝梦游仙境*的作者lewis Carroll于1878年提出的。以下单词序列是刚才那个问题的一个可行解。\n```Python\nFOOL\nPOOL\nPOLL\nPOLE\nPALE\nSALE\nSAGE\n```\n词梯问题有许多变体。比如读者可能遇到要求在给定步数来完成转换的版本，或是必须用给点单词的版本。本节仅关注计算出完成转换所需要的最小修改次数。\n\n当然，因为本章内容是图，因此可以用图算法来将其解决。以下是纲要：\n- 将单词之间的关系重新表示为图。\n- 使用**广度优先搜索算法（breadth first search**来找到从起始单词到目标单词的最短路径。\n\n## 7.8 建立词梯图 ##\n\n首先要解决的问题是如何将单词列表转换为图。对于边来说，需要保证它们连接的是差且仅差了1个字母的单词。如果生成这种图，那么从一个单词出发的任意路径都是该词梯问题的解。图1给出了1个小的由单词构成的图，它可以用来解决FOOL到SAGE的词梯问题。注意，该图是无向图且无权重。\n\n![../_images/wordgraph.png](http://interactivepython.org/courselib/static/pythonds/_images/wordgraph.png)\n\n\n可以使用很多方法来生成这个图。首先假设有1组长度相同的单词，从起点出发，为列表中的每一个单词创建1个顶点。为了确定如何将这些单词连接起来，可以将列表中的每个单词与其它的单词一一进行比较，在比较时确定有多少个字母不同。如果两个字母仅相差1个字母，便可以在图中为它们两创建1条边。单词数较少时，这个方法还是可行的。但是假设有5110个单词的话（粗略估计一一进行对比需要$O(n^2)$的时间复杂度），需要进行2500万次对比。\n\n使用以下方法可以对其进行优化。假设有大量桶，每个桶外面都贴着1个4字母单词，但是字母中有1个被下划线替代。比如说，对于图2这种情况，可能会有个桶被贴上\"POP_\"。当在列表中对每个单词进行处理时，将该单词与每个桶进行对比，将\"\\_\"用作通配符，因此\"POPE\"和\"POPS\"都与\"POP\\_\"匹配。每当找到1个匹配的桶时，都将该单词放进去。当所有的单词都放在了正确的桶里时，可以确定同一桶里的单词是相连的。\n\n![../_images/wordbuckets.png](http://interactivepython.org/courselib/static/pythonds/_images/wordbuckets.png)\n\n在Python中，可以通过字典实现上述方案。桶的标签作为字典的键，键对应的值为单词列表。首先为各个单词在图中创建1个顶点。然后为处于字典同一键下的单词之间创建边，如代码1所示。\n```Python\nfrom pythonds.graphs import Graph\n\ndef buildGraph(wordFile):\n    d = {}\n    g = Graph()\n    wfile = open(wordFile,'r')\n    # create buckets of words that differ by one letter\n    for line in wfile:\n        word = line[:-1]\n        for i in range(len(word)):\n            bucket = word[:i] + '_' + word[i+1:]\n            if bucket in d:\n                d[bucket].append(word)\n            else:\n                d[bucket] = [word]\n    # add vertices and edges for words in the same bucket\n    for bucket in d.keys():\n        for word1 in d[bucket]:\n            for word2 in d[bucket]:\n                if word1 != word2:\n                    g.addEdge(word1,word2)\n    return g\n```\n这是第一个跟现实生活相关的图问题，读者可能会好奇该图的稀疏程度。对于该问题，准备的单词列表有5510个。若果使用邻接矩阵，矩阵将会有5110*5110个单元格，而使用buildGraph函数的图仅有53286条边，因此仅有0.20%的单元格被填充了，这实际上是一个很稀疏的矩阵了。\n\n## 7.9 实现宽度优先搜索（breadth first search） ##\n\n创建好了图，接下来便可以研究解决字梯问题的最优算法了。这里使用的算法被称为**宽度优先搜索（breadth first search,BFS）**。BFS是用于图搜索的最简单的算法之一。它也是之后将研究的其它几种重要的图算法的原型。\n\n给定图G以及起始顶点s，宽度优先算法将对图内的边进行搜索以找到G中所有与s有路径相连的顶点。宽度优先搜索的优势在于，在找到与s距离为k+1的所有顶点之前，它会先找出所有距离为k的顶点。BFS的运行过程可以想象为生成树的过程，每次都生成树的一层。BFS在对子孙顶点进行搜索前，先将初始顶点的子顶点加入进来。\n\n为了跟踪运行过程，BFS将顶点染成白色，灰色或黑色。所有的顶点都被初始为白色。白色顶点是未被探索的顶点。当某个顶点被初次探索时，将其染成灰色，当BFS完成对某个顶点的探索时，将其染成黑色。这意味着，对于黑色的顶点，它是没有白色节点与之邻接的。灰色节点，有可能会存在白色节点与之邻接，需要进一步探索。\n\n此外，BFS算法使用了Vertex类的改进版。这种新的顶点类新增了3种实例变量，即distance,predecessor以及颜色。每个实例变量都有正确的getter和setter方法。这里就不作展示了，因为只是加了3个实例变量而已。\n\nBFS从起始顶点s开始，将start染成灰色来表示当前正在对其进行搜索。对于起始顶点，另外两个值，distance和predecessor分别被初始化为0和None。最后，start被放入1个Queue中。下一步便是系统地对队列前部的顶点进行搜索。所谓搜索，即是对队列前部的某1个节点的邻接列表作迭代。每当对邻接列表中的节点作处理时，先对其颜色进行判断。如果是白色的，则该节点尚未搜索过，于是执行以下4步操作：\n1. 将新的，未搜索的顶点nbr染成灰色。\n2. 将nbr的predecessor设置为当前节点currentVert。\n3. 到nbr的距离设为currentVert + 1。\n4. 将nbr放入队尾。将nbr放在队尾使得该节点只有在currentVert的邻接列表中的所有其它顶点都被搜索过了才会继续被搜索。\n\n**代码2**\n```Python\nfrom pythonds.graphs import Graph, Vertex\nfrom pythonds.basic import Queue\n\ndef bfs(g,start):\n  start.setDistance(0)\n  start.setPred(None)\n  vertQueue = Queue()\n  vertQueue.enqueue(start)\n  while (vertQueue.size() > 0):\n    currentVert = vertQueue.dequeue()\n    for nbr in currentVert.getConnections():\n      if (nbr.getColor() == 'white'):\n        nbr.setColor('gray')\n        nbr.setDistance(currentVert.getDistance() + 1)\n        nbr.setPred(currentVert)\n        vertQueue.enqueue(nbr)\n    currentVert.setColor('black')\n```\n现在来仔细研究下bfs函数是如何对图1构件宽度优先树的。从FOOL出发，将所有与FOOL邻接的节点连接到该树上。临近节点包括POOL，FOIL，FOUL和COOL。每个节点都放入了待搜索待新节点。图3给出了该操作中的树及完成后的队列。\n![../_images/bfs1.png](http://interactivepython.org/courselib/static/pythonds/_images/bfs1.png)\n\n\n接下来，bfs从队首去掉了下一个节点(POOL)，并对其所有邻接节点重复该操作。然而，当bfs检查到节点COOL时，它发现COOL的颜色已经是灰色了。这意味着有更短的路径到达COOL，并且COOL已经留在队列中以待进一步搜索。在对POOL进行监测时唯一新加入队列的是POLL。新状态如图4所示。\n\n![../_images/bfs2.png](http://interactivepython.org/courselib/static/pythonds/_images/bfs2.png)\n\n队列中的下一个顶点是FOIL。FOIL可以加入树的节点是FAIL，当bfs方法继续处理队列时，接下来两个节点都没有向树或者队列加入新的节点。图5展示的是对树的第二层所有顶点都探索完成了后的树和队列。\n\n![../_images/bfs3.png](http://interactivepython.org/courselib/static/pythonds/_images/bfs3.png)\n![../_images/bfsDone.png](http://interactivepython.org/courselib/static/pythonds/_images/bfsDone.png)\n\n读者应该自己动手过一遍该算法，以对该算法获得更好的理解。图6是图3中已完成所有顶点的搜索后的最终宽度优先搜索树。宽度优先搜索的惊人之处在于，它不仅解决了初始的FOOL-SAGE问题，也顺便解决了许多其它问题。从宽度优先搜索树中的任一节点出发，沿着父节点的箭头返回到根节点，便可以得到该单词变为FOOL的最短词梯。代码3沿着父节点链打印出了词梯：\n**代码3**\n```Python\ndef traverse(y):\n    x = y\n    while (x.getPred()):\n        print(x.getId())\n        x = x.getPred()\n    print(x.getId())\n\ntraverse(g.getVertex('sage'))\n```\n## 7.10 宽度优先搜索分析 ##\n\n在继续研究其它图算法前，先来分析一下宽度优先搜索算法的运行性能。首先应当观察到的是，图|V|中的每个顶点在循环中最多被处理一次，因为在进行监测和加入队列前，该顶点必须是白色的。因此整个循环为O(V)。嵌套在while中的for循环对图中的每条边最多执行1次，|E|，因此每个顶点最多出队1次并且只在节点u出队时才检查节点u到节点v的边，该for循环为O(E)。因此两个循环的最终结果是O(V+E)。\n\n当然，执行BFS仅完成了该任务的一部分。从起始节点出发到达目标顶点是该任务的另一部分。最坏情况是，该图是单链的。在这种情况下，遍历所有节点需要O(V)。正常情况下应该是|V|的某个分数，但时间复杂度不会变，仍然是O(V)。\n\n最后，至少对这哥问题而言，生成初始的图也需要时间，其时间复杂度的分析就作为练习了。\n\n## 7.11 骑士周游问题 ##\n\n起始周游是可以用来演示第二种常见图算法的经典问题。骑士周游问题是在国际象棋棋盘上仅使用1个棋子，即起始，该问题的目标是找到1个出棋序列使得骑士可以访问各个方格恰好1次。这样的序列被称为周游。起始周游问题多年来吸引了很多棋手、数学家和计算机科学家等。在8*8的棋盘上，可行的序列数的上界为$1.305\\times 10^{35}$。然而，还有很多时候会走到死棋的情况。当然，还有很多时候会失败。显然这是一个需要些智慧和计算力的问题。\n\n学者已经提出了很多该问题的接发，图搜索是最最容易理解和编程的。同样地，分两步来求解：\n- 将骑士在棋盘上符合规则的移动以图表示。\n- 使用图算法来找到长度为$rows\\times columns-1$的路径，其中每个顶点都恰好只访问1次。\n\n## 7.12 生成骑士周游图 ##\n\n为了将骑士周游问题表示为图，使用以下两种思想：棋盘上的每个方格都被表示为图中的一个节点；骑士的每个合法的移动都被标记为图中的边。图1是骑士的1中合规走法，并给出了其对应的在图中的边。\n\n![../_images/knightmoves.png](http://interactivepython.org/courselib/static/pythonds/_images/knightmoves.png)\n\n为$n\\times n$的棋盘生成图，其Python代码如代码1所示。knightGraph函数对整个棋盘作1次遍历，在棋盘上的每1个方格，kinightGraph函数都调用1个辅助函数genLegalMoves，为棋盘上的该节点处的合法走法生成1个列表。图中的所有合法走法最后都被转换成了边。另一个辅助函数，posToNodeId将棋盘上的1个位置按照其行列转换为线性节点编号，如图1所示。\n\n**代码1**\n```Python\nfrom pythonds.graphs import Graph\n\ndef knightGraph(bdSize):\n    ktGraph = Graph()\n    for row in range(bdSize):\n       for col in range(bdSize):\n           nodeId = posToNodeId(row,col,bdSize)\n           newPositions = genLegalMoves(row,col,bdSize)\n           for e in newPositions:\n               nid = posToNodeId(e[0],e[1],bdSize)\n               ktGraph.addEdge(nodeId,nid)\n    return ktGraph\n\ndef posToNodeId(row, column, board_size):\n    return (row * board_size) + column\n```\n代码2中的genLeagalMove函数将以骑士的位置作为参数，并创建了可能的8个走法。legalCoord辅助函数用来保证创建的某个走法是在棋盘内的。该图中有336条边，并且可以发现，棋盘边缘的顶点的合规走法比棋盘内部的顶点少，此外该棋盘是稀疏的，填充率只有8.2%。\n\n![../_images/bigknight.png](http://interactivepython.org/courselib/static/pythonds/_images/bigknight.png)\n\n## 7.13 实现骑士周游 ##\n\n解决骑士周游问题将使用**深度优先搜索（depth first search）**。上一节讨论的宽度优先搜索算法是一次为搜索树建立一层，而深度优先算法则尽量向枝的深处搜索。本节介绍两种实现DFS的算法。第1个算法是专门用来解决骑士周游问题的，它显式地要求各节点最多被访问1次。第2种实现更加通用，但会允许在生成树时对其某个节点访问不止一次。在后续章节中，基于第2种算法开发了其它的算法。\n\n图的深度优先搜索很适合用来找到1条由63条边构成的路径。当深度搜索算法发现1条死路（图中的某个节点，使得接下来没有合法的移动了），它便会返回，并且朝着有合法移动的顶点的最深处移动。\n\n骑士周游函数接受4个参数：n，搜索树当前的深度；path，到该节点为止已访问过的顶点；u，待搜索节点；limit，路径中的节点数。knightTour函数是递归的。当knightTour函数被调用时，它首先检查约束条件。如果某条路径含有64个顶点，将True从knightTour返回，表示找到了一条可行的周游路径。若该路径长度不够，则继续向更深处搜索————选择1个新顶点以搜索并递归调用knightTour。\n\n\nDFS也使用颜色来记录图中哪些节点已经被访问，没有被访问过的顶点被涂为白色，访问过的是灰色。若某一顶点所有的邻接顶点都被搜索过了并且还没有达到64个顶点的长度的话，则说明当前是一条死路，此时必须要进行回溯，这里是通过从knightTour返回False来实现回溯的。在宽度优先搜索中使用队列来记录需要访问的节点。因为深度优先搜索是递归的，因此其实是隐式地使用了栈来进行回溯。当knightTour函数返回False的时候，程序仍处于while循环中，并在nbrList中寻找下一个顶点。\n\n**代码3**\nfrom pythonds.graphs import Graph, Vertex\ndef knightTour(n,path,u,limit):\n        u.setColor('gray')\n        path.append(u)\n        if n < limit:\n            nbrList = list(u.getConnections())\n            i = 0\n            done = False\n            while i < len(nbrList) and not done:\n                if nbrList[i].getColor() == 'white':\n                    done = knightTour(n+1, path, nbrList[i], limit)\n                i = i + 1\n            if not done:  # prepare to backtrack\n                path.pop()\n                u.setColor('white')\n        else:\n            done = True\n        return done\n下面来简单地试运行。读者可以参考下面的图例来观察该搜索的步骤。作为例子，假设getConnections方法返回的节点是按字母排序的。首先调用knightTour(0,path,A,6)。\n\n如图3所示，knightTour从节点A开始。A的邻接节点为B和D，由于B在D之前（字母排序），DFS选择B来对下一级进行搜索（图4）。通过递归调用knightTour实现对B的搜索。由于C、D是B的邻接节点，因此knightTour接下来选择C以继续搜索。然而，如图5所示，节点C是一条死路，因为它没有白色的邻接节点。此时，将节点C的颜色改为白色，knightTour返回False。实际上该递归函数的返回导致了回溯到节点B以继续搜索（如图6所示）。节点B中的下一个可探索节点是D，因此knightTour函数继续进行递归调用，直到再次遇到节点C（如图8、9、10）。然而，这次在节点C进行n<limit的测试结果是False，因此可以确认图中所有节点已经被遍历完。此时返回True表示已经找到1条实现周游的路径，返回该列表path，其值[A,B,D,E,F,C]，它即是实现对图中各节点访问恰好1次的顺序。\n\n![../_images/ktdfsa.png](http://interactivepython.org/courselib/static/pythonds/_images/ktdfsa.png)\n\n![../_images/ktdfsb.png](http://interactivepython.org/courselib/static/pythonds/_images/ktdfsb.png)\n\n![../_images/ktdfsc.png](http://interactivepython.org/courselib/static/pythonds/_images/ktdfsc.png)\n\n![../_images/ktdfsd.png](http://interactivepython.org/courselib/static/pythonds/_images/ktdfsd.png)\n\n![../_images/ktdfse.png](http://interactivepython.org/courselib/static/pythonds/_images/ktdfse.png)\n\n![../_images/ktdfsf.png](http://interactivepython.org/courselib/static/pythonds/_images/ktdfsf.png)\n\n![../_images/ktdfsg.png](http://interactivepython.org/courselib/static/pythonds/_images/ktdfsg.png)\n\n![../_images/ktdfsh.png](http://interactivepython.org/courselib/static/pythonds/_images/ktdfsh.png)\n\n图11是8*8棋盘中的周游例子。可以看出有多种可行的路径，并且其中有一些还是堆成的。改进一下的话，读者也可以获得起始与结束为同一个格子的循环路径。\n\n![../_images/completeTour.png](http://interactivepython.org/courselib/static/pythonds/_images/completeTour.png)\n\n## 7.14 骑士周游分析 ##\n\n关于骑士周游问题还有1个要点即性能需要讲解，然后再继续介绍深度搜索的通用版本。特别地，knightTour高度依赖于顶点搜索次序的方式。比如说，在5*5的棋盘上在还算比较快的电脑上于1.5秒内计算出1条路径，但对于8*8的棋盘来说又是怎样的？在这种情况下，取决于计算机的速度，有可能需要半小时才能计算出答案。原因是当前实现的骑士周游解法是时间复杂度为$O(k^N)$的算法，其中N是棋盘中方格数，而k是1个小常数。图12以图形的方式进行了阐释。树的根节点代表的是搜索树的起点，从起点出发，算法生成并检查每一个合法的移动。之前也说到过，合法移动数的个数依赖于骑士在棋盘上的位置。在角的时候，仅可能有2个合法的移动；在与角相邻的位置则可能有3个合法的移动；而在棋盘中间的话，可能会有8个。图13给出了棋盘上每个位置可能的合法移动。在树的下一层，同样又有2-8个可能的合法移动。需要检查的位置对应于搜索树中节点个数。\n\n\n![../_images/8arrayTree.png](http://interactivepython.org/courselib/static/pythonds/_images/8arrayTree.png)\n\n![../_images/moveCount.png](http://interactivepython.org/courselib/static/pythonds/_images/moveCount.png)\n\n读者已经知道，高度为N的二叉树的节点数为 $2^{N+1}-1$ 。子节点树可达8的树的节点数是远远大于二叉树的。由于每个节点的分枝因子是可变的，因此可以用通过平均分枝因子来估计节点数。值得注意的是，该算法是指数级的：$k^{N+1}-1$ ，其中k是棋盘的平均分枝因子。来看看它增长得有多块。对于5*5的棋盘，树会有25层深（或者说24，若将第1层记为0）。平均分枝因子是k=3.8，因此搜索树中的节点数为： $3.8^{25}-1$ 或 $3.12\\times 10^{14}$ 。对于6*6的，有 $1.5\\times 10^{23}$ 个节点，而对于普通的8*8棋盘，k=5.25，则有 $1.3\\times 10^46$ 。当然，对于同一个问题可能有多重解法，因此也不必搜索每个单节点，但是这也只能是对节点数取了个分数，事实上也并不会改变其指数级的性质。至于将k表示为棋盘大小的函数，就作为练习了。\n\n幸运的是，有种方法可以将8*8的情况控制在1秒内完成，如下面的代码4所示。其中orderbyAvail函数\n是在u.getConnections被调用时所使用的函数。行10是orderByAvail中最关键的1行。该行保证了选择的下一步顶点是可能的合法走法最少的那个。读者可能觉得这有些起反作用，为什么不选择可行走法最多的？读者大可以自己试试。\n\n在选择路径的下一个顶点时采用可能合法数最多的那个会导致的问题是，该机制下会倾向于在早期便访问棋盘的中间，这样一来，骑士很容易会困在棋盘的一侧而不能访问棋盘另一侧中未访问的方格。而如果采用合法数最少的那个，则强迫其实首先访问棋盘的边缘，这样一来，骑士一开始便访问了\"很难达到\"的角落，然后在有必要时利用中间的方格来达到棋盘的另一侧。利用这种知识来加速算法被称为\"启发式\"算法。人类日常中也是利用启发式规则来作出各种决定的，启发式搜索常常用于AI领域。本例使用的启发式算法被称为Warnsdorff算法。\n\n**代码4**\n```Python\ndef orderByAvail(n):\n    resList = []\n    for v in n.getConnections():\n        if v.getColor() == 'white':\n            c = 0\n            for w in v.getConnections():\n                if w.getColor() == 'white':\n                    c = c + 1\n            resList.append((c,v))\n    resList.sort(key=lambda x: x[0])\n    return [y[1] for y in resList]\n```\n## 7.15 通用深度搜索 ##\n\n骑士周游是DFS的1个特例，它的目标是生成深度最大且无分枝的树。更通用的深度优先搜索实际上还要简单一点。它的目标是尽可能深地对树进行搜索，连接图中尽可能多的顶点并且在必要时进行分枝。\n\n深度优先搜索甚至可能创建多棵树。当深度优先搜索算法生成了一组树时，便称之为深度优先森林。同宽度优先搜索一样，深度优先搜索在构造时也利用了父节点引用。此外，深度优先搜索在Vertex类中还会使用额外两个实例变量，即发现时间和完成时间。发现时间记录某个顶点第1次出现前的步骤数，而完成时间记录该顶点被涂为黑色时的步骤数。观察算法可以发现，发现时间和完成时间能够提供一些有趣的性质可供后续的一些算法使用。\n\n深度优先搜索如代码5所示。因为两个函数dfs和其辅助函数dfsvisit使用了1个变量来记录在调用dfsvisit时的时间，从而将这部分代码实现为Graph子类的一个方法。这里给出的实现通过增加了1个time实例变量以及dfs、dfsvisit方法将Graph类进行了扩张。仔细研究行11，可以发现dfs方法对图中所有的顶点进行了遍历，并对白色节点调用dfsvisit方法。之所以对所有顶点进行迭代而不从给定起点开始搜索，是为了保证图中所有节点都被考虑了并且在DFS树中没有顶点被一楼。for aVvertex in self可能看起来有点奇怪，但实际上这里的self是DFSGraph的一个实例，对Graph实例中的所有顶点进行迭代是很常规的操作。\n\n**代码5**\n```Python\nfrom pythonds.graphs import Graph\nclass DFSGraph(Graph):\n    def __init__(self):\n        super().__init__()\n        self.time = 0\n\n    def dfs(self):\n        for aVertex in self:\n            aVertex.setColor('white')\n            aVertex.setPred(-1)\n        for aVertex in self:\n            if aVertex.getColor() == 'white':\n                self.dfsvisit(aVertex)\n\n    def dfsvisit(self,startVertex):\n        startVertex.setColor('gray')\n        self.time += 1\n        startVertex.setDiscovery(self.time)\n        for nextVertex in startVertex.getConnections():\n            if nextVertex.getColor() == 'white':\n                nextVertex.setPred(startVertex)\n                self.dfsvisit(nextVertex)\n        startVertex.setColor('black')\n        self.time += 1\n        startVertex.setFinish(self.time)\n```\n\n虽然这里给出的bfs实现只考虑了那些可以通过某条路径回到起点的节点，但是也可以生成表示图中各节点最短路径的BFS森林。这就作为练习了。在后续的2个算法中，可以看出记录DFS森林的重要性。\n\ndfsvisit方法从startVertex这一单节点出发，尽可能地探索所有邻接白色顶点。如果读者仔细地研究dfsvisit的代码并且将其于BFS对比，可以发现dfsvisit算法几乎等同于bfs，除了for循环中的最后1行，dfsvisit递归地调用其本身以向更深的层继续搜索，而bfs将该节点加入队列供以后搜索。有趣的是，bfs使用的是队列，而dfsvisit使用的是栈。当然读者并不能在代码中看到栈，实际上是通过递归调用dfsvisit而使用了栈。\n\n下面的1组图演示了用于小图的深度优先搜索算法的实际运行。在这些图中，虚线表示检查过的边，但边的另一端的节点已经被加入了深度优先树。在代码中，这是通过检查另一节点的颜色为非白色来实现的。\n\n搜索从图中的顶点A（图14）开始。由于在搜索开始时，所有的顶点都是白色的，算法首先访问了顶点A。访问节点的第一步是将该节点的颜色设置为灰色，表示该节点正在被搜索，并且把发现世界设置为1。由于顶点A有两个邻接顶点（B，D），每一个都需要被访问，因此就随意地按字母顺序进行访问了。\n\n接下来访问的是节点B（如图15），因此将其颜色设置为灰色，并将其发现时间设置为2。顶点B与（C，D）邻接，因此按照字母顺序访问节点C。\n\n访问顶点C（图16）后来到了树的一个分枝的末端。将节点涂成灰色，将其发现时间设置为3，并且算法也确定了C是没有邻接顶点的，这意味着已经完成了对节点C的搜索，将其涂成黑色，并且将完成时间设置为4。此时的状态如图17所示。\n\n由于顶点C是一个分枝的末端，现在回到顶点B，并继续搜索B的邻接顶点。除了C以外仅剩D了，因此现在访问D（图18），并且从顶点D继续搜索。通过顶点D便来到了顶点E（图19），顶点E有两个邻接顶点，B和F。正常情况下会按照字母顺序来访问邻接顶点，但是由于B已经被涂成灰色了，算法对其进行识别，确认不能访问B，因为这样一来该算法便陷入了无限循环了。因此，算法从顶点F继续（图20）。\n\n顶点F仅有1个邻接顶点C，但是C是黑色的，因此就不用进行搜索了：算法已经到达了另一分枝的末端。\n\n![../_images/gendfsa.png](http://interactivepython.org/courselib/static/pythonds/_images/gendfsa.png)\n\n![../_images/gendfsb.png](http://interactivepython.org/courselib/static/pythonds/_images/gendfsb.png)\n\n![../_images/gendfsc.png](http://interactivepython.org/courselib/static/pythonds/_images/gendfsc.png)\n\n![../_images/gendfsd.png](http://interactivepython.org/courselib/static/pythonds/_images/gendfsd.png)\n\n![../_images/gendfse.png](http://interactivepython.org/courselib/static/pythonds/_images/gendfse.png)\n\n![../_images/gendfsf.png](http://interactivepython.org/courselib/static/pythonds/_images/gendfsf.png)\n\n![../_images/gendfsg.png](http://interactivepython.org/courselib/static/pythonds/_images/gendfsg.png)\n\n![../_images/gendfsh.png](http://interactivepython.org/courselib/static/pythonds/_images/gendfsh.png)\n\n![../_images/gendfsi.png](http://interactivepython.org/courselib/static/pythonds/_images/gendfsi.png)\n\n![../_images/gendfsj.png](http://interactivepython.org/courselib/static/pythonds/_images/gendfsj.png)\n\n![../_images/gendfsk.png](http://interactivepython.org/courselib/static/pythonds/_images/gendfsk.png)\n\n![../_images/gendfsl.png](http://interactivepython.org/courselib/static/pythonds/_images/gendfsl.png)\n\n每个节点的发现和完成时间表示了**括号属性（parenthesis property）**，意味着某个节点在深度优先树中的所有子节点的发现时间都比其父节点晚，而结束时间比其父节点早。\n\n## 7.16 深度优先搜索分析 ##\n\n深度优先搜索一般运行时间分析如下。不考虑dfsvisit的具体情况，dfs中的循环都是O(V）的，因为它们都是遍历图中各顶点。在dfsvisit中，遍历当前顶点的邻接列表中的边。由于dfsvisit仅在顶点为白色时进行递归调用，该循环对图中的每条边最多执行1次，或者说O(E)。因此，DFS的总时间是O(V+E)的。\n\n## 7.17 拓扑排序 ##\n\n计算机科学家几乎可以把所有问题都转化为图问题，下面以1个复杂问题作演示，即制作煎蛋饼。配方很简单，1个鸡蛋，1杯面粉，1勺油以及$\\frac{3}{4}$杯牛奶。为了制作煎饼，必须要加热平底锅，将所有材料混合在一起，然后将混合物用勺子放入热好的锅中。当煎饼开始冒泡时，将其反转过来，煎至底部变为金黄色。在享用煎饼之前，也可以加一些果酱。图27将以上过程表示为图。\n\n![../_images/pancakes.png](http://interactivepython.org/courselib/static/pythonds/_images/pancakes.png)\n\n\n\n\n",[[1528768312927,["Re@Re.local",[[1,21349,"制作建明的"]],[21349,21349],[21354,21354]]],[1528768313497,["Re@Re.local",[[-1,21351,"建明的"]],[21354,21354],[21351,21351]]],[1528768318070,["Re@Re.local",[[1,21351,"煎饼的难点碍于"]],[21351,21351],[21358,21358]]],[1528768318892,["Re@Re.local",[[-1,21356,"碍于"]],[21358,21358],[21356,21356]]],[1528768321855,["Re@Re.local",[[1,21356,"在于确定首先"]],[21356,21356],[21362,21362]]],[1528768730445,["Re@Re.local",[[-1,21360,"首先"]],[21362,21362],[21360,21360]]],[1528768731866,["Re@Re.local",[[1,21360,"第一步"]],[21360,21360],[21363,21363]]],[1528768761248,["Re@Re.local",[[1,21363,"干啥。如图27所示，可以从加热锅开始，也可以从向"]],[21363,21363],[21387,21387]]],[1528768769427,["Re@Re.local",[[-1,21386,"向"]],[21387,21387],[21386,21386]]],[1528768780367,["Re@Re.local",[[1,21386,"加入任意原料开始。"]],[21386,21386],[21395,21395]]],[1528769204121,["Re@Re.local",[[1,21395,"weil"]],[21395,21395],[21399,21399]]],[1528769205542,["Re@Re.local",[[-1,21395,"weil"]],[21399,21399],[21395,21395]]],[1528769207751,["Re@Re.local",[[1,21395,"为了确定"]],[21395,21395],[21399,21399]]],[1528769225047,["Re@Re.local",[[-1,21397,"确定"]],[21399,21399],[21397,21397]]],[1528769233677,["Re@Re.local",[[1,21397,"准确地确定顺序"]],[21397,21397],[21404,21404]]],[1528769234608,["Re@Re.local",[[-1,21402,"顺序"]],[21404,21404],[21402,21402]]],[1528769251668,["Re@Re.local",[[1,21402,"步骤顺序，制作煎饼地"]],[21402,21402],[21412,21412]]],[1528769266738,["Re@Re.local",[[-1,21406,"，制作煎饼地"]],[21412,21412],[21406,21406]]],[1528769271561,["Re@Re.local",[[1,21402,"制作"]],[21402,21402],[21404,21404]]],[1528769275364,["Re@Re.local",[[1,21406,"地没"]],[21406,21406],[21408,21408]]],[1528769275658,["Re@Re.local",[[-1,21406,"地没"]],[21408,21408],[21406,21406]]],[1528769278247,["Re@Re.local",[[1,21406,"的每一个"]],[21406,21406],[21410,21410]]],[1528769282521,["Re@Re.local",[[-1,21397,"准确地"]],[21400,21400],[21397,21397]]],[1528769285968,["Re@Re.local",[[1,21409,"的准确"]],[21409,21409],[21412,21412]]],[1528769291261,["Re@Re.local",[[1,21414,"，将"]],[21414,21414],[21416,21416]]],[1528769291431,["Re@Re.local",[[-1,21415,"将"]],[21416,21416],[21415,21415]]],[1528769529940,[null,[[-1,21401,"步骤"],[1,21403,"煎饼"],[-1,21407,"顺序"],[1,21409,"步骤"],[1,21412,"顺序，"],[-1,21414,"，"]],[21401,21401],[21414,21414]]],[1528769529941,[null,[[1,21401,"步骤"],[-1,21401,"煎饼"],[1,21407,"顺序"],[-1,21407,"步骤"],[-1,21412,"顺序，"],[1,21417,"，"]],[21414,21414],[21401,21401]]],[1528769494459,["Re@Re.local",[[1,21415,"可以使用图算法来求解。"]],[21415,21415],[21426,21426]]],[1528769494776,["Re@Re.local",[[1,21429,"\n"]],[21426,21426],[21427,21427]]],[1528769495063,["Re@Re.local",[[1,21430,"\n"]],[21427,21427],[21428,21428]]],[1528769503136,["Re@Re.local",[[1,21422,"中的拓扑排序"]],[21422,21422],[21428,21428]]],[1528769505332,["Re@Re.local",[[1,21424,"**"]],[21424,21424],[21426,21426]]],[1528769507031,["Re@Re.local",[[1,21430,"**"]],[21430,21430],[21432,21432]]],[1528769509128,["Re@Re.local",[[1,21430,"（）"]],[21430,21430],[21432,21432]]],[1528769513436,["Re@Re.local",[[1,21431,"topological sort"]],[21431,21431],[21447,21447]]],[1528769514779,["Re@Re.local",[[1,21459,"\n"]],[21454,21454],[21455,21455]]],[1528769514989,["Re@Re.local",[[1,21460,"\n"]],[21455,21455],[21456,21456]]],[1528769589794,[null,[[-1,21401,"步骤"],[1,21403,"煎饼"],[-1,21407,"顺序的准确\n\n"],[1,21414,"步骤的准确顺序"],[1,21454,"\n\n"]],[21401,21401],[21456,21456]]],[1528769589795,[null,[[1,21401,"步骤"],[-1,21401,"煎饼"],[1,21407,"顺序的准确\n\n"],[-1,21407,"步骤的准确顺序"],[-1,21454,"\n\n"]],[21456,21456],[21401,21401]]],[1528769535664,["Re@Re.local",[[1,21456,"沱牌"]],[21456,21456],[21458,21458]]],[1528769536048,["Re@Re.local",[[-1,21456,"沱牌"]],[21458,21458],[21456,21456]]],[1528769540061,["Re@Re.local",[[1,21456,"拓扑排序使用"]],[21456,21456],[21462,21462]]],[1528769578321,["Re@Re.local",[[-1,21460,"使用"]],[21462,21462],[21460,21460]]],[1528769579869,["Re@Re.local",[[1,21460,"接受"]],[21460,21460],[21462,21462]]],[1528769580406,["Re@Re.local",[[-1,21460,"接受"]],[21462,21462],[21460,21460]]],[1528769587913,["Re@Re.local",[[1,21460,"将有向"]],[21460,21460],[21463,21463]]],[1528769649822,[null,[[-1,21401,"步骤"],[1,21403,"煎饼"],[-1,21407,"顺序的准确\n\n"],[1,21414,"步骤的准确顺序"],[1,21463,"\n\n"]],[21401,21401],[21465,21465]]],[1528769649823,[null,[[1,21401,"步骤"],[-1,21401,"煎饼"],[1,21407,"顺序的准确\n\n"],[-1,21407,"步骤的准确顺序"],[-1,21463,"\n\n"]],[21465,21465],[21401,21401]]],[1528769602903,["Re@Re.local",[[1,21463,"无圈图转化为线性顶底啊你"]],[21463,21463],[21475,21475]]],[1528769609391,["Re@Re.local",[[-1,21469,"线性顶底啊你"]],[21475,21475],[21469,21469]]],[1528769611546,["Re@Re.local",[[1,21469,"顶点"]],[21469,21469],[21471,21471]]],[1528769611817,["Re@Re.local",[[-1,21469,"顶点"]],[21471,21471],[21469,21469]]],[1528769629875,["Re@Re.local",[[1,21469,"其顶点的线性排列，使得对于包含"]],[21469,21469],[21484,21484]]],[1528769631828,["Re@Re.local",[[-1,21482,"包含"]],[21484,21484],[21482,21482]]],[1528769632776,["Re@Re.local",[[1,21482,"图"]],[21482,21482],[21483,21483]]],[1528769632943,["Re@Re.local",[[-1,21482,"图"]],[21483,21483],[21482,21482]]],[1528769635125,["Re@Re.local",[[1,21482,"图"]],[21482,21482],[21483,21483]]],[1528769635461,["Re@Re.local",[[-1,21482,"图"]],[21483,21483],[21482,21482]]],[1528769637339,["Re@Re.local",[[1,21482,"包"]],[21482,21482],[21483,21483]]],[1528769709782,[null,[[-1,21401,"步骤"],[1,21403,"煎饼"],[-1,21407,"顺序的准确\n\n"],[1,21414,"步骤的准确顺序"],[1,21483,"\n\n"]],[21401,21401],[21485,21485]]],[1528769709782,[null,[[1,21401,"步骤"],[-1,21401,"煎饼"],[1,21407,"顺序的准确\n\n"],[-1,21407,"步骤的准确顺序"],[-1,21483,"\n\n"]],[21485,21485],[21401,21401]]],[1528769652867,["Re@Re.local",[[-1,21482,"包"]],[21483,21483],[21482,21482]]],[1528769657555,["Re@Re.local",[[1,21482,"汉语哦边"]],[21482,21482],[21486,21486]]],[1528769658179,["Re@Re.local",[[-1,21482,"汉语哦边"]],[21486,21486],[21482,21482]]],[1528769667374,["Re@Re.local",[[1,21482,"含有边(v,w)的图G，"]],[21482,21482],[21494,21494]]],[1528769669649,["Re@Re.local",[[-1,21493,"，"]],[21494,21494],[21493,21493]]],[1528769677369,["Re@Re.local",[[1,21493,"，顶点"]],[21493,21493],[21496,21496]]],[1528769677944,["Re@Re.local",[[-1,21493,"，顶点"]],[21496,21496],[21493,21493]]],[1528769687707,["Re@Re.local",[[1,21493,"中，顶点v在顶点w之前。"]],[21493,21493],[21505,21505]]],[1528769699566,["Re@Re.local",[[-1,21493,"中"]],[21494,21494],[21493,21493]]],[1528769701916,["Re@Re.local",[[1,21493,"的排列中"]],[21493,21493],[21497,21497]]],[1528769708173,["Re@Re.local",[[1,21508,"有"]],[21508,21508],[21509,21509]]],[1528769708269,["Re@Re.local",[[-1,21508,"有"]],[21509,21509],[21508,21508]]],[1528769769837,[null,[[-1,21401,"步骤"],[1,21403,"煎饼"],[-1,21407,"顺序的准确\n\n"],[1,21414,"步骤的准确顺序"],[1,21508,"\n\n"]],[21401,21401],[21510,21510]]],[1528769769837,[null,[[1,21401,"步骤"],[-1,21401,"煎饼"],[1,21407,"顺序的准确\n\n"],[-1,21407,"步骤的准确顺序"],[-1,21508,"\n\n"]],[21510,21510],[21401,21401]]],[1528769723126,["Re@Re.local",[[1,21508,"有向无圈图用于许多应用"]],[21508,21508],[21519,21519]]],[1528769724576,["Re@Re.local",[[-1,21513,"用于许多应用"]],[21519,21519],[21513,21513]]],[1528769725756,["Re@Re.local",[[1,21513,"在需"]],[21513,21513],[21515,21515]]],[1528769726030,["Re@Re.local",[[-1,21513,"在需"]],[21515,21515],[21513,21513]]],[1528769734028,["Re@Re.local",[[1,21513,"应用于"]],[21513,21513],[21516,21516]]],[1528769735192,["Re@Re.local",[[-1,21512,"图应用于"]],[21516,21516],[21512,21512]]],[1528769754458,["Re@Re.local",[[1,21512,"图适用于很多应用程序，用来表示时间的吃"]],[21512,21512],[21531,21531]]],[1528769755118,["Re@Re.local",[[-1,21527,"时间的吃"]],[21531,21531],[21527,21527]]],[1528769760727,["Re@Re.local",[[1,21527,"事件的出现。煎饼"]],[21527,21527],[21535,21535]]],[1528769760992,["Re@Re.local",[[-1,21533,"煎饼"]],[21535,21535],[21533,21533]]],[1528769769264,["Re@Re.local",[[1,21533,"制作煎饼就是一个例子，另一个例子"]],[21533,21533],[21549,21549]]],[1528769829807,[null,[[-1,21401,"步骤"],[1,21403,"煎饼"],[-1,21407,"顺序的准确\n\n"],[1,21414,"步骤的准确顺序"],[1,21549,"\n\n"]],[21401,21401],[21551,21551]]],[1528769829807,[null,[[1,21401,"步骤"],[-1,21401,"煎饼"],[1,21407,"顺序的准确\n\n"],[-1,21407,"步骤的准确顺序"],[-1,21549,"\n\n"]],[21551,21551],[21401,21401]]],[1528769780129,["Re@Re.local",[[-1,21546,"个例子"]],[21549,21549],[21546,21546]]],[1528769816593,["Re@Re.local",[[1,21546,"些例子还有软件工程规划，数据库请求优化优先级"]],[21546,21546],[21568,21568]]],[1528769829366,["Re@Re.local",[[-1,21523,"用来表示"]],[21527,21527],[21523,21523]]],[1528769889784,[null,[[-1,21401,"步骤"],[1,21403,"煎饼"],[-1,21407,"顺序的准确\n\n"],[1,21414,"步骤的准确顺序"],[1,21564,"\n\n"]],[21401,21401],[21566,21566]]],[1528769889785,[null,[[1,21401,"步骤"],[-1,21401,"煎饼"],[1,21407,"顺序的准确\n\n"],[-1,21407,"步骤的准确顺序"],[-1,21564,"\n\n"]],[21566,21566],[21401,21401]]],[1528769832678,["Re@Re.local",[[1,21523,"可以用来表示"]],[21523,21523],[21529,21529]]],[1528769834304,["Re@Re.local",[[-1,21522,"，可以"]],[21525,21525],[21522,21522]]],[1528769836180,["Re@Re.local",[[1,21522,"中"]],[21522,21522],[21523,21523]]],[1528769838065,["Re@Re.local",[[-1,21513,"适用于"]],[21516,21516],[21513,21513]]],[1528769838877,["Re@Re.local",[[1,21513,"在"]],[21513,21513],[21514,21514]]],[1528769841019,["Re@Re.local",[[-1,21527,"的出现"]],[21530,21530],[21527,21527]]],[1528769843168,["Re@Re.local",[[1,21527,"的优先级"]],[21527,21527],[21531,21531]]],[1528769849618,["Re@Re.local",[[-1,21564,"优先级"]],[21567,21567],[21564,21564]]],[1528769853001,["Re@Re.local",[[1,21564,"优先级"]],[21564,21564],[21567,21567]]],[1528769858410,["Re@Re.local",[[-1,21562,"优化"]],[21564,21564],[21562,21562]]],[1528769861111,["Re@Re.local",[[1,21558,"油壶"]],[21558,21558],[21560,21560]]],[1528769861440,["Re@Re.local",[[-1,21558,"油壶"]],[21560,21560],[21558,21558]]],[1528769867519,["Re@Re.local",[[1,21563,"化优"]],[21562,21562],[21564,21564]]],[1528769879471,["Re@Re.local",[[1,21567,"以及矩阵乘法等问题。"]],[21567,21567],[21577,21577]]],[1528769879702,["Re@Re.local",[[1,21582,"\n"]],[21577,21577],[21578,21578]]],[1528769879914,["Re@Re.local",[[1,21583,"\n"]],[21578,21578],[21579,21579]]],[1528769889352,["Re@Re.local",[[1,21580,"拓扑排序简单"]],[21580,21580],[21586,21586]]],[1528769949797,[null,[[-1,21401,"步骤"],[1,21403,"煎饼"],[-1,21407,"顺序的准确\n\n"],[1,21414,"步骤的准确顺序"],[1,21588,"\n\n"]],[21401,21401],[21590,21590]]],[1528769949797,[null,[[1,21401,"步骤"],[-1,21401,"煎饼"],[1,21407,"顺序的准确\n\n"],[-1,21407,"步骤的准确顺序"],[-1,21588,"\n\n"]],[21590,21590],[21401,21401]]],[1528769890465,["Re@Re.local",[[-1,21584,"简单"]],[21586,21586],[21584,21584]]],[1528769891452,["Re@Re.local",[[1,21584,"键"]],[21584,21584],[21585,21585]]],[1528769891585,["Re@Re.local",[[-1,21584,"键"]],[21585,21585],[21584,21584]]],[1528769896532,["Re@Re.local",[[1,21584,"是一种简单而有效的"]],[21584,21584],[21593,21593]]],[1528769905449,["Re@Re.local",[[-1,21585,"一种简单而有效的"]],[21593,21593],[21585,21585]]],[1528769908679,["Re@Re.local",[[1,21585,"深度有心搜索"]],[21585,21585],[21591,21591]]],[1528769909481,["Re@Re.local",[[-1,21587,"有心搜索"]],[21591,21591],[21587,21587]]],[1528769912648,["Re@Re.local",[[1,21587,"优先搜索的简答"]],[21587,21587],[21594,21594]]],[1528769912931,["Re@Re.local",[[-1,21592,"简答"]],[21594,21594],[21592,21592]]],[1528769919942,["Re@Re.local",[[1,21592,"一种简单而有效该"]],[21592,21592],[21600,21600]]],[1528769920830,["Re@Re.local",[[-1,21597,"有效该"]],[21600,21600],[21597,21597]]],[1528769928868,["Re@Re.local",[[1,21597,"强大的改进。该算法"]],[21597,21597],[21606,21606]]],[1528769933572,["Re@Re.local",[[-1,21603,"该算法"]],[21606,21606],[21603,21603]]],[1528769938925,["Re@Re.local",[[1,21603,"拓扑排序算法如下："]],[21603,21603],[21612,21612]]],[1528769939228,["Re@Re.local",[[1,21616,"\n"]],[21612,21612],[21613,21613]]],[1528769939464,["Re@Re.local",[[1,21617,"\n"]],[21613,21613],[21614,21614]]],[1528769940543,["Re@Re.local",[[1,21614,"1-"]],[21614,21614],[21616,21616]]],[1528769941001,["Re@Re.local",[[-1,21614,"1-"]],[21616,21616],[21614,21614]]],[1528769941418,["Re@Re.local",[[-1,21617,"\n"]],[21614,21614],[21613,21613]]],[1528769947852,["Re@Re.local",[[1,21613,"1. 调用dfs(g)"]],[21613,21613],[21624,21624]]],[1528770009810,[null,[[-1,21401,"步骤"],[1,21403,"煎饼"],[-1,21407,"顺序的准确\n\n"],[1,21414,"步骤的准确顺序"],[1,21624,"\n"]],[21401,21401],[21625,21625]]],[1528770009810,[null,[[1,21401,"步骤"],[-1,21401,"煎饼"],[1,21407,"顺序的准确\n\n"],[-1,21407,"步骤的准确顺序"],[-1,21624,"\n"]],[21625,21625],[21401,21401]]],[1528769958273,["Re@Re.local",[[1,21616,"对于某个图g"]],[21616,21616],[21622,21622]]],[1528769967823,["Re@Re.local",[[1,21630,"。是"]],[21630,21630],[21632,21632]]],[1528769967975,["Re@Re.local",[[-1,21631,"是"]],[21632,21632],[21631,21631]]],[1528769968875,["Re@Re.local",[[1,21631,"掉"]],[21631,21631],[21632,21632]]],[1528769968973,["Re@Re.local",[[-1,21631,"掉"]],[21632,21632],[21631,21631]]],[1528769969806,["Re@Re.local",[[1,21631,"是不会"]],[21631,21631],[21634,21634]]],[1528769969906,["Re@Re.local",[[-1,21633,"会"]],[21634,21634],[21633,21633]]],[1528769973431,["Re@Re.local",[[1,21633,"嗲"]],[21633,21633],[21634,21634]]],[1528769974533,["Re@Re.local",[[-1,21630,"。是不嗲"]],[21634,21634],[21630,21630]]],[1528769991961,["Re@Re.local",[[1,21630,"。调用深度优先搜索的主要目的是为了计算每个顶点的完成事件。"]],[21630,21630],[21659,21659]]],[1528769992251,["Re@Re.local",[[1,21663,"\n"]],[21659,21659],[21660,21660]]],[1528769992652,["Re@Re.local",[[-1,21663,"\n"]],[21660,21660],[21659,21659]]],[1528769993197,["Re@Re.local",[[-1,21656,"事件。"]],[21659,21659],[21656,21656]]],[1528769996104,["Re@Re.local",[[1,21656,"时间。"]],[21656,21656],[21659,21659]]],[1528769996360,["Re@Re.local",[[1,21663,"\n"]],[21659,21659],[21660,21660]]],[1528769999001,["Re@Re.local",[[1,21660,"2. 将"]],[21660,21660],[21664,21664]]],[1528770001050,["Re@Re.local",[[-1,21663,"将"]],[21664,21664],[21663,21663]]],[1528770008326,["Re@Re.local",[[1,21663,"将"]],[21663,21663],[21664,21664]]],[1528770069800,[null,[[-1,21401,"步骤"],[1,21403,"煎饼"],[-1,21407,"顺序的准确\n\n"],[1,21414,"步骤的准确顺序"]],[21401,21401],[21421,21421]]],[1528770069801,[null,[[1,21401,"步骤"],[-1,21401,"煎饼"],[1,21407,"顺序的准确\n\n"],[-1,21407,"步骤的准确顺序"]],[21421,21421],[21401,21401]]],[1528770011722,["Re@Re.local",[[-1,21663,"将"]],[21664,21664],[21663,21663]]],[1528770017761,["Re@Re.local",[[1,21663,"按照完成时间讲叙"]],[21663,21663],[21671,21671]]],[1528770017993,["Re@Re.local",[[-1,21669,"讲叙"]],[21671,21671],[21669,21669]]],[1528770019063,["Re@Re.local",[[1,21669,"对"]],[21669,21669],[21670,21670]]],[1528770027233,["Re@Re.local",[[-1,21669,"对"]],[21670,21670],[21669,21669]]],[1528770029210,["Re@Re.local",[[1,21669,"讲叙"]],[21669,21669],[21671,21671]]],[1528770029775,["Re@Re.local",[[-1,21669,"讲叙"]],[21671,21671],[21669,21669]]],[1528770032762,["Re@Re.local",[[1,21669,"键"]],[21669,21669],[21670,21670]]],[1528770032843,["Re@Re.local",[[-1,21669,"键"]],[21670,21670],[21669,21669]]],[1528770047393,["Re@Re.local",[[1,21669,"以降序排列的方式将顶点存储于树"]],[21669,21669],[21684,21684]]],[1528770047519,["Re@Re.local",[[-1,21683,"树"]],[21684,21684],[21683,21683]]],[1528770051650,["Re@Re.local",[[1,21683,"一个列表中。"]],[21683,21683],[21689,21689]]],[1528770051911,["Re@Re.local",[[1,21693,"\n"]],[21689,21689],[21690,21690]]],[1528770052106,["Re@Re.local",[[1,21694,"\n"]],[21690,21690],[21691,21691]]],[1528770052522,["Re@Re.local",[[-1,21694,"\n"]],[21691,21691],[21690,21690]]],[1528770065082,["Re@Re.local",[[1,21690,"3. 返回拓扑排序的有"]],[21690,21690],[21701,21701]]],[1528770065220,["Re@Re.local",[[-1,21700,"有"]],[21701,21701],[21700,21700]]],[1528770129811,[null,[[-1,21401,"步骤"],[1,21403,"煎饼"],[-1,21407,"顺序的准确\n\n"],[1,21414,"步骤的准确顺序"]],[21401,21401],[21421,21421]]],[1528770129811,[null,[[1,21401,"步骤"],[-1,21401,"煎饼"],[1,21407,"顺序的准确\n\n"],[-1,21407,"步骤的准确顺序"]],[21421,21421],[21401,21401]]],[1528770074162,["Re@Re.local",[[1,21700,"降序排列列表。"]],[21700,21700],[21707,21707]]],[1528770074440,["Re@Re.local",[[1,21711,"\n"]],[21707,21707],[21708,21708]]],[1528770074659,["Re@Re.local",[[1,21712,"\n"]],[21708,21708],[21709,21709]]],[1528770077178,["Re@Re.local",[[1,21709,"图28给"]],[21709,21709],[21713,21713]]],[1528770077675,["Re@Re.local",[[-1,21712,"给"]],[21713,21713],[21712,21712]]],[1528770080024,["Re@Re.local",[[1,21712,"给出了"]],[21712,21712],[21715,21715]]],[1528770082595,["Re@Re.local",[[-1,21712,"给出了"]],[21715,21715],[21712,21712]]],[1528770095743,["Re@Re.local",[[1,21712,"是制作煎饼的图对应的深度优先树。"]],[21712,21712],[21728,21728]]],[1528770096814,["Re@Re.local",[[1,21732,"\n"]],[21728,21728],[21729,21729]]],[1528770097030,["Re@Re.local",[[1,21733,"\n"]],[21729,21729],[21730,21730]]],[1528770101037,["Re@Re.local",[[1,21730,"![../_images/pancakesDFS.png](http://interactivepython.org/courselib/static/pythonds/_images/pancakesDFS.png)"]],[21730,21730],[21839,21839]]],[1528770105966,["Re@Re.local",[[1,21719,"（图26）"]],[21719,21719],[21724,21724]]],[1528770109956,["Re@Re.local",[[1,21848,"\n"]],[21844,21844],[21845,21845]]],[1528770110240,["Re@Re.local",[[1,21849,"\n"]],[21845,21845],[21846,21846]]],[1528770901537,[null,[[-1,21401,"步骤"],[1,21403,"煎饼"],[-1,21407,"顺序的准确\n\n"],[1,21414,"步骤的准确顺序"]],[21401,21401],[21421,21421]]],[1528770901537,[null,[[1,21401,"步骤"],[-1,21401,"煎饼"],[1,21407,"顺序的准确\n\n"],[-1,21407,"步骤的准确顺序"]],[21421,21421],[21401,21401]]],[1528770870594,["Re@Re.local",[[1,21846,"最后，图29给出"]],[21846,21846],[21854,21854]]],[1528770871272,["Re@Re.local",[[-1,21852,"给出"]],[21854,21854],[21852,21852]]],[1528770873213,["Re@Re.local",[[1,21852,"是将"]],[21852,21852],[21854,21854]]],[1528770875946,["Re@Re.local",[[-1,21849,"图29是将"]],[21854,21854],[21849,21849]]],[1528770894342,["Re@Re.local",[[1,21849,"将拓扑排序算法应用到图中的结果如图29所示。"]],[21849,21849],[21871,21871]]],[1528771205647,[null,[[-1,21401,"步骤"],[1,21403,"煎饼"],[-1,21407,"顺序的准确\n\n"],[1,21414,"步骤的准确顺序"]],[21401,21401],[21421,21421]]],[1528771205647,[null,[[1,21401,"步骤"],[-1,21401,"煎饼"],[1,21407,"顺序的准确\n\n"],[-1,21407,"步骤的准确顺序"]],[21421,21421],[21401,21401]]],[1528771154818,["Re@Re.local",[[1,21875,"\n"]],[21871,21871],[21872,21872]]],[1528771154991,["Re@Re.local",[[1,21876,"\n"]],[21872,21872],[21873,21873]]],[1528771155234,["Re@Re.local",[[1,21873,"![../_images/pancakesTS.png](http://interactivepython.org/courselib/static/pythonds/_images/pancakesTS.png)"]],[21873,21873],[21980,21980]]],[1528771156235,["Re@Re.local",[[1,21984,"\n"]],[21980,21980],[21981,21981]]],[1528771156429,["Re@Re.local",[[1,21985,"\n"]],[21981,21981],[21982,21982]]],[1528771265754,[null,[[-1,21401,"步骤"],[1,21403,"煎饼"],[-1,21407,"顺序的准确\n\n"],[1,21414,"步骤的准确顺序"]],[21401,21401],[21421,21421]]],[1528771265754,[null,[[1,21401,"步骤"],[-1,21401,"煎饼"],[1,21407,"顺序的准确\n\n"],[-1,21407,"步骤的准确顺序"]],[21421,21421],[21401,21401]]],[1528771243175,["Re@Re.local",[[1,21982," "]],[21982,21982],[21983,21983]]]]],["79737e9b-80b4-4fe4-ac7f-8cf9e6c19b6e",1528774419157,"## 7.1 目标 ##\n\n- 学习图的概念和使用方式。\n- 以多种方式实现抽象数据类型Gragh。\n- 了解图在解决多种问题时的应用。\n\n本章研究图像。图像是比上一章学习的树更加通用的结构，实际上可以认为树是一种特殊的图像。图像也可以用来表示真实世界中的很多东西，比如公路系统，航线系统，网路系统甚至是完成计算机科学学位所必须的课程序列。本章读者会看到，一旦给某个问题以合适的表示，利用一些图像算法便可以轻松将看起来很困难的问题解决。\n\n对人类来说，看懂道路地图并理解不同地点之间的关系并不困难，但是计算机并没有这种能力。然而，可以将道路系统看作是1个图像，如此一来便可以让计算机做一些有趣的事情了。比如在互联网地图中，计算机可以找到从某个地方到另一个地方的最近、最快或者最简单的路线。\n\n作为计算机科学的学生，读者可能对获得学位所需要的课程比较感兴趣。图像可以很好地表达课程之间的依赖关系。图1便是1个例子。\n\n![../_images/CS-Prereqs.png](http://interactivepython.org/courselib/static/pythonds/_images/CS-Prereqs.png)\n\n## 7.2 术语和定义 ##\n\n\n**顶点（vertex）**\n顶点（也称为节点**node**）是图像的基础构件。它可以有名称，即键。顶点也可以有其它额外信息，即负载。\n**边（Edge）**\n边有时也被称为弧（arc），是图像的另一种基础构件。边将2个顶点连接起来以表示这2者之间存在某种关系。边可以是单向的也可以是双向的。当某个图像中的所有边都是单向的时候，便称该图像是**有向图（directed gragh/digrah）**。上示的课程依赖图显示是有向图，因为必须先完成某些课程后才能继续其它某些课程。\n**权重（weight）**\n为了表示从某个顶点到另一个顶点所需的代价，可以顶点进行**赋权（weighted）**。比如说公路图中某个城市连接到另一个城市，边上的权重可以表示为两个城市之间的距离。\n\n有了以上基本概念，便可以来对图像作一定义了。图像可以表示为G，其中G=(V,E)。对于图像G，V是顶点的集合，E是边的集合。每个边都是一个元组（v,w)，其中$w,v∈V$。可以向边元组中加入第3个元素来表示权重。子图s是顶点的集合v和边的集合e，使得$e⊂E且v⊂V$。\n\n图2给出了1个简单的赋权有向图作为例子。该图像可以用集合严格地表示：\n$$ V={V0,V1,V2,V3,V4,V5} $$\n$$ E= \\left \\{ (v0,v1,5),(v1,v2,4),(v2,v3,9),(v3,v4,7),(v4,v0,1),(v0,v5,2),(v5,v4,8),(v3,v5,3),(v5,v2,1) \\right \\} $$\n![../_images/digraph.png](http://interactivepython.org/courselib/static/pythonds/_images/digraph.png)\n\n图2中的例子演示了图像的另外2个关键术语。\n**路径（path）**\n路径是由边连接起来的顶点的序列。一般地，将路径定义为 $w_1,w_2,...,w_n$ 使得 $(w_i,w_{i+1})\\in E$ 对所有 $1≤i≤n−1$ 成立。无权路径长度是路径中边的个数，即n-1。权重路径长度是路径中边的权重之和。比如图2中，从V3到V1的路径是顶点序列 $(V3,V4,V0,V1)$ 而边为 ${(v3,v4,7),(v4,v0,1),(v0,v1,5)}{(v3,v4,7),(v4,v0,1),(v0,v1,5)}$。\n**环（cycle）**\n有向图中的环是首尾顶点相同的路径。比如说，图2中路径 $(V5,V2,V3,V5)(V5,V2,V3,V5)$ 就是1个环。没有环的图被称为**无环图（acyclic graph）**。没有环的有向图被称为**有向无环图（directed acyclic graph，DAG）**。接下来读者会看到，一些很重要的问题可以通过表示为DAG获得解决。\n\n## 7.3 抽象数据类型：Graph ##\n\n抽象数据类型Gragh被定义为：\n- Graph()生成一个新的空图。\n- addVertex(vert) 将Vertex的1个实例添加至图。\n- addEdge(fromVert,toVert) 向图添加1个连接2个顶点的有向边。\n- addEdge(fromVert,toVert,weight)向图添加1个连接2个顶点的赋权有向边。\n- getVertex(vertKey) 找到途中以vertKey命名的顶点。\n- getVertices() 返回途中所有顶点的列表。\n- in 对于vertex in graph这种形式的语句，若给定的vertex在途中，返回True，反之则False。\n\n有了图像的正式定义，在Python中可以用多种方式实现，下面来看看使用不同方式实现该ADT的优劣与差别。有两个著名的图的实现，即**邻接矩阵（adjacency matrix）**和**邻接表（adjacency list）**，本书将对这两种都进行解释，并对其中1中以Python类的方式实现。\n\n## 7.4 邻接矩阵（adjacency matrix）##\n\n\n实现图的最简单方式之一是使用二维矩阵。在二维矩阵中，每行每列的都代表了图中的1个顶点。如果顶点v到顶点w有边，行v和列w的交叉点单元格会存储值。若两个顶点由边连接，便称这两个顶点是**邻接**的。图3给出了图2的邻接矩阵。单元格中存储的值是v到w的权重。\n\n![../_images/adjMat.png](http://interactivepython.org/courselib/static/pythonds/_images/adjMat.png)\n\n邻接矩阵的优势是简便，并且对于小图来说，很容易看出哪些节点是相连的。然而，注意到矩阵中大多数单元格都是空。因为大多数单元格都是空的，因此称该矩阵是**稀疏（sparse）**的。矩阵并不能高效地存储这种稀疏数据。实际上，在Python中像图3这种矩阵结构都很麻烦。\n\n邻接矩阵对于边树较高的图来说是不错的实现。“较高”是什么意思？到底需要多少个边才能填满该矩阵？因此为每行、每列都对应个顶点，填满矩阵需要的顶点数是$|V|_2$。当每个顶点都与另外每一个顶点相连时，则该矩阵被填满了。实践中很少会遇到以这种方式连接的问题。本章研究的所有问题都是稀疏图。\n\n## 7.5 邻接表（adjacency list） ##\n\n邻接表可以用更少的空间实现稀疏图。在邻接表的实现中，维护一个包含图对象所有顶点的主列表，然后图对象中各个顶点对象都维护一个该对象连接的其它顶点对象的列表。在Vertex类的实现中，将使用字典而不是列表，其中字典的键为顶点，值为权重。图4给出了图2的邻接表实现示意图。\n![../_images/adjlist.png](http://interactivepython.org/courselib/static/pythonds/_images/adjlist.png)\n\n邻接表的有时在于它可以紧凑地表示稀疏图，利用稀疏图也可以轻松地找到某个顶点所有的连接情况。\n\n## 7.6 实现 ##\n\n使用字典可以很容易地在Python中实现邻接表。在本书的实现中会创建两个类（代码1、代码2），Graph保存顶点的祝列表，而Vertex即图中每个顶点。\n\n每个Vertex都使用字典来保存其连接的对象以及每条边的权重。该字典被命名为connectedTo。以下代码便是Vertex类的实现。构造器只是初始化了可以是字符串的id以及connectedTo字典。addNeighbor方法用来添加从该顶点到另一顶点的连接。getConnections方法返回当前节点connectedTo实例变量保存的邻接表中的所有顶点。getWeight方法返回从该节点到另一个作为参数传入的节点的边的权重。\n\n**代码1**\n```Pythion\nclass Vertex:\n    def __init__(self,key):\n        self.id = key\n        self.connectedTo = {}\n\n    def addNeighbor(self,nbr,weight=0):\n        self.connectedTo[nbr] = weight\n\n    def __str__(self):\n        return str(self.id) + ' connectedTo: ' + str([x.id for x in self.connectedTo])\n\n    def getConnections(self):\n        return self.connectedTo.keys()\n\n    def getId(self):\n        return self.id\n\n    def getWeight(self,nbr):\n        return self.connectedTo[nbr]\n```\nGraph类，如下面的代码所示，保存了一个字典，将顶点名映射到顶点对象。在图4中，该字典对象表示为灰色阴影框。Graph类也听过了方法用于添加顶点和连接顶点。此外，实现了\\_\\_iter\\_\\_方法来使得可以在图中对所有顶点对象进行迭代。这两种方法可以用来实现按名称或者是对象本身来对图中顶点的迭代。\n\n**代码2**\n```Python\nclass Graph:\n    def __init__(self):\n        self.vertList = {}\n        self.numVertices = 0\n\n    def addVertex(self,key):\n        self.numVertices = self.numVertices + 1\n        newVertex = Vertex(key)\n        self.vertList[key] = newVertex\n        return newVertex\n\n    def getVertex(self,n):\n        if n in self.vertList:\n            return self.vertList[n]\n        else:\n            return None\n\n    def __contains__(self,n):\n        return n in self.vertList\n\n    def addEdge(self,f,t,cost=0):\n        if f not in self.vertList:\n            nv = self.addVertex(f)\n        if t not in self.vertList:\n            nv = self.addVertex(t)\n        self.vertList[f].addNeighbor(self.vertList[t], cost)\n\n    def getVertices(self):\n        return self.vertList.keys()\n\n    def __iter__(self):\n        return iter(self.vertList.values())\n```\n使用以上定义的Graph和Vertex类，以下代码边可以表示图2。首先生成6个节点编号0-5，查看顶点字典，注意到对0-5的键都创建了1个Vertex实例。然后，将连接了顶点的边集合到一起。最后，使用嵌套循环确定图中的每个边都正确存储了。读者应该将输出结果与图2作一对比。\n```Python\n>>> g = Graph()\n>>> for i in range(6):\n...    g.addVertex(i)\n>>> g.vertList\n{0: <adjGraph.Vertex instance at 0x41e18>,\n 1: <adjGraph.Vertex instance at 0x7f2b0>,\n 2: <adjGraph.Vertex instance at 0x7f288>,\n 3: <adjGraph.Vertex instance at 0x7f350>,\n 4: <adjGraph.Vertex instance at 0x7f328>,\n 5: <adjGraph.Vertex instance at 0x7f300>}\n>>> g.addEdge(0,1,5)\n>>> g.addEdge(0,5,2)\n>>> g.addEdge(1,2,4)\n>>> g.addEdge(2,3,9)\n>>> g.addEdge(3,4,7)\n>>> g.addEdge(3,5,3)\n>>> g.addEdge(4,0,1)\n>>> g.addEdge(5,4,8)\n>>> g.addEdge(5,2,1)\n>>> for v in g:\n...    for w in v.getConnections():\n...        print(\"( %s , %s )\" % (v.getId(), w.getId()))\n...\n( 0 , 5 )\n( 0 , 1 )\n( 1 , 2 )\n( 2 , 3 )\n( 3 , 4 )\n( 3 , 5 )\n( 4 , 0 )\n( 5 , 4 )\n( 5 , 2 )\n```\n## 词梯（word ladder）问题 ##\n\n以词梯问题开始图算法的研究。将单词\"FOOL\"转化为\"SAGE\"。按词梯问题的规则，1次只能修改1个字母，在每1步都必须将单词转换为另一个单词，不允许转换为非单词。词梯问题是由*爱丽丝梦游仙境*的作者lewis Carroll于1878年提出的。以下单词序列是刚才那个问题的一个可行解。\n```Python\nFOOL\nPOOL\nPOLL\nPOLE\nPALE\nSALE\nSAGE\n```\n词梯问题有许多变体。比如读者可能遇到要求在给定步数来完成转换的版本，或是必须用给点单词的版本。本节仅关注计算出完成转换所需要的最小修改次数。\n\n当然，因为本章内容是图，因此可以用图算法来将其解决。以下是纲要：\n- 将单词之间的关系重新表示为图。\n- 使用**广度优先搜索算法（breadth first search**来找到从起始单词到目标单词的最短路径。\n\n## 7.8 建立词梯图 ##\n\n首先要解决的问题是如何将单词列表转换为图。对于边来说，需要保证它们连接的是差且仅差了1个字母的单词。如果生成这种图，那么从一个单词出发的任意路径都是该词梯问题的解。图1给出了1个小的由单词构成的图，它可以用来解决FOOL到SAGE的词梯问题。注意，该图是无向图且无权重。\n\n![../_images/wordgraph.png](http://interactivepython.org/courselib/static/pythonds/_images/wordgraph.png)\n\n\n可以使用很多方法来生成这个图。首先假设有1组长度相同的单词，从起点出发，为列表中的每一个单词创建1个顶点。为了确定如何将这些单词连接起来，可以将列表中的每个单词与其它的单词一一进行比较，在比较时确定有多少个字母不同。如果两个字母仅相差1个字母，便可以在图中为它们两创建1条边。单词数较少时，这个方法还是可行的。但是假设有5110个单词的话（粗略估计一一进行对比需要$O(n^2)$的时间复杂度），需要进行2500万次对比。\n\n使用以下方法可以对其进行优化。假设有大量桶，每个桶外面都贴着1个4字母单词，但是字母中有1个被下划线替代。比如说，对于图2这种情况，可能会有个桶被贴上\"POP_\"。当在列表中对每个单词进行处理时，将该单词与每个桶进行对比，将\"\\_\"用作通配符，因此\"POPE\"和\"POPS\"都与\"POP\\_\"匹配。每当找到1个匹配的桶时，都将该单词放进去。当所有的单词都放在了正确的桶里时，可以确定同一桶里的单词是相连的。\n\n![../_images/wordbuckets.png](http://interactivepython.org/courselib/static/pythonds/_images/wordbuckets.png)\n\n在Python中，可以通过字典实现上述方案。桶的标签作为字典的键，键对应的值为单词列表。首先为各个单词在图中创建1个顶点。然后为处于字典同一键下的单词之间创建边，如代码1所示。\n```Python\nfrom pythonds.graphs import Graph\n\ndef buildGraph(wordFile):\n    d = {}\n    g = Graph()\n    wfile = open(wordFile,'r')\n    # create buckets of words that differ by one letter\n    for line in wfile:\n        word = line[:-1]\n        for i in range(len(word)):\n            bucket = word[:i] + '_' + word[i+1:]\n            if bucket in d:\n                d[bucket].append(word)\n            else:\n                d[bucket] = [word]\n    # add vertices and edges for words in the same bucket\n    for bucket in d.keys():\n        for word1 in d[bucket]:\n            for word2 in d[bucket]:\n                if word1 != word2:\n                    g.addEdge(word1,word2)\n    return g\n```\n这是第一个跟现实生活相关的图问题，读者可能会好奇该图的稀疏程度。对于该问题，准备的单词列表有5510个。若果使用邻接矩阵，矩阵将会有5110*5110个单元格，而使用buildGraph函数的图仅有53286条边，因此仅有0.20%的单元格被填充了，这实际上是一个很稀疏的矩阵了。\n\n## 7.9 实现宽度优先搜索（breadth first search） ##\n\n创建好了图，接下来便可以研究解决字梯问题的最优算法了。这里使用的算法被称为**宽度优先搜索（breadth first search,BFS）**。BFS是用于图搜索的最简单的算法之一。它也是之后将研究的其它几种重要的图算法的原型。\n\n给定图G以及起始顶点s，宽度优先算法将对图内的边进行搜索以找到G中所有与s有路径相连的顶点。宽度优先搜索的优势在于，在找到与s距离为k+1的所有顶点之前，它会先找出所有距离为k的顶点。BFS的运行过程可以想象为生成树的过程，每次都生成树的一层。BFS在对子孙顶点进行搜索前，先将初始顶点的子顶点加入进来。\n\n为了跟踪运行过程，BFS将顶点染成白色，灰色或黑色。所有的顶点都被初始为白色。白色顶点是未被探索的顶点。当某个顶点被初次探索时，将其染成灰色，当BFS完成对某个顶点的探索时，将其染成黑色。这意味着，对于黑色的顶点，它是没有白色节点与之邻接的。灰色节点，有可能会存在白色节点与之邻接，需要进一步探索。\n\n此外，BFS算法使用了Vertex类的改进版。这种新的顶点类新增了3种实例变量，即distance,predecessor以及颜色。每个实例变量都有正确的getter和setter方法。这里就不作展示了，因为只是加了3个实例变量而已。\n\nBFS从起始顶点s开始，将start染成灰色来表示当前正在对其进行搜索。对于起始顶点，另外两个值，distance和predecessor分别被初始化为0和None。最后，start被放入1个Queue中。下一步便是系统地对队列前部的顶点进行搜索。所谓搜索，即是对队列前部的某1个节点的邻接列表作迭代。每当对邻接列表中的节点作处理时，先对其颜色进行判断。如果是白色的，则该节点尚未搜索过，于是执行以下4步操作：\n1. 将新的，未搜索的顶点nbr染成灰色。\n2. 将nbr的predecessor设置为当前节点currentVert。\n3. 到nbr的距离设为currentVert + 1。\n4. 将nbr放入队尾。将nbr放在队尾使得该节点只有在currentVert的邻接列表中的所有其它顶点都被搜索过了才会继续被搜索。\n\n**代码2**\n```Python\nfrom pythonds.graphs import Graph, Vertex\nfrom pythonds.basic import Queue\n\ndef bfs(g,start):\n  start.setDistance(0)\n  start.setPred(None)\n  vertQueue = Queue()\n  vertQueue.enqueue(start)\n  while (vertQueue.size() > 0):\n    currentVert = vertQueue.dequeue()\n    for nbr in currentVert.getConnections():\n      if (nbr.getColor() == 'white'):\n        nbr.setColor('gray')\n        nbr.setDistance(currentVert.getDistance() + 1)\n        nbr.setPred(currentVert)\n        vertQueue.enqueue(nbr)\n    currentVert.setColor('black')\n```\n现在来仔细研究下bfs函数是如何对图1构件宽度优先树的。从FOOL出发，将所有与FOOL邻接的节点连接到该树上。临近节点包括POOL，FOIL，FOUL和COOL。每个节点都放入了待搜索待新节点。图3给出了该操作中的树及完成后的队列。\n![../_images/bfs1.png](http://interactivepython.org/courselib/static/pythonds/_images/bfs1.png)\n\n\n接下来，bfs从队首去掉了下一个节点(POOL)，并对其所有邻接节点重复该操作。然而，当bfs检查到节点COOL时，它发现COOL的颜色已经是灰色了。这意味着有更短的路径到达COOL，并且COOL已经留在队列中以待进一步搜索。在对POOL进行监测时唯一新加入队列的是POLL。新状态如图4所示。\n\n![../_images/bfs2.png](http://interactivepython.org/courselib/static/pythonds/_images/bfs2.png)\n\n队列中的下一个顶点是FOIL。FOIL可以加入树的节点是FAIL，当bfs方法继续处理队列时，接下来两个节点都没有向树或者队列加入新的节点。图5展示的是对树的第二层所有顶点都探索完成了后的树和队列。\n\n![../_images/bfs3.png](http://interactivepython.org/courselib/static/pythonds/_images/bfs3.png)\n![../_images/bfsDone.png](http://interactivepython.org/courselib/static/pythonds/_images/bfsDone.png)\n\n读者应该自己动手过一遍该算法，以对该算法获得更好的理解。图6是图3中已完成所有顶点的搜索后的最终宽度优先搜索树。宽度优先搜索的惊人之处在于，它不仅解决了初始的FOOL-SAGE问题，也顺便解决了许多其它问题。从宽度优先搜索树中的任一节点出发，沿着父节点的箭头返回到根节点，便可以得到该单词变为FOOL的最短词梯。代码3沿着父节点链打印出了词梯：\n**代码3**\n```Python\ndef traverse(y):\n    x = y\n    while (x.getPred()):\n        print(x.getId())\n        x = x.getPred()\n    print(x.getId())\n\ntraverse(g.getVertex('sage'))\n```\n## 7.10 宽度优先搜索分析 ##\n\n在继续研究其它图算法前，先来分析一下宽度优先搜索算法的运行性能。首先应当观察到的是，图|V|中的每个顶点在循环中最多被处理一次，因为在进行监测和加入队列前，该顶点必须是白色的。因此整个循环为O(V)。嵌套在while中的for循环对图中的每条边最多执行1次，|E|，因此每个顶点最多出队1次并且只在节点u出队时才检查节点u到节点v的边，该for循环为O(E)。因此两个循环的最终结果是O(V+E)。\n\n当然，执行BFS仅完成了该任务的一部分。从起始节点出发到达目标顶点是该任务的另一部分。最坏情况是，该图是单链的。在这种情况下，遍历所有节点需要O(V)。正常情况下应该是|V|的某个分数，但时间复杂度不会变，仍然是O(V)。\n\n最后，至少对这哥问题而言，生成初始的图也需要时间，其时间复杂度的分析就作为练习了。\n\n## 7.11 骑士周游问题 ##\n\n起始周游是可以用来演示第二种常见图算法的经典问题。骑士周游问题是在国际象棋棋盘上仅使用1个棋子，即起始，该问题的目标是找到1个出棋序列使得骑士可以访问各个方格恰好1次。这样的序列被称为周游。起始周游问题多年来吸引了很多棋手、数学家和计算机科学家等。在8*8的棋盘上，可行的序列数的上界为$1.305\\times 10^{35}$。然而，还有很多时候会走到死棋的情况。当然，还有很多时候会失败。显然这是一个需要些智慧和计算力的问题。\n\n学者已经提出了很多该问题的接发，图搜索是最最容易理解和编程的。同样地，分两步来求解：\n- 将骑士在棋盘上符合规则的移动以图表示。\n- 使用图算法来找到长度为$rows\\times columns-1$的路径，其中每个顶点都恰好只访问1次。\n\n## 7.12 生成骑士周游图 ##\n\n为了将骑士周游问题表示为图，使用以下两种思想：棋盘上的每个方格都被表示为图中的一个节点；骑士的每个合法的移动都被标记为图中的边。图1是骑士的1中合规走法，并给出了其对应的在图中的边。\n\n![../_images/knightmoves.png](http://interactivepython.org/courselib/static/pythonds/_images/knightmoves.png)\n\n为$n\\times n$的棋盘生成图，其Python代码如代码1所示。knightGraph函数对整个棋盘作1次遍历，在棋盘上的每1个方格，kinightGraph函数都调用1个辅助函数genLegalMoves，为棋盘上的该节点处的合法走法生成1个列表。图中的所有合法走法最后都被转换成了边。另一个辅助函数，posToNodeId将棋盘上的1个位置按照其行列转换为线性节点编号，如图1所示。\n\n**代码1**\n```Python\nfrom pythonds.graphs import Graph\n\ndef knightGraph(bdSize):\n    ktGraph = Graph()\n    for row in range(bdSize):\n       for col in range(bdSize):\n           nodeId = posToNodeId(row,col,bdSize)\n           newPositions = genLegalMoves(row,col,bdSize)\n           for e in newPositions:\n               nid = posToNodeId(e[0],e[1],bdSize)\n               ktGraph.addEdge(nodeId,nid)\n    return ktGraph\n\ndef posToNodeId(row, column, board_size):\n    return (row * board_size) + column\n```\n代码2中的genLeagalMove函数将以骑士的位置作为参数，并创建了可能的8个走法。legalCoord辅助函数用来保证创建的某个走法是在棋盘内的。该图中有336条边，并且可以发现，棋盘边缘的顶点的合规走法比棋盘内部的顶点少，此外该棋盘是稀疏的，填充率只有8.2%。\n\n![../_images/bigknight.png](http://interactivepython.org/courselib/static/pythonds/_images/bigknight.png)\n\n## 7.13 实现骑士周游 ##\n\n解决骑士周游问题将使用**深度优先搜索（depth first search）**。上一节讨论的宽度优先搜索算法是一次为搜索树建立一层，而深度优先算法则尽量向枝的深处搜索。本节介绍两种实现DFS的算法。第1个算法是专门用来解决骑士周游问题的，它显式地要求各节点最多被访问1次。第2种实现更加通用，但会允许在生成树时对其某个节点访问不止一次。在后续章节中，基于第2种算法开发了其它的算法。\n\n图的深度优先搜索很适合用来找到1条由63条边构成的路径。当深度搜索算法发现1条死路（图中的某个节点，使得接下来没有合法的移动了），它便会返回，并且朝着有合法移动的顶点的最深处移动。\n\n骑士周游函数接受4个参数：n，搜索树当前的深度；path，到该节点为止已访问过的顶点；u，待搜索节点；limit，路径中的节点数。knightTour函数是递归的。当knightTour函数被调用时，它首先检查约束条件。如果某条路径含有64个顶点，将True从knightTour返回，表示找到了一条可行的周游路径。若该路径长度不够，则继续向更深处搜索————选择1个新顶点以搜索并递归调用knightTour。\n\n\nDFS也使用颜色来记录图中哪些节点已经被访问，没有被访问过的顶点被涂为白色，访问过的是灰色。若某一顶点所有的邻接顶点都被搜索过了并且还没有达到64个顶点的长度的话，则说明当前是一条死路，此时必须要进行回溯，这里是通过从knightTour返回False来实现回溯的。在宽度优先搜索中使用队列来记录需要访问的节点。因为深度优先搜索是递归的，因此其实是隐式地使用了栈来进行回溯。当knightTour函数返回False的时候，程序仍处于while循环中，并在nbrList中寻找下一个顶点。\n\n**代码3**\nfrom pythonds.graphs import Graph, Vertex\ndef knightTour(n,path,u,limit):\n        u.setColor('gray')\n        path.append(u)\n        if n < limit:\n            nbrList = list(u.getConnections())\n            i = 0\n            done = False\n            while i < len(nbrList) and not done:\n                if nbrList[i].getColor() == 'white':\n                    done = knightTour(n+1, path, nbrList[i], limit)\n                i = i + 1\n            if not done:  # prepare to backtrack\n                path.pop()\n                u.setColor('white')\n        else:\n            done = True\n        return done\n下面来简单地试运行。读者可以参考下面的图例来观察该搜索的步骤。作为例子，假设getConnections方法返回的节点是按字母排序的。首先调用knightTour(0,path,A,6)。\n\n如图3所示，knightTour从节点A开始。A的邻接节点为B和D，由于B在D之前（字母排序），DFS选择B来对下一级进行搜索（图4）。通过递归调用knightTour实现对B的搜索。由于C、D是B的邻接节点，因此knightTour接下来选择C以继续搜索。然而，如图5所示，节点C是一条死路，因为它没有白色的邻接节点。此时，将节点C的颜色改为白色，knightTour返回False。实际上该递归函数的返回导致了回溯到节点B以继续搜索（如图6所示）。节点B中的下一个可探索节点是D，因此knightTour函数继续进行递归调用，直到再次遇到节点C（如图8、9、10）。然而，这次在节点C进行n<limit的测试结果是False，因此可以确认图中所有节点已经被遍历完。此时返回True表示已经找到1条实现周游的路径，返回该列表path，其值[A,B,D,E,F,C]，它即是实现对图中各节点访问恰好1次的顺序。\n\n![../_images/ktdfsa.png](http://interactivepython.org/courselib/static/pythonds/_images/ktdfsa.png)\n\n![../_images/ktdfsb.png](http://interactivepython.org/courselib/static/pythonds/_images/ktdfsb.png)\n\n![../_images/ktdfsc.png](http://interactivepython.org/courselib/static/pythonds/_images/ktdfsc.png)\n\n![../_images/ktdfsd.png](http://interactivepython.org/courselib/static/pythonds/_images/ktdfsd.png)\n\n![../_images/ktdfse.png](http://interactivepython.org/courselib/static/pythonds/_images/ktdfse.png)\n\n![../_images/ktdfsf.png](http://interactivepython.org/courselib/static/pythonds/_images/ktdfsf.png)\n\n![../_images/ktdfsg.png](http://interactivepython.org/courselib/static/pythonds/_images/ktdfsg.png)\n\n![../_images/ktdfsh.png](http://interactivepython.org/courselib/static/pythonds/_images/ktdfsh.png)\n\n图11是8*8棋盘中的周游例子。可以看出有多种可行的路径，并且其中有一些还是堆成的。改进一下的话，读者也可以获得起始与结束为同一个格子的循环路径。\n\n![../_images/completeTour.png](http://interactivepython.org/courselib/static/pythonds/_images/completeTour.png)\n\n## 7.14 骑士周游分析 ##\n\n关于骑士周游问题还有1个要点即性能需要讲解，然后再继续介绍深度搜索的通用版本。特别地，knightTour高度依赖于顶点搜索次序的方式。比如说，在5*5的棋盘上在还算比较快的电脑上于1.5秒内计算出1条路径，但对于8*8的棋盘来说又是怎样的？在这种情况下，取决于计算机的速度，有可能需要半小时才能计算出答案。原因是当前实现的骑士周游解法是时间复杂度为$O(k^N)$的算法，其中N是棋盘中方格数，而k是1个小常数。图12以图形的方式进行了阐释。树的根节点代表的是搜索树的起点，从起点出发，算法生成并检查每一个合法的移动。之前也说到过，合法移动数的个数依赖于骑士在棋盘上的位置。在角的时候，仅可能有2个合法的移动；在与角相邻的位置则可能有3个合法的移动；而在棋盘中间的话，可能会有8个。图13给出了棋盘上每个位置可能的合法移动。在树的下一层，同样又有2-8个可能的合法移动。需要检查的位置对应于搜索树中节点个数。\n\n\n![../_images/8arrayTree.png](http://interactivepython.org/courselib/static/pythonds/_images/8arrayTree.png)\n\n![../_images/moveCount.png](http://interactivepython.org/courselib/static/pythonds/_images/moveCount.png)\n\n读者已经知道，高度为N的二叉树的节点数为 $2^{N+1}-1$ 。子节点树可达8的树的节点数是远远大于二叉树的。由于每个节点的分枝因子是可变的，因此可以用通过平均分枝因子来估计节点数。值得注意的是，该算法是指数级的：$k^{N+1}-1$ ，其中k是棋盘的平均分枝因子。来看看它增长得有多块。对于5*5的棋盘，树会有25层深（或者说24，若将第1层记为0）。平均分枝因子是k=3.8，因此搜索树中的节点数为： $3.8^{25}-1$ 或 $3.12\\times 10^{14}$ 。对于6*6的，有 $1.5\\times 10^{23}$ 个节点，而对于普通的8*8棋盘，k=5.25，则有 $1.3\\times 10^46$ 。当然，对于同一个问题可能有多重解法，因此也不必搜索每个单节点，但是这也只能是对节点数取了个分数，事实上也并不会改变其指数级的性质。至于将k表示为棋盘大小的函数，就作为练习了。\n\n幸运的是，有种方法可以将8*8的情况控制在1秒内完成，如下面的代码4所示。其中orderbyAvail函数\n是在u.getConnections被调用时所使用的函数。行10是orderByAvail中最关键的1行。该行保证了选择的下一步顶点是可能的合法走法最少的那个。读者可能觉得这有些起反作用，为什么不选择可行走法最多的？读者大可以自己试试。\n\n在选择路径的下一个顶点时采用可能合法数最多的那个会导致的问题是，该机制下会倾向于在早期便访问棋盘的中间，这样一来，骑士很容易会困在棋盘的一侧而不能访问棋盘另一侧中未访问的方格。而如果采用合法数最少的那个，则强迫其实首先访问棋盘的边缘，这样一来，骑士一开始便访问了\"很难达到\"的角落，然后在有必要时利用中间的方格来达到棋盘的另一侧。利用这种知识来加速算法被称为\"启发式\"算法。人类日常中也是利用启发式规则来作出各种决定的，启发式搜索常常用于AI领域。本例使用的启发式算法被称为Warnsdorff算法。\n\n**代码4**\n```Python\ndef orderByAvail(n):\n    resList = []\n    for v in n.getConnections():\n        if v.getColor() == 'white':\n            c = 0\n            for w in v.getConnections():\n                if w.getColor() == 'white':\n                    c = c + 1\n            resList.append((c,v))\n    resList.sort(key=lambda x: x[0])\n    return [y[1] for y in resList]\n```\n## 7.15 通用深度搜索 ##\n\n骑士周游是DFS的1个特例，它的目标是生成深度最大且无分枝的树。更通用的深度优先搜索实际上还要简单一点。它的目标是尽可能深地对树进行搜索，连接图中尽可能多的顶点并且在必要时进行分枝。\n\n深度优先搜索甚至可能创建多棵树。当深度优先搜索算法生成了一组树时，便称之为深度优先森林。同宽度优先搜索一样，深度优先搜索在构造时也利用了父节点引用。此外，深度优先搜索在Vertex类中还会使用额外两个实例变量，即发现时间和完成时间。发现时间记录某个顶点第1次出现前的步骤数，而完成时间记录该顶点被涂为黑色时的步骤数。观察算法可以发现，发现时间和完成时间能够提供一些有趣的性质可供后续的一些算法使用。\n\n深度优先搜索如代码5所示。因为两个函数dfs和其辅助函数dfsvisit使用了1个变量来记录在调用dfsvisit时的时间，从而将这部分代码实现为Graph子类的一个方法。这里给出的实现通过增加了1个time实例变量以及dfs、dfsvisit方法将Graph类进行了扩张。仔细研究行11，可以发现dfs方法对图中所有的顶点进行了遍历，并对白色节点调用dfsvisit方法。之所以对所有顶点进行迭代而不从给定起点开始搜索，是为了保证图中所有节点都被考虑了并且在DFS树中没有顶点被一楼。for aVvertex in self可能看起来有点奇怪，但实际上这里的self是DFSGraph的一个实例，对Graph实例中的所有顶点进行迭代是很常规的操作。\n\n**代码5**\n```Python\nfrom pythonds.graphs import Graph\nclass DFSGraph(Graph):\n    def __init__(self):\n        super().__init__()\n        self.time = 0\n\n    def dfs(self):\n        for aVertex in self:\n            aVertex.setColor('white')\n            aVertex.setPred(-1)\n        for aVertex in self:\n            if aVertex.getColor() == 'white':\n                self.dfsvisit(aVertex)\n\n    def dfsvisit(self,startVertex):\n        startVertex.setColor('gray')\n        self.time += 1\n        startVertex.setDiscovery(self.time)\n        for nextVertex in startVertex.getConnections():\n            if nextVertex.getColor() == 'white':\n                nextVertex.setPred(startVertex)\n                self.dfsvisit(nextVertex)\n        startVertex.setColor('black')\n        self.time += 1\n        startVertex.setFinish(self.time)\n```\n\n虽然这里给出的bfs实现只考虑了那些可以通过某条路径回到起点的节点，但是也可以生成表示图中各节点最短路径的BFS森林。这就作为练习了。在后续的2个算法中，可以看出记录DFS森林的重要性。\n\ndfsvisit方法从startVertex这一单节点出发，尽可能地探索所有邻接白色顶点。如果读者仔细地研究dfsvisit的代码并且将其于BFS对比，可以发现dfsvisit算法几乎等同于bfs，除了for循环中的最后1行，dfsvisit递归地调用其本身以向更深的层继续搜索，而bfs将该节点加入队列供以后搜索。有趣的是，bfs使用的是队列，而dfsvisit使用的是栈。当然读者并不能在代码中看到栈，实际上是通过递归调用dfsvisit而使用了栈。\n\n下面的1组图演示了用于小图的深度优先搜索算法的实际运行。在这些图中，虚线表示检查过的边，但边的另一端的节点已经被加入了深度优先树。在代码中，这是通过检查另一节点的颜色为非白色来实现的。\n\n搜索从图中的顶点A（图14）开始。由于在搜索开始时，所有的顶点都是白色的，算法首先访问了顶点A。访问节点的第一步是将该节点的颜色设置为灰色，表示该节点正在被搜索，并且把发现世界设置为1。由于顶点A有两个邻接顶点（B，D），每一个都需要被访问，因此就随意地按字母顺序进行访问了。\n\n接下来访问的是节点B（如图15），因此将其颜色设置为灰色，并将其发现时间设置为2。顶点B与（C，D）邻接，因此按照字母顺序访问节点C。\n\n访问顶点C（图16）后来到了树的一个分枝的末端。将节点涂成灰色，将其发现时间设置为3，并且算法也确定了C是没有邻接顶点的，这意味着已经完成了对节点C的搜索，将其涂成黑色，并且将完成时间设置为4。此时的状态如图17所示。\n\n由于顶点C是一个分枝的末端，现在回到顶点B，并继续搜索B的邻接顶点。除了C以外仅剩D了，因此现在访问D（图18），并且从顶点D继续搜索。通过顶点D便来到了顶点E（图19），顶点E有两个邻接顶点，B和F。正常情况下会按照字母顺序来访问邻接顶点，但是由于B已经被涂成灰色了，算法对其进行识别，确认不能访问B，因为这样一来该算法便陷入了无限循环了。因此，算法从顶点F继续（图20）。\n\n顶点F仅有1个邻接顶点C，但是C是黑色的，因此就不用进行搜索了：算法已经到达了另一分枝的末端。\n\n![../_images/gendfsa.png](http://interactivepython.org/courselib/static/pythonds/_images/gendfsa.png)\n\n![../_images/gendfsb.png](http://interactivepython.org/courselib/static/pythonds/_images/gendfsb.png)\n\n![../_images/gendfsc.png](http://interactivepython.org/courselib/static/pythonds/_images/gendfsc.png)\n\n![../_images/gendfsd.png](http://interactivepython.org/courselib/static/pythonds/_images/gendfsd.png)\n\n![../_images/gendfse.png](http://interactivepython.org/courselib/static/pythonds/_images/gendfse.png)\n\n![../_images/gendfsf.png](http://interactivepython.org/courselib/static/pythonds/_images/gendfsf.png)\n\n![../_images/gendfsg.png](http://interactivepython.org/courselib/static/pythonds/_images/gendfsg.png)\n\n![../_images/gendfsh.png](http://interactivepython.org/courselib/static/pythonds/_images/gendfsh.png)\n\n![../_images/gendfsi.png](http://interactivepython.org/courselib/static/pythonds/_images/gendfsi.png)\n\n![../_images/gendfsj.png](http://interactivepython.org/courselib/static/pythonds/_images/gendfsj.png)\n\n![../_images/gendfsk.png](http://interactivepython.org/courselib/static/pythonds/_images/gendfsk.png)\n\n![../_images/gendfsl.png](http://interactivepython.org/courselib/static/pythonds/_images/gendfsl.png)\n\n每个节点的发现和完成时间表示了**括号属性（parenthesis property）**，意味着某个节点在深度优先树中的所有子节点的发现时间都比其父节点晚，而结束时间比其父节点早。\n\n## 7.16 深度优先搜索分析 ##\n\n深度优先搜索一般运行时间分析如下。不考虑dfsvisit的具体情况，dfs中的循环都是O(V）的，因为它们都是遍历图中各顶点。在dfsvisit中，遍历当前顶点的邻接列表中的边。由于dfsvisit仅在顶点为白色时进行递归调用，该循环对图中的每条边最多执行1次，或者说O(E)。因此，DFS的总时间是O(V+E)的。\n\n## 7.17 拓扑排序 ##\n\n计算机科学家几乎可以把所有问题都转化为图问题，下面以1个复杂问题作演示，即制作煎蛋饼。配方很简单，1个鸡蛋，1杯面粉，1勺油以及$\\frac{3}{4}$杯牛奶。为了制作煎饼，必须要加热平底锅，将所有材料混合在一起，然后将混合物用勺子放入热好的锅中。当煎饼开始冒泡时，将其反转过来，煎至底部变为金黄色。在享用煎饼之前，也可以加一些果酱。图27将以上过程表示为图。\n\n![../_images/pancakes.png](http://interactivepython.org/courselib/static/pythonds/_images/pancakes.png)\n\n制作煎饼的难点在于确定第一步干啥。如图27所示，可以从加热锅开始，也可以从加入任意原料开始。为了确定制作煎饼的每一个步骤的准确顺序，可以使用图算法中的**拓扑排序（topological sort）**来求解。\n\n拓扑排序将有向无圈图转化为其顶点的线性排列，使得对于含有边(v,w)的图G的排列中，顶点v在顶点w之前。有向无圈图在很多应用程序中用来表示事件的优先级。制作煎饼就是一个例子，另一些例子还有软件工程规划，数据库请求优化优先级以及矩阵乘法等问题。\n\n\n拓扑排序是深度优先搜索的一种简单而强大的改进。拓扑排序算法如下：\n1. 对于某个图g调用dfs(g)。调用深度优先搜索的主要目的是为了计算每个顶点的完成时间。\n2. 按照完成时间以降序排列的方式将顶点存储于一个列表中。\n3. 返回拓扑排序的降序排列列表。\n\n图28是制作煎饼的图（图26）对应的深度优先树。\n\n![../_images/pancakesDFS.png](http://interactivepython.org/courselib/static/pythonds/_images/pancakesDFS.png)\n\n最后，将拓扑排序算法应用到图中的结果如图29所示。\n\n![../_images/pancakesTS.png](http://interactivepython.org/courselib/static/pythonds/_images/pancakesTS.png)\n\n \n\n\n\n",[[1528774415170,["Re@Re.local",[[1,21982,"\n"]],[21980,21980],[21981,21981]]],[1528774415506,["Re@Re.local",[[1,21983,"\n"]],[21981,21981],[21982,21982]]],[1528774484633,["Re@Re.local",[[1,21982,"## 7.18 qin"]],[21982,21982],[21993,21993]]],[1528774485269,["Re@Re.local",[[-1,21990,"qin"]],[21993,21993],[21990,21990]]],[1528774493330,["Re@Re.local",[[1,21990,"强连通组建"]],[21990,21990],[21995,21995]]],[1528774494181,["Re@Re.local",[[-1,21993,"组建"]],[21995,21995],[21993,21993]]],[1528774496522,["Re@Re.local",[[1,21993,"组件 ##"]],[21993,21993],[21998,21998]]],[1528774496727,["Re@Re.local",[[1,22000,"\n"]],[21998,21998],[21999,21999]]],[1528774496947,["Re@Re.local",[[1,22001,"\n"]],[21999,21999],[22000,22000]]],[1528774508214,["Re@Re.local",[[1,22000,"本章剩余内容将集中于一些"]],[22000,22000],[22012,22012]]],[1528774508506,["Re@Re.local",[[-1,22010,"一些"]],[22012,22012],[22010,22010]]],[1528774516486,["Re@Re.local",[[1,22010,"超大规模图。这些"]],[22010,22010],[22018,22018]]],[1528774516840,["Re@Re.local",[[-1,22016,"这些"]],[22018,22018],[22016,22016]]],[1528774528780,["Re@Re.local",[[1,22016,"用于学习"]],[22016,22016],[22020,22020]]],[1528774534098,["Re@Re.local",[[-1,22016,"用于学习"]],[22020,22020],[22016,22016]]],[1528774537917,["Re@Re.local",[[1,22016,"使用"]],[22016,22016],[22018,22018]]],[1528774542264,["Re@Re.local",[[1,22018,"基于"]],[22018,22018],[22020,22020]]],[1528774542718,["Re@Re.local",[[-1,22018,"基于"]],[22020,22020],[22018,22018]]],[1528774551941,["Re@Re.local",[[1,22018,"由主机"]],[22018,22018],[22021,22021]]],[1528774552188,["Re@Re.local",[[-1,22019,"主机"]],[22021,22021],[22019,22019]]],[1528774570204,["Re@Re.local",[[1,22019,"互联网上主机及网页间的连接组成"]],[22019,22019],[22034,22034]]],[1528774570896,["Re@Re.local",[[-1,22032,"组成"]],[22034,22034],[22032,22032]]],[1528774581030,["Re@Re.local",[[1,22032,"构成的图作为学习其它以"]],[22032,22032],[22043,22043]]],[1528774581500,["Re@Re.local",[[-1,22040,"其它以"]],[22043,22043],[22040,22040]]],[1528774586501,["Re@Re.local",[[1,22040,"另外一些图算法的菜鸟。"]],[22040,22040],[22051,22051]]],[1528774587515,["Re@Re.local",[[-1,22048,"菜鸟。"]],[22051,22051],[22048,22048]]],[1528774589524,["Re@Re.local",[[1,22048,"材料，。"]],[22048,22048],[22052,22052]]],[1528774590041,["Re@Re.local",[[-1,22050,"，。"]],[22052,22052],[22050,22050]]],[1528774590284,["Re@Re.local",[[1,22050,"。"]],[22050,22050],[22051,22051]]],[1528774593306,["Re@Re.local",[[-1,22015,"。"]],[22016,22016],[22015,22015]]],[1528774593958,["Re@Re.local",[[1,22015,"，"]],[22015,22015],[22016,22016]]],[1528774601646,["Re@Re.local",[[1,22051,"首先是网页。"]],[22051,22051],[22057,22057]]],[1528774602033,["Re@Re.local",[[1,22059,"\n"]],[22057,22057],[22058,22058]]],[1528774602280,["Re@Re.local",[[1,22060,"\n"]],[22058,22058],[22059,22059]]],[1528774653638,["Re@Re.local",[[1,22059,"搜索引擎比如Google和Bing都是基于互联网上的网页实际上构成了图"]],[22059,22059],[22094,22094]]],[1528774658136,["Re@Re.local",[[-1,22076,"都是基于"]],[22080,22080],[22076,22076]]],[1528774658853,["Re@Re.local",[[1,22076,"都"]],[22076,22076],[22077,22077]]],[1528774659949,["Re@Re.local",[[1,22079,"了"]],[22079,22079],[22080,22080]]],[1528774663809,["Re@Re.local",[[-1,22087,"实际上构成了图"]],[22094,22094],[22087,22087]]],[1528774668733,["Re@Re.local",[[1,22087,"实际上构成了一个图的特"]],[22087,22087],[22098,22098]]],[1528774670847,["Re@Re.local",[[-1,22093,"一个图的特"]],[22098,22098],[22093,22093]]],[1528774682021,["Re@Re.local",[[1,22093,"一个超大规模有向图的特点。"]],[22093,22093],[22106,22106]]],[1528774682749,["Re@Re.local",[[-1,22103,"特点。"]],[22106,22106],[22103,22103]]],[1528774683997,["Re@Re.local",[[1,22103,"性质。"]],[22103,22103],[22106,22106]]],[1528774685539,["Re@Re.local",[[-1,22103,"性质。"]],[22106,22106],[22103,22103]]],[1528774697502,["Re@Re.local",[[1,22103,"试试"]],[22103,22103],[22105,22105]]],[1528774698062,["Re@Re.local",[[-1,22102,"的试试"]],[22105,22105],[22102,22102]]],[1528774704808,["Re@Re.local",[[1,22080,"以下这一"]],[22080,22080],[22084,22084]]],[1528774705526,["Re@Re.local",[[-1,22080,"以下这一"]],[22084,22084],[22080,22080]]],[1528774707550,["Re@Re.local",[[1,22080,"这以事实"]],[22080,22080],[22084,22084]]],[1528774708032,["Re@Re.local",[[-1,22081,"以事实"]],[22084,22084],[22081,22081]]],[1528774711310,["Re@Re.local",[[1,22081,"一特点："]],[22081,22081],[22085,22085]]],[1528774718125,["Re@Re.local",[[1,22107,"。为了将"]],[22107,22107],[22111,22111]]],[1528774779426,[null,[[-1,22077,"互联"],[1,22079,"利用"],[1,22085,"互联"],[-1,22090,"实际"],[1,22111,"\n\n"]],[22077,22077],[22113,22113]]],[1528774779426,[null,[[1,22077,"互联"],[-1,22077,"利用"],[-1,22085,"互联"],[1,22092,"实际"],[-1,22111,"\n\n"]],[22113,22113],[22077,22077]]],[1528774722426,["Re@Re.local",[[1,22111,"万维网（w"]],[22111,22111],[22116,22116]]],[1528774722729,["Re@Re.local",[[-1,22115,"w"]],[22116,22116],[22115,22115]]],[1528774723471,["Re@Re.local",[[1,22115,"WOrl"]],[22115,22115],[22119,22119]]],[1528774724269,["Re@Re.local",[[-1,22116,"Orl"]],[22119,22119],[22116,22116]]],[1528774746307,["Re@Re.local",[[1,22116,"orld Wide Web）转化为图，可以将网页是做"]],[22116,22116],[22142,22142]]],[1528774746900,["Re@Re.local",[[-1,22140,"是做"]],[22142,22142],[22140,22140]]],[1528774758364,["Re@Re.local",[[1,22140,"当作顶点，而网页上的超链接"]],[22140,22140],[22153,22153]]],[1528774839254,[null,[[-1,22077,"互联"],[1,22079,"利用"],[1,22085,"互联"],[-1,22090,"实际"],[1,22153,"\n\n"]],[22077,22077],[22155,22155]]],[1528774839254,[null,[[1,22077,"互联"],[-1,22077,"利用"],[-1,22085,"互联"],[1,22092,"实际"],[-1,22153,"\n\n"]],[22155,22155],[22077,22077]]],[1528774829060,["Re@Re.local",[[1,22153,"则作为连接顶点的边。图30是从1个"]],[22153,22153],[22170,22170]]],[1528774830407,["Re@Re.local",[[-1,22167,"从1个"]],[22170,22170],[22167,22167]]],[1528774838721,["Re@Re.local",[[1,22167,"以Luther College’s Computer Science home page"]],[22167,22167],[22211,22211]]],[1528774899280,[null,[[-1,22077,"互联"],[1,22079,"利用"],[1,22085,"互联"],[-1,22090,"实际"],[1,22211,"\n\n"]],[22077,22077],[22213,22213]]],[1528774899280,[null,[[1,22077,"互联"],[-1,22077,"利用"],[-1,22085,"互联"],[1,22092,"实际"],[-1,22211,"\n\n"]],[22213,22213],[22077,22077]]],[1528774840959,["Re@Re.local",[[-1,22201," home pag"]],[22210,22210],[22201,22201]]],[1528774842715,["Re@Re.local",[[1,22201,"注意"]],[22201,22201],[22203,22203]]],[1528774843699,["Re@Re.local",[[-1,22201,"注意"]],[22203,22203],[22201,22201]]],[1528774889369,["Re@Re.local",[[1,22201,"主页为起点，沿着网页之间的连接生成的图的一小部分。当然，这个图完整版是很大的，因此这里仅"]],[22201,22201],[22245,22245]]],[1528774889483,["Re@Re.local",[[-1,22244,"仅"]],[22245,22245],[22244,22244]]],[1528774898853,["Re@Re.local",[[1,22244,"将"]],[22244,22244],[22245,22245]]],[1528774959286,[null,[[-1,22077,"互联"],[1,22079,"利用"],[1,22085,"互联"],[-1,22090,"实际"],[-1,22245,"e"],[1,22246,"\n\n"]],[22077,22077],[22248,22248]]],[1528774959287,[null,[[1,22077,"互联"],[-1,22077,"利用"],[-1,22085,"互联"],[1,22092,"实际"],[1,22245,"e"],[-1,22245,"\n\n"]],[22248,22248],[22077,22077]]],[1528774908155,["Re@Re.local",[[1,22245,"连接数限制为不超过10个。"]],[22245,22245],[22258,22258]]],[1528774908800,["Re@Re.local",[[1,22260,"\n"]],[22258,22258],[22259,22259]]],[1528774909042,["Re@Re.local",[[1,22261,"\n"]],[22259,22259],[22260,22260]]],[1528774913192,["Re@Re.local",[[1,22260,"![../_images/cshome.png](http://interactivepython.org/courselib/static/pythonds/_images/cshome.png)"]],[22260,22260],[22359,22359]]],[1528774913509,["Re@Re.local",[[1,22361,"\n"]],[22359,22359],[22360,22360]]],[1528774913723,["Re@Re.local",[[1,22362,"\n"]],[22360,22360],[22361,22361]]],[1528774917323,["Re@Re.local",[[1,22361,"如"]],[22361,22361],[22362,22362]]],[1528774917472,["Re@Re.local",[[-1,22361,"如"]],[22362,22362],[22361,22361]]],[1528774926734,["Re@Re.local",[[1,22361,"仔细研究图30中的图，读者可以会有"]],[22361,22361],[22378,22378]]],[1528774928305,["Re@Re.local",[[-1,22374,"可以会有"]],[22378,22378],[22374,22374]]],[1528774959045,["Re@Re.local",[[1,22374,"会发现一些有趣的东西。首先，图中的许多其它网页也是Lu"]],[22374,22374],[22401,22401]]],[1528775019555,[null,[[-1,22077,"互联"],[1,22079,"利用"],[1,22085,"互联"],[-1,22090,"实际"],[-1,22258,"e "],[1,22260,"\n\n"],[1,22403," "]],[22077,22077],[22404,22404]]],[1528775019555,[null,[[1,22077,"互联"],[-1,22077,"利用"],[-1,22085,"互联"],[1,22092,"实际"],[1,22258,"e "],[-1,22258,"\n\n"],[-1,22403," "]],[22404,22404],[22077,22077]]],[1528774984441,["Re@Re.local",[[1,22403,"er College的网页。第二，有好几个连接指向额"]],[22403,22403],[22429,22429]]],[1528774998849,["Re@Re.local",[[-1,22428,"额"]],[22429,22429],[22428,22428]]],[1528775004991,["Re@Re.local",[[1,22428,"了 Iowa"]],[22428,22428],[22434,22434]]],[1528775006640,["Re@Re.local",[[-1,22429," "]],[22430,22430],[22429,22429]]],[1528775018890,["Re@Re.local",[[1,22433,"的其它大学。第三，还有"]],[22433,22433],[22444,22444]]],[1528775079467,[null,[[-1,22077,"互联"],[1,22079,"利用"],[1,22085,"互联"],[-1,22090,"实际"],[-1,22258,"e "],[1,22260,"\n\n"],[-1,22401,"\n\n"],[1,22403,"th"],[1,22444,"\n\n "]],[22077,22077],[22447,22447]]],[1528775079467,[null,[[1,22077,"互联"],[-1,22077,"利用"],[-1,22085,"互联"],[1,22092,"实际"],[1,22258,"e "],[-1,22258,"\n\n"],[1,22401,"\n\n"],[-1,22401,"th"],[-1,22444,"\n\n "]],[22447,22447],[22077,22077]]],[1528775031115,["Re@Re.local",[[1,22444,"些连接指向了其它人文艺术学院。"]],[22444,22444],[22459,22459]]]]],["7541c87d-b2ef-4dda-8b37-e0290dcca933",1528782302010,"## 7.1 目标 ##\n\n- 学习图的概念和使用方式。\n- 以多种方式实现抽象数据类型Gragh。\n- 了解图在解决多种问题时的应用。\n\n本章研究图像。图像是比上一章学习的树更加通用的结构，实际上可以认为树是一种特殊的图像。图像也可以用来表示真实世界中的很多东西，比如公路系统，航线系统，网路系统甚至是完成计算机科学学位所必须的课程序列。本章读者会看到，一旦给某个问题以合适的表示，利用一些图像算法便可以轻松将看起来很困难的问题解决。\n\n对人类来说，看懂道路地图并理解不同地点之间的关系并不困难，但是计算机并没有这种能力。然而，可以将道路系统看作是1个图像，如此一来便可以让计算机做一些有趣的事情了。比如在互联网地图中，计算机可以找到从某个地方到另一个地方的最近、最快或者最简单的路线。\n\n作为计算机科学的学生，读者可能对获得学位所需要的课程比较感兴趣。图像可以很好地表达课程之间的依赖关系。图1便是1个例子。\n\n![../_images/CS-Prereqs.png](http://interactivepython.org/courselib/static/pythonds/_images/CS-Prereqs.png)\n\n## 7.2 术语和定义 ##\n\n\n**顶点（vertex）**\n顶点（也称为节点**node**）是图像的基础构件。它可以有名称，即键。顶点也可以有其它额外信息，即负载。\n**边（Edge）**\n边有时也被称为弧（arc），是图像的另一种基础构件。边将2个顶点连接起来以表示这2者之间存在某种关系。边可以是单向的也可以是双向的。当某个图像中的所有边都是单向的时候，便称该图像是**有向图（directed gragh/digrah）**。上示的课程依赖图显示是有向图，因为必须先完成某些课程后才能继续其它某些课程。\n**权重（weight）**\n为了表示从某个顶点到另一个顶点所需的代价，可以顶点进行**赋权（weighted）**。比如说公路图中某个城市连接到另一个城市，边上的权重可以表示为两个城市之间的距离。\n\n有了以上基本概念，便可以来对图像作一定义了。图像可以表示为G，其中G=(V,E)。对于图像G，V是顶点的集合，E是边的集合。每个边都是一个元组（v,w)，其中$w,v∈V$。可以向边元组中加入第3个元素来表示权重。子图s是顶点的集合v和边的集合e，使得$e⊂E且v⊂V$。\n\n图2给出了1个简单的赋权有向图作为例子。该图像可以用集合严格地表示：\n$$ V={V0,V1,V2,V3,V4,V5} $$\n$$ E= \\left \\{ (v0,v1,5),(v1,v2,4),(v2,v3,9),(v3,v4,7),(v4,v0,1),(v0,v5,2),(v5,v4,8),(v3,v5,3),(v5,v2,1) \\right \\} $$\n![../_images/digraph.png](http://interactivepython.org/courselib/static/pythonds/_images/digraph.png)\n\n图2中的例子演示了图像的另外2个关键术语。\n**路径（path）**\n路径是由边连接起来的顶点的序列。一般地，将路径定义为 $w_1,w_2,...,w_n$ 使得 $(w_i,w_{i+1})\\in E$ 对所有 $1≤i≤n−1$ 成立。无权路径长度是路径中边的个数，即n-1。权重路径长度是路径中边的权重之和。比如图2中，从V3到V1的路径是顶点序列 $(V3,V4,V0,V1)$ 而边为 ${(v3,v4,7),(v4,v0,1),(v0,v1,5)}{(v3,v4,7),(v4,v0,1),(v0,v1,5)}$。\n**环（cycle）**\n有向图中的环是首尾顶点相同的路径。比如说，图2中路径 $(V5,V2,V3,V5)(V5,V2,V3,V5)$ 就是1个环。没有环的图被称为**无环图（acyclic graph）**。没有环的有向图被称为**有向无环图（directed acyclic graph，DAG）**。接下来读者会看到，一些很重要的问题可以通过表示为DAG获得解决。\n\n## 7.3 抽象数据类型：Graph ##\n\n抽象数据类型Gragh被定义为：\n- Graph()生成一个新的空图。\n- addVertex(vert) 将Vertex的1个实例添加至图。\n- addEdge(fromVert,toVert) 向图添加1个连接2个顶点的有向边。\n- addEdge(fromVert,toVert,weight)向图添加1个连接2个顶点的赋权有向边。\n- getVertex(vertKey) 找到途中以vertKey命名的顶点。\n- getVertices() 返回途中所有顶点的列表。\n- in 对于vertex in graph这种形式的语句，若给定的vertex在途中，返回True，反之则False。\n\n有了图像的正式定义，在Python中可以用多种方式实现，下面来看看使用不同方式实现该ADT的优劣与差别。有两个著名的图的实现，即**邻接矩阵（adjacency matrix）**和**邻接表（adjacency list）**，本书将对这两种都进行解释，并对其中1中以Python类的方式实现。\n\n## 7.4 邻接矩阵（adjacency matrix）##\n\n\n实现图的最简单方式之一是使用二维矩阵。在二维矩阵中，每行每列的都代表了图中的1个顶点。如果顶点v到顶点w有边，行v和列w的交叉点单元格会存储值。若两个顶点由边连接，便称这两个顶点是**邻接**的。图3给出了图2的邻接矩阵。单元格中存储的值是v到w的权重。\n\n![../_images/adjMat.png](http://interactivepython.org/courselib/static/pythonds/_images/adjMat.png)\n\n邻接矩阵的优势是简便，并且对于小图来说，很容易看出哪些节点是相连的。然而，注意到矩阵中大多数单元格都是空。因为大多数单元格都是空的，因此称该矩阵是**稀疏（sparse）**的。矩阵并不能高效地存储这种稀疏数据。实际上，在Python中像图3这种矩阵结构都很麻烦。\n\n邻接矩阵对于边树较高的图来说是不错的实现。“较高”是什么意思？到底需要多少个边才能填满该矩阵？因此为每行、每列都对应个顶点，填满矩阵需要的顶点数是$|V|_2$。当每个顶点都与另外每一个顶点相连时，则该矩阵被填满了。实践中很少会遇到以这种方式连接的问题。本章研究的所有问题都是稀疏图。\n\n## 7.5 邻接表（adjacency list） ##\n\n邻接表可以用更少的空间实现稀疏图。在邻接表的实现中，维护一个包含图对象所有顶点的主列表，然后图对象中各个顶点对象都维护一个该对象连接的其它顶点对象的列表。在Vertex类的实现中，将使用字典而不是列表，其中字典的键为顶点，值为权重。图4给出了图2的邻接表实现示意图。\n![../_images/adjlist.png](http://interactivepython.org/courselib/static/pythonds/_images/adjlist.png)\n\n邻接表的有时在于它可以紧凑地表示稀疏图，利用稀疏图也可以轻松地找到某个顶点所有的连接情况。\n\n## 7.6 实现 ##\n\n使用字典可以很容易地在Python中实现邻接表。在本书的实现中会创建两个类（代码1、代码2），Graph保存顶点的祝列表，而Vertex即图中每个顶点。\n\n每个Vertex都使用字典来保存其连接的对象以及每条边的权重。该字典被命名为connectedTo。以下代码便是Vertex类的实现。构造器只是初始化了可以是字符串的id以及connectedTo字典。addNeighbor方法用来添加从该顶点到另一顶点的连接。getConnections方法返回当前节点connectedTo实例变量保存的邻接表中的所有顶点。getWeight方法返回从该节点到另一个作为参数传入的节点的边的权重。\n\n**代码1**\n```Pythion\nclass Vertex:\n    def __init__(self,key):\n        self.id = key\n        self.connectedTo = {}\n\n    def addNeighbor(self,nbr,weight=0):\n        self.connectedTo[nbr] = weight\n\n    def __str__(self):\n        return str(self.id) + ' connectedTo: ' + str([x.id for x in self.connectedTo])\n\n    def getConnections(self):\n        return self.connectedTo.keys()\n\n    def getId(self):\n        return self.id\n\n    def getWeight(self,nbr):\n        return self.connectedTo[nbr]\n```\nGraph类，如下面的代码所示，保存了一个字典，将顶点名映射到顶点对象。在图4中，该字典对象表示为灰色阴影框。Graph类也听过了方法用于添加顶点和连接顶点。此外，实现了\\_\\_iter\\_\\_方法来使得可以在图中对所有顶点对象进行迭代。这两种方法可以用来实现按名称或者是对象本身来对图中顶点的迭代。\n\n**代码2**\n```Python\nclass Graph:\n    def __init__(self):\n        self.vertList = {}\n        self.numVertices = 0\n\n    def addVertex(self,key):\n        self.numVertices = self.numVertices + 1\n        newVertex = Vertex(key)\n        self.vertList[key] = newVertex\n        return newVertex\n\n    def getVertex(self,n):\n        if n in self.vertList:\n            return self.vertList[n]\n        else:\n            return None\n\n    def __contains__(self,n):\n        return n in self.vertList\n\n    def addEdge(self,f,t,cost=0):\n        if f not in self.vertList:\n            nv = self.addVertex(f)\n        if t not in self.vertList:\n            nv = self.addVertex(t)\n        self.vertList[f].addNeighbor(self.vertList[t], cost)\n\n    def getVertices(self):\n        return self.vertList.keys()\n\n    def __iter__(self):\n        return iter(self.vertList.values())\n```\n使用以上定义的Graph和Vertex类，以下代码边可以表示图2。首先生成6个节点编号0-5，查看顶点字典，注意到对0-5的键都创建了1个Vertex实例。然后，将连接了顶点的边集合到一起。最后，使用嵌套循环确定图中的每个边都正确存储了。读者应该将输出结果与图2作一对比。\n```Python\n>>> g = Graph()\n>>> for i in range(6):\n...    g.addVertex(i)\n>>> g.vertList\n{0: <adjGraph.Vertex instance at 0x41e18>,\n 1: <adjGraph.Vertex instance at 0x7f2b0>,\n 2: <adjGraph.Vertex instance at 0x7f288>,\n 3: <adjGraph.Vertex instance at 0x7f350>,\n 4: <adjGraph.Vertex instance at 0x7f328>,\n 5: <adjGraph.Vertex instance at 0x7f300>}\n>>> g.addEdge(0,1,5)\n>>> g.addEdge(0,5,2)\n>>> g.addEdge(1,2,4)\n>>> g.addEdge(2,3,9)\n>>> g.addEdge(3,4,7)\n>>> g.addEdge(3,5,3)\n>>> g.addEdge(4,0,1)\n>>> g.addEdge(5,4,8)\n>>> g.addEdge(5,2,1)\n>>> for v in g:\n...    for w in v.getConnections():\n...        print(\"( %s , %s )\" % (v.getId(), w.getId()))\n...\n( 0 , 5 )\n( 0 , 1 )\n( 1 , 2 )\n( 2 , 3 )\n( 3 , 4 )\n( 3 , 5 )\n( 4 , 0 )\n( 5 , 4 )\n( 5 , 2 )\n```\n## 词梯（word ladder）问题 ##\n\n以词梯问题开始图算法的研究。将单词\"FOOL\"转化为\"SAGE\"。按词梯问题的规则，1次只能修改1个字母，在每1步都必须将单词转换为另一个单词，不允许转换为非单词。词梯问题是由*爱丽丝梦游仙境*的作者lewis Carroll于1878年提出的。以下单词序列是刚才那个问题的一个可行解。\n```Python\nFOOL\nPOOL\nPOLL\nPOLE\nPALE\nSALE\nSAGE\n```\n词梯问题有许多变体。比如读者可能遇到要求在给定步数来完成转换的版本，或是必须用给点单词的版本。本节仅关注计算出完成转换所需要的最小修改次数。\n\n当然，因为本章内容是图，因此可以用图算法来将其解决。以下是纲要：\n- 将单词之间的关系重新表示为图。\n- 使用**广度优先搜索算法（breadth first search**来找到从起始单词到目标单词的最短路径。\n\n## 7.8 建立词梯图 ##\n\n首先要解决的问题是如何将单词列表转换为图。对于边来说，需要保证它们连接的是差且仅差了1个字母的单词。如果生成这种图，那么从一个单词出发的任意路径都是该词梯问题的解。图1给出了1个小的由单词构成的图，它可以用来解决FOOL到SAGE的词梯问题。注意，该图是无向图且无权重。\n\n![../_images/wordgraph.png](http://interactivepython.org/courselib/static/pythonds/_images/wordgraph.png)\n\n\n可以使用很多方法来生成这个图。首先假设有1组长度相同的单词，从起点出发，为列表中的每一个单词创建1个顶点。为了确定如何将这些单词连接起来，可以将列表中的每个单词与其它的单词一一进行比较，在比较时确定有多少个字母不同。如果两个字母仅相差1个字母，便可以在图中为它们两创建1条边。单词数较少时，这个方法还是可行的。但是假设有5110个单词的话（粗略估计一一进行对比需要$O(n^2)$的时间复杂度），需要进行2500万次对比。\n\n使用以下方法可以对其进行优化。假设有大量桶，每个桶外面都贴着1个4字母单词，但是字母中有1个被下划线替代。比如说，对于图2这种情况，可能会有个桶被贴上\"POP_\"。当在列表中对每个单词进行处理时，将该单词与每个桶进行对比，将\"\\_\"用作通配符，因此\"POPE\"和\"POPS\"都与\"POP\\_\"匹配。每当找到1个匹配的桶时，都将该单词放进去。当所有的单词都放在了正确的桶里时，可以确定同一桶里的单词是相连的。\n\n![../_images/wordbuckets.png](http://interactivepython.org/courselib/static/pythonds/_images/wordbuckets.png)\n\n在Python中，可以通过字典实现上述方案。桶的标签作为字典的键，键对应的值为单词列表。首先为各个单词在图中创建1个顶点。然后为处于字典同一键下的单词之间创建边，如代码1所示。\n```Python\nfrom pythonds.graphs import Graph\n\ndef buildGraph(wordFile):\n    d = {}\n    g = Graph()\n    wfile = open(wordFile,'r')\n    # create buckets of words that differ by one letter\n    for line in wfile:\n        word = line[:-1]\n        for i in range(len(word)):\n            bucket = word[:i] + '_' + word[i+1:]\n            if bucket in d:\n                d[bucket].append(word)\n            else:\n                d[bucket] = [word]\n    # add vertices and edges for words in the same bucket\n    for bucket in d.keys():\n        for word1 in d[bucket]:\n            for word2 in d[bucket]:\n                if word1 != word2:\n                    g.addEdge(word1,word2)\n    return g\n```\n这是第一个跟现实生活相关的图问题，读者可能会好奇该图的稀疏程度。对于该问题，准备的单词列表有5510个。若果使用邻接矩阵，矩阵将会有5110*5110个单元格，而使用buildGraph函数的图仅有53286条边，因此仅有0.20%的单元格被填充了，这实际上是一个很稀疏的矩阵了。\n\n## 7.9 实现宽度优先搜索（breadth first search） ##\n\n创建好了图，接下来便可以研究解决字梯问题的最优算法了。这里使用的算法被称为**宽度优先搜索（breadth first search,BFS）**。BFS是用于图搜索的最简单的算法之一。它也是之后将研究的其它几种重要的图算法的原型。\n\n给定图G以及起始顶点s，宽度优先算法将对图内的边进行搜索以找到G中所有与s有路径相连的顶点。宽度优先搜索的优势在于，在找到与s距离为k+1的所有顶点之前，它会先找出所有距离为k的顶点。BFS的运行过程可以想象为生成树的过程，每次都生成树的一层。BFS在对子孙顶点进行搜索前，先将初始顶点的子顶点加入进来。\n\n为了跟踪运行过程，BFS将顶点染成白色，灰色或黑色。所有的顶点都被初始为白色。白色顶点是未被探索的顶点。当某个顶点被初次探索时，将其染成灰色，当BFS完成对某个顶点的探索时，将其染成黑色。这意味着，对于黑色的顶点，它是没有白色节点与之邻接的。灰色节点，有可能会存在白色节点与之邻接，需要进一步探索。\n\n此外，BFS算法使用了Vertex类的改进版。这种新的顶点类新增了3种实例变量，即distance,predecessor以及颜色。每个实例变量都有正确的getter和setter方法。这里就不作展示了，因为只是加了3个实例变量而已。\n\nBFS从起始顶点s开始，将start染成灰色来表示当前正在对其进行搜索。对于起始顶点，另外两个值，distance和predecessor分别被初始化为0和None。最后，start被放入1个Queue中。下一步便是系统地对队列前部的顶点进行搜索。所谓搜索，即是对队列前部的某1个节点的邻接列表作迭代。每当对邻接列表中的节点作处理时，先对其颜色进行判断。如果是白色的，则该节点尚未搜索过，于是执行以下4步操作：\n1. 将新的，未搜索的顶点nbr染成灰色。\n2. 将nbr的predecessor设置为当前节点currentVert。\n3. 到nbr的距离设为currentVert + 1。\n4. 将nbr放入队尾。将nbr放在队尾使得该节点只有在currentVert的邻接列表中的所有其它顶点都被搜索过了才会继续被搜索。\n\n**代码2**\n```Python\nfrom pythonds.graphs import Graph, Vertex\nfrom pythonds.basic import Queue\n\ndef bfs(g,start):\n  start.setDistance(0)\n  start.setPred(None)\n  vertQueue = Queue()\n  vertQueue.enqueue(start)\n  while (vertQueue.size() > 0):\n    currentVert = vertQueue.dequeue()\n    for nbr in currentVert.getConnections():\n      if (nbr.getColor() == 'white'):\n        nbr.setColor('gray')\n        nbr.setDistance(currentVert.getDistance() + 1)\n        nbr.setPred(currentVert)\n        vertQueue.enqueue(nbr)\n    currentVert.setColor('black')\n```\n现在来仔细研究下bfs函数是如何对图1构件宽度优先树的。从FOOL出发，将所有与FOOL邻接的节点连接到该树上。临近节点包括POOL，FOIL，FOUL和COOL。每个节点都放入了待搜索待新节点。图3给出了该操作中的树及完成后的队列。\n![../_images/bfs1.png](http://interactivepython.org/courselib/static/pythonds/_images/bfs1.png)\n\n\n接下来，bfs从队首去掉了下一个节点(POOL)，并对其所有邻接节点重复该操作。然而，当bfs检查到节点COOL时，它发现COOL的颜色已经是灰色了。这意味着有更短的路径到达COOL，并且COOL已经留在队列中以待进一步搜索。在对POOL进行监测时唯一新加入队列的是POLL。新状态如图4所示。\n\n![../_images/bfs2.png](http://interactivepython.org/courselib/static/pythonds/_images/bfs2.png)\n\n队列中的下一个顶点是FOIL。FOIL可以加入树的节点是FAIL，当bfs方法继续处理队列时，接下来两个节点都没有向树或者队列加入新的节点。图5展示的是对树的第二层所有顶点都探索完成了后的树和队列。\n\n![../_images/bfs3.png](http://interactivepython.org/courselib/static/pythonds/_images/bfs3.png)\n![../_images/bfsDone.png](http://interactivepython.org/courselib/static/pythonds/_images/bfsDone.png)\n\n读者应该自己动手过一遍该算法，以对该算法获得更好的理解。图6是图3中已完成所有顶点的搜索后的最终宽度优先搜索树。宽度优先搜索的惊人之处在于，它不仅解决了初始的FOOL-SAGE问题，也顺便解决了许多其它问题。从宽度优先搜索树中的任一节点出发，沿着父节点的箭头返回到根节点，便可以得到该单词变为FOOL的最短词梯。代码3沿着父节点链打印出了词梯：\n**代码3**\n```Python\ndef traverse(y):\n    x = y\n    while (x.getPred()):\n        print(x.getId())\n        x = x.getPred()\n    print(x.getId())\n\ntraverse(g.getVertex('sage'))\n```\n## 7.10 宽度优先搜索分析 ##\n\n在继续研究其它图算法前，先来分析一下宽度优先搜索算法的运行性能。首先应当观察到的是，图|V|中的每个顶点在循环中最多被处理一次，因为在进行监测和加入队列前，该顶点必须是白色的。因此整个循环为O(V)。嵌套在while中的for循环对图中的每条边最多执行1次，|E|，因此每个顶点最多出队1次并且只在节点u出队时才检查节点u到节点v的边，该for循环为O(E)。因此两个循环的最终结果是O(V+E)。\n\n当然，执行BFS仅完成了该任务的一部分。从起始节点出发到达目标顶点是该任务的另一部分。最坏情况是，该图是单链的。在这种情况下，遍历所有节点需要O(V)。正常情况下应该是|V|的某个分数，但时间复杂度不会变，仍然是O(V)。\n\n最后，至少对这哥问题而言，生成初始的图也需要时间，其时间复杂度的分析就作为练习了。\n\n## 7.11 骑士周游问题 ##\n\n起始周游是可以用来演示第二种常见图算法的经典问题。骑士周游问题是在国际象棋棋盘上仅使用1个棋子，即起始，该问题的目标是找到1个出棋序列使得骑士可以访问各个方格恰好1次。这样的序列被称为周游。起始周游问题多年来吸引了很多棋手、数学家和计算机科学家等。在8*8的棋盘上，可行的序列数的上界为$1.305\\times 10^{35}$。然而，还有很多时候会走到死棋的情况。当然，还有很多时候会失败。显然这是一个需要些智慧和计算力的问题。\n\n学者已经提出了很多该问题的接发，图搜索是最最容易理解和编程的。同样地，分两步来求解：\n- 将骑士在棋盘上符合规则的移动以图表示。\n- 使用图算法来找到长度为$rows\\times columns-1$的路径，其中每个顶点都恰好只访问1次。\n\n## 7.12 生成骑士周游图 ##\n\n为了将骑士周游问题表示为图，使用以下两种思想：棋盘上的每个方格都被表示为图中的一个节点；骑士的每个合法的移动都被标记为图中的边。图1是骑士的1中合规走法，并给出了其对应的在图中的边。\n\n![../_images/knightmoves.png](http://interactivepython.org/courselib/static/pythonds/_images/knightmoves.png)\n\n为$n\\times n$的棋盘生成图，其Python代码如代码1所示。knightGraph函数对整个棋盘作1次遍历，在棋盘上的每1个方格，kinightGraph函数都调用1个辅助函数genLegalMoves，为棋盘上的该节点处的合法走法生成1个列表。图中的所有合法走法最后都被转换成了边。另一个辅助函数，posToNodeId将棋盘上的1个位置按照其行列转换为线性节点编号，如图1所示。\n\n**代码1**\n```Python\nfrom pythonds.graphs import Graph\n\ndef knightGraph(bdSize):\n    ktGraph = Graph()\n    for row in range(bdSize):\n       for col in range(bdSize):\n           nodeId = posToNodeId(row,col,bdSize)\n           newPositions = genLegalMoves(row,col,bdSize)\n           for e in newPositions:\n               nid = posToNodeId(e[0],e[1],bdSize)\n               ktGraph.addEdge(nodeId,nid)\n    return ktGraph\n\ndef posToNodeId(row, column, board_size):\n    return (row * board_size) + column\n```\n代码2中的genLeagalMove函数将以骑士的位置作为参数，并创建了可能的8个走法。legalCoord辅助函数用来保证创建的某个走法是在棋盘内的。该图中有336条边，并且可以发现，棋盘边缘的顶点的合规走法比棋盘内部的顶点少，此外该棋盘是稀疏的，填充率只有8.2%。\n\n![../_images/bigknight.png](http://interactivepython.org/courselib/static/pythonds/_images/bigknight.png)\n\n## 7.13 实现骑士周游 ##\n\n解决骑士周游问题将使用**深度优先搜索（depth first search）**。上一节讨论的宽度优先搜索算法是一次为搜索树建立一层，而深度优先算法则尽量向枝的深处搜索。本节介绍两种实现DFS的算法。第1个算法是专门用来解决骑士周游问题的，它显式地要求各节点最多被访问1次。第2种实现更加通用，但会允许在生成树时对其某个节点访问不止一次。在后续章节中，基于第2种算法开发了其它的算法。\n\n图的深度优先搜索很适合用来找到1条由63条边构成的路径。当深度搜索算法发现1条死路（图中的某个节点，使得接下来没有合法的移动了），它便会返回，并且朝着有合法移动的顶点的最深处移动。\n\n骑士周游函数接受4个参数：n，搜索树当前的深度；path，到该节点为止已访问过的顶点；u，待搜索节点；limit，路径中的节点数。knightTour函数是递归的。当knightTour函数被调用时，它首先检查约束条件。如果某条路径含有64个顶点，将True从knightTour返回，表示找到了一条可行的周游路径。若该路径长度不够，则继续向更深处搜索————选择1个新顶点以搜索并递归调用knightTour。\n\n\nDFS也使用颜色来记录图中哪些节点已经被访问，没有被访问过的顶点被涂为白色，访问过的是灰色。若某一顶点所有的邻接顶点都被搜索过了并且还没有达到64个顶点的长度的话，则说明当前是一条死路，此时必须要进行回溯，这里是通过从knightTour返回False来实现回溯的。在宽度优先搜索中使用队列来记录需要访问的节点。因为深度优先搜索是递归的，因此其实是隐式地使用了栈来进行回溯。当knightTour函数返回False的时候，程序仍处于while循环中，并在nbrList中寻找下一个顶点。\n\n**代码3**\nfrom pythonds.graphs import Graph, Vertex\ndef knightTour(n,path,u,limit):\n        u.setColor('gray')\n        path.append(u)\n        if n < limit:\n            nbrList = list(u.getConnections())\n            i = 0\n            done = False\n            while i < len(nbrList) and not done:\n                if nbrList[i].getColor() == 'white':\n                    done = knightTour(n+1, path, nbrList[i], limit)\n                i = i + 1\n            if not done:  # prepare to backtrack\n                path.pop()\n                u.setColor('white')\n        else:\n            done = True\n        return done\n下面来简单地试运行。读者可以参考下面的图例来观察该搜索的步骤。作为例子，假设getConnections方法返回的节点是按字母排序的。首先调用knightTour(0,path,A,6)。\n\n如图3所示，knightTour从节点A开始。A的邻接节点为B和D，由于B在D之前（字母排序），DFS选择B来对下一级进行搜索（图4）。通过递归调用knightTour实现对B的搜索。由于C、D是B的邻接节点，因此knightTour接下来选择C以继续搜索。然而，如图5所示，节点C是一条死路，因为它没有白色的邻接节点。此时，将节点C的颜色改为白色，knightTour返回False。实际上该递归函数的返回导致了回溯到节点B以继续搜索（如图6所示）。节点B中的下一个可探索节点是D，因此knightTour函数继续进行递归调用，直到再次遇到节点C（如图8、9、10）。然而，这次在节点C进行n<limit的测试结果是False，因此可以确认图中所有节点已经被遍历完。此时返回True表示已经找到1条实现周游的路径，返回该列表path，其值[A,B,D,E,F,C]，它即是实现对图中各节点访问恰好1次的顺序。\n\n![../_images/ktdfsa.png](http://interactivepython.org/courselib/static/pythonds/_images/ktdfsa.png)\n\n![../_images/ktdfsb.png](http://interactivepython.org/courselib/static/pythonds/_images/ktdfsb.png)\n\n![../_images/ktdfsc.png](http://interactivepython.org/courselib/static/pythonds/_images/ktdfsc.png)\n\n![../_images/ktdfsd.png](http://interactivepython.org/courselib/static/pythonds/_images/ktdfsd.png)\n\n![../_images/ktdfse.png](http://interactivepython.org/courselib/static/pythonds/_images/ktdfse.png)\n\n![../_images/ktdfsf.png](http://interactivepython.org/courselib/static/pythonds/_images/ktdfsf.png)\n\n![../_images/ktdfsg.png](http://interactivepython.org/courselib/static/pythonds/_images/ktdfsg.png)\n\n![../_images/ktdfsh.png](http://interactivepython.org/courselib/static/pythonds/_images/ktdfsh.png)\n\n图11是8*8棋盘中的周游例子。可以看出有多种可行的路径，并且其中有一些还是堆成的。改进一下的话，读者也可以获得起始与结束为同一个格子的循环路径。\n\n![../_images/completeTour.png](http://interactivepython.org/courselib/static/pythonds/_images/completeTour.png)\n\n## 7.14 骑士周游分析 ##\n\n关于骑士周游问题还有1个要点即性能需要讲解，然后再继续介绍深度搜索的通用版本。特别地，knightTour高度依赖于顶点搜索次序的方式。比如说，在5*5的棋盘上在还算比较快的电脑上于1.5秒内计算出1条路径，但对于8*8的棋盘来说又是怎样的？在这种情况下，取决于计算机的速度，有可能需要半小时才能计算出答案。原因是当前实现的骑士周游解法是时间复杂度为$O(k^N)$的算法，其中N是棋盘中方格数，而k是1个小常数。图12以图形的方式进行了阐释。树的根节点代表的是搜索树的起点，从起点出发，算法生成并检查每一个合法的移动。之前也说到过，合法移动数的个数依赖于骑士在棋盘上的位置。在角的时候，仅可能有2个合法的移动；在与角相邻的位置则可能有3个合法的移动；而在棋盘中间的话，可能会有8个。图13给出了棋盘上每个位置可能的合法移动。在树的下一层，同样又有2-8个可能的合法移动。需要检查的位置对应于搜索树中节点个数。\n\n\n![../_images/8arrayTree.png](http://interactivepython.org/courselib/static/pythonds/_images/8arrayTree.png)\n\n![../_images/moveCount.png](http://interactivepython.org/courselib/static/pythonds/_images/moveCount.png)\n\n读者已经知道，高度为N的二叉树的节点数为 $2^{N+1}-1$ 。子节点树可达8的树的节点数是远远大于二叉树的。由于每个节点的分枝因子是可变的，因此可以用通过平均分枝因子来估计节点数。值得注意的是，该算法是指数级的：$k^{N+1}-1$ ，其中k是棋盘的平均分枝因子。来看看它增长得有多块。对于5*5的棋盘，树会有25层深（或者说24，若将第1层记为0）。平均分枝因子是k=3.8，因此搜索树中的节点数为： $3.8^{25}-1$ 或 $3.12\\times 10^{14}$ 。对于6*6的，有 $1.5\\times 10^{23}$ 个节点，而对于普通的8*8棋盘，k=5.25，则有 $1.3\\times 10^46$ 。当然，对于同一个问题可能有多重解法，因此也不必搜索每个单节点，但是这也只能是对节点数取了个分数，事实上也并不会改变其指数级的性质。至于将k表示为棋盘大小的函数，就作为练习了。\n\n幸运的是，有种方法可以将8*8的情况控制在1秒内完成，如下面的代码4所示。其中orderbyAvail函数\n是在u.getConnections被调用时所使用的函数。行10是orderByAvail中最关键的1行。该行保证了选择的下一步顶点是可能的合法走法最少的那个。读者可能觉得这有些起反作用，为什么不选择可行走法最多的？读者大可以自己试试。\n\n在选择路径的下一个顶点时采用可能合法数最多的那个会导致的问题是，该机制下会倾向于在早期便访问棋盘的中间，这样一来，骑士很容易会困在棋盘的一侧而不能访问棋盘另一侧中未访问的方格。而如果采用合法数最少的那个，则强迫其实首先访问棋盘的边缘，这样一来，骑士一开始便访问了\"很难达到\"的角落，然后在有必要时利用中间的方格来达到棋盘的另一侧。利用这种知识来加速算法被称为\"启发式\"算法。人类日常中也是利用启发式规则来作出各种决定的，启发式搜索常常用于AI领域。本例使用的启发式算法被称为Warnsdorff算法。\n\n**代码4**\n```Python\ndef orderByAvail(n):\n    resList = []\n    for v in n.getConnections():\n        if v.getColor() == 'white':\n            c = 0\n            for w in v.getConnections():\n                if w.getColor() == 'white':\n                    c = c + 1\n            resList.append((c,v))\n    resList.sort(key=lambda x: x[0])\n    return [y[1] for y in resList]\n```\n## 7.15 通用深度搜索 ##\n\n骑士周游是DFS的1个特例，它的目标是生成深度最大且无分枝的树。更通用的深度优先搜索实际上还要简单一点。它的目标是尽可能深地对树进行搜索，连接图中尽可能多的顶点并且在必要时进行分枝。\n\n深度优先搜索甚至可能创建多棵树。当深度优先搜索算法生成了一组树时，便称之为深度优先森林。同宽度优先搜索一样，深度优先搜索在构造时也利用了父节点引用。此外，深度优先搜索在Vertex类中还会使用额外两个实例变量，即发现时间和完成时间。发现时间记录某个顶点第1次出现前的步骤数，而完成时间记录该顶点被涂为黑色时的步骤数。观察算法可以发现，发现时间和完成时间能够提供一些有趣的性质可供后续的一些算法使用。\n\n深度优先搜索如代码5所示。因为两个函数dfs和其辅助函数dfsvisit使用了1个变量来记录在调用dfsvisit时的时间，从而将这部分代码实现为Graph子类的一个方法。这里给出的实现通过增加了1个time实例变量以及dfs、dfsvisit方法将Graph类进行了扩张。仔细研究行11，可以发现dfs方法对图中所有的顶点进行了遍历，并对白色节点调用dfsvisit方法。之所以对所有顶点进行迭代而不从给定起点开始搜索，是为了保证图中所有节点都被考虑了并且在DFS树中没有顶点被一楼。for aVvertex in self可能看起来有点奇怪，但实际上这里的self是DFSGraph的一个实例，对Graph实例中的所有顶点进行迭代是很常规的操作。\n\n**代码5**\n```Python\nfrom pythonds.graphs import Graph\nclass DFSGraph(Graph):\n    def __init__(self):\n        super().__init__()\n        self.time = 0\n\n    def dfs(self):\n        for aVertex in self:\n            aVertex.setColor('white')\n            aVertex.setPred(-1)\n        for aVertex in self:\n            if aVertex.getColor() == 'white':\n                self.dfsvisit(aVertex)\n\n    def dfsvisit(self,startVertex):\n        startVertex.setColor('gray')\n        self.time += 1\n        startVertex.setDiscovery(self.time)\n        for nextVertex in startVertex.getConnections():\n            if nextVertex.getColor() == 'white':\n                nextVertex.setPred(startVertex)\n                self.dfsvisit(nextVertex)\n        startVertex.setColor('black')\n        self.time += 1\n        startVertex.setFinish(self.time)\n```\n\n虽然这里给出的bfs实现只考虑了那些可以通过某条路径回到起点的节点，但是也可以生成表示图中各节点最短路径的BFS森林。这就作为练习了。在后续的2个算法中，可以看出记录DFS森林的重要性。\n\ndfsvisit方法从startVertex这一单节点出发，尽可能地探索所有邻接白色顶点。如果读者仔细地研究dfsvisit的代码并且将其于BFS对比，可以发现dfsvisit算法几乎等同于bfs，除了for循环中的最后1行，dfsvisit递归地调用其本身以向更深的层继续搜索，而bfs将该节点加入队列供以后搜索。有趣的是，bfs使用的是队列，而dfsvisit使用的是栈。当然读者并不能在代码中看到栈，实际上是通过递归调用dfsvisit而使用了栈。\n\n下面的1组图演示了用于小图的深度优先搜索算法的实际运行。在这些图中，虚线表示检查过的边，但边的另一端的节点已经被加入了深度优先树。在代码中，这是通过检查另一节点的颜色为非白色来实现的。\n\n搜索从图中的顶点A（图14）开始。由于在搜索开始时，所有的顶点都是白色的，算法首先访问了顶点A。访问节点的第一步是将该节点的颜色设置为灰色，表示该节点正在被搜索，并且把发现世界设置为1。由于顶点A有两个邻接顶点（B，D），每一个都需要被访问，因此就随意地按字母顺序进行访问了。\n\n接下来访问的是节点B（如图15），因此将其颜色设置为灰色，并将其发现时间设置为2。顶点B与（C，D）邻接，因此按照字母顺序访问节点C。\n\n访问顶点C（图16）后来到了树的一个分枝的末端。将节点涂成灰色，将其发现时间设置为3，并且算法也确定了C是没有邻接顶点的，这意味着已经完成了对节点C的搜索，将其涂成黑色，并且将完成时间设置为4。此时的状态如图17所示。\n\n由于顶点C是一个分枝的末端，现在回到顶点B，并继续搜索B的邻接顶点。除了C以外仅剩D了，因此现在访问D（图18），并且从顶点D继续搜索。通过顶点D便来到了顶点E（图19），顶点E有两个邻接顶点，B和F。正常情况下会按照字母顺序来访问邻接顶点，但是由于B已经被涂成灰色了，算法对其进行识别，确认不能访问B，因为这样一来该算法便陷入了无限循环了。因此，算法从顶点F继续（图20）。\n\n顶点F仅有1个邻接顶点C，但是C是黑色的，因此就不用进行搜索了：算法已经到达了另一分枝的末端。\n\n![../_images/gendfsa.png](http://interactivepython.org/courselib/static/pythonds/_images/gendfsa.png)\n\n![../_images/gendfsb.png](http://interactivepython.org/courselib/static/pythonds/_images/gendfsb.png)\n\n![../_images/gendfsc.png](http://interactivepython.org/courselib/static/pythonds/_images/gendfsc.png)\n\n![../_images/gendfsd.png](http://interactivepython.org/courselib/static/pythonds/_images/gendfsd.png)\n\n![../_images/gendfse.png](http://interactivepython.org/courselib/static/pythonds/_images/gendfse.png)\n\n![../_images/gendfsf.png](http://interactivepython.org/courselib/static/pythonds/_images/gendfsf.png)\n\n![../_images/gendfsg.png](http://interactivepython.org/courselib/static/pythonds/_images/gendfsg.png)\n\n![../_images/gendfsh.png](http://interactivepython.org/courselib/static/pythonds/_images/gendfsh.png)\n\n![../_images/gendfsi.png](http://interactivepython.org/courselib/static/pythonds/_images/gendfsi.png)\n\n![../_images/gendfsj.png](http://interactivepython.org/courselib/static/pythonds/_images/gendfsj.png)\n\n![../_images/gendfsk.png](http://interactivepython.org/courselib/static/pythonds/_images/gendfsk.png)\n\n![../_images/gendfsl.png](http://interactivepython.org/courselib/static/pythonds/_images/gendfsl.png)\n\n每个节点的发现和完成时间表示了**括号属性（parenthesis property）**，意味着某个节点在深度优先树中的所有子节点的发现时间都比其父节点晚，而结束时间比其父节点早。\n\n## 7.16 深度优先搜索分析 ##\n\n深度优先搜索一般运行时间分析如下。不考虑dfsvisit的具体情况，dfs中的循环都是O(V）的，因为它们都是遍历图中各顶点。在dfsvisit中，遍历当前顶点的邻接列表中的边。由于dfsvisit仅在顶点为白色时进行递归调用，该循环对图中的每条边最多执行1次，或者说O(E)。因此，DFS的总时间是O(V+E)的。\n\n## 7.17 拓扑排序 ##\n\n计算机科学家几乎可以把所有问题都转化为图问题，下面以1个复杂问题作演示，即制作煎蛋饼。配方很简单，1个鸡蛋，1杯面粉，1勺油以及$\\frac{3}{4}$杯牛奶。为了制作煎饼，必须要加热平底锅，将所有材料混合在一起，然后将混合物用勺子放入热好的锅中。当煎饼开始冒泡时，将其反转过来，煎至底部变为金黄色。在享用煎饼之前，也可以加一些果酱。图27将以上过程表示为图。\n\n![../_images/pancakes.png](http://interactivepython.org/courselib/static/pythonds/_images/pancakes.png)\n\n制作煎饼的难点在于确定第一步干啥。如图27所示，可以从加热锅开始，也可以从加入任意原料开始。为了确定制作煎饼的每一个步骤的准确顺序，可以使用图算法中的**拓扑排序（topological sort）**来求解。\n\n拓扑排序将有向无圈图转化为其顶点的线性排列，使得对于含有边(v,w)的图G的排列中，顶点v在顶点w之前。有向无圈图在很多应用程序中用来表示事件的优先级。制作煎饼就是一个例子，另一些例子还有软件工程规划，数据库请求优化优先级以及矩阵乘法等问题。\n\n\n拓扑排序是深度优先搜索的一种简单而强大的改进。拓扑排序算法如下：\n1. 对于某个图g调用dfs(g)。调用深度优先搜索的主要目的是为了计算每个顶点的完成时间。\n2. 按照完成时间以降序排列的方式将顶点存储于一个列表中。\n3. 返回拓扑排序的降序排列列表。\n\n图28是制作煎饼的图（图26）对应的深度优先树。\n\n![../_images/pancakesDFS.png](http://interactivepython.org/courselib/static/pythonds/_images/pancakesDFS.png)\n\n最后，将拓扑排序算法应用到图中的结果如图29所示。\n\n![../_images/pancakesTS.png](http://interactivepython.org/courselib/static/pythonds/_images/pancakesTS.png)\n\n## 7.18 强连通组件 ##\n\n本章剩余内容将集中于超大规模图，使用由互联网上主机及网页间的连接构成的图作为学习另外一些图算法的材料。首先是网页。\n\n搜索引擎比如Google和Bing都利用了这一特点：互联网上的网页实际上构成了一个超大规模有向图。为了将万维网（World Wide Web）转化为图，可以将网页当作顶点，而网页上的超链接则作为连接顶点的边。图30是以Luther College’s Computer Science主页为起点，沿着网页之间的连接生成的图的一小部分。当然，这个图完整版是很大的，因此这里将连接数限制为不超过10个。\n\n![../_images/cshome.png](http://interactivepython.org/courselib/static/pythonds/_images/cshome.png)\n\n仔细研究图30中的图，读者会发现一些有趣的东西。首先，图中的许多其它网页也是Luther College的网页。第二，有好几个连接指向了Iowa的其它大学。第三，还有些连接指向了其它人文艺术学院。\n\n \n\n\n\n",[[1528782265081,["Re@Re.local",[[1,22459,"ju"]],[22459,22459],[22461,22461]]],[1528782265566,["Re@Re.local",[[-1,22459,"ju"]],[22461,22461],[22459,22459]]],[1528782290697,["Re@Re.local",[[1,22459,"据此可以猜测，或许存在某种第"]],[22459,22459],[22473,22473]]],[1528782290941,["Re@Re.local",[[-1,22472,"第"]],[22473,22473],[22472,22472]]],[1528782297696,["Re@Re.local",[[1,22472,"内在性质将"]],[22472,22472],[22477,22477]]],[1528782298154,["Re@Re.local",[[-1,22474,"性质将"]],[22477,22477],[22474,22474]]],[1528782299525,["Re@Re.local",[[1,22474,"结构"]],[22474,22474],[22476,22476]]],[1528782306274,["Re@Re.local",[[1,22468,"网络"]],[22468,22468],[22470,22470]]],[1528782317097,["Re@Re.local",[[-1,22468,"网络"]],[22470,22470],[22468,22468]]],[1528782318368,["Re@Re.local",[[1,22468,"网页"]],[22468,22468],[22470,22470]]],[1528782319358,["Re@Re.local",[[-1,22468,"网页"]],[22470,22470],[22468,22468]]],[1528782320972,["Re@Re.local",[[1,22468,"网站"]],[22468,22468],[22470,22470]]],[1528782323230,["Re@Re.local",[[-1,22468,"网站"]],[22470,22470],[22468,22468]]],[1528782326161,["Re@Re.local",[[1,22468,"网站"]],[22468,22468],[22470,22470]]],[1528782326925,["Re@Re.local",[[-1,22468,"网站"]],[22470,22470],[22468,22468]]],[1528782334574,["Re@Re.local",[[1,22476,"将"]],[22476,22476],[22477,22477]]],[1528782334779,["Re@Re.local",[[-1,22476,"将"]],[22477,22477],[22476,22476]]],[1528782336695,["Re@Re.local",[[1,22476,"可以"]],[22476,22476],[22478,22478]]],[1528782337612,["Re@Re.local",[[-1,22476,"可以"]],[22478,22478],[22476,22476]]],[1528782343279,["Re@Re.local",[[1,22468,"网页"]],[22468,22468],[22470,22470]]],[1528782351458,["Re@Re.local",[[1,22478,"使得可以依照"]],[22478,22478],[22484,22484]]],[1528782352325,["Re@Re.local",[[-1,22482,"依照"]],[22484,22484],[22482,22482]]],[1528782356182,["Re@Re.local",[[1,22482,"将相似"]],[22482,22482],[22485,22485]]],[1528782356624,["Re@Re.local",[[-1,22483,"相似"]],[22485,22485],[22483,22483]]],[1528782357902,["Re@Re.local",[[1,22483,"相似"]],[22483,22483],[22485,22485]]],[1528782359075,["Re@Re.local",[[-1,22483,"相似"]],[22485,22485],[22483,22483]]],[1528782369674,["Re@Re.local",[[1,22483,"具有累死"]],[22483,22483],[22487,22487]]],[1528782370165,["Re@Re.local",[[-1,22485,"累死"]],[22487,22487],[22485,22485]]],[1528782373468,["Re@Re.local",[[1,22485,"类似结构的"]],[22485,22485],[22490,22490]]],[1528782374429,["Re@Re.local",[[-1,22487,"结构的"]],[22490,22490],[22487,22487]]],[1528782375776,["Re@Re.local",[[1,22487,"特点"]],[22487,22487],[22489,22489]]],[1528782376036,["Re@Re.local",[[-1,22487,"特点"]],[22489,22489],[22487,22487]]],[1528782386931,["Re@Re.local",[[1,22487,"结构的网页进行聚类。"]],[22487,22487],[22497,22497]]],[1528782389292,["Re@Re.local",[[1,22499,"\n"]],[22497,22497],[22498,22498]]],[1528782389558,["Re@Re.local",[[1,22500,"\n"]],[22498,22498],[22499,22499]]],[1528782401339,["Re@Re.local",[[1,22499,"有一"]],[22499,22499],[22501,22501]]],[1528782401425,["Re@Re.local",[[-1,22500,"一"]],[22501,22501],[22500,22500]]],[1528782409561,["Re@Re.local",[[1,22500,"1种算法可以用来寻找"]],[22500,22500],[22510,22510]]],[1528782409884,["Re@Re.local",[[-1,22508,"寻找"]],[22510,22510],[22508,22508]]],[1528782412798,["Re@Re.local",[[1,22508,"识别高"]],[22508,22508],[22511,22511]]],[1528782413291,["Re@Re.local",[[-1,22510,"高"]],[22511,22511],[22510,22510]]],[1528782420679,["Re@Re.local",[[1,22510,"强连通顶点中的"]],[22510,22510],[22517,22517]]],[1528782429292,["Re@Re.local",[[-1,22499,"有1种算法"]],[22504,22504],[22499,22499]]],[1528782433616,["Re@Re.local",[[1,22499,"强裂解"]],[22499,22499],[22502,22502]]],[1528782434632,["Re@Re.local",[[-1,22500,"裂解"]],[22502,22502],[22500,22500]]],[1528782440163,["Re@Re.local",[[1,22500,"连通组件算法**"]],[22500,22500],[22508,22508]]],[1528782443069,["Re@Re.local",[[1,22499,"**"]],[22499,22499],[22501,22501]]],[1528782446815,["Re@Re.local",[[1,22508,"（）"]],[22508,22508],[22510,22510]]],[1528782448240,["Re@Re.local",[[1,22509,"hi"]],[22509,22509],[22511,22511]]],[1528782448816,["Re@Re.local",[[-1,22509,"hi"]],[22511,22511],[22509,22509]]],[1528782455576,["Re@Re.local",[[1,22509,"strongly cnnected "]],[22509,22509],[22527,22527]]],[1528782457469,["Re@Re.local",[[-1,22518,"cnnected "]],[22527,22527],[22518,22518]]],[1528782462183,["Re@Re.local",[[1,22518,"connected component "]],[22518,22518],[22538,22538]]],[1528782462594,["Re@Re.local",[[-1,22537," "]],[22538,22538],[22537,22537]]],[1528782467407,["Re@Re.local",[[1,22537,"，SCC"]],[22537,22537],[22541,22541]]],[1528782482279,["Re@Re.local",[[1,22557,"聚类。"]],[22557,22557],[22560,22560]]],[1528782485682,["Re@Re.local",[[-1,22559,"。"]],[22560,22560],[22559,22559]]],[1528782486340,["Re@Re.local",[[1,22559,"。"]],[22559,22559],[22560,22560]]],[1528782486886,["Re@Re.local",[[-1,22559,"。"]],[22560,22560],[22559,22559]]],[1528782487169,["Re@Re.local",[[1,22559,"，"]],[22559,22559],[22560,22560]]],[1528782494695,["Re@Re.local",[[-1,22559,"，"]],[22560,22560],[22559,22559]]],[1528782495198,["Re@Re.local",[[1,22559,"。"]],[22559,22559],[22560,22560]]],[1528782498928,["Re@Re.local",[[1,22550,"图中"]],[22550,22550],[22552,22552]]],[1528782506142,["Re@Re.local",[[1,22562,"以下"]],[22562,22562],[22564,22564]]],[1528782507038,["Re@Re.local",[[-1,22562,"以下"]],[22564,22564],[22562,22562]]],[1528782508029,["Re@Re.local",[[1,22562,"正"]],[22562,22562],[22563,22563]]],[1528782508147,["Re@Re.local",[[-1,22562,"正"]],[22563,22563],[22562,22562]]],[1528782515970,["Re@Re.local",[[1,22562,"定义强连通组件为："]],[22562,22562],[22571,22571]]],[1528782518632,["Re@Re.local",[[1,22564,"**"]],[22564,22564],[22566,22566]]],[1528782520337,["Re@Re.local",[[1,22571,"**"]],[22571,22571],[22573,22573]]],[1528782530871,["Re@Re.local",[[-1,21993,"组件"]],[21995,21995],[21993,21993]]],[1528782532220,["Re@Re.local",[[1,21993,"分之"]],[21993,21993],[21995,21995]]],[1528782532717,["Re@Re.local",[[-1,21993,"分之"]],[21995,21995],[21993,21993]]],[1528782533969,["Re@Re.local",[[1,21993,"分枝"]],[21993,21993],[21995,21995]]],[1528782542344,["Re@Re.local",[[-1,22505,"件"],[1,22506,"f"]],[22505,22506],[22505,22506]]],[1528782542428,["Re@Re.local",[[1,22506,"e"]],[22505,22506],[22505,22507]]],[1528782542513,["Re@Re.local",[[1,22507,"n"]],[22505,22507],[22505,22508]]],[1528782542700,["Re@Re.local",[[1,22508," l"]],[22505,22508],[22505,22510]]],[1528782543676,["Re@Re.local",[[1,22507," z"]],[22505,22507],[22505,22509]]],[1528782543969,["Re@Re.local",[[-1,22507," z"]],[22505,22509],[22505,22507]]],[1528782544189,["Re@Re.local",[[1,22507,"n"]],[22505,22507],[22505,22508]]],[1528782544321,["Re@Re.local",[[1,22508," z"]],[22505,22508],[22505,22510]]],[1528782544480,["Re@Re.local",[[1,22510,"h"]],[22505,22510],[22505,22511]]],[1528782544565,["Re@Re.local",[[1,22511,"i"]],[22505,22511],[22505,22512]]],[1528782544974,["Re@Re.local",[[-1,22505,"fen zhi"],[1,22512,"分枝"]],[22505,22512],[22507,22507]]],[1528782579780,["Re@Re.local",[[-1,21993,"分枝"]],[21995,21995],[21993,21993]]],[1528782581139,["Re@Re.local",[[1,21993,"分量"]],[21993,21993],[21995,21995]]],[1528782584155,["Re@Re.local",[[-1,22504,"组分枝"]],[22507,22507],[22504,22504]]],[1528782585892,["Re@Re.local",[[1,22504,"分量"]],[22504,22504],[22506,22506]]],[1528782587255,["Re@Re.local",[[-1,22569,"组件"]],[22571,22571],[22569,22569]]],[1528782596423,["Re@Re.local",[[1,22569,"分量（"]],[22569,22569],[22572,22572]]],[1528782598829,["Re@Re.local",[[-1,22571,"（"]],[22572,22572],[22571,22571]]],[1528782663192,[null,[[-1,22506,"n l"],[1,22569,"强连通"],[-1,22571,"通组件"]],[22506,22506],[22571,22571]]],[1528782663192,[null,[[1,22506,"n l"],[-1,22566,"强连通"],[1,22571,"通组件"]],[22571,22571],[22506,22506]]],[1528782607316,["Re@Re.local",[[1,22573,"，记为C"]],[22573,22573],[22577,22577]]],[1528782608528,["Re@Re.local",[[-1,22573,"，记为C"]],[22577,22577],[22573,22573]]],[1528782614282,["Re@Re.local",[[1,22571,"（极为"]],[22571,22571],[22574,22574]]],[1528782615670,["Re@Re.local",[[-1,22571,"（极为"]],[22574,22574],[22571,22571]]],[1528782620192,["Re@Re.local",[[1,22571,"（记为C）"]],[22571,22571],[22576,22576]]],[1528782624733,["Re@Re.local",[[1,22564,"图G的"]],[22564,22564],[22567,22567]]],[1528782652360,["Re@Re.local",[[1,22583,"顶点的"]],[22583,22583],[22586,22586]]],[1528782652781,["Re@Re.local",[[-1,22585,"的"]],[22586,22586],[22585,22585]]],[1528782654913,["Re@Re.local",[[1,22585,"的"]],[22585,22585],[22586,22586]]],[1528782655613,["Re@Re.local",[[-1,22585,"的"]],[22586,22586],[22585,22585]]],[1528782656677,["Re@Re.local",[[1,22585,"的"]],[22585,22585],[22586,22586]]],[1528782658940,["Re@Re.local",[[-1,22583,"顶点的"]],[22586,22586],[22583,22583]]],[1528782724097,[null,[[-1,22506,"n l"],[1,22564,"。定义"],[-1,22567,"。定义"],[1,22572,"强连通"],[-1,22579,"通组件"]],[22506,22506],[22579,22579]]],[1528782724097,[null,[[1,22506,"n l"],[-1,22561,"。定义"],[1,22567,"。定义"],[-1,22569,"强连通"],[1,22579,"通组件"]],[22579,22579],[22506,22506]]],[1528782676438,["Re@Re.local",[[1,22583,"对于顶点集合V，其最大子集合"]],[22583,22583],[22597,22597]]],[1528782676578,["Re@Re.local",[[-1,22596,"合"]],[22597,22597],[22596,22596]]],[1528782784111,[null,[[-1,22506,"n l"],[1,22564,"。定义"],[-1,22567,"。定义"],[1,22572,"强连通"],[-1,22579,"通组件"],[1,22583,"*为："],[-1,22596,"*为："]],[22506,22506],[22596,22596]]],[1528782784111,[null,[[1,22506,"n l"],[-1,22561,"。定义"],[1,22567,"。定义"],[-1,22569,"强连通"],[1,22579,"通组件"],[-1,22580,"*为："],[1,22596,"*为："]],[22596,22596],[22506,22506]]],[1528782744990,["Re@Re.local",[[1,22596,"¥¥"]],[22596,22596],[22598,22598]]],[1528782745538,["Re@Re.local",[[-1,22596,"¥¥"]],[22598,22598],[22596,22596]]],[1528782746384,["Re@Re.local",[[1,22596,"$$"]],[22596,22596],[22598,22598]]],[1528782753445,["Re@Re.local",[[1,22597,"C\\subset V"]],[22597,22597],[22607,22607]]],[1528782763507,["Re@Re.local",[[1,22608,"是"]],[22608,22608],[22609,22609]]],[1528782844228,[null,[[-1,22506,"n l"],[-1,22564,"图G的"],[1,22570,"图G的"],[1,22572,"强连通"],[-1,22579,"通组件"],[1,22583,"*为："],[-1,22609,"*为："]],[22506,22506],[22609,22609]]],[1528782844228,[null,[[1,22506,"n l"],[1,22561,"图G的"],[-1,22564,"图G的"],[-1,22569,"强连通"],[1,22579,"通组件"],[-1,22580,"*为："],[1,22609,"*为："]],[22609,22609],[22506,22506]]],[1528782791085,["Re@Re.local",[[-1,22608,"是"]],[22609,22609],[22608,22608]]],[1528782792509,["Re@Re.local",[[-1,22591,"其"]],[22592,22592],[22591,22591]]],[1528782795692,["Re@Re.local",[[1,22591,"满足其"]],[22591,22591],[22594,22594]]],[1528782796383,["Re@Re.local",[[-1,22593,"其"]],[22594,22594],[22593,22593]]],[1528782836212,["Re@Re.local",[[1,22593,"其中任意一对顶点v,w都有v到w的路径以及w到w"]],[22593,22593],[22617,22617]]],[1528782837223,["Re@Re.local",[[-1,22616,"w"]],[22617,22617],[22616,22616]]],[1528782837917,["Re@Re.local",[[1,22616,"vd"]],[22616,22616],[22618,22618]]],[1528782838534,["Re@Re.local",[[-1,22617,"d"]],[22618,22618],[22617,22617]]],[1528782839870,["Re@Re.local",[[1,22617,"的存在"]],[22617,22617],[22620,22620]]],[1528782842533,["Re@Re.local",[[-1,22618,"存在"]],[22620,22620],[22618,22618]]],[1528782904174,[null,[[-1,22506,"n l"],[-1,22564,"图G的"],[1,22570,"图G的"],[1,22572,"强连通"],[-1,22579,"通组件"],[1,22583,"*为："],[-1,22634,"*为："]],[22506,22506],[22634,22634]]],[1528782904174,[null,[[1,22506,"n l"],[1,22561,"图G的"],[-1,22564,"图G的"],[-1,22569,"强连通"],[1,22579,"通组件"],[-1,22580,"*为："],[1,22634,"*为："]],[22634,22634],[22506,22506]]],[1528782848268,["Re@Re.local",[[1,22620,"存在，"]],[22620,22620],[22623,22623]]],[1528782865377,["Re@Re.local",[[-1,22622,"，"]],[22623,22623],[22622,22622]]],[1528782868824,["Re@Re.local",[[1,22622,"的V的"]],[22622,22622],[22625,22625]]],[1528782877023,["Re@Re.local",[[1,22623,"一个"]],[22623,22623],[22625,22625]]],[1528782880397,["Re@Re.local",[[-1,22627,"最大"]],[22629,22629],[22627,22627]]],[1528782882912,["Re@Re.local",[[-1,22623,"一个"]],[22625,22625],[22623,22623]]],[1528782884344,["Re@Re.local",[[1,22623,"最大的"]],[22623,22623],[22626,22626]]],[1528782887132,["Re@Re.local",[[1,22623,"一个"]],[22623,22623],[22625,22625]]],[1528782889444,["Re@Re.local",[[1,22644,"。"]],[22644,22644],[22645,22645]]],[1528782903398,["Re@Re.local",[[-1,22591,"满足"]],[22593,22593],[22591,22591]]],[1528782964227,[null,[[-1,22506,"n l"],[1,22564,"。定义"],[-1,22567,"。定义"],[1,22572,"强连通"],[-1,22579,"通组件*"],[1,22583,"**为："],[-1,22616,"最大"],[1,22618,"路径"],[1,22628,"子集"],[-1,22640,"*为"],[-1,22643,"："]],[22506,22506],[22643,22643]]],[1528782964228,[null,[[1,22506,"n l"],[-1,22561,"。定义"],[1,22567,"。定义"],[-1,22569,"强连通"],[1,22579,"通组件*"],[-1,22579,"**为："],[1,22616,"最大"],[-1,22616,"路径"],[-1,22628,"子集"],[1,22642,"*为"],[1,22643,"："]],[22643,22643],[22506,22506]]],[1528782907753,["Re@Re.local",[[1,22591,"某一"]],[22591,22591],[22593,22593]]],[1528782908399,["Re@Re.local",[[-1,22591,"某一"]],[22593,22593],[22591,22591]]],[1528782915272,["Re@Re.local",[[1,22592,"其某个子集中"]],[22591,22591],[22597,22597]]],[1528782915396,["Re@Re.local",[[-1,22596,"中"]],[22597,22597],[22596,22596]]],[1528782916738,["Re@Re.local",[[1,22596,"能满足"]],[22596,22596],[22599,22599]]],[1528782925077,["Re@Re.local",[[-1,22628,"的一个最大的V的子集$C\\subset V$"]],[22628,22650],[22628,22628]]],[1528782945643,["Re@Re.local",[[1,22628,"，且"]],[22628,22628],[22630,22630]]],[1528782958762,["Re@Re.local",[[-1,22629,"且"]],[22630,22630],[22629,22629]]],[1528783024217,[null,[[-1,22506,"n l"],[1,22564,"。定义"],[-1,22567,"。定义"],[1,22572,"强连通"],[-1,22579,"通组件*"],[1,22583,"**为："],[-1,22592,"其"],[1,22596,"集"],[-1,22599,"中"],[1,22600,"其"],[-1,22624,"最大"],[1,22626,"路径"],[-1,22630,"："]],[22506,22506],[22630,22630]]],[1528783024217,[null,[[1,22506,"n l"],[-1,22561,"。定义"],[1,22567,"。定义"],[-1,22569,"强连通"],[1,22579,"通组件*"],[-1,22579,"**为："],[1,22592,"其"],[-1,22595,"集"],[1,22599,"中"],[-1,22599,"其"],[1,22624,"最大"],[-1,22624,"路径"],[1,22630,"："]],[22630,22630],[22506,22506]]],[1528782968705,["Re@Re.local",[[-1,22592,"某个"]],[22594,22594],[22592,22592]]],[1528782970947,["Re@Re.local",[[1,22594,"中"]],[22594,22594],[22595,22595]]],[1528782973726,["Re@Re.local",[[-1,22590,"，其"]],[22592,22592],[22590,22590]]],[1528782974300,["Re@Re.local",[[1,22590,"的"]],[22590,22590],[22591,22591]]],[1528782976789,["Re@Re.local",[[1,22594,"，"]],[22594,22594],[22595,22595]]],[1528782979955,["Re@Re.local",[[-1,22599,"中"]],[22600,22600],[22599,22599]]],[1528782983616,["Re@Re.local",[[1,22599,"元素中"]],[22599,22599],[22602,22602]]],[1528783003371,["Re@Re.local",[[-1,22602,"任意一对顶点v,w都有v到w的路径以及w到v的路径存在，"]],[22602,22630],[22602,22602]]],[1528783007086,["Re@Re.local",[[1,22602,"任意两辆"]],[22602,22602],[22606,22606]]],[1528783008731,["Re@Re.local",[[-1,22599,"元素中任意两辆"]],[22606,22606],[22599,22599]]],[1528783013184,["Re@Re.local",[[1,22599,"元素的"]],[22599,22599],[22602,22602]]],[1528783013318,["Re@Re.local",[[-1,22601,"的"]],[22602,22602],[22601,22601]]],[1528783017354,["Re@Re.local",[[1,22601,"中任意两辆"]],[22601,22601],[22606,22606]]],[1528783017485,["Re@Re.local",[[-1,22605,"辆"]],[22606,22606],[22605,22605]]],[1528783022189,["Re@Re.local",[[1,22605,"两之间都存在路径"]],[22605,22605],[22613,22613]]],[1528783084206,[null,[[-1,22506,"n l"],[-1,22564,"图G的"],[1,22570,"图G的"],[1,22572,"强连通"],[-1,22579,"通组件*"],[1,22583,"**为："],[-1,22591,"个"],[1,22593,"集"],[-1,22598,"中"],[1,22599,"其"],[-1,22614,"："]],[22506,22506],[22614,22614]]],[1528783084206,[null,[[1,22506,"n l"],[1,22561,"图G的"],[-1,22564,"图G的"],[-1,22569,"强连通"],[1,22579,"通组件*"],[-1,22579,"**为："],[1,22591,"个"],[-1,22592,"集"],[1,22598,"中"],[-1,22598,"其"],[1,22614,"："]],[22614,22614],[22506,22506]]],[1528783049199,["Re@Re.local",[[1,22615,"且最大"]],[22615,22615],[22618,22618]]],[1528783049603,["Re@Re.local",[[-1,22616,"最大"]],[22618,22618],[22616,22616]]],[1528783057835,["Re@Re.local",[[1,22616,"元素个数最多的那个子集"]],[22616,22616],[22627,22627]]],[1528783066916,["Re@Re.local",[[-1,22615,"且"]],[22616,22616],[22615,22615]]],[1528783071438,["Re@Re.local",[[1,22615,"的子集中，"]],[22615,22615],[22620,22620]]],[1528783076918,["Re@Re.local",[[-1,22590,"的子集中"]],[22594,22594],[22590,22590]]],[1528783144185,[null,[[-1,22506,"n l"],[-1,22564,"图G的"],[1,22570,"图G的"],[1,22572,"强连通"],[-1,22579,"通组件*"],[1,22583,"**为："],[-1,22594,"中"],[1,22595,"其"],[-1,22609,"。："],[1,22611,"相通"],[1,22627,"。"]],[22506,22506],[22628,22628]]],[1528783144186,[null,[[1,22506,"n l"],[1,22561,"图G的"],[-1,22564,"图G的"],[-1,22569,"强连通"],[1,22579,"通组件*"],[-1,22579,"**为："],[1,22594,"中"],[-1,22594,"其"],[1,22609,"。："],[-1,22609,"相通"],[-1,22627,"。"]],[22628,22628],[22506,22506]]],[1528783087484,["Re@Re.local",[[-1,22585,"顶点集合V"]],[22585,22590],[22585,22585]]],[1528783090407,["Re@Re.local",[[1,22607,"顶点集合V"]],[22607,22607],[22612,22612]]],[1528783092885,["Re@Re.local",[[-1,22583,"对于，"]],[22586,22586],[22583,22583]]],[1528783096784,["Re@Re.local",[[1,22624,"顶点集合V"]],[22624,22624],[22629,22629]]],[1528783097708,["Re@Re.local",[[-1,22624,"顶点集合V"]],[22629,22629],[22624,22624]]],[1528783111119,["Re@Re.local",[[1,22625,"图27是一个简单的"]],[22625,22625],[22634,22634]]],[1528783112266,["Re@Re.local",[[-1,22631,"简单的"]],[22634,22634],[22631,22631]]],[1528783120085,["Re@Re.local",[[1,22631,"有3个强连通分量的"]],[22631,22631],[22640,22640]]],[1528783264217,[null,[[-1,22506,"n l"],[1,22564,"。定义"],[-1,22567,"。定义"],[1,22572,"强连通"],[-1,22579,"通组件*能满足中"],[1,22587,"**为：能满足其"],[-1,22601,"。："],[1,22603,"相通"],[-1,22624,"\n"],[1,22625,"。"],[1,22640,"\n"]],[22506,22506],[22641,22641]]],[1528783264218,[null,[[1,22506,"n l"],[-1,22561,"。定义"],[1,22567,"。定义"],[-1,22569,"强连通"],[1,22579,"通组件*能满足中"],[-1,22579,"**为：能满足其"],[1,22601,"。："],[-1,22601,"相通"],[1,22624,"\n"],[-1,22624,"。"],[-1,22640,"\n"]],[22641,22641],[22506,22506]]],[1528783221797,["Re@Re.local",[[-1,22583,"能满足其元素中任意两两之间都存在路径相通的顶点集合V子集中，元素个数最多的那个子集"]],[22583,22624],[22583,22583]]],[1528783227825,["Re@Re.local",[[1,22583,"能满足其元素中任意两两之间都存在路径相通的顶点集合V子集中，元素个数最多的那个子集"]],[22583,22583],[22583,22624]]],[1528783230091,["Re@Re.local",[[1,22583,"i"]],[22583,22624],[22583,22584]]],[1528783230223,["Re@Re.local",[[1,22584,"n"]],[22583,22584],[22583,22585]]],[1528783230668,["Re@Re.local",[[-1,22583,"ni"]],[22583,22585],[22583,22583]]],[1528783234170,["Re@Re.local",[[1,22583,"顶点集合V中"]],[22583,22583],[22589,22589]]],[1528783234377,["Re@Re.local",[[-1,22588,"中"]],[22589,22589],[22588,22588]]],[1528783236494,["Re@Re.local",[[1,22588,"的子集总，"]],[22588,22588],[22593,22593]]],[1528783237167,["Re@Re.local",[[-1,22591,"总，"]],[22593,22593],[22591,22591]]],[1528783241949,["Re@Re.local",[[1,22591,"中，能hide"]],[22591,22591],[22598,22598]]],[1528783242793,["Re@Re.local",[[-1,22594,"hide"]],[22598,22598],[22594,22594]]],[1528783243978,["Re@Re.local",[[1,22583,"的"],[1,22594,"shi"]],[22583,22583],[22584,22584]]],[1528783244223,["Re@Re.local",[[-1,22583,"的"]],[22584,22584],[22583,22583]]],[1528783246336,["Re@Re.local",[[-1,22594,"shi"]],[22597,22597],[22594,22594]]],[1528783254210,["Re@Re.local",[[1,22594,"使得今肯能"]],[22594,22594],[22599,22599]]],[1528783254675,["Re@Re.local",[[-1,22596,"今肯能"]],[22599,22599],[22596,22596]]],[1528783257511,["Re@Re.local",[[1,22596,"尽可能多"]],[22596,22596],[22600,22600]]],[1528783263827,["Re@Re.local",[[-1,22592,"，能使得尽可能多能满足其元素中任意两两之间都存在路径相通的顶点集合V子集中，元素个数最多的那个子集"]],[22600,22600],[22592,22592]]],[1528783324299,[null,[[-1,22506,"n l"],[1,22564,"。定义"],[-1,22567,"。定义"],[1,22572,"强连通"],[-1,22579,"通组件"],[1,22583,"*为："],[-1,22592,"\n"],[1,22593,"。"],[1,22608,"\n"]],[22506,22506],[22609,22609]]],[1528783324299,[null,[[1,22506,"n l"],[-1,22561,"。定义"],[1,22567,"。定义"],[-1,22569,"强连通"],[1,22579,"通组件"],[-1,22580,"*为："],[1,22592,"\n"],[-1,22592,"。"],[-1,22608,"\n"]],[22609,22609],[22506,22506]]],[1528783265896,["Re@Re.local",[[-1,22583,"顶点集合V的"]],[22589,22589],[22583,22583]]],[1528783273432,["Re@Re.local",[[1,22583,"将顶点集合划分为不重复的"]],[22583,22583],[22595,22595]]],[1528783274902,["Re@Re.local",[[-1,22592,"重复的"]],[22595,22595],[22592,22592]]],[1528783284292,["Re@Re.local",[[1,22592,"含重复的子"]],[22592,22592],[22597,22597]]],[1528783285923,["Re@Re.local",[[-1,22595,"的子"]],[22597,22597],[22595,22595]]],[1528783290299,["Re@Re.local",[[1,22595,"元素的子集"]],[22595,22595],[22600,22600]]],[1528783296822,["Re@Re.local",[[1,22583,"以某种划分方式"]],[22583,22583],[22590,22590]]],[1528783300661,["Re@Re.local",[[1,22607,"，且"]],[22607,22607],[22609,22609]]],[1528783301478,["Re@Re.local",[[-1,22608,"且"]],[22609,22609],[22608,22608]]],[1528783306124,["Re@Re.local",[[1,22608,"这些子集"]],[22608,22608],[22612,22612]]],[1528783384280,[null,[[-1,22506,"n l"],[1,22564,"。定义"],[-1,22567,"。定义"],[1,22572,"强连通"],[-1,22579,"通组件"],[1,22583,"*为："],[-1,22612,"子集中\n"],[1,22616,"。"],[1,22631,"\n"]],[22506,22506],[22632,22632]]],[1528783384281,[null,[[1,22506,"n l"],[-1,22561,"。定义"],[1,22567,"。定义"],[-1,22569,"强连通"],[1,22579,"通组件"],[-1,22580,"*为："],[1,22612,"子集中\n"],[-1,22612,"。"],[-1,22628,"\n"]],[22632,22632],[22506,22506]]],[1528783344847,["Re@Re.local",[[1,22605,"仅"]],[22605,22605],[22606,22606]]],[1528783344992,["Re@Re.local",[[-1,22605,"仅"]],[22606,22606],[22605,22605]]],[1528783348470,["Re@Re.local",[[1,22605,"尽可能"]],[22605,22605],[22608,22608]]],[1528783349344,["Re@Re.local",[[-1,22605,"尽可能"]],[22608,22608],[22605,22605]]],[1528783353641,["Re@Re.local",[[1,22608,"并且保证"]],[22608,22608],[22612,22612]]],[1528783361702,["Re@Re.local",[[1,22616,"的元素，"]],[22616,22616],[22620,22620]]],[1528783363685,["Re@Re.local",[[-1,22616,"的元素，"]],[22620,22620],[22616,22616]]],[1528783368648,["Re@Re.local",[[1,22616,"中的顶点任意两辆"]],[22616,22616],[22624,22624]]],[1528783368786,["Re@Re.local",[[-1,22623,"辆"]],[22624,22624],[22623,22623]]],[1528783373648,["Re@Re.local",[[1,22623,"两之间存在路径相通"]],[22623,22623],[22632,22632]]],[1528783383093,["Re@Re.local",[[1,22605,"、元素"]],[22605,22605],[22608,22608]]],[1528783444298,[null,[[-1,22506,"n l"],[1,22564,"。定义"],[-1,22567,"。定义"],[1,22572,"强连通"],[-1,22579,"通组件"],[1,22583,"*为："],[-1,22635,"子集中\n"],[1,22639,"。"],[1,22654,"\n"]],[22506,22506],[22655,22655]]],[1528783444298,[null,[[1,22506,"n l"],[-1,22561,"。定义"],[1,22567,"。定义"],[-1,22569,"强连通"],[1,22579,"通组件"],[-1,22580,"*为："],[1,22635,"子集中\n"],[-1,22635,"。"],[-1,22651,"\n"]],[22655,22655],[22506,22506]]],[1528783387619,["Re@Re.local",[[-1,22605,"、元素数"]],[22609,22609],[22605,22605]]],[1528783402997,["Re@Re.local",[[1,22605,"、仅"]],[22605,22605],[22607,22607]]],[1528783403067,["Re@Re.local",[[-1,22606,"仅"]],[22607,22607],[22606,22606]]],[1528783404854,["Re@Re.local",[[1,22606,"元素树"]],[22606,22606],[22609,22609]]],[1528783405101,["Re@Re.local",[[-1,22608,"树"]],[22609,22609],[22608,22608]]],[1528783408692,["Re@Re.local",[[1,22608,"数尽量多的"]],[22608,22608],[22613,22613]]],[1528783438740,["Re@Re.local",[[1,22656,"图。不同"]],[22656,22656],[22660,22660]]],[1528783439262,["Re@Re.local",[[-1,22657,"。不同"]],[22660,22660],[22657,22657]]],[1528783441128,["Re@Re.local",[[1,22657,"，不同的"]],[22657,22657],[22661,22661]]],[1528783504413,[null,[[-1,22506,"n l"],[1,22564,"。定义"],[-1,22567,"。定义"],[1,22572,"强连通"],[-1,22579,"通组件*"],[1,22583,"**为："],[1,22613,"子"],[-1,22639,"子集中\n"],[1,22643,"。"],[1,22656,"量的"],[-1,22661,"量的"],[1,22663,"\n"]],[22506,22506],[22664,22664]]],[1528783504414,[null,[[1,22506,"n l"],[-1,22561,"。定义"],[1,22567,"。定义"],[-1,22569,"强连通"],[1,22579,"通组件*"],[-1,22579,"**为："],[-1,22613,"子"],[1,22640,"子集中\n"],[-1,22640,"。"],[-1,22654,"量的"],[1,22661,"量的"],[-1,22661,"\n"]],[22664,22664],[22506,22506]]],[1528783449795,["Re@Re.local",[[1,22664,"分量通过不同的阴影"]],[22664,22664],[22673,22673]]],[1528783624250,[null,[[-1,22506,"n l"],[1,22564,"。定义"],[-1,22567,"。定义"],[1,22572,"强连通"],[-1,22579,"通组件*"],[1,22583,"**为："],[1,22613,"子"],[-1,22639,"子集中\n"],[1,22643,"。"],[1,22656,"量的"],[-1,22661,"量的\n"],[1,22664,"强连通"],[1,22673,"\n\n"]],[22506,22506],[22675,22675]]],[1528783624250,[null,[[1,22506,"n l"],[-1,22561,"。定义"],[1,22567,"。定义"],[-1,22569,"强连通"],[1,22579,"通组件*"],[-1,22579,"**为："],[-1,22613,"子"],[1,22640,"子集中\n"],[-1,22640,"。"],[-1,22654,"量的"],[1,22661,"量的\n"],[-1,22661,"强连通"],[-1,22673,"\n\n"]],[22675,22675],[22506,22506]]],[1528783569521,["Re@Re.local",[[1,22673,"qu"]],[22673,22673],[22675,22675]]],[1528783569992,["Re@Re.local",[[-1,22673,"qu"]],[22675,22675],[22673,22673]]],[1528783571011,["Re@Re.local",[[1,22673,"区"]],[22673,22673],[22674,22674]]],[1528783572312,["Re@Re.local",[[-1,22673,"区"]],[22674,22674],[22673,22673]]],[1528783577754,["Re@Re.local",[[1,22673,"区区分开来。"]],[22673,22673],[22679,22679]]],[1528783578148,["Re@Re.local",[[1,22681,"\n"]],[22679,22679],[22680,22680]]],[1528783578399,["Re@Re.local",[[1,22682,"\n"]],[22680,22680],[22681,22681]]],[1528783583976,["Re@Re.local",[[1,22681,"![../_images/scc1.png](http://interactivepython.org/courselib/static/pythonds/_images/scc1.png)"]],[22681,22681],[22776,22776]]],[1528783617549,["Re@Re.local",[[-1,22782,"\n"]],[22781,22781],[22780,22780]]],[1528783619380,["Re@Re.local",[[-1,22781,"\n"]],[22780,22780],[22779,22779]]],[1528783620173,["Re@Re.local",[[-1,22778," "]],[22779,22779],[22778,22778]]],[1528783620755,["Re@Re.local",[[-1,22779,"\n"]],[22778,22778],[22777,22777]]],[1528783621178,["Re@Re.local",[[1,22779,"\n"]],[22777,22777],[22778,22778]]],[1528783623647,["Re@Re.local",[[1,22778,"一旦强"]],[22778,22778],[22781,22781]]],[1528783623778,["Re@Re.local",[[-1,22780,"强"]],[22781,22781],[22780,22780]]],[1528783684475,[null,[[-1,22506,"n l"],[1,22564,"。定义"],[-1,22567,"。定义"],[1,22572,"强连通"],[-1,22579,"通组件*"],[1,22583,"**为："],[1,22613,"子"],[-1,22639,"子集中\n"],[1,22643,"。"],[1,22656,"量的"],[-1,22661,"量的\n"],[1,22664,"强连通"],[-1,22679," "],[1,22680,"\n"]],[22506,22506],[22681,22681]]],[1528783684475,[null,[[1,22506,"n l"],[-1,22561,"。定义"],[1,22567,"。定义"],[-1,22569,"强连通"],[1,22579,"通组件*"],[-1,22579,"**为："],[-1,22613,"子"],[1,22640,"子集中\n"],[-1,22640,"。"],[-1,22654,"量的"],[1,22661,"量的\n"],[-1,22661,"强连通"],[1,22679," "],[-1,22679,"\n"]],[22681,22681],[22506,22506]]],[1528783626667,["Re@Re.local",[[1,22778,"是"]],[22778,22778],[22779,22779]]],[1528783626815,["Re@Re.local",[[-1,22778,"是"]],[22779,22779],[22778,22778]]],[1528783644456,["Re@Re.local",[[1,22778,"识别了强连通分量，便可以"]],[22778,22778],[22790,22790]]],[1528783804288,[null,[[-1,22506,"n l"],[1,22564,"。定义"],[-1,22567,"。定义"],[1,22572,"强连通"],[-1,22579,"通组件*"],[1,22583,"**为："],[1,22613,"子"],[-1,22639,"子集中\n"],[1,22643,"。"],[1,22656,"量的"],[-1,22661,"量的\n"],[1,22664,"强连通"],[-1,22679," "],[1,22680,"\n"],[1,22778,""],[-1,22790,"一旦"]],[22506,22506],[22790,22790]]],[1528783804288,[null,[[1,22506,"n l"],[-1,22561,"。定义"],[1,22567,"。定义"],[-1,22569,"强连通"],[1,22579,"通组件*"],[-1,22579,"**为："],[-1,22613,"子"],[1,22640,"子集中\n"],[-1,22640,"。"],[-1,22654,"量的"],[1,22661,"量的\n"],[-1,22661,"强连通"],[1,22679," "],[-1,22679,"\n"],[-1,22778,""],[1,22790,"一旦"]],[22790,22790],[22506,22506]]],[1528783761117,["Re@Re.local",[[1,22790,"将强连通分量中的所遇哦"]],[22790,22790],[22801,22801]]],[1528783762325,["Re@Re.local",[[-1,22798,"所遇哦"]],[22801,22801],[22798,22798]]],[1528783792580,["Re@Re.local",[[1,22798,"所有顶点表示为单个大顶点来简化图。"]],[22798,22798],[22815,22815]]],[1528783795056,["Re@Re.local",[[-1,22811,"简化图。"]],[22815,22815],[22811,22811]]],[1528783803780,["Re@Re.local",[[1,22811,"对图进行简化。简化图如"]],[22811,22811],[22822,22822]]],[1528783864133,[null,[[-1,22506,"n l"],[1,22564,"。定义"],[-1,22567,"。定义"],[1,22572,"强连通"],[-1,22579,"通组件*"],[1,22583,"**为："],[1,22613,"子"],[-1,22639,"子集中\n"],[1,22643,"。"],[1,22656,"量的"],[-1,22661,"量的\n"],[1,22664,"强连通"],[-1,22679," "],[1,22680,"\n"],[1,22778,""],[-1,22822,"一旦"]],[22506,22506],[22822,22822]]],[1528783864133,[null,[[1,22506,"n l"],[-1,22561,"。定义"],[1,22567,"。定义"],[-1,22569,"强连通"],[1,22579,"通组件*"],[-1,22579,"**为："],[-1,22613,"子"],[1,22640,"子集中\n"],[-1,22640,"。"],[-1,22654,"量的"],[1,22661,"量的\n"],[-1,22661,"强连通"],[1,22679," "],[-1,22679,"\n"],[-1,22778,""],[1,22822,"一旦"]],[22822,22822],[22506,22506]]],[1528783806353,["Re@Re.local",[[-1,22818,"简化图如"]],[22822,22822],[22818,22818]]],[1528783806510,["Re@Re.local",[[1,22818,"3"]],[22818,22818],[22819,22819]]],[1528783806908,["Re@Re.local",[[-1,22818,"3"]],[22819,22819],[22818,22818]]],[1528783811498,["Re@Re.local",[[1,22818,"图31的简化如图32所示："]],[22818,22818],[22831,22831]]],[1528783811903,["Re@Re.local",[[-1,22830,"："]],[22831,22831],[22830,22830]]],[1528783812591,["Re@Re.local",[[1,22830,"。"]],[22830,22830],[22831,22831]]],[1528783813055,["Re@Re.local",[[1,22833,"\n"]],[22831,22831],[22832,22832]]],[1528783813267,["Re@Re.local",[[1,22834,"\n"]],[22832,22832],[22833,22833]]],[1528783816487,["Re@Re.local",[[1,22833,"![../_images/scc2.png](http://interactivepython.org/courselib/static/pythonds/_images/scc2.png)"]],[22833,22833],[22928,22928]]],[1528783816759,["Re@Re.local",[[1,22930,"\n"]],[22928,22928],[22929,22929]]],[1528783816961,["Re@Re.local",[[1,22931,"\n"]],[22929,22929],[22930,22930]]],[1528783925302,[null,[[-1,22506,"n l"],[1,22564,"。定义"],[-1,22567,"。定义"],[1,22572,"强连通"],[-1,22579,"通组件"],[1,22583,"*为："],[1,22613,"子"],[-1,22639,"子集中\n"],[1,22643,"。"],[1,22656,"量的"],[-1,22661,"量的\n"],[1,22664,"强连通"],[-1,22679," "],[1,22680,"\n"],[-1,22831,"一旦"],[1,22833,"\n\n"],[-1,22928,"\n\n"]],[22506,22506],[22928,22928]]],[1528783925302,[null,[[1,22506,"n l"],[-1,22561,"。定义"],[1,22567,"。定义"],[-1,22569,"强连通"],[1,22579,"通组件"],[-1,22580,"*为："],[-1,22613,"子"],[1,22640,"子集中\n"],[-1,22640,"。"],[-1,22654,"量的"],[1,22661,"量的\n"],[-1,22661,"强连通"],[1,22679," "],[-1,22679,"\n"],[1,22831,"一旦"],[-1,22831,"\n\n"],[1,22928,"\n\n"]],[22928,22928],[22506,22506]]],[1528783894184,["Re@Re.local",[[1,22930,"痛殴"]],[22930,22930],[22932,22932]]],[1528783894540,["Re@Re.local",[[-1,22930,"痛殴"]],[22932,22932],[22930,22930]]],[1528783899141,["Re@Re.local",[[1,22930,"可以看到，床"]],[22930,22930],[22936,22936]]],[1528783899239,["Re@Re.local",[[-1,22935,"床"]],[22936,22936],[22935,22935]]],[1528783900784,["Re@Re.local",[[1,22935,"这"]],[22935,22935],[22936,22936]]],[1528783900898,["Re@Re.local",[[-1,22935,"这"]],[22936,22936],[22935,22935]]],[1528783904189,["Re@Re.local",[[1,22935,"现在有了中很"]],[22935,22935],[22941,22941]]],[1528783904472,["Re@Re.local",[[-1,22939,"中很"]],[22941,22941],[22939,22939]]],[1528783915074,["Re@Re.local",[[1,22939,"强大而高效的算法"]],[22939,22939],[22947,22947]]],[1528783919012,["Re@Re.local",[[-1,22930,"可以看到，现在有了强大而高效的算法"]],[22947,22947],[22930,22930]]],[1528783985320,[null,[[-1,22506,"n l"],[1,22564,"。定义"],[-1,22567,"。定义"],[1,22572,"强连通"],[-1,22579,"通组件"],[1,22583,"*为："],[1,22613,"子"],[-1,22639,"子集中\n"],[1,22643,"。"],[1,22656,"量的"],[-1,22661,"量的\n"],[1,22664,"强连通"],[-1,22679," "],[1,22680,"\n"],[-1,22831,"一旦"],[1,22833,"\n\n"],[-1,22928,"\n\n"]],[22506,22506],[22928,22928]]],[1528783985321,[null,[[1,22506,"n l"],[-1,22561,"。定义"],[1,22567,"。定义"],[-1,22569,"强连通"],[1,22579,"通组件"],[-1,22580,"*为："],[-1,22613,"子"],[1,22640,"子集中\n"],[-1,22640,"。"],[-1,22654,"量的"],[1,22661,"量的\n"],[-1,22661,"强连通"],[1,22679," "],[-1,22679,"\n"],[1,22831,"一旦"],[-1,22831,"\n\n"],[1,22928,"\n\n"]],[22928,22928],[22506,22506]]],[1528783948684,["Re@Re.local",[[1,22930,"同样地，这里将再次使用强大而高效的深度搜索算法。在研究SCC"]],[22930,22930],[22960,22960]]],[1528783949389,["Re@Re.local",[[-1,22957,"SCC"]],[22960,22960],[22957,22957]]],[1528783950517,["Re@Re.local",[[1,22957,"蛀牙"]],[22957,22957],[22959,22959]]],[1528783950775,["Re@Re.local",[[-1,22957,"蛀牙"]],[22959,22959],[22957,22957]]],[1528783952716,["Re@Re.local",[[1,22957,"SCC的"]],[22957,22957],[22961,22961]]],[1528784045328,[null,[[-1,22506,"n l"],[1,22564,"。定义"],[-1,22567,"。定义"],[1,22572,"强连通"],[-1,22579,"通组件"],[1,22583,"*为："],[1,22613,"子"],[-1,22639,"子集中\n"],[1,22643,"。"],[1,22656,"量的"],[-1,22661,"量的\n"],[1,22664,"强连通"],[-1,22679," "],[1,22680,"\n"],[-1,22831,"一旦"],[1,22833,"\n\n"],[-1,22963,"\n\n"]],[22506,22506],[22963,22963]]],[1528784045328,[null,[[1,22506,"n l"],[-1,22561,"。定义"],[1,22567,"。定义"],[-1,22569,"强连通"],[1,22579,"通组件"],[-1,22580,"*为："],[-1,22613,"子"],[1,22640,"子集中\n"],[-1,22640,"。"],[-1,22654,"量的"],[1,22661,"量的\n"],[-1,22661,"强连通"],[1,22679," "],[-1,22679,"\n"],[1,22831,"一旦"],[-1,22831,"\n\n"],[1,22963,"\n\n"]],[22963,22963],[22506,22506]]],[1528784021578,["Re@Re.local",[[1,22961,"的"]],[22961,22961],[22962,22962]]],[1528784022168,["Re@Re.local",[[-1,22960,"的的"]],[22962,22962],[22960,22960]]],[1528784029576,["Re@Re.local",[[1,22960,"算法的主要内容前，先"]],[22960,22960],[22970,22970]]],[1528784029658,["Re@Re.local",[[-1,22969,"先"]],[22970,22970],[22969,22969]]],[1528784036229,["Re@Re.local",[[1,22969,"必须先研究以下林"]],[22969,22969],[22977,22977]]],[1528784036681,["Re@Re.local",[[-1,22974,"以下林"]],[22977,22977],[22974,22974]]],[1528784043693,["Re@Re.local",[[1,22974,"另一个概念。图的"]],[22974,22974],[22982,22982]]],[1528784044545,["Re@Re.local",[[-1,22981,"的"]],[22982,22982],[22981,22981]]],[1528784106423,[null,[[-1,22506,"n l"],[1,22564,"。定义"],[-1,22567,"。定义"],[1,22572,"强连通"],[-1,22579,"通组件"],[1,22583,"*为："],[1,22613,"子"],[-1,22639,"子集中\n"],[1,22643,"。"],[1,22656,"量的"],[-1,22661,"量的\n"],[1,22664,"强连通"],[-1,22679," "],[1,22680,"\n"],[-1,22831,"一旦"],[1,22833,"\n\n"],[-1,22983,"\n\n"]],[22506,22506],[22983,22983]]],[1528784106423,[null,[[1,22506,"n l"],[-1,22561,"。定义"],[1,22567,"。定义"],[-1,22569,"强连通"],[1,22579,"通组件"],[-1,22580,"*为："],[-1,22613,"子"],[1,22640,"子集中\n"],[-1,22640,"。"],[-1,22654,"量的"],[1,22661,"量的\n"],[-1,22661,"强连通"],[1,22679," "],[-1,22679,"\n"],[1,22831,"一旦"],[-1,22831,"\n\n"],[1,22983,"\n\n"]],[22983,22983],[22506,22506]]],[1528784088547,["Re@Re.local",[[1,22981,"G的zh"]],[22981,22981],[22985,22985]]],[1528784089037,["Re@Re.local",[[-1,22983,"zh"]],[22985,22985],[22983,22983]]],[1528784100089,["Re@Re.local",[[1,22983,"转置"]],[22983,22983],[22985,22985]]],[1528786565082,[null,[[-1,22506,"n l"],[1,22564,"。定义"],[-1,22567,"。定义"],[1,22572,"强连通"],[-1,22579,"通组件"],[1,22583,"*为："],[1,22613,"子"],[-1,22639,"子集中\n"],[1,22643,"。"],[1,22656,"量的"],[-1,22661,"量的\n"],[1,22664,"强连通"],[-1,22679," "],[1,22680,"\n"],[-1,22831,"一旦"],[1,22833,"\n\n"],[-1,22987,"\n\n"]],[22506,22506],[22987,22987]]],[1528786565083,[null,[[1,22506,"n l"],[-1,22561,"。定义"],[1,22567,"。定义"],[-1,22569,"强连通"],[1,22579,"通组件"],[-1,22580,"*为："],[-1,22613,"子"],[1,22640,"子集中\n"],[-1,22640,"。"],[-1,22654,"量的"],[1,22661,"量的\n"],[-1,22661,"强连通"],[1,22679," "],[-1,22679,"\n"],[1,22831,"一旦"],[-1,22831,"\n\n"],[1,22987,"\n\n"]],[22987,22987],[22506,22506]]],[1528786530879,["Re@Re.local",[[1,22985,"（"]],[22985,22985],[22986,22986]]],[1528786531907,["Re@Re.local",[[-1,22983,"转置（"]],[22986,22986],[22983,22983]]],[1528786536896,["Re@Re.local",[[1,22983,"**转置（）**"]],[22983,22983],[22991,22991]]],[1528786540507,["Re@Re.local",[[1,22988,"transposio"]],[22988,22988],[22998,22998]]],[1528786541554,["Re@Re.local",[[-1,22995,"sio"]],[22998,22998],[22995,22995]]],[1528786542687,["Re@Re.local",[[1,22995,"sition"]],[22995,22995],[23001,23001]]],[1528786547752,["Re@Re.local",[[1,23004,"是指："]],[23004,23004],[23007,23007]]],[1528786552207,["Re@Re.local",[[-1,23004,"是指："]],[23007,23007],[23004,23004]]],[1528786556845,["Re@Re.local",[[1,23004,"记为$$"]],[23004,23004],[23008,23008]]],[1528786559090,["Re@Re.local",[[1,23007,"G^T"]],[23007,23007],[23010,23010]]],[1528786625134,[null,[[-1,22506,"n l"],[1,22564,"。定义"],[-1,22567,"。定义"],[1,22572,"强连通"],[-1,22579,"通组件"],[1,22583,"*为："],[1,22613,"子"],[-1,22639,"子集中\n"],[1,22643,"。"],[1,22656,"量的"],[-1,22661,"量的\n"],[1,22664,"强连通"],[-1,22679," "],[1,22680,"\n"],[-1,22831,"一旦"],[1,22833,"\n\n"],[-1,23013,"\n\n"]],[22506,22506],[23013,23013]]],[1528786625134,[null,[[1,22506,"n l"],[-1,22561,"。定义"],[1,22567,"。定义"],[-1,22569,"强连通"],[1,22579,"通组件"],[-1,22580,"*为："],[-1,22613,"子"],[1,22640,"子集中\n"],[-1,22640,"。"],[-1,22654,"量的"],[1,22661,"量的\n"],[-1,22661,"强连通"],[1,22679," "],[-1,22679,"\n"],[1,22831,"一旦"],[-1,22831,"\n\n"],[1,23013,"\n\n"]],[23013,23013],[22506,22506]]],[1528786588202,["Re@Re.local",[[1,23011,"，是指边被专项的图"]],[23011,23011],[23020,23020]]],[1528786589223,["Re@Re.local",[[-1,23016,"专项的图"]],[23020,23020],[23016,23016]]],[1528786594429,["Re@Re.local",[[1,23016,"转向的图。"]],[23016,23016],[23021,23021]]],[1528786597140,["Re@Re.local",[[1,23014,"所有"]],[23014,23014],[23016,23016]]],[1528786600932,["Re@Re.local",[[1,23017,"低讴"]],[23017,23017],[23019,23019]]],[1528786601209,["Re@Re.local",[[-1,23017,"低讴"]],[23019,23019],[23017,23017]]],[1528786601810,["Re@Re.local",[[1,23017,"都"]],[23017,23017],[23018,23018]]],[1528786604209,["Re@Re.local",[[-1,23021,"的图。"]],[23024,23024],[23021,23021]]],[1528786605239,["Re@Re.local",[[1,23021,"黄埔的"]],[23021,23021],[23024,23024]]],[1528786605832,["Re@Re.local",[[-1,23021,"黄埔的"]],[23024,23024],[23021,23021]]],[1528786615482,["Re@Re.local",[[1,23021,"后形成的图。也就是说，若"]],[23021,23021],[23033,23033]]],[1528786616014,["Re@Re.local",[[-1,23032,"若"]],[23033,23033],[23032,23032]]],[1528786616773,["Re@Re.local",[[1,23032,"如果"]],[23032,23032],[23034,23034]]],[1528786617229,["Re@Re.local",[[-1,23032,"如果"]],[23034,23034],[23032,23032]]],[1528786621555,["Re@Re.local",[[1,23032,"若节点A da"]],[23032,23032],[23039,23039]]],[1528786622039,["Re@Re.local",[[-1,23036," da"]],[23039,23039],[23036,23036]]],[1528786624310,["Re@Re.local",[[1,23036,"到节点B"]],[23036,23036],[23040,23040]]],[1528786685159,[null,[[-1,22506,"n l"],[1,22564,"。定义"],[-1,22567,"。定义"],[1,22572,"强连通"],[-1,22579,"通组件"],[1,22583,"*为："],[1,22613,"子"],[-1,22639,"子集中\n"],[1,22643,"。"],[1,22656,"量的"],[-1,22661,"量的\n"],[1,22664,"强连通"],[-1,22679," "],[1,22680,"\n"],[-1,22831,"一旦"],[1,22833,"\n\n"],[-1,23042,"\n\n"]],[22506,22506],[23042,23042]]],[1528786685159,[null,[[1,22506,"n l"],[-1,22561,"。定义"],[1,22567,"。定义"],[-1,22569,"强连通"],[1,22579,"通组件"],[-1,22580,"*为："],[-1,22613,"子"],[1,22640,"子集中\n"],[-1,22640,"。"],[-1,22654,"量的"],[1,22661,"量的\n"],[-1,22661,"强连通"],[1,22679," "],[-1,22679,"\n"],[1,22831,"一旦"],[-1,22831,"\n\n"],[1,23042,"\n\n"]],[23042,23042],[22506,22506]]],[1528786626785,["Re@Re.local",[[1,23040,"有"]],[23040,23040],[23041,23041]]],[1528786627155,["Re@Re.local",[[-1,23040,"有"]],[23041,23041],[23040,23040]]],[1528786633566,["Re@Re.local",[[1,23040,"存在有向边，那么"]],[23040,23040],[23048,23048]]],[1528786633843,["Re@Re.local",[[-1,23046,"那么"]],[23048,23048],[23046,23046]]],[1528786639552,["Re@Re.local",[[1,23033,"原始图中"]],[23033,23033],[23037,23037]]],[1528786661040,["Re@Re.local",[[1,23050,"则该图的转置$G^T$会"]],[23050,23050],[23062,23062]]],[1528786661267,["Re@Re.local",[[-1,23061,"会"]],[23062,23062],[23061,23061]]],[1528786664220,["Re@Re.local",[[1,23061,"中的边"]],[23061,23061],[23064,23064]]],[1528786665994,["Re@Re.local",[[-1,23063,"边"]],[23064,23064],[23063,23063]]],[1528786667964,["Re@Re.local",[[1,23063,"有向彼岸"]],[23063,23063],[23067,23067]]],[1528786668355,["Re@Re.local",[[-1,23065,"彼岸"]],[23067,23067],[23065,23065]]],[1528786677422,["Re@Re.local",[[1,23065,"边是节点B到节点A"]],[23065,23065],[23074,23074]]],[1528786681330,["Re@Re.local",[[1,23062,"对应"]],[23062,23062],[23064,23064]]],[1528786684810,["Re@Re.local",[[1,23076,"。如"]],[23076,23076],[23078,23078]]],[1528786745150,[null,[[-1,22506,"n l"],[1,22564,"。定义"],[-1,22567,"。定义"],[1,22572,"强连通"],[-1,22579,"通组件"],[1,22583,"*为："],[1,22613,"子"],[-1,22639,"子集中\n"],[1,22643,"。"],[1,22656,"量的"],[-1,22661,"量的\n"],[1,22664,"强连通"],[-1,22679," "],[1,22680,"\n"],[-1,22831,"一旦"],[1,22833,"\n\n"],[-1,23080,"\n\n"]],[22506,22506],[23080,23080]]],[1528786745150,[null,[[1,22506,"n l"],[-1,22561,"。定义"],[1,22567,"。定义"],[-1,22569,"强连通"],[1,22579,"通组件"],[-1,22580,"*为："],[-1,22613,"子"],[1,22640,"子集中\n"],[-1,22640,"。"],[-1,22654,"量的"],[1,22661,"量的\n"],[-1,22661,"强连通"],[1,22679," "],[-1,22679,"\n"],[1,22831,"一旦"],[-1,22831,"\n\n"],[1,23080,"\n\n"]],[23080,23080],[22506,22506]]],[1528786688704,["Re@Re.local",[[1,23079,"33和图34所示。"]],[23079,23079],[23088,23088]]],[1528786688983,["Re@Re.local",[[1,23090,"\n"]],[23088,23088],[23089,23089]]],[1528786689166,["Re@Re.local",[[1,23091,"\n"]],[23089,23089],[23090,23090]]],[1528786693220,["Re@Re.local",[[1,23090,"![../_images/transpose1.png](http://interactivepython.org/courselib/static/pythonds/_images/transpose1.png)"]],[23090,23090],[23197,23197]]],[1528786693676,["Re@Re.local",[[1,23199,"\n"]],[23197,23197],[23198,23198]]],[1528786693872,["Re@Re.local",[[1,23200,"\n"]],[23198,23198],[23199,23199]]],[1528786697063,["Re@Re.local",[[1,23199,"![../_images/transpose2.png](http://interactivepython.org/courselib/static/pythonds/_images/transpose2.png)"]],[23199,23199],[23306,23306]]],[1528786697294,["Re@Re.local",[[1,23308,"\n"]],[23306,23306],[23307,23307]]],[1528786697496,["Re@Re.local",[[1,23309,"\n"]],[23307,23307],[23308,23308]]],[1528786710641,["Re@Re.local",[[1,23308,"再来看看这些图。注意图33中的"]],[23308,23308],[23323,23323]]],[1528786711743,["Re@Re.local",[[-1,23318,"图33中的"]],[23323,23323],[23318,23318]]],[1528786718297,["Re@Re.local",[[1,23318,"图33中的图有两个"]],[23318,23318],[23327,23327]]],[1528786719131,["Re@Re.local",[[-1,23325,"两个"]],[23327,23327],[23325,23325]]],[1528786732656,["Re@Re.local",[[1,23325,"2个强连通分量。而图34中，也有两个"]],[23325,23325],[23343,23343]]],[1528786733894,["Re@Re.local",[[-1,23341,"两个"]],[23343,23343],[23341,23341]]],[1528786738984,["Re@Re.local",[[1,23341,"2个强连通分量。"]],[23341,23341],[23349,23349]]],[1528786739270,["Re@Re.local",[[1,23351,"\n"]],[23349,23349],[23350,23350]]],[1528786739450,["Re@Re.local",[[1,23352,"\n"]],[23350,23350],[23351,23351]]],[1528786744304,["Re@Re.local",[[1,23351,"现在来设计"]],[23351,23351],[23356,23356]]],[1528786806181,[null,[[-1,22506,"n l"],[1,22564,"。定义"],[-1,22567,"。定义"],[1,22572,"强连通"],[-1,22579,"通组件"],[1,22583,"*为："],[1,22613,"子"],[-1,22639,"子集中\n"],[1,22643,"。"],[1,22656,"量的"],[-1,22661,"量的\n"],[1,22664,"强连通"],[-1,22679," "],[1,22680,"\n"],[-1,22831,"一旦"],[1,22833,"\n\n"],[-1,23078,"\n"],[1,23079,"图"],[-1,23356,"\n"],[1,23357,""]],[22506,22506],[23357,23357]]],[1528786806181,[null,[[1,22506,"n l"],[-1,22561,"。定义"],[1,22567,"。定义"],[-1,22569,"强连通"],[1,22579,"通组件"],[-1,22580,"*为："],[-1,22613,"子"],[1,22640,"子集中\n"],[-1,22640,"。"],[-1,22654,"量的"],[1,22661,"量的\n"],[-1,22661,"强连通"],[1,22679," "],[-1,22679,"\n"],[1,22831,"一旦"],[-1,22831,"\n\n"],[1,23078,"\n"],[-1,23078,"图"],[1,23356,"\n"],[-1,23356,""]],[23357,23357],[22506,22506]]],[1528786754779,["Re@Re.local",[[1,23356,"用来计算图中强连通分量的算法。"]],[23356,23356],[23371,23371]]],[1528786755204,["Re@Re.local",[[1,23373,"\n"]],[23371,23371],[23372,23372]]],[1528786755386,["Re@Re.local",[[1,23374,"\n"]],[23372,23372],[23373,23373]]],[1528786759159,["Re@Re.local",[[1,23373,"1. 调用dfs"]],[23373,23373],[23381,23381]]],[1528786760569,["Re@Re.local",[[-1,23376,"调用dfs"]],[23381,23381],[23376,23376]]],[1528786769111,["Re@Re.local",[[1,23376,"对图G调用dfs来计算每个节点的"]],[23376,23376],[23392,23392]]],[1528786770008,["Re@Re.local",[[-1,23389,"节点的"]],[23392,23392],[23389,23389]]],[1528786774103,["Re@Re.local",[[1,23389,"顶点的结束世界。"]],[23389,23389],[23397,23397]]],[1528786774497,["Re@Re.local",[[1,23399,"\n"]],[23397,23397],[23398,23398]]],[1528786775165,["Re@Re.local",[[-1,23399,"\n"]],[23398,23398],[23397,23397]]],[1528786775677,["Re@Re.local",[[-1,23394,"世界。"]],[23397,23397],[23394,23394]]],[1528786776771,["Re@Re.local",[[1,23394,"时间。"]],[23394,23394],[23397,23397]]],[1528786777032,["Re@Re.local",[[1,23399,"\n"]],[23397,23397],[23398,23398]]],[1528786786146,["Re@Re.local",[[1,23398,"2. 计算$G^T$。"]],[23398,23398],[23409,23409]]],[1528786786403,["Re@Re.local",[[1,23411,"\n"]],[23409,23409],[23410,23410]]],[1528786793118,["Re@Re.local",[[1,23410,"3. 为图$$"]],[23410,23410],[23417,23417]]],[1528786794842,["Re@Re.local",[[1,23416,"G^T"]],[23416,23416],[23419,23419]]],[1528786800113,["Re@Re.local",[[1,23420,"调用dfs，"]],[23420,23420],[23426,23426]]],[1528786866159,[null,[[-1,22506,"n l"],[1,22564,"。定义"],[-1,22567,"。定义"],[1,22572,"强连通"],[-1,22579,"通组件"],[1,22583,"*为："],[1,22613,"子"],[-1,22639,"子集中\n"],[1,22643,"。"],[1,22656,"量的"],[-1,22661,"量的\n"],[1,22664,"强连通"],[-1,22679," "],[1,22680,"\n"],[-1,22831,"一旦"],[1,22833,"\n\n"],[-1,23078,"\n"],[1,23079,"图"],[-1,23426,"\n"],[1,23427,""]],[22506,22506],[23427,23427]]],[1528786866159,[null,[[1,22506,"n l"],[-1,22561,"。定义"],[1,22567,"。定义"],[-1,22569,"强连通"],[1,22579,"通组件"],[-1,22580,"*为："],[-1,22613,"子"],[1,22640,"子集中\n"],[-1,22640,"。"],[-1,22654,"量的"],[1,22661,"量的\n"],[-1,22661,"强连通"],[1,22679," "],[-1,22679,"\n"],[1,22831,"一旦"],[-1,22831,"\n\n"],[1,23078,"\n"],[-1,23078,"图"],[1,23426,"\n"],[-1,23426,""]],[23427,23427],[22506,22506]]],[1528786831910,["Re@Re.local",[[1,23426,"但是"]],[23426,23426],[23428,23428]]],[1528786832360,["Re@Re.local",[[-1,23426,"但是"]],[23428,23428],[23426,23426]]],[1528786837454,["Re@Re.local",[[1,23426,"但"]],[23426,23426],[23427,23427]]],[1528786839008,["Re@Re.local",[[-1,23426,"但"]],[23427,23427],[23426,23426]]],[1528786862410,["Re@Re.local",[[1,23426,"但"]],[23426,23426],[23427,23427]]],[1528786862840,["Re@Re.local",[[-1,23426,"但"]],[23427,23427],[23426,23426]]],[1528786863804,["Re@Re.local",[[1,23426,"在"]],[23426,23426],[23427,23427]]],[1528786864076,["Re@Re.local",[[-1,23426,"在"]],[23427,23427],[23426,23426]]],[1528786865763,["Re@Re.local",[[1,23426,"但在"]],[23426,23426],[23428,23428]]],[1528786926156,[null,[[-1,22506,"n l"],[1,22564,"。定义"],[-1,22567,"。定义"],[1,22572,"强连通"],[-1,22579,"通组件"],[1,22583,"*为："],[1,22613,"子"],[-1,22639,"子集中\n"],[1,22643,"。"],[1,22656,"量的"],[-1,22661,"量的\n"],[1,22664,"强连通"],[-1,22679," "],[1,22680,"\n"],[-1,22831,"一旦"],[1,22833,"\n\n"],[-1,23078,"\n"],[1,23079,"图"],[-1,23428,"\n"],[1,23429,""]],[22506,22506],[23429,23429]]],[1528786926156,[null,[[1,22506,"n l"],[-1,22561,"。定义"],[1,22567,"。定义"],[-1,22569,"强连通"],[1,22579,"通组件"],[-1,22580,"*为："],[-1,22613,"子"],[1,22640,"子集中\n"],[-1,22640,"。"],[-1,22654,"量的"],[1,22661,"量的\n"],[-1,22661,"强连通"],[1,22679," "],[-1,22679,"\n"],[1,22831,"一旦"],[-1,22831,"\n\n"],[1,23078,"\n"],[-1,23078,"图"],[1,23428,"\n"],[-1,23428,""]],[23429,23429],[22506,22506]]],[1528786872718,["Re@Re.local",[[1,23428,"DFS的主循环中搜索"]],[23428,23428],[23438,23438]]],[1528786873084,["Re@Re.local",[[-1,23436,"搜索"]],[23438,23438],[23436,23436]]],[1528786887063,["Re@Re.local",[[1,23436,"按结束时间降序搜索每个顶点。"]],[23436,23436],[23450,23450]]],[1528786887518,["Re@Re.local",[[1,23452,"\n"]],[23450,23450],[23451,23451]]],[1528786896024,["Re@Re.local",[[1,23451,"4. 每棵书"]],[23451,23451],[23457,23457]]],[1528786896537,["Re@Re.local",[[-1,23454,"每棵书"]],[23457,23457],[23454,23454]]],[1528786900626,["Re@Re.local",[[1,23454,"森林中的每棵树"]],[23454,23454],[23461,23461]]],[1528786903523,["Re@Re.local",[[-1,23454,"森林中的每棵树"]],[23461,23461],[23454,23454]]],[1528786905523,["Re@Re.local",[[1,23454,"在图"]],[23454,23454],[23456,23456]]],[1528786905708,["Re@Re.local",[[-1,23455,"图"]],[23456,23456],[23455,23455]]],[1528786906116,["Re@Re.local",[[1,23455,"3"]],[23455,23455],[23456,23456]]],[1528786906389,["Re@Re.local",[[-1,23455,"3"]],[23456,23456],[23455,23455]]],[1528786908610,["Re@Re.local",[[1,23455,"滴"]],[23455,23455],[23456,23456]]],[1528786909305,["Re@Re.local",[[-1,23455,"滴"]],[23456,23456],[23455,23455]]],[1528786914598,["Re@Re.local",[[1,23455,"第3步中结算的每个"]],[23455,23455],[23464,23464]]],[1528786916170,["Re@Re.local",[[-1,23462,"每个"]],[23464,23464],[23462,23462]]],[1528786918288,["Re@Re.local",[[1,23462,"每棵树"]],[23462,23462],[23465,23465]]],[1528786921030,["Re@Re.local",[[-1,23460,"算的"]],[23462,23462],[23460,23460]]],[1528786922062,["Re@Re.local",[[1,23460,"计算"]],[23460,23460],[23462,23462]]],[1528786922706,["Re@Re.local",[[-1,23459,"结计算"]],[23462,23462],[23459,23459]]],[1528786925673,["Re@Re.local",[[1,23459,"计算的森林中的"]],[23459,23459],[23466,23466]]],[1528786986166,[null,[[-1,22506,"n l"],[1,22564,"。定义"],[-1,22567,"。定义"],[1,22572,"强连通"],[-1,22579,"通组件"],[1,22583,"*为："],[1,22613,"子"],[-1,22639,"子集中\n"],[1,22643,"。"],[1,22656,"量的"],[-1,22661,"量的\n"],[1,22664,"强连通"],[-1,22679," "],[1,22680,"\n"],[-1,22831,"一旦"],[1,22833,"\n\n"],[-1,23078,"\n"],[1,23079,"图"],[-1,23469,"\n"],[1,23470,""]],[22506,22506],[23470,23470]]],[1528786986166,[null,[[1,22506,"n l"],[-1,22561,"。定义"],[1,22567,"。定义"],[-1,22569,"强连通"],[1,22579,"通组件"],[-1,22580,"*为："],[-1,22613,"子"],[1,22640,"子集中\n"],[-1,22640,"。"],[-1,22654,"量的"],[1,22661,"量的\n"],[-1,22661,"强连通"],[1,22679," "],[-1,22679,"\n"],[1,22831,"一旦"],[-1,22831,"\n\n"],[1,23078,"\n"],[-1,23078,"图"],[1,23469,"\n"],[-1,23469,""]],[23470,23470],[22506,22506]]],[1528786949396,["Re@Re.local",[[1,23469,"都是1个强连通分量。为每个顶点输出id"]],[23469,23469],[23488,23488]]],[1528786958394,["Re@Re.local",[[-1,23479,"为每个顶点输出id"]],[23488,23488],[23479,23479]]],[1528786964679,["Re@Re.local",[[1,23479,"为"]],[23479,23479],[23480,23480]]],[1528786965132,["Re@Re.local",[[-1,23479,"为"]],[23480,23480],[23479,23479]]],[1528786984177,["Re@Re.local",[[1,23479,"为森林中的每棵树的每个顶点输出其顶点id，用来事变"]],[23479,23479],[23504,23504]]],[1528786984413,["Re@Re.local",[[-1,23502,"事变"]],[23504,23504],[23502,23502]]],[1528786985906,["Re@Re.local",[[1,23502,"识别"]],[23502,23502],[23504,23504]]],[1528787046160,[null,[[-1,22506,"n l"],[1,22564,"。定义"],[-1,22567,"。定义"],[1,22572,"强连通"],[-1,22579,"通组件"],[1,22583,"*为："],[1,22613,"子"],[-1,22639,"子集中\n"],[1,22643,"。"],[1,22656,"量的"],[-1,22661,"量的\n"],[1,22664,"强连通"],[-1,22679," "],[1,22680,"\n"],[-1,22831,"一旦"],[1,22833,"\n\n"],[-1,23078,"\n"],[1,23079,"图"],[-1,23504,"\n"],[1,23505,""]],[22506,22506],[23505,23505]]],[1528787046160,[null,[[1,22506,"n l"],[-1,22561,"。定义"],[1,22567,"。定义"],[-1,22569,"强连通"],[1,22579,"通组件"],[-1,22580,"*为："],[-1,22613,"子"],[1,22640,"子集中\n"],[-1,22640,"。"],[-1,22654,"量的"],[1,22661,"量的\n"],[-1,22661,"强连通"],[1,22679," "],[-1,22679,"\n"],[1,22831,"一旦"],[-1,22831,"\n\n"],[1,23078,"\n"],[-1,23078,"图"],[1,23504,"\n"],[-1,23504,""]],[23505,23505],[22506,22506]]],[1528786987840,["Re@Re.local",[[1,23504,"不同"]],[23504,23504],[23506,23506]]],[1528786988529,["Re@Re.local",[[-1,23502,"识别不同"]],[23506,23506],[23502,23502]]],[1528786989769,["Re@Re.local",[[1,23502,"分别"]],[23502,23502],[23504,23504]]],[1528786990754,["Re@Re.local",[[-1,23500,"用来分别"]],[23504,23504],[23500,23500]]],[1528786997556,["Re@Re.local",[[1,23500,"以示区分。"]],[23500,23500],[23505,23505]]],[1528786997969,["Re@Re.local",[[1,23507,"\n"]],[23505,23505],[23506,23506]]],[1528786998166,["Re@Re.local",[[1,23508,"\n"]],[23506,23506],[23507,23507]]],[1528787946187,[null,[[-1,22506,"n l"],[1,22564,"。定义"],[-1,22567,"。定义"],[1,22572,"强连通"],[-1,22579,"通组件"],[1,22583,"*为："],[1,22613,"子"],[-1,22639,"子集中\n"],[1,22643,"。"],[1,22656,"量的"],[-1,22661,"量的\n"],[1,22664,"强连通"],[-1,22679," "],[1,22680,"\n"],[-1,22831,"一旦"],[1,22833,"\n\n"],[-1,23078,"\n"],[1,23079,"图"],[-1,23505,"\n"],[1,23506,""]],[22506,22506],[23506,23506]]],[1528787946187,[null,[[1,22506,"n l"],[-1,22561,"。定义"],[1,22567,"。定义"],[-1,22569,"强连通"],[1,22579,"通组件"],[-1,22580,"*为："],[-1,22613,"子"],[1,22640,"子集中\n"],[-1,22640,"。"],[-1,22654,"量的"],[1,22661,"量的\n"],[-1,22661,"强连通"],[1,22679," "],[-1,22679,"\n"],[1,22831,"一旦"],[-1,22831,"\n\n"],[1,23078,"\n"],[-1,23078,"图"],[1,23505,"\n"],[-1,23505,""]],[23506,23506],[22506,22506]]],[1528787933419,["Re@Re.local",[[1,23509,"\n"]],[23506,23506],[23507,23507]]],[1528787938391,["Re@Re.local",[[1,23507,"羡慕"]],[23507,23507],[23509,23509]]],[1528787938835,["Re@Re.local",[[-1,23507,"羡慕"]],[23509,23509],[23507,23507]]],[1528787941009,["Re@Re.local",[[1,23507,"瞎 main"]],[23507,23507],[23513,23513]]],[1528787942811,["Re@Re.local",[[-1,23507,"瞎 main"]],[23513,23513],[23507,23507]]],[1528787945820,["Re@Re.local",[[1,23507,"对"]],[23507,23507],[23508,23508]]],[1528788006186,[null,[[-1,22506,"n l"],[1,22564,"。定义"],[-1,22567,"。定义"],[1,22572,"强连通"],[-1,22579,"通组件"],[1,22583,"*为："],[1,22613,"子"],[-1,22639,"子集中\n"],[1,22643,"。"],[1,22656,"量的"],[-1,22661,"量的\n"],[1,22664,"强连通"],[-1,22679," "],[1,22680,"\n"],[-1,22831,"一旦"],[1,22833,"\n\n"],[-1,23078,"\n"],[1,23079,"图"],[-1,23508,"\n"],[1,23509,""]],[22506,22506],[23509,23509]]],[1528788006186,[null,[[1,22506,"n l"],[-1,22561,"。定义"],[1,22567,"。定义"],[-1,22569,"强连通"],[1,22579,"通组件"],[-1,22580,"*为："],[-1,22613,"子"],[1,22640,"子集中\n"],[-1,22640,"。"],[-1,22654,"量的"],[1,22661,"量的\n"],[-1,22661,"强连通"],[1,22679," "],[-1,22679,"\n"],[1,22831,"一旦"],[-1,22831,"\n\n"],[1,23078,"\n"],[-1,23078,"图"],[1,23508,"\n"],[-1,23508,""]],[23509,23509],[22506,22506]]],[1528787951760,["Re@Re.local",[[1,23508,"上述步骤"]],[23508,23508],[23512,23512]]],[1528787952818,["Re@Re.local",[[-1,23507,"对上述步骤"]],[23512,23512],[23507,23507]]],[1528787957447,["Re@Re.local",[[1,23507,"以之前的例子为"]],[23507,23507],[23514,23514]]],[1528787959269,["Re@Re.local",[[-1,23511,"例子为"]],[23514,23514],[23511,23511]]],[1528787973360,["Re@Re.local",[[1,23511,"图为例，"]],[23511,23511],[23515,23515]]],[1528787974063,["Re@Re.local",[[-1,23514,"，"]],[23515,23515],[23514,23514]]],[1528787977069,["Re@Re.local",[[1,23514,"，以"]],[23514,23514],[23516,23516]]],[1528787977167,["Re@Re.local",[[-1,23515,"以"]],[23516,23516],[23515,23515]]],[1528787984556,["Re@Re.local",[[1,23515,"跟踪以上"]],[23515,23515],[23519,23519]]],[1528787984837,["Re@Re.local",[[-1,23517,"以上"]],[23519,23519],[23517,23517]]],[1528787992332,["Re@Re.local",[[1,23517,"上述步骤执行，"]],[23517,23517],[23524,23524]]],[1528787992821,["Re@Re.local",[[-1,23523,"，"]],[23524,23524],[23523,23523]]],[1528788004935,["Re@Re.local",[[1,23523,"结果如图31所示。图35是"]],[23523,23523],[23536,23536]]],[1528788066226,[null,[[-1,22506,"n l"],[1,22564,"。定义"],[-1,22567,"。定义"],[1,22572,"强连通"],[-1,22579,"通组件"],[1,22583,"*为："],[1,22613,"子"],[-1,22639,"子集中\n"],[1,22643,"。"],[1,22656,"量的"],[-1,22661,"量的\n"],[1,22664,"强连通"],[-1,22679," "],[1,22680,"\n"],[-1,22831,"一旦"],[1,22833,"\n\n"],[-1,23078,"\n"],[1,23079,"图"],[-1,23536,"\n"],[1,23537,""]],[22506,22506],[23537,23537]]],[1528788066226,[null,[[1,22506,"n l"],[-1,22561,"。定义"],[1,22567,"。定义"],[-1,22569,"强连通"],[1,22579,"通组件"],[-1,22580,"*为："],[-1,22613,"子"],[1,22640,"子集中\n"],[-1,22640,"。"],[-1,22654,"量的"],[1,22661,"量的\n"],[-1,22661,"强连通"],[1,22679," "],[-1,22679,"\n"],[1,22831,"一旦"],[-1,22831,"\n\n"],[1,23078,"\n"],[-1,23078,"图"],[1,23536,"\n"],[-1,23536,""]],[23537,23537],[22506,22506]]],[1528788013938,["Re@Re.local",[[1,23536,"通过DFS算法计算"]],[23536,23536],[23545,23545]]],[1528788019558,["Re@Re.local",[[-1,23541,"算法计算"]],[23545,23545],[23541,23541]]],[1528788034321,["Re@Re.local",[[1,23541,"算法计算的原图的发现和结束时间。图36"]],[23541,23541],[23560,23560]]],[1528788038731,["Re@Re.local",[[1,23512,"31"]],[23512,23512],[23514,23514]]],[1528788043830,["Re@Re.local",[[-1,23527,"如图31所示"]],[23527,23533],[23527,23527]]],[1528788050668,["Re@Re.local",[[1,23556,"是通过"]],[23556,23556],[23559,23559]]],[1528788054035,["Re@Re.local",[[-1,23557,"通过"]],[23559,23559],[23557,23557]]],[1528788056787,["Re@Re.local",[[1,23557,"转"]],[23557,23557],[23558,23558]]],[1528788057247,["Re@Re.local",[[-1,23557,"转"]],[23558,23558],[23557,23557]]],[1528788063646,["Re@Re.local",[[1,23557,"在转置图上运行DF是后"]],[23557,23557],[23568,23568]]],[1528788064237,["Re@Re.local",[[-1,23566,"是后"]],[23568,23568],[23566,23566]]],[1528788064918,["Re@Re.local",[[1,23566,"S"]],[23566,23566],[23567,23567]]],[1528788126187,[null,[[-1,22506,"n l"],[1,22564,"。定义"],[-1,22567,"。定义"],[1,22572,"强连通"],[-1,22579,"通组件"],[1,22583,"*为："],[1,22613,"子"],[-1,22639,"子集中\n"],[1,22643,"。"],[1,22656,"量的"],[-1,22661,"量的\n"],[1,22664,"强连通"],[-1,22679," "],[1,22680,"\n"],[-1,22831,"一旦"],[1,22833,"\n\n"],[-1,23078,"\n"],[1,23079,"图"],[-1,23567,"\n"],[1,23568,""]],[22506,22506],[23568,23568]]],[1528788126187,[null,[[1,22506,"n l"],[-1,22561,"。定义"],[1,22567,"。定义"],[-1,22569,"强连通"],[1,22579,"通组件"],[-1,22580,"*为："],[-1,22613,"子"],[1,22640,"子集中\n"],[-1,22640,"。"],[-1,22654,"量的"],[1,22661,"量的\n"],[-1,22661,"强连通"],[1,22679," "],[-1,22679,"\n"],[1,22831,"一旦"],[-1,22831,"\n\n"],[1,23078,"\n"],[-1,23078,"图"],[1,23567,"\n"],[-1,23567,""]],[23568,23568],[22506,22506]]],[1528788074639,["Re@Re.local",[[1,23568,"计算出的发现和结束时间，。"]],[23568,23568],[23581,23581]]],[1528788075102,["Re@Re.local",[[-1,23579,"，。"]],[23581,23581],[23579,23579]]],[1528788075336,["Re@Re.local",[[1,23579,"。"]],[23579,23579],[23580,23580]]],[1528788075616,["Re@Re.local",[[1,23583,"\n"]],[23580,23580],[23581,23581]]],[1528788075802,["Re@Re.local",[[1,23584,"\n"]],[23581,23581],[23582,23582]]],[1528788082018,["Re@Re.local",[[1,23582,"![../_images/scc1a.png](http://interactivepython.org/courselib/static/pythonds/_images/scc1a.png)"]],[23582,23582],[23679,23679]]],[1528788082374,["Re@Re.local",[[1,23682,"\n"]],[23679,23679],[23680,23680]]],[1528788082590,["Re@Re.local",[[1,23683,"\n"]],[23680,23680],[23681,23681]]],[1528788086094,["Re@Re.local",[[1,23681,"![../_images/scc1b.png](http://interactivepython.org/courselib/static/pythonds/_images/scc1b.png)"]],[23681,23681],[23778,23778]]],[1528788086641,["Re@Re.local",[[1,23781,"\n"]],[23778,23778],[23779,23779]]],[1528788086919,["Re@Re.local",[[1,23782,"\n"]],[23779,23779],[23780,23780]]],[1528789466410,[null,[[-1,22506,"n l"],[1,22564,"。定义"],[-1,22567,"。定义"],[1,22572,"强连通"],[-1,22579,"通组件"],[1,22583,"*为："],[1,22613,"子"],[-1,22639,"子集中\n"],[1,22643,"。"],[1,22656,"量的"],[-1,22661,"量的\n"],[1,22664,"强连通"],[-1,22679," "],[1,22680,"\n"],[-1,22831,"一旦"],[1,22833,"\n\n"],[-1,23078,"\n"],[1,23079,"图"],[-1,23567,"\n"],[1,23568,"后"]],[22506,22506],[23569,23569]]],[1528789466410,[null,[[1,22506,"n l"],[-1,22561,"。定义"],[1,22567,"。定义"],[-1,22569,"强连通"],[1,22579,"通组件"],[-1,22580,"*为："],[-1,22613,"子"],[1,22640,"子集中\n"],[-1,22640,"。"],[-1,22654,"量的"],[1,22661,"量的\n"],[-1,22661,"强连通"],[1,22679," "],[-1,22679,"\n"],[1,22831,"一旦"],[-1,22831,"\n\n"],[1,23078,"\n"],[-1,23078,"图"],[1,23567,"\n"],[-1,23567,"后"]],[23569,23569],[22506,22506]]],[1528789454149,["Re@Re.local",[[-1,23782,"\n"],[1,23783,"z"]],[23782,23782],[23783,23783]]],[1528789454657,["Re@Re.local",[[-1,23782,"z"]],[23783,23783],[23782,23782]]],[1528789454848,["Re@Re.local",[[-1,23781,"\n"]],[23782,23782],[23781,23781]]],[1528789455916,["Re@Re.local",[[-1,23780,"\n"],[1,23781,"z"]],[23781,23781],[23780,23781]]],[1528789456191,["Re@Re.local",[[1,23781,"u"]],[23780,23781],[23780,23782]]],[1528789456249,["Re@Re.local",[[1,23782,"i"]],[23780,23782],[23780,23783]]],[1528789456426,["Re@Re.local",[[1,23783," h"]],[23780,23783],[23780,23785]]],[1528789456486,["Re@Re.local",[[1,23785,"o"]],[23780,23785],[23780,23786]]],[1528789456546,["Re@Re.local",[[1,23786,"u"]],[23780,23786],[23780,23787]]],[1528789464373,["Re@Re.local",[[-1,23780,"zui hou"],[1,23787,"最后，图37给出了第3步"]],[23780,23787],[23792,23792]]],[1528789526426,[null,[[-1,22506,"n l"],[1,22564,"。定义"],[-1,22567,"。定义"],[1,22572,"强连通"],[-1,22579,"通组件"],[1,22583,"*为："],[1,22613,"子"],[-1,22639,"子集中\n"],[1,22643,"。"],[1,22656,"量的"],[-1,22661,"量的\n"],[1,22664,"强连通"],[-1,22679," "],[1,22680,"\n"],[-1,22831,"一旦"],[1,22833,"\n\n"],[-1,23078,"\n"],[1,23079,"图"],[-1,23567,"\n"],[1,23568,"后"]],[22506,22506],[23569,23569]]],[1528789526426,[null,[[1,22506,"n l"],[-1,22561,"。定义"],[1,22567,"。定义"],[-1,22569,"强连通"],[1,22579,"通组件"],[-1,22580,"*为："],[-1,22613,"子"],[1,22640,"子集中\n"],[-1,22640,"。"],[-1,22654,"量的"],[1,22661,"量的\n"],[-1,22661,"强连通"],[1,22679," "],[-1,22679,"\n"],[1,22831,"一旦"],[-1,22831,"\n\n"],[1,23078,"\n"],[-1,23078,"图"],[1,23567,"\n"],[-1,23567,"后"]],[23569,23569],[22506,22506]]],[1528789471677,["Re@Re.local",[[-1,23791,"步产生"]],[23794,23794],[23791,23791]]],[1528789475428,["Re@Re.local",[[1,23791,"步"]],[23791,23791],[23792,23792]]],[1528789476540,["Re@Re.local",[[-1,23789,"第3步"]],[23792,23792],[23789,23789]]],[1528789491010,["Re@Re.local",[[1,23789,"强连通分量算法中第3步的"]],[23789,23789],[23801,23801]]],[1528789491377,["Re@Re.local",[[-1,23800,"的"]],[23801,23801],[23800,23800]]],[1528789502950,["Re@Re.local",[[1,23800,"生成的3颗树。"]],[23800,23800],[23807,23807]]],[1528789586418,[null,[[-1,22506,"n l"],[1,22564,"。定义"],[-1,22567,"。定义"],[1,22572,"强连通"],[-1,22579,"通组件"],[1,22583,"*为："],[1,22613,"子"],[-1,22639,"子集中\n"],[1,22643,"。"],[1,22656,"量的"],[-1,22661,"量的\n"],[1,22664,"强连通"],[-1,22679," "],[1,22680,"\n"],[-1,22831,"一旦"],[1,22833,"\n\n"],[-1,23078,"\n"],[1,23079,"图"],[-1,23567,"\n"],[1,23568,"后"]],[22506,22506],[23569,23569]]],[1528789586418,[null,[[1,22506,"n l"],[-1,22561,"。定义"],[1,22567,"。定义"],[-1,22569,"强连通"],[1,22579,"通组件"],[-1,22580,"*为："],[-1,22613,"子"],[1,22640,"子集中\n"],[-1,22640,"。"],[-1,22654,"量的"],[1,22661,"量的\n"],[-1,22661,"强连通"],[1,22679," "],[-1,22679,"\n"],[1,22831,"一旦"],[-1,22831,"\n\n"],[1,23078,"\n"],[-1,23078,"图"],[1,23567,"\n"],[-1,23567,"后"]],[23569,23569],[22506,22506]]],[1528789585732,["Re@Re.local",[[1,23807,"SCC"]],[23807,23807],[23810,23810]]],[1528789646385,[null,[[-1,22506,"n l"],[1,22564,"。定义"],[-1,22567,"。定义"],[1,22572,"强连通"],[-1,22579,"通组件"],[1,22583,"*为："],[1,22613,"子"],[-1,22639,"子集中\n"],[1,22643,"。"],[1,22656,"量的"],[-1,22661,"量的\n"],[1,22664,"强连通"],[-1,22679," "],[1,22680,"\n"],[-1,22831,"一旦"],[1,22833,"\n\n"],[-1,23078,"\n"],[1,23079,"图"],[-1,23567,"\n"],[1,23568,"后"]],[22506,22506],[23569,23569]]],[1528789646385,[null,[[1,22506,"n l"],[-1,22561,"。定义"],[1,22567,"。定义"],[-1,22569,"强连通"],[1,22579,"通组件"],[-1,22580,"*为："],[-1,22613,"子"],[1,22640,"子集中\n"],[-1,22640,"。"],[-1,22654,"量的"],[1,22661,"量的\n"],[-1,22661,"强连通"],[1,22679," "],[-1,22679,"\n"],[1,22831,"一旦"],[-1,22831,"\n\n"],[1,23078,"\n"],[-1,23078,"图"],[1,23567,"\n"],[-1,23567,"后"]],[23569,23569],[22506,22506]]],[1528789590519,["Re@Re.local",[[1,23810,"算法的代码就作为练习了。"]],[23810,23810],[23822,23822]]],[1528789596460,["Re@Re.local",[[1,23822,"\n\n"]],[23822,23822],[23823,23823]]],[1528789596671,["Re@Re.local",[[1,23824,"\n"]],[23823,23823],[23824,23824]]],[1528789596928,["Re@Re.local",[[1,23824,"![../_images/sccforest.png](http://interactivepython.org/courselib/static/pythonds/_images/sccforest.png)"]],[23824,23824],[23929,23929]]],[1528789886415,[null,[[-1,22506,"n l"],[1,22564,"。定义"],[-1,22567,"。定义"],[1,22572,"强连通"],[-1,22579,"通组件"],[1,22583,"*为："],[1,22613,"子"],[-1,22639,"子集中\n"],[1,22643,"。"],[1,22656,"量的"],[-1,22661,"量的\n"],[1,22664,"强连通"],[-1,22679," "],[1,22680,"\n"],[-1,22831,"一旦"],[1,22833,"\n\n"],[-1,23078,"\n"],[1,23079,"图"],[-1,23567,"\n"],[1,23568,"后"]],[22506,22506],[23569,23569]]],[1528789886416,[null,[[1,22506,"n l"],[-1,22561,"。定义"],[1,22567,"。定义"],[-1,22569,"强连通"],[1,22579,"通组件"],[-1,22580,"*为："],[-1,22613,"子"],[1,22640,"子集中\n"],[-1,22640,"。"],[-1,22654,"量的"],[1,22661,"量的\n"],[-1,22661,"强连通"],[1,22679," "],[-1,22679,"\n"],[1,22831,"一旦"],[-1,22831,"\n\n"],[1,23078,"\n"],[-1,23078,"图"],[1,23567,"\n"],[-1,23567,"后"]],[23569,23569],[22506,22506]]],[1528789874268,["Re@Re.local",[[1,23930,"\n"]],[23929,23929],[23930,23930]]],[1528789874501,["Re@Re.local",[[1,23931,"\n"]],[23930,23930],[23931,23931]]],[1528789881675,["Re@Re.local",[[-1,23931,"\n"],[1,23932,"## 7.19 最短路径问题 ##"]],[23931,23931],[23948,23948]]],[1528789881793,["Re@Re.local",[[1,23948,"\n\n"]],[23948,23948],[23949,23949]]],[1528789881999,["Re@Re.local",[[1,23950,"\n"]],[23949,23949],[23950,23950]]],[1528789885587,["Re@Re.local",[[-1,23950,"\n"],[1,23951,"当上网"]],[23950,23950],[23953,23953]]],[1528789885924,["Re@Re.local",[[-1,23951,"上网"]],[23953,23953],[23951,23951]]],[1528789946479,[null,[[-1,22506,"n l"],[1,22564,"。定义"],[-1,22567,"。定义"],[1,22572,"强连通"],[-1,22579,"通组件"],[1,22583,"*为："],[1,22613,"子"],[-1,22639,"子集中\n"],[1,22643,"。"],[1,22656,"量的"],[-1,22661,"量的\n"],[1,22664,"强连通"],[-1,22679," "],[1,22680,"\n"],[-1,22831,"一旦"],[1,22833,"\n\n"],[-1,23078,"\n"],[1,23079,"图"],[-1,23567,"\n"],[1,23568,"后"]],[22506,22506],[23569,23569]]],[1528789946479,[null,[[1,22506,"n l"],[-1,22561,"。定义"],[1,22567,"。定义"],[-1,22569,"强连通"],[1,22579,"通组件"],[-1,22580,"*为："],[-1,22613,"子"],[1,22640,"子集中\n"],[-1,22640,"。"],[-1,22654,"量的"],[1,22661,"量的\n"],[-1,22661,"强连通"],[1,22679," "],[-1,22679,"\n"],[1,22831,"一旦"],[-1,22831,"\n\n"],[1,23078,"\n"],[-1,23078,"图"],[1,23567,"\n"],[-1,23567,"后"]],[23569,23569],[22506,22506]]],[1528789891642,["Re@Re.local",[[1,23951,"读者在上网时，"]],[23951,23951],[23958,23958]]],[1528789892846,["Re@Re.local",[[-1,23954,"上网时，"]],[23958,23958],[23954,23954]]],[1528789899246,["Re@Re.local",[[1,23954,"网上冲浪，发送后"]],[23954,23954],[23962,23962]]],[1528789899420,["Re@Re.local",[[-1,23961,"后"]],[23962,23962],[23961,23961]]],[1528789900812,["Re@Re.local",[[1,23961,"邮件"]],[23961,23961],[23963,23963]]],[1528789903942,["Re@Re.local",[[1,23958,"（？）"]],[23958,23958],[23961,23961]]],[1528789933087,["Re@Re.local",[[1,23966,"，或者从校内另一个地方登陆实验室电脑时，"]],[23966,23966],[23986,23986]]],[1528790006481,[null,[[-1,22506,"n l"],[1,22564,"。定义"],[-1,22567,"。定义"],[1,22572,"强连通"],[-1,22579,"通组件"],[1,22583,"*为："],[1,22613,"子"],[-1,22639,"子集中\n"],[1,22643,"。"],[1,22656,"量的"],[-1,22661,"量的\n"],[1,22664,"强连通"],[-1,22679," "],[1,22680,"\n"],[-1,22831,"一旦"],[1,22833,"\n\n"],[-1,23078,"\n"],[1,23079,"图"],[-1,23567,"\n"],[1,23568,"后"]],[22506,22506],[23569,23569]]],[1528790006481,[null,[[1,22506,"n l"],[-1,22561,"。定义"],[1,22567,"。定义"],[-1,22569,"强连通"],[1,22579,"通组件"],[-1,22580,"*为："],[-1,22613,"子"],[1,22640,"子集中\n"],[-1,22640,"。"],[-1,22654,"量的"],[1,22661,"量的\n"],[-1,22661,"强连通"],[1,22679," "],[-1,22679,"\n"],[1,22831,"一旦"],[-1,22831,"\n\n"],[1,23078,"\n"],[-1,23078,"图"],[1,23567,"\n"],[-1,23567,"后"]],[23569,23569],[22506,22506]]],[1528789960187,["Re@Re.local",[[1,23986,"是"]],[23986,23986],[23987,23987]]],[1528789960341,["Re@Re.local",[[-1,23986,"是"]],[23987,23987],[23986,23986]]],[1528789979608,["Re@Re.local",[[1,23986,"为了将本地电脑的信息传递"]],[23986,23986],[23998,23998]]],[1528789979900,["Re@Re.local",[[-1,23996,"传递"]],[23998,23998],[23996,23996]]],[1528789985021,["Re@Re.local",[[1,23996,"传送到另一台计算机"]],[23996,23996],[24005,24005]]],[1528789986535,["Re@Re.local",[[-1,23991,"电脑"]],[23993,23993],[23991,23991]]],[1528789987522,["Re@Re.local",[[1,23991,"计算机"]],[23991,23991],[23994,23994]]],[1528789999854,["Re@Re.local",[[1,24006,"，其"]],[24006,24006],[24008,24008]]],[1528790000044,["Re@Re.local",[[-1,24007,"其"]],[24008,24008],[24007,24007]]],[1528790066396,[null,[[-1,22506,"n l"],[1,22564,"。定义"],[-1,22567,"。定义"],[1,22572,"强连通"],[-1,22579,"通组件"],[1,22583,"*为："],[1,22613,"子"],[-1,22639,"子集中\n"],[1,22643,"。"],[1,22656,"量的"],[-1,22661,"量的\n"],[1,22664,"强连通"],[-1,22679," "],[1,22680,"\n"],[-1,22831,"一旦"],[1,22833,"\n\n"],[-1,23078,"\n"],[1,23079,"图"],[-1,23567,"\n"],[1,23568,"后"]],[22506,22506],[23569,23569]]],[1528790066396,[null,[[1,22506,"n l"],[-1,22561,"。定义"],[1,22567,"。定义"],[-1,22569,"强连通"],[1,22579,"通组件"],[-1,22580,"*为："],[-1,22613,"子"],[1,22640,"子集中\n"],[-1,22640,"。"],[-1,22654,"量的"],[1,22661,"量的\n"],[-1,22661,"强连通"],[1,22679," "],[-1,22679,"\n"],[1,22831,"一旦"],[-1,22831,"\n\n"],[1,23078,"\n"],[-1,23078,"图"],[1,23567,"\n"],[-1,23567,"后"]],[23569,23569],[22506,22506]]],[1528790013010,["Re@Re.local",[[1,24007,"其实背后太有"]],[24007,24007],[24013,24013]]],[1528790013512,["Re@Re.local",[[-1,24011,"太有"]],[24013,24013],[24011,24011]]],[1528790016905,["Re@Re.local",[[1,24011,"大有玄机。"]],[24011,24011],[24016,24016]]],[1528790023242,["Re@Re.local",[[-1,24007,"其实背后大有玄机。"]],[24016,24016],[24007,24007]]],[1528790042310,["Re@Re.local",[[1,24007,"其实是有很多事情要"]],[24007,24007],[24016,24016]]],[1528790046367,["Re@Re.local",[[-1,24010,"有很多事情要"]],[24016,24016],[24010,24010]]],[1528790048823,["Re@Re.local",[[1,24010,"要作很"]],[24010,24010],[24013,24013]]],[1528790049047,["Re@Re.local",[[-1,24011,"作很"]],[24013,24013],[24011,24011]]],[1528790051825,["Re@Re.local",[[1,24011,"做很多事情的。"]],[24011,24011],[24018,24018]]],[1528790126396,[null,[[-1,22506,"n l"],[1,22564,"。定义"],[-1,22567,"。定义"],[1,22572,"强连通"],[-1,22579,"通组件"],[1,22583,"*为："],[1,22613,"子"],[-1,22639,"子集中\n"],[1,22643,"。"],[1,22656,"量的"],[-1,22661,"量的\n"],[1,22664,"强连通"],[-1,22679," "],[1,22680,"\n"],[-1,22831,"一旦"],[1,22833,"\n\n"],[-1,23078,"\n"],[1,23079,"图"],[-1,23567,"\n"],[1,23568,"后"]],[22506,22506],[23569,23569]]],[1528790126396,[null,[[1,22506,"n l"],[-1,22561,"。定义"],[1,22567,"。定义"],[-1,22569,"强连通"],[1,22579,"通组件"],[-1,22580,"*为："],[-1,22613,"子"],[1,22640,"子集中\n"],[-1,22640,"。"],[-1,22654,"量的"],[1,22661,"量的\n"],[-1,22661,"强连通"],[1,22679," "],[-1,22679,"\n"],[1,22831,"一旦"],[-1,22831,"\n\n"],[1,23078,"\n"],[-1,23078,"图"],[1,23567,"\n"],[-1,23567,"后"]],[23569,23569],[22506,22506]]],[1528790072839,["Re@Re.local",[[1,24018,"对信息从"]],[24018,24018],[24022,24022]]],[1528790073915,["Re@Re.local",[[-1,24021,"从"]],[24022,24022],[24021,24021]]],[1528790076192,["Re@Re.local",[[1,24021,"在计算机"]],[24021,24021],[24025,24025]]],[1528790076904,["Re@Re.local",[[-1,24021,"在计算机"]],[24025,24025],[24021,24021]]],[1528790081394,["Re@Re.local",[[1,24021,"通过网络"]],[24021,24021],[24025,24025]]],[1528790086667,["Re@Re.local",[[-1,24019,"信息通过网络"]],[24025,24025],[24019,24019]]],[1528790094338,["Re@Re.local",[[1,24019,"信息通过网络"]],[24019,24019],[24025,24025]]],[1528790098892,["Re@Re.local",[[1,24021,"在激素"]],[24021,24021],[24024,24024]]],[1528790099251,["Re@Re.local",[[-1,24022,"激素"]],[24024,24024],[24022,24022]]],[1528790101315,["Re@Re.local",[[1,24022,"计算机之间"]],[24022,24022],[24027,24027]]],[1528790103565,["Re@Re.local",[[-1,24019,"信息"]],[24020,24021],[24019,24019]]],[1528790121265,["Re@Re.local",[[1,24029,"传递信息的方式进行的深入研究是"]],[24029,24029],[24044,24044]]],[1528790123352,["Re@Re.local",[[-1,24036,"进行的深入研究是"]],[24044,24044],[24036,24036]]],[1528790124580,["Re@Re.local",[[1,24036,"的"]],[24036,24036],[24037,24037]]],[1528790125577,["Re@Re.local",[[-1,24036,"的"]],[24037,24037],[24036,24036]]],[1528790186432,[null,[[-1,22506,"n l"],[1,22564,"。定义"],[-1,22567,"。定义"],[1,22572,"强连通"],[-1,22579,"通组件"],[1,22583,"*为："],[1,22613,"子"],[-1,22639,"子集中\n"],[1,22643,"。"],[1,22656,"量的"],[-1,22661,"量的\n"],[1,22664,"强连通"],[-1,22679," "],[1,22680,"\n"],[-1,22831,"一旦"],[1,22833,"\n\n"],[-1,23078,"\n"],[1,23079,"图"],[-1,23567,"\n"],[1,23568,"后"]],[22506,22506],[23569,23569]]],[1528790186432,[null,[[1,22506,"n l"],[-1,22561,"。定义"],[1,22567,"。定义"],[-1,22569,"强连通"],[1,22579,"通组件"],[-1,22580,"*为："],[-1,22613,"子"],[1,22640,"子集中\n"],[-1,22640,"。"],[-1,22654,"量的"],[1,22661,"量的\n"],[-1,22661,"强连通"],[1,22679," "],[-1,22679,"\n"],[1,22831,"一旦"],[-1,22831,"\n\n"],[1,23078,"\n"],[-1,23078,"图"],[1,23567,"\n"],[-1,23567,"后"]],[23569,23569],[22506,22506]]],[1528790166642,["Re@Re.local",[[1,24036,"的深入研究是计算机网络课程不可缺少的首要课题。但是在这里仅要求叨叨"]],[24036,24036],[24069,24069]]],[1528790166961,["Re@Re.local",[[-1,24067,"叨叨"]],[24069,24069],[24067,24067]]],[1528790170593,["Re@Re.local",[[1,24067,"足以理解"]],[24067,24067],[24071,24071]]],[1528790177503,["Re@Re.local",[[1,24064,"对计算机网络这是的"]],[24064,24064],[24073,24073]]],[1528790178406,["Re@Re.local",[[-1,24070,"这是的"]],[24073,24073],[24070,24070]]],[1528790179700,["Re@Re.local",[[1,24070,"知识"]],[24070,24070],[24072,24072]]],[1528790181375,["Re@Re.local",[[-1,24077,"理解"]],[24079,24079],[24077,24077]]],[1528790184826,["Re@Re.local",[[1,24077,"理解一些"]],[24077,24077],[24081,24081]]],[1528790246407,[null,[[-1,22506,"n l"],[1,22564,"。定义"],[-1,22567,"。定义"],[1,22572,"强连通"],[-1,22579,"通组件"],[1,22583,"*为："],[1,22613,"子"],[-1,22639,"子集中\n"],[1,22643,"。"],[1,22656,"量的"],[-1,22661,"量的\n"],[1,22664,"强连通"],[-1,22679," "],[1,22680,"\n"],[-1,22831,"一旦"],[1,22833,"\n\n"],[-1,23078,"\n"],[1,23079,"图"],[-1,23567,"\n"],[1,23568,"后"]],[22506,22506],[23569,23569]]],[1528790246407,[null,[[1,22506,"n l"],[-1,22561,"。定义"],[1,22567,"。定义"],[-1,22569,"强连通"],[1,22579,"通组件"],[-1,22580,"*为："],[-1,22613,"子"],[1,22640,"子集中\n"],[-1,22640,"。"],[-1,22654,"量的"],[1,22661,"量的\n"],[-1,22661,"强连通"],[1,22679," "],[-1,22679,"\n"],[1,22831,"一旦"],[-1,22831,"\n\n"],[1,23078,"\n"],[-1,23078,"图"],[1,23567,"\n"],[-1,23567,"后"]],[23569,23569],[22506,22506]]],[1528790187811,["Re@Re.local",[[-1,24079,"一些"]],[24081,24081],[24079,24079]]],[1528790197094,["Re@Re.local",[[1,24079,"另一个非常重要的图算法即可。、、"]],[24079,24079],[24095,24095]]],[1528790198018,["Re@Re.local",[[-1,24093,"、、"]],[24095,24095],[24093,24093]]],[1528790198596,["Re@Re.local",[[1,24093,"\n\n"]],[24093,24093],[24094,24094]]],[1528790198839,["Re@Re.local",[[1,24095,"\n"]],[24094,24094],[24095,24095]]],[1528790201775,["Re@Re.local",[[1,24095,"![../_images/Internet.png](http://interactivepython.org/courselib/static/pythonds/_images/Internet.png)"]],[24095,24095],[24198,24198]]],[1528790202222,["Re@Re.local",[[1,24199,"\n"]],[24198,24198],[24199,24199]]],[1528790202391,["Re@Re.local",[[1,24200,"\n"]],[24199,24199],[24200,24200]]],[1528790206363,["Re@Re.local",[[-1,24200,"\n"],[1,24201,"图1 "]],[24200,24200],[24203,24203]]],[1528790206912,["Re@Re.local",[[-1,24202," "]],[24203,24203],[24202,24202]]],[1528790217586,["Re@Re.local",[[1,24202,"是对计算机通宵的"]],[24202,24202],[24210,24210]]],[1528790218159,["Re@Re.local",[[-1,24207,"通宵的"]],[24210,24210],[24207,24207]]],[1528790220379,["Re@Re.local",[[1,24207,"通行方式"]],[24207,24207],[24211,24211]]],[1528790221055,["Re@Re.local",[[-1,24207,"通行方式"]],[24211,24211],[24207,24207]]],[1528790225848,["Re@Re.local",[[1,24207,"通信方式的高度抽闲该"]],[24207,24207],[24217,24217]]],[1528790226279,["Re@Re.local",[[-1,24214,"抽闲该"]],[24217,24217],[24214,24214]]],[1528790243787,["Re@Re.local",[[1,24214,"抽象概括。当使用浏览器向服务器请求网页时，"]],[24214,24214],[24235,24235]]],[1528790306430,[null,[[-1,22506,"n l"],[1,22564,"。定义"],[-1,22567,"。定义"],[1,22572,"强连通"],[-1,22579,"通组件"],[1,22583,"*为："],[1,22613,"子"],[-1,22639,"子集中\n"],[1,22643,"。"],[1,22656,"量的"],[-1,22661,"量的\n"],[1,22664,"强连通"],[-1,22679," "],[1,22680,"\n"],[-1,22831,"一旦"],[1,22833,"\n\n"],[-1,23078,"\n"],[1,23079,"图"],[-1,23567,"\n"],[1,23568,"后"]],[22506,22506],[23569,23569]]],[1528790306430,[null,[[1,22506,"n l"],[-1,22561,"。定义"],[1,22567,"。定义"],[-1,22569,"强连通"],[1,22579,"通组件"],[-1,22580,"*为："],[-1,22613,"子"],[1,22640,"子集中\n"],[-1,22640,"。"],[-1,22654,"量的"],[1,22661,"量的\n"],[-1,22661,"强连通"],[1,22679," "],[-1,22679,"\n"],[1,22831,"一旦"],[-1,22831,"\n\n"],[1,23078,"\n"],[-1,23078,"图"],[1,23567,"\n"],[-1,23567,"后"]],[23569,23569],[22506,22506]]],[1528790273768,["Re@Re.local",[[1,24235,"该请求必须穿过本地网络然后到达"]],[24235,24235],[24250,24250]]],[1528790284465,["Re@Re.local",[[-1,24240,"穿过本地网络然后到达"]],[24250,24250],[24240,24240]]],[1528790305440,["Re@Re.local",[[1,24240,"通过路由器穿过本地网络到达互联网，然后该请求"]],[24240,24240],[24262,24262]]],[1528790366414,[null,[[-1,22506,"n l"],[1,22564,"。定义"],[-1,22567,"。定义"],[1,22572,"强连通"],[-1,22579,"通组件"],[1,22583,"*为："],[1,22613,"子"],[-1,22639,"子集中\n"],[1,22643,"。"],[1,22656,"量的"],[-1,22661,"量的\n"],[1,22664,"强连通"],[-1,22679," "],[1,22680,"\n"],[-1,22831,"一旦"],[1,22833,"\n\n"],[-1,23078,"\n"],[1,23079,"图"],[-1,23567,"\n"],[1,23568,"后"]],[22506,22506],[23569,23569]]],[1528790366414,[null,[[1,22506,"n l"],[-1,22561,"。定义"],[1,22567,"。定义"],[-1,22569,"强连通"],[1,22579,"通组件"],[-1,22580,"*为："],[-1,22613,"子"],[1,22640,"子集中\n"],[-1,22640,"。"],[-1,22654,"量的"],[1,22661,"量的\n"],[-1,22661,"强连通"],[1,22679," "],[-1,22679,"\n"],[1,22831,"一旦"],[-1,22831,"\n\n"],[1,23078,"\n"],[-1,23078,"图"],[1,23567,"\n"],[-1,23567,"后"]],[23569,23569],[22506,22506]]],[1528790338337,["Re@Re.local",[[1,24262,"在互联网上进行传送并最终抵达服务器所在的本地网络的路由器。"]],[24262,24262],[24291,24291]]],[1528790346737,["Re@Re.local",[[-1,24290,"。"]],[24291,24291],[24290,24290]]],[1528790350788,["Re@Re.local",[[1,24290,"，请"]],[24290,24290],[24292,24292]]],[1528790350900,["Re@Re.local",[[-1,24291,"请"]],[24292,24292],[24291,24291]]],[1528790352580,["Re@Re.local",[[1,24291,"锁清秋的"]],[24291,24291],[24295,24295]]],[1528790353470,["Re@Re.local",[[-1,24291,"锁清秋的"]],[24295,24295],[24291,24291]]],[1528790362466,["Re@Re.local",[[1,24291,"所请求的网页再通过同一个路由"]],[24291,24291],[24305,24305]]],[1528790363371,["Re@Re.local",[[-1,24300,"同一个路由"]],[24305,24305],[24300,24300]]],[1528790365006,["Re@Re.local",[[1,24300,"该路由器"]],[24300,24300],[24304,24304]]],[1528790426465,[null,[[-1,22506,"n l"],[1,22564,"。定义"],[-1,22567,"。定义"],[1,22572,"强连通"],[-1,22579,"通组件"],[1,22583,"*为："],[1,22613,"子"],[-1,22639,"子集中\n"],[1,22643,"。"],[1,22656,"量的"],[-1,22661,"量的\n"],[1,22664,"强连通"],[-1,22679," "],[1,22680,"\n"],[-1,22831,"一旦"],[1,22833,"\n\n"],[-1,23078,"\n"],[1,23079,"图"],[-1,23567,"\n"],[1,23568,"后"]],[22506,22506],[23569,23569]]],[1528790426465,[null,[[1,22506,"n l"],[-1,22561,"。定义"],[1,22567,"。定义"],[-1,22569,"强连通"],[1,22579,"通组件"],[-1,22580,"*为："],[-1,22613,"子"],[1,22640,"子集中\n"],[-1,22640,"。"],[-1,22654,"量的"],[1,22661,"量的\n"],[-1,22661,"强连通"],[1,22679," "],[-1,22679,"\n"],[1,22831,"一旦"],[-1,22831,"\n\n"],[1,23078,"\n"],[-1,23078,"图"],[1,23567,"\n"],[-1,23567,"后"]],[23569,23569],[22506,22506]]],[1528790368670,["Re@Re.local",[[1,24304,"穿好"]],[24304,24304],[24306,24306]]],[1528790369818,["Re@Re.local",[[-1,24300,"该路由器穿好"]],[24306,24306],[24300,24300]]],[1528790382565,["Re@Re.local",[[1,24300,"相通的路由器组回到"]],[24300,24300],[24309,24309]]],[1528790385570,["Re@Re.local",[[-1,24307,"回到"]],[24309,24309],[24307,24307]]],[1528790388045,["Re@Re.local",[[1,24307,"传回六"]],[24307,24307],[24310,24310]]],[1528790388183,["Re@Re.local",[[-1,24309,"六"]],[24310,24310],[24309,24309]]],[1528790399401,["Re@Re.local",[[1,24309,"正在使用的浏览器。在云中的表情"]],[24309,24309],[24324,24324]]],[1528790400367,["Re@Re.local",[[-1,24322,"表情"]],[24324,24324],[24322,24322]]],[1528790403517,["Re@Re.local",[[1,24322,"标签\"\""]],[24322,24322],[24326,24326]]],[1528790406198,["Re@Re.local",[[1,24325,"Inernet"]],[24325,24325],[24332,24332]]],[1528790409071,["Re@Re.local",[[-1,24319,"云中"]],[24321,24321],[24319,24319]]],[1528790411677,["Re@Re.local",[[1,24319,"图1中云"]],[24319,24319],[24323,24323]]],[1528790417527,["Re@Re.local",[[1,24335,"是一些其它的"]],[24335,24335],[24341,24341]]],[1528790420695,["Re@Re.local",[[-1,24301,"通"]],[24302,24302],[24301,24301]]],[1528790423411,["Re@Re.local",[[1,24301,"同"]],[24301,24301],[24302,24302]]],[1528790486428,[null,[[-1,22506,"n l"],[1,22564,"。定义"],[-1,22567,"。定义"],[1,22572,"强连通"],[-1,22579,"通组件"],[1,22583,"*为："],[1,22613,"子"],[-1,22639,"子集中\n"],[1,22643,"。"],[1,22656,"量的"],[-1,22661,"量的\n"],[1,22664,"强连通"],[-1,22679," "],[1,22680,"\n"],[-1,22831,"一旦"],[1,22833,"\n\n"],[-1,23078,"\n"],[1,23079,"图"],[-1,23567,"\n"],[1,23568,"后"]],[22506,22506],[23569,23569]]],[1528790486428,[null,[[1,22506,"n l"],[-1,22561,"。定义"],[1,22567,"。定义"],[-1,22569,"强连通"],[1,22579,"通组件"],[-1,22580,"*为："],[-1,22613,"子"],[1,22640,"子集中\n"],[-1,22640,"。"],[-1,22654,"量的"],[1,22661,"量的\n"],[-1,22661,"强连通"],[1,22679," "],[-1,22679,"\n"],[1,22831,"一旦"],[-1,22831,"\n\n"],[1,23078,"\n"],[-1,23078,"图"],[1,23567,"\n"],[-1,23567,"后"]],[23569,23569],[22506,22506]]],[1528790448367,["Re@Re.local",[[1,24344,"路由器。这些路由器"]],[24344,24344],[24353,24353]]],[1528790459128,["Re@Re.local",[[-1,24347,"。"]],[24348,24348],[24347,24347]]],[1528790460070,["Re@Re.local",[[1,24347,"，"]],[24347,24347],[24348,24348]]],[1528790468627,["Re@Re.local",[[1,24353,"是用来将信息从"]],[24353,24353],[24360,24360]]],[1528790472027,["Re@Re.local",[[-1,24356,"将信息从"]],[24360,24360],[24356,24356]]],[1528790476742,["Re@Re.local",[[1,24356,"实现不同点"]],[24356,24356],[24361,24361]]],[1528790476835,["Re@Re.local",[[-1,24360,"点"]],[24361,24361],[24360,24360]]],[1528790485046,["Re@Re.local",[[1,24360,"端的信息传输"]],[24360,24360],[24366,24366]]],[1528790546441,[null,[[-1,22506,"n l"],[1,22564,"。定义"],[-1,22567,"。定义"],[1,22572,"强连通"],[-1,22579,"通组件"],[1,22583,"*为："],[1,22613,"子"],[-1,22639,"子集中\n"],[1,22643,"。"],[1,22656,"量的"],[-1,22661,"量的\n"],[1,22664,"强连通"],[-1,22679," "],[1,22680,"\n"],[-1,22831,"一旦"],[1,22833,"\n\n"],[-1,23078,"\n"],[1,23079,"图"],[-1,23567,"\n"],[1,23568,"后"],[1,24303,"一系列"],[-1,24344,"。这些，"],[1,24348,"，这些路"],[-1,24353,"将信息"]],[22506,22506],[24353,24353]]],[1528790546441,[null,[[1,22506,"n l"],[-1,22561,"。定义"],[1,22567,"。定义"],[-1,22569,"强连通"],[1,22579,"通组件"],[-1,22580,"*为："],[-1,22613,"子"],[1,22640,"子集中\n"],[-1,22640,"。"],[-1,22654,"量的"],[1,22661,"量的\n"],[-1,22661,"强连通"],[1,22679," "],[-1,22679,"\n"],[1,22831,"一旦"],[-1,22831,"\n\n"],[1,23078,"\n"],[-1,23078,"图"],[1,23567,"\n"],[-1,23567,"后"],[-1,24303,"一系列"],[1,24347,"。这些，"],[-1,24347,"，这些路"],[1,24356,"将信息"]],[24353,24353],[22506,22506]]],[1528790486920,["Re@Re.local",[[-1,24353,"是"]],[24354,24354],[24353,24353]]],[1528790488407,["Re@Re.local",[[1,24365,"。"]],[24365,24365],[24366,24366]]],[1528790497189,["Re@Re.local",[[-1,24355,"实现不同端的"]],[24361,24361],[24355,24355]]],[1528790498471,["Re@Re.local",[[1,24355,"实现"]],[24355,24355],[24357,24357]]],[1528790513679,["Re@Re.local",[[1,24362,"通过traceroute可以看到"]],[24362,24362],[24378,24378]]],[1528790536761,["Re@Re.local",[[-1,24361,"。通过traceroute可以看到"]],[24378,24378],[24361,24361]]],[1528790545722,["Re@Re.local",[[1,24361,"。若读者电脑支持traceroute命令，则"]],[24361,24361],[24383,24383]]],[1528790606440,[null,[[-1,22506,"n l"],[1,22564,"。定义"],[-1,22567,"。定义"],[1,22572,"强连通"],[-1,22579,"通组件"],[1,22583,"*为："],[1,22613,"子"],[-1,22639,"子集中\n"],[1,22643,"。"],[1,22656,"量的"],[-1,22661,"量的\n"],[1,22664,"强连通"],[-1,22679," "],[1,22680,"\n"],[-1,22831,"一旦"],[1,22833,"\n\n"],[-1,23078,"\n"],[1,23079,"图"],[-1,23567,"\n"],[1,23568,"后"],[1,24303,"一系列"],[-1,24344,"。这些，"],[1,24348,"，这些路"],[-1,24350,"是"],[-1,24353,"信息"]],[22506,22506],[24353,24353]]],[1528790606440,[null,[[1,22506,"n l"],[-1,22561,"。定义"],[1,22567,"。定义"],[-1,22569,"强连通"],[1,22579,"通组件"],[-1,22580,"*为："],[-1,22613,"子"],[1,22640,"子集中\n"],[-1,22640,"。"],[-1,22654,"量的"],[1,22661,"量的\n"],[-1,22661,"强连通"],[1,22679," "],[-1,22679,"\n"],[1,22831,"一旦"],[-1,22831,"\n\n"],[1,23078,"\n"],[-1,23078,"图"],[1,23567,"\n"],[-1,23567,"后"],[-1,24303,"一系列"],[1,24347,"。这些，"],[-1,24347,"，这些路"],[1,24353,"是"],[1,24355,"信息"]],[24353,24353],[22506,22506]]],[1528790546888,["Re@Re.local",[[-1,24382,"则"]],[24383,24383],[24382,24382]]],[1528790550130,["Re@Re.local",[[1,24382,"剋通过"]],[24382,24382],[24385,24385]]],[1528790550668,["Re@Re.local",[[-1,24382,"剋通过"]],[24385,24385],[24382,24382]]],[1528790552664,["Re@Re.local",[[1,24382,"可以通过"]],[24382,24382],[24386,24386]]],[1528790555070,["Re@Re.local",[[-1,24384,"通过"]],[24386,24386],[24384,24384]]],[1528790589077,["Re@Re.local",[[1,24384,"看到实际上有很多路由器的。下面的文本可以看出，该traceroute命令结果有13个路由器"]],[24384,24384],[24429,24429]]],[1528790600115,["Re@Re.local",[[1,24422,"显示在Luther College和"]],[24422,24422],[24440,24440]]],[1528790666416,[null,[[-1,22506,"n l"],[1,22564,"。定义"],[-1,22567,"。定义"],[1,22572,"强连通"],[-1,22579,"通组件"],[1,22583,"*为："],[1,22613,"子"],[-1,22639,"子集中\n"],[1,22643,"。"],[1,22656,"量的"],[-1,22661,"量的\n"],[1,22664,"强连通"],[-1,22679," "],[1,22680,"\n"],[-1,22831,"一旦"],[1,22833,"\n\n"],[-1,23078,"\n"],[1,23079,"图"],[-1,23567,"\n"],[1,23568,"后"],[1,24303,"一系列"],[-1,24344,"。这些，"],[1,24348,"，这些路"],[-1,24350,"是"],[-1,24353,"信息"]],[22506,22506],[24353,24353]]],[1528790666416,[null,[[1,22506,"n l"],[-1,22561,"。定义"],[1,22567,"。定义"],[-1,22569,"强连通"],[1,22579,"通组件"],[-1,22580,"*为："],[-1,22613,"子"],[1,22640,"子集中\n"],[-1,22640,"。"],[-1,22654,"量的"],[1,22661,"量的\n"],[-1,22661,"强连通"],[1,22679," "],[-1,22679,"\n"],[1,22831,"一旦"],[-1,22831,"\n\n"],[1,23078,"\n"],[-1,23078,"图"],[1,23567,"\n"],[-1,23567,"后"],[-1,24303,"一系列"],[1,24347,"。这些，"],[-1,24347,"，这些路"],[1,24353,"是"],[1,24355,"信息"]],[24353,24353],[22506,22506]]],[1528790611955,["Re@Re.local",[[1,24463,"的邮件服务器之间有"]],[24463,24463],[24472,24472]]],[1528790612103,["Re@Re.local",[[-1,24472,"有"]],[24472,24472],[24471,24471]]],[1528790615496,["Re@Re.local",[[1,24478,"。"]],[24478,24478],[24479,24479]]],[1528790615782,["Re@Re.local",[[1,24479,"\n\n"]],[24479,24479],[24480,24480]]],[1528790617021,["Re@Re.local",[[-1,24480,"\n"],[1,24481,"```"]],[24480,24480],[24483,24483]]],[1528790624943,["Re@Re.local",[[1,24483,"\n\n1  192.203.196.1\n2  hilda.luther.edu (216.159.75.1)\n3  ICN-Luther-Ether.icn.state.ia.us (207.165.237.137)\n4  ICN-ISP-1.icn.state.ia.us (209.56.255.1)\n5  p3-0.hsa1.chi1.bbnplanet.net (4.24.202.13)\n6  ae-1-54.bbr2.Chicago1.Level3.net (4.68.101.97)\n7  so-3-0-0.mpls2.Minneapolis1.Level3.net (64.159.4.214)\n8  ge-3-0.hsa2.Minneapolis1.Level3.net (4.68.112.18)\n9  p1-0.minnesota.bbnplanet.net (4.24.226.74)\n10  TelecomB-BR-01-V4002.ggnet.umn.edu (192.42.152.37)\n11  TelecomB-BN-01-Vlan-3000.ggnet.umn.edu (128.101.58.1)\n12  TelecomB-CN-01-Vlan-710.ggnet.umn.edu (128.101.80.158)\n13  baldrick.cs.umn.edu (128.101.80.129)(N!)  88.631 ms (N!)\n\nRouters from One Host to the Next over the Internet"]],[24483,24483],[25171,25171]]],[1528790625196,["Re@Re.local",[[1,25172,"\n"]],[25171,25171],[25172,25172]]],[1528790625997,["Re@Re.local",[[-1,25172,"\n"],[1,25173,"```"]],[25172,25172],[25175,25175]]],[1528790626287,["Re@Re.local",[[1,25175,"\n\n"]],[25175,25175],[25176,25176]]],[1528790630113,["Re@Re.local",[[-1,25176,"\n"],[1,25177,"每个"]],[25176,25176],[25178,25178]]],[1528790630451,["Re@Re.local",[[-1,25177,"个"]],[25178,25178],[25177,25177]]],[1528790630647,["Re@Re.local",[[-1,25176,"每"],[1,25177,"\n"]],[25177,25177],[25176,25176]]],[1528790786425,[null,[[-1,22506,"n l"],[1,22564,"。定义"],[-1,22567,"。定义"],[1,22572,"强连通"],[-1,22579,"通组件"],[1,22583,"*为："],[1,22613,"子"],[-1,22639,"子集中\n"],[1,22643,"。"],[1,22656,"量的"],[-1,22661,"量的\n"],[1,22664,"强连通"],[-1,22679," "],[1,22680,"\n"],[-1,22831,"一旦"],[1,22833,"\n\n"],[-1,23078,"\n"],[1,23079,"图"],[-1,23567,"\n"],[1,23568,"后"],[1,24303,"一系列"],[-1,24344,"。这些，"],[1,24348,"，这些路"],[-1,24350,"是"],[-1,24353,"信息"],[-1,24440,"有13个路由器"],[1,24447,"University of Minnesota"],[1,24456,"13个路由器"],[-1,24457,"\n"],[-1,24463,"\n"],[-1,25157,"每个\n"]],[22506,22506],[25157,25157]]],[1528790786425,[null,[[1,22506,"n l"],[-1,22561,"。定义"],[1,22567,"。定义"],[-1,22569,"强连通"],[1,22579,"通组件"],[-1,22580,"*为："],[-1,22613,"子"],[1,22640,"子集中\n"],[-1,22640,"。"],[-1,22654,"量的"],[1,22661,"量的\n"],[-1,22661,"强连通"],[1,22679," "],[-1,22679,"\n"],[1,22831,"一旦"],[-1,22831,"\n\n"],[1,23078,"\n"],[-1,23078,"图"],[1,23567,"\n"],[-1,23567,"后"],[-1,24303,"一系列"],[1,24347,"。这些，"],[-1,24347,"，这些路"],[1,24353,"是"],[1,24355,"信息"],[1,24440,"有13个路由器"],[-1,24440,"University of Minnesota"],[-1,24472,"13个路由器"],[1,24479,"\n"],[1,24484,"\n"],[1,25177,"每个\n"]],[25157,25157],[22506,22506]]],[1528790768147,["Re@Re.local",[[-1,25176,"\n"],[1,25177,"互联网上的每个路由器都连接着1个或者多个"]],[25176,25176],[25196,25196]]],[1528790770388,["Re@Re.local",[[-1,25190,"1个或者多个"]],[25196,25196],[25190,25190]]],[1528790771610,["Re@Re.local",[[1,25190,"1个"]],[25190,25190],[25192,25192]]],[1528790772245,["Re@Re.local",[[-1,25191,"个"]],[25192,25192],[25191,25191]]],[1528790776831,["Re@Re.local",[[1,25191,"个或多个路由器。"]],[25191,25191],[25199,25199]]],[1528790778874,["Re@Re.local",[[-1,25198,"。"]],[25199,25199],[25198,25198]]],[1528790781126,["Re@Re.local",[[1,25198,"，因此若"]],[25198,25198],[25202,25202]]],[1528790781670,["Re@Re.local",[[-1,25201,"若"]],[25202,25202],[25201,25201]]],[1528790782774,["Re@Re.local",[[1,25201,"如果"]],[25201,25201],[25203,25203]]],[1528790846418,[null,[[-1,22506,"n l"],[1,22564,"。定义"],[-1,22567,"。定义"],[1,22572,"强连通"],[-1,22579,"通组件"],[1,22583,"*为："],[1,22613,"子"],[-1,22639,"子集中\n"],[1,22643,"。"],[1,22656,"量的"],[-1,22661,"量的\n"],[1,22664,"强连通"],[-1,22679," "],[1,22680,"\n"],[-1,22831,"一旦"],[1,22833,"\n\n"],[-1,23078,"\n"],[1,23079,"图"],[-1,23567,"\n"],[1,23568,"后"],[1,24303,"一系列"],[-1,24344,"。这些，"],[1,24348,"，这些路"],[-1,24350,"是"],[-1,24353,"信息"],[-1,24440,"有13个路由器"],[1,24447,"University of Minnesota"],[1,24456,"13个路由器"],[-1,24457,"\n"],[-1,24463,"\n"],[-1,25156,"\n每个\n"],[-1,25177,"者多个1个个或"],[-1,25189,"。"],[-1,25193,"若"]],[22506,22506],[25193,25193]]],[1528790846418,[null,[[1,22506,"n l"],[-1,22561,"。定义"],[1,22567,"。定义"],[-1,22569,"强连通"],[1,22579,"通组件"],[-1,22580,"*为："],[-1,22613,"子"],[1,22640,"子集中\n"],[-1,22640,"。"],[-1,22654,"量的"],[1,22661,"量的\n"],[-1,22661,"强连通"],[1,22679," "],[-1,22679,"\n"],[1,22831,"一旦"],[-1,22831,"\n\n"],[1,23078,"\n"],[-1,23078,"图"],[1,23567,"\n"],[-1,23567,"后"],[-1,24303,"一系列"],[1,24347,"。这些，"],[-1,24347,"，这些路"],[1,24353,"是"],[1,24355,"信息"],[1,24440,"有13个路由器"],[-1,24440,"University of Minnesota"],[-1,24472,"13个路由器"],[1,24479,"\n"],[1,24484,"\n"],[1,25176,"\n每个\n"],[1,25193,"者多个1个个或"],[1,25198,"。"],[1,25201,"若"]],[25193,25193],[22506,22506]]],[1528790787756,["Re@Re.local",[[-1,25201,"如果"]],[25203,25203],[25201,25201]]],[1528790793718,["Re@Re.local",[[1,25201,"如果多次运行t"]],[25201,25201],[25208,25208]]],[1528790794513,["Re@Re.local",[[-1,25207,"t"]],[25208,25208],[25207,25207]]],[1528790812998,["Re@Re.local",[[1,25207,"traceroute命令，有可能会发现每次信息"]],[25207,25207],[25230,25230]]],[1528790813382,["Re@Re.local",[[-1,25228,"信息"]],[25230,25230],[25228,25228]]],[1528790815124,["Re@Re.local",[[1,25228,"发送的信息"]],[25228,25228],[25233,25233]]],[1528790816487,["Re@Re.local",[[-1,25228,"发送的信息"]],[25233,25233],[25228,25228]]],[1528790825824,["Re@Re.local",[[1,25228,"信息都是通过不同的路由器转发的。这是因为"]],[25228,25228],[25248,25248]]],[1528790906443,[null,[[-1,22506,"n l"],[1,22564,"。定义"],[-1,22567,"。定义"],[1,22572,"强连通"],[-1,22579,"通组件"],[1,22583,"*为："],[1,22613,"子"],[-1,22639,"子集中\n"],[1,22643,"。"],[1,22656,"量的"],[-1,22661,"量的\n"],[1,22664,"强连通"],[-1,22679," "],[1,22680,"\n"],[-1,22831,"一旦"],[1,22833,"\n\n"],[-1,23078,"\n"],[1,23079,"图"],[-1,23567,"\n"],[1,23568,"后"],[1,24303,"一系列"],[-1,24344,"。这些，"],[1,24348,"，这些路"],[-1,24350,"是"],[-1,24353,"信息"],[-1,24440,"有13个路由器"],[1,24447,"University of Minnesota"],[1,24456,"13个路由器"],[-1,24457,"\n"],[-1,24463,"\n"],[-1,25156,"\n每个\n"],[-1,25177,"者多个1个个或"],[-1,25189,"。"],[-1,25193,"若如果"],[-1,25203,"t"],[-1,25224,"信息发送"]],[22506,22506],[25224,25224]]],[1528790906443,[null,[[1,22506,"n l"],[-1,22561,"。定义"],[1,22567,"。定义"],[-1,22569,"强连通"],[1,22579,"通组件"],[-1,22580,"*为："],[-1,22613,"子"],[1,22640,"子集中\n"],[-1,22640,"。"],[-1,22654,"量的"],[1,22661,"量的\n"],[-1,22661,"强连通"],[1,22679," "],[-1,22679,"\n"],[1,22831,"一旦"],[-1,22831,"\n\n"],[1,23078,"\n"],[-1,23078,"图"],[1,23567,"\n"],[-1,23567,"后"],[-1,24303,"一系列"],[1,24347,"。这些，"],[-1,24347,"，这些路"],[1,24353,"是"],[1,24355,"信息"],[1,24440,"有13个路由器"],[-1,24440,"University of Minnesota"],[-1,24472,"13个路由器"],[1,24479,"\n"],[1,24484,"\n"],[1,25176,"\n每个\n"],[1,25193,"者多个1个个或"],[1,25198,"。"],[1,25201,"若如果"],[1,25208,"t"],[1,25228,"信息发送"]],[25224,25224],[22506,22506]]],[1528790866825,["Re@Re.local",[[1,25248,"在任意组父"]],[25248,25248],[25253,25253]]],[1528790866923,["Re@Re.local",[[-1,25252,"父"]],[25253,25253],[25252,25252]]],[1528790867917,["Re@Re.local",[[1,25252,"撸"]],[25252,25252],[25253,25253]]],[1528790868195,["Re@Re.local",[[-1,25251,"组撸"]],[25253,25253],[25251,25251]]],[1528790872514,["Re@Re.local",[[1,25251,"对服务器中传递"]],[25251,25251],[25258,25258]]],[1528790877508,["Re@Re.local",[[-1,25252,"服务器中传递"]],[25258,25258],[25252,25252]]],[1528790880004,["Re@Re.local",[[1,25252,"路由器键的"]],[25252,25252],[25257,25257]]],[1528790880523,["Re@Re.local",[[-1,25255,"键的"]],[25257,25257],[25255,25255]]],[1528790902016,["Re@Re.local",[[1,25255,"间的连接都是有消耗的，取决于流量，当前实际，以及其它很多因素。"]],[25255,25255],[25286,25286]]],[1528790966416,[null,[[-1,22506,"n l"],[1,22564,"。定义"],[-1,22567,"。定义"],[1,22572,"强连通"],[-1,22579,"通组件"],[1,22583,"*为："],[1,22613,"子"],[-1,22639,"子集中\n"],[1,22643,"。"],[1,22656,"量的"],[-1,22661,"量的\n"],[1,22664,"强连通"],[-1,22679," "],[1,22680,"\n"],[-1,22831,"一旦"],[1,22833,"\n\n"],[-1,23078,"\n"],[1,23079,"图"],[-1,23567,"\n"],[1,23568,"后"],[1,24303,"一系列"],[-1,24344,"。这些，"],[1,24348,"，这些路"],[-1,24350,"是"],[-1,24353,"信息"],[-1,24440,"有13个路由器"],[1,24447,"University of Minnesota"],[1,24456,"13个路由器"],[-1,24457,"\n"],[-1,24463,"\n"],[-1,25156,"\n每个\n"],[-1,25177,"者多个1个个或"],[-1,25189,"。"],[-1,25193,"若如果"],[-1,25203,"t"],[-1,25224,"信息发送"]],[22506,22506],[25224,25224]]],[1528790966416,[null,[[1,22506,"n l"],[-1,22561,"。定义"],[1,22567,"。定义"],[-1,22569,"强连通"],[1,22579,"通组件"],[-1,22580,"*为："],[-1,22613,"子"],[1,22640,"子集中\n"],[-1,22640,"。"],[-1,22654,"量的"],[1,22661,"量的\n"],[-1,22661,"强连通"],[1,22679," "],[-1,22679,"\n"],[1,22831,"一旦"],[-1,22831,"\n\n"],[1,23078,"\n"],[-1,23078,"图"],[1,23567,"\n"],[-1,23567,"后"],[-1,24303,"一系列"],[1,24347,"。这些，"],[-1,24347,"，这些路"],[1,24353,"是"],[1,24355,"信息"],[1,24440,"有13个路由器"],[-1,24440,"University of Minnesota"],[-1,24472,"13个路由器"],[1,24479,"\n"],[1,24484,"\n"],[1,25176,"\n每个\n"],[1,25193,"者多个1个个或"],[1,25198,"。"],[1,25201,"若如果"],[1,25208,"t"],[1,25228,"信息发送"]],[25224,25224],[22506,22506]]],[1528790914025,["Re@Re.local",[[1,25286,"现在来说，将"]],[25286,25286],[25292,25292]]],[1528790922901,["Re@Re.local",[[-1,25288,"来说，将"]],[25292,25292],[25288,25288]]],[1528790927404,["Re@Re.local",[[1,25288,"将计算机"]],[25288,25288],[25292,25292]]],[1528790927942,["Re@Re.local",[[-1,25289,"计算机"]],[25292,25292],[25289,25289]]],[1528790929164,["Re@Re.local",[[1,25289,"网络"]],[25289,25289],[25291,25291]]],[1528790929463,["Re@Re.local",[[-1,25289,"网络"]],[25291,25291],[25289,25289]]],[1528790937292,["Re@Re.local",[[1,25289,"路由器网路表示为有权限"]],[25289,25289],[25300,25300]]],[1528790938257,["Re@Re.local",[[-1,25298,"权限"]],[25300,25300],[25298,25298]]],[1528790942931,["Re@Re.local",[[1,25298,"权重的边"]],[25298,25298],[25302,25302]]],[1528790944927,["Re@Re.local",[[-1,25300,"的边"]],[25302,25302],[25300,25300]]],[1528790946373,["Re@Re.local",[[1,25300,"图"]],[25300,25300],[25301,25301]]],[1528790949089,["Re@Re.local",[[1,25298,"、"]],[25298,25298],[25299,25299]]],[1528790949958,["Re@Re.local",[[-1,25297,"有、"]],[25299,25299],[25297,25297]]],[1528790955309,["Re@Re.local",[[1,25300,"应该说是很自然"]],[25300,25300],[25307,25307]]],[1528790955959,["Re@Re.local",[[-1,25305,"自然"]],[25307,25307],[25305,25305]]],[1528790958883,["Re@Re.local",[[1,25305,"顺理成章了。"]],[25305,25305],[25311,25311]]],[1528790959209,["Re@Re.local",[[1,25311,"\n\n"]],[25311,25311],[25312,25312]]],[1528790959392,["Re@Re.local",[[1,25313,"\n"]],[25312,25312],[25313,25313]]],[1528790965370,["Re@Re.local",[[1,25313,"![../_images/routeGraph.png](http://interactivepython.org/courselib/static/pythonds/_images/routeGraph.png)"]],[25313,25313],[25420,25420]]],[1528790965650,["Re@Re.local",[[1,25421,"\n"]],[25420,25420],[25421,25421]]],[1528790965879,["Re@Re.local",[[1,25422,"\n"]],[25421,25421],[25422,25422]]],[1528791026457,[null,[[-1,22506,"n l"],[1,22564,"。定义"],[-1,22567,"。定义"],[1,22572,"强连通"],[-1,22579,"通组件"],[1,22583,"*为："],[1,22613,"子"],[-1,22639,"子集中\n"],[1,22643,"。"],[1,22656,"量的"],[-1,22661,"量的\n"],[1,22664,"强连通"],[-1,22679," "],[1,22680,"\n"],[-1,22831,"一旦"],[1,22833,"\n\n"],[-1,23078,"\n"],[1,23079,"图"],[-1,23567,"\n"],[1,23568,"后"],[1,24303,"一系列"],[-1,24344,"。这些，"],[1,24348,"，这些路"],[-1,24350,"是"],[-1,24353,"信息"],[-1,24440,"有13个路由器"],[1,24447,"University of Minnesota"],[1,24456,"13个路由器"],[-1,24457,"\n"],[-1,24463,"\n"],[-1,25156,"\n每个\n"],[-1,25177,"者多个1个个或"],[-1,25189,"。"],[-1,25193,"若如果"],[-1,25203,"t"],[-1,25224,"信息发送"]],[22506,22506],[25224,25224]]],[1528791026457,[null,[[1,22506,"n l"],[-1,22561,"。定义"],[1,22567,"。定义"],[-1,22569,"强连通"],[1,22579,"通组件"],[-1,22580,"*为："],[-1,22613,"子"],[1,22640,"子集中\n"],[-1,22640,"。"],[-1,22654,"量的"],[1,22661,"量的\n"],[-1,22661,"强连通"],[1,22679," "],[-1,22679,"\n"],[1,22831,"一旦"],[-1,22831,"\n\n"],[1,23078,"\n"],[-1,23078,"图"],[1,23567,"\n"],[-1,23567,"后"],[-1,24303,"一系列"],[1,24347,"。这些，"],[-1,24347,"，这些路"],[1,24353,"是"],[1,24355,"信息"],[1,24440,"有13个路由器"],[-1,24440,"University of Minnesota"],[-1,24472,"13个路由器"],[1,24479,"\n"],[1,24484,"\n"],[1,25176,"\n每个\n"],[1,25193,"者多个1个个或"],[1,25198,"。"],[1,25201,"若如果"],[1,25208,"t"],[1,25228,"信息发送"]],[25224,25224],[22506,22506]]],[1528790969822,["Re@Re.local",[[-1,25422,"\n"],[1,25423,"图2是"]],[25422,25422],[25425,25425]]],[1528790977120,["Re@Re.local",[[-1,25422,"图2是"]],[25425,25425],[25422,25422]]],[1528790977739,["Re@Re.local",[[1,25422,"\n\n"]],[25422,25422],[25423,25423]]],[1528790979980,["Re@Re.local",[[-1,25423,"\n"],[1,25424,"一个小"]],[25423,25423],[25426,25426]]],[1528790980250,["Re@Re.local",[[-1,25425,"小"]],[25426,25426],[25425,25425]]],[1528790986061,["Re@Re.local",[[1,25425,"小的"]],[25425,25425],[25427,25427]]],[1528790986905,["Re@Re.local",[[-1,25426,"的"]],[25427,25427],[25426,25426]]],[1528790989594,["Re@Re.local",[[1,25426,"的权重图"]],[25426,25426],[25430,25430]]],[1528790990715,["Re@Re.local",[[-1,25426,"的"]],[25427,25427],[25426,25426]]],[1528791005074,["Re@Re.local",[[1,25429,"例子如图2所示。需要解决的问题是找到"]],[25429,25429],[25447,25447]]],[1528791025631,["Re@Re.local",[[-1,25446,"到"]],[25447,25447],[25446,25446]]],[1528791086477,[null,[[-1,22506,"n l"],[1,22564,"。定义"],[-1,22567,"。定义"],[1,22572,"强连通"],[-1,22579,"通组件"],[1,22583,"*为："],[1,22613,"子"],[-1,22639,"子集中\n"],[1,22643,"。"],[1,22656,"量的"],[-1,22661,"量的\n"],[1,22664,"强连通"],[-1,22679," "],[1,22680,"\n"],[-1,22831,"一旦"],[1,22833,"\n\n"],[-1,23078,"\n"],[1,23079,"图"],[-1,23567,"\n"],[1,23568,"后"],[1,24303,"一系列"],[-1,24344,"。这些，"],[1,24348,"，这些路"],[-1,24350,"是"],[-1,24353,"信息"],[-1,24440,"有13个路由器"],[1,24447,"University of Minnesota"],[1,24456,"13个路由器"],[-1,24457,"\n"],[-1,24463,"\n"],[-1,25156,"\n每个\n"],[-1,25177,"者多个1个个或"],[-1,25189,"。"],[-1,25193,"若如果"],[-1,25203,"t"],[-1,25224,"信息发送"]],[22506,22506],[25224,25224]]],[1528791086477,[null,[[1,22506,"n l"],[-1,22561,"。定义"],[1,22567,"。定义"],[-1,22569,"强连通"],[1,22579,"通组件"],[-1,22580,"*为："],[-1,22613,"子"],[1,22640,"子集中\n"],[-1,22640,"。"],[-1,22654,"量的"],[1,22661,"量的\n"],[-1,22661,"强连通"],[1,22679," "],[-1,22679,"\n"],[1,22831,"一旦"],[-1,22831,"\n\n"],[1,23078,"\n"],[-1,23078,"图"],[1,23567,"\n"],[-1,23567,"后"],[-1,24303,"一系列"],[1,24347,"。这些，"],[-1,24347,"，这些路"],[1,24353,"是"],[1,24355,"信息"],[1,24440,"有13个路由器"],[-1,24440,"University of Minnesota"],[-1,24472,"13个路由器"],[1,24479,"\n"],[1,24484,"\n"],[1,25176,"\n每个\n"],[1,25193,"者多个1个个或"],[1,25198,"。"],[1,25201,"若如果"],[1,25208,"t"],[1,25228,"信息发送"]],[25224,25224],[22506,22506]]],[1528791036352,["Re@Re.local",[[1,25446,"到一条总权重最小的路径来传递信息。"]],[25446,25446],[25463,25463]]],[1528791043786,["Re@Re.local",[[-1,25462,"。"]],[25463,25463],[25462,25462]]],[1528791048987,["Re@Re.local",[[1,25462,"，这与宽度搜索"]],[25462,25462],[25469,25469]]],[1528791049957,["Re@Re.local",[[-1,25467,"搜索"]],[25469,25469],[25467,25467]]],[1528791051559,["Re@Re.local",[[1,25467,"优先嗖嗖"]],[25467,25467],[25471,25471]]],[1528791052266,["Re@Re.local",[[-1,25469,"嗖嗖"]],[25471,25471],[25469,25469]]],[1528791085324,["Re@Re.local",[[1,25469,"搜索有些类似，不过这里要考虑的是总权重"]],[25469,25469],[25488,25488]]],[1528791146452,[null,[[-1,22506,"n l"],[1,22564,"。定义"],[-1,22567,"。定义"],[1,22572,"强连通"],[-1,22579,"通组件"],[1,22583,"*为："],[1,22613,"子"],[-1,22639,"子集中\n"],[1,22643,"。"],[1,22656,"量的"],[-1,22661,"量的\n"],[1,22664,"强连通"],[-1,22679," "],[1,22680,"\n"],[-1,22831,"一旦"],[1,22833,"\n\n"],[-1,23078,"\n"],[1,23079,"图"],[-1,23567,"\n"],[1,23568,"后"],[1,24303,"一系列"],[-1,24344,"。这些，"],[1,24348,"，这些路"],[-1,24350,"是"],[-1,24353,"信息"],[-1,24440,"有13个路由器"],[1,24447,"University of Minnesota"],[1,24456,"13个路由器"],[-1,24457,"\n"],[-1,24463,"\n"],[-1,25156,"\n每个\n"],[-1,25177,"者多个1个个或"],[-1,25189,"。"],[-1,25193,"若如果"],[-1,25203,"t"],[-1,25224,"信息发送"]],[22506,22506],[25224,25224]]],[1528791146453,[null,[[1,22506,"n l"],[-1,22561,"。定义"],[1,22567,"。定义"],[-1,22569,"强连通"],[1,22579,"通组件"],[-1,22580,"*为："],[-1,22613,"子"],[1,22640,"子集中\n"],[-1,22640,"。"],[-1,22654,"量的"],[1,22661,"量的\n"],[-1,22661,"强连通"],[1,22679," "],[-1,22679,"\n"],[1,22831,"一旦"],[-1,22831,"\n\n"],[1,23078,"\n"],[-1,23078,"图"],[1,23567,"\n"],[-1,23567,"后"],[-1,24303,"一系列"],[1,24347,"。这些，"],[-1,24347,"，这些路"],[1,24353,"是"],[1,24355,"信息"],[1,24440,"有13个路由器"],[-1,24440,"University of Minnesota"],[-1,24472,"13个路由器"],[1,24479,"\n"],[1,24484,"\n"],[1,25176,"\n每个\n"],[1,25193,"者多个1个个或"],[1,25198,"。"],[1,25201,"若如果"],[1,25208,"t"],[1,25228,"信息发送"]],[25224,25224],[22506,22506]]],[1528791092181,["Re@Re.local",[[1,25491,"节点的总数，如果所"]],[25491,25491],[25500,25500]]],[1528791092265,["Re@Re.local",[[-1,25499,"所"]],[25500,25500],[25499,25499]]],[1528791095547,["Re@Re.local",[[1,25499,"各节点权重一直，"]],[25499,25499],[25507,25507]]],[1528791096482,["Re@Re.local",[[-1,25504,"一直，"]],[25507,25507],[25504,25504]]],[1528791105068,["Re@Re.local",[[1,25504,"一致，那就可以用宽度优先搜索一样了。"]],[25504,25504],[25522,25522]]],[1528791107230,["Re@Re.local",[[-1,25509,"可以用"]],[25512,25512],[25509,25509]]],[1528791107682,["Re@Re.local",[[1,25509,"根"]],[25509,25509],[25510,25510]]],[1528791110515,["Re@Re.local",[[-1,25509,"根"]],[25510,25510],[25509,25509]]],[1528791111550,["Re@Re.local",[[1,25509,"跟"]],[25509,25509],[25510,25510]]],[1528791124016,["Re@Re.local",[[1,25520,"\n\n"]],[25520,25520],[25521,25521]]],[1528791124217,["Re@Re.local",[[1,25522,"\n"]],[25521,25521],[25522,25522]]],[1528791128475,["Re@Re.local",[[-1,25522,"\n"],[1,25523,"## 7.20 # Dijkstra’s Algorithm"]],[25522,25522],[25552,25552]]],[1528791130291,["Re@Re.local",[[-1,25540,"’s Algorithm"]],[25552,25552],[25540,25540]]],[1528791132314,["Re@Re.local",[[1,25540,"算法 ##"]],[25540,25540],[25545,25545]]],[1528791134838,["Re@Re.local",[[1,25531,"#"]],[25531,25531],[25532,25532]]],[1528791686510,[null,[[-1,22506,"n l"],[1,22564,"。定义"],[-1,22567,"。定义"],[1,22572,"强连通"],[-1,22579,"通组件"],[1,22583,"*为："],[1,22613,"子"],[-1,22639,"子集中\n"],[1,22643,"。"],[1,22656,"量的"],[-1,22661,"量的\n"],[1,22664,"强连通"],[-1,22679," "],[1,22680,"\n"],[-1,22831,"一旦"],[1,22833,"\n\n"],[-1,23078,"\n"],[1,23079,"图"],[-1,23567,"\n"],[1,23568,"后"],[1,24303,"一系列"],[-1,24344,"。这些，"],[1,24348,"，这些路"],[-1,24350,"是"],[-1,24353,"信息"],[-1,24440,"有13个路由器"],[1,24447,"University of Minnesota"],[1,24456,"13个路由器"],[-1,24457,"\n"],[-1,24463,"\n"],[-1,25156,"\n每个\n"],[-1,25177,"者多个1个个或"],[-1,25189,"。"],[-1,25193,"若如果"],[-1,25203,"t"],[-1,25224,"信息发送"],[1,25488,"而不是"],[-1,25496,"所"],[-1,25502,"一直"]],[22506,22506],[25502,25502]]],[1528791686510,[null,[[1,22506,"n l"],[-1,22561,"。定义"],[1,22567,"。定义"],[-1,22569,"强连通"],[1,22579,"通组件"],[-1,22580,"*为："],[-1,22613,"子"],[1,22640,"子集中\n"],[-1,22640,"。"],[-1,22654,"量的"],[1,22661,"量的\n"],[-1,22661,"强连通"],[1,22679," "],[-1,22679,"\n"],[1,22831,"一旦"],[-1,22831,"\n\n"],[1,23078,"\n"],[-1,23078,"图"],[1,23567,"\n"],[-1,23567,"后"],[-1,24303,"一系列"],[1,24347,"。这些，"],[-1,24347,"，这些路"],[1,24353,"是"],[1,24355,"信息"],[1,24440,"有13个路由器"],[-1,24440,"University of Minnesota"],[-1,24472,"13个路由器"],[1,24479,"\n"],[1,24484,"\n"],[1,25176,"\n每个\n"],[1,25193,"者多个1个个或"],[1,25198,"。"],[1,25201,"若如果"],[1,25208,"t"],[1,25228,"信息发送"],[-1,25488,"而不是"],[1,25499,"所"],[1,25504,"一直"]],[25502,25502],[22506,22506]]],[1528791656366,["Re@Re.local",[[1,25546,"\n\n"]],[25546,25546],[25547,25547]]],[1528791656602,["Re@Re.local",[[1,25548,"\n"]],[25547,25547],[25548,25548]]],[1528791660953,["Re@Re.local",[[-1,25548,"\n"],[1,25549,"这例"]],[25548,25548],[25550,25550]]],[1528791662413,["Re@Re.local",[[-1,25548,"这例"]],[25550,25550],[25548,25548]]],[1528791662785,["Re@Re.local",[[-1,25547,"\n"],[1,25548,"z"]],[25548,25548],[25547,25548]]],[1528791663017,["Re@Re.local",[[-1,25547,"z"]],[25547,25548],[0,0]]],[1528791663399,["Re@Re.local",[[1,25547,"\n\n"]],[25547,25547],[25548,25548]]],[1528791664622,["Re@Re.local",[[-1,25548,"\n"],[1,25549,"这里"]],[25548,25548],[25550,25550]]],[1528791665496,["Re@Re.local",[[-1,25548,"这里"]],[25550,25550],[25548,25548]]],[1528791666006,["Re@Re.local",[[1,25548,"\n\n"]],[25548,25548],[25549,25549]]],[1528791671012,["Re@Re.local",[[-1,25549,"\n"],[1,25550,"这里要使用的算法"]],[25549,25549],[25557,25557]]],[1528791677417,["Re@Re.local",[[-1,25549,"这里要使用的算法"]],[25557,25557],[25549,25549]]],[1528791682651,["Re@Re.local",[[-1,25548,"\n"],[1,25549,"z"]],[25549,25549],[25548,25549]]],[1528791682770,["Re@Re.local",[[1,25549,"h"]],[25548,25549],[25548,25550]]],[1528791682855,["Re@Re.local",[[1,25550,"e"]],[25548,25550],[25548,25551]]],[1528791682951,["Re@Re.local",[[1,25551," l"]],[25548,25551],[25548,25553]]],[1528791683059,["Re@Re.local",[[1,25553,"i"]],[25548,25553],[25548,25554]]],[1528791685944,["Re@Re.local",[[-1,25548,"zhe li"],[1,25554,"这里使用的确定"]],[25548,25554],[25555,25555]]],[1528791686227,["Re@Re.local",[[-1,25553,"确定"]],[25555,25555],[25553,25553]]],[1528791747323,[null,[[-1,22506,"n l"],[1,22564,"。定义"],[-1,22567,"。定义"],[1,22572,"强连通"],[-1,22579,"通组件"],[1,22583,"*为："],[1,22613,"子"],[-1,22639,"子集中\n"],[1,22643,"。"],[1,22656,"量的"],[-1,22661,"量的\n"],[1,22664,"强连通"],[-1,22679," "],[1,22680,"\n"],[-1,22831,"一旦"],[1,22833,"\n\n"],[-1,23078,"\n"],[1,23079,"图"],[-1,23567,"\n"],[1,23568,"后"],[1,24303,"一系列"],[-1,24344,"。这些，"],[1,24348,"，这些路"],[-1,24350,"是"],[-1,24353,"信息"],[-1,24440,"有13个路由器"],[1,24447,"University of Minnesota"],[1,24456,"13个路由器"],[-1,24457,"\n"],[-1,24463,"\n"],[-1,25156,"\n每个\n"],[-1,25177,"者多个1个个或"],[-1,25189,"。"],[-1,25193,"若如果"],[-1,25203,"t"],[-1,25224,"信息发送"],[1,25488,"而不是"],[-1,25496,"所"],[-1,25502,"一直"]],[22506,22506],[25502,25502]]],[1528791747323,[null,[[1,22506,"n l"],[-1,22561,"。定义"],[1,22567,"。定义"],[-1,22569,"强连通"],[1,22579,"通组件"],[-1,22580,"*为："],[-1,22613,"子"],[1,22640,"子集中\n"],[-1,22640,"。"],[-1,22654,"量的"],[1,22661,"量的\n"],[-1,22661,"强连通"],[1,22679," "],[-1,22679,"\n"],[1,22831,"一旦"],[-1,22831,"\n\n"],[1,23078,"\n"],[-1,23078,"图"],[1,23567,"\n"],[-1,23567,"后"],[-1,24303,"一系列"],[1,24347,"。这些，"],[-1,24347,"，这些路"],[1,24353,"是"],[1,24355,"信息"],[1,24440,"有13个路由器"],[-1,24440,"University of Minnesota"],[-1,24472,"13个路由器"],[1,24479,"\n"],[1,24484,"\n"],[1,25176,"\n每个\n"],[1,25193,"者多个1个个或"],[1,25198,"。"],[1,25201,"若如果"],[1,25208,"t"],[1,25228,"信息发送"],[-1,25488,"而不是"],[1,25499,"所"],[1,25504,"一直"]],[25502,25502],[22506,22506]]],[1528791687485,["Re@Re.local",[[-1,25550,"使用的"]],[25553,25553],[25550,25550]]],[1528791689225,["Re@Re.local",[[1,25550,"使用的"]],[25550,25550],[25553,25553]]],[1528791691810,["Re@Re.local",[[-1,25548,"这里使用的"]],[25553,25553],[25548,25548]]],[1528791692339,["Re@Re.local",[[1,25548,"\n\n"]],[25548,25548],[25549,25549]]],[1528791704456,["Re@Re.local",[[-1,25549,"\n"],[1,25550,"这里用来确定最短路径的算法是\"\""]],[25549,25549],[25565,25565]]],[1528791708381,["Re@Re.local",[[1,25564,"Dijkstar"]],[25564,25564],[25572,25572]]],[1528791709258,["Re@Re.local",[[-1,25570,"ar"]],[25572,25572],[25570,25570]]],[1528791709625,["Re@Re.local",[[1,25570,"ra"]],[25570,25570],[25572,25572]]],[1528791720925,["Re@Re.local",[[1,25573,"算法"]],[25573,25573],[25575,25575]]],[1528791722363,["Re@Re.local",[[-1,25572,"\""]],[25573,25573],[25572,25572]]],[1528791724526,["Re@Re.local",[[-1,25563,"\""]],[25564,25564],[25563,25563]]],[1528791733281,["Re@Re.local",[[1,25573,"。Dijkstar算法是"]],[25573,25573],[25585,25585]]],[1528791807222,[null,[[-1,22506,"n l"],[1,22564,"。定义"],[-1,22567,"。定义"],[1,22572,"强连通"],[-1,22579,"通组件"],[1,22583,"*为："],[1,22613,"子"],[-1,22639,"子集中\n"],[1,22643,"。"],[1,22656,"量的"],[-1,22661,"量的\n"],[1,22664,"强连通"],[-1,22679," "],[1,22680,"\n"],[-1,22831,"一旦"],[1,22833,"\n\n"],[-1,23078,"\n"],[1,23079,"图"],[-1,23567,"\n"],[1,23568,"后"],[1,24303,"一系列"],[-1,24344,"。这些，"],[1,24348,"，这些路"],[-1,24350,"是"],[-1,24353,"信息"],[-1,24440,"有13个路由器"],[1,24447,"University of Minnesota"],[1,24456,"13个路由器"],[-1,24457,"\n"],[-1,24463,"\n"],[-1,25156,"\n每个\n"],[-1,25177,"者多个1个个或"],[-1,25189,"。"],[-1,25193,"若如果"],[-1,25203,"t"],[-1,25224,"信息发送"],[1,25488,"而不是"],[-1,25496,"所"],[-1,25502,"一直"]],[22506,22506],[25502,25502]]],[1528791807222,[null,[[1,22506,"n l"],[-1,22561,"。定义"],[1,22567,"。定义"],[-1,22569,"强连通"],[1,22579,"通组件"],[-1,22580,"*为："],[-1,22613,"子"],[1,22640,"子集中\n"],[-1,22640,"。"],[-1,22654,"量的"],[1,22661,"量的\n"],[-1,22661,"强连通"],[1,22679," "],[-1,22679,"\n"],[1,22831,"一旦"],[-1,22831,"\n\n"],[1,23078,"\n"],[-1,23078,"图"],[1,23567,"\n"],[-1,23567,"后"],[-1,24303,"一系列"],[1,24347,"。这些，"],[-1,24347,"，这些路"],[1,24353,"是"],[1,24355,"信息"],[1,24440,"有13个路由器"],[-1,24440,"University of Minnesota"],[-1,24472,"13个路由器"],[1,24479,"\n"],[1,24484,"\n"],[1,25176,"\n每个\n"],[1,25193,"者多个1个个或"],[1,25198,"。"],[1,25201,"若如果"],[1,25208,"t"],[1,25228,"信息发送"],[-1,25488,"而不是"],[1,25499,"所"],[1,25504,"一直"]],[25502,25502],[22506,22506]]],[1528791758523,["Re@Re.local",[[1,25585,"一种迭代算法，用来计算从每个"]],[25585,25585],[25599,25599]]],[1528791759703,["Re@Re.local",[[-1,25597,"每个"]],[25599,25599],[25597,25597]]],[1528791762712,["Re@Re.local",[[1,25597,"某个起点"]],[25597,25597],[25601,25601]]],[1528791763071,["Re@Re.local",[[-1,25599,"起点"]],[25601,25601],[25599,25599]]],[1528791775954,["Re@Re.local",[[1,25599,"起始节点到另一个"]],[25599,25599],[25607,25607]]],[1528791776497,["Re@Re.local",[[-1,25606,"个"]],[25607,25607],[25606,25606]]],[1528791777758,["Re@Re.local",[[1,25606,"节点"]],[25606,25606],[25608,25608]]],[1528791779395,["Re@Re.local",[[-1,25606,"节点"]],[25608,25608],[25606,25606]]],[1528791795890,["Re@Re.local",[[1,25606,"个节点的最短路径。"]],[25606,25606],[25615,25615]]],[1528791867262,[null,[[-1,22506,"n l"],[1,22564,"。定义"],[-1,22567,"。定义"],[1,22572,"强连通"],[-1,22579,"通组件"],[1,22583,"*为："],[1,22613,"子"],[-1,22639,"子集中\n"],[1,22643,"。"],[1,22656,"量的"],[-1,22661,"量的\n"],[1,22664,"强连通"],[-1,22679," "],[1,22680,"\n"],[-1,22831,"一旦"],[1,22833,"\n\n"],[-1,23078,"\n"],[1,23079,"图"],[-1,23567,"\n"],[1,23568,"后"],[1,24303,"一系列"],[-1,24344,"。这些，"],[1,24348,"，这些路"],[-1,24350,"是"],[-1,24353,"信息"],[-1,24440,"有13个路由器"],[1,24447,"University of Minnesota"],[1,24456,"13个路由器"],[-1,24457,"\n"],[-1,24463,"\n"],[-1,25156,"\n每个\n"],[-1,25177,"者多个1个个或"],[-1,25189,"。"],[-1,25193,"若如果"],[-1,25203,"t"],[-1,25224,"信息发送"],[1,25488,"而不是"],[-1,25496,"所"],[-1,25502,"一直"]],[22506,22506],[25502,25502]]],[1528791867262,[null,[[1,22506,"n l"],[-1,22561,"。定义"],[1,22567,"。定义"],[-1,22569,"强连通"],[1,22579,"通组件"],[-1,22580,"*为："],[-1,22613,"子"],[1,22640,"子集中\n"],[-1,22640,"。"],[-1,22654,"量的"],[1,22661,"量的\n"],[-1,22661,"强连通"],[1,22679," "],[-1,22679,"\n"],[1,22831,"一旦"],[-1,22831,"\n\n"],[1,23078,"\n"],[-1,23078,"图"],[1,23567,"\n"],[-1,23567,"后"],[-1,24303,"一系列"],[1,24347,"。这些，"],[-1,24347,"，这些路"],[1,24353,"是"],[1,24355,"信息"],[1,24440,"有13个路由器"],[-1,24440,"University of Minnesota"],[-1,24472,"13个路由器"],[1,24479,"\n"],[1,24484,"\n"],[1,25176,"\n每个\n"],[1,25193,"者多个1个个或"],[1,25198,"。"],[1,25201,"若如果"],[1,25208,"t"],[1,25228,"信息发送"],[-1,25488,"而不是"],[1,25499,"所"],[1,25504,"一直"]],[25502,25502],[22506,22506]]],[1528791812073,["Re@Re.local",[[1,25615,"这"]],[25615,25615],[25616,25616]]],[1528791812503,["Re@Re.local",[[-1,25615,"这"]],[25616,25616],[25615,25615]]],[1528791816049,["Re@Re.local",[[1,25615,"这也与深"]],[25615,25615],[25619,25619]]],[1528791816219,["Re@Re.local",[[-1,25618,"深"]],[25619,25619],[25618,25618]]],[1528791823031,["Re@Re.local",[[1,25618,"宽度优先搜索的结果比较类似。"]],[25618,25618],[25632,25632]]],[1528791823467,["Re@Re.local",[[1,25632,"\n\n"]],[25632,25632],[25633,25633]]],[1528791823681,["Re@Re.local",[[1,25634,"\n"]],[25633,25633],[25634,25634]]],[1528791862570,["Re@Re.local",[[-1,25634,"\n"],[1,25635,"为了跟踪从起始节点到每一个目的地的宗华"]],[25634,25634],[25653,25653]]],[1528791862875,["Re@Re.local",[[-1,25651,"宗华"]],[25653,25653],[25651,25651]]],[1528791863916,["Re@Re.local",[[1,25651,"总"]],[25651,25651],[25652,25652]]],[1528791927283,[null,[[-1,22506,"n l"],[1,22564,"。定义"],[-1,22567,"。定义"],[1,22572,"强连通"],[-1,22579,"通组件"],[1,22583,"*为："],[1,22613,"子"],[-1,22639,"子集中\n"],[1,22643,"。"],[1,22656,"量的"],[-1,22661,"量的\n"],[1,22664,"强连通"],[-1,22679," "],[1,22680,"\n"],[-1,22831,"一旦"],[1,22833,"\n\n"],[-1,23078,"\n"],[1,23079,"图"],[-1,23567,"\n"],[1,23568,"后"],[1,24303,"一系列"],[-1,24344,"。这些，"],[1,24348,"，这些路"],[-1,24350,"是"],[-1,24353,"信息"],[-1,24440,"有13个路由器"],[1,24447,"University of Minnesota"],[1,24456,"13个路由器"],[-1,24457,"\n"],[-1,24463,"\n"],[-1,25156,"\n每个\n"],[-1,25177,"者多个1个个或"],[-1,25189,"。"],[-1,25193,"若如果"],[-1,25203,"t"],[-1,25224,"信息发送"],[1,25488,"而不是"],[-1,25496,"所"],[-1,25502,"一直"]],[22506,22506],[25502,25502]]],[1528791927283,[null,[[1,22506,"n l"],[-1,22561,"。定义"],[1,22567,"。定义"],[-1,22569,"强连通"],[1,22579,"通组件"],[-1,22580,"*为："],[-1,22613,"子"],[1,22640,"子集中\n"],[-1,22640,"。"],[-1,22654,"量的"],[1,22661,"量的\n"],[-1,22661,"强连通"],[1,22679," "],[-1,22679,"\n"],[1,22831,"一旦"],[-1,22831,"\n\n"],[1,23078,"\n"],[-1,23078,"图"],[1,23567,"\n"],[-1,23567,"后"],[-1,24303,"一系列"],[1,24347,"。这些，"],[-1,24347,"，这些路"],[1,24353,"是"],[1,24355,"信息"],[1,24440,"有13个路由器"],[-1,24440,"University of Minnesota"],[-1,24472,"13个路由器"],[1,24479,"\n"],[1,24484,"\n"],[1,25176,"\n每个\n"],[1,25193,"者多个1个个或"],[1,25198,"。"],[1,25201,"若如果"],[1,25208,"t"],[1,25228,"信息发送"],[-1,25488,"而不是"],[1,25499,"所"],[1,25504,"一直"]],[25502,25502],[22506,22506]]],[1528791885326,["Re@Re.local",[[1,25652,"权重，使用了一个"]],[25652,25652],[25660,25660]]],[1528791886499,["Re@Re.local",[[-1,25655,"使用了一个"]],[25660,25660],[25655,25655]]],[1528791911593,["Re@Re.local",[[1,25655,"在Vertex类中使用了dist实例变量。dist包含了最小权重路径"]],[25655,25655],[25689,25689]]],[1528791920450,["Re@Re.local",[[1,25683,"从起点到"]],[25683,25683],[25687,25687]]],[1528791987261,[null,[[-1,22506,"n l"],[1,22564,"。定义"],[-1,22567,"。定义"],[1,22572,"强连通"],[-1,22579,"通组件"],[1,22583,"*为："],[1,22613,"子"],[-1,22639,"子集中\n"],[1,22643,"。"],[1,22656,"量的"],[-1,22661,"量的\n"],[1,22664,"强连通"],[-1,22679," "],[1,22680,"\n"],[-1,22831,"一旦"],[1,22833,"\n\n"],[-1,23078,"\n"],[1,23079,"图"],[-1,23567,"\n"],[1,23568,"后"],[1,24303,"一系列"],[-1,24344,"。这些，"],[1,24348,"，这些路"],[-1,24350,"是"],[-1,24353,"信息"],[-1,24440,"有13个路由器"],[1,24447,"University of Minnesota"],[1,24456,"13个路由器"],[-1,24457,"\n"],[-1,24463,"\n"],[-1,25156,"\n每个\n"],[-1,25177,"者多个1个个或"],[-1,25189,"。"],[-1,25193,"若如果"],[-1,25203,"t"],[-1,25224,"信息发送"],[1,25488,"而不是"],[-1,25496,"所"],[-1,25502,"一直"]],[22506,22506],[25502,25502]]],[1528791987261,[null,[[1,22506,"n l"],[-1,22561,"。定义"],[1,22567,"。定义"],[-1,22569,"强连通"],[1,22579,"通组件"],[-1,22580,"*为："],[-1,22613,"子"],[1,22640,"子集中\n"],[-1,22640,"。"],[-1,22654,"量的"],[1,22661,"量的\n"],[-1,22661,"强连通"],[1,22679," "],[-1,22679,"\n"],[1,22831,"一旦"],[-1,22831,"\n\n"],[1,23078,"\n"],[-1,23078,"图"],[1,23567,"\n"],[-1,23567,"后"],[-1,24303,"一系列"],[1,24347,"。这些，"],[-1,24347,"，这些路"],[1,24353,"是"],[1,24355,"信息"],[1,24440,"有13个路由器"],[-1,24440,"University of Minnesota"],[-1,24472,"13个路由器"],[1,24479,"\n"],[1,24484,"\n"],[1,25176,"\n每个\n"],[1,25193,"者多个1个个或"],[1,25198,"。"],[1,25201,"若如果"],[1,25208,"t"],[1,25228,"信息发送"],[-1,25488,"而不是"],[1,25499,"所"],[1,25504,"一直"]],[25502,25502],[22506,22506]]],[1528791928801,["Re@Re.local",[[1,25687,"目的地"]],[25687,25687],[25690,25690]]],[1528791948460,["Re@Re.local",[[-1,25680,"包含"]],[25682,25682],[25680,25680]]],[1528791949916,["Re@Re.local",[[1,25680,"保存"]],[25680,25680],[25682,25682]]],[1528791956023,["Re@Re.local",[[1,25696,"的权重值。"]],[25696,25696],[25701,25701]]],[1528791959864,["Re@Re.local",[[1,25697,"总"]],[25697,25697],[25698,25698]]],[1528791974962,["Re@Re.local",[[1,25702,"算法将图中的每个顶点迭代1次。"]],[25702,25702],[25717,25717]]],[1528791977460,["Re@Re.local",[[-1,25716,"。"]],[25717,25717],[25716,25716]]],[1528791983405,["Re@Re.local",[[1,25716,"，然而迭代"]],[25716,25716],[25721,25721]]],[1528791984172,["Re@Re.local",[[-1,25719,"迭代"]],[25721,25721],[25719,25719]]],[1528791986680,["Re@Re.local",[[1,25719,"对顶点"]],[25719,25719],[25722,25722]]],[1528792047368,[null,[[-1,22506,"n l"],[1,22564,"。定义"],[-1,22567,"。定义"],[1,22572,"强连通"],[-1,22579,"通组件"],[1,22583,"*为："],[1,22613,"子"],[-1,22639,"子集中\n"],[1,22643,"。"],[1,22656,"量的"],[-1,22661,"量的\n"],[1,22664,"强连通"],[-1,22679," "],[1,22680,"\n"],[-1,22831,"一旦"],[1,22833,"\n\n"],[-1,23078,"\n"],[1,23079,"图"],[-1,23567,"\n"],[1,23568,"后"],[1,24303,"一系列"],[-1,24344,"。这些，"],[1,24348,"，这些路"],[-1,24350,"是"],[-1,24353,"信息"],[-1,24440,"有13个路由器"],[1,24447,"University of Minnesota"],[1,24456,"13个路由器"],[-1,24457,"\n"],[-1,24463,"\n"],[-1,25156,"\n每个\n"],[-1,25177,"者多个1个个或"],[-1,25189,"。"],[-1,25193,"若如果"],[-1,25203,"t"],[-1,25224,"信息发送"],[1,25488,"而不是"],[-1,25496,"所"],[-1,25502,"一直"]],[22506,22506],[25502,25502]]],[1528792047368,[null,[[1,22506,"n l"],[-1,22561,"。定义"],[1,22567,"。定义"],[-1,22569,"强连通"],[1,22579,"通组件"],[-1,22580,"*为："],[-1,22613,"子"],[1,22640,"子集中\n"],[-1,22640,"。"],[-1,22654,"量的"],[1,22661,"量的\n"],[-1,22661,"强连通"],[1,22679," "],[-1,22679,"\n"],[1,22831,"一旦"],[-1,22831,"\n\n"],[1,23078,"\n"],[-1,23078,"图"],[1,23567,"\n"],[-1,23567,"后"],[-1,24303,"一系列"],[1,24347,"。这些，"],[-1,24347,"，这些路"],[1,24353,"是"],[1,24355,"信息"],[1,24440,"有13个路由器"],[-1,24440,"University of Minnesota"],[-1,24472,"13个路由器"],[1,24479,"\n"],[1,24484,"\n"],[1,25176,"\n每个\n"],[1,25193,"者多个1个个或"],[1,25198,"。"],[1,25201,"若如果"],[1,25208,"t"],[1,25228,"信息发送"],[-1,25488,"而不是"],[1,25499,"所"],[1,25504,"一直"]],[25502,25502],[22506,22506]]],[1528792009000,["Re@Re.local",[[1,25724,"迭代的顺序是通过优先队列控制的。用来却惹 "]],[25724,25724],[25745,25745]]],[1528792010028,["Re@Re.local",[[-1,25742,"却惹 "]],[25745,25745],[25742,25742]]],[1528792011140,["Re@Re.local",[[1,25742,"确认"]],[25742,25742],[25744,25744]]],[1528792018426,["Re@Re.local",[[1,25697,"当前"]],[25697,25697],[25699,25699]]],[1528792027786,["Re@Re.local",[[-1,25742,"用来确认"]],[25746,25746],[25742,25742]]],[1528792043114,["Re@Re.local",[[1,25742,"确定对象在优先队列中吮血的"]],[25742,25742],[25755,25755]]],[1528792044323,["Re@Re.local",[[-1,25751,"中吮血的"]],[25755,25755],[25751,25751]]],[1528792046870,["Re@Re.local",[[1,25751,"中顺序的"]],[25751,25751],[25755,25755]]],[1528792107243,[null,[[-1,22506,"n l"],[1,22564,"。定义"],[-1,22567,"。定义"],[1,22572,"强连通"],[-1,22579,"通组件"],[1,22583,"*为："],[1,22613,"子"],[-1,22639,"子集中\n"],[1,22643,"。"],[1,22656,"量的"],[-1,22661,"量的\n"],[1,22664,"强连通"],[-1,22679," "],[1,22680,"\n"],[-1,22831,"一旦"],[1,22833,"\n\n"],[-1,23078,"\n"],[1,23079,"图"],[-1,23567,"\n"],[1,23568,"后"],[1,24303,"一系列"],[-1,24344,"。这些，"],[1,24348,"，这些路"],[-1,24350,"是"],[-1,24353,"信息"],[-1,24440,"有13个路由器"],[1,24447,"University of Minnesota"],[1,24456,"13个路由器"],[-1,24457,"\n"],[-1,24463,"\n"],[-1,25156,"\n每个\n"],[-1,25177,"者多个1个个或"],[-1,25189,"。"],[-1,25193,"若如果"],[-1,25203,"t"],[-1,25224,"信息发送"],[1,25488,"而不是"],[-1,25496,"所"],[-1,25502,"一直"],[1,25724,"进行"],[-1,25740,"用来"]],[22506,22506],[25740,25740]]],[1528792107243,[null,[[1,22506,"n l"],[-1,22561,"。定义"],[1,22567,"。定义"],[-1,22569,"强连通"],[1,22579,"通组件"],[-1,22580,"*为："],[-1,22613,"子"],[1,22640,"子集中\n"],[-1,22640,"。"],[-1,22654,"量的"],[1,22661,"量的\n"],[-1,22661,"强连通"],[1,22679," "],[-1,22679,"\n"],[1,22831,"一旦"],[-1,22831,"\n\n"],[1,23078,"\n"],[-1,23078,"图"],[1,23567,"\n"],[-1,23567,"后"],[-1,24303,"一系列"],[1,24347,"。这些，"],[-1,24347,"，这些路"],[1,24353,"是"],[1,24355,"信息"],[1,24440,"有13个路由器"],[-1,24440,"University of Minnesota"],[-1,24472,"13个路由器"],[1,24479,"\n"],[1,24484,"\n"],[1,25176,"\n每个\n"],[1,25193,"者多个1个个或"],[1,25198,"。"],[1,25201,"若如果"],[1,25208,"t"],[1,25228,"信息发送"],[-1,25488,"而不是"],[1,25499,"所"],[1,25504,"一直"],[-1,25724,"进行"],[1,25742,"用来"]],[25740,25740],[22506,22506]]],[1528792061189,["Re@Re.local",[[1,25755,"值是dist。当顶点被地"]],[25755,25755],[25767,25767]]],[1528792064675,["Re@Re.local",[[-1,25762,"当顶点被地"]],[25767,25767],[25762,25762]]],[1528792074815,["Re@Re.local",[[1,25762,"dist被初始化为一个非常大的值。"]],[25762,25762],[25779,25779]]],[1528792082450,["Re@Re.local",[[1,25779,"\n\n"]],[25779,25779],[25780,25780]]],[1528792082654,["Re@Re.local",[[1,25781,"\n"]],[25780,25780],[25781,25781]]],[1528792090584,["Re@Re.local",[[-1,25781,"\n"],[1,25782,"从理论上来说，可以将ist"]],[25781,25781],[25794,25794]]],[1528792091889,["Re@Re.local",[[-1,25791,"ist"]],[25794,25794],[25791,25791]]],[1528792105497,["Re@Re.local",[[1,25791,"dist设置为无限大，但实际上设置为"]],[25791,25791],[25809,25809]]],[1528792167297,[null,[[-1,22506,"n l"],[1,22564,"。定义"],[-1,22567,"。定义"],[1,22572,"强连通"],[-1,22579,"通组件"],[1,22583,"*为："],[1,22613,"子"],[-1,22639,"子集中\n"],[1,22643,"。"],[1,22656,"量的"],[-1,22661,"量的\n"],[1,22664,"强连通"],[-1,22679," "],[1,22680,"\n"],[-1,22831,"一旦"],[1,22833,"\n\n"],[-1,23078,"\n"],[1,23079,"图"],[-1,23567,"\n"],[1,23568,"后"],[1,24303,"一系列"],[-1,24344,"。这些，"],[1,24348,"，这些路"],[-1,24350,"是"],[-1,24353,"信息"],[-1,24440,"有13个路由器"],[1,24447,"University of Minnesota"],[1,24456,"13个路由器"],[-1,24457,"\n"],[-1,24463,"\n"],[-1,25156,"\n每个\n"],[-1,25177,"者多个1个个或"],[-1,25189,"。"],[-1,25193,"若如果"],[-1,25203,"t"],[-1,25224,"信息发送"],[1,25488,"而不是"],[-1,25496,"所"],[-1,25502,"一直"],[1,25724,"进行"],[-1,25740,"用来"]],[22506,22506],[25740,25740]]],[1528792167297,[null,[[1,22506,"n l"],[-1,22561,"。定义"],[1,22567,"。定义"],[-1,22569,"强连通"],[1,22579,"通组件"],[-1,22580,"*为："],[-1,22613,"子"],[1,22640,"子集中\n"],[-1,22640,"。"],[-1,22654,"量的"],[1,22661,"量的\n"],[-1,22661,"强连通"],[1,22679," "],[-1,22679,"\n"],[1,22831,"一旦"],[-1,22831,"\n\n"],[1,23078,"\n"],[-1,23078,"图"],[1,23567,"\n"],[-1,23567,"后"],[-1,24303,"一系列"],[1,24347,"。这些，"],[-1,24347,"，这些路"],[1,24353,"是"],[1,24355,"信息"],[1,24440,"有13个路由器"],[-1,24440,"University of Minnesota"],[-1,24472,"13个路由器"],[1,24479,"\n"],[1,24484,"\n"],[1,25176,"\n每个\n"],[1,25193,"者多个1个个或"],[1,25198,"。"],[1,25201,"若如果"],[1,25208,"t"],[1,25228,"信息发送"],[-1,25488,"而不是"],[1,25499,"所"],[1,25504,"一直"],[-1,25724,"进行"],[1,25742,"用来"]],[25740,25740],[22506,22506]]],[1528792135136,["Re@Re.local",[[1,25809,"当前问题的上界值即可。"]],[25809,25809],[25820,25820]]],[1528792139109,["Re@Re.local",[[1,25814,"某个"]],[25814,25814],[25816,25816]]],[1528792148764,["Re@Re.local",[[1,25822,"\n\n"]],[25822,25822],[25823,25823]]],[1528792148974,["Re@Re.local",[[1,25824,"\n"]],[25823,25823],[25824,25824]]],[1528792161198,["Re@Re.local",[[-1,25824,"\n"],[1,25825,"Dijkstar算法如代码1所示。当算法哇"]],[25824,25824],[25845,25845]]],[1528792161589,["Re@Re.local",[[-1,25844,"哇"]],[25845,25845],[25844,25844]]],[1528792163043,["Re@Re.local",[[1,25844,"完成"]],[25844,25844],[25846,25846]]],[1528792166154,["Re@Re.local",[[-1,25844,"完成"]],[25846,25846],[25844,25844]]],[1528792228293,[null,[[-1,22506,"n l"],[1,22564,"。定义"],[-1,22567,"。定义"],[1,22572,"强连通"],[-1,22579,"通组件"],[1,22583,"*为："],[1,22613,"子"],[-1,22639,"子集中\n"],[1,22643,"。"],[1,22656,"量的"],[-1,22661,"量的\n"],[1,22664,"强连通"],[-1,22679," "],[1,22680,"\n"],[-1,22831,"一旦"],[1,22833,"\n\n"],[-1,23078,"\n"],[1,23079,"图"],[-1,23567,"\n"],[1,23568,"后"],[1,24303,"一系列"],[-1,24344,"。这些，"],[1,24348,"，这些路"],[-1,24350,"是"],[-1,24353,"信息"],[-1,24440,"有13个路由器"],[1,24447,"University of Minnesota"],[1,24456,"13个路由器"],[-1,24457,"\n"],[-1,24463,"\n"],[-1,25156,"\n每个\n"],[-1,25177,"者多个1个个或"],[-1,25189,"。"],[-1,25193,"若如果"],[-1,25203,"t"],[-1,25224,"信息发送"],[1,25488,"而不是"],[-1,25496,"所"],[-1,25502,"一直"],[1,25724,"进行"],[-1,25740,"用来"]],[22506,22506],[25740,25740]]],[1528792228294,[null,[[1,22506,"n l"],[-1,22561,"。定义"],[1,22567,"。定义"],[-1,22569,"强连通"],[1,22579,"通组件"],[-1,22580,"*为："],[-1,22613,"子"],[1,22640,"子集中\n"],[-1,22640,"。"],[-1,22654,"量的"],[1,22661,"量的\n"],[-1,22661,"强连通"],[1,22679," "],[-1,22679,"\n"],[1,22831,"一旦"],[-1,22831,"\n\n"],[1,23078,"\n"],[-1,23078,"图"],[1,23567,"\n"],[-1,23567,"后"],[-1,24303,"一系列"],[1,24347,"。这些，"],[-1,24347,"，这些路"],[1,24353,"是"],[1,24355,"信息"],[1,24440,"有13个路由器"],[-1,24440,"University of Minnesota"],[-1,24472,"13个路由器"],[1,24479,"\n"],[1,24484,"\n"],[1,25176,"\n每个\n"],[1,25193,"者多个1个个或"],[1,25198,"。"],[1,25201,"若如果"],[1,25208,"t"],[1,25228,"信息发送"],[-1,25488,"而不是"],[1,25499,"所"],[1,25504,"一直"],[-1,25724,"进行"],[1,25742,"用来"]],[25740,25740],[22506,22506]]],[1528792169873,["Re@Re.local",[[1,25846,"完毕时，"]],[25846,25846],[25850,25850]]],[1528792590164,[null,[[-1,22506,"n l"],[1,22564,"。定义"],[-1,22567,"。定义"],[1,22572,"强连通"],[-1,22579,"通组件"],[1,22583,"*为："],[1,22613,"子"],[-1,22639,"子集中\n"],[1,22643,"。"],[1,22656,"量的"],[-1,22661,"量的\n"],[1,22664,"强连通"],[-1,22679," "],[1,22680,"\n"],[-1,22831,"一旦"],[1,22833,"\n\n"],[-1,23078,"\n"],[1,23079,"图"],[-1,23567,"\n"],[1,23568,"后"],[1,24303,"一系列"],[-1,24344,"。这些，"],[1,24348,"，这些路"],[-1,24350,"是"],[-1,24353,"信息"],[-1,24440,"有13个路由器"],[1,24447,"University of Minnesota"],[1,24456,"13个路由器"],[-1,24457,"\n"],[-1,24463,"\n"],[-1,25156,"\n每个\n"],[-1,25177,"者多个1个个或"],[-1,25189,"。"],[-1,25193,"若如果"],[-1,25203,"t"],[-1,25224,"信息发送"],[1,25488,"而不是"],[-1,25496,"所"],[-1,25502,"一直"],[1,25724,"进行"],[-1,25740,"用来"],[-1,25844,""],[1,25844,"运行"]],[22506,22506],[25846,25846]]],[1528792590164,[null,[[1,22506,"n l"],[-1,22561,"。定义"],[1,22567,"。定义"],[-1,22569,"强连通"],[1,22579,"通组件"],[-1,22580,"*为："],[-1,22613,"子"],[1,22640,"子集中\n"],[-1,22640,"。"],[-1,22654,"量的"],[1,22661,"量的\n"],[-1,22661,"强连通"],[1,22679," "],[-1,22679,"\n"],[1,22831,"一旦"],[-1,22831,"\n\n"],[1,23078,"\n"],[-1,23078,"图"],[1,23567,"\n"],[-1,23567,"后"],[-1,24303,"一系列"],[1,24347,"。这些，"],[-1,24347,"，这些路"],[1,24353,"是"],[1,24355,"信息"],[1,24440,"有13个路由器"],[-1,24440,"University of Minnesota"],[-1,24472,"13个路由器"],[1,24479,"\n"],[1,24484,"\n"],[1,25176,"\n每个\n"],[1,25193,"者多个1个个或"],[1,25198,"。"],[1,25201,"若如果"],[1,25208,"t"],[1,25228,"信息发送"],[-1,25488,"而不是"],[1,25499,"所"],[1,25504,"一直"],[-1,25724,"进行"],[1,25742,"用来"],[1,25844,""],[-1,25844,"运行"]],[25846,25846],[22506,22506]]],[1528792536429,["Re@Re.local",[[1,25850,"ju"]],[25850,25850],[25852,25852]]],[1528792537019,["Re@Re.local",[[-1,25850,"ju"]],[25852,25852],[25850,25850]]],[1528792539722,["Re@Re.local",[[1,25850,"距离"]],[25850,25850],[25852,25852]]],[1528792650178,[null,[[-1,22506,"n l"],[1,22564,"。定义"],[-1,22567,"。定义"],[1,22572,"强连通"],[-1,22579,"通组件"],[1,22583,"*为："],[1,22613,"子"],[-1,22639,"子集中\n"],[1,22643,"。"],[1,22656,"量的"],[-1,22661,"量的\n"],[1,22664,"强连通"],[-1,22679," "],[1,22680,"\n"],[-1,22831,"一旦"],[1,22833,"\n\n"],[-1,23078,"\n"],[1,23079,"图"],[-1,23567,"\n"],[1,23568,"后"],[1,24303,"一系列"],[-1,24344,"。这些，"],[1,24348,"，这些路"],[-1,24350,"是"],[-1,24353,"信息"],[-1,24440,"有13个路由器"],[1,24447,"University of Minnesota"],[1,24456,"13个路由器"],[-1,24457,"\n"],[-1,24463,"\n"],[-1,25156,"\n每个\n"],[-1,25177,"者多个1个个或"],[-1,25189,"。"],[-1,25193,"若如果"],[-1,25203,"t"],[-1,25224,"信息发送"],[1,25488,"而不是"],[-1,25496,"所"],[-1,25502,"一直"],[1,25724,"进行"],[-1,25740,"用来"],[1,25844,"运行"],[-1,25848,"ju"]],[22506,22506],[25848,25848]]],[1528792650178,[null,[[1,22506,"n l"],[-1,22561,"。定义"],[1,22567,"。定义"],[-1,22569,"强连通"],[1,22579,"通组件"],[-1,22580,"*为："],[-1,22613,"子"],[1,22640,"子集中\n"],[-1,22640,"。"],[-1,22654,"量的"],[1,22661,"量的\n"],[-1,22661,"强连通"],[1,22679," "],[-1,22679,"\n"],[1,22831,"一旦"],[-1,22831,"\n\n"],[1,23078,"\n"],[-1,23078,"图"],[1,23567,"\n"],[-1,23567,"后"],[-1,24303,"一系列"],[1,24347,"。这些，"],[-1,24347,"，这些路"],[1,24353,"是"],[1,24355,"信息"],[1,24440,"有13个路由器"],[-1,24440,"University of Minnesota"],[-1,24472,"13个路由器"],[1,24479,"\n"],[1,24484,"\n"],[1,25176,"\n每个\n"],[1,25193,"者多个1个个或"],[1,25198,"。"],[1,25201,"若如果"],[1,25208,"t"],[1,25228,"信息发送"],[-1,25488,"而不是"],[1,25499,"所"],[1,25504,"一直"],[-1,25724,"进行"],[1,25742,"用来"],[-1,25844,"运行"],[1,25850,"ju"]],[25848,25848],[22506,22506]]],[1528792594689,["Re@Re.local",[[-1,25850,"距离"]],[25852,25852],[25850,25850]]],[1528792596640,["Re@Re.local",[[1,25850,"各个记"]],[25850,25850],[25853,25853]]],[1528792597091,["Re@Re.local",[[-1,25850,"各个记"]],[25853,25853],[25850,25850]]],[1528792600776,["Re@Re.local",[[1,25850,"图中各个俩"]],[25850,25850],[25855,25855]]],[1528792600878,["Re@Re.local",[[-1,25854,"俩"]],[25855,25855],[25854,25854]]],[1528792617713,["Re@Re.local",[[1,25854,"顶点的dist都被设置为前驱连接？"]],[25854,25854],[25871,25871]]],[1528792618406,["Re@Re.local",[[-1,25870,"？"]],[25871,25871],[25870,25870]]],[1528792620626,["Re@Re.local",[[1,25870,"（？）。"]],[25870,25870],[25874,25874]]],[1528792621004,["Re@Re.local",[[1,25874,"\n\n"]],[25874,25874],[25875,25875]]],[1528792622276,["Re@Re.local",[[1,25876,"\n"]],[25875,25875],[25876,25876]]],[1528792625120,["Re@Re.local",[[-1,25876,"\n"],[1,25877,"**代码1**"]],[25876,25876],[25883,25883]]],[1528792625372,["Re@Re.local",[[1,25883,"\n\n"]],[25883,25883],[25884,25884]]],[1528792625679,["Re@Re.local",[[1,25885,"\n"]],[25884,25884],[25885,25885]]],[1528792631375,["Re@Re.local",[[-1,25885,"\n"]],[25885,25885],[25884,25884]]],[1528792632890,["Re@Re.local",[[-1,25884,"\n"],[1,25885,"```p"]],[25884,25884],[25888,25888]]],[1528792633366,["Re@Re.local",[[-1,25887,"p"]],[25888,25888],[25887,25887]]],[1528792634580,["Re@Re.local",[[1,25887,"Python"]],[25887,25887],[25893,25893]]],[1528792635132,["Re@Re.local",[[1,25893,"\n\nfrom pythonds.graphs import PriorityQueue, Graph, Vertex\ndef dijkstra(aGraph,start):\n    pq = PriorityQueue()\n    start.setDistance(0)\n    pq.buildHeap([(v.getDistance(),v) for v in aGraph])\n    while not pq.isEmpty():\n        currentVert = pq.delMin()\n        for nextVert in currentVert.getConnections():\n            newDist = currentVert.getDistance() \\\n                    + currentVert.getWeight(nextVert)\n            if newDist < nextVert.getDistance():\n                nextVert.setDistance( newDist )\n                nextVert.setPred(currentVert)\n                pq.decreaseKey(nextVert,newDist)"]],[25893,25893],[26496,26496]]],[1528792635236,["Re@Re.local",[[1,26497,"\n"]],[26496,26496],[26497,26497]]],[1528792635933,["Re@Re.local",[[-1,26497,"\n"],[1,26498,"```"]],[26497,26497],[26500,26500]]],[1528792636274,["Re@Re.local",[[1,26500,"\n\n"]],[26500,26500],[26501,26501]]],[1528792774675,[null,[[-1,22506,"n l"],[1,22564,"。定义"],[-1,22567,"。定义"],[1,22572,"强连通"],[-1,22579,"通组件"],[1,22583,"*为："],[1,22613,"子"],[-1,22639,"子集中\n"],[1,22643,"。"],[1,22656,"量的"],[-1,22661,"量的\n"],[1,22664,"强连通"],[-1,22679," "],[1,22680,"\n"],[-1,22831,"一旦"],[1,22833,"\n\n"],[-1,23078,"\n"],[1,23079,"图"],[-1,23567,"\n"],[1,23568,"后"],[1,24303,"一系列"],[-1,24344,"。这些，"],[1,24348,"，这些路"],[-1,24350,"是"],[-1,24353,"信息"],[-1,24440,"有13个路由器"],[1,24447,"University of Minnesota"],[1,24456,"13个路由器"],[-1,24457,"\n"],[-1,24463,"\n"],[-1,25156,"\n每个\n"],[-1,25177,"者多个1个个或"],[-1,25189,"。"],[-1,25193,"若如果"],[-1,25203,"t"],[-1,25224,"信息发送"],[1,25488,"而不是"],[-1,25496,"所"],[-1,25502,"一直"],[1,25724,"进行"],[-1,25740,"用来"],[1,25844,"运行"],[-1,25848,"ju"],[-1,25894,"\n"],[-1,26497,""],[1,26497,"\n"]],[22506,22506],[26498,26498]]],[1528792774675,[null,[[1,22506,"n l"],[-1,22561,"。定义"],[1,22567,"。定义"],[-1,22569,"强连通"],[1,22579,"通组件"],[-1,22580,"*为："],[-1,22613,"子"],[1,22640,"子集中\n"],[-1,22640,"。"],[-1,22654,"量的"],[1,22661,"量的\n"],[-1,22661,"强连通"],[1,22679," "],[-1,22679,"\n"],[1,22831,"一旦"],[-1,22831,"\n\n"],[1,23078,"\n"],[-1,23078,"图"],[1,23567,"\n"],[-1,23567,"后"],[-1,24303,"一系列"],[1,24347,"。这些，"],[-1,24347,"，这些路"],[1,24353,"是"],[1,24355,"信息"],[1,24440,"有13个路由器"],[-1,24440,"University of Minnesota"],[-1,24472,"13个路由器"],[1,24479,"\n"],[1,24484,"\n"],[1,25176,"\n每个\n"],[1,25193,"者多个1个个或"],[1,25198,"。"],[1,25201,"若如果"],[1,25208,"t"],[1,25228,"信息发送"],[-1,25488,"而不是"],[1,25499,"所"],[1,25504,"一直"],[-1,25724,"进行"],[1,25742,"用来"],[-1,25844,"运行"],[1,25850,"ju"],[1,25894,"\n"],[1,26496,""],[-1,26496,"\n"]],[26498,26498],[22506,22506]]],[1528792732455,["Re@Re.local",[[-1,26501,"\n"],[1,26502,"Dijjkstar"]],[26501,26501],[26510,26510]]],[1528792733031,["Re@Re.local",[[-1,26508,"ar"]],[26510,26510],[26508,26508]]],[1528792740958,["Re@Re.local",[[1,26508,"ra算法使用了优先队列，读者可坑"]],[26508,26508],[26524,26524]]],[1528792741216,["Re@Re.local",[[-1,26522,"可坑"]],[26524,26524],[26522,26522]]],[1528792748570,["Re@Re.local",[[1,26522,"可能还记得优先队列是基于对"]],[26522,26522],[26535,26535]]],[1528792749338,["Re@Re.local",[[-1,26532,"基于对"]],[26535,26535],[26532,26532]]],[1528792753430,["Re@Re.local",[[1,26532,"第三章实现的"]],[26532,26532],[26538,26538]]],[1528792753997,["Re@Re.local",[[-1,26537,"的"]],[26538,26538],[26537,26537]]],[1528792756772,["Re@Re.local",[[1,26532,"基于"]],[26532,26532],[26534,26534]]],[1528792770374,["Re@Re.local",[[1,26539,"的堆的。在"]],[26539,26539],[26544,26544]]],[1528792770547,["Re@Re.local",[[-1,26543,"在"]],[26544,26544],[26543,26543]]],[1528792773885,["Re@Re.local",[[1,26543,"Di"]],[26543,26543],[26545,26545]]],[1528792834706,[null,[[-1,22506,"n l"],[1,22564,"。定义"],[-1,22567,"。定义"],[1,22572,"强连通"],[-1,22579,"通组件"],[1,22583,"*为："],[1,22613,"子"],[-1,22639,"子集中\n"],[1,22643,"。"],[1,22656,"量的"],[-1,22661,"量的\n"],[1,22664,"强连通"],[-1,22679," "],[1,22680,"\n"],[-1,22831,"一旦"],[1,22833,"\n\n"],[-1,23078,"\n"],[1,23079,"图"],[-1,23567,"\n"],[1,23568,"后"],[1,24303,"一系列"],[-1,24344,"。这些，"],[1,24348,"，这些路"],[-1,24350,"是"],[-1,24353,"信息"],[-1,24440,"有13个路由器"],[1,24447,"University of Minnesota"],[1,24456,"13个路由器"],[-1,24457,"\n"],[-1,24463,"\n"],[-1,25156,"\n每个\n"],[-1,25177,"者多个1个个或"],[-1,25189,"。"],[-1,25193,"若如果"],[-1,25203,"t"],[-1,25224,"信息发送"],[1,25488,"而不是"],[-1,25496,"所"],[-1,25502,"一直"],[1,25724,"进行"],[-1,25740,"用来"],[1,25844,"运行"],[-1,25848,"ju"],[-1,25894,"\n"],[-1,26497,""],[1,26497,"\n"]],[22506,22506],[26498,26498]]],[1528792834706,[null,[[1,22506,"n l"],[-1,22561,"。定义"],[1,22567,"。定义"],[-1,22569,"强连通"],[1,22579,"通组件"],[-1,22580,"*为："],[-1,22613,"子"],[1,22640,"子集中\n"],[-1,22640,"。"],[-1,22654,"量的"],[1,22661,"量的\n"],[-1,22661,"强连通"],[1,22679," "],[-1,22679,"\n"],[1,22831,"一旦"],[-1,22831,"\n\n"],[1,23078,"\n"],[-1,23078,"图"],[1,23567,"\n"],[-1,23567,"后"],[-1,24303,"一系列"],[1,24347,"。这些，"],[-1,24347,"，这些路"],[1,24353,"是"],[1,24355,"信息"],[1,24440,"有13个路由器"],[-1,24440,"University of Minnesota"],[-1,24472,"13个路由器"],[1,24479,"\n"],[1,24484,"\n"],[1,25176,"\n每个\n"],[1,25193,"者多个1个个或"],[1,25198,"。"],[1,25201,"若如果"],[1,25208,"t"],[1,25228,"信息发送"],[-1,25488,"而不是"],[1,25499,"所"],[1,25504,"一直"],[-1,25724,"进行"],[1,25742,"用来"],[-1,25844,"运行"],[1,25850,"ju"],[1,25894,"\n"],[1,26496,""],[-1,26496,"\n"]],[26498,26498],[22506,22506]]],[1528792774998,["Re@Re.local",[[-1,26543,"Di"]],[26545,26545],[26543,26543]]],[1528792801072,["Re@Re.local",[[1,26543,"用于Dijkstra算法的实现和第三章中的简单实现有相当差别。首先，PriorityQueque"]],[26543,26543],[26591,26591]]],[1528792802295,["Re@Re.local",[[-1,26588,"que"]],[26591,26591],[26588,26588]]],[1528792815286,["Re@Re.local",[[1,26588,"ue类存储的是键的元祖，"]],[26588,26588],[26600,26600]]],[1528792817585,["Re@Re.local",[[-1,26597,"元祖，"]],[26600,26600],[26597,26597]]],[1528792819223,["Re@Re.local",[[1,26597,"元"]],[26597,26597],[26598,26598]]],[1528792822066,["Re@Re.local",[[-1,26594,"是键的元"]],[26598,26598],[26594,26594]]],[1528792826029,["Re@Re.local",[[1,26594,"键-值堆组"]],[26594,26594],[26599,26599]]],[1528792826418,["Re@Re.local",[[-1,26597,"堆组"]],[26599,26599],[26597,26597]]],[1528792834315,["Re@Re.local",[[1,26597,"对组成的元组。对于"]],[26597,26597],[26606,26606]]],[1528792896650,[null,[[-1,22506,"n l"],[1,22564,"。定义"],[-1,22567,"。定义"],[1,22572,"强连通"],[-1,22579,"通组件"],[1,22583,"*为："],[1,22613,"子"],[-1,22639,"子集中\n"],[1,22643,"。"],[1,22656,"量的"],[-1,22661,"量的\n"],[1,22664,"强连通"],[-1,22679," "],[1,22680,"\n"],[-1,22831,"一旦"],[1,22833,"\n\n"],[-1,23078,"\n"],[1,23079,"图"],[-1,23567,"\n"],[1,23568,"后"],[1,24303,"一系列"],[-1,24344,"。这些，"],[1,24348,"，这些路"],[-1,24350,"是"],[-1,24353,"信息"],[-1,24440,"有13个路由器"],[1,24447,"University of Minnesota"],[1,24456,"13个路由器"],[-1,24457,"\n"],[-1,24463,"\n"],[-1,25156,"\n每个\n"],[-1,25177,"者多个1个个或"],[-1,25189,"。"],[-1,25193,"若如果"],[-1,25203,"t"],[-1,25224,"信息发送"],[1,25488,"而不是"],[-1,25496,"所"],[-1,25502,"一直"],[1,25724,"进行"],[-1,25740,"用来"],[1,25844,"运行"],[-1,25848,"ju"],[-1,25894,"\n"],[-1,26497,""],[1,26497,"\n"]],[22506,22506],[26498,26498]]],[1528792896650,[null,[[1,22506,"n l"],[-1,22561,"。定义"],[1,22567,"。定义"],[-1,22569,"强连通"],[1,22579,"通组件"],[-1,22580,"*为："],[-1,22613,"子"],[1,22640,"子集中\n"],[-1,22640,"。"],[-1,22654,"量的"],[1,22661,"量的\n"],[-1,22661,"强连通"],[1,22679," "],[-1,22679,"\n"],[1,22831,"一旦"],[-1,22831,"\n\n"],[1,23078,"\n"],[-1,23078,"图"],[1,23567,"\n"],[-1,23567,"后"],[-1,24303,"一系列"],[1,24347,"。这些，"],[-1,24347,"，这些路"],[1,24353,"是"],[1,24355,"信息"],[1,24440,"有13个路由器"],[-1,24440,"University of Minnesota"],[-1,24472,"13个路由器"],[1,24479,"\n"],[1,24484,"\n"],[1,25176,"\n每个\n"],[1,25193,"者多个1个个或"],[1,25198,"。"],[1,25201,"若如果"],[1,25208,"t"],[1,25228,"信息发送"],[-1,25488,"而不是"],[1,25499,"所"],[1,25504,"一直"],[-1,25724,"进行"],[1,25742,"用来"],[-1,25844,"运行"],[1,25850,"ju"],[1,25894,"\n"],[1,26496,""],[-1,26496,"\n"]],[26498,26498],[22506,22506]]],[1528792838908,["Re@Re.local",[[1,26606,"Dijkstra来说这是"]],[26606,26606],[26618,26618]]]]],["7a4932ab-d773-4f9f-9ae9-31b850c5ebd7",1528793653653,"## 7.1 目标 ##\n\n- 学习图的概念和使用方式。\n- 以多种方式实现抽象数据类型Gragh。\n- 了解图在解决多种问题时的应用。\n\n本章研究图像。图像是比上一章学习的树更加通用的结构，实际上可以认为树是一种特殊的图像。图像也可以用来表示真实世界中的很多东西，比如公路系统，航线系统，网路系统甚至是完成计算机科学学位所必须的课程序列。本章读者会看到，一旦给某个问题以合适的表示，利用一些图像算法便可以轻松将看起来很困难的问题解决。\n\n对人类来说，看懂道路地图并理解不同地点之间的关系并不困难，但是计算机并没有这种能力。然而，可以将道路系统看作是1个图像，如此一来便可以让计算机做一些有趣的事情了。比如在互联网地图中，计算机可以找到从某个地方到另一个地方的最近、最快或者最简单的路线。\n\n作为计算机科学的学生，读者可能对获得学位所需要的课程比较感兴趣。图像可以很好地表达课程之间的依赖关系。图1便是1个例子。\n\n![../_images/CS-Prereqs.png](http://interactivepython.org/courselib/static/pythonds/_images/CS-Prereqs.png)\n\n## 7.2 术语和定义 ##\n\n\n**顶点（vertex）**\n顶点（也称为节点**node**）是图像的基础构件。它可以有名称，即键。顶点也可以有其它额外信息，即负载。\n**边（Edge）**\n边有时也被称为弧（arc），是图像的另一种基础构件。边将2个顶点连接起来以表示这2者之间存在某种关系。边可以是单向的也可以是双向的。当某个图像中的所有边都是单向的时候，便称该图像是**有向图（directed gragh/digrah）**。上示的课程依赖图显示是有向图，因为必须先完成某些课程后才能继续其它某些课程。\n**权重（weight）**\n为了表示从某个顶点到另一个顶点所需的代价，可以顶点进行**赋权（weighted）**。比如说公路图中某个城市连接到另一个城市，边上的权重可以表示为两个城市之间的距离。\n\n有了以上基本概念，便可以来对图像作一定义了。图像可以表示为G，其中G=(V,E)。对于图像G，V是顶点的集合，E是边的集合。每个边都是一个元组（v,w)，其中$w,v∈V$。可以向边元组中加入第3个元素来表示权重。子图s是顶点的集合v和边的集合e，使得$e⊂E且v⊂V$。\n\n图2给出了1个简单的赋权有向图作为例子。该图像可以用集合严格地表示：\n$$ V={V0,V1,V2,V3,V4,V5} $$\n$$ E= \\left \\{ (v0,v1,5),(v1,v2,4),(v2,v3,9),(v3,v4,7),(v4,v0,1),(v0,v5,2),(v5,v4,8),(v3,v5,3),(v5,v2,1) \\right \\} $$\n![../_images/digraph.png](http://interactivepython.org/courselib/static/pythonds/_images/digraph.png)\n\n图2中的例子演示了图像的另外2个关键术语。\n**路径（path）**\n路径是由边连接起来的顶点的序列。一般地，将路径定义为 $w_1,w_2,...,w_n$ 使得 $(w_i,w_{i+1})\\in E$ 对所有 $1≤i≤n−1$ 成立。无权路径长度是路径中边的个数，即n-1。权重路径长度是路径中边的权重之和。比如图2中，从V3到V1的路径是顶点序列 $(V3,V4,V0,V1)$ 而边为 ${(v3,v4,7),(v4,v0,1),(v0,v1,5)}{(v3,v4,7),(v4,v0,1),(v0,v1,5)}$。\n**环（cycle）**\n有向图中的环是首尾顶点相同的路径。比如说，图2中路径 $(V5,V2,V3,V5)(V5,V2,V3,V5)$ 就是1个环。没有环的图被称为**无环图（acyclic graph）**。没有环的有向图被称为**有向无环图（directed acyclic graph，DAG）**。接下来读者会看到，一些很重要的问题可以通过表示为DAG获得解决。\n\n## 7.3 抽象数据类型：Graph ##\n\n抽象数据类型Gragh被定义为：\n- Graph()生成一个新的空图。\n- addVertex(vert) 将Vertex的1个实例添加至图。\n- addEdge(fromVert,toVert) 向图添加1个连接2个顶点的有向边。\n- addEdge(fromVert,toVert,weight)向图添加1个连接2个顶点的赋权有向边。\n- getVertex(vertKey) 找到途中以vertKey命名的顶点。\n- getVertices() 返回途中所有顶点的列表。\n- in 对于vertex in graph这种形式的语句，若给定的vertex在途中，返回True，反之则False。\n\n有了图像的正式定义，在Python中可以用多种方式实现，下面来看看使用不同方式实现该ADT的优劣与差别。有两个著名的图的实现，即**邻接矩阵（adjacency matrix）**和**邻接表（adjacency list）**，本书将对这两种都进行解释，并对其中1中以Python类的方式实现。\n\n## 7.4 邻接矩阵（adjacency matrix）##\n\n\n实现图的最简单方式之一是使用二维矩阵。在二维矩阵中，每行每列的都代表了图中的1个顶点。如果顶点v到顶点w有边，行v和列w的交叉点单元格会存储值。若两个顶点由边连接，便称这两个顶点是**邻接**的。图3给出了图2的邻接矩阵。单元格中存储的值是v到w的权重。\n\n![../_images/adjMat.png](http://interactivepython.org/courselib/static/pythonds/_images/adjMat.png)\n\n邻接矩阵的优势是简便，并且对于小图来说，很容易看出哪些节点是相连的。然而，注意到矩阵中大多数单元格都是空。因为大多数单元格都是空的，因此称该矩阵是**稀疏（sparse）**的。矩阵并不能高效地存储这种稀疏数据。实际上，在Python中像图3这种矩阵结构都很麻烦。\n\n邻接矩阵对于边树较高的图来说是不错的实现。“较高”是什么意思？到底需要多少个边才能填满该矩阵？因此为每行、每列都对应个顶点，填满矩阵需要的顶点数是$|V|_2$。当每个顶点都与另外每一个顶点相连时，则该矩阵被填满了。实践中很少会遇到以这种方式连接的问题。本章研究的所有问题都是稀疏图。\n\n## 7.5 邻接表（adjacency list） ##\n\n邻接表可以用更少的空间实现稀疏图。在邻接表的实现中，维护一个包含图对象所有顶点的主列表，然后图对象中各个顶点对象都维护一个该对象连接的其它顶点对象的列表。在Vertex类的实现中，将使用字典而不是列表，其中字典的键为顶点，值为权重。图4给出了图2的邻接表实现示意图。\n![../_images/adjlist.png](http://interactivepython.org/courselib/static/pythonds/_images/adjlist.png)\n\n邻接表的有时在于它可以紧凑地表示稀疏图，利用稀疏图也可以轻松地找到某个顶点所有的连接情况。\n\n## 7.6 实现 ##\n\n使用字典可以很容易地在Python中实现邻接表。在本书的实现中会创建两个类（代码1、代码2），Graph保存顶点的祝列表，而Vertex即图中每个顶点。\n\n每个Vertex都使用字典来保存其连接的对象以及每条边的权重。该字典被命名为connectedTo。以下代码便是Vertex类的实现。构造器只是初始化了可以是字符串的id以及connectedTo字典。addNeighbor方法用来添加从该顶点到另一顶点的连接。getConnections方法返回当前节点connectedTo实例变量保存的邻接表中的所有顶点。getWeight方法返回从该节点到另一个作为参数传入的节点的边的权重。\n\n**代码1**\n```Pythion\nclass Vertex:\n    def __init__(self,key):\n        self.id = key\n        self.connectedTo = {}\n\n    def addNeighbor(self,nbr,weight=0):\n        self.connectedTo[nbr] = weight\n\n    def __str__(self):\n        return str(self.id) + ' connectedTo: ' + str([x.id for x in self.connectedTo])\n\n    def getConnections(self):\n        return self.connectedTo.keys()\n\n    def getId(self):\n        return self.id\n\n    def getWeight(self,nbr):\n        return self.connectedTo[nbr]\n```\nGraph类，如下面的代码所示，保存了一个字典，将顶点名映射到顶点对象。在图4中，该字典对象表示为灰色阴影框。Graph类也听过了方法用于添加顶点和连接顶点。此外，实现了\\_\\_iter\\_\\_方法来使得可以在图中对所有顶点对象进行迭代。这两种方法可以用来实现按名称或者是对象本身来对图中顶点的迭代。\n\n**代码2**\n```Python\nclass Graph:\n    def __init__(self):\n        self.vertList = {}\n        self.numVertices = 0\n\n    def addVertex(self,key):\n        self.numVertices = self.numVertices + 1\n        newVertex = Vertex(key)\n        self.vertList[key] = newVertex\n        return newVertex\n\n    def getVertex(self,n):\n        if n in self.vertList:\n            return self.vertList[n]\n        else:\n            return None\n\n    def __contains__(self,n):\n        return n in self.vertList\n\n    def addEdge(self,f,t,cost=0):\n        if f not in self.vertList:\n            nv = self.addVertex(f)\n        if t not in self.vertList:\n            nv = self.addVertex(t)\n        self.vertList[f].addNeighbor(self.vertList[t], cost)\n\n    def getVertices(self):\n        return self.vertList.keys()\n\n    def __iter__(self):\n        return iter(self.vertList.values())\n```\n使用以上定义的Graph和Vertex类，以下代码边可以表示图2。首先生成6个节点编号0-5，查看顶点字典，注意到对0-5的键都创建了1个Vertex实例。然后，将连接了顶点的边集合到一起。最后，使用嵌套循环确定图中的每个边都正确存储了。读者应该将输出结果与图2作一对比。\n```Python\n>>> g = Graph()\n>>> for i in range(6):\n...    g.addVertex(i)\n>>> g.vertList\n{0: <adjGraph.Vertex instance at 0x41e18>,\n 1: <adjGraph.Vertex instance at 0x7f2b0>,\n 2: <adjGraph.Vertex instance at 0x7f288>,\n 3: <adjGraph.Vertex instance at 0x7f350>,\n 4: <adjGraph.Vertex instance at 0x7f328>,\n 5: <adjGraph.Vertex instance at 0x7f300>}\n>>> g.addEdge(0,1,5)\n>>> g.addEdge(0,5,2)\n>>> g.addEdge(1,2,4)\n>>> g.addEdge(2,3,9)\n>>> g.addEdge(3,4,7)\n>>> g.addEdge(3,5,3)\n>>> g.addEdge(4,0,1)\n>>> g.addEdge(5,4,8)\n>>> g.addEdge(5,2,1)\n>>> for v in g:\n...    for w in v.getConnections():\n...        print(\"( %s , %s )\" % (v.getId(), w.getId()))\n...\n( 0 , 5 )\n( 0 , 1 )\n( 1 , 2 )\n( 2 , 3 )\n( 3 , 4 )\n( 3 , 5 )\n( 4 , 0 )\n( 5 , 4 )\n( 5 , 2 )\n```\n## 词梯（word ladder）问题 ##\n\n以词梯问题开始图算法的研究。将单词\"FOOL\"转化为\"SAGE\"。按词梯问题的规则，1次只能修改1个字母，在每1步都必须将单词转换为另一个单词，不允许转换为非单词。词梯问题是由*爱丽丝梦游仙境*的作者lewis Carroll于1878年提出的。以下单词序列是刚才那个问题的一个可行解。\n```Python\nFOOL\nPOOL\nPOLL\nPOLE\nPALE\nSALE\nSAGE\n```\n词梯问题有许多变体。比如读者可能遇到要求在给定步数来完成转换的版本，或是必须用给点单词的版本。本节仅关注计算出完成转换所需要的最小修改次数。\n\n当然，因为本章内容是图，因此可以用图算法来将其解决。以下是纲要：\n- 将单词之间的关系重新表示为图。\n- 使用**广度优先搜索算法（breadth first search**来找到从起始单词到目标单词的最短路径。\n\n## 7.8 建立词梯图 ##\n\n首先要解决的问题是如何将单词列表转换为图。对于边来说，需要保证它们连接的是差且仅差了1个字母的单词。如果生成这种图，那么从一个单词出发的任意路径都是该词梯问题的解。图1给出了1个小的由单词构成的图，它可以用来解决FOOL到SAGE的词梯问题。注意，该图是无向图且无权重。\n\n![../_images/wordgraph.png](http://interactivepython.org/courselib/static/pythonds/_images/wordgraph.png)\n\n\n可以使用很多方法来生成这个图。首先假设有1组长度相同的单词，从起点出发，为列表中的每一个单词创建1个顶点。为了确定如何将这些单词连接起来，可以将列表中的每个单词与其它的单词一一进行比较，在比较时确定有多少个字母不同。如果两个字母仅相差1个字母，便可以在图中为它们两创建1条边。单词数较少时，这个方法还是可行的。但是假设有5110个单词的话（粗略估计一一进行对比需要$O(n^2)$的时间复杂度），需要进行2500万次对比。\n\n使用以下方法可以对其进行优化。假设有大量桶，每个桶外面都贴着1个4字母单词，但是字母中有1个被下划线替代。比如说，对于图2这种情况，可能会有个桶被贴上\"POP_\"。当在列表中对每个单词进行处理时，将该单词与每个桶进行对比，将\"\\_\"用作通配符，因此\"POPE\"和\"POPS\"都与\"POP\\_\"匹配。每当找到1个匹配的桶时，都将该单词放进去。当所有的单词都放在了正确的桶里时，可以确定同一桶里的单词是相连的。\n\n![../_images/wordbuckets.png](http://interactivepython.org/courselib/static/pythonds/_images/wordbuckets.png)\n\n在Python中，可以通过字典实现上述方案。桶的标签作为字典的键，键对应的值为单词列表。首先为各个单词在图中创建1个顶点。然后为处于字典同一键下的单词之间创建边，如代码1所示。\n```Python\nfrom pythonds.graphs import Graph\n\ndef buildGraph(wordFile):\n    d = {}\n    g = Graph()\n    wfile = open(wordFile,'r')\n    # create buckets of words that differ by one letter\n    for line in wfile:\n        word = line[:-1]\n        for i in range(len(word)):\n            bucket = word[:i] + '_' + word[i+1:]\n            if bucket in d:\n                d[bucket].append(word)\n            else:\n                d[bucket] = [word]\n    # add vertices and edges for words in the same bucket\n    for bucket in d.keys():\n        for word1 in d[bucket]:\n            for word2 in d[bucket]:\n                if word1 != word2:\n                    g.addEdge(word1,word2)\n    return g\n```\n这是第一个跟现实生活相关的图问题，读者可能会好奇该图的稀疏程度。对于该问题，准备的单词列表有5510个。若果使用邻接矩阵，矩阵将会有5110*5110个单元格，而使用buildGraph函数的图仅有53286条边，因此仅有0.20%的单元格被填充了，这实际上是一个很稀疏的矩阵了。\n\n## 7.9 实现宽度优先搜索（breadth first search） ##\n\n创建好了图，接下来便可以研究解决字梯问题的最优算法了。这里使用的算法被称为**宽度优先搜索（breadth first search,BFS）**。BFS是用于图搜索的最简单的算法之一。它也是之后将研究的其它几种重要的图算法的原型。\n\n给定图G以及起始顶点s，宽度优先算法将对图内的边进行搜索以找到G中所有与s有路径相连的顶点。宽度优先搜索的优势在于，在找到与s距离为k+1的所有顶点之前，它会先找出所有距离为k的顶点。BFS的运行过程可以想象为生成树的过程，每次都生成树的一层。BFS在对子孙顶点进行搜索前，先将初始顶点的子顶点加入进来。\n\n为了跟踪运行过程，BFS将顶点染成白色，灰色或黑色。所有的顶点都被初始为白色。白色顶点是未被探索的顶点。当某个顶点被初次探索时，将其染成灰色，当BFS完成对某个顶点的探索时，将其染成黑色。这意味着，对于黑色的顶点，它是没有白色节点与之邻接的。灰色节点，有可能会存在白色节点与之邻接，需要进一步探索。\n\n此外，BFS算法使用了Vertex类的改进版。这种新的顶点类新增了3种实例变量，即distance,predecessor以及颜色。每个实例变量都有正确的getter和setter方法。这里就不作展示了，因为只是加了3个实例变量而已。\n\nBFS从起始顶点s开始，将start染成灰色来表示当前正在对其进行搜索。对于起始顶点，另外两个值，distance和predecessor分别被初始化为0和None。最后，start被放入1个Queue中。下一步便是系统地对队列前部的顶点进行搜索。所谓搜索，即是对队列前部的某1个节点的邻接列表作迭代。每当对邻接列表中的节点作处理时，先对其颜色进行判断。如果是白色的，则该节点尚未搜索过，于是执行以下4步操作：\n1. 将新的，未搜索的顶点nbr染成灰色。\n2. 将nbr的predecessor设置为当前节点currentVert。\n3. 到nbr的距离设为currentVert + 1。\n4. 将nbr放入队尾。将nbr放在队尾使得该节点只有在currentVert的邻接列表中的所有其它顶点都被搜索过了才会继续被搜索。\n\n**代码2**\n```Python\nfrom pythonds.graphs import Graph, Vertex\nfrom pythonds.basic import Queue\n\ndef bfs(g,start):\n  start.setDistance(0)\n  start.setPred(None)\n  vertQueue = Queue()\n  vertQueue.enqueue(start)\n  while (vertQueue.size() > 0):\n    currentVert = vertQueue.dequeue()\n    for nbr in currentVert.getConnections():\n      if (nbr.getColor() == 'white'):\n        nbr.setColor('gray')\n        nbr.setDistance(currentVert.getDistance() + 1)\n        nbr.setPred(currentVert)\n        vertQueue.enqueue(nbr)\n    currentVert.setColor('black')\n```\n现在来仔细研究下bfs函数是如何对图1构件宽度优先树的。从FOOL出发，将所有与FOOL邻接的节点连接到该树上。临近节点包括POOL，FOIL，FOUL和COOL。每个节点都放入了待搜索待新节点。图3给出了该操作中的树及完成后的队列。\n![../_images/bfs1.png](http://interactivepython.org/courselib/static/pythonds/_images/bfs1.png)\n\n\n接下来，bfs从队首去掉了下一个节点(POOL)，并对其所有邻接节点重复该操作。然而，当bfs检查到节点COOL时，它发现COOL的颜色已经是灰色了。这意味着有更短的路径到达COOL，并且COOL已经留在队列中以待进一步搜索。在对POOL进行监测时唯一新加入队列的是POLL。新状态如图4所示。\n\n![../_images/bfs2.png](http://interactivepython.org/courselib/static/pythonds/_images/bfs2.png)\n\n队列中的下一个顶点是FOIL。FOIL可以加入树的节点是FAIL，当bfs方法继续处理队列时，接下来两个节点都没有向树或者队列加入新的节点。图5展示的是对树的第二层所有顶点都探索完成了后的树和队列。\n\n![../_images/bfs3.png](http://interactivepython.org/courselib/static/pythonds/_images/bfs3.png)\n![../_images/bfsDone.png](http://interactivepython.org/courselib/static/pythonds/_images/bfsDone.png)\n\n读者应该自己动手过一遍该算法，以对该算法获得更好的理解。图6是图3中已完成所有顶点的搜索后的最终宽度优先搜索树。宽度优先搜索的惊人之处在于，它不仅解决了初始的FOOL-SAGE问题，也顺便解决了许多其它问题。从宽度优先搜索树中的任一节点出发，沿着父节点的箭头返回到根节点，便可以得到该单词变为FOOL的最短词梯。代码3沿着父节点链打印出了词梯：\n**代码3**\n```Python\ndef traverse(y):\n    x = y\n    while (x.getPred()):\n        print(x.getId())\n        x = x.getPred()\n    print(x.getId())\n\ntraverse(g.getVertex('sage'))\n```\n## 7.10 宽度优先搜索分析 ##\n\n在继续研究其它图算法前，先来分析一下宽度优先搜索算法的运行性能。首先应当观察到的是，图|V|中的每个顶点在循环中最多被处理一次，因为在进行监测和加入队列前，该顶点必须是白色的。因此整个循环为O(V)。嵌套在while中的for循环对图中的每条边最多执行1次，|E|，因此每个顶点最多出队1次并且只在节点u出队时才检查节点u到节点v的边，该for循环为O(E)。因此两个循环的最终结果是O(V+E)。\n\n当然，执行BFS仅完成了该任务的一部分。从起始节点出发到达目标顶点是该任务的另一部分。最坏情况是，该图是单链的。在这种情况下，遍历所有节点需要O(V)。正常情况下应该是|V|的某个分数，但时间复杂度不会变，仍然是O(V)。\n\n最后，至少对这哥问题而言，生成初始的图也需要时间，其时间复杂度的分析就作为练习了。\n\n## 7.11 骑士周游问题 ##\n\n起始周游是可以用来演示第二种常见图算法的经典问题。骑士周游问题是在国际象棋棋盘上仅使用1个棋子，即起始，该问题的目标是找到1个出棋序列使得骑士可以访问各个方格恰好1次。这样的序列被称为周游。起始周游问题多年来吸引了很多棋手、数学家和计算机科学家等。在8*8的棋盘上，可行的序列数的上界为$1.305\\times 10^{35}$。然而，还有很多时候会走到死棋的情况。当然，还有很多时候会失败。显然这是一个需要些智慧和计算力的问题。\n\n学者已经提出了很多该问题的接发，图搜索是最最容易理解和编程的。同样地，分两步来求解：\n- 将骑士在棋盘上符合规则的移动以图表示。\n- 使用图算法来找到长度为$rows\\times columns-1$的路径，其中每个顶点都恰好只访问1次。\n\n## 7.12 生成骑士周游图 ##\n\n为了将骑士周游问题表示为图，使用以下两种思想：棋盘上的每个方格都被表示为图中的一个节点；骑士的每个合法的移动都被标记为图中的边。图1是骑士的1中合规走法，并给出了其对应的在图中的边。\n\n![../_images/knightmoves.png](http://interactivepython.org/courselib/static/pythonds/_images/knightmoves.png)\n\n为$n\\times n$的棋盘生成图，其Python代码如代码1所示。knightGraph函数对整个棋盘作1次遍历，在棋盘上的每1个方格，kinightGraph函数都调用1个辅助函数genLegalMoves，为棋盘上的该节点处的合法走法生成1个列表。图中的所有合法走法最后都被转换成了边。另一个辅助函数，posToNodeId将棋盘上的1个位置按照其行列转换为线性节点编号，如图1所示。\n\n**代码1**\n```Python\nfrom pythonds.graphs import Graph\n\ndef knightGraph(bdSize):\n    ktGraph = Graph()\n    for row in range(bdSize):\n       for col in range(bdSize):\n           nodeId = posToNodeId(row,col,bdSize)\n           newPositions = genLegalMoves(row,col,bdSize)\n           for e in newPositions:\n               nid = posToNodeId(e[0],e[1],bdSize)\n               ktGraph.addEdge(nodeId,nid)\n    return ktGraph\n\ndef posToNodeId(row, column, board_size):\n    return (row * board_size) + column\n```\n代码2中的genLeagalMove函数将以骑士的位置作为参数，并创建了可能的8个走法。legalCoord辅助函数用来保证创建的某个走法是在棋盘内的。该图中有336条边，并且可以发现，棋盘边缘的顶点的合规走法比棋盘内部的顶点少，此外该棋盘是稀疏的，填充率只有8.2%。\n\n![../_images/bigknight.png](http://interactivepython.org/courselib/static/pythonds/_images/bigknight.png)\n\n## 7.13 实现骑士周游 ##\n\n解决骑士周游问题将使用**深度优先搜索（depth first search）**。上一节讨论的宽度优先搜索算法是一次为搜索树建立一层，而深度优先算法则尽量向枝的深处搜索。本节介绍两种实现DFS的算法。第1个算法是专门用来解决骑士周游问题的，它显式地要求各节点最多被访问1次。第2种实现更加通用，但会允许在生成树时对其某个节点访问不止一次。在后续章节中，基于第2种算法开发了其它的算法。\n\n图的深度优先搜索很适合用来找到1条由63条边构成的路径。当深度搜索算法发现1条死路（图中的某个节点，使得接下来没有合法的移动了），它便会返回，并且朝着有合法移动的顶点的最深处移动。\n\n骑士周游函数接受4个参数：n，搜索树当前的深度；path，到该节点为止已访问过的顶点；u，待搜索节点；limit，路径中的节点数。knightTour函数是递归的。当knightTour函数被调用时，它首先检查约束条件。如果某条路径含有64个顶点，将True从knightTour返回，表示找到了一条可行的周游路径。若该路径长度不够，则继续向更深处搜索————选择1个新顶点以搜索并递归调用knightTour。\n\n\nDFS也使用颜色来记录图中哪些节点已经被访问，没有被访问过的顶点被涂为白色，访问过的是灰色。若某一顶点所有的邻接顶点都被搜索过了并且还没有达到64个顶点的长度的话，则说明当前是一条死路，此时必须要进行回溯，这里是通过从knightTour返回False来实现回溯的。在宽度优先搜索中使用队列来记录需要访问的节点。因为深度优先搜索是递归的，因此其实是隐式地使用了栈来进行回溯。当knightTour函数返回False的时候，程序仍处于while循环中，并在nbrList中寻找下一个顶点。\n\n**代码3**\nfrom pythonds.graphs import Graph, Vertex\ndef knightTour(n,path,u,limit):\n        u.setColor('gray')\n        path.append(u)\n        if n < limit:\n            nbrList = list(u.getConnections())\n            i = 0\n            done = False\n            while i < len(nbrList) and not done:\n                if nbrList[i].getColor() == 'white':\n                    done = knightTour(n+1, path, nbrList[i], limit)\n                i = i + 1\n            if not done:  # prepare to backtrack\n                path.pop()\n                u.setColor('white')\n        else:\n            done = True\n        return done\n下面来简单地试运行。读者可以参考下面的图例来观察该搜索的步骤。作为例子，假设getConnections方法返回的节点是按字母排序的。首先调用knightTour(0,path,A,6)。\n\n如图3所示，knightTour从节点A开始。A的邻接节点为B和D，由于B在D之前（字母排序），DFS选择B来对下一级进行搜索（图4）。通过递归调用knightTour实现对B的搜索。由于C、D是B的邻接节点，因此knightTour接下来选择C以继续搜索。然而，如图5所示，节点C是一条死路，因为它没有白色的邻接节点。此时，将节点C的颜色改为白色，knightTour返回False。实际上该递归函数的返回导致了回溯到节点B以继续搜索（如图6所示）。节点B中的下一个可探索节点是D，因此knightTour函数继续进行递归调用，直到再次遇到节点C（如图8、9、10）。然而，这次在节点C进行n<limit的测试结果是False，因此可以确认图中所有节点已经被遍历完。此时返回True表示已经找到1条实现周游的路径，返回该列表path，其值[A,B,D,E,F,C]，它即是实现对图中各节点访问恰好1次的顺序。\n\n![../_images/ktdfsa.png](http://interactivepython.org/courselib/static/pythonds/_images/ktdfsa.png)\n\n![../_images/ktdfsb.png](http://interactivepython.org/courselib/static/pythonds/_images/ktdfsb.png)\n\n![../_images/ktdfsc.png](http://interactivepython.org/courselib/static/pythonds/_images/ktdfsc.png)\n\n![../_images/ktdfsd.png](http://interactivepython.org/courselib/static/pythonds/_images/ktdfsd.png)\n\n![../_images/ktdfse.png](http://interactivepython.org/courselib/static/pythonds/_images/ktdfse.png)\n\n![../_images/ktdfsf.png](http://interactivepython.org/courselib/static/pythonds/_images/ktdfsf.png)\n\n![../_images/ktdfsg.png](http://interactivepython.org/courselib/static/pythonds/_images/ktdfsg.png)\n\n![../_images/ktdfsh.png](http://interactivepython.org/courselib/static/pythonds/_images/ktdfsh.png)\n\n图11是8*8棋盘中的周游例子。可以看出有多种可行的路径，并且其中有一些还是堆成的。改进一下的话，读者也可以获得起始与结束为同一个格子的循环路径。\n\n![../_images/completeTour.png](http://interactivepython.org/courselib/static/pythonds/_images/completeTour.png)\n\n## 7.14 骑士周游分析 ##\n\n关于骑士周游问题还有1个要点即性能需要讲解，然后再继续介绍深度搜索的通用版本。特别地，knightTour高度依赖于顶点搜索次序的方式。比如说，在5*5的棋盘上在还算比较快的电脑上于1.5秒内计算出1条路径，但对于8*8的棋盘来说又是怎样的？在这种情况下，取决于计算机的速度，有可能需要半小时才能计算出答案。原因是当前实现的骑士周游解法是时间复杂度为$O(k^N)$的算法，其中N是棋盘中方格数，而k是1个小常数。图12以图形的方式进行了阐释。树的根节点代表的是搜索树的起点，从起点出发，算法生成并检查每一个合法的移动。之前也说到过，合法移动数的个数依赖于骑士在棋盘上的位置。在角的时候，仅可能有2个合法的移动；在与角相邻的位置则可能有3个合法的移动；而在棋盘中间的话，可能会有8个。图13给出了棋盘上每个位置可能的合法移动。在树的下一层，同样又有2-8个可能的合法移动。需要检查的位置对应于搜索树中节点个数。\n\n\n![../_images/8arrayTree.png](http://interactivepython.org/courselib/static/pythonds/_images/8arrayTree.png)\n\n![../_images/moveCount.png](http://interactivepython.org/courselib/static/pythonds/_images/moveCount.png)\n\n读者已经知道，高度为N的二叉树的节点数为 $2^{N+1}-1$ 。子节点树可达8的树的节点数是远远大于二叉树的。由于每个节点的分枝因子是可变的，因此可以用通过平均分枝因子来估计节点数。值得注意的是，该算法是指数级的：$k^{N+1}-1$ ，其中k是棋盘的平均分枝因子。来看看它增长得有多块。对于5*5的棋盘，树会有25层深（或者说24，若将第1层记为0）。平均分枝因子是k=3.8，因此搜索树中的节点数为： $3.8^{25}-1$ 或 $3.12\\times 10^{14}$ 。对于6*6的，有 $1.5\\times 10^{23}$ 个节点，而对于普通的8*8棋盘，k=5.25，则有 $1.3\\times 10^46$ 。当然，对于同一个问题可能有多重解法，因此也不必搜索每个单节点，但是这也只能是对节点数取了个分数，事实上也并不会改变其指数级的性质。至于将k表示为棋盘大小的函数，就作为练习了。\n\n幸运的是，有种方法可以将8*8的情况控制在1秒内完成，如下面的代码4所示。其中orderbyAvail函数\n是在u.getConnections被调用时所使用的函数。行10是orderByAvail中最关键的1行。该行保证了选择的下一步顶点是可能的合法走法最少的那个。读者可能觉得这有些起反作用，为什么不选择可行走法最多的？读者大可以自己试试。\n\n在选择路径的下一个顶点时采用可能合法数最多的那个会导致的问题是，该机制下会倾向于在早期便访问棋盘的中间，这样一来，骑士很容易会困在棋盘的一侧而不能访问棋盘另一侧中未访问的方格。而如果采用合法数最少的那个，则强迫其实首先访问棋盘的边缘，这样一来，骑士一开始便访问了\"很难达到\"的角落，然后在有必要时利用中间的方格来达到棋盘的另一侧。利用这种知识来加速算法被称为\"启发式\"算法。人类日常中也是利用启发式规则来作出各种决定的，启发式搜索常常用于AI领域。本例使用的启发式算法被称为Warnsdorff算法。\n\n**代码4**\n```Python\ndef orderByAvail(n):\n    resList = []\n    for v in n.getConnections():\n        if v.getColor() == 'white':\n            c = 0\n            for w in v.getConnections():\n                if w.getColor() == 'white':\n                    c = c + 1\n            resList.append((c,v))\n    resList.sort(key=lambda x: x[0])\n    return [y[1] for y in resList]\n```\n## 7.15 通用深度搜索 ##\n\n骑士周游是DFS的1个特例，它的目标是生成深度最大且无分枝的树。更通用的深度优先搜索实际上还要简单一点。它的目标是尽可能深地对树进行搜索，连接图中尽可能多的顶点并且在必要时进行分枝。\n\n深度优先搜索甚至可能创建多棵树。当深度优先搜索算法生成了一组树时，便称之为深度优先森林。同宽度优先搜索一样，深度优先搜索在构造时也利用了父节点引用。此外，深度优先搜索在Vertex类中还会使用额外两个实例变量，即发现时间和完成时间。发现时间记录某个顶点第1次出现前的步骤数，而完成时间记录该顶点被涂为黑色时的步骤数。观察算法可以发现，发现时间和完成时间能够提供一些有趣的性质可供后续的一些算法使用。\n\n深度优先搜索如代码5所示。因为两个函数dfs和其辅助函数dfsvisit使用了1个变量来记录在调用dfsvisit时的时间，从而将这部分代码实现为Graph子类的一个方法。这里给出的实现通过增加了1个time实例变量以及dfs、dfsvisit方法将Graph类进行了扩张。仔细研究行11，可以发现dfs方法对图中所有的顶点进行了遍历，并对白色节点调用dfsvisit方法。之所以对所有顶点进行迭代而不从给定起点开始搜索，是为了保证图中所有节点都被考虑了并且在DFS树中没有顶点被一楼。for aVvertex in self可能看起来有点奇怪，但实际上这里的self是DFSGraph的一个实例，对Graph实例中的所有顶点进行迭代是很常规的操作。\n\n**代码5**\n```Python\nfrom pythonds.graphs import Graph\nclass DFSGraph(Graph):\n    def __init__(self):\n        super().__init__()\n        self.time = 0\n\n    def dfs(self):\n        for aVertex in self:\n            aVertex.setColor('white')\n            aVertex.setPred(-1)\n        for aVertex in self:\n            if aVertex.getColor() == 'white':\n                self.dfsvisit(aVertex)\n\n    def dfsvisit(self,startVertex):\n        startVertex.setColor('gray')\n        self.time += 1\n        startVertex.setDiscovery(self.time)\n        for nextVertex in startVertex.getConnections():\n            if nextVertex.getColor() == 'white':\n                nextVertex.setPred(startVertex)\n                self.dfsvisit(nextVertex)\n        startVertex.setColor('black')\n        self.time += 1\n        startVertex.setFinish(self.time)\n```\n\n虽然这里给出的bfs实现只考虑了那些可以通过某条路径回到起点的节点，但是也可以生成表示图中各节点最短路径的BFS森林。这就作为练习了。在后续的2个算法中，可以看出记录DFS森林的重要性。\n\ndfsvisit方法从startVertex这一单节点出发，尽可能地探索所有邻接白色顶点。如果读者仔细地研究dfsvisit的代码并且将其于BFS对比，可以发现dfsvisit算法几乎等同于bfs，除了for循环中的最后1行，dfsvisit递归地调用其本身以向更深的层继续搜索，而bfs将该节点加入队列供以后搜索。有趣的是，bfs使用的是队列，而dfsvisit使用的是栈。当然读者并不能在代码中看到栈，实际上是通过递归调用dfsvisit而使用了栈。\n\n下面的1组图演示了用于小图的深度优先搜索算法的实际运行。在这些图中，虚线表示检查过的边，但边的另一端的节点已经被加入了深度优先树。在代码中，这是通过检查另一节点的颜色为非白色来实现的。\n\n搜索从图中的顶点A（图14）开始。由于在搜索开始时，所有的顶点都是白色的，算法首先访问了顶点A。访问节点的第一步是将该节点的颜色设置为灰色，表示该节点正在被搜索，并且把发现世界设置为1。由于顶点A有两个邻接顶点（B，D），每一个都需要被访问，因此就随意地按字母顺序进行访问了。\n\n接下来访问的是节点B（如图15），因此将其颜色设置为灰色，并将其发现时间设置为2。顶点B与（C，D）邻接，因此按照字母顺序访问节点C。\n\n访问顶点C（图16）后来到了树的一个分枝的末端。将节点涂成灰色，将其发现时间设置为3，并且算法也确定了C是没有邻接顶点的，这意味着已经完成了对节点C的搜索，将其涂成黑色，并且将完成时间设置为4。此时的状态如图17所示。\n\n由于顶点C是一个分枝的末端，现在回到顶点B，并继续搜索B的邻接顶点。除了C以外仅剩D了，因此现在访问D（图18），并且从顶点D继续搜索。通过顶点D便来到了顶点E（图19），顶点E有两个邻接顶点，B和F。正常情况下会按照字母顺序来访问邻接顶点，但是由于B已经被涂成灰色了，算法对其进行识别，确认不能访问B，因为这样一来该算法便陷入了无限循环了。因此，算法从顶点F继续（图20）。\n\n顶点F仅有1个邻接顶点C，但是C是黑色的，因此就不用进行搜索了：算法已经到达了另一分枝的末端。\n\n![../_images/gendfsa.png](http://interactivepython.org/courselib/static/pythonds/_images/gendfsa.png)\n\n![../_images/gendfsb.png](http://interactivepython.org/courselib/static/pythonds/_images/gendfsb.png)\n\n![../_images/gendfsc.png](http://interactivepython.org/courselib/static/pythonds/_images/gendfsc.png)\n\n![../_images/gendfsd.png](http://interactivepython.org/courselib/static/pythonds/_images/gendfsd.png)\n\n![../_images/gendfse.png](http://interactivepython.org/courselib/static/pythonds/_images/gendfse.png)\n\n![../_images/gendfsf.png](http://interactivepython.org/courselib/static/pythonds/_images/gendfsf.png)\n\n![../_images/gendfsg.png](http://interactivepython.org/courselib/static/pythonds/_images/gendfsg.png)\n\n![../_images/gendfsh.png](http://interactivepython.org/courselib/static/pythonds/_images/gendfsh.png)\n\n![../_images/gendfsi.png](http://interactivepython.org/courselib/static/pythonds/_images/gendfsi.png)\n\n![../_images/gendfsj.png](http://interactivepython.org/courselib/static/pythonds/_images/gendfsj.png)\n\n![../_images/gendfsk.png](http://interactivepython.org/courselib/static/pythonds/_images/gendfsk.png)\n\n![../_images/gendfsl.png](http://interactivepython.org/courselib/static/pythonds/_images/gendfsl.png)\n\n每个节点的发现和完成时间表示了**括号属性（parenthesis property）**，意味着某个节点在深度优先树中的所有子节点的发现时间都比其父节点晚，而结束时间比其父节点早。\n\n## 7.16 深度优先搜索分析 ##\n\n深度优先搜索一般运行时间分析如下。不考虑dfsvisit的具体情况，dfs中的循环都是O(V）的，因为它们都是遍历图中各顶点。在dfsvisit中，遍历当前顶点的邻接列表中的边。由于dfsvisit仅在顶点为白色时进行递归调用，该循环对图中的每条边最多执行1次，或者说O(E)。因此，DFS的总时间是O(V+E)的。\n\n## 7.17 拓扑排序 ##\n\n计算机科学家几乎可以把所有问题都转化为图问题，下面以1个复杂问题作演示，即制作煎蛋饼。配方很简单，1个鸡蛋，1杯面粉，1勺油以及$\\frac{3}{4}$杯牛奶。为了制作煎饼，必须要加热平底锅，将所有材料混合在一起，然后将混合物用勺子放入热好的锅中。当煎饼开始冒泡时，将其反转过来，煎至底部变为金黄色。在享用煎饼之前，也可以加一些果酱。图27将以上过程表示为图。\n\n![../_images/pancakes.png](http://interactivepython.org/courselib/static/pythonds/_images/pancakes.png)\n\n制作煎饼的难点在于确定第一步干啥。如图27所示，可以从加热锅开始，也可以从加入任意原料开始。为了确定制作煎饼的每一个步骤的准确顺序，可以使用图算法中的**拓扑排序（topological sort）**来求解。\n\n拓扑排序将有向无圈图转化为其顶点的线性排列，使得对于含有边(v,w)的图G的排列中，顶点v在顶点w之前。有向无圈图在很多应用程序中用来表示事件的优先级。制作煎饼就是一个例子，另一些例子还有软件工程规划，数据库请求优化优先级以及矩阵乘法等问题。\n\n\n拓扑排序是深度优先搜索的一种简单而强大的改进。拓扑排序算法如下：\n1. 对于某个图g调用dfs(g)。调用深度优先搜索的主要目的是为了计算每个顶点的完成时间。\n2. 按照完成时间以降序排列的方式将顶点存储于一个列表中。\n3. 返回拓扑排序的降序排列列表。\n\n图28是制作煎饼的图（图26）对应的深度优先树。\n\n![../_images/pancakesDFS.png](http://interactivepython.org/courselib/static/pythonds/_images/pancakesDFS.png)\n\n最后，将拓扑排序算法应用到图中的结果如图29所示。\n\n![../_images/pancakesTS.png](http://interactivepython.org/courselib/static/pythonds/_images/pancakesTS.png)\n\n## 7.18 强连通分量 ##\n\n本章剩余内容将集中于超大规模图，使用由互联网上主机及网页间的连接构成的图作为学习另外一些图算法的材料。首先是网页。\n\n搜索引擎比如Google和Bing都利用了这一特点：互联网上的网页实际上构成了一个超大规模有向图。为了将万维网（World Wide Web）转化为图，可以将网页当作顶点，而网页上的超链接则作为连接顶点的边。图30是以Luther College’s Computer Science主页为起点，沿着网页之间的连接生成的图的一小部分。当然，这个图完整版是很大的，因此这里将连接数限制为不超过10个。\n\n![../_images/cshome.png](http://interactivepython.org/courselib/static/pythonds/_images/cshome.png)\n\n仔细研究图30中的图，读者会发现一些有趣的东西。首先，图中的许多其它网页也是Luther College的网页。第二，有好几个连接指向了Iowa的其它大学。第三，还有些连接指向了其它人文艺术学院。据此可以猜测，或许网页存在某种内在结构使得可以将具有类似结构的网页进行聚类。\n\n**强连通分量算法（strongly connected component，SCC）**可以用来识别图中强连通顶点中的聚类。定义图G的**强连通分量（记为C）**为：以某种划分方式将顶点集合划分为不含重复元素的、元素数尽量多的子集，并且保证这些子集中的顶点任意两两之间存在路径相通。图27是一个有3个强连通分量的图，不同的强连通分量通过不同的阴影区区分开来。\n\n![../_images/scc1.png](http://interactivepython.org/courselib/static/pythonds/_images/scc1.png)\n\n识别了强连通分量，便可以将强连通分量中的所有顶点表示为单个大顶点来对图进行简化。图31的简化如图32所示。\n\n![../_images/scc2.png](http://interactivepython.org/courselib/static/pythonds/_images/scc2.png)\n\n同样地，这里将再次使用强大而高效的深度搜索算法。在研究SCC算法的主要内容前，必须先研究另一个概念。图G的**转置（transposition）**记为$G^T$，是指所有边都被转向后形成的图。也就是说，若原始图中节点A到节点B存在有向边，则该图的转置$G^T$中对应的有向边是节点B到节点A。如图33和图34所示。\n\n![../_images/transpose1.png](http://interactivepython.org/courselib/static/pythonds/_images/transpose1.png)\n\n![../_images/transpose2.png](http://interactivepython.org/courselib/static/pythonds/_images/transpose2.png)\n\n再来看看这些图。注意图33中的图有2个强连通分量。而图34中，也有2个强连通分量。\n\n现在来设计用来计算图中强连通分量的算法。\n\n1. 对图G调用dfs来计算每个顶点的结束时间。\n2. 计算$G^T$。\n3. 为图$G^T$调用dfs，但在DFS的主循环中按结束时间降序搜索每个顶点。\n4. 在第3步中计算的森林中的每棵树都是1个强连通分量。为森林中的每棵树的每个顶点输出其顶点id，以示区分。\n\n以之前的图31为例，跟踪上述步骤执行结果。图35是通过DFS算法计算的原图的发现和结束时间。图36是在转置图上运行DFS后计算出的发现和结束时间。\n\n![../_images/scc1a.png](http://interactivepython.org/courselib/static/pythonds/_images/scc1a.png)\n\n![../_images/scc1b.png](http://interactivepython.org/courselib/static/pythonds/_images/scc1b.png)\n\n最后，图37给出了强连通分量算法中第3步生成的3颗树。SCC算法的代码就作为练习了。\n\n![../_images/sccforest.png](http://interactivepython.org/courselib/static/pythonds/_images/sccforest.png)\n\n## 7.19 最短路径问题 ##\n\n当读者在网上冲浪（？），发送邮件，或者从校内另一个地方登陆实验室电脑时，为了将本地计算机的信息传送到另一台计算机，其实是要做很多事情的。对在计算机之间通过网络传递信息的方式的深入研究是计算机网络课程不可缺少的首要课题。但是在这里对计算机网络知识仅要求足以理解另一个非常重要的图算法即可。\n\n![../_images/Internet.png](http://interactivepython.org/courselib/static/pythonds/_images/Internet.png)\n\n图1是对计算机通信方式的高度抽象概括。当使用浏览器向服务器请求网页时，该请求必须通过路由器穿过本地网络到达互联网，然后该请求在互联网上进行传送并最终抵达服务器所在的本地网络的路由器，所请求的网页再通过相同的一系列路由器组传回正在使用的浏览器。在图1中云的标签\"Inernet\"是一些其它的路由器，这些路由器用来实现信息传输。若读者电脑支持traceroute命令，可以看到实际上有很多路由器的。下面的文本可以看出，该traceroute命令结果显示在Luther College和University of Minnesota的邮件服务器之间有13个路由器。\n```\n1  192.203.196.1\n2  hilda.luther.edu (216.159.75.1)\n3  ICN-Luther-Ether.icn.state.ia.us (207.165.237.137)\n4  ICN-ISP-1.icn.state.ia.us (209.56.255.1)\n5  p3-0.hsa1.chi1.bbnplanet.net (4.24.202.13)\n6  ae-1-54.bbr2.Chicago1.Level3.net (4.68.101.97)\n7  so-3-0-0.mpls2.Minneapolis1.Level3.net (64.159.4.214)\n8  ge-3-0.hsa2.Minneapolis1.Level3.net (4.68.112.18)\n9  p1-0.minnesota.bbnplanet.net (4.24.226.74)\n10  TelecomB-BR-01-V4002.ggnet.umn.edu (192.42.152.37)\n11  TelecomB-BN-01-Vlan-3000.ggnet.umn.edu (128.101.58.1)\n12  TelecomB-CN-01-Vlan-710.ggnet.umn.edu (128.101.80.158)\n13  baldrick.cs.umn.edu (128.101.80.129)(N!)  88.631 ms (N!)\n\nRouters from One Host to the Next over the Internet\n```\n互联网上的每个路由器都连接着1个或多个路由器，因此如果多次运行traceroute命令，有可能会发现每次信息都是通过不同的路由器转发的。这是因为在任意对路由器间的连接都是有消耗的，取决于流量，当前实际，以及其它很多因素。现在将路由器网路表示为权重图应该说是很顺理成章了。\n\n![../_images/routeGraph.png](http://interactivepython.org/courselib/static/pythonds/_images/routeGraph.png)\n\n\n一个小权重图例子如图2所示。需要解决的问题是找到一条总权重最小的路径来传递信息，这与宽度优先搜索有些类似，不过这里要考虑的是总权重而不是节点的总数，如果各节点权重一致，那就跟宽度优先搜索一样了。\n\n## 7.20 ## Dijkstra算法 ##\n\n\n这里用来确定最短路径的算法是Dijkstra算法。Dijkstar算法是一种迭代算法，用来计算从某个起始节点到另一个节点的最短路径。这也与宽度优先搜索的结果比较类似。\n\n为了跟踪从起始节点到每一个目的地的总权重，在Vertex类中使用了dist实例变量。dist保存了从起点到目的地最小权重路径的当前总权重值。算法将图中的每个顶点迭代1次，然而对顶点进行迭代的顺序是通过优先队列控制的。确定对象在优先队列中顺序的值是dist。dist被初始化为一个非常大的值。\n\n从理论上来说，可以将dist设置为无限大，但实际上设置为当前问题的某个上界值即可。\n\nDijkstar算法如代码1所示。当算法运行完毕时，图中各个顶点的dist都被设置为前驱连接（？）。\n\n**代码1**\n```Python\nfrom pythonds.graphs import PriorityQueue, Graph, Vertex\ndef dijkstra(aGraph,start):\n    pq = PriorityQueue()\n    start.setDistance(0)\n    pq.buildHeap([(v.getDistance(),v) for v in aGraph])\n    while not pq.isEmpty():\n        currentVert = pq.delMin()\n        for nextVert in currentVert.getConnections():\n            newDist = currentVert.getDistance() \\\n                    + currentVert.getWeight(nextVert)\n            if newDist < nextVert.getDistance():\n                nextVert.setDistance( newDist )\n                nextVert.setPred(currentVert)\n                pq.decreaseKey(nextVert,newDist)\n```\nDijjkstra算法使用了优先队列，读者可能还记得优先队列是基于第三章实现的堆的。用于Dijkstra算法的实现和第三章中的简单实现有相当差别。首先，PriorityQueue类存储的键-值对组成的元组。对于Dijkstra来说这是",[[1528793624660,["Re@Re.local",[[1,26618,"很重要的，因为优先队列中的键必须与图中的顶"]],[26618,26618],[26639,26639]]],[1528793625556,["Re@Re.local",[[-1,26638,"顶"]],[26639,26639],[26638,26638]]],[1528793628288,["Re@Re.local",[[1,26638,"键匹配"]],[26638,26638],[26641,26641]]],[1528793629908,["Re@Re.local",[[-1,26639,"匹配"]],[26641,26641],[26639,26639]]],[1528793635491,["Re@Re.local",[[1,26639,"对应。第二，"]],[26639,26639],[26645,26645]]],[1528793637258,["Re@Re.local",[[-1,26574,"首先"]],[26576,26576],[26574,26574]]],[1528793637972,["Re@Re.local",[[1,26574,"第一"]],[26574,26574],[26576,26576]]],[1528793659075,["Re@Re.local",[[1,26645,"值"]],[26645,26645],[26646,26646]]],[1528793660387,["Re@Re.local",[[-1,26645,"值"]],[26646,26646],[26645,26645]]],[1528793670168,["Re@Re.local",[[1,26645,"决定优先级的是值，因此"]],[26645,26645],[26656,26656]]],[1528793694706,["Re@Re.local",[[-1,26654,"因此"]],[26656,26656],[26654,26654]]],[1528793702543,["Re@Re.local",[[1,26654,"从而也决定了键在优先堵截"]],[26654,26654],[26666,26666]]],[1528793703295,["Re@Re.local",[[-1,26664,"堵截"]],[26666,26666],[26664,26664]]],[1528793707609,["Re@Re.local",[[1,26664,"队列中的位置。通过"]],[26664,26664],[26673,26673]]],[1528793708497,["Re@Re.local",[[-1,26671,"通过"]],[26673,26673],[26671,26671]]],[1528793712831,["Re@Re.local",[[1,26671,"在这种实现中，利用"]],[26671,26671],[26680,26680]]],[1528793728634,["Re@Re.local",[[1,26680,"节点间"]],[26680,26680],[26683,26683]]],[1528793729211,["Re@Re.local",[[-1,26680,"节点间"]],[26683,26683],[26680,26680]]],[1528793747114,["Re@Re.local",[[1,26680,"到该顶点的距离作为优先即"]],[26680,26680],[26692,26692]]],[1528793752348,["Re@Re.local",[[-1,26691,"即"]],[26692,26692],[26691,26691]]],[1528793756395,["Re@Re.local",[[1,26691,"级，"]],[26691,26691],[26693,26693]]],[1528793758487,["Re@Re.local",[[-1,26678,"利用"]],[26680,26680],[26678,26678]]],[1528793760062,["Re@Re.local",[[1,26678,"将"]],[26678,26678],[26679,26679]]],[1528793770238,["Re@Re.local",[[1,26692,"因为当搜索下一个顶点时，"]],[26692,26692],[26704,26704]]],[1528793774064,["Re@Re.local",[[1,26704,"需要"]],[26704,26704],[26706,26706]]],[1528793776344,["Re@Re.local",[[-1,26704,"需要"]],[26706,26706],[26704,26704]]],[1528793798162,["Re@Re.local",[[1,26704,"应当搜索距离最小的顶点。第二个"]],[26704,26704],[26719,26719]]],[1528793799802,["Re@Re.local",[[-1,26716,"第二个"]],[26719,26719],[26716,26716]]],[1528793816139,["Re@Re.local",[[1,26716,"第二个不同之处在于，"]],[26716,26716],[26726,26726]]],[1528793822702,["Re@Re.local",[[-1,26574,"第一"]],[26576,26576],[26574,26574]]],[1528793824169,["Re@Re.local",[[1,26574,"首先"]],[26574,26574],[26576,26576]]],[1528793826219,["Re@Re.local",[[-1,26642,"第二"]],[26644,26644],[26642,26642]]],[1528793827016,["Re@Re.local",[[1,26642,"其次"]],[26642,26642],[26644,26644]]],[1528793828710,["Re@Re.local",[[1,26716,"\n"]],[26716,26716],[26717,26717]]],[1528793829360,["Re@Re.local",[[1,26717,"\n"]],[26717,26717],[26718,26718]]],[1528793839817,["Re@Re.local",[[1,26728,"decreaseKey中"]],[26728,26728],[26740,26740]]],[1528793843659,["Re@Re.local",[[-1,26739,"中"]],[26740,26740],[26739,26739]]],[1528793852971,["Re@Re.local",[[1,26739,"方法的添加。该方法用来"]],[26739,26739],[26750,26750]]],[1528796540377,["Re@Re.local",[[-1,26748,"用来"]],[26750,26750],[26748,26748]]],[1528796553105,["Re@Re.local",[[1,26748,"在某个顶点的距离已经出现在"]],[26748,26748],[26761,26761]]],[1528796593426,["Re@Re.local",[[-1,26751,"顶点的距离已经出现在"]],[26761,26761],[26751,26751]]],[1528796596452,["Re@Re.local",[[-1,26745,"该方法在某"]],[26750,26750],[26745,26745]]],[1528796597982,["Re@Re.local",[[1,26745,"在某个"]],[26745,26745],[26748,26748]]],[1528796600249,["Re@Re.local",[[-1,26745,"在某个"]],[26748,26748],[26745,26745]]],[1528796612939,["Re@Re.local",[[1,26745,"队列中的某个顶点的距离被键"]],[26745,26745],[26758,26758]]],[1528796613432,["Re@Re.local",[[-1,26756,"被键"]],[26758,26758],[26756,26756]]],[1528796614791,["Re@Re.local",[[1,26756,"见效"]],[26756,26756],[26758,26758]]],[1528796615304,["Re@Re.local",[[-1,26756,"见效"]],[26758,26758],[26756,26756]]],[1528796617178,["Re@Re.local",[[1,26756,"坚厚"]],[26756,26756],[26758,26758]]],[1528796617802,["Re@Re.local",[[-1,26754,"距离坚厚"]],[26758,26758],[26754,26754]]],[1528796623125,["Re@Re.local",[[1,26754,"dist减小了后"]],[26754,26754],[26762,26762]]],[1528796625615,["Re@Re.local",[[1,26745,"但该"]],[26745,26745],[26747,26747]]],[1528796626534,["Re@Re.local",[[-1,26745,"但该"]],[26747,26747],[26745,26745]]],[1528796627255,["Re@Re.local",[[1,26745,"当"]],[26745,26745],[26746,26746]]],[1528796628988,["Re@Re.local",[[-1,26761,"了后"]],[26763,26763],[26761,26761]]],[1528796631249,["Re@Re.local",[[1,26761,"的是欧，"]],[26761,26761],[26765,26765]]],[1528796632060,["Re@Re.local",[[-1,26762,"是欧，"]],[26765,26765],[26762,26762]]],[1528796646688,["Re@Re.local",[[1,26762,"时候，调用该方法，是的该顶点向队列前步"]],[26762,26762],[26781,26781]]],[1528796651382,["Re@Re.local",[[-1,26777,"队列前步"]],[26781,26781],[26777,26777]]],[1528796652534,["Re@Re.local",[[1,26777,"队首"]],[26777,26777],[26779,26779]]],[1528796713729,[null,[[-1,26779,"个"]],[26779,26779],[26779,26779]]],[1528796713729,[null,[[1,26779,"个"]],[26779,26779],[26779,26779]]],[1528796654371,["Re@Re.local",[[1,26782,"\n\n"]],[26782,26782],[26783,26783]]],[1528796654613,["Re@Re.local",[[1,26784,"\n"]],[26783,26783],[26784,26784]]],[1528856782206,[null,[[-1,26779,"个"],[1,26780,"移动。"]],[26779,26779],[26783,26783]]],[1528856782206,[null,[[1,26779,"个"],[-1,26779,"移动。"]],[26783,26783],[26779,26779]]],[1528856723725,["Re@Re.local",[[-1,26771,"是的"]],[26773,26773],[26771,26771]]],[1528856724169,["Re@Re.local",[[1,26771,"s"]],[26771,26771],[26772,26772]]],[1528856724718,["Re@Re.local",[[-1,26771,"s"]],[26772,26772],[26771,26771]]],[1528856725910,["Re@Re.local",[[1,26771,"使得"]],[26771,26771],[26773,26773]]],[1528856842127,[null,[[-1,26779,"个"],[1,26780,"移动。"]],[26779,26779],[26783,26783]]],[1528856842127,[null,[[1,26779,"个"],[-1,26779,"移动。"]],[26783,26783],[26779,26779]]],[1528856799509,["Re@Re.local",[[1,26785,"\n"]],[26782,26782],[26783,26783]]],[1528856799772,["Re@Re.local",[[1,26786,"\n"]],[26783,26783],[26784,26784]]],[1528856813952,["Re@Re.local",[[1,26784,"作为示范，"]],[26784,26784],[26789,26789]]],[1528856823749,["Re@Re.local",[[-1,26788,"，"]],[26789,26789],[26788,26788]]],[1528856827481,["Re@Re.local",[[1,26788,"，下列"]],[26788,26788],[26791,26791]]],[1528856827674,["Re@Re.local",[[-1,26790,"列"]],[26791,26791],[26790,26790]]],[1528856838194,["Re@Re.local",[[1,26790,"面的一系列图演示了"]],[26790,26790],[26799,26799]]],[1528856902151,[null,[[-1,26779,"个\n\n"],[1,26782,"移动。"],[1,26800,"\n\n"]],[26779,26779],[26802,26802]]],[1528856902152,[null,[[1,26779,"个\n\n"],[-1,26779,"移动。"],[-1,26800,"\n\n"]],[26802,26802],[26779,26779]]],[1528856875432,["Re@Re.local",[[1,26799,"w"]],[26799,26799],[26800,26800]]],[1528856875805,["Re@Re.local",[[-1,26799,"w"]],[26800,26800],[26799,26799]]],[1528856900786,["Re@Re.local",[[1,26799,"Dijkstra算法的应用。从顶点u开始，u的3个邻接顶点为v,w,x，"]],[26799,26799],[26835,26835]]],[1528856962160,[null,[[-1,26779,"个\n\n"],[1,26782,"移动。"],[1,26836,"\n\n"]],[26779,26779],[26838,26838]]],[1528856962160,[null,[[1,26779,"个\n\n"],[-1,26779,"移动。"],[-1,26836,"\n\n"]],[26838,26838],[26779,26779]]],[1528856911952,["Re@Re.local",[[1,26835,"由于v,w,"]],[26835,26835],[26841,26841]]],[1528856912793,["Re@Re.local",[[-1,26840,","]],[26841,26841],[26840,26840]]],[1528856914659,["Re@Re.local",[[1,26840,"和x的"]],[26840,26840],[26843,26843]]],[1528856916541,["Re@Re.local",[[-1,26842,"的"]],[26843,26843],[26842,26842]]],[1528856919297,["Re@Re.local",[[1,26842,"都被"]],[26842,26842],[26844,26844]]],[1528856919762,["Re@Re.local",[[-1,26843,"被"]],[26844,26844],[26843,26843]]],[1528856923110,["Re@Re.local",[[1,26843,"被初始化为sysy"]],[26843,26843],[26852,26852]]],[1528856923604,["Re@Re.local",[[-1,26851,"y"]],[26852,26852],[26851,26851]]],[1528856923886,["Re@Re.local",[[1,26851,","]],[26851,26851],[26852,26852]]],[1528856924825,["Re@Re.local",[[-1,26851,","]],[26852,26852],[26851,26851]]],[1528856926929,["Re@Re.local",[[1,26851,".maxint，"]],[26851,26851],[26859,26859]]],[1528857263017,[null,[[-1,26779,"个\n\n"],[1,26782,"移动。"],[1,26860,"\n\n"]],[26779,26779],[26862,26862]]],[1528857263017,[null,[[1,26779,"个\n\n"],[-1,26779,"移动。"],[-1,26860,"\n\n"]],[26862,26862],[26779,26779]]],[1528857227247,["Re@Re.local",[[-1,26858,"，"]],[26859,26859],[26858,26858]]],[1528857227806,["Re@Re.local",[[1,26858,"."]],[26858,26858],[26859,26859]]],[1528857228573,["Re@Re.local",[[-1,26858,"."]],[26859,26859],[26858,26858]]],[1528857229016,["Re@Re.local",[[1,26858,"。"]],[26858,26858],[26859,26859]]],[1528857230608,["Re@Re.local",[[-1,26858,"。"]],[26859,26859],[26858,26858]]],[1528857231196,["Re@Re.local",[[1,26858,"，"]],[26858,26858],[26859,26859]]],[1528857323015,[null,[[-1,26779,"个\n\n"],[1,26782,"移动。"],[1,26860,"\n\n"]],[26779,26779],[26862,26862]]],[1528857323015,[null,[[1,26779,"个\n\n"],[-1,26779,"移动。"],[-1,26860,"\n\n"]],[26862,26862],[26779,26779]]],[1528857274551,["Re@Re.local",[[1,26859,"从"]],[26859,26859],[26860,26860]]],[1528857274682,["Re@Re.local",[[-1,26859,"从"]],[26860,26860],[26859,26859]]],[1528857287235,["Re@Re.local",[[1,26859,"到达它们的权重是"]],[26859,26859],[26867,26867]]],[1528857297238,["Re@Re.local",[[-1,26863,"的权重是"]],[26867,26867],[26863,26863]]],[1528857298812,["Re@Re.local",[[1,26863,"的话费"]],[26863,26863],[26866,26866]]],[1528857299137,["Re@Re.local",[[-1,26864,"话费"]],[26866,26866],[26864,26864]]],[1528857302147,["Re@Re.local",[[1,26864,"代价即使"]],[26864,26864],[26868,26868]]],[1528857302377,["Re@Re.local",[[-1,26867,"使"]],[26868,26868],[26867,26867]]],[1528857306516,["Re@Re.local",[[1,26867,"是它们的邮箱"]],[26867,26867],[26873,26873]]],[1528857307019,["Re@Re.local",[[-1,26871,"邮箱"]],[26873,26873],[26871,26871]]],[1528857315491,["Re@Re.local",[[1,26871,"有向权重。"]],[26871,26871],[26876,26876]]],[1528857320987,["Re@Re.local",[[-1,26875,"。"]],[26876,26876],[26875,26875]]],[1528857321556,["Re@Re.local",[[1,26875,"，"]],[26875,26875],[26876,26876]]],[1528857382949,[null,[[-1,26779,"个\n\n"],[1,26782,"移动。"],[1,26877,"\n\n"]],[26779,26779],[26879,26879]]],[1528857382949,[null,[[1,26779,"个\n\n"],[-1,26779,"移动。"],[-1,26877,"\n\n"]],[26879,26879],[26779,26779]]],[1528857323876,["Re@Re.local",[[1,26876,"对其"]],[26876,26876],[26878,26878]]],[1528857324148,["Re@Re.local",[[-1,26876,"对其"]],[26878,26878],[26876,26876]]],[1528857332557,["Re@Re.local",[[1,26876,"更新到达这三个绩点的待"]],[26876,26876],[26887,26887]]],[1528857333229,["Re@Re.local",[[-1,26883,"绩点的待"]],[26887,26887],[26883,26883]]],[1528857341824,["Re@Re.local",[[1,26883,"节点的代价值。我们也为"]],[26883,26883],[26894,26894]]],[1528857344068,["Re@Re.local",[[-1,26890,"我们也为"]],[26894,26894],[26890,26890]]],[1528857353057,["Re@Re.local",[[1,26890,"将每个节点的"]],[26890,26890],[26896,26896]]],[1528857369858,["Re@Re.local",[[1,25866,"到父节点的连接"]],[25866,25866],[25873,25873]]],[1528857379793,["Re@Re.local",[[-1,25873,"前驱连接"]],[25873,25877],[25873,25873]]],[1528857442998,[null,[[-1,26782,"个\n\n"],[1,26785,"移动。"],[1,26900,"\n\n"]],[26782,26782],[26902,26902]]],[1528857442998,[null,[[1,26782,"个\n\n"],[-1,26782,"移动。"],[-1,26900,"\n\n"]],[26902,26902],[26782,26782]]],[1528857389151,["Re@Re.local",[[-1,25867,"父"]],[25868,25868],[25867,25867]]],[1528857391248,["Re@Re.local",[[1,25867,"祖先"]],[25867,25867],[25869,25869]]],[1528857405472,["Re@Re.local",[[1,25871,"（"]],[25871,25871],[25872,25872]]],[1528857407059,["Re@Re.local",[[-1,25871,"（"]],[25872,25872],[25871,25871]]],[1528857409939,["Re@Re.local",[[-1,25875,"？"]],[25876,25876],[25875,25875]]],[1528857441707,["Re@Re.local",[[1,25875,"predecessor links，"]],[25875,25875],[25893,25893]]],[1528857502961,[null,[[-1,26800,"个\n\n"],[1,26803,"移动。"],[1,26918,"\n\n"]],[26800,26800],[26920,26920]]],[1528857502961,[null,[[1,26800,"个\n\n"],[-1,26800,"移动。"],[-1,26918,"\n\n"]],[26920,26920],[26800,26800]]],[1528857444402,["Re@Re.local",[[-1,25892,"，这里"]],[25895,25895],[25892,25892]]],[1528857452552,["Re@Re.local",[[-1,25871,"的连接"]],[25874,25874],[25871,25871]]],[1528857457501,["Re@Re.local",[[1,25871,"的路径"]],[25871,25871],[25874,25874]]],[1528857463701,["Re@Re.local",[[1,25892,"，pre"]],[25892,25892],[25896,25896]]],[1528857464376,["Re@Re.local",[[-1,25893,"pre"]],[25896,25896],[25893,25893]]],[1528857465149,["Re@Re.local",[[1,25893,"zhel"]],[25893,25893],[25897,25897]]],[1528857465925,["Re@Re.local",[[-1,25893,"zhel"]],[25897,25897],[25893,25893]]],[1528857466562,["Re@Re.local",[[1,25893,"zhel"]],[25893,25893],[25897,25897]]],[1528857467406,["Re@Re.local",[[-1,25893,"zhel"]],[25897,25897],[25893,25893]]],[1528857476224,["Re@Re.local",[[1,25893,"这里的predecessor应是指出发点"]],[25893,25893],[25913,25913]]],[1528857492154,["Re@Re.local",[[1,26937,"祖先节点设置为"]],[26937,26937],[26944,26944]]],[1528857923134,[null,[[1,25913,"）。"],[-1,26818,"个\n\n"],[1,26821,"移动。"],[-1,26935,"\n"],[1,26943,"\n\n\n"]],[25913,25913],[26946,26946]]],[1528857923134,[null,[[-1,25913,"）。"],[1,26820,"个\n\n"],[-1,26820,"移动。"],[1,26937,"\n"],[-1,26944,"\n\n\n"]],[26946,26946],[25913,25913]]],[1528857863594,["Re@Re.local",[[1,26944,"w"]],[26944,26944],[26945,26945]]],[1528857863965,["Re@Re.local",[[-1,26944,"w"]],[26945,26945],[26944,26944]]],[1528857871809,["Re@Re.local",[[1,26944,"u，"]],[26944,26944],[26946,26946]]],[1528857874406,["Re@Re.local",[[-1,26945,"，"]],[26946,26946],[26945,26945]]],[1528857898183,["Re@Re.local",[[1,26945,"并且将每个节点加入优先队列中。使用距离作为优先队列的键，算法当前状态如图3 "]],[26945,26945],[26983,26983]]],[1528857898471,["Re@Re.local",[[-1,26982," "]],[26983,26983],[26982,26982]]],[1528857899911,["Re@Re.local",[[1,26982,"所示。"]],[26982,26982],[26985,26985]]],[1528857900288,["Re@Re.local",[[1,26988,"\n"]],[26985,26985],[26986,26986]]],[1528857900526,["Re@Re.local",[[1,26989,"\n"]],[26986,26986],[26987,26987]]],[1528857905847,["Re@Re.local",[[1,26987,"在loop的"]],[26987,26987],[26993,26993]]],[1528857907767,["Re@Re.local",[[-1,26988,"loop的"]],[26993,26993],[26988,26988]]],[1528857911196,["Re@Re.local",[[1,26988,"while循环的下一个"]],[26988,26988],[26999,26999]]],[1528858163192,[null,[[1,25913,"）。"],[-1,26818,"个\n\n"],[1,26821,"移动。"],[-1,26935,"\n"],[-1,26943,"w"],[1,26999,"\n\n\n"]],[25913,25913],[27002,27002]]],[1528858163192,[null,[[-1,25913,"）。"],[1,26820,"个\n\n"],[-1,26820,"移动。"],[1,26937,"\n"],[1,26944,"w"],[-1,26999,"\n\n\n"]],[27002,27002],[25913,25913]]],[1528858161837,["Re@Re.local",[[-1,26996,"下一个"]],[26999,26999],[26996,26996]]],[1528858223218,[null,[[1,25913,"）。"],[-1,26818,"个\n\n"],[1,26821,"移动。"],[-1,26935,"\n"],[-1,26943,"w"],[1,26996,"\n\n\n"]],[25913,25913],[26999,26999]]],[1528858223218,[null,[[-1,25913,"）。"],[1,26820,"个\n\n"],[-1,26820,"移动。"],[1,26937,"\n"],[1,26944,"w"],[-1,26996,"\n\n\n"]],[26999,26999],[25913,25913]]],[1528858173829,["Re@Re.local",[[1,26999,"迭代中，监测与x邻接"]],[26999,26999],[27009,27009]]],[1528858174546,["Re@Re.local",[[-1,27005,"与x邻接"]],[27009,27009],[27005,27005]]],[1528858178372,["Re@Re.local",[[1,27005,"x的邻接顶点，"]],[27005,27005],[27012,27012]]],[1528858182144,["Re@Re.local",[[-1,27011,"，"]],[27012,27012],[27011,27011]]],[1528858186018,["Re@Re.local",[[1,27011,"。之所以"]],[27011,27011],[27015,27015]]],[1528858187673,["Re@Re.local",[[-1,27003,"监测"]],[27005,27005],[27003,27003]]],[1528858189390,["Re@Re.local",[[1,27003,"检测"]],[27003,27003],[27005,27005]]],[1528858192193,["Re@Re.local",[[1,27015,"x"]],[27015,27015],[27016,27016]]],[1528858195486,["Re@Re.local",[[-1,27011,"。之所以x"]],[27016,27016],[27011,27011]]],[1528858196578,["Re@Re.local",[[1,27011,",zhi "]],[27011,27011],[27016,27016]]],[1528858197501,["Re@Re.local",[[-1,27011,",zhi "]],[27016,27016],[27011,27011]]],[1528858207210,["Re@Re.local",[[1,27011,"，之所以是x，是因为它的全局"]],[27011,27011],[27025,27025]]],[1528858343411,[null,[[1,25913,"）。"],[-1,26818,"个\n\n"],[1,26821,"移动。"],[-1,26935,"\n"],[-1,26943,"w"],[1,26996,"下一次"],[-1,27000,"监测与"],[1,27025,"\n\n\n"]],[25913,25913],[27028,27028]]],[1528858343411,[null,[[-1,25913,"）。"],[1,26820,"个\n\n"],[-1,26820,"移动。"],[1,26937,"\n"],[1,26944,"w"],[-1,26996,"下一次"],[1,27003,"监测与"],[-1,27025,"\n\n\n"]],[27028,27028],[25913,25913]]],[1528858335058,["Re@Re.local",[[-1,27023,"全局"]],[27025,27025],[27023,27023]]],[1528858335515,["Re@Re.local",[[1,27023,"zon"]],[27023,27023],[27026,27026]]],[1528858336124,["Re@Re.local",[[-1,27023,"zon"]],[27026,27026],[27023,27023]]],[1528858337546,["Re@Re.local",[[1,26968,"哦那个大"],[1,27023,"z"]],[26968,26968],[26972,26972]]],[1528858338128,["Re@Re.local",[[-1,26968,"哦那个大"],[-1,27027,"z"]],[26972,26972],[26968,26968]]],[1528858340379,["Re@Re.local",[[-1,27022,"的"]],[27023,27023],[27022,27022]]],[1528858341289,["Re@Re.local",[[1,27022,"的"]],[27022,27022],[27023,27023]]],[1528858403211,[null,[[1,25913,"）。"],[-1,26818,"个\n\n"],[1,26821,"移动。"],[-1,26935,"\n"],[-1,26943,"w"],[1,26996,"下一次"],[-1,27000,"监测与"],[1,27023,"\n\n\n"]],[25913,25913],[27026,27026]]],[1528858403211,[null,[[-1,25913,"）。"],[1,26820,"个\n\n"],[-1,26820,"移动。"],[1,26937,"\n"],[1,26944,"w"],[-1,26996,"下一次"],[1,27003,"监测与"],[-1,27023,"\n\n\n"]],[27026,27026],[25913,25913]]],[1528858348082,["Re@Re.local",[[1,27026,"最小因此"]],[27026,27026],[27030,27030]]],[1528858348385,["Re@Re.local",[[-1,27028,"因此"]],[27030,27030],[27028,27028]]],[1528858349812,["Re@Re.local",[[1,27028,"，将其"]],[27028,27028],[27031,27031]]],[1528858357202,["Re@Re.local",[[-1,27028,"，将其"]],[27031,27031],[27028,27028]]],[1528858358869,["Re@Re.local",[[1,27028,"于是"]],[27028,27028],[27030,27030]]],[1528858361484,["Re@Re.local",[[-1,27028,"于是"]],[27030,27030],[27028,27028]]],[1528858379481,["Re@Re.local",[[1,27028,"，于是被弹到了队首。在x，它的邻接节点"]],[27028,27028],[27047,27047]]],[1528858379791,["Re@Re.local",[[-1,27045,"节点"]],[27047,27047],[27045,27045]]],[1528858385169,["Re@Re.local",[[1,27045,"顶点为u,v,w,y，"]],[27045,27045],[27056,27056]]],[1528858385554,["Re@Re.local",[[-1,27055,"，"]],[27056,27056],[27055,27055]]],[1528858394894,["Re@Re.local",[[1,27055,"。对每个邻接节点，检测其"]],[27055,27055],[27067,27067]]],[1528858463266,[null,[[1,25913,"）。"],[-1,26818,"个\n\n"],[1,26821,"移动。"],[-1,26935,"\n"],[-1,26943,"w"],[1,26996,"下一次"],[-1,27000,"监测与"],[1,27023,"总代价"],[-1,27025,"因此，"],[1,27067,"\n\n\n"]],[25913,25913],[27070,27070]]],[1528858463267,[null,[[-1,25913,"）。"],[1,26820,"个\n\n"],[-1,26820,"移动。"],[1,26937,"\n"],[1,26944,"w"],[-1,26996,"下一次"],[1,27003,"监测与"],[-1,27023,"总代价"],[1,27028,"因此，"],[-1,27067,"\n\n\n"]],[27070,27070],[25913,25913]]],[1528858446054,["Re@Re.local",[[-1,27066,"其"]],[27067,27067],[27066,27066]]],[1528858462240,["Re@Re.local",[[1,27066,"从x到该节点的距离是否比上1个已知"]],[27066,27066],[27083,27083]]],[1528858523244,[null,[[1,25913,"）。"],[-1,26818,"个\n\n"],[1,26821,"移动。"],[-1,26935,"\n"],[-1,26943,"w"],[1,26996,"下一次"],[-1,27000,"监测与"],[1,27023,"总代价"],[-1,27025,"因此，"],[1,27083,"\n\n\n"]],[25913,25913],[27086,27086]]],[1528858523244,[null,[[-1,25913,"）。"],[1,26820,"个\n\n"],[-1,26820,"移动。"],[1,26937,"\n"],[1,26944,"w"],[-1,26996,"下一次"],[1,27003,"监测与"],[-1,27023,"总代价"],[1,27028,"因此，"],[-1,27083,"\n\n\n"]],[27086,27086],[25913,25913]]],[1528858472406,["Re@Re.local",[[1,27085,"小。显示"]],[27085,27085],[27089,27089]]],[1528858476270,["Re@Re.local",[[-1,27087,"显示"]],[27089,27089],[27087,27087]]],[1528858488268,["Re@Re.local",[[1,27087,"显然y满足条件，因为它的距离为sys.maxint。"]],[27087,27087],[27113,27113]]],[1528858494151,["Re@Re.local",[[-1,27112,"。"]],[27113,27113],[27112,27112]]],[1528858498150,["Re@Re.local",[[1,27112,"，而不是uhuozhe"]],[27112,27112],[27123,27123]]],[1528858499655,["Re@Re.local",[[-1,27117,"huozhe"]],[27123,27123],[27117,27117]]],[1528858500351,["Re@Re.local",[[1,27117,"huozh"]],[27117,27117],[27122,27122]]],[1528858501361,["Re@Re.local",[[-1,27117,"huozh"]],[27122,27122],[27117,27117]]],[1528858507453,["Re@Re.local",[[1,27117,"或者v，因为它们的距离是0"]],[27117,27117],[27130,27130]]],[1528858508408,["Re@Re.local",[[-1,27128,"是0"]],[27130,27130],[27128,27128]]],[1528858512937,["Re@Re.local",[[1,27128,"分别是0和2."]],[27128,27128],[27135,27135]]],[1528858513598,["Re@Re.local",[[-1,27134,"."]],[27135,27135],[27134,27134]]],[1528858514010,["Re@Re.local",[[1,27134,"."]],[27134,27134],[27135,27135]]],[1528858514511,["Re@Re.local",[[-1,27134,"."]],[27135,27135],[27134,27134]]],[1528858520955,["Re@Re.local",[[1,27134,"。然而，现在已经确认"]],[27134,27134],[27144,27144]]],[1528858522276,["Re@Re.local",[[-1,27140,"已经确认"]],[27144,27144],[27140,27140]]],[1528858584109,[null,[[1,25913,"）。"],[-1,26818,"个\n\n"],[1,26821,"移动。"],[-1,26935,"\n"],[-1,26943,"w"],[1,26996,"下一次"],[-1,27000,"监测与"],[1,27023,"总代价"],[-1,27025,"因此，"],[1,27083,"距离"],[-1,27085,"显示"],[1,27140,"\n\n\n"]],[25913,25913],[27143,27143]]],[1528858584110,[null,[[-1,25913,"）。"],[1,26820,"个\n\n"],[-1,26820,"移动。"],[1,26937,"\n"],[1,26944,"w"],[-1,26996,"下一次"],[1,27003,"监测与"],[-1,27023,"总代价"],[1,27028,"因此，"],[-1,27083,"距离"],[1,27087,"显示"],[-1,27140,"\n\n\n"]],[27143,27143],[25913,25913]]],[1528858530388,["Re@Re.local",[[1,27142,"确认到w的距离更小，"]],[27142,27142],[27152,27152]]],[1528858534438,["Re@Re.local",[[-1,27145,"w的距离更小，"]],[27152,27152],[27145,27145]]],[1528858544990,["Re@Re.local",[[1,27145,"从x到w的距离比u到w的距离小。"]],[27145,27145],[27161,27161]]],[1528858703907,[null,[[1,25913,"）。"],[-1,26818,"个\n\n"],[1,26821,"移动。"],[-1,26935,"\n"],[-1,26943,"w"],[1,26996,"下一次"],[-1,27000,"监测与"],[1,27023,"总代价"],[-1,27025,"因此，"],[1,27083,"距离"],[-1,27085,"显示"],[1,27140,"可以"],[-1,27143,"w的"],[1,27161,"\n\n\n"]],[25913,25913],[27164,27164]]],[1528858703907,[null,[[-1,25913,"）。"],[1,26820,"个\n\n"],[-1,26820,"移动。"],[1,26937,"\n"],[1,26944,"w"],[-1,26996,"下一次"],[1,27003,"监测与"],[-1,27023,"总代价"],[1,27028,"因此，"],[-1,27083,"距离"],[1,27087,"显示"],[-1,27140,"可以"],[1,27145,"w的"],[-1,27161,"\n\n\n"]],[27164,27164],[25913,25913]]],[1528858658973,["Re@Re.local",[[1,27161,"ju"]],[27161,27161],[27163,27163]]],[1528858659523,["Re@Re.local",[[-1,27161,"ju"]],[27163,27163],[27161,27161]]],[1528858672643,["Re@Re.local",[[1,27161,"据此，更新w的dist值"]],[27161,27161],[27173,27173]]],[1528858676437,["Re@Re.local",[[-1,27099,"距离"]],[27101,27101],[27099,27099]]],[1528858678042,["Re@Re.local",[[1,27099,"dist"]],[27099,27099],[27103,27103]]],[1528858679648,["Re@Re.local",[[-1,27083,"距离"]],[27085,27085],[27083,27083]]],[1528858680754,["Re@Re.local",[[1,27083,"dist"]],[27083,27083],[27087,27087]]],[1528858697355,["Re@Re.local",[[1,27177,"并且将其祖先节点从"]],[27177,27177],[27186,27186]]],[1528858700834,["Re@Re.local",[[-1,27181,"祖先节点从"]],[27186,27186],[27181,27181]]],[1528858702139,["Re@Re.local",[[1,27181,"w的"]],[27181,27181],[27183,27183]]],[1528858703071,["Re@Re.local",[[-1,27182,"的"]],[27183,27183],[27182,27182]]],[1528858763900,[null,[[1,25913,"）。"],[-1,26818,"个\n\n"],[1,26821,"移动。"],[-1,26935,"\n"],[-1,26943,"w"],[1,26996,"下一次"],[-1,27000,"监测与"],[1,27023,"总代价"],[-1,27025,"因此，"],[-1,27087,"显示"],[1,27089,"小。"],[1,27144,"可以"],[-1,27147,"w的"],[1,27182,"\n\n\n"]],[25913,25913],[27185,27185]]],[1528858763900,[null,[[-1,25913,"）。"],[1,26820,"个\n\n"],[-1,26820,"移动。"],[1,26937,"\n"],[1,26944,"w"],[-1,26996,"下一次"],[1,27003,"监测与"],[-1,27023,"总代价"],[1,27028,"因此，"],[1,27087,"显示"],[-1,27087,"小。"],[-1,27144,"可以"],[1,27149,"w的"],[-1,27182,"\n\n\n"]],[27185,27185],[25913,25913]]],[1528858719555,["Re@Re.local",[[1,27181,"祖先节点从u改为x。如"]],[27181,27181],[27192,27192]]],[1528858720091,["Re@Re.local",[[-1,27191,"如"]],[27192,27192],[27191,27191]]],[1528858723473,["Re@Re.local",[[1,27191,"当前组昂泰如它"]],[27191,27191],[27198,27198]]],[1528858724391,["Re@Re.local",[[-1,27193,"组昂泰如它"]],[27198,27198],[27193,27193]]],[1528858727524,["Re@Re.local",[[1,27193,"状态如图4所示。"]],[27193,27193],[27201,27201]]],[1528858727824,["Re@Re.local",[[1,27204,"\n"]],[27201,27201],[27202,27202]]],[1528858728065,["Re@Re.local",[[1,27205,"\n"]],[27202,27202],[27203,27203]]],[1528858735894,["Re@Re.local",[[1,27203,"下一步是检查"]],[27203,27203],[27209,27209]]],[1528858736871,["Re@Re.local",[[-1,27207,"检查"]],[27209,27209],[27207,27207]]],[1528858748690,["Re@Re.local",[[1,27207,"研究v的邻接节点（如图5）。该步骤"]],[27207,27207],[27224,27224]]],[1528858749382,["Re@Re.local",[[-1,27223,"骤"]],[27224,27224],[27223,27223]]],[1528858750581,["Re@Re.local",[[1,27223,"到"]],[27223,27223],[27224,27224]]],[1528858753941,["Re@Re.local",[[-1,27221,"该步到"]],[27224,27224],[27221,27221]]],[1528858756800,["Re@Re.local",[[1,27221,"在一个"]],[27221,27221],[27224,27224]]],[1528858757494,["Re@Re.local",[[-1,27222,"一个"]],[27224,27224],[27222,27222]]],[1528858763320,["Re@Re.local",[[1,27222,"该步骤中"]],[27222,27222],[27226,27226]]],[1528858823937,[null,[[1,25913,"）。"],[-1,26818,"个\n\n"],[1,26821,"移动。"],[-1,26935,"\n"],[-1,26943,"w"],[1,26996,"下一次"],[-1,27000,"监测与"],[1,27023,"总代价"],[-1,27025,"因此，"],[-1,27087,"显示"],[1,27089,"小。"],[1,27144,"可以"],[-1,27147,"w的"],[-1,27201,"w"],[1,27202,"\n"],[1,27227,"\n\n"]],[25913,25913],[27229,27229]]],[1528858823937,[null,[[-1,25913,"）。"],[1,26820,"个\n\n"],[-1,26820,"移动。"],[1,26937,"\n"],[1,26944,"w"],[-1,26996,"下一次"],[1,27003,"监测与"],[-1,27023,"总代价"],[1,27028,"因此，"],[1,27087,"显示"],[-1,27087,"小。"],[-1,27144,"可以"],[1,27149,"w的"],[1,27201,"w"],[-1,27201,"\n"],[-1,27227,"\n\n"]],[27229,27229],[25913,25913]]],[1528858765604,["Re@Re.local",[[1,27226,"并没有没"]],[27226,27226],[27230,27230]]],[1528858765755,["Re@Re.local",[[-1,27229,"没"]],[27230,27230],[27229,27229]]],[1528858780390,["Re@Re.local",[[1,27229,"对图进行修改，因此移动至节点y。在节点y（图5"]],[27229,27229],[27252,27252]]],[1528858780867,["Re@Re.local",[[-1,27251,"5"]],[27252,27252],[27251,27251]]],[1528858823000,["Re@Re.local",[[1,27251,"6）发现从它到w和z的消耗更小，因此对应地修改dist值"]],[27251,27251],[27279,27279]]],[1528858883884,[null,[[1,25913,"）。"],[-1,26818,"个\n\n"],[1,26821,"移动。"],[-1,26935,"\n"],[-1,26943,"w"],[1,26996,"下一次"],[-1,27000,"监测与"],[1,27023,"总代价"],[-1,27025,"因此，"],[-1,27087,"显示"],[1,27089,"小。"],[1,27144,"可以"],[-1,27147,"w的"],[-1,27201,"w"],[1,27202,"\n"],[1,27280,"\n\n"]],[25913,25913],[27282,27282]]],[1528858883884,[null,[[-1,25913,"）。"],[1,26820,"个\n\n"],[-1,26820,"移动。"],[1,26937,"\n"],[1,26944,"w"],[-1,26996,"下一次"],[1,27003,"监测与"],[-1,27023,"总代价"],[1,27028,"因此，"],[1,27087,"显示"],[-1,27087,"小。"],[-1,27144,"可以"],[1,27149,"w的"],[1,27201,"w"],[-1,27201,"\n"],[-1,27280,"\n\n"]],[27282,27282],[25913,25913]]],[1528858827758,["Re@Re.local",[[1,27280,"祖先教练"]],[27280,27280],[27284,27284]]],[1528858828144,["Re@Re.local",[[-1,27282,"教练"]],[27284,27284],[27282,27282]]],[1528858829271,["Re@Re.local",[[1,27282,"连接。"]],[27282,27282],[27285,27285]]],[1528869484947,[null,[[1,25913,"）。"],[-1,26818,"个\n\n"],[1,26821,"移动。"],[-1,26935,"\n"],[-1,26943,"w"],[1,26996,"下一次"],[-1,27000,"监测与"],[1,27023,"总代价"],[-1,27025,"因此，"],[-1,27087,"显示"],[1,27089,"小。"],[1,27144,"可以"],[-1,27147,"w的"],[-1,27201,"w"],[1,27202,"\n"],[-1,27279,"\n"],[1,27280,"和"],[1,27285,"\n\n\n"]],[25913,25913],[27288,27288]]],[1528869484947,[null,[[-1,25913,"）。"],[1,26820,"个\n\n"],[-1,26820,"移动。"],[1,26937,"\n"],[1,26944,"w"],[-1,26996,"下一次"],[1,27003,"监测与"],[-1,27023,"总代价"],[1,27028,"因此，"],[1,27087,"显示"],[-1,27087,"小。"],[-1,27144,"可以"],[1,27149,"w的"],[1,27201,"w"],[-1,27201,"\n"],[1,27279,"\n"],[-1,27279,"和"],[-1,27285,"\n\n\n"]],[27288,27288],[25913,25913]]],[1528869445476,["Re@Re.local",[[1,27285,"最后检查节点w和z（如图6、8所示），然而"]],[27285,27285],[27306,27306]]],[1528869446400,["Re@Re.local",[[-1,27304,"然而"]],[27306,27306],[27304,27304]]],[1528869483339,["Re@Re.local",[[1,27304,"由于没发现需要作修改的地方，因此优先队列为空，Dijkstra算法结束。"]],[27304,27304],[27340,27340]]],[1528869483617,["Re@Re.local",[[1,27343,"\n"]],[27340,27340],[27341,27341]]],[1528869546969,[null,[[1,25913,"）。"],[-1,26818,"个\n\n"],[1,26821,"移动。"],[-1,26935,"\n"],[-1,26943,"w"],[1,26996,"下一次"],[-1,27000,"监测与"],[1,27023,"总代价"],[-1,27025,"因此，"],[-1,27087,"显示"],[1,27089,"小。"],[1,27144,"可以"],[-1,27147,"w的"],[-1,27201,"w"],[1,27202,"\n"],[-1,27279,"\n"],[1,27280,"和"],[1,27341,"\n\n\n"]],[25913,25913],[27344,27344]]],[1528869546969,[null,[[-1,25913,"）。"],[1,26820,"个\n\n"],[-1,26820,"移动。"],[1,26937,"\n"],[1,26944,"w"],[-1,26996,"下一次"],[1,27003,"监测与"],[-1,27023,"总代价"],[1,27028,"因此，"],[1,27087,"显示"],[-1,27087,"小。"],[-1,27144,"可以"],[1,27149,"w的"],[1,27201,"w"],[-1,27201,"\n"],[1,27279,"\n"],[-1,27279,"和"],[-1,27341,"\n\n\n"]],[27344,27344],[25913,25913]]],[1528869487928,["Re@Re.local",[[1,27344,"\n"]],[27341,27341],[27342,27342]]],[1528869488224,["Re@Re.local",[[1,27342,"![../_images/dijkstraa.png](http://interactivepython.org/courselib/static/pythonds/_images/dijkstraa.png)"]],[27342,27342],[27447,27447]]],[1528869488319,["Re@Re.local",[[1,27450,"\n"]],[27447,27447],[27448,27448]]],[1528869488512,["Re@Re.local",[[1,27451,"\n"]],[27448,27448],[27449,27449]]],[1528869491859,["Re@Re.local",[[1,27449,"![../_images/dijkstrab.png](http://interactivepython.org/courselib/static/pythonds/_images/dijkstrab.png)"]],[27449,27449],[27554,27554]]],[1528869492277,["Re@Re.local",[[1,27557,"\n"]],[27554,27554],[27555,27555]]],[1528869492469,["Re@Re.local",[[1,27558,"\n"]],[27555,27555],[27556,27556]]],[1528869496499,["Re@Re.local",[[1,27556,"![../_images/dijkstrac.png](http://interactivepython.org/courselib/static/pythonds/_images/dijkstrac.png)"]],[27556,27556],[27661,27661]]],[1528869496772,["Re@Re.local",[[1,27664,"\n"]],[27661,27661],[27662,27662]]],[1528869497069,["Re@Re.local",[[1,27665,"\n"]],[27662,27662],[27663,27663]]],[1528869500946,["Re@Re.local",[[1,27663,"![../_images/dijkstrad.png](http://interactivepython.org/courselib/static/pythonds/_images/dijkstrad.png)"]],[27663,27663],[27768,27768]]],[1528869501603,["Re@Re.local",[[1,27771,"\n"]],[27768,27768],[27769,27769]]],[1528869501805,["Re@Re.local",[[1,27772,"\n"]],[27769,27769],[27770,27770]]],[1528869505308,["Re@Re.local",[[1,27770,"![../_images/dijkstrae.png](http://interactivepython.org/courselib/static/pythonds/_images/dijkstrae.png)"]],[27770,27770],[27875,27875]]],[1528869505585,["Re@Re.local",[[1,27878,"\n"]],[27875,27875],[27876,27876]]],[1528869505814,["Re@Re.local",[[1,27879,"\n"]],[27876,27876],[27877,27877]]],[1528869509047,["Re@Re.local",[[1,27877,"![../_images/dijkstraf.png](http://interactivepython.org/courselib/static/pythonds/_images/dijkstraf.png)"]],[27877,27877],[27982,27982]]],[1528869509392,["Re@Re.local",[[1,27985,"\n"]],[27982,27982],[27983,27983]]],[1528869509627,["Re@Re.local",[[1,27986,"\n"]],[27983,27983],[27984,27984]]],[1528869514185,["Re@Re.local",[[-1,27986,"\n"]],[27985,27985],[27984,27984]]],[1528869516148,["Re@Re.local",[[1,27984,"重要"]],[27984,27984],[27986,27986]]],[1528869516707,["Re@Re.local",[[-1,27984,"重要"]],[27986,27986],[27984,27984]]],[1528869534038,["Re@Re.local",[[1,27984,"值得注意的是，Dijkstra算法只有当权重为正时起小"]],[27984,27984],[28011,28011]]],[1528869534295,["Re@Re.local",[[-1,28009,"起小"]],[28011,28011],[28009,28009]]],[1528869535007,["Re@Re.local",[[1,28009,"旗下"]],[28009,28009],[28011,28011]]],[1528869535268,["Re@Re.local",[[-1,28009,"旗下"]],[28011,28011],[28009,28009]]],[1528869537267,["Re@Re.local",[[1,28009,"有效，"]],[28009,28009],[28012,28012]]],[1528869606745,[null,[[-1,25913,""],[1,25913,"）。"],[-1,26818,"个\n\n"],[1,26821,"移动。"],[-1,26935,"\n"],[-1,26943,"w"],[1,26996,"下一次"],[-1,27000,"监测与"],[1,27023,"总代价"],[-1,27025,"因此，"],[-1,27087,"显示"],[1,27089,"小。"],[1,27144,"可以"],[-1,27147,"w的"],[-1,27201,"w"],[1,27202,"\n"],[-1,27279,"\n"],[1,27280,"和"],[-1,28012,""],[1,28012,"\n\n"]],[25913,25913],[28014,28014]]],[1528869606745,[null,[[1,25913,""],[-1,25913,"）。"],[1,26820,"个\n\n"],[-1,26820,"移动。"],[1,26937,"\n"],[1,26944,"w"],[-1,26996,"下一次"],[1,27003,"监测与"],[-1,27023,"总代价"],[1,27028,"因此，"],[1,27087,"显示"],[-1,27087,"小。"],[-1,27144,"可以"],[1,27149,"w的"],[1,27201,"w"],[-1,27201,"\n"],[1,27279,"\n"],[-1,27279,"和"],[1,28012,""],[-1,28012,"\n\n"]],[28014,28014],[25913,25913]]],[1528869556515,["Re@Re.local",[[1,28012,"读者应当明白如果引入"]],[28012,28012],[28022,28022]]],[1528869556987,["Re@Re.local",[[-1,28020,"引入"]],[28022,28022],[28020,28020]]],[1528869573769,["Re@Re.local",[[1,28020,"在某条边上引入了负值，那么该算法将心如无限"]],[28020,28020],[28041,28041]]],[1528869574494,["Re@Re.local",[[-1,28037,"心如无限"]],[28041,28041],[28037,28037]]],[1528869578428,["Re@Re.local",[[1,28037,"陷入无限熏黄"]],[28037,28037],[28043,28043]]],[1528869579013,["Re@Re.local",[[-1,28041,"熏黄"]],[28043,28043],[28041,28041]]],[1528869581816,["Re@Re.local",[[1,28041,"循环。"]],[28041,28041],[28044,28044]]],[1528869582294,["Re@Re.local",[[1,28046,"\n"]],[28044,28044],[28045,28045]]],[1528869582523,["Re@Re.local",[[1,28047,"\n"]],[28045,28045],[28046,28046]]],[1528869726893,[null,[[-1,25913,""],[1,25913,"）。"],[-1,26818,"个\n\n"],[1,26821,"移动。"],[-1,26935,"\n"],[-1,26943,"w"],[1,26996,"下一次"],[-1,27000,"监测与"],[1,27023,"总代价"],[-1,27025,"因此，"],[-1,27087,"显示"],[1,27089,"小。"],[1,27144,"可以"],[-1,27147,"w的"],[-1,27201,"w"],[1,27202,"\n"],[-1,27279,"\n"],[1,27280,"和"],[-1,28044,""],[1,28044,"\n\n"]],[25913,25913],[28046,28046]]],[1528869726894,[null,[[1,25913,""],[-1,25913,"）。"],[1,26820,"个\n\n"],[-1,26820,"移动。"],[1,26937,"\n"],[1,26944,"w"],[-1,26996,"下一次"],[1,27003,"监测与"],[-1,27023,"总代价"],[1,27028,"因此，"],[1,27087,"显示"],[-1,27087,"小。"],[-1,27144,"可以"],[1,27149,"w的"],[1,27201,"w"],[-1,27201,"\n"],[1,27279,"\n"],[-1,27279,"和"],[1,28044,""],[-1,28044,"\n\n"]],[28046,28046],[25913,25913]]],[1528869714354,["Re@Re.local",[[1,28046,"可以看出，为了在网路"]],[28046,28046],[28056,28056]]],[1528869714926,["Re@Re.local",[[-1,28054,"网路"]],[28056,28056],[28054,28054]]],[1528869716980,["Re@Re.local",[[1,28054,"惠安网上"]],[28054,28054],[28058,28058]]],[1528869717640,["Re@Re.local",[[-1,28054,"惠安网上"]],[28058,28058],[28054,28054]]],[1528869719683,["Re@Re.local",[[1,28054,"互联网上"]],[28054,28054],[28058,28058]]],[1528869786719,[null,[[-1,25913,""],[1,25913,"）。"],[-1,26818,"个\n\n"],[1,26821,"移动。"],[-1,26935,"\n"],[-1,26943,"w"],[1,26996,"下一次"],[-1,27000,"监测与"],[1,27023,"总代价"],[-1,27025,"因此，"],[-1,27087,"显示"],[1,27089,"小。"],[1,27144,"可以"],[-1,27147,"w的"],[-1,27201,"w"],[1,27202,"\n"],[-1,27279,"\n"],[1,27280,"和"],[-1,28058,""],[1,28058,"\n\n"]],[25913,25913],[28060,28060]]],[1528869786720,[null,[[1,25913,""],[-1,25913,"）。"],[1,26820,"个\n\n"],[-1,26820,"移动。"],[1,26937,"\n"],[1,26944,"w"],[-1,26996,"下一次"],[1,27003,"监测与"],[-1,27023,"总代价"],[1,27028,"因此，"],[1,27087,"显示"],[-1,27087,"小。"],[-1,27144,"可以"],[1,27149,"w的"],[1,27201,"w"],[-1,27201,"\n"],[1,27279,"\n"],[-1,27279,"和"],[1,28058,""],[-1,28058,"\n\n"]],[28060,28060],[25913,25913]]],[1528869741154,["Re@Re.local",[[1,28058,"传输信息，其它算法"]],[28058,28058],[28067,28067]]],[1528869745554,["Re@Re.local",[[-1,28046,"可以看出，"]],[28051,28051],[28046,28046]]],[1528869754943,["Re@Re.local",[[1,28062,"也会被用来使用"]],[28062,28062],[28069,28069]]],[1528869758599,["Re@Re.local",[[1,28058,"还有"]],[28058,28058],[28060,28060]]],[1528869761911,["Re@Re.local",[[-1,28064,"也会被用来使用"]],[28071,28071],[28064,28064]]],[1528869779656,["Re@Re.local",[[1,28064,"也可用来寻找最短路径。使用"]],[28064,28064],[28077,28077]]],[1528869781775,["Re@Re.local",[[-1,28075,"使用"]],[28077,28077],[28075,28075]]],[1528869785670,["Re@Re.local",[[1,28075,"在互联网上使用Di"]],[28075,28075],[28084,28084]]],[1528869846966,[null,[[-1,25913,""],[1,25913,"）。"],[-1,26818,"个\n\n"],[1,26821,"移动。"],[-1,26935,"\n"],[-1,26943,"w"],[1,26996,"下一次"],[-1,27000,"监测与"],[1,27023,"总代价"],[-1,27025,"因此，"],[-1,27087,"显示"],[1,27089,"小。"],[1,27144,"可以"],[-1,27147,"w的"],[-1,27201,"w"],[1,27202,"\n"],[-1,27279,"\n"],[1,27280,"和"],[-1,28084,""],[1,28084,"\n\n"]],[25913,25913],[28086,28086]]],[1528869846967,[null,[[1,25913,""],[-1,25913,"）。"],[1,26820,"个\n\n"],[-1,26820,"移动。"],[1,26937,"\n"],[1,26944,"w"],[-1,26996,"下一次"],[1,27003,"监测与"],[-1,27023,"总代价"],[1,27028,"因此，"],[1,27087,"显示"],[-1,27087,"小。"],[-1,27144,"可以"],[1,27149,"w的"],[1,27201,"w"],[-1,27201,"\n"],[1,27279,"\n"],[-1,27279,"和"],[1,28084,""],[-1,28084,"\n\n"]],[28086,28086],[25913,25913]]],[1528869790783,["Re@Re.local",[[-1,28075,"在互联网上使用"]],[28082,28082],[28075,28075]]],[1528869811679,["Re@Re.local",[[1,28075,"对互联网问题使用Dijkstra算法的问题在于必须要有图的完整表示"]],[28075,28075],[28108,28108]]],[1528869820021,["Re@Re.local",[[-1,28100,"要有图的完整表示"]],[28108,28108],[28100,28100]]],[1528869827367,["Re@Re.local",[[1,28100,"要给出完整的图，否则比啊"]],[28100,28100],[28112,28112]]],[1528869828455,["Re@Re.local",[[-1,28110,"比啊"]],[28112,28112],[28110,28110]]],[1528869830432,["Re@Re.local",[[1,28110,"算法无法"]],[28110,28110],[28114,28114]]],[1528869832936,["Re@Re.local",[[-1,28107,"，否则算法无法"]],[28114,28114],[28107,28107]]],[1528869840358,["Re@Re.local",[[1,28107,"以保证算法的运行。这意味着，"]],[28107,28107],[28121,28121]]],[1528869906732,[null,[[-1,25913,""],[1,25913,"）。"],[-1,26818,"个\n\n"],[1,26821,"移动。"],[-1,26935,"\n"],[-1,26943,"w"],[1,26996,"下一次"],[-1,27000,"监测与"],[1,27023,"总代价"],[-1,27025,"因此，"],[-1,27087,"显示"],[1,27089,"小。"],[1,27144,"可以"],[-1,27147,"w的"],[-1,27201,"w"],[1,27202,"\n"],[-1,27279,"\n"],[1,27280,"和"],[-1,28121,"Di"],[1,28123,"\n\n"]],[25913,25913],[28125,28125]]],[1528869906732,[null,[[1,25913,""],[-1,25913,"）。"],[1,26820,"个\n\n"],[-1,26820,"移动。"],[1,26937,"\n"],[1,26944,"w"],[-1,26996,"下一次"],[1,27003,"监测与"],[-1,27023,"总代价"],[1,27028,"因此，"],[1,27087,"显示"],[-1,27087,"小。"],[-1,27144,"可以"],[1,27149,"w的"],[1,27201,"w"],[-1,27201,"\n"],[1,27279,"\n"],[-1,27279,"和"],[1,28121,"Di"],[-1,28121,"\n\n"]],[28125,28125],[25913,25913]]],[1528869857143,["Re@Re.local",[[1,28123,"路由器都要有地图"]],[28123,28123],[28131,28131]]],[1528869857473,["Re@Re.local",[[-1,28129,"地图"]],[28131,28131],[28129,28129]]],[1528869861900,["Re@Re.local",[[1,28129,"互联网上所有路由的"]],[28129,28129],[28138,28138]]],[1528869862164,["Re@Re.local",[[-1,28137,"的"]],[28138,28138],[28137,28137]]],[1528869863931,["Re@Re.local",[[1,28136,"】"],[1,28137,"qi"]],[28136,28136],[28137,28137]]],[1528869864782,["Re@Re.local",[[-1,28136,"】"]],[28137,28137],[28136,28136]]],[1528869866795,["Re@Re.local",[[-1,28135,"路由qi"]],[28139,28139],[28135,28135]]],[1528869868265,["Re@Re.local",[[1,28135,"路由器"]],[28135,28135],[28138,28138]]],[1528869876957,["Re@Re.local",[[-1,28127,"要有"]],[28129,28129],[28127,28127]]],[1528869882841,["Re@Re.local",[[1,28127,"连接至"]],[28127,28127],[28130,28130]]],[1528869883589,["Re@Re.local",[[-1,28127,"连接至"]],[28130,28130],[28127,28127]]],[1528869888992,["Re@Re.local",[[1,28127,"要连接到"]],[28127,28127],[28131,28131]]],[1528869890957,["Re@Re.local",[[1,28140,"。"]],[28140,28140],[28141,28141]]],[1528869892369,["Re@Re.local",[[-1,28140,"。"]],[28141,28141],[28140,28140]]],[1528869893868,["Re@Re.local",[[1,28140,"，当"]],[28140,28140],[28142,28142]]],[1528869894196,["Re@Re.local",[[-1,28140,"，当"]],[28142,28142],[28140,28140]]],[1528869894563,["Re@Re.local",[[1,28140,"，"]],[28140,28140],[28141,28141]]],[1528869895351,["Re@Re.local",[[-1,28140,"，"]],[28141,28141],[28140,28140]]],[1528869898850,["Re@Re.local",[[1,28140,"，在实践中当然"]],[28140,28140],[28147,28147]]],[1528869968090,[null,[[-1,25913,""],[1,25913,"）。"],[-1,26818,"个\n\n"],[1,26821,"移动。"],[-1,26935,"\n"],[-1,26943,"w"],[1,26996,"下一次"],[-1,27000,"监测与"],[1,27023,"总代价"],[-1,27025,"因此，"],[-1,27087,"显示"],[1,27089,"小。"],[1,27144,"可以"],[-1,27147,"w的"],[-1,27201,"w"],[1,27202,"\n"],[-1,27279,"\n"],[1,27280,"和"],[-1,28121,"Di"],[1,28123,"每个"],[1,28147,"\n\n"]],[25913,25913],[28149,28149]]],[1528869968090,[null,[[1,25913,""],[-1,25913,"）。"],[1,26820,"个\n\n"],[-1,26820,"移动。"],[1,26937,"\n"],[1,26944,"w"],[-1,26996,"下一次"],[1,27003,"监测与"],[-1,27023,"总代价"],[1,27028,"因此，"],[1,27087,"显示"],[-1,27087,"小。"],[-1,27144,"可以"],[1,27149,"w的"],[1,27201,"w"],[-1,27201,"\n"],[1,27279,"\n"],[-1,27279,"和"],[1,28121,"Di"],[-1,28121,"每个"],[-1,28147,"\n\n"]],[28149,28149],[25913,25913]]],[1528869909311,["Re@Re.local",[[1,28121,"图中的"]],[28121,28121],[28124,28124]]],[1528869915196,["Re@Re.local",[[1,28150,"是不肯恩那个"]],[28150,28150],[28156,28156]]],[1528869916355,["Re@Re.local",[[-1,28150,"是不肯恩那个"]],[28156,28156],[28150,28150]]],[1528869924732,["Re@Re.local",[[1,28150,"不是这么作的，该算法的另一种"]],[28150,28150],[28164,28164]]],[1528869925924,["Re@Re.local",[[-1,28163,"种"]],[28164,28164],[28163,28163]]],[1528869950633,["Re@Re.local",[[1,28163,"些变体可以让路由器在传输的过程中不断地发现 "]],[28163,28163],[28185,28185]]],[1528869951220,["Re@Re.local",[[-1,28182,"发现 "]],[28185,28185],[28182,28182]]],[1528869953769,["Re@Re.local",[[1,28182,"探索图。"]],[28182,28182],[28186,28186]]],[1528869960176,["Re@Re.local",[[-1,28185,"。"]],[28186,28186],[28185,28185]]],[1528869963044,["Re@Re.local",[[1,28185,"，比如说"]],[28185,28185],[28189,28189]]],[1528870028245,[null,[[-1,25913,""],[1,25913,"）。"],[-1,26818,"个\n\n"],[1,26821,"移动。"],[-1,26935,"\n"],[-1,26943,"w"],[1,26996,"下一次"],[-1,27000,"监测与"],[1,27023,"总代价"],[-1,27025,"因此，"],[-1,27087,"显示"],[1,27089,"小。"],[1,27144,"可以"],[-1,27147,"w的"],[-1,27201,"w"],[1,27202,"\n"],[-1,27279,"\n"],[1,27280,"和"],[-1,28124,"Di"],[1,28126,"每个"],[1,28189,"\n\n"]],[25913,25913],[28191,28191]]],[1528870028245,[null,[[1,25913,""],[-1,25913,"）。"],[1,26820,"个\n\n"],[-1,26820,"移动。"],[1,26937,"\n"],[1,26944,"w"],[-1,26996,"下一次"],[1,27003,"监测与"],[-1,27023,"总代价"],[1,27028,"因此，"],[1,27087,"显示"],[-1,27087,"小。"],[-1,27144,"可以"],[1,27149,"w的"],[1,27201,"w"],[-1,27201,"\n"],[1,27279,"\n"],[-1,27279,"和"],[1,28124,"Di"],[-1,28124,"每个"],[-1,28189,"\n\n"]],[28191,28191],[25913,25913]]],[1528869976658,["Re@Re.local",[[1,28189,"巨量向量路由撒"]],[28189,28189],[28196,28196]]],[1528869978053,["Re@Re.local",[[-1,28189,"巨量向量路由撒"]],[28196,28196],[28189,28189]]],[1528869982665,["Re@Re.local",[[1,28189,"距离向量路由算法。"]],[28189,28189],[28198,28198]]],[1528869983060,["Re@Re.local",[[1,28200,"\n"]],[28198,28198],[28199,28199]]],[1528869983269,["Re@Re.local",[[1,28201,"\n"]],[28199,28199],[28200,28200]]],[1528869996002,["Re@Re.local",[[1,28200,"## 7.21 Dijs"]],[28200,28200],[28212,28212]]],[1528869997744,["Re@Re.local",[[-1,28210,"js"]],[28212,28212],[28210,28210]]],[1528870000457,["Re@Re.local",[[1,28210,"jkstar"]],[28210,28210],[28216,28216]]],[1528870002295,["Re@Re.local",[[-1,28214,"ar"]],[28216,28216],[28214,28214]]],[1528870004650,["Re@Re.local",[[1,28214,"ra 上"]],[28214,28214],[28218,28218]]],[1528870005276,["Re@Re.local",[[-1,28216," 上"]],[28218,28218],[28216,28216]]],[1528870007933,["Re@Re.local",[[1,28216,"算法分析 ##"]],[28216,28216],[28223,28223]]],[1528870008133,["Re@Re.local",[[1,28225,"\n"]],[28223,28223],[28224,28224]]],[1528870008351,["Re@Re.local",[[1,28226,"\n"]],[28224,28224],[28225,28225]]],[1528870013233,["Re@Re.local",[[1,28225,"最后，研究"]],[28225,28225],[28230,28230]]],[1528870013612,["Re@Re.local",[[-1,28228,"研究"]],[28230,28230],[28228,28228]]],[1528870014831,["Re@Re.local",[[1,28228,"研究"]],[28228,28228],[28230,28230]]],[1528870017726,["Re@Re.local",[[-1,28228,"研究"]],[28230,28230],[28228,28228]]],[1528870018846,["Re@Re.local",[[1,28228,"分析"]],[28228,28228],[28230,28230]]],[1528870019311,["Re@Re.local",[[-1,28227,"，分析"]],[28230,28230],[28227,28227]]],[1528870027130,["Re@Re.local",[[1,28227,"分析一下Dijkstra算法的运行"]],[28227,28227],[28244,28244]]],[1528870089168,[null,[[-1,25913,""],[1,25913,"）。"],[-1,26818,"个\n\n"],[1,26821,"移动。"],[-1,26935,"\n"],[-1,26943,"w"],[1,26996,"下一次"],[-1,27000,"监测与"],[1,27023,"总代价"],[-1,27025,"因此，"],[-1,27087,"显示"],[1,27089,"小。"],[1,27144,"可以"],[-1,27147,"w的"],[-1,27201,"w"],[1,27202,"\n"],[-1,27279,"\n"],[1,27280,"和"],[-1,28124,"Di"],[1,28126,"每个"],[-1,28244,""],[1,28244,"\n\n"]],[25913,25913],[28246,28246]]],[1528870089169,[null,[[1,25913,""],[-1,25913,"）。"],[1,26820,"个\n\n"],[-1,26820,"移动。"],[1,26937,"\n"],[1,26944,"w"],[-1,26996,"下一次"],[1,27003,"监测与"],[-1,27023,"总代价"],[1,27028,"因此，"],[1,27087,"显示"],[-1,27087,"小。"],[-1,27144,"可以"],[1,27149,"w的"],[1,27201,"w"],[-1,27201,"\n"],[1,27279,"\n"],[-1,27279,"和"],[1,28124,"Di"],[-1,28124,"每个"],[1,28244,""],[-1,28244,"\n\n"]],[28246,28246],[25913,25913]]],[1528870032632,["Re@Re.local",[[1,28247,"首先可以注意大"]],[28247,28247],[28254,28254]]],[1528870033021,["Re@Re.local",[[-1,28253,"大"]],[28254,28254],[28253,28253]]],[1528870061069,["Re@Re.local",[[1,28253,"到，生成优先队列需要O(V)的时间，因为在初始化时将图中的每个顶点都加入到了优先队列中。"]],[28253,28253],[28297,28297]]],[1528870062912,["Re@Re.local",[[-1,28296,"。"]],[28297,28297],[28296,28296]]],[1528870064831,["Re@Re.local",[[1,28296,"，狗"]],[28296,28296],[28298,28298]]],[1528870065140,["Re@Re.local",[[-1,28296,"，狗"]],[28298,28298],[28296,28296]]],[1528870077678,["Re@Re.local",[[1,28296,"。构造完成队列后，执行1次while"]],[28296,28296],[28314,28314]]],[1528903553370,[null,[[-1,25913,""],[1,25913,"）。"],[-1,26818,"个\n\n"],[1,26821,"移动。"],[-1,26935,"\n"],[-1,26943,"w"],[1,26996,"下一次"],[-1,27000,"监测与"],[1,27023,"总代价"],[-1,27025,"因此，"],[-1,27087,"显示"],[1,27089,"小。"],[1,27144,"可以"],[-1,27147,"w的"],[-1,27201,"w"],[1,27202,"\n"],[-1,27279,"\n"],[1,27280,"和"],[-1,28124,"Di"],[1,28126,"每个"],[1,28244,"时间。"],[-1,28250,"大"],[-1,28295,"，。"],[1,28314,"\n\n"]],[25913,25913],[28316,28316]]],[1528903553370,[null,[[1,25913,""],[-1,25913,"）。"],[1,26820,"个\n\n"],[-1,26820,"移动。"],[1,26937,"\n"],[1,26944,"w"],[-1,26996,"下一次"],[1,27003,"监测与"],[-1,27023,"总代价"],[1,27028,"因此，"],[1,27087,"显示"],[-1,27087,"小。"],[-1,27144,"可以"],[1,27149,"w的"],[1,27201,"w"],[-1,27201,"\n"],[1,27279,"\n"],[-1,27279,"和"],[1,28124,"Di"],[-1,28124,"每个"],[-1,28244,"时间。"],[1,28253,"大"],[1,28297,"，。"],[-1,28314,"\n\n"]],[28316,28316],[25913,25913]]],[1528903541207,["Re@Re.local",[[-1,28305,"执行1次while"]],[28314,28314],[28305,28305]]],[1528903549362,["Re@Re.local",[[1,28305,"对每个顶点都"]],[28305,28305],[28311,28311]]],[1528903614391,[null,[[-1,25913,""],[1,25913,"）。"],[-1,26818,"个\n\n"],[1,26821,"移动。"],[-1,26935,"\n"],[-1,26943,"w"],[1,26996,"下一次"],[-1,27000,"监测与"],[1,27023,"总代价"],[-1,27025,"因此，"],[-1,27087,"显示"],[1,27089,"小。"],[1,27144,"可以"],[-1,27147,"w的"],[-1,27201,"w"],[1,27202,"\n"],[-1,27279,"\n"],[1,27280,"和"],[-1,28124,"Di"],[1,28126,"每个"],[1,28244,"时间。"],[-1,28250,"大"],[-1,28295,"，。"],[1,28311,"\n\n"]],[25913,25913],[28313,28313]]],[1528903614391,[null,[[1,25913,""],[-1,25913,"）。"],[1,26820,"个\n\n"],[-1,26820,"移动。"],[1,26937,"\n"],[1,26944,"w"],[-1,26996,"下一次"],[1,27003,"监测与"],[-1,27023,"总代价"],[1,27028,"因此，"],[1,27087,"显示"],[-1,27087,"小。"],[-1,27144,"可以"],[1,27149,"w的"],[1,27201,"w"],[-1,27201,"\n"],[1,27279,"\n"],[-1,27279,"和"],[1,28124,"Di"],[-1,28124,"每个"],[-1,28244,"时间。"],[1,28253,"大"],[1,28297,"，。"],[-1,28311,"\n\n"]],[28313,28313],[25913,25913]]],[1528903576621,["Re@Re.local",[[1,28311,"执行1次while循环，因为顶点都是在开始"]],[28311,28311],[28332,28332]]],[1528903577273,["Re@Re.local",[[-1,28330,"开始"]],[28332,28332],[28330,28330]]],[1528905408327,[null,[[-1,25913,""],[1,25913,"）。"],[-1,26818,"个\n\n"],[1,26821,"移动。"],[-1,26935,"\n"],[-1,26943,"w"],[1,26996,"下一次"],[-1,27000,"监测与"],[1,27023,"总代价"],[-1,27025,"因此，"],[-1,27087,"显示"],[1,27089,"小。"],[1,27144,"可以"],[-1,27147,"w的"],[-1,27201,"w"],[1,27202,"\n"],[-1,27279,"\n"],[1,27280,"和"],[-1,28124,"Di"],[1,28126,"每个"],[1,28244,"时间。"],[-1,28250,"大"],[-1,28295,"，。"],[1,28330,"\n\n"]],[25913,25913],[28332,28332]]],[1528905408327,[null,[[1,25913,""],[-1,25913,"）。"],[1,26820,"个\n\n"],[-1,26820,"移动。"],[1,26937,"\n"],[1,26944,"w"],[-1,26996,"下一次"],[1,27003,"监测与"],[-1,27023,"总代价"],[1,27028,"因此，"],[1,27087,"显示"],[-1,27087,"小。"],[-1,27144,"可以"],[1,27149,"w的"],[1,27201,"w"],[-1,27201,"\n"],[1,27279,"\n"],[-1,27279,"和"],[1,28124,"Di"],[-1,28124,"每个"],[-1,28244,"时间。"],[1,28253,"大"],[1,28297,"，。"],[-1,28330,"\n\n"]],[28332,28332],[25913,25913]]],[1528905392882,["Re@Re.local",[[1,28330,"一开始就加入然后在此只"]],[28330,28330],[28341,28341]]],[1528905393249,["Re@Re.local",[[-1,28339,"此只"]],[28341,28341],[28339,28339]]],[1528905396720,["Re@Re.local",[[1,28339,"完成循环"]],[28339,28339],[28343,28343]]],[1528905398027,["Re@Re.local",[[-1,28341,"循环"]],[28343,28343],[28341,28341]]],[1528905468137,[null,[[-1,25913,""],[1,25913,"）。"],[-1,26818,"个\n\n"],[1,26821,"移动。"],[-1,26935,"\n"],[-1,26943,"w"],[1,26996,"下一次"],[-1,27000,"监测与"],[1,27023,"总代价"],[-1,27025,"因此，"],[-1,27087,"显示"],[1,27089,"小。"],[1,27144,"可以"],[-1,27147,"w的"],[-1,27201,"w"],[1,27202,"\n"],[-1,27279,"\n"],[1,27280,"和"],[-1,28124,"Di"],[1,28126,"每个"],[1,28244,"时间。"],[-1,28250,"大"],[-1,28295,"，。"],[1,28341,"\n\n"]],[25913,25913],[28343,28343]]],[1528905468137,[null,[[1,25913,""],[-1,25913,"）。"],[1,26820,"个\n\n"],[-1,26820,"移动。"],[1,26937,"\n"],[1,26944,"w"],[-1,26996,"下一次"],[1,27003,"监测与"],[-1,27023,"总代价"],[1,27028,"因此，"],[1,27087,"显示"],[-1,27087,"小。"],[-1,27144,"可以"],[1,27149,"w的"],[1,27201,"w"],[-1,27201,"\n"],[1,27279,"\n"],[-1,27279,"和"],[1,28124,"Di"],[-1,28124,"每个"],[-1,28244,"时间。"],[1,28253,"大"],[1,28297,"，。"],[-1,28341,"\n\n"]],[28343,28343],[25913,25913]]],[1528905437585,["Re@Re.local",[[1,28341,"该循环后被移除。在循环内，每个对delMin的调用都以"]],[28341,28341],[28368,28368]]],[1528905439048,["Re@Re.local",[[-1,28366,"都以"]],[28368,28368],[28366,28366]]],[1528905441466,["Re@Re.local",[[1,28366,"的父"]],[28366,28366],[28368,28368]]],[1528905442694,["Re@Re.local",[[-1,28366,"的父"]],[28368,28368],[28366,28366]]],[1528905444387,["Re@Re.local",[[-1,28367,"\n"]],[28367,28367],[28366,28366]]],[1528905448923,["Re@Re.local",[[1,28366,"时间复杂度都是O("]],[28366,28366],[28375,28375]]],[1528905449743,["Re@Re.local",[[-1,28373,"O("]],[28375,28375],[28373,28373]]],[1528905450593,["Re@Re.local",[[1,28373,"$$"]],[28373,28373],[28375,28375]]],[1528905456947,["Re@Re.local",[[1,28374,"O(\\log V)"]],[28374,28374],[28383,28383]]],[1528942059133,[null,[[-1,25913,""],[1,25913,"）。"],[-1,26818,"个\n\n"],[1,26821,"移动。"],[-1,26935,"\n"],[-1,26943,"w"],[1,26996,"下一次"],[-1,27000,"监测与"],[1,27023,"总代价"],[-1,27025,"因此，"],[-1,27087,"显示"],[1,27089,"小。"],[1,27144,"可以"],[-1,27147,"w的"],[-1,27201,"w"],[1,27202,"\n"],[-1,27279,"\n"],[1,27280,"和"],[-1,28124,"Di"],[1,28126,"每个"],[1,28244,"时间。"],[-1,28250,"大"],[-1,28294,"。，"],[1,28384,"\n"]],[25913,25913],[28385,28385]]],[1528942059134,[null,[[1,25913,""],[-1,25913,"）。"],[1,26820,"个\n\n"],[-1,26820,"移动。"],[1,26937,"\n"],[1,26944,"w"],[-1,26996,"下一次"],[1,27003,"监测与"],[-1,27023,"总代价"],[1,27028,"因此，"],[1,27087,"显示"],[-1,27087,"小。"],[-1,27144,"可以"],[1,27149,"w的"],[1,27201,"w"],[-1,27201,"\n"],[1,27279,"\n"],[-1,27279,"和"],[1,28124,"Di"],[-1,28124,"每个"],[-1,28244,"时间。"],[1,28253,"大"],[1,28296,"。，"],[-1,28384,"\n"]],[28385,28385],[25913,25913]]],[1528942038797,["Re@Re.local",[[1,28384,","]],[28384,28384],[28385,28385]]],[1528942039601,["Re@Re.local",[[-1,28384,","]],[28385,28385],[28384,28384]]],[1528942044174,["Re@Re.local",[[1,28384,"，时间复杂度为$$"]],[28384,28384],[28393,28393]]],[1528942050641,["Re@Re.local",[[1,28392,"O(\\log V)"]],[28392,28392],[28401,28401]]],[1528942054322,["Re@Re.local",[[1,28402,"."]],[28402,28402],[28403,28403]]],[1528942054780,["Re@Re.local",[[-1,28402,"."]],[28403,28403],[28402,28402]]],[1528942055219,["Re@Re.local",[[1,28402,"。"]],[28402,28402],[28403,28403]]],[1528942119468,[null,[[-1,25913,""],[1,25913,"）。"],[-1,26818,"个\n\n"],[1,26821,"移动。"],[-1,26935,"\n"],[-1,26943,"w"],[1,26996,"下一次"],[-1,27000,"监测与"],[1,27023,"总代价"],[-1,27025,"因此，"],[-1,27087,"显示"],[1,27089,"小。"],[1,27144,"可以"],[-1,27147,"w的"],[-1,27201,"w"],[1,27202,"\n"],[-1,27279,"\n"],[1,27280,"和"],[-1,28124,"Di"],[1,28126,"每个"],[1,28244,"时间。"],[-1,28250,"大"],[-1,28294,"。，"],[1,28403,"\n"]],[25913,25913],[28404,28404]]],[1528942119468,[null,[[1,25913,""],[-1,25913,"）。"],[1,26820,"个\n\n"],[-1,26820,"移动。"],[1,26937,"\n"],[1,26944,"w"],[-1,26996,"下一次"],[1,27003,"监测与"],[-1,27023,"总代价"],[1,27028,"因此，"],[1,27087,"显示"],[-1,27087,"小。"],[-1,27144,"可以"],[1,27149,"w的"],[1,27201,"w"],[-1,27201,"\n"],[1,27279,"\n"],[-1,27279,"和"],[1,28124,"Di"],[-1,28124,"每个"],[-1,28244,"时间。"],[1,28253,"大"],[1,28296,"。，"],[-1,28403,"\n"]],[28404,28404],[25913,25913]]],[1528942065604,["Re@Re.local",[[1,28403,"将"]],[28403,28403],[28404,28404]]],[1528942066352,["Re@Re.local",[[-1,28403,"将"]],[28404,28404],[28403,28403]]],[1528942068810,["Re@Re.local",[[1,28403,"zong和"]],[28407,28407],[28408,28408]]],[1528942070159,["Re@Re.local",[[-1,28403,"zong和"]],[28408,28408],[28403,28403]]],[1528942091562,["Re@Re.local",[[1,28403,"综合循环内的那部分以及delMin，一共是O(VL"]],[28403,28403],[28428,28428]]],[1528942092151,["Re@Re.local",[[-1,28427,"L"]],[28428,28428],[28427,28427]]],[1528942092601,["Re@Re.local",[[1,28427,"l"]],[28427,28427],[28428,28428]]],[1528942093819,["Re@Re.local",[[-1,28424,"O(Vl"]],[28428,28428],[28424,28424]]],[1528942094718,["Re@Re.local",[[1,28424,"$$"]],[28424,28424],[28426,28426]]],[1528942105289,["Re@Re.local",[[1,28425,"O(V\\log (v)"]],[28425,28425],[28436,28436]]],[1528942106037,["Re@Re.local",[[-1,28434,"v)"]],[28436,28436],[28434,28434]]],[1528942108047,["Re@Re.local",[[1,28434,"V))"]],[28434,28434],[28437,28437]]],[1528942109731,["Re@Re.local",[[1,28438," "]],[28438,28438],[28439,28439]]],[1528942110896,["Re@Re.local",[[-1,28438," "]],[28439,28439],[28438,28438]]],[1528942118592,["Re@Re.local",[[1,28438,"。for循环对图中的"]],[28438,28438],[28448,28448]]],[1528942179095,[null,[[-1,25913,""],[1,25913,"）。"],[-1,26818,"个\n\n"],[1,26821,"移动。"],[-1,26935,"\n"],[-1,26943,"w"],[1,26996,"下一次"],[-1,27000,"监测与"],[1,27023,"总代价"],[-1,27025,"因此，"],[-1,27087,"显示"],[1,27089,"小。"],[1,27144,"可以"],[-1,27147,"w的"],[-1,27201,"w"],[1,27202,"\n"],[-1,27279,"\n"],[1,27280,"和"],[-1,28124,"Di"],[1,28126,"每个"],[1,28244,"时间。"],[-1,28250,"大"],[-1,28294,"。，"],[1,28448,"\n"]],[25913,25913],[28449,28449]]],[1528942179096,[null,[[1,25913,""],[-1,25913,"）。"],[1,26820,"个\n\n"],[-1,26820,"移动。"],[1,26937,"\n"],[1,26944,"w"],[-1,26996,"下一次"],[1,27003,"监测与"],[-1,27023,"总代价"],[1,27028,"因此，"],[1,27087,"显示"],[-1,27087,"小。"],[-1,27144,"可以"],[1,27149,"w的"],[1,27201,"w"],[-1,27201,"\n"],[1,27279,"\n"],[-1,27279,"和"],[1,28124,"Di"],[-1,28124,"每个"],[-1,28244,"时间。"],[1,28253,"大"],[1,28296,"。，"],[-1,28448,"\n"]],[28449,28449],[25913,25913]]],[1528942128615,["Re@Re.local",[[1,28450,"边执行1次，在for循环内的"]],[28450,28450],[28464,28464]]],[1528942128873,["Re@Re.local",[[-1,28463,"的"]],[28464,28464],[28463,28463]]],[1528942135280,["Re@Re.local",[[1,28463,"对decreaseKey的吊椅哦那个"]],[28463,28463],[28481,28481]]],[1528942136537,["Re@Re.local",[[-1,28476,"吊椅哦那个"]],[28481,28481],[28476,28476]]],[1528942138477,["Re@Re.local",[[1,28476,"吊药"]],[28476,28476],[28478,28478]]],[1528942140319,["Re@Re.local",[[-1,28463,"对"]],[28464,28464],[28463,28463]]],[1528942141569,["Re@Re.local",[[-1,28475,"吊药"]],[28477,28477],[28475,28475]]],[1528942146205,["Re@Re.local",[[1,28475,"调用是4$"]],[28475,28475],[28480,28480]]],[1528942146913,["Re@Re.local",[[-1,28478,"4$"]],[28480,28480],[28478,28478]]],[1528942147386,["Re@Re.local",[[1,28478,"$$"]],[28478,28478],[28480,28480]]],[1528942154192,["Re@Re.local",[[1,28479,"O(Elog\\ "]],[28479,28479],[28487,28487]]],[1528942155783,["Re@Re.local",[[-1,28481,"Elog\\ "]],[28487,28487],[28481,28481]]],[1528942157051,["Re@Re.local",[[1,28481,"E]"]],[28481,28481],[28483,28483]]],[1528942157978,["Re@Re.local",[[-1,28482,"]"]],[28483,28483],[28482,28482]]],[1528942163087,["Re@Re.local",[[1,28482,"\\log (V))"]],[28482,28482],[28491,28491]]],[1528942175107,["Re@Re.local",[[1,28492,"。因此总的时间复杂度为"]],[28492,28492],[28503,28503]]],[1528942239282,[null,[[-1,25913,""],[1,25913,"）。"],[-1,26818,"个\n\n"],[1,26821,"移动。"],[-1,26935,"\n"],[-1,26943,"w"],[1,26996,"下一次"],[-1,27000,"监测与"],[1,27023,"总代价"],[-1,27025,"因此，"],[-1,27087,"显示"],[1,27089,"小。"],[1,27144,"可以"],[-1,27147,"w的"],[-1,27201,"w"],[1,27202,"\n"],[-1,27279,"\n"],[1,27280,"和"],[-1,28124,"Di"],[1,28126,"每个"],[1,28244,"时间。"],[-1,28250,"大"],[-1,28295,"，。"],[1,28448,"每个"],[-1,28461,"的对"],[1,28463,"d"],[-1,28474,"吊"],[1,28503,"\n"]],[25913,25913],[28504,28504]]],[1528942239282,[null,[[1,25913,""],[-1,25913,"）。"],[1,26820,"个\n\n"],[-1,26820,"移动。"],[1,26937,"\n"],[1,26944,"w"],[-1,26996,"下一次"],[1,27003,"监测与"],[-1,27023,"总代价"],[1,27028,"因此，"],[1,27087,"显示"],[-1,27087,"小。"],[-1,27144,"可以"],[1,27149,"w的"],[1,27201,"w"],[-1,27201,"\n"],[1,27279,"\n"],[-1,27279,"和"],[1,28124,"Di"],[-1,28124,"每个"],[-1,28244,"时间。"],[1,28253,"大"],[1,28297,"，。"],[-1,28448,"每个"],[1,28463,"的对"],[-1,28463,"d"],[1,28475,"吊"],[-1,28503,"\n"]],[28504,28504],[25913,25913]]],[1528942188339,["Re@Re.local",[[1,28504,"O((V+E)\\log (V))"]],[28504,28504],[28520,28520]]],[1528942191162,["Re@Re.local",[[1,28521,"。"]],[28521,28521],[28522,28522]]],[1528942205332,["Re@Re.local",[[1,28523,"\n"]],[28522,28522],[28523,28523]]],[1528942205566,["Re@Re.local",[[1,28524,"\n"]],[28523,28523],[28524,28524]]],[1528942209607,["Re@Re.local",[[-1,28524,"\n"],[1,28525,"## 7.22 ##"]],[28524,28524],[28534,28534]]],[1528942210633,["Re@Re.local",[[1,28532," "]],[28531,28531],[28532,28532]]],[1528942299494,[null,[[-1,25913,""],[1,25913,"）。"],[-1,26818,"个\n\n"],[1,26821,"移动。"],[-1,26935,"\n"],[-1,26943,"w"],[1,26996,"下一次"],[-1,27000,"监测与"],[1,27023,"总代价"],[-1,27025,"因此，"],[-1,27087,"显示"],[1,27089,"小。"],[1,27144,"可以"],[-1,27147,"w的"],[-1,27201,"w"],[1,27202,"\n"],[-1,27279,"\n"],[1,27280,"和"],[-1,28124,"Di"],[1,28126,"每个"],[1,28244,"时间。"],[-1,28250,"大"],[-1,28294,"。，"],[1,28448,"每个"],[-1,28461,"的对"],[1,28463,"d"],[-1,28474,"吊"],[1,28503,"$"],[1,28519,"$"],[1,28530," "],[-1,28532," "]],[25913,25913],[28532,28532]]],[1528942299494,[null,[[1,25913,""],[-1,25913,"）。"],[1,26820,"个\n\n"],[-1,26820,"移动。"],[1,26937,"\n"],[1,26944,"w"],[-1,26996,"下一次"],[1,27003,"监测与"],[-1,27023,"总代价"],[1,27028,"因此，"],[1,27087,"显示"],[-1,27087,"小。"],[-1,27144,"可以"],[1,27149,"w的"],[1,27201,"w"],[-1,27201,"\n"],[1,27279,"\n"],[-1,27279,"和"],[1,28124,"Di"],[-1,28124,"每个"],[-1,28244,"时间。"],[1,28253,"大"],[1,28296,"。，"],[-1,28448,"每个"],[1,28463,"的对"],[-1,28463,"d"],[1,28475,"吊"],[-1,28503,"$"],[-1,28520,"$"],[-1,28532," "],[1,28535," "]],[28532,28532],[25913,25913]]],[1528942263830,["Re@Re.local",[[1,28532,"Prim生成树算法"]],[28532,28532],[28541,28541]]],[1528942359271,[null,[[-1,25913,""],[1,25913,"）。"],[-1,26818,"个\n\n"],[1,26821,"移动。"],[-1,26935,"\n"],[-1,26943,"w"],[1,26996,"下一次"],[-1,27000,"监测与"],[1,27023,"总代价"],[-1,27025,"因此，"],[-1,27087,"显示"],[1,27089,"小。"],[1,27144,"可以"],[-1,27147,"w的"],[-1,27201,"w"],[1,27202,"\n"],[-1,27279,"\n"],[1,27280,"和"],[-1,28124,"Di"],[1,28126,"每个"],[1,28244,"时间。"],[-1,28250,"大"],[-1,28294,"。，"],[1,28448,"每个"],[-1,28461,"的对"],[1,28463,"d"],[-1,28474,"吊"],[1,28503,"$"],[1,28519,"$"],[-1,28530,"##"],[1,28542,"##"]],[25913,25913],[28544,28544]]],[1528942359271,[null,[[1,25913,""],[-1,25913,"）。"],[1,26820,"个\n\n"],[-1,26820,"移动。"],[1,26937,"\n"],[1,26944,"w"],[-1,26996,"下一次"],[1,27003,"监测与"],[-1,27023,"总代价"],[1,27028,"因此，"],[1,27087,"显示"],[-1,27087,"小。"],[-1,27144,"可以"],[1,27149,"w的"],[1,27201,"w"],[-1,27201,"\n"],[1,27279,"\n"],[-1,27279,"和"],[1,28124,"Di"],[-1,28124,"每个"],[-1,28244,"时间。"],[1,28253,"大"],[1,28296,"。，"],[-1,28448,"每个"],[1,28463,"的对"],[-1,28463,"d"],[1,28475,"吊"],[-1,28503,"$"],[-1,28520,"$"],[1,28532,"##"],[-1,28542,"##"]],[28544,28544],[25913,25913]]],[1528942304677,["Re@Re.local",[[1,28544,"\n\n"]],[28544,28544],[28545,28545]]],[1528942304894,["Re@Re.local",[[1,28546,"\n"]],[28545,28545],[28546,28546]]],[1528942839061,[null,[[-1,25913,""],[1,25913,"）。"],[-1,26818,"个\n\n"],[1,26821,"移动。"],[-1,26935,"\n"],[-1,26943,"w"],[1,26996,"下一次"],[-1,27000,"监测与"],[1,27023,"总代价"],[-1,27025,"因此，"],[-1,27087,"显示"],[1,27089,"小。"],[1,27144,"可以"],[-1,27147,"w的"],[-1,27201,"w"],[1,27202,"\n"],[-1,27279,"\n"],[1,27280,"和"],[-1,28124,"Di"],[1,28126,"每个"],[1,28244,"时间。"],[-1,28250,"大"],[-1,28294,"。，"],[1,28448,"每个"],[-1,28461,"的对"],[1,28463,"d"],[-1,28474,"吊"],[1,28503,"$"],[1,28519,"$"],[-1,28530,"##"],[1,28542,"##"]],[25913,25913],[28544,28544]]],[1528942839061,[null,[[1,25913,""],[-1,25913,"）。"],[1,26820,"个\n\n"],[-1,26820,"移动。"],[1,26937,"\n"],[1,26944,"w"],[-1,26996,"下一次"],[1,27003,"监测与"],[-1,27023,"总代价"],[1,27028,"因此，"],[1,27087,"显示"],[-1,27087,"小。"],[-1,27144,"可以"],[1,27149,"w的"],[1,27201,"w"],[-1,27201,"\n"],[1,27279,"\n"],[-1,27279,"和"],[1,28124,"Di"],[-1,28124,"每个"],[-1,28244,"时间。"],[1,28253,"大"],[1,28296,"。，"],[-1,28448,"每个"],[1,28463,"的对"],[-1,28463,"d"],[1,28475,"吊"],[-1,28503,"$"],[-1,28520,"$"],[1,28532,"##"],[-1,28542,"##"]],[28544,28544],[25913,25913]]],[1528942836501,["Re@Re.local",[[-1,28546,"\n"],[1,28547,"w"]],[28546,28546],[28547,28547]]],[1528942836892,["Re@Re.local",[[-1,28546,"w"]],[28547,28547],[28546,28546]]],[1528942837654,["Re@Re.local",[[-1,28545,"\n"],[1,28546,"d"]],[28546,28546],[28545,28546]]],[1528942837786,["Re@Re.local",[[1,28546,"u"]],[28545,28546],[28545,28547]]],[1528942837860,["Re@Re.local",[[1,28547,"i"]],[28545,28547],[28545,28548]]],[1528942838090,["Re@Re.local",[[1,28548," y"]],[28545,28548],[28545,28550]]],[1528942838270,["Re@Re.local",[[1,28550,"u"]],[28545,28550],[28545,28551]]],[1528942838413,["Re@Re.local",[[-1,28545,"dui yu"],[1,28551,"对于"]],[28545,28551],[28547,28547]]],[1528942838742,["Re@Re.local",[[-1,28546,"于"]],[28547,28547],[28546,28546]]],[1528942899066,[null,[[-1,25913,""],[1,25913,"）。"],[-1,26818,"个\n\n"],[1,26821,"移动。"],[-1,26935,"\n"],[-1,26943,"w"],[1,26996,"下一次"],[-1,27000,"监测与"],[1,27023,"总代价"],[-1,27025,"因此，"],[-1,27087,"显示"],[1,27089,"小。"],[1,27144,"可以"],[-1,27147,"w的"],[-1,27201,"w"],[1,27202,"\n"],[-1,27279,"\n"],[1,27280,"和"],[-1,28124,"Di"],[1,28126,"每个"],[1,28244,"时间。"],[-1,28250,"大"],[-1,28294,"。，"],[1,28448,"每个"],[-1,28461,"的对"],[1,28463,"d"],[-1,28474,"吊"],[1,28503,"$"],[1,28519,"$"],[-1,28530,"##"],[-1,28542,"\n\n"],[1,28544,"##"]],[25913,25913],[28546,28546]]],[1528942899066,[null,[[1,25913,""],[-1,25913,"）。"],[1,26820,"个\n\n"],[-1,26820,"移动。"],[1,26937,"\n"],[1,26944,"w"],[-1,26996,"下一次"],[1,27003,"监测与"],[-1,27023,"总代价"],[1,27028,"因此，"],[1,27087,"显示"],[-1,27087,"小。"],[-1,27144,"可以"],[1,27149,"w的"],[1,27201,"w"],[-1,27201,"\n"],[1,27279,"\n"],[-1,27279,"和"],[1,28124,"Di"],[-1,28124,"每个"],[-1,28244,"时间。"],[1,28253,"大"],[1,28296,"。，"],[-1,28448,"每个"],[1,28463,"的对"],[-1,28463,"d"],[1,28475,"吊"],[-1,28503,"$"],[-1,28520,"$"],[1,28532,"##"],[1,28542,"\n\n"],[-1,28542,"##"]],[28546,28546],[25913,25913]]],[1528942839454,["Re@Re.local",[[1,28546,"\n"]],[28545,28545],[28546,28546]]],[1528942854206,["Re@Re.local",[[-1,28546,"\n"],[1,28547,"最后来学"]],[28546,28546],[28550,28550]]],[1528942854766,["Re@Re.local",[[-1,28547,"后来学"]],[28550,28550],[28547,28547]]],[1528942857351,["Re@Re.local",[[-1,28225,"最后"]],[28227,28227],[28225,28225]]],[1528942858015,["Re@Re.local",[[1,28225,"来"]],[28225,28225],[28226,28226]]],[1528942859014,["Re@Re.local",[[-1,28225,"来"]],[28226,28226],[28225,28225]]],[1528942859850,["Re@Re.local",[[1,28225,"现在"]],[28225,28225],[28227,28227]]],[1528942861713,["Re@Re.local",[[-1,28546,"最"]],[28547,28547],[28546,28546]]],[1528942862007,["Re@Re.local",[[-1,28545,"\n"],[1,28546,"z"]],[28546,28546],[28545,28546]]],[1528942862194,["Re@Re.local",[[1,28546,"u"]],[28545,28546],[28545,28547]]],[1528942862258,["Re@Re.local",[[1,28547,"i"]],[28545,28547],[28545,28548]]],[1528942862419,["Re@Re.local",[[1,28548," h"]],[28545,28548],[28545,28550]]],[1528942862516,["Re@Re.local",[[1,28550,"o"]],[28545,28550],[28545,28551]]],[1528942862621,["Re@Re.local",[[1,28551,"u"]],[28545,28551],[28545,28552]]],[1528942862688,["Re@Re.local",[[-1,28545,"zui hou"],[1,28552,"最后"]],[28545,28552],[28547,28547]]],[1528942862839,["Re@Re.local",[[-1,28546,"后"]],[28547,28547],[28546,28546]]],[1528942863028,["Re@Re.local",[[-1,28545,"最"],[1,28546,"\n"]],[28546,28546],[28545,28545]]],[1528942863256,["Re@Re.local",[[1,28546,"\n"]],[28545,28545],[28546,28546]]],[1528942869455,["Re@Re.local",[[-1,28546,"\n"],[1,28547,"最后学习的图算法"]],[28546,28546],[28554,28554]]],[1528942883149,["Re@Re.local",[[-1,28546,"最后学习的图算法"]],[28554,28554],[28546,28546]]],[1528942883788,["Re@Re.local",[[1,28546,"\n\n"]],[28546,28546],[28547,28547]]],[1528942896058,["Re@Re.local",[[-1,28547,"\n"],[1,28548,"考虑在线"]],[28547,28547],[28551,28551]]],[1528942959062,[null,[[-1,25913,""],[1,25913,"）。"],[-1,26818,"个\n\n"],[1,26821,"移动。"],[-1,26935,"\n"],[-1,26943,"w"],[1,26996,"下一次"],[-1,27000,"监测与"],[1,27023,"总代价"],[-1,27025,"因此，"],[-1,27087,"显示"],[1,27089,"小。"],[1,27144,"可以"],[-1,27147,"w的"],[-1,27201,"w"],[1,27202,"\n"],[-1,27279,"\n"],[1,27280,"和"],[-1,28124,"Di"],[1,28126,"每个"],[1,28244,"时间。"],[-1,28250,"大"],[-1,28294,"。，"],[1,28448,"每个"],[-1,28461,"的对"],[1,28463,"d"],[-1,28474,"吊"],[1,28503,"$"],[1,28519,"$"],[-1,28530,"##"],[-1,28542,"\n\n"],[1,28544,"##"]],[25913,25913],[28546,28546]]],[1528942959062,[null,[[1,25913,""],[-1,25913,"）。"],[1,26820,"个\n\n"],[-1,26820,"移动。"],[1,26937,"\n"],[1,26944,"w"],[-1,26996,"下一次"],[1,27003,"监测与"],[-1,27023,"总代价"],[1,27028,"因此，"],[1,27087,"显示"],[-1,27087,"小。"],[-1,27144,"可以"],[1,27149,"w的"],[1,27201,"w"],[-1,27201,"\n"],[1,27279,"\n"],[-1,27279,"和"],[1,28124,"Di"],[-1,28124,"每个"],[-1,28244,"时间。"],[1,28253,"大"],[1,28296,"。，"],[-1,28448,"每个"],[1,28463,"的对"],[-1,28463,"d"],[1,28475,"吊"],[-1,28503,"$"],[-1,28520,"$"],[1,28532,"##"],[1,28542,"\n\n"],[-1,28542,"##"]],[28546,28546],[25913,25913]]],[1528942903806,["Re@Re.local",[[-1,28547,"考虑在线"]],[28551,28551],[28547,28547]]],[1528942905342,["Re@Re.local",[[-1,28546,"\n"],[1,28547,"z"]],[28547,28547],[28546,28547]]],[1528942905484,["Re@Re.local",[[1,28547,"u"]],[28546,28547],[28546,28548]]],[1528942905665,["Re@Re.local",[[1,28548," w"]],[28546,28548],[28546,28550]]],[1528942905756,["Re@Re.local",[[1,28550,"e"]],[28546,28550],[28546,28551]]],[1528942905874,["Re@Re.local",[[1,28551,"i"]],[28546,28551],[28546,28552]]],[1528942906035,["Re@Re.local",[[-1,28546,"zu wei"],[1,28552,"组委"]],[28546,28552],[28548,28548]]],[1528942906644,["Re@Re.local",[[-1,28546,"组委"]],[28548,28548],[28546,28546]]],[1528942906799,["Re@Re.local",[[-1,28545,"\n"],[1,28546,"z"]],[28546,28546],[28545,28546]]],[1528942907460,["Re@Re.local",[[-1,28545,"z"]],[28545,28546],[0,0]]],[1528942907703,["Re@Re.local",[[1,28545,"\n\n"]],[28545,28545],[28546,28546]]],[1528942922126,["Re@Re.local",[[-1,28546,"\n"],[1,28547,"作为图算法的结尾，来考虑一个在线游戏和"]],[28546,28546],[28565,28565]]],[1528942922546,["Re@Re.local",[[-1,28564,"和"]],[28565,28565],[28564,28564]]],[1528942933895,["Re@Re.local",[[1,28564,"设计者和互联网广播提供商常常"]],[28564,28564],[28578,28578]]],[1528942934283,["Re@Re.local",[[-1,28576,"常常"]],[28578,28578],[28576,28576]]],[1528942937988,["Re@Re.local",[[1,28576,"面对的一个问题。"]],[28576,28576],[28584,28584]]],[1528942938543,["Re@Re.local",[[-1,28583,"。"]],[28584,28584],[28583,28583]]],[1528942945083,["Re@Re.local",[[1,28583,"，即入伙"]],[28583,28583],[28587,28587]]],[1528942946130,["Re@Re.local",[[-1,28585,"入伙"]],[28587,28587],[28585,28585]]],[1528942958610,["Re@Re.local",[[1,28585,"如何将信息传送"]],[28585,28585],[28592,28592]]],[1528943019067,[null,[[-1,25913,""],[1,25913,"）。"],[-1,26818,"个\n\n"],[1,26821,"移动。"],[-1,26935,"\n"],[-1,26943,"w"],[1,26996,"下一次"],[-1,27000,"监测与"],[1,27023,"总代价"],[-1,27025,"因此，"],[-1,27087,"显示"],[1,27089,"小。"],[1,27144,"可以"],[-1,27147,"w的"],[-1,27201,"w"],[1,27202,"\n"],[-1,27279,"\n"],[1,27280,"和"],[-1,28124,"Di"],[1,28126,"每个"],[1,28244,"时间。"],[-1,28250,"大"],[-1,28294,"。，"],[1,28448,"每个"],[-1,28461,"的对"],[1,28463,"d"],[-1,28474,"吊"],[1,28503,"$"],[1,28519,"$"],[-1,28530,"##"],[-1,28542,"\n\n"],[1,28544,"##"]],[25913,25913],[28546,28546]]],[1528943019067,[null,[[1,25913,""],[-1,25913,"）。"],[1,26820,"个\n\n"],[-1,26820,"移动。"],[1,26937,"\n"],[1,26944,"w"],[-1,26996,"下一次"],[1,27003,"监测与"],[-1,27023,"总代价"],[1,27028,"因此，"],[1,27087,"显示"],[-1,27087,"小。"],[-1,27144,"可以"],[1,27149,"w的"],[1,27201,"w"],[-1,27201,"\n"],[1,27279,"\n"],[-1,27279,"和"],[1,28124,"Di"],[-1,28124,"每个"],[-1,28244,"时间。"],[1,28253,"大"],[1,28296,"。，"],[-1,28448,"每个"],[1,28463,"的对"],[-1,28463,"d"],[1,28475,"吊"],[-1,28503,"$"],[-1,28520,"$"],[1,28532,"##"],[1,28542,"\n\n"],[-1,28542,"##"]],[28546,28546],[25913,25913]]],[1528942960099,["Re@Re.local",[[1,28592,"给"]],[28592,28592],[28593,28593]]],[1528942967082,["Re@Re.local",[[-1,28588,"信息传送给"]],[28593,28593],[28588,28588]]],[1528942968269,["Re@Re.local",[[1,28588,"告诉"]],[28588,28588],[28590,28590]]],[1528942968724,["Re@Re.local",[[-1,28588,"告诉"]],[28590,28590],[28588,28588]]],[1528942977068,["Re@Re.local",[[1,28588,"高效地将信息传送"]],[28588,28588],[28596,28596]]],[1528942978071,["Re@Re.local",[[-1,28594,"传送"]],[28596,28596],[28594,28594]]],[1528942987483,["Re@Re.local",[[1,28594,"传输给正在收听的人。"]],[28594,28594],[28604,28604]]],[1528942989743,["Re@Re.local",[[-1,28603,"。"]],[28604,28604],[28603,28603]]],[1528942991351,["Re@Re.local",[[1,28603,"，唉有"]],[28603,28603],[28606,28606]]],[1528942991619,["Re@Re.local",[[-1,28604,"唉有"]],[28606,28606],[28604,28604]]],[1528942997165,["Re@Re.local",[[1,28604,"在游戏中也很重要，"]],[28604,28604],[28613,28613]]],[1528943002600,["Re@Re.local",[[1,28604,"这"]],[28604,28604],[28605,28605]]],[1528943009066,["Re@Re.local",[[1,28614,"这样"]],[28614,28614],[28616,28616]]],[1528943012086,["Re@Re.local",[[-1,28614,"这样"]],[28616,28616],[28614,28614]]],[1528943018707,["Re@Re.local",[[1,28614,"如此才能知道游戏中其它"]],[28614,28614],[28625,28625]]],[1528943079082,[null,[[-1,25913,""],[1,25913,"）。"],[-1,26818,"个\n\n"],[1,26821,"移动。"],[-1,26935,"\n"],[-1,26943,"w"],[1,26996,"下一次"],[-1,27000,"监测与"],[1,27023,"总代价"],[-1,27025,"因此，"],[-1,27087,"显示"],[1,27089,"小。"],[1,27144,"可以"],[-1,27147,"w的"],[-1,27201,"w"],[1,27202,"\n"],[-1,27279,"\n"],[1,27280,"和"],[-1,28124,"Di"],[1,28126,"每个"],[1,28244,"时间。"],[-1,28250,"大"],[-1,28294,"。，"],[1,28448,"每个"],[-1,28461,"的对"],[1,28463,"d"],[-1,28474,"吊"],[1,28503,"$"],[1,28519,"$"],[-1,28530,"##"],[-1,28542,"\n\n"],[1,28544,"##"]],[25913,25913],[28546,28546]]],[1528943079082,[null,[[1,25913,""],[-1,25913,"）。"],[1,26820,"个\n\n"],[-1,26820,"移动。"],[1,26937,"\n"],[1,26944,"w"],[-1,26996,"下一次"],[1,27003,"监测与"],[-1,27023,"总代价"],[1,27028,"因此，"],[1,27087,"显示"],[-1,27087,"小。"],[-1,27144,"可以"],[1,27149,"w的"],[1,27201,"w"],[-1,27201,"\n"],[1,27279,"\n"],[-1,27279,"和"],[1,28124,"Di"],[-1,28124,"每个"],[-1,28244,"时间。"],[1,28253,"大"],[1,28296,"。，"],[-1,28448,"每个"],[1,28463,"的对"],[-1,28463,"d"],[1,28475,"吊"],[-1,28503,"$"],[-1,28520,"$"],[1,28532,"##"],[1,28542,"\n\n"],[-1,28542,"##"]],[28546,28546],[25913,25913]]],[1528943019532,["Re@Re.local",[[-1,28624,"它"]],[28625,28625],[28624,28624]]],[1528943027184,["Re@Re.local",[[1,28624,"他人的当前位置。"]],[28624,28624],[28632,28632]]],[1528943139082,[null,[[-1,25913,""],[1,25913,"）。"],[-1,26818,"个\n\n"],[1,26821,"移动。"],[-1,26935,"\n"],[-1,26943,"w"],[1,26996,"下一次"],[-1,27000,"监测与"],[1,27023,"总代价"],[-1,27025,"因此，"],[-1,27087,"显示"],[1,27089,"小。"],[1,27144,"可以"],[-1,27147,"w的"],[-1,27201,"w"],[1,27202,"\n"],[-1,27279,"\n"],[1,27280,"和"],[-1,28124,"Di"],[1,28126,"每个"],[1,28244,"时间。"],[-1,28250,"大"],[-1,28294,"。，"],[1,28448,"每个"],[-1,28461,"的对"],[1,28463,"d"],[-1,28474,"吊"],[1,28503,"$"],[1,28519,"$"],[-1,28530,"##"],[-1,28542,"\n\n"],[1,28544,"##"]],[25913,25913],[28546,28546]]],[1528943139083,[null,[[1,25913,""],[-1,25913,"）。"],[1,26820,"个\n\n"],[-1,26820,"移动。"],[1,26937,"\n"],[1,26944,"w"],[-1,26996,"下一次"],[1,27003,"监测与"],[-1,27023,"总代价"],[1,27028,"因此，"],[1,27087,"显示"],[-1,27087,"小。"],[-1,27144,"可以"],[1,27149,"w的"],[1,27201,"w"],[-1,27201,"\n"],[1,27279,"\n"],[-1,27279,"和"],[1,28124,"Di"],[-1,28124,"每个"],[-1,28244,"时间。"],[1,28253,"大"],[1,28296,"。，"],[-1,28448,"每个"],[1,28463,"的对"],[-1,28463,"d"],[1,28475,"吊"],[-1,28503,"$"],[-1,28520,"$"],[1,28532,"##"],[1,28542,"\n\n"],[-1,28542,"##"]],[28546,28546],[25913,25913]]],[1528943104999,["Re@Re.local",[[-1,28599,"收听的人"]],[28603,28603],[28599,28599]]],[1528943106686,["Re@Re.local",[[1,28599,"坚挺"]],[28599,28599],[28601,28601]]],[1528943107121,["Re@Re.local",[[-1,28599,"坚挺"]],[28601,28601],[28599,28599]]],[1528943110347,["Re@Re.local",[[1,28599,"监听的人"]],[28599,28599],[28603,28603]]],[1528943111496,["Re@Re.local",[[-1,28603,"，"]],[28604,28604],[28603,28603]]],[1528943112053,["Re@Re.local",[[1,28603,"。"]],[28603,28603],[28604,28604]]],[1528943116753,["Re@Re.local",[[-1,28604,"这在游戏中也很重要"]],[28605,28613],[28604,28604]]],[1528943122639,["Re@Re.local",[[1,28604,"对于游戏来说这是很重要的"]],[28604,28604],[28616,28616]]],[1528943133304,["Re@Re.local",[[1,28635,"而对于互联网广播来说，同"]],[28635,28635],[28647,28647]]],[1528943133477,["Re@Re.local",[[-1,28646,"同"]],[28647,28647],[28646,28646]]],[1528943137161,["Re@Re.local",[[1,28646,"这也"]],[28646,28646],[28648,28648]]],[1528943138360,["Re@Re.local",[[-1,28646,"这也"]],[28648,28648],[28646,28646]]],[1528943199070,[null,[[-1,25913,""],[1,25913,"）。"],[-1,26818,"个\n\n"],[1,26821,"移动。"],[-1,26935,"\n"],[-1,26943,"w"],[1,26996,"下一次"],[-1,27000,"监测与"],[1,27023,"总代价"],[-1,27025,"因此，"],[-1,27087,"显示"],[1,27089,"小。"],[1,27144,"可以"],[-1,27147,"w的"],[-1,27201,"w"],[1,27202,"\n"],[-1,27279,"\n"],[1,27280,"和"],[-1,28124,"Di"],[1,28126,"每个"],[1,28244,"时间。"],[-1,28250,"大"],[-1,28294,"。，"],[1,28448,"每个"],[-1,28461,"的对"],[1,28463,"d"],[-1,28474,"吊"],[1,28503,"$"],[1,28519,"$"],[-1,28530,"##"],[-1,28542,"\n\n"],[1,28544,"##"]],[25913,25913],[28546,28546]]],[1528943199070,[null,[[1,25913,""],[-1,25913,"）。"],[1,26820,"个\n\n"],[-1,26820,"移动。"],[1,26937,"\n"],[1,26944,"w"],[-1,26996,"下一次"],[1,27003,"监测与"],[-1,27023,"总代价"],[1,27028,"因此，"],[1,27087,"显示"],[-1,27087,"小。"],[-1,27144,"可以"],[1,27149,"w的"],[1,27201,"w"],[-1,27201,"\n"],[1,27279,"\n"],[-1,27279,"和"],[1,28124,"Di"],[-1,28124,"每个"],[-1,28244,"时间。"],[1,28253,"大"],[1,28296,"。，"],[-1,28448,"每个"],[1,28463,"的对"],[-1,28463,"d"],[1,28475,"吊"],[-1,28503,"$"],[-1,28520,"$"],[1,28532,"##"],[1,28542,"\n\n"],[-1,28542,"##"]],[28546,28546],[25913,25913]]],[1528943140158,["Re@Re.local",[[1,28646,"这"]],[28646,28646],[28647,28647]]],[1528943141775,["Re@Re.local",[[-1,28645,"，这"]],[28647,28647],[28645,28645]]],[1528943151750,["Re@Re.local",[[1,28645,"这也很重要，如此用户才"]],[28645,28645],[28656,28656]]],[1528943152206,["Re@Re.local",[[-1,28655,"才"]],[28656,28656],[28655,28655]]],[1528943153735,["Re@Re.local",[[1,28655,"才能"]],[28655,28655],[28657,28657]]],[1528943161285,["Re@Re.local",[[-1,28655,"才能"]],[28657,28657],[28655,28655]]],[1528943167463,["Re@Re.local",[[1,28655,"端才能获取重构歌曲"]],[28655,28655],[28664,28664]]],[1528943168892,["Re@Re.local",[[-1,28660,"重构歌曲"]],[28664,28664],[28660,28660]]],[1528943171489,["Re@Re.local",[[1,28660,"还原信"]],[28660,28660],[28663,28663]]],[1528943171666,["Re@Re.local",[[-1,28662,"信"]],[28663,28663],[28662,28662]]],[1528943177187,["Re@Re.local",[[1,28662,"歌曲所必须的所有信息。"]],[28662,28662],[28673,28673]]],[1528943178493,["Re@Re.local",[[-1,28670,"信息。"]],[28673,28673],[28670,28670]]],[1528943179979,["Re@Re.local",[[1,28670,"数据。"]],[28670,28670],[28673,28673]]],[1528943182957,["Re@Re.local",[[-1,28672,"。"]],[28673,28673],[28672,28672]]],[1528943185615,["Re@Re.local",[[1,28672,"，如图9所示。"]],[28672,28672],[28679,28679]]],[1528943185915,["Re@Re.local",[[1,28679,"\n\n"]],[28679,28679],[28680,28680]]],[1528943186110,["Re@Re.local",[[1,28681,"\n"]],[28680,28680],[28681,28681]]],[1528943190671,["Re@Re.local",[[1,28681,"![../_images/bcast1.png](http://interactivepython.org/courselib/static/pythonds/_images/bcast1.png)"]],[28681,28681],[28780,28780]]],[1528943190889,["Re@Re.local",[[1,28781,"\n"]],[28780,28780],[28781,28781]]],[1528943191110,["Re@Re.local",[[1,28782,"\n"]],[28781,28781],[28782,28782]]],[1528943260517,[null,[[-1,25913,""],[1,25913,"）。"],[-1,26818,"个\n\n"],[1,26821,"移动。"],[-1,26935,"\n"],[-1,26943,"w"],[1,26996,"下一次"],[-1,27000,"监测与"],[1,27023,"总代价"],[-1,27025,"因此，"],[-1,27087,"显示"],[1,27089,"小。"],[1,27144,"可以"],[-1,27147,"w的"],[-1,27201,"w"],[1,27202,"\n"],[-1,27279,"\n"],[1,27280,"和"],[-1,28124,"Di"],[1,28126,"每个"],[1,28244,"时间。"],[-1,28250,"大"],[-1,28294,"。，"],[1,28448,"每个"],[-1,28461,"的对"],[1,28463,"d"],[-1,28474,"吊"],[1,28503,"$"],[1,28519,"$"],[-1,28530,"##"],[-1,28542,"\n\n"],[1,28544,"##"]],[25913,25913],[28546,28546]]],[1528943260517,[null,[[1,25913,""],[-1,25913,"）。"],[1,26820,"个\n\n"],[-1,26820,"移动。"],[1,26937,"\n"],[1,26944,"w"],[-1,26996,"下一次"],[1,27003,"监测与"],[-1,27023,"总代价"],[1,27028,"因此，"],[1,27087,"显示"],[-1,27087,"小。"],[-1,27144,"可以"],[1,27149,"w的"],[1,27201,"w"],[-1,27201,"\n"],[1,27279,"\n"],[-1,27279,"和"],[1,28124,"Di"],[-1,28124,"每个"],[-1,28244,"时间。"],[1,28253,"大"],[1,28296,"。，"],[-1,28448,"每个"],[1,28463,"的对"],[-1,28463,"d"],[1,28475,"吊"],[-1,28503,"$"],[-1,28520,"$"],[1,28532,"##"],[1,28542,"\n\n"],[-1,28542,"##"]],[28546,28546],[25913,25913]]],[1528943215636,["Re@Re.local",[[-1,28782,"\n"],[1,28783,"对该问题有暴力法"]],[28782,28782],[28790,28790]]],[1528943221463,["Re@Re.local",[[-1,28782,"对该问题有暴力法"]],[28790,28790],[28782,28782]]],[1528943221679,["Re@Re.local",[[-1,28781,"\n"],[1,28782,"g"]],[28782,28782],[28781,28782]]],[1528943221773,["Re@Re.local",[[1,28782,"a"]],[28781,28782],[28781,28783]]],[1528943222028,["Re@Re.local",[[-1,28782,"a"]],[28781,28783],[28781,28782]]],[1528943222196,["Re@Re.local",[[-1,28781,"g"]],[28781,28782],[0,0]]],[1528943222441,["Re@Re.local",[[1,28781,"\n\n"]],[28781,28781],[28782,28782]]],[1528943232621,["Re@Re.local",[[-1,28782,"\n"],[1,28783,"该问题当然有暴力法可以来解决，我们"]],[28782,28782],[28799,28799]]],[1528943233080,["Re@Re.local",[[-1,28797,"我们"]],[28799,28799],[28797,28797]]],[1528943241098,["Re@Re.local",[[1,28797,"先来研究一下它们来理解下"]],[28797,28797],[28809,28809]]],[1528943241261,["Re@Re.local",[[-1,28808,"下"]],[28809,28809],[28808,28808]]],[1528943241921,["Re@Re.local",[[1,28808,"该"]],[28808,28808],[28809,28809]]],[1528943243165,["Re@Re.local",[[-1,28805,"来理解该"]],[28809,28809],[28805,28805]]],[1528943251713,["Re@Re.local",[[1,28805,"以便于更好地理解广播问题。"]],[28805,28805],[28818,28818]]],[1528943380479,[null,[[-1,25913,""],[1,25913,"）。"],[-1,26818,"个\n\n"],[1,26821,"移动。"],[-1,26935,"\n"],[-1,26943,"w"],[1,26996,"下一次"],[-1,27000,"监测与"],[1,27023,"总代价"],[-1,27025,"因此，"],[-1,27087,"显示"],[1,27089,"小。"],[1,27144,"可以"],[-1,27147,"w的"],[-1,27201,"w"],[1,27202,"\n"],[-1,27279,"\n"],[1,27280,"和"],[-1,28124,"Di"],[1,28126,"每个"],[1,28244,"时间。"],[-1,28250,"大"],[-1,28294,"。，"],[1,28448,"每个"],[-1,28461,"的对"],[1,28463,"d"],[-1,28474,"吊"],[1,28503,"$"],[1,28519,"$"],[-1,28530,"##"],[-1,28542,"\n\n"],[1,28544,"##"]],[25913,25913],[28546,28546]]],[1528943380479,[null,[[1,25913,""],[-1,25913,"）。"],[1,26820,"个\n\n"],[-1,26820,"移动。"],[1,26937,"\n"],[1,26944,"w"],[-1,26996,"下一次"],[1,27003,"监测与"],[-1,27023,"总代价"],[1,27028,"因此，"],[1,27087,"显示"],[-1,27087,"小。"],[-1,27144,"可以"],[1,27149,"w的"],[1,27201,"w"],[-1,27201,"\n"],[1,27279,"\n"],[-1,27279,"和"],[1,28124,"Di"],[-1,28124,"每个"],[-1,28244,"时间。"],[1,28253,"大"],[1,28296,"。，"],[-1,28448,"每个"],[1,28463,"的对"],[-1,28463,"d"],[1,28475,"吊"],[-1,28503,"$"],[-1,28520,"$"],[1,28532,"##"],[1,28542,"\n\n"],[-1,28542,"##"]],[28546,28546],[25913,25913]]],[1528943338112,["Re@Re.local",[[-1,28817,"。"]],[28818,28818],[28817,28817]]],[1528943341590,["Re@Re.local",[[1,28817,"，这样一来"]],[28817,28817],[28822,28822]]],[1528943342397,["Re@Re.local",[[-1,28818,"这样一来"]],[28822,28822],[28818,28818]]],[1528943376770,["Re@Re.local",[[1,28818,"同时也会使得读者对本书给出的解法感到耳目一新"]],[28818,28818],[28840,28840]]],[1528943378412,["Re@Re.local",[[-1,28834,"感到耳目一新"]],[28840,28840],[28834,28834]]],[1528943440483,[null,[[-1,25913,""],[1,25913,"）。"],[-1,26818,"个\n\n"],[1,26821,"移动。"],[-1,26935,"\n"],[-1,26943,"w"],[1,26996,"下一次"],[-1,27000,"监测与"],[1,27023,"总代价"],[-1,27025,"因此，"],[-1,27087,"显示"],[1,27089,"小。"],[1,27144,"可以"],[-1,27147,"w的"],[-1,27201,"w"],[1,27202,"\n"],[-1,27279,"\n"],[1,27280,"和"],[-1,28124,"Di"],[1,28126,"每个"],[1,28244,"时间。"],[-1,28250,"大"],[-1,28294,"。，"],[1,28448,"每个"],[-1,28461,"的对"],[1,28463,"d"],[-1,28474,"吊"],[1,28503,"$"],[1,28519,"$"],[-1,28530,"##"],[-1,28542,"\n\n"],[1,28544,"##"]],[25913,25913],[28546,28546]]],[1528943440483,[null,[[1,25913,""],[-1,25913,"）。"],[1,26820,"个\n\n"],[-1,26820,"移动。"],[1,26937,"\n"],[1,26944,"w"],[-1,26996,"下一次"],[1,27003,"监测与"],[-1,27023,"总代价"],[1,27028,"因此，"],[1,27087,"显示"],[-1,27087,"小。"],[-1,27144,"可以"],[1,27149,"w的"],[1,27201,"w"],[-1,27201,"\n"],[1,27279,"\n"],[-1,27279,"和"],[1,28124,"Di"],[-1,28124,"每个"],[-1,28244,"时间。"],[1,28253,"大"],[1,28296,"。，"],[-1,28448,"每个"],[1,28463,"的对"],[-1,28463,"d"],[1,28475,"吊"],[-1,28503,"$"],[-1,28520,"$"],[1,28532,"##"],[1,28542,"\n\n"],[-1,28542,"##"]],[28546,28546],[25913,25913]]],[1528943434582,["Re@Re.local",[[1,28834,"感到赞赏。首先，广播主机有一些信息要发送给所有收听者。最节点的方法"]],[28834,28834],[28867,28867]]],[1528943439297,["Re@Re.local",[[-1,28862,"节点的方法"]],[28867,28867],[28862,28862]]],[1528943440130,["Re@Re.local",[[1,28862,"简单"]],[28862,28862],[28864,28864]]],[1528943500527,[null,[[-1,25913,""],[1,25913,"）。"],[-1,26818,"个\n\n"],[1,26821,"移动。"],[-1,26935,"\n"],[-1,26943,"w"],[1,26996,"下一次"],[-1,27000,"监测与"],[1,27023,"总代价"],[-1,27025,"因此，"],[-1,27087,"显示"],[1,27089,"小。"],[1,27144,"可以"],[-1,27147,"w的"],[-1,27201,"w"],[1,27202,"\n"],[-1,27279,"\n"],[1,27280,"和"],[-1,28124,"Di"],[1,28126,"每个"],[1,28244,"时间。"],[-1,28250,"大"],[-1,28294,"。，"],[1,28448,"每个"],[-1,28461,"的对"],[1,28463,"d"],[-1,28474,"吊"],[1,28503,"$"],[1,28519,"$"],[-1,28530,"##"],[-1,28542,"\n\n"],[1,28544,"##"]],[25913,25913],[28546,28546]]],[1528943500527,[null,[[1,25913,""],[-1,25913,"）。"],[1,26820,"个\n\n"],[-1,26820,"移动。"],[1,26937,"\n"],[1,26944,"w"],[-1,26996,"下一次"],[1,27003,"监测与"],[-1,27023,"总代价"],[1,27028,"因此，"],[1,27087,"显示"],[-1,27087,"小。"],[-1,27144,"可以"],[1,27149,"w的"],[1,27201,"w"],[-1,27201,"\n"],[1,27279,"\n"],[-1,27279,"和"],[1,28124,"Di"],[-1,28124,"每个"],[-1,28244,"时间。"],[1,28253,"大"],[1,28296,"。，"],[-1,28448,"每个"],[1,28463,"的对"],[-1,28463,"d"],[1,28475,"吊"],[-1,28503,"$"],[-1,28520,"$"],[1,28532,"##"],[1,28542,"\n\n"],[-1,28542,"##"]],[28546,28546],[25913,25913]]],[1528943442626,["Re@Re.local",[[1,28865,"方法就是"]],[28865,28865],[28869,28869]]],[1528943443267,["Re@Re.local",[[-1,28867,"就是"]],[28869,28869],[28867,28867]]],[1528943444304,["Re@Re.local",[[1,28867,"就"]],[28867,28867],[28868,28868]]],[1528943444412,["Re@Re.local",[[-1,28867,"就"]],[28868,28868],[28867,28867]]],[1528943454602,["Re@Re.local",[[1,28867,"是，广播之际"]],[28867,28867],[28873,28873]]],[1528943454722,["Re@Re.local",[[-1,28872,"际"]],[28873,28873],[28872,28872]]],[1528943454979,["Re@Re.local",[[1,28872,"="]],[28872,28872],[28873,28873]]],[1528943455512,["Re@Re.local",[[-1,28871,"之="]],[28873,28873],[28871,28871]]],[1528943469635,["Re@Re.local",[[1,28871,"主机保存所有收听者的列表"]],[28871,28871],[28883,28883]]],[1528943471889,["Re@Re.local",[[1,28875,"一个"]],[28875,28875],[28877,28877]]],[1528943474772,["Re@Re.local",[[1,28885,"，染"]],[28885,28885],[28887,28887]]],[1528943475079,["Re@Re.local",[[-1,28885,"，染"]],[28887,28887],[28885,28885]]],[1528943476148,["Re@Re.local",[[1,28885,"染"]],[28885,28885],[28886,28886]]],[1528943476230,["Re@Re.local",[[-1,28885,"染"]],[28886,28886],[28885,28885]]],[1528943487204,["Re@Re.local",[[1,28885,"，然后分别对其发送信息。在图"]],[28885,28885],[28899,28899]]],[1528943487837,["Re@Re.local",[[-1,28897,"在图"]],[28899,28899],[28897,28897]]],[1528943497670,["Re@Re.local",[[1,28897,"如图9所示，一个小网络中存在一个"]],[28897,28897],[28913,28913]]],[1528943561023,[null,[[-1,25913,""],[1,25913,"）。"],[-1,26818,"个\n\n"],[1,26821,"移动。"],[-1,26935,"\n"],[-1,26943,"w"],[1,26996,"下一次"],[-1,27000,"监测与"],[1,27023,"总代价"],[-1,27025,"因此，"],[-1,27087,"显示"],[1,27089,"小。"],[1,27144,"可以"],[-1,27147,"w的"],[-1,27201,"w"],[1,27202,"\n"],[-1,27279,"\n"],[1,27280,"和"],[-1,28124,"Di"],[1,28126,"每个"],[1,28244,"时间。"],[-1,28250,"大"],[-1,28294,"。，"],[1,28448,"每个"],[-1,28461,"的对"],[1,28463,"d"],[-1,28474,"吊"],[1,28503,"$"],[1,28519,"$"],[-1,28530,"##"],[-1,28542,"\n\n"],[1,28544,"##"],[1,28864,"的"],[-1,28866,"就"]],[25913,25913],[28866,28866]]],[1528943561023,[null,[[1,25913,""],[-1,25913,"）。"],[1,26820,"个\n\n"],[-1,26820,"移动。"],[1,26937,"\n"],[1,26944,"w"],[-1,26996,"下一次"],[1,27003,"监测与"],[-1,27023,"总代价"],[1,27028,"因此，"],[1,27087,"显示"],[-1,27087,"小。"],[-1,27144,"可以"],[1,27149,"w的"],[1,27201,"w"],[-1,27201,"\n"],[1,27279,"\n"],[-1,27279,"和"],[1,28124,"Di"],[-1,28124,"每个"],[-1,28244,"时间。"],[1,28253,"大"],[1,28296,"。，"],[-1,28448,"每个"],[1,28463,"的对"],[-1,28463,"d"],[1,28475,"吊"],[-1,28503,"$"],[-1,28520,"$"],[1,28532,"##"],[1,28542,"\n\n"],[-1,28542,"##"],[-1,28864,"的"],[1,28867,"就"]],[28866,28866],[25913,25913]]],[1528943524741,["Re@Re.local",[[1,28917,"和收听者。使用第一种方法，必须要发送4份相通"]],[28917,28917],[28939,28939]]],[1528943525122,["Re@Re.local",[[-1,28937,"相通"]],[28939,28939],[28937,28937]]],[1528943527783,["Re@Re.local",[[1,28937,"信息"]],[28937,28937],[28939,28939]]],[1528943533541,["Re@Re.local",[[-1,28929,"，必须要发送4份信息"]],[28939,28939],[28929,28929]]],[1528943534566,["Re@Re.local",[[1,28929,"的花，"]],[28929,28929],[28932,28932]]],[1528943535442,["Re@Re.local",[[-1,28930,"花，"]],[28932,28932],[28930,28930]]],[1528943545903,["Re@Re.local",[[1,28930,"话，每条信息都要发送4遍。假设"]],[28930,28930],[28945,28945]]],[1528943547814,["Re@Re.local",[[-1,28943,"假设"]],[28945,28945],[28943,28943]]],[1528943553587,["Re@Re.local",[[1,28943,"嘉定"]],[28943,28943],[28945,28945]]],[1528943553972,["Re@Re.local",[[-1,28943,"嘉定"]],[28945,28945],[28943,28943]]],[1528943557556,["Re@Re.local",[[1,28943,"假定使用的是"]],[28943,28943],[28949,28949]]],[1528943621022,[null,[[-1,25913,""],[1,25913,"）。"],[-1,26818,"个\n\n"],[1,26821,"移动。"],[-1,26935,"\n"],[-1,26943,"w"],[1,26996,"下一次"],[-1,27000,"监测与"],[1,27023,"总代价"],[-1,27025,"因此，"],[-1,27087,"显示"],[1,27089,"小。"],[1,27144,"可以"],[-1,27147,"w的"],[-1,27201,"w"],[1,27202,"\n"],[-1,27279,"\n"],[1,27280,"和"],[-1,28124,"Di"],[1,28126,"每个"],[1,28244,"时间。"],[-1,28250,"大"],[-1,28294,"。，"],[1,28448,"每个"],[-1,28461,"的对"],[1,28463,"d"],[-1,28474,"吊"],[1,28503,"$"],[1,28519,"$"],[-1,28530,"##"],[-1,28542,"\n\n"],[1,28544,"##"],[1,28864,"的"],[-1,28866,"就"],[1,28913,"广播主机"],[-1,28925,"，必须要"]],[25913,25913],[28925,28925]]],[1528943621022,[null,[[1,25913,""],[-1,25913,"）。"],[1,26820,"个\n\n"],[-1,26820,"移动。"],[1,26937,"\n"],[1,26944,"w"],[-1,26996,"下一次"],[1,27003,"监测与"],[-1,27023,"总代价"],[1,27028,"因此，"],[1,27087,"显示"],[-1,27087,"小。"],[-1,27144,"可以"],[1,27149,"w的"],[1,27201,"w"],[-1,27201,"\n"],[1,27279,"\n"],[-1,27279,"和"],[1,28124,"Di"],[-1,28124,"每个"],[-1,28244,"时间。"],[1,28253,"大"],[1,28296,"。，"],[-1,28448,"每个"],[1,28463,"的对"],[-1,28463,"d"],[1,28475,"吊"],[-1,28503,"$"],[-1,28520,"$"],[1,28532,"##"],[1,28542,"\n\n"],[-1,28542,"##"],[-1,28864,"的"],[1,28867,"就"],[-1,28913,"广播主机"],[1,28929,"，必须要"]],[28925,28925],[25913,25913]]],[1528943565100,["Re@Re.local",[[1,28949,"最短路径"]],[28949,28949],[28953,28953]]],[1528943568193,["Re@Re.local",[[1,28949,"损耗"]],[28949,28949],[28951,28951]]],[1528943569540,["Re@Re.local",[[-1,28951,"最短"]],[28953,28953],[28951,28951]]],[1528943570733,["Re@Re.local",[[1,28951,"最低"]],[28951,28951],[28953,28953]]],[1528943581747,["Re@Re.local",[[1,28955,"，来计算"]],[28955,28955],[28959,28959]]],[1528943582296,["Re@Re.local",[[-1,28956,"来计算"]],[28959,28959],[28956,28956]]],[1528943594846,["Re@Re.local",[[1,28956,"来研究一些每个路由器要处理相通的信息"]],[28956,28956],[28974,28974]]],[1528943595672,["Re@Re.local",[[-1,28969,"相通的信息"]],[28974,28974],[28969,28969]]],[1528943599479,["Re@Re.local",[[1,28969,"相同的信息多少次。"]],[28969,28969],[28978,28978]]],[1528943599754,["Re@Re.local",[[1,28978,"\n\n"]],[28978,28978],[28979,28979]]],[1528943599959,["Re@Re.local",[[1,28980,"\n"]],[28979,28979],[28980,28980]]],[1528943619123,["Re@Re.local",[[-1,28980,"\n"],[1,28981,"来自广播主机的所有信息都要经过路由器A，"]],[28980,28980],[29000,29000]]],[1528943681071,[null,[[-1,25913,""],[1,25913,"）。"],[-1,26818,"个\n\n"],[1,26821,"移动。"],[-1,26935,"\n"],[-1,26943,"w"],[1,26996,"下一次"],[-1,27000,"监测与"],[1,27023,"总代价"],[-1,27025,"因此，"],[-1,27087,"显示"],[1,27089,"小。"],[1,27144,"可以"],[-1,27147,"w的"],[-1,27201,"w"],[1,27202,"\n"],[-1,27279,"\n"],[1,27280,"和"],[-1,28124,"Di"],[1,28126,"每个"],[1,28244,"时间。"],[-1,28250,"大"],[-1,28294,"。，"],[1,28448,"每个"],[-1,28461,"的对"],[1,28463,"d"],[-1,28474,"吊"],[1,28503,"$"],[1,28519,"$"],[-1,28530,"##"],[-1,28542,"\n\n"],[1,28544,"##"],[1,28864,"的"],[-1,28866,"就"],[1,28913,"广播主机"],[-1,28925,"，必须要"]],[25913,25913],[28925,28925]]],[1528943681072,[null,[[1,25913,""],[-1,25913,"）。"],[1,26820,"个\n\n"],[-1,26820,"移动。"],[1,26937,"\n"],[1,26944,"w"],[-1,26996,"下一次"],[1,27003,"监测与"],[-1,27023,"总代价"],[1,27028,"因此，"],[1,27087,"显示"],[-1,27087,"小。"],[-1,27144,"可以"],[1,27149,"w的"],[1,27201,"w"],[-1,27201,"\n"],[1,27279,"\n"],[-1,27279,"和"],[1,28124,"Di"],[-1,28124,"每个"],[-1,28244,"时间。"],[1,28253,"大"],[1,28296,"。，"],[-1,28448,"每个"],[1,28463,"的对"],[-1,28463,"d"],[1,28475,"吊"],[-1,28503,"$"],[-1,28520,"$"],[1,28532,"##"],[1,28542,"\n\n"],[-1,28542,"##"],[-1,28864,"的"],[1,28867,"就"],[-1,28913,"广播主机"],[1,28929,"，必须要"]],[28925,28925],[25913,25913]]],[1528943628413,["Re@Re.local",[[1,29000,"因此A将"]],[29000,29000],[29004,29004]]],[1528943629272,["Re@Re.local",[[-1,29003,"将"]],[29004,29004],[29003,29003]]],[1528943632208,["Re@Re.local",[[1,29003,"对于美分"]],[29003,29003],[29007,29007]]],[1528943632461,["Re@Re.local",[[-1,29005,"美分"]],[29007,29007],[29005,29005]]],[1528943635162,["Re@Re.local",[[1,29005,"每条信息都要"]],[29005,29005],[29011,29011]]],[1528943636924,["Re@Re.local",[[1,29011,"chiu l"]],[29007,29007],[29007,29007]]],[1528943637967,["Re@Re.local",[[-1,29005,"每条"]],[29007,29007],[29005,29005]]],[1528943639056,["Re@Re.local",[[1,29005,"每条"]],[29005,29005],[29007,29007]]],[1528943640826,["Re@Re.local",[[-1,29011,"chiu l"]],[29017,29017],[29011,29011]]],[1528943662190,["Re@Re.local",[[1,29011,"处理4次。路由器C只会处理"]],[29011,29011],[29024,29024]]],[1528943662552,["Re@Re.local",[[-1,29022,"处理"]],[29024,29024],[29022,29022]]],[1528943667994,["Re@Re.local",[[1,29022,"为它对应的后听着"]],[29022,29022],[29030,29030]]],[1528943668742,["Re@Re.local",[[-1,29027,"后听着"]],[29030,29030],[29027,29027]]],[1528943674048,["Re@Re.local",[[1,29027,"收听者处理1次"]],[29027,29027],[29034,29034]]],[1528943680172,["Re@Re.local",[[-1,29021,"会"]],[29022,29022],[29021,29021]]],[1528943741019,[null,[[-1,25913,""],[1,25913,"）。"],[-1,26818,"个\n\n"],[1,26821,"移动。"],[-1,26935,"\n"],[-1,26943,"w"],[1,26996,"下一次"],[-1,27000,"监测与"],[1,27023,"总代价"],[-1,27025,"因此，"],[-1,27087,"显示"],[1,27089,"小。"],[1,27144,"可以"],[-1,27147,"w的"],[-1,27201,"w"],[1,27202,"\n"],[-1,27279,"\n"],[1,27280,"和"],[-1,28124,"Di"],[1,28126,"每个"],[1,28244,"时间。"],[-1,28250,"大"],[-1,28294,"。，"],[1,28448,"每个"],[-1,28461,"的对"],[1,28463,"d"],[-1,28474,"吊"],[1,28503,"$"],[1,28519,"$"],[-1,28530,"##"],[-1,28542,"\n\n"],[1,28544,"##"],[1,28864,"的"],[-1,28866,"就"],[1,28913,"广播主机"],[-1,28925,"，必须要"]],[25913,25913],[28925,28925]]],[1528943741019,[null,[[1,25913,""],[-1,25913,"）。"],[1,26820,"个\n\n"],[-1,26820,"移动。"],[1,26937,"\n"],[1,26944,"w"],[-1,26996,"下一次"],[1,27003,"监测与"],[-1,27023,"总代价"],[1,27028,"因此，"],[1,27087,"显示"],[-1,27087,"小。"],[-1,27144,"可以"],[1,27149,"w的"],[1,27201,"w"],[-1,27201,"\n"],[1,27279,"\n"],[-1,27279,"和"],[1,28124,"Di"],[-1,28124,"每个"],[-1,28244,"时间。"],[1,28253,"大"],[1,28296,"。，"],[-1,28448,"每个"],[1,28463,"的对"],[-1,28463,"d"],[1,28475,"吊"],[-1,28503,"$"],[-1,28520,"$"],[1,28532,"##"],[1,28542,"\n\n"],[-1,28542,"##"],[-1,28864,"的"],[1,28867,"就"],[-1,28913,"广播主机"],[1,28929,"，必须要"]],[28925,28925],[25913,25913]]],[1528943690703,["Re@Re.local",[[1,29034,"。然而，B和D会"]],[29034,29034],[29042,29042]]],[1528943690907,["Re@Re.local",[[-1,29041,"会"]],[29042,29042],[29041,29041]]],[1528943700291,["Re@Re.local",[[1,29041,"将要处理"]],[29041,29041],[29045,29045]]],[1528943701565,["Re@Re.local",[[-1,29041,"将要处理"]],[29045,29045],[29041,29041]]],[1528943715049,["Re@Re.local",[[1,29041,"对于每条信息都要处理3次，因为B和D是手"]],[29041,29041],[29061,29061]]],[1528943715181,["Re@Re.local",[[-1,29060,"手"]],[29061,29061],[29060,29060]]],[1528943718764,["Re@Re.local",[[1,29060,"在收听"]],[29060,29060],[29063,29063]]],[1528943719043,["Re@Re.local",[[-1,29061,"收听"]],[29063,29063],[29061,29061]]],[1528943723676,["Re@Re.local",[[1,29061,"通向1"]],[29061,29061],[29064,29064]]],[1528943724279,["Re@Re.local",[[-1,29063,"1"]],[29064,29064],[29063,29063]]],[1528943733507,["Re@Re.local",[[1,29063,"收听者1，2，3的损耗最低路径上。"]],[29063,29063],[29080,29080]]],[1528943923955,[null,[[-1,25913,""],[1,25913,"）。"],[-1,26818,"个\n\n"],[1,26821,"移动。"],[-1,26935,"\n"],[-1,26943,"w"],[1,26996,"下一次"],[-1,27000,"监测与"],[1,27023,"总代价"],[-1,27025,"因此，"],[-1,27087,"显示"],[1,27089,"小。"],[1,27144,"可以"],[-1,27147,"w的"],[-1,27201,"w"],[1,27202,"\n"],[-1,27279,"\n"],[1,27280,"和"],[-1,28124,"Di"],[1,28126,"每个"],[1,28244,"时间。"],[-1,28250,"大"],[-1,28295,"，。"],[1,28448,"每个"],[-1,28461,"的对"],[1,28463,"d"],[-1,28474,"吊"],[1,28503,"$"],[1,28519,"$"],[-1,28530,"##"],[-1,28542,"\n\n"],[1,28544,"##"],[1,28864,"的"],[-1,28866,"就"],[1,28913,"广播主机"],[-1,28925,"，必须要"],[1,29021,"用"],[-1,29040,"会"]],[25913,25913],[29040,29040]]],[1528943923955,[null,[[1,25913,""],[-1,25913,"）。"],[1,26820,"个\n\n"],[-1,26820,"移动。"],[1,26937,"\n"],[1,26944,"w"],[-1,26996,"下一次"],[1,27003,"监测与"],[-1,27023,"总代价"],[1,27028,"因此，"],[1,27087,"显示"],[-1,27087,"小。"],[-1,27144,"可以"],[1,27149,"w的"],[1,27201,"w"],[-1,27201,"\n"],[1,27279,"\n"],[-1,27279,"和"],[1,28124,"Di"],[-1,28124,"每个"],[-1,28244,"时间。"],[1,28253,"大"],[1,28297,"，。"],[-1,28448,"每个"],[1,28463,"的对"],[-1,28463,"d"],[1,28475,"吊"],[-1,28503,"$"],[-1,28520,"$"],[1,28532,"##"],[1,28542,"\n\n"],[-1,28542,"##"],[-1,28864,"的"],[1,28867,"就"],[-1,28913,"广播主机"],[1,28929,"，必须要"],[-1,29021,"用"],[1,29041,"会"]],[29040,29040],[25913,25913]]],[1528943870373,["Re@Re.local",[[1,29080,"考虑到刚"]],[29080,29080],[29084,29084]]],[1528943870495,["Re@Re.local",[[-1,29083,"刚"]],[29084,29084],[29083,29083]]],[1528943871722,["Re@Re.local",[[1,29083,"广播"]],[29083,29083],[29085,29085]]],[1528943872332,["Re@Re.local",[[-1,29083,"广播"]],[29085,29085],[29083,29083]]],[1528943881616,["Re@Re.local",[[1,29083,"广播主机美妙"]],[29083,29083],[29089,29089]]],[1528943881882,["Re@Re.local",[[-1,29087,"美妙"]],[29089,29089],[29087,29087]]],[1528943910268,["Re@Re.local",[[1,29087,"每秒必须发送数百条消息，那么如此一来便会导致巨大的流量开销。"]],[29087,29087],[29117,29117]]],[1528943910554,["Re@Re.local",[[1,29117,"\n\n"]],[29117,29117],[29118,29118]]],[1528943910763,["Re@Re.local",[[1,29119,"\n"]],[29118,29118],[29119,29119]]],[1528943922051,["Re@Re.local",[[-1,29119,"\n"],[1,29120,"一种"]],[29119,29119],[29121,29121]]],[1528943983919,[null,[[-1,25913,""],[1,25913,"）。"],[-1,26818,"个\n\n"],[1,26821,"移动。"],[-1,26935,"\n"],[-1,26943,"w"],[1,26996,"下一次"],[-1,27000,"监测与"],[1,27023,"总代价"],[-1,27025,"因此，"],[-1,27087,"显示"],[1,27089,"小。"],[1,27144,"可以"],[-1,27147,"w的"],[-1,27201,"w"],[1,27202,"\n"],[-1,27279,"\n"],[1,27280,"和"],[-1,28124,"Di"],[1,28126,"每个"],[1,28244,"时间。"],[-1,28250,"大"],[-1,28295,"，。"],[1,28448,"每个"],[-1,28461,"的对"],[1,28463,"d"],[-1,28474,"吊"],[1,28503,"$"],[1,28519,"$"],[-1,28530,"##"],[-1,28542,"\n\n"],[1,28544,"##"],[1,28864,"的"],[-1,28866,"就"],[1,28913,"广播主机"],[-1,28925,"，必须要"],[1,29021,"用"],[-1,29040,"会"]],[25913,25913],[29040,29040]]],[1528943983919,[null,[[1,25913,""],[-1,25913,"）。"],[1,26820,"个\n\n"],[-1,26820,"移动。"],[1,26937,"\n"],[1,26944,"w"],[-1,26996,"下一次"],[1,27003,"监测与"],[-1,27023,"总代价"],[1,27028,"因此，"],[1,27087,"显示"],[-1,27087,"小。"],[-1,27144,"可以"],[1,27149,"w的"],[1,27201,"w"],[-1,27201,"\n"],[1,27279,"\n"],[-1,27279,"和"],[1,28124,"Di"],[-1,28124,"每个"],[-1,28244,"时间。"],[1,28253,"大"],[1,28297,"，。"],[-1,28448,"每个"],[1,28463,"的对"],[-1,28463,"d"],[1,28475,"吊"],[-1,28503,"$"],[-1,28520,"$"],[1,28532,"##"],[1,28542,"\n\n"],[-1,28542,"##"],[-1,28864,"的"],[1,28867,"就"],[-1,28913,"广播主机"],[1,28929,"，必须要"],[-1,29021,"用"],[1,29041,"会"]],[29040,29040],[25913,25913]]],[1528943937326,["Re@Re.local",[[1,29123,"解法是，让"]],[29123,29123],[29128,29128]]],[1528943938306,["Re@Re.local",[[-1,29127,"让"]],[29128,29128],[29127,29127]]],[1528943944719,["Re@Re.local",[[1,29127,"广播主机每次只"]],[29127,29127],[29134,29134]]],[1528943945555,["Re@Re.local",[[-1,29131,"每次只"]],[29134,29134],[29131,29131]]],[1528943970845,["Re@Re.local",[[1,29131,"对于每条消息只发送1条，然后由路由器来对其分类。这样"]],[29131,29131],[29157,29157]]],[1528943971230,["Re@Re.local",[[-1,29155,"这样"]],[29157,29157],[29155,29155]]],[1528943977915,["Re@Re.local",[[1,29155,"在这种情况下，最简洁"]],[29155,29155],[29165,29165]]],[1528943978440,["Re@Re.local",[[-1,29163,"简洁"]],[29165,29165],[29163,29163]]],[1528943980633,["Re@Re.local",[[1,29163,"键"]],[29163,29163],[29164,29164]]],[1528943980942,["Re@Re.local",[[-1,29162,"最键"]],[29164,29164],[29162,29162]]],[1528944043915,[null,[[-1,25913,""],[1,25913,"）。"],[-1,26818,"个\n\n"],[1,26821,"移动。"],[-1,26935,"\n"],[-1,26943,"w"],[1,26996,"下一次"],[-1,27000,"监测与"],[1,27023,"总代价"],[-1,27025,"因此，"],[-1,27087,"显示"],[1,27089,"小。"],[1,27144,"可以"],[-1,27147,"w的"],[-1,27201,"w"],[1,27202,"\n"],[-1,27279,"\n"],[1,27280,"和"],[-1,28124,"Di"],[1,28126,"每个"],[1,28244,"时间。"],[-1,28250,"大"],[-1,28294,"。，"],[1,28448,"每个"],[-1,28461,"的对"],[1,28463,"d"],[-1,28474,"吊"],[1,28503,"$"],[1,28519,"$"],[-1,28530,"##"],[-1,28542,"\n\n"],[1,28544,"##"],[1,28864,"的"],[-1,28866,"就"],[1,28913,"广播主机"],[-1,28925,"，必须要"],[1,29021,"用"],[-1,29040,"会"],[1,29121,"暴力"],[-1,29125,"让"],[-1,29130,"每"]],[25913,25913],[29130,29130]]],[1528944043915,[null,[[1,25913,""],[-1,25913,"）。"],[1,26820,"个\n\n"],[-1,26820,"移动。"],[1,26937,"\n"],[1,26944,"w"],[-1,26996,"下一次"],[1,27003,"监测与"],[-1,27023,"总代价"],[1,27028,"因此，"],[1,27087,"显示"],[-1,27087,"小。"],[-1,27144,"可以"],[1,27149,"w的"],[1,27201,"w"],[-1,27201,"\n"],[1,27279,"\n"],[-1,27279,"和"],[1,28124,"Di"],[-1,28124,"每个"],[-1,28244,"时间。"],[1,28253,"大"],[1,28296,"。，"],[-1,28448,"每个"],[1,28463,"的对"],[-1,28463,"d"],[1,28475,"吊"],[-1,28503,"$"],[-1,28520,"$"],[1,28532,"##"],[1,28542,"\n\n"],[-1,28542,"##"],[-1,28864,"的"],[1,28867,"就"],[-1,28913,"广播主机"],[1,28929,"，必须要"],[-1,29021,"用"],[1,29041,"会"],[-1,29121,"暴力"],[1,29127,"让"],[1,29131,"每"]],[29130,29130],[25913,25913]]],[1528943990998,["Re@Re.local",[[1,29162,"最简解法"]],[29162,29162],[29166,29166]]],[1528943991117,["Re@Re.local",[[-1,29165,"法"]],[29166,29166],[29165,29165]]],[1528944010426,["Re@Re.local",[[1,29165,"是一种叫做无控制流的测"]],[29165,29165],[29176,29176]]],[1528944011885,["Re@Re.local",[[-1,29174,"的测"]],[29176,29176],[29174,29174]]],[1528944018885,["Re@Re.local",[[1,29174,"的案发"]],[29174,29174],[29177,29177]]],[1528944019155,["Re@Re.local",[[-1,29175,"案发"]],[29177,29177],[29175,29175]]],[1528944019896,["Re@Re.local",[[1,29175,"办法。"]],[29175,29175],[29178,29178]]],[1528944022481,["Re@Re.local",[[1,29170,"**"]],[29170,29170],[29172,29172]]],[1528944024151,["Re@Re.local",[[1,29176,"**"]],[29176,29176],[29178,29178]]],[1528944026340,["Re@Re.local",[[1,29176,"（）"]],[29176,29176],[29178,29178]]],[1528944031807,["Re@Re.local",[[1,29177,"uncontrolled flooding"]],[29177,29177],[29198,29198]]],[1528944103951,[null,[[-1,25913,""],[1,25913,"）。"],[-1,26818,"个\n\n"],[1,26821,"移动。"],[-1,26935,"\n"],[-1,26943,"w"],[1,26996,"下一次"],[-1,27000,"监测与"],[1,27023,"总代价"],[-1,27025,"因此，"],[-1,27087,"显示"],[1,27089,"小。"],[1,27144,"可以"],[-1,27147,"w的"],[-1,27201,"w"],[1,27202,"\n"],[-1,27279,"\n"],[1,27280,"和"],[-1,28124,"Di"],[1,28126,"每个"],[1,28244,"时间。"],[-1,28250,"大"],[-1,28294,"。，"],[1,28448,"每个"],[-1,28461,"的对"],[1,28463,"d"],[-1,28474,"吊"],[1,28503,"$"],[1,28519,"$"],[-1,28530,"##"],[-1,28542,"\n\n"],[1,28544,"##"],[1,28864,"的"],[-1,28866,"就"],[1,28913,"广播主机"],[-1,28925,"，必须要"],[1,29021,"用"],[-1,29040,"会"],[1,29121,"暴力"],[-1,29125,"让"],[-1,29130,"每"]],[25913,25913],[29130,29130]]],[1528944103951,[null,[[1,25913,""],[-1,25913,"）。"],[1,26820,"个\n\n"],[-1,26820,"移动。"],[1,26937,"\n"],[1,26944,"w"],[-1,26996,"下一次"],[1,27003,"监测与"],[-1,27023,"总代价"],[1,27028,"因此，"],[1,27087,"显示"],[-1,27087,"小。"],[-1,27144,"可以"],[1,27149,"w的"],[1,27201,"w"],[-1,27201,"\n"],[1,27279,"\n"],[-1,27279,"和"],[1,28124,"Di"],[-1,28124,"每个"],[-1,28244,"时间。"],[1,28253,"大"],[1,28296,"。，"],[-1,28448,"每个"],[1,28463,"的对"],[-1,28463,"d"],[1,28475,"吊"],[-1,28503,"$"],[-1,28520,"$"],[1,28532,"##"],[1,28542,"\n\n"],[-1,28542,"##"],[-1,28864,"的"],[1,28867,"就"],[-1,28913,"广播主机"],[1,28929,"，必须要"],[-1,29021,"用"],[1,29041,"会"],[-1,29121,"暴力"],[1,29127,"让"],[1,29131,"每"]],[29130,29130],[25913,25913]]],[1528944050183,["Re@Re.local",[[-1,29174,"制"]],[29175,29175],[29174,29174]]],[1528944163925,[null,[[-1,25913,""],[1,25913,"）。"],[-1,26818,"个\n\n"],[1,26821,"移动。"],[-1,26935,"\n"],[-1,26943,"w"],[1,26996,"下一次"],[-1,27000,"监测与"],[1,27023,"总代价"],[-1,27025,"因此，"],[-1,27087,"显示"],[1,27089,"小。"],[1,27144,"可以"],[-1,27147,"w的"],[-1,27201,"w"],[1,27202,"\n"],[-1,27279,"\n"],[1,27280,"和"],[-1,28124,"Di"],[1,28126,"每个"],[1,28244,"时间。"],[-1,28250,"大"],[-1,28294,"。，"],[1,28448,"每个"],[-1,28461,"的对"],[1,28463,"d"],[-1,28474,"吊"],[1,28503,"$"],[1,28519,"$"],[-1,28530,"##"],[-1,28542,"\n\n"],[1,28544,"##"],[1,28864,"的"],[-1,28866,"就"],[1,28913,"广播主机"],[-1,28925,"，必须要"],[1,29021,"用"],[-1,29040,"会"],[1,29121,"暴力"],[-1,29125,"让"],[-1,29130,"每"]],[25913,25913],[29130,29130]]],[1528944163925,[null,[[1,25913,""],[-1,25913,"）。"],[1,26820,"个\n\n"],[-1,26820,"移动。"],[1,26937,"\n"],[1,26944,"w"],[-1,26996,"下一次"],[1,27003,"监测与"],[-1,27023,"总代价"],[1,27028,"因此，"],[1,27087,"显示"],[-1,27087,"小。"],[-1,27144,"可以"],[1,27149,"w的"],[1,27201,"w"],[-1,27201,"\n"],[1,27279,"\n"],[-1,27279,"和"],[1,28124,"Di"],[-1,28124,"每个"],[-1,28244,"时间。"],[1,28253,"大"],[1,28296,"。，"],[-1,28448,"每个"],[1,28463,"的对"],[-1,28463,"d"],[1,28475,"吊"],[-1,28503,"$"],[-1,28520,"$"],[1,28532,"##"],[1,28542,"\n\n"],[-1,28542,"##"],[-1,28864,"的"],[1,28867,"就"],[-1,28913,"广播主机"],[1,28929,"，必须要"],[-1,29021,"用"],[1,29041,"会"],[-1,29121,"暴力"],[1,29127,"让"],[1,29131,"每"]],[29130,29130],[25913,25913]]],[1528944110948,["Re@Re.local",[[-1,29174,"流"]],[29175,29175],[29174,29174]]],[1528944111857,["Re@Re.local",[[1,29174,"fan"]],[29174,29174],[29177,29177]]],[1528944112554,["Re@Re.local",[[-1,29174,"fan"]],[29177,29177],[29174,29174]]],[1528944127705,["Re@Re.local",[[1,29174,"泛洪"]],[29174,29174],[29176,29176]]],[1528944134105,["Re@Re.local",[[-1,29202,"办法"]],[29204,29204],[29202,29202]]],[1528944135053,["Re@Re.local",[[1,29202,"策略"]],[29202,29202],[29204,29204]]],[1528944135933,["Re@Re.local",[[-1,29202,"策略"]],[29204,29204],[29202,29202]]],[1528944137482,["Re@Re.local",[[1,29202,"方法"]],[29202,29202],[29204,29204]]],[1528944150315,["Re@Re.local",[[1,29205,"该泛洪策略运行"]],[29205,29205],[29212,29212]]],[1528944150648,["Re@Re.local",[[-1,29210,"运行"]],[29212,29212],[29210,29210]]],[1528944160808,["Re@Re.local",[[1,29210,"步骤如下。每条信息"]],[29210,29210],[29219,29219]]],[1528944162086,["Re@Re.local",[[-1,29217,"信息"]],[29219,29219],[29217,29217]]],[1528944163335,["Re@Re.local",[[1,29217,"消息"]],[29217,29217],[29219,29219]]],[1528944223930,[null,[[-1,25913,""],[1,25913,"）。"],[-1,26818,"个\n\n"],[1,26821,"移动。"],[-1,26935,"\n"],[-1,26943,"w"],[1,26996,"下一次"],[-1,27000,"监测与"],[1,27023,"总代价"],[-1,27025,"因此，"],[-1,27087,"显示"],[1,27089,"小。"],[1,27144,"可以"],[-1,27147,"w的"],[-1,27201,"w"],[1,27202,"\n"],[-1,27279,"\n"],[1,27280,"和"],[-1,28124,"Di"],[1,28126,"每个"],[1,28244,"时间。"],[-1,28250,"大"],[-1,28294,"。，"],[1,28448,"每个"],[-1,28461,"的对"],[1,28463,"d"],[-1,28474,"吊"],[1,28503,"$"],[1,28519,"$"],[-1,28530,"##"],[-1,28542,"\n\n"],[1,28544,"##"],[1,28864,"的"],[-1,28866,"就"],[1,28913,"广播主机"],[-1,28925,"，必须要"],[1,29021,"用"],[-1,29040,"会"],[1,29121,"暴力"],[-1,29125,"让"],[-1,29130,"每"]],[25913,25913],[29130,29130]]],[1528944223930,[null,[[1,25913,""],[-1,25913,"）。"],[1,26820,"个\n\n"],[-1,26820,"移动。"],[1,26937,"\n"],[1,26944,"w"],[-1,26996,"下一次"],[1,27003,"监测与"],[-1,27023,"总代价"],[1,27028,"因此，"],[1,27087,"显示"],[-1,27087,"小。"],[-1,27144,"可以"],[1,27149,"w的"],[1,27201,"w"],[-1,27201,"\n"],[1,27279,"\n"],[-1,27279,"和"],[1,28124,"Di"],[-1,28124,"每个"],[-1,28244,"时间。"],[1,28253,"大"],[1,28296,"。，"],[-1,28448,"每个"],[1,28463,"的对"],[-1,28463,"d"],[1,28475,"吊"],[-1,28503,"$"],[-1,28520,"$"],[1,28532,"##"],[1,28542,"\n\n"],[-1,28542,"##"],[-1,28864,"的"],[1,28867,"就"],[-1,28913,"广播主机"],[1,28929,"，必须要"],[-1,29021,"用"],[1,29041,"会"],[-1,29121,"暴力"],[1,29127,"让"],[1,29131,"每"]],[29130,29130],[25913,25913]]],[1528944222405,["Re@Re.local",[[1,29219,"都被"]],[29219,29219],[29221,29221]]],[1528944283952,[null,[[-1,25913,""],[1,25913,"）。"],[-1,26818,"个\n\n"],[1,26821,"移动。"],[-1,26935,"\n"],[-1,26943,"w"],[1,26996,"下一次"],[-1,27000,"监测与"],[1,27023,"总代价"],[-1,27025,"因此，"],[-1,27087,"显示"],[1,27089,"小。"],[1,27144,"可以"],[-1,27147,"w的"],[-1,27201,"w"],[1,27202,"\n"],[-1,27279,"\n"],[1,27280,"和"],[-1,28124,"Di"],[1,28126,"每个"],[1,28244,"时间。"],[-1,28250,"大"],[-1,28294,"。，"],[1,28448,"每个"],[-1,28461,"的对"],[1,28463,"d"],[-1,28474,"吊"],[1,28503,"$"],[1,28519,"$"],[-1,28530,"##"],[-1,28542,"\n\n"],[1,28544,"##"],[1,28864,"的"],[-1,28866,"就"],[1,28913,"广播主机"],[-1,28925,"，必须要"],[1,29021,"用"],[-1,29040,"会"],[1,29121,"暴力"],[-1,29125,"让"],[-1,29130,"每"]],[25913,25913],[29130,29130]]],[1528944283953,[null,[[1,25913,""],[-1,25913,"）。"],[1,26820,"个\n\n"],[-1,26820,"移动。"],[1,26937,"\n"],[1,26944,"w"],[-1,26996,"下一次"],[1,27003,"监测与"],[-1,27023,"总代价"],[1,27028,"因此，"],[1,27087,"显示"],[-1,27087,"小。"],[-1,27144,"可以"],[1,27149,"w的"],[1,27201,"w"],[-1,27201,"\n"],[1,27279,"\n"],[-1,27279,"和"],[1,28124,"Di"],[-1,28124,"每个"],[-1,28244,"时间。"],[1,28253,"大"],[1,28296,"。，"],[-1,28448,"每个"],[1,28463,"的对"],[-1,28463,"d"],[1,28475,"吊"],[-1,28503,"$"],[-1,28520,"$"],[1,28532,"##"],[1,28542,"\n\n"],[-1,28542,"##"],[-1,28864,"的"],[1,28867,"就"],[-1,28913,"广播主机"],[1,28929,"，必须要"],[-1,29021,"用"],[1,29041,"会"],[-1,29121,"暴力"],[1,29127,"让"],[1,29131,"每"]],[29130,29130],[25913,25913]]],[1528944230093,["Re@Re.local",[[1,29223,"了一个存活时间（"]],[29223,29223],[29231,29231]]],[1528944231655,["Re@Re.local",[[-1,29226,"存活时间（"]],[29231,29231],[29226,29226]]],[1528944233176,["Re@Re.local",[[1,29226,"**（"]],[29226,29226],[29229,29229]]],[1528944234192,["Re@Re.local",[[-1,29228,"（"]],[29229,29229],[29228,29228]]],[1528944240149,["Re@Re.local",[[1,29228,"存活时间（time-to-lie"]],[29228,29228],[29244,29244]]],[1528944240769,["Re@Re.local",[[-1,29243,"e"]],[29244,29244],[29243,29243]]],[1528944254991,["Re@Re.local",[[1,29243,"ve value）**，该值介于"]],[29243,29243],[29259,29259]]],[1528944258327,["Re@Re.local",[[-1,29257,"介于"]],[29259,29259],[29257,29257]]],[1528944283073,["Re@Re.local",[[1,29257,"大于等于广播主机与"]],[29257,29257],[29266,29266]]],[1528944343888,[null,[[-1,25913,""],[1,25913,"）。"],[-1,26818,"个\n\n"],[1,26821,"移动。"],[-1,26935,"\n"],[-1,26943,"w"],[1,26996,"下一次"],[-1,27000,"监测与"],[1,27023,"总代价"],[-1,27025,"因此，"],[-1,27087,"显示"],[1,27089,"小。"],[1,27144,"可以"],[-1,27147,"w的"],[-1,27201,"w"],[1,27202,"\n"],[-1,27279,"\n"],[1,27280,"和"],[-1,28124,"Di"],[1,28126,"每个"],[1,28244,"时间。"],[-1,28250,"大"],[-1,28294,"。，"],[1,28448,"每个"],[-1,28461,"的对"],[1,28463,"d"],[-1,28474,"吊"],[1,28503,"$"],[1,28519,"$"],[-1,28530,"##"],[-1,28542,"\n\n"],[1,28544,"##"],[1,28864,"的"],[-1,28866,"就"],[1,28913,"广播主机"],[-1,28925,"，必须要"],[1,29021,"用"],[-1,29040,"会"],[1,29121,"暴力"],[-1,29125,"让"],[-1,29130,"每"],[1,29221,"设置"],[-1,29224,"存活"]],[25913,25913],[29224,29224]]],[1528944343888,[null,[[1,25913,""],[-1,25913,"）。"],[1,26820,"个\n\n"],[-1,26820,"移动。"],[1,26937,"\n"],[1,26944,"w"],[-1,26996,"下一次"],[1,27003,"监测与"],[-1,27023,"总代价"],[1,27028,"因此，"],[1,27087,"显示"],[-1,27087,"小。"],[-1,27144,"可以"],[1,27149,"w的"],[1,27201,"w"],[-1,27201,"\n"],[1,27279,"\n"],[-1,27279,"和"],[1,28124,"Di"],[-1,28124,"每个"],[-1,28244,"时间。"],[1,28253,"大"],[1,28296,"。，"],[-1,28448,"每个"],[1,28463,"的对"],[-1,28463,"d"],[1,28475,"吊"],[-1,28503,"$"],[-1,28520,"$"],[1,28532,"##"],[1,28542,"\n\n"],[-1,28542,"##"],[-1,28864,"的"],[1,28867,"就"],[-1,28913,"广播主机"],[1,28929,"，必须要"],[-1,29021,"用"],[1,29041,"会"],[-1,29121,"暴力"],[1,29127,"让"],[1,29131,"每"],[-1,29221,"设置"],[1,29226,"存活"]],[29224,29224],[25913,25913]]],[1528944294383,["Re@Re.local",[[1,29266,"最远收听者间的边数。。"]],[29266,29266],[29277,29277]]],[1528944295207,["Re@Re.local",[[-1,29276,"。"]],[29277,29277],[29276,29276]]],[1528944296422,["Re@Re.local",[[1,29276,"每个"]],[29276,29276],[29278,29278]]],[1528944956059,[null,[[-1,25913,""],[1,25913,"）。"],[-1,26818,"个\n\n"],[1,26821,"移动。"],[-1,26935,"\n"],[-1,26943,"w"],[1,26996,"下一次"],[-1,27000,"监测与"],[1,27023,"总代价"],[-1,27025,"因此，"],[-1,27087,"显示"],[1,27089,"小。"],[1,27144,"可以"],[-1,27147,"w的"],[-1,27201,"w"],[1,27202,"\n"],[-1,27279,"\n"],[1,27280,"和"],[-1,28124,"Di"],[1,28126,"每个"],[1,28244,"时间。"],[-1,28250,"大"],[-1,28294,"。，"],[1,28448,"每个"],[-1,28461,"的对"],[1,28463,"d"],[-1,28474,"吊"],[1,28503,"$"],[1,28519,"$"],[-1,28530,"##"],[-1,28542,"\n\n"],[1,28544,"##"],[1,28864,"的"],[-1,28866,"就"],[1,28913,"广播主机"],[-1,28925,"，必须要"],[1,29021,"用"],[-1,29040,"会"],[1,29121,"暴力"],[-1,29125,"让"],[-1,29130,"每"],[1,29221,"设置"],[-1,29224,"存活"]],[25913,25913],[29224,29224]]],[1528944956059,[null,[[1,25913,""],[-1,25913,"）。"],[1,26820,"个\n\n"],[-1,26820,"移动。"],[1,26937,"\n"],[1,26944,"w"],[-1,26996,"下一次"],[1,27003,"监测与"],[-1,27023,"总代价"],[1,27028,"因此，"],[1,27087,"显示"],[-1,27087,"小。"],[-1,27144,"可以"],[1,27149,"w的"],[1,27201,"w"],[-1,27201,"\n"],[1,27279,"\n"],[-1,27279,"和"],[1,28124,"Di"],[-1,28124,"每个"],[-1,28244,"时间。"],[1,28253,"大"],[1,28296,"。，"],[-1,28448,"每个"],[1,28463,"的对"],[-1,28463,"d"],[1,28475,"吊"],[-1,28503,"$"],[-1,28520,"$"],[1,28532,"##"],[1,28542,"\n\n"],[-1,28542,"##"],[-1,28864,"的"],[1,28867,"就"],[-1,28913,"广播主机"],[1,28929,"，必须要"],[-1,29021,"用"],[1,29041,"会"],[-1,29121,"暴力"],[1,29127,"让"],[1,29131,"每"],[-1,29221,"设置"],[1,29226,"存活"]],[29224,29224],[25913,25913]]],[1528944955326,["Re@Re.local",[[1,29278,"路由器"]],[29278,29278],[29281,29281]]],[1528945016026,[null,[[-1,25913,""],[1,25913,"）。"],[-1,26818,"个\n\n"],[1,26821,"移动。"],[-1,26935,"\n"],[-1,26943,"w"],[1,26996,"下一次"],[-1,27000,"监测与"],[1,27023,"总代价"],[-1,27025,"因此，"],[-1,27087,"显示"],[1,27089,"小。"],[1,27144,"可以"],[-1,27147,"w的"],[-1,27201,"w"],[1,27202,"\n"],[-1,27279,"\n"],[1,27280,"和"],[-1,28124,"Di"],[1,28126,"每个"],[1,28244,"时间。"],[-1,28250,"大"],[-1,28294,"。，"],[1,28448,"每个"],[-1,28461,"的对"],[1,28463,"d"],[-1,28474,"吊"],[1,28503,"$"],[1,28519,"$"],[-1,28530,"##"],[-1,28542,"\n\n"],[1,28544,"##"],[1,28864,"的"],[-1,28866,"就"],[1,28913,"广播主机"],[-1,28925,"，必须要"],[1,29021,"用"],[-1,29040,"会"],[1,29121,"暴力"],[-1,29125,"让"],[-1,29130,"每"],[1,29221,"设置"],[-1,29224,"存活"]],[25913,25913],[29224,29224]]],[1528945016027,[null,[[1,25913,""],[-1,25913,"）。"],[1,26820,"个\n\n"],[-1,26820,"移动。"],[1,26937,"\n"],[1,26944,"w"],[-1,26996,"下一次"],[1,27003,"监测与"],[-1,27023,"总代价"],[1,27028,"因此，"],[1,27087,"显示"],[-1,27087,"小。"],[-1,27144,"可以"],[1,27149,"w的"],[1,27201,"w"],[-1,27201,"\n"],[1,27279,"\n"],[-1,27279,"和"],[1,28124,"Di"],[-1,28124,"每个"],[-1,28244,"时间。"],[1,28253,"大"],[1,28296,"。，"],[-1,28448,"每个"],[1,28463,"的对"],[-1,28463,"d"],[1,28475,"吊"],[-1,28503,"$"],[-1,28520,"$"],[1,28532,"##"],[1,28542,"\n\n"],[-1,28542,"##"],[-1,28864,"的"],[1,28867,"就"],[-1,28913,"广播主机"],[1,28929,"，必须要"],[-1,29021,"用"],[1,29041,"会"],[-1,29121,"暴力"],[1,29127,"让"],[1,29131,"每"],[-1,29221,"设置"],[1,29226,"存活"]],[29224,29224],[25913,25913]]],[1528944961349,["Re@Re.local",[[1,29282,"会收到消息的"]],[29282,29282],[29288,29288]]],[1528944963007,["Re@Re.local",[[-1,29283,"收到消息的"]],[29288,29288],[29283,29283]]],[1528944975261,["Re@Re.local",[[1,29283,"收到一份消息，然后将该消息传送给**"]],[29283,29283],[29301,29301]]],[1528944976864,["Re@Re.local",[[1,29300,"所有"]],[29300,29300],[29302,29302]]],[1528944993039,["Re@Re.local",[[1,29303,"它的邻接路由器。当消息眼"]],[29303,29303],[29315,29315]]],[1528944993983,["Re@Re.local",[[-1,29311,"当消息眼"]],[29315,29315],[29311,29311]]],[1528944999744,["Re@Re.local",[[1,29311,"传输过程中，ttl不断"]],[29311,29311],[29322,29322]]],[1528945001961,["Re@Re.local",[[-1,29316,"，ttl不断"]],[29322,29322],[29316,29316]]],[1528945013625,["Re@Re.local",[[1,29316,"，每经过1个路哟怄气"]],[29316,29316],[29326,29326]]],[1528945079581,[null,[[-1,25913,""],[1,25913,"）。"],[-1,26818,"个\n\n"],[1,26821,"移动。"],[-1,26935,"\n"],[-1,26943,"w"],[1,26996,"下一次"],[-1,27000,"监测与"],[1,27023,"总代价"],[-1,27025,"因此，"],[-1,27087,"显示"],[1,27089,"小。"],[1,27144,"可以"],[-1,27147,"w的"],[-1,27201,"w"],[1,27202,"\n"],[-1,27279,"\n"],[1,27280,"和"],[-1,28124,"Di"],[1,28126,"每个"],[1,28244,"时间。"],[-1,28250,"大"],[-1,28294,"。，"],[1,28448,"每个"],[-1,28461,"的对"],[1,28463,"d"],[-1,28474,"吊"],[1,28503,"$"],[1,28519,"$"],[-1,28530,"##"],[-1,28542,"\n\n"],[1,28544,"##"],[1,28864,"的"],[-1,28866,"就"],[1,28913,"广播主机"],[-1,28925,"，必须要"],[1,29021,"用"],[-1,29040,"会"],[1,29121,"暴力"],[-1,29125,"让"],[-1,29130,"每"],[1,29221,"设置"],[-1,29224,"存活"],[1,29281,"都"],[-1,29282,"收"]],[25913,25913],[29282,29282]]],[1528945079581,[null,[[1,25913,""],[-1,25913,"）。"],[1,26820,"个\n\n"],[-1,26820,"移动。"],[1,26937,"\n"],[1,26944,"w"],[-1,26996,"下一次"],[1,27003,"监测与"],[-1,27023,"总代价"],[1,27028,"因此，"],[1,27087,"显示"],[-1,27087,"小。"],[-1,27144,"可以"],[1,27149,"w的"],[1,27201,"w"],[-1,27201,"\n"],[1,27279,"\n"],[-1,27279,"和"],[1,28124,"Di"],[-1,28124,"每个"],[-1,28244,"时间。"],[1,28253,"大"],[1,28296,"。，"],[-1,28448,"每个"],[1,28463,"的对"],[-1,28463,"d"],[1,28475,"吊"],[-1,28503,"$"],[-1,28520,"$"],[1,28532,"##"],[1,28542,"\n\n"],[-1,28542,"##"],[-1,28864,"的"],[1,28867,"就"],[-1,28913,"广播主机"],[1,28929,"，必须要"],[-1,29021,"用"],[1,29041,"会"],[-1,29121,"暴力"],[1,29127,"让"],[1,29131,"每"],[-1,29221,"设置"],[1,29226,"存活"],[-1,29281,"都"],[1,29283,"收"]],[29282,29282],[25913,25913]]],[1528945018627,["Re@Re.local",[[-1,29322,"路哟怄气"]],[29326,29326],[29322,29322]]],[1528945025222,["Re@Re.local",[[1,29322,"路由器ttl值减去"]],[29322,29322],[29331,29331]]],[1528945025284,["Re@Re.local",[[-1,29330,"去"]],[29331,29331],[29330,29330]]],[1528945026374,["Re@Re.local",[[1,29330,"1知道"]],[29330,29330],[29333,29333]]],[1528945027067,["Re@Re.local",[[-1,29331,"知道"]],[29333,29333],[29331,29331]]],[1528945029544,["Re@Re.local",[[1,29331,"直到为0."]],[29331,29331],[29336,29336]]],[1528945030921,["Re@Re.local",[[-1,29335,"."]],[29336,29336],[29335,29335]]],[1528945031670,["Re@Re.local",[[1,29335,"。"]],[29335,29335],[29336,29336]]],[1528945139623,[null,[[-1,25913,""],[1,25913,"）。"],[-1,26818,"个\n\n"],[1,26821,"移动。"],[-1,26935,"\n"],[-1,26943,"w"],[1,26996,"下一次"],[-1,27000,"监测与"],[1,27023,"总代价"],[-1,27025,"因此，"],[-1,27087,"显示"],[1,27089,"小。"],[1,27144,"可以"],[-1,27147,"w的"],[-1,27201,"w"],[1,27202,"\n"],[-1,27279,"\n"],[1,27280,"和"],[-1,28124,"Di"],[1,28126,"每个"],[1,28244,"时间。"],[-1,28250,"大"],[-1,28294,"。，"],[1,28448,"每个"],[-1,28461,"的对"],[1,28463,"d"],[-1,28474,"吊"],[1,28503,"$"],[1,28519,"$"],[-1,28530,"##"],[-1,28542,"\n\n"],[1,28544,"##"],[1,28864,"的"],[-1,28866,"就"],[1,28913,"广播主机"],[-1,28925,"，必须要"],[1,29021,"用"],[-1,29040,"会"],[1,29121,"暴力"],[-1,29125,"让"],[-1,29130,"每"],[1,29221,"设置"],[-1,29224,"存活"],[1,29281,"都"],[-1,29282,"收"]],[25913,25913],[29282,29282]]],[1528945139623,[null,[[1,25913,""],[-1,25913,"）。"],[1,26820,"个\n\n"],[-1,26820,"移动。"],[1,26937,"\n"],[1,26944,"w"],[-1,26996,"下一次"],[1,27003,"监测与"],[-1,27023,"总代价"],[1,27028,"因此，"],[1,27087,"显示"],[-1,27087,"小。"],[-1,27144,"可以"],[1,27149,"w的"],[1,27201,"w"],[-1,27201,"\n"],[1,27279,"\n"],[-1,27279,"和"],[1,28124,"Di"],[-1,28124,"每个"],[-1,28244,"时间。"],[1,28253,"大"],[1,28296,"。，"],[-1,28448,"每个"],[1,28463,"的对"],[-1,28463,"d"],[1,28475,"吊"],[-1,28503,"$"],[-1,28520,"$"],[1,28532,"##"],[1,28542,"\n\n"],[-1,28542,"##"],[-1,28864,"的"],[1,28867,"就"],[-1,28913,"广播主机"],[1,28929,"，必须要"],[-1,29021,"用"],[1,29041,"会"],[-1,29121,"暴力"],[1,29127,"让"],[1,29131,"每"],[-1,29221,"设置"],[1,29226,"存活"],[-1,29281,"都"],[1,29283,"收"]],[29282,29282],[25913,25913]]],[1528945116094,["Re@Re.local",[[1,29336,"\n\n"]],[29336,29336],[29337,29337]]],[1528945116494,["Re@Re.local",[[1,29338,"\n"]],[29337,29337],[29338,29338]]],[1528945131488,["Re@Re.local",[[1,29336,"很容易"]],[29336,29336],[29339,29339]]],[1528945132626,["Re@Re.local",[[-1,29337,"容易"]],[29339,29339],[29337,29337]]],[1528945134213,["Re@Re.local",[[1,29337,"明显，"]],[29337,29337],[29340,29340]]],[1528945199603,[null,[[-1,25913,""],[1,25913,"）。"],[-1,26818,"个\n\n"],[1,26821,"移动。"],[-1,26935,"\n"],[-1,26943,"w"],[1,26996,"下一次"],[-1,27000,"监测与"],[1,27023,"总代价"],[-1,27025,"因此，"],[-1,27087,"显示"],[1,27089,"小。"],[1,27144,"可以"],[-1,27147,"w的"],[-1,27201,"w"],[1,27202,"\n"],[-1,27279,"\n"],[1,27280,"和"],[-1,28124,"Di"],[1,28126,"每个"],[1,28244,"时间。"],[-1,28250,"大"],[-1,28294,"。，"],[1,28448,"每个"],[-1,28461,"的对"],[1,28463,"d"],[-1,28474,"吊"],[1,28503,"$"],[1,28519,"$"],[-1,28530,"##"],[-1,28542,"\n\n"],[1,28544,"##"],[1,28864,"的"],[-1,28866,"就"],[1,28913,"广播主机"],[-1,28925,"，必须要"],[1,29021,"用"],[-1,29040,"会"],[1,29121,"暴力"],[-1,29125,"让"],[-1,29130,"每"],[1,29221,"设置"],[-1,29224,"存活"],[1,29281,"都"],[-1,29282,"收"]],[25913,25913],[29282,29282]]],[1528945199603,[null,[[1,25913,""],[-1,25913,"）。"],[1,26820,"个\n\n"],[-1,26820,"移动。"],[1,26937,"\n"],[1,26944,"w"],[-1,26996,"下一次"],[1,27003,"监测与"],[-1,27023,"总代价"],[1,27028,"因此，"],[1,27087,"显示"],[-1,27087,"小。"],[-1,27144,"可以"],[1,27149,"w的"],[1,27201,"w"],[-1,27201,"\n"],[1,27279,"\n"],[-1,27279,"和"],[1,28124,"Di"],[-1,28124,"每个"],[-1,28244,"时间。"],[1,28253,"大"],[1,28296,"。，"],[-1,28448,"每个"],[1,28463,"的对"],[-1,28463,"d"],[1,28475,"吊"],[-1,28503,"$"],[-1,28520,"$"],[1,28532,"##"],[1,28542,"\n\n"],[-1,28542,"##"],[-1,28864,"的"],[1,28867,"就"],[-1,28913,"广播主机"],[1,28929,"，必须要"],[-1,29021,"用"],[1,29041,"会"],[-1,29121,"暴力"],[1,29127,"让"],[1,29131,"每"],[-1,29221,"设置"],[1,29226,"存活"],[-1,29281,"都"],[1,29283,"收"]],[29282,29282],[25913,25913]]],[1528945154685,["Re@Re.local",[[1,29340,"无控泛洪会比第一种方法生成还要多的无用消息。"]],[29340,29340],[29362,29362]]],[1528945155484,["Re@Re.local",[[-1,29359,"消息。"]],[29362,29362],[29359,29359]]],[1528945156270,["Re@Re.local",[[1,29359,"消息。"]],[29359,29359],[29362,29362]]],[1528945156607,["Re@Re.local",[[1,29365,"\n"]],[29362,29362],[29363,29363]]],[1528945156833,["Re@Re.local",[[1,29366,"\n"]],[29363,29363],[29364,29364]]],[1528945196406,["Re@Re.local",[[1,29364,"本书给出的解法基于最小"]],[29364,29364],[29375,29375]]],[1528945196708,["Re@Re.local",[[-1,29373,"最小"]],[29375,29375],[29373,29373]]],[1528945198485,["Re@Re.local",[[1,29373,"构造"]],[29373,29373],[29375,29375]]],[1528945259599,[null,[[-1,25913,""],[1,25913,"）。"],[-1,26818,"个\n\n"],[1,26821,"移动。"],[-1,26935,"\n"],[-1,26943,"w"],[1,26996,"下一次"],[-1,27000,"监测与"],[1,27023,"总代价"],[-1,27025,"因此，"],[-1,27087,"显示"],[1,27089,"小。"],[1,27144,"可以"],[-1,27147,"w的"],[-1,27201,"w"],[1,27202,"\n"],[-1,27279,"\n"],[1,27280,"和"],[-1,28124,"Di"],[1,28126,"每个"],[1,28244,"时间。"],[-1,28250,"大"],[-1,28294,"。，"],[1,28448,"每个"],[-1,28461,"的对"],[1,28463,"d"],[-1,28474,"吊"],[1,28503,"$"],[1,28519,"$"],[-1,28530,"##"],[-1,28542,"\n\n"],[1,28544,"##"],[1,28864,"的"],[-1,28866,"就"],[1,28913,"广播主机"],[-1,28925,"，必须要"],[1,29021,"用"],[-1,29040,"会"],[1,29121,"暴力"],[-1,29125,"让"],[-1,29130,"每"],[1,29221,"设置"],[-1,29224,"存活"],[1,29281,"都"],[-1,29282,"收"]],[25913,25913],[29282,29282]]],[1528945259599,[null,[[1,25913,""],[-1,25913,"）。"],[1,26820,"个\n\n"],[-1,26820,"移动。"],[1,26937,"\n"],[1,26944,"w"],[-1,26996,"下一次"],[1,27003,"监测与"],[-1,27023,"总代价"],[1,27028,"因此，"],[1,27087,"显示"],[-1,27087,"小。"],[-1,27144,"可以"],[1,27149,"w的"],[1,27201,"w"],[-1,27201,"\n"],[1,27279,"\n"],[-1,27279,"和"],[1,28124,"Di"],[-1,28124,"每个"],[-1,28244,"时间。"],[1,28253,"大"],[1,28296,"。，"],[-1,28448,"每个"],[1,28463,"的对"],[-1,28463,"d"],[1,28475,"吊"],[-1,28503,"$"],[-1,28520,"$"],[1,28532,"##"],[1,28542,"\n\n"],[-1,28542,"##"],[-1,28864,"的"],[1,28867,"就"],[-1,28913,"广播主机"],[1,28929,"，必须要"],[-1,29021,"用"],[1,29041,"会"],[-1,29121,"暴力"],[1,29127,"让"],[1,29131,"每"],[-1,29221,"设置"],[1,29226,"存活"],[-1,29281,"都"],[1,29283,"收"]],[29282,29282],[25913,25913]]],[1528945206101,["Re@Re.local",[[1,29373,"最小权重生成树的构造"]],[29373,29373],[29383,29383]]],[1528945207490,["Re@Re.local",[[-1,29380,"的构造"]],[29383,29383],[29380,29380]]],[1528945213323,["Re@Re.local",[[1,29380,"。一下给"]],[29380,29380],[29384,29384]]],[1528945214198,["Re@Re.local",[[-1,29381,"一下给"]],[29384,29384],[29381,29381]]],[1528945249394,["Re@Re.local",[[1,29381,"以下给除正式定义：对于图G=(V,E)，T是E的五环"]],[29381,29381],[29407,29407]]],[1528945250216,["Re@Re.local",[[-1,29405,"五环"]],[29407,29407],[29405,29405]]],[1528945253521,["Re@Re.local",[[1,29405,"一个无欢"]],[29405,29405],[29409,29409]]],[1528945253659,["Re@Re.local",[[-1,29408,"欢"]],[29409,29409],[29408,29408]]],[1528945255681,["Re@Re.local",[[1,29408,"换"]],[29408,29408],[29409,29409]]],[1528945255774,["Re@Re.local",[[-1,29408,"换"]],[29409,29409],[29408,29408]]],[1528945258614,["Re@Re.local",[[1,29408,"圈子集，"]],[29408,29408],[29412,29412]]],[1528945319594,[null,[[-1,25913,""],[1,25913,"）。"],[-1,26818,"个\n\n"],[1,26821,"移动。"],[-1,26935,"\n"],[-1,26943,"w"],[1,26996,"下一次"],[-1,27000,"监测与"],[1,27023,"总代价"],[-1,27025,"因此，"],[-1,27087,"显示"],[1,27089,"小。"],[1,27144,"可以"],[-1,27147,"w的"],[-1,27201,"w"],[1,27202,"\n"],[-1,27279,"\n"],[1,27280,"和"],[-1,28124,"Di"],[1,28126,"每个"],[1,28244,"时间。"],[-1,28250,"大"],[-1,28294,"。，"],[1,28448,"每个"],[-1,28461,"的对"],[1,28463,"d"],[-1,28474,"吊"],[1,28503,"$"],[1,28519,"$"],[-1,28530,"##"],[-1,28542,"\n\n"],[1,28544,"##"],[1,28864,"的"],[-1,28866,"就"],[1,28913,"广播主机"],[-1,28925,"，必须要"],[1,29021,"用"],[-1,29040,"会"],[1,29121,"暴力"],[-1,29125,"让"],[-1,29130,"每"],[1,29221,"设置"],[-1,29224,"存活"],[1,29281,"都"],[-1,29282,"收"],[-1,29412,"构造"]],[25913,25913],[29412,29412]]],[1528945319594,[null,[[1,25913,""],[-1,25913,"）。"],[1,26820,"个\n\n"],[-1,26820,"移动。"],[1,26937,"\n"],[1,26944,"w"],[-1,26996,"下一次"],[1,27003,"监测与"],[-1,27023,"总代价"],[1,27028,"因此，"],[1,27087,"显示"],[-1,27087,"小。"],[-1,27144,"可以"],[1,27149,"w的"],[1,27201,"w"],[-1,27201,"\n"],[1,27279,"\n"],[-1,27279,"和"],[1,28124,"Di"],[-1,28124,"每个"],[-1,28244,"时间。"],[1,28253,"大"],[1,28296,"。，"],[-1,28448,"每个"],[1,28463,"的对"],[-1,28463,"d"],[1,28475,"吊"],[-1,28503,"$"],[-1,28520,"$"],[1,28532,"##"],[1,28542,"\n\n"],[-1,28542,"##"],[-1,28864,"的"],[1,28867,"就"],[-1,28913,"广播主机"],[1,28929,"，必须要"],[-1,29021,"用"],[1,29041,"会"],[-1,29121,"暴力"],[1,29127,"让"],[1,29131,"每"],[-1,29221,"设置"],[1,29226,"存活"],[-1,29281,"都"],[1,29283,"收"],[1,29412,"构造"]],[29412,29412],[25913,25913]]],[1528945260869,["Re@Re.local",[[-1,29411,"，"]],[29412,29412],[29411,29411]]],[1528945263708,["Re@Re.local",[[1,29411,"并且看集"]],[29411,29411],[29415,29415]]],[1528945264108,["Re@Re.local",[[-1,29413,"看集"]],[29415,29415],[29413,29413]]],[1528945271466,["Re@Re.local",[[1,29413,"连接了V中所有的顶点"]],[29413,29413],[29423,29423]]],[1528945278413,["Re@Re.local",[[-1,29411,"并"]],[29412,29412],[29411,29411]]],[1528945279357,["Re@Re.local",[[1,29411,"，"]],[29411,29411],[29412,29412]]],[1528945281966,["Re@Re.local",[[-1,29411,"，"]],[29412,29412],[29411,29411]]],[1528945284043,["Re@Re.local",[[1,29422,"，"]],[29422,29422],[29423,29423]]],[1528945285341,["Re@Re.local",[[-1,29422,"，"]],[29423,29423],[29422,29422]]],[1528945285850,["Re@Re.local",[[1,29422,"。"]],[29422,29422],[29423,29423]]],[1528945287151,["Re@Re.local",[[-1,29422,"。"]],[29423,29423],[29422,29422]]],[1528945297390,["Re@Re.local",[[1,29422,"，这样一来T中"]],[29422,29422],[29429,29429]]],[1528945316724,["Re@Re.local",[[1,29401,"最小权重生成树"]],[29401,29401],[29408,29408]]],[1528945318942,["Re@Re.local",[[1,29436,"的"]],[29436,29436],[29437,29437]]],[1528945319202,["Re@Re.local",[[-1,29436,"的"]],[29437,29437],[29436,29436]]],[1528945379592,[null,[[-1,25913,""],[1,25913,"）。"],[-1,26818,"个\n\n"],[1,26821,"移动。"],[-1,26935,"\n"],[-1,26943,"w"],[1,26996,"下一次"],[-1,27000,"监测与"],[1,27023,"总代价"],[-1,27025,"因此，"],[-1,27087,"显示"],[1,27089,"小。"],[1,27144,"可以"],[-1,27147,"w的"],[-1,27201,"w"],[1,27202,"\n"],[-1,27279,"\n"],[1,27280,"和"],[-1,28124,"Di"],[1,28126,"每个"],[1,28244,"时间。"],[-1,28250,"大"],[-1,28294,"。，"],[1,28448,"每个"],[-1,28461,"的对"],[1,28463,"d"],[-1,28474,"吊"],[1,28503,"$"],[1,28519,"$"],[-1,28530,"##"],[-1,28542,"\n\n"],[1,28544,"##"],[1,28864,"的"],[-1,28866,"就"],[1,28913,"广播主机"],[-1,28925,"，必须要"],[1,29021,"用"],[-1,29040,"会"],[1,29121,"暴力"],[-1,29125,"让"],[-1,29130,"每"],[1,29221,"设置"],[-1,29224,"存活"],[1,29281,"都"],[-1,29282,"收"],[-1,29436,"构造"]],[25913,25913],[29436,29436]]],[1528945379592,[null,[[1,25913,""],[-1,25913,"）。"],[1,26820,"个\n\n"],[-1,26820,"移动。"],[1,26937,"\n"],[1,26944,"w"],[-1,26996,"下一次"],[1,27003,"监测与"],[-1,27023,"总代价"],[1,27028,"因此，"],[1,27087,"显示"],[-1,27087,"小。"],[-1,27144,"可以"],[1,27149,"w的"],[1,27201,"w"],[-1,27201,"\n"],[1,27279,"\n"],[-1,27279,"和"],[1,28124,"Di"],[-1,28124,"每个"],[-1,28244,"时间。"],[1,28253,"大"],[1,28296,"。，"],[-1,28448,"每个"],[1,28463,"的对"],[-1,28463,"d"],[1,28475,"吊"],[-1,28503,"$"],[-1,28520,"$"],[1,28532,"##"],[1,28542,"\n\n"],[-1,28542,"##"],[-1,28864,"的"],[1,28867,"就"],[-1,28913,"广播主机"],[1,28929,"，必须要"],[-1,29021,"用"],[1,29041,"会"],[-1,29121,"暴力"],[1,29127,"让"],[1,29131,"每"],[-1,29221,"设置"],[1,29226,"存活"],[-1,29281,"都"],[1,29283,"收"],[1,29436,"构造"]],[29436,29436],[25913,25913]]],[1528945322273,["Re@Re.local",[[-1,29429,"，这样一来T中"]],[29436,29436],[29429,29429]]],[1528945334076,["Re@Re.local",[[1,29429,"。这样可以保证，T中所有边的总权重是最低的。"]],[29429,29429],[29451,29451]]],[1528945334359,["Re@Re.local",[[1,29454,"\n"]],[29451,29451],[29452,29452]]],[1528945334592,["Re@Re.local",[[1,29455,"\n"]],[29452,29452],[29453,29453]]],[1528945365364,["Re@Re.local",[[1,29453,"图10是广播的一个简化示意图，并且突出"]],[29453,29453],[29472,29472]]],[1528945366499,["Re@Re.local",[[-1,29469,"且突出"]],[29472,29472],[29469,29469]]],[1528945377810,["Re@Re.local",[[1,29469,"突出显示了图中的最小"]],[29469,29469],[29479,29479]]],[1528945439605,[null,[[-1,25913,""],[1,25913,"）。"],[-1,26818,"个\n\n"],[1,26821,"移动。"],[-1,26935,"\n"],[-1,26943,"w"],[1,26996,"下一次"],[-1,27000,"监测与"],[1,27023,"总代价"],[-1,27025,"因此，"],[-1,27087,"显示"],[1,27089,"小。"],[1,27144,"可以"],[-1,27147,"w的"],[-1,27201,"w"],[1,27202,"\n"],[-1,27279,"\n"],[1,27280,"和"],[-1,28124,"Di"],[1,28126,"每个"],[1,28244,"时间。"],[-1,28250,"大"],[-1,28294,"。，"],[1,28448,"每个"],[-1,28461,"的对"],[1,28463,"d"],[-1,28474,"吊"],[1,28503,"$"],[1,28519,"$"],[-1,28530,"##"],[-1,28542,"\n\n"],[1,28544,"##"],[1,28864,"的"],[-1,28866,"就"],[1,28913,"广播主机"],[-1,28925,"，必须要"],[1,29021,"用"],[-1,29040,"会"],[1,29121,"暴力"],[-1,29125,"让"],[-1,29130,"每"],[1,29221,"设置"],[-1,29224,"存活"],[1,29281,"都"],[-1,29282,"收"],[-1,29451,"构造"],[1,29453,"\n\n"],[-1,29479,"\n\n"]],[25913,25913],[29479,29479]]],[1528945439605,[null,[[1,25913,""],[-1,25913,"）。"],[1,26820,"个\n\n"],[-1,26820,"移动。"],[1,26937,"\n"],[1,26944,"w"],[-1,26996,"下一次"],[1,27003,"监测与"],[-1,27023,"总代价"],[1,27028,"因此，"],[1,27087,"显示"],[-1,27087,"小。"],[-1,27144,"可以"],[1,27149,"w的"],[1,27201,"w"],[-1,27201,"\n"],[1,27279,"\n"],[-1,27279,"和"],[1,28124,"Di"],[-1,28124,"每个"],[-1,28244,"时间。"],[1,28253,"大"],[1,28296,"。，"],[-1,28448,"每个"],[1,28463,"的对"],[-1,28463,"d"],[1,28475,"吊"],[-1,28503,"$"],[-1,28520,"$"],[1,28532,"##"],[1,28542,"\n\n"],[-1,28542,"##"],[-1,28864,"的"],[1,28867,"就"],[-1,28913,"广播主机"],[1,28929,"，必须要"],[-1,29021,"用"],[1,29041,"会"],[-1,29121,"暴力"],[1,29127,"让"],[1,29131,"每"],[-1,29221,"设置"],[1,29226,"存活"],[-1,29281,"都"],[1,29283,"收"],[1,29451,"构造"],[-1,29451,"\n\n"],[1,29479,"\n\n"]],[29479,29479],[25913,25913]]],[1528945405845,["Re@Re.local",[[1,29479,"生成树的边。现在来求解光"]],[29479,29479],[29491,29491]]],[1528945406154,["Re@Re.local",[[-1,29490,"光"]],[29491,29491],[29490,29490]]],[1528945411118,["Re@Re.local",[[1,29490,"广播问题，广播树"]],[29490,29490],[29498,29498]]],[1528945411251,["Re@Re.local",[[-1,29497,"树"]],[29498,29498],[29497,29497]]],[1528945422864,["Re@Re.local",[[1,29497,"主机只用想网络上"]],[29497,29497],[29505,29505]]],[1528945423323,["Re@Re.local",[[-1,29504,"上"]],[29505,29505],[29504,29504]]],[1528945424127,["Re@Re.local",[[1,29504,"中"]],[29504,29504],[29505,29505]]],[1528945425069,["Re@Re.local",[[-1,29500,"用想网络中"]],[29505,29505],[29500,29500]]],[1528945433000,["Re@Re.local",[[1,29500,"用向网络中发送一条i 小，"]],[29500,29500],[29513,29513]]],[1528945433941,["Re@Re.local",[[-1,29509,"i 小，"]],[29513,29513],[29509,29509]]],[1528945436586,["Re@Re.local",[[1,29509,"消息，每条"]],[29509,29509],[29514,29514]]],[1528945438270,["Re@Re.local",[[-1,29512,"每条"]],[29514,29514],[29512,29512]]],[1528945439056,["Re@Re.local",[[1,29512,"个"]],[29512,29512],[29513,29513]]],[1528945439139,["Re@Re.local",[[-1,29512,"个"]],[29513,29513],[29512,29512]]],[1528945499625,[null,[[-1,25913,""],[1,25913,"）。"],[-1,26818,"个\n\n"],[1,26821,"移动。"],[-1,26935,"\n"],[-1,26943,"w"],[1,26996,"下一次"],[-1,27000,"监测与"],[1,27023,"总代价"],[-1,27025,"因此，"],[-1,27087,"显示"],[1,27089,"小。"],[1,27144,"可以"],[-1,27147,"w的"],[-1,27201,"w"],[1,27202,"\n"],[-1,27279,"\n"],[1,27280,"和"],[-1,28124,"Di"],[1,28126,"每个"],[1,28244,"时间。"],[-1,28250,"大"],[-1,28294,"。，"],[1,28448,"每个"],[-1,28461,"的对"],[1,28463,"d"],[-1,28474,"吊"],[1,28503,"$"],[1,28519,"$"],[-1,28530,"##"],[-1,28542,"\n\n"],[1,28544,"##"],[1,28864,"的"],[-1,28866,"就"],[1,28913,"广播主机"],[-1,28925,"，必须要"],[1,29021,"用"],[-1,29040,"会"],[1,29121,"暴力"],[-1,29125,"让"],[-1,29130,"每"],[1,29221,"设置"],[-1,29224,"存活"],[1,29281,"都"],[-1,29282,"收"],[-1,29451,"构造"],[1,29453,"\n\n"],[-1,29512,"\n\n"]],[25913,25913],[29512,29512]]],[1528945499625,[null,[[1,25913,""],[-1,25913,"）。"],[1,26820,"个\n\n"],[-1,26820,"移动。"],[1,26937,"\n"],[1,26944,"w"],[-1,26996,"下一次"],[1,27003,"监测与"],[-1,27023,"总代价"],[1,27028,"因此，"],[1,27087,"显示"],[-1,27087,"小。"],[-1,27144,"可以"],[1,27149,"w的"],[1,27201,"w"],[-1,27201,"\n"],[1,27279,"\n"],[-1,27279,"和"],[1,28124,"Di"],[-1,28124,"每个"],[-1,28244,"时间。"],[1,28253,"大"],[1,28296,"。，"],[-1,28448,"每个"],[1,28463,"的对"],[-1,28463,"d"],[1,28475,"吊"],[-1,28503,"$"],[-1,28520,"$"],[1,28532,"##"],[1,28542,"\n\n"],[-1,28542,"##"],[-1,28864,"的"],[1,28867,"就"],[-1,28913,"广播主机"],[1,28929,"，必须要"],[-1,29021,"用"],[1,29041,"会"],[-1,29121,"暴力"],[1,29127,"让"],[1,29131,"每"],[-1,29221,"设置"],[1,29226,"存活"],[-1,29281,"都"],[1,29283,"收"],[1,29451,"构造"],[-1,29451,"\n\n"],[1,29512,"\n\n"]],[29512,29512],[25913,25913]]],[1528945441014,["Re@Re.local",[[-1,29512," "]],[29513,29513],[29512,29512]]],[1528945464456,["Re@Re.local",[[1,29512,"每个路由器将该信息传输到其邻接顶点，并且要求该领结"]],[29512,29512],[29537,29537]]],[1528945465207,["Re@Re.local",[[-1,29535,"领结"]],[29537,29537],[29535,29535]]],[1528945472994,["Re@Re.local",[[1,29535,"邻接顶点位于生成树上，"]],[29535,29535],[29546,29546]]],[1528945484757,["Re@Re.local",[[-1,29525,"邻接顶点，并且要求该"]],[29534,29534],[29525,29525]]],[1528945486996,["Re@Re.local",[[-1,29525,"邻接顶点位于生成树上，\n"]],[29526,29537],[29525,29525]]],[1528945489366,["Re@Re.local",[[1,29525,"位于该"]],[29525,29525],[29528,29528]]],[1528945489593,["Re@Re.local",[[-1,29527,"该"]],[29528,29528],[29527,29527]]],[1528945491384,["Re@Re.local",[[1,29527,"邻接"]],[29527,29527],[29529,29529]]],[1528945491742,["Re@Re.local",[[-1,29527,"邻接"]],[29529,29529],[29527,29527]]],[1528945492799,["Re@Re.local",[[1,29527,"生成"]],[29527,29527],[29529,29529]]],[1528945493139,["Re@Re.local",[[-1,29527,"生成"]],[29529,29529],[29527,29527]]],[1528945495347,["Re@Re.local",[[1,29527,"生成树的"]],[29527,29527],[29531,29531]]],[1528945495631,["Re@Re.local",[[-1,29530,"的"]],[29531,29531],[29530,29530]]],[1528945498404,["Re@Re.local",[[1,29530,"上的邻接"]],[29530,29530],[29534,29534]]],[1528945559618,[null,[[-1,25913,""],[1,25913,"）。"],[-1,26818,"个\n\n"],[1,26821,"移动。"],[-1,26935,"\n"],[-1,26943,"w"],[1,26996,"下一次"],[-1,27000,"监测与"],[1,27023,"总代价"],[-1,27025,"因此，"],[-1,27087,"显示"],[1,27089,"小。"],[1,27144,"可以"],[-1,27147,"w的"],[-1,27201,"w"],[1,27202,"\n"],[-1,27279,"\n"],[1,27280,"和"],[-1,28124,"Di"],[1,28126,"每个"],[1,28244,"时间。"],[-1,28250,"大"],[-1,28294,"。，"],[1,28448,"每个"],[-1,28461,"的对"],[1,28463,"d"],[-1,28474,"吊"],[1,28503,"$"],[1,28519,"$"],[-1,28530,"##"],[-1,28542,"\n\n"],[1,28544,"##"],[1,28864,"的"],[-1,28866,"就"],[1,28913,"广播主机"],[-1,28925,"，必须要"],[1,29021,"用"],[-1,29040,"会"],[1,29121,"暴力"],[-1,29125,"让"],[-1,29130,"每"],[1,29221,"设置"],[-1,29224,"存活"],[1,29281,"都"],[-1,29283,"收"],[-1,29451,"构造"],[1,29453,"\n\n"],[-1,29534,"\n"]],[25913,25913],[29534,29534]]],[1528945559618,[null,[[1,25913,""],[-1,25913,"）。"],[1,26820,"个\n\n"],[-1,26820,"移动。"],[1,26937,"\n"],[1,26944,"w"],[-1,26996,"下一次"],[1,27003,"监测与"],[-1,27023,"总代价"],[1,27028,"因此，"],[1,27087,"显示"],[-1,27087,"小。"],[-1,27144,"可以"],[1,27149,"w的"],[1,27201,"w"],[-1,27201,"\n"],[1,27279,"\n"],[-1,27279,"和"],[1,28124,"Di"],[-1,28124,"每个"],[-1,28244,"时间。"],[1,28253,"大"],[1,28296,"。，"],[-1,28448,"每个"],[1,28463,"的对"],[-1,28463,"d"],[1,28475,"吊"],[-1,28503,"$"],[-1,28520,"$"],[1,28532,"##"],[1,28542,"\n\n"],[-1,28542,"##"],[-1,28864,"的"],[1,28867,"就"],[-1,28913,"广播主机"],[1,28929,"，必须要"],[-1,29021,"用"],[1,29041,"会"],[-1,29121,"暴力"],[1,29127,"让"],[1,29131,"每"],[-1,29221,"设置"],[1,29226,"存活"],[-1,29281,"都"],[1,29284,"收"],[1,29451,"构造"],[-1,29451,"\n\n"],[1,29534,"\n"]],[29534,29534],[25913,25913]]],[1528945501843,["Re@Re.local",[[1,29537,"并且满足该"]],[29537,29537],[29542,29542]]],[1528945502384,["Re@Re.local",[[-1,29541,"该"]],[29542,29542],[29541,29541]]],[1528945504747,["Re@Re.local",[[1,29541,"该顶点"]],[29541,29541],[29544,29544]]],[1528945508188,["Re@Re.local",[[-1,29539,"满足该顶点"]],[29544,29544],[29539,29539]]],[1528945516120,["Re@Re.local",[[1,29539,"排除刚刚发送了消息的顶"]],[29539,29539],[29550,29550]]],[1528945516394,["Re@Re.local",[[-1,29549,"顶"]],[29550,29550],[29549,29549]]],[1528945520983,["Re@Re.local",[[1,29549,"邻接顶点。"]],[29549,29549],[29554,29554]]],[1528945528537,["Re@Re.local",[[-1,29541,"刚刚"]],[29543,29543],[29541,29541]]],[1528945530303,["Re@Re.local",[[1,29541,"已"]],[29541,29541],[29542,29542]]],[1528945531484,["Re@Re.local",[[-1,29544,"了"]],[29545,29545],[29544,29544]]],[1528945532388,["Re@Re.local",[[1,29544,"过"]],[29544,29544],[29545,29545]]],[1528945542853,["Re@Re.local",[[1,29553,"在本例中，A将消息传送该给"]],[29553,29553],[29566,29566]]],[1528945544251,["Re@Re.local",[[-1,29564,"该给"]],[29566,29566],[29564,29564]]],[1528945549945,["Re@Re.local",[[1,29564,"给B，B将消息传送"]],[29564,29564],[29573,29573]]],[1528945556150,["Re@Re.local",[[-1,29553,"在本例中，A将消息传送给B，B将消息传送"]],[29573,29573],[29553,29553]]],[1528945558716,["Re@Re.local",[[1,29553,"没有"]],[29553,29553],[29555,29555]]],[1528945559216,["Re@Re.local",[[-1,29554,"有"]],[29555,29555],[29554,29554]]],[1528945620313,[null,[[-1,25913,""],[1,25913,"）。"],[-1,26818,"个\n\n"],[1,26821,"移动。"],[-1,26935,"\n"],[-1,26943,"w"],[1,26996,"下一次"],[-1,27000,"监测与"],[1,27023,"总代价"],[-1,27025,"因此，"],[-1,27087,"显示"],[1,27089,"小。"],[1,27144,"可以"],[-1,27147,"w的"],[-1,27201,"w"],[1,27202,"\n"],[-1,27279,"\n"],[1,27280,"和"],[-1,28124,"Di"],[1,28126,"每个"],[1,28244,"时间。"],[-1,28250,"大"],[-1,28295,"，。"],[1,28448,"每个"],[-1,28461,"的对"],[1,28463,"d"],[-1,28474,"吊"],[1,28503,"$"],[1,28519,"$"],[-1,28530,"##"],[-1,28542,"\n\n"],[1,28544,"##"],[1,28864,"的"],[-1,28866,"就"],[1,28913,"广播主机"],[-1,28925,"，必须要"],[1,29021,"用"],[-1,29040,"会"],[1,29121,"暴力"],[-1,29125,"让"],[-1,29130,"每"],[1,29221,"设置"],[-1,29224,"存活"],[1,29281,"都"],[-1,29282,"收"],[-1,29451,"构造"],[1,29453,"\n\n"],[-1,29534,"\n\n\n"],[1,29537,"顶点，"],[1,29554,"\n\n"]],[25913,25913],[29556,29556]]],[1528945620313,[null,[[1,25913,""],[-1,25913,"）。"],[1,26820,"个\n\n"],[-1,26820,"移动。"],[1,26937,"\n"],[1,26944,"w"],[-1,26996,"下一次"],[1,27003,"监测与"],[-1,27023,"总代价"],[1,27028,"因此，"],[1,27087,"显示"],[-1,27087,"小。"],[-1,27144,"可以"],[1,27149,"w的"],[1,27201,"w"],[-1,27201,"\n"],[1,27279,"\n"],[-1,27279,"和"],[1,28124,"Di"],[-1,28124,"每个"],[-1,28244,"时间。"],[1,28253,"大"],[1,28297,"，。"],[-1,28448,"每个"],[1,28463,"的对"],[-1,28463,"d"],[1,28475,"吊"],[-1,28503,"$"],[-1,28520,"$"],[1,28532,"##"],[1,28542,"\n\n"],[-1,28542,"##"],[-1,28864,"的"],[1,28867,"就"],[-1,28913,"广播主机"],[1,28929,"，必须要"],[-1,29021,"用"],[1,29041,"会"],[-1,29121,"暴力"],[1,29127,"让"],[1,29131,"每"],[-1,29221,"设置"],[1,29226,"存活"],[-1,29281,"都"],[1,29283,"收"],[1,29451,"构造"],[-1,29451,"\n\n"],[1,29534,"\n\n\n"],[-1,29534,"顶点，"],[-1,29554,"\n\n"]],[29556,29556],[25913,25913]]],[1528945564230,["Re@Re.local",[[1,29553,"每个路由器最陡值"]],[29553,29553],[29561,29561]]],[1528945564729,["Re@Re.local",[[-1,29558,"最陡值"]],[29561,29561],[29558,29558]]],[1528945574489,["Re@Re.local",[[1,29558,"最多只发送1条消息，并且所有的"]],[29558,29558],[29573,29573]]],[1528945577567,["Re@Re.local",[[-1,29570,"所有的"]],[29573,29573],[29570,29570]]],[1528945584979,["Re@Re.local",[[1,29570,"相关的所有收听者都会收到一份消息。"]],[29570,29570],[29587,29587]]],[1528945585217,["Re@Re.local",[[1,29589,"\n"]],[29587,29587],[29588,29588]]],[1528945585393,["Re@Re.local",[[1,29590,"\n"]],[29588,29588],[29589,29589]]],[1528945588211,["Re@Re.local",[[1,29589,"![../_images/mst1.png](http://interactivepython.org/courselib/static/pythonds/_images/mst1.png)"]],[29589,29589],[29684,29684]]],[1528945588913,["Re@Re.local",[[1,29686,"\n"]],[29684,29684],[29685,29685]]],[1528945589113,["Re@Re.local",[[1,29687,"\n"]],[29685,29685],[29686,29686]]],[1528945598940,["Re@Re.local",[[1,29686,"用来解决该算法"]],[29686,29686],[29693,29693]]],[1528945600889,["Re@Re.local",[[-1,29686,"用来解决该算法"]],[29693,29693],[29686,29686]]],[1528945617348,["Re@Re.local",[[1,29686,"使用Prim算法来解决该问题。Prim算法属于贪心"]],[29686,29686],[29711,29711]]],[1528945680293,[null,[[-1,25913,""],[1,25913,"）。"],[-1,26818,"个\n\n"],[1,26821,"移动。"],[-1,26935,"\n"],[-1,26943,"w"],[1,26996,"下一次"],[-1,27000,"监测与"],[1,27023,"总代价"],[-1,27025,"因此，"],[-1,27087,"显示"],[1,27089,"小。"],[1,27144,"可以"],[-1,27147,"w的"],[-1,27201,"w"],[1,27202,"\n"],[-1,27279,"\n"],[1,27280,"和"],[-1,28124,"Di"],[1,28126,"每个"],[1,28244,"时间。"],[-1,28250,"大"],[-1,28295,"，。"],[1,28448,"每个"],[-1,28461,"的对"],[1,28463,"d"],[-1,28474,"吊"],[1,28503,"$"],[1,28519,"$"],[-1,28530,"##"],[-1,28542,"\n\n"],[1,28544,"##"],[1,28864,"的"],[-1,28866,"就"],[1,28913,"广播主机"],[-1,28925,"，必须要"],[1,29021,"用"],[-1,29040,"会"],[1,29121,"暴力"],[-1,29125,"让"],[-1,29130,"每"],[1,29221,"设置"],[-1,29224,"存活"],[1,29281,"都"],[-1,29282,"收"],[-1,29451,"构造"],[1,29453,"\n\n"],[-1,29534,"\n\n\n"],[1,29537,"顶点，"],[-1,29587,"没"],[1,29588,"\n"],[-1,29711,""],[1,29711,"\n"]],[25913,25913],[29712,29712]]],[1528945680293,[null,[[1,25913,""],[-1,25913,"）。"],[1,26820,"个\n\n"],[-1,26820,"移动。"],[1,26937,"\n"],[1,26944,"w"],[-1,26996,"下一次"],[1,27003,"监测与"],[-1,27023,"总代价"],[1,27028,"因此，"],[1,27087,"显示"],[-1,27087,"小。"],[-1,27144,"可以"],[1,27149,"w的"],[1,27201,"w"],[-1,27201,"\n"],[1,27279,"\n"],[-1,27279,"和"],[1,28124,"Di"],[-1,28124,"每个"],[-1,28244,"时间。"],[1,28253,"大"],[1,28297,"，。"],[-1,28448,"每个"],[1,28463,"的对"],[-1,28463,"d"],[1,28475,"吊"],[-1,28503,"$"],[-1,28520,"$"],[1,28532,"##"],[1,28542,"\n\n"],[-1,28542,"##"],[-1,28864,"的"],[1,28867,"就"],[-1,28913,"广播主机"],[1,28929,"，必须要"],[-1,29021,"用"],[1,29041,"会"],[-1,29121,"暴力"],[1,29127,"让"],[1,29131,"每"],[-1,29221,"设置"],[1,29226,"存活"],[-1,29281,"都"],[1,29283,"收"],[1,29451,"构造"],[-1,29451,"\n\n"],[1,29534,"\n\n\n"],[-1,29534,"顶点，"],[1,29587,"没"],[-1,29587,"\n"],[1,29711,""],[-1,29711,"\n"]],[29712,29712],[25913,25913]]],[1528945623331,["Re@Re.local",[[1,29711,"算法的"]],[29711,29711],[29714,29714]]],[1528945623876,["Re@Re.local",[[-1,29713,"的"]],[29714,29714],[29713,29713]]],[1528945629852,["Re@Re.local",[[1,29713,"，因为每一步都选择了最"]],[29713,29713],[29724,29724]]],[1528945922530,[null,[[-1,25913,""],[1,25913,"）。"],[-1,26818,"个\n\n"],[1,26821,"移动。"],[-1,26935,"\n"],[-1,26943,"w"],[1,26996,"下一次"],[-1,27000,"监测与"],[1,27023,"总代价"],[-1,27025,"因此，"],[-1,27087,"显示"],[1,27089,"小。"],[1,27144,"可以"],[-1,27147,"w的"],[-1,27201,"w"],[1,27202,"\n"],[-1,27279,"\n"],[1,27280,"和"],[-1,28124,"Di"],[1,28126,"每个"],[1,28244,"时间。"],[-1,28250,"大"],[-1,28295,"，。"],[1,28448,"每个"],[-1,28461,"的对"],[1,28463,"d"],[-1,28474,"吊"],[1,28503,"$"],[1,28519,"$"],[-1,28530,"##"],[-1,28542,"\n\n"],[1,28544,"##"],[1,28864,"的"],[-1,28866,"就"],[1,28913,"广播主机"],[-1,28925,"，必须要"],[1,29021,"用"],[-1,29040,"会"],[1,29121,"暴力"],[-1,29125,"让"],[-1,29130,"每"],[1,29221,"设置"],[-1,29224,"存活"],[1,29281,"都"],[-1,29282,"收"],[-1,29451,"构造"],[1,29453,"\n\n"],[-1,29534,"\n\n\n"],[1,29537,"顶点，"],[-1,29587,"没"],[1,29588,"\n"],[-1,29724,""],[1,29724,"\n"]],[25913,25913],[29725,29725]]],[1528945922530,[null,[[1,25913,""],[-1,25913,"）。"],[1,26820,"个\n\n"],[-1,26820,"移动。"],[1,26937,"\n"],[1,26944,"w"],[-1,26996,"下一次"],[1,27003,"监测与"],[-1,27023,"总代价"],[1,27028,"因此，"],[1,27087,"显示"],[-1,27087,"小。"],[-1,27144,"可以"],[1,27149,"w的"],[1,27201,"w"],[-1,27201,"\n"],[1,27279,"\n"],[-1,27279,"和"],[1,28124,"Di"],[-1,28124,"每个"],[-1,28244,"时间。"],[1,28253,"大"],[1,28297,"，。"],[-1,28448,"每个"],[1,28463,"的对"],[-1,28463,"d"],[1,28475,"吊"],[-1,28503,"$"],[-1,28520,"$"],[1,28532,"##"],[1,28542,"\n\n"],[-1,28542,"##"],[-1,28864,"的"],[1,28867,"就"],[-1,28913,"广播主机"],[1,28929,"，必须要"],[-1,29021,"用"],[1,29041,"会"],[-1,29121,"暴力"],[1,29127,"让"],[1,29131,"每"],[-1,29221,"设置"],[1,29226,"存活"],[-1,29281,"都"],[1,29283,"收"],[1,29451,"构造"],[-1,29451,"\n\n"],[1,29534,"\n\n\n"],[-1,29534,"顶点，"],[1,29587,"没"],[-1,29587,"\n"],[1,29724,""],[-1,29724,"\n"]],[29725,29725],[25913,25913]]],[1528945889358,["Re@Re.local",[[-1,29723,"最"]],[29724,29724],[29723,29723]]],[1528945896163,["Re@Re.local",[[1,29723,"权重最低的小一步"]],[29723,29723],[29731,29731]]],[1528945897975,["Re@Re.local",[[-1,29728,"小一步"]],[29731,29731],[29728,29728]]],[1528945899487,["Re@Re.local",[[1,29728,"撸"]],[29728,29728],[29729,29729]]],[1528945899557,["Re@Re.local",[[-1,29728,"撸"]],[29729,29729],[29728,29728]]],[1528945911264,["Re@Re.local",[[1,29728,"下一步"]],[29728,29728],[29731,29731]]],[1528945982506,[null,[[-1,25913,""],[1,25913,"）。"],[-1,26818,"个\n\n"],[1,26821,"移动。"],[-1,26935,"\n"],[-1,26943,"w"],[1,26996,"下一次"],[-1,27000,"监测与"],[1,27023,"总代价"],[-1,27025,"因此，"],[-1,27087,"显示"],[1,27089,"小。"],[1,27144,"可以"],[-1,27147,"w的"],[-1,27201,"w"],[1,27202,"\n"],[-1,27279,"\n"],[1,27280,"和"],[-1,28124,"Di"],[1,28126,"每个"],[1,28244,"时间。"],[-1,28250,"大"],[-1,28295,"，。"],[1,28448,"每个"],[-1,28461,"的对"],[1,28463,"d"],[-1,28474,"吊"],[1,28503,"$"],[1,28519,"$"],[-1,28530,"##"],[-1,28542,"\n\n"],[1,28544,"##"],[1,28864,"的"],[-1,28866,"就"],[1,28913,"广播主机"],[-1,28925,"，必须要"],[1,29021,"用"],[-1,29040,"会"],[1,29121,"暴力"],[-1,29125,"让"],[-1,29130,"每"],[1,29221,"设置"],[-1,29224,"存活"],[1,29281,"都"],[-1,29282,"收"],[-1,29451,"构造"],[1,29453,"\n\n"],[-1,29534,"\n\n\n"],[1,29537,"顶点，"],[-1,29587,"没"],[1,29588,"\n"],[-1,29731,""],[1,29731,"\n"]],[25913,25913],[29732,29732]]],[1528945982506,[null,[[1,25913,""],[-1,25913,"）。"],[1,26820,"个\n\n"],[-1,26820,"移动。"],[1,26937,"\n"],[1,26944,"w"],[-1,26996,"下一次"],[1,27003,"监测与"],[-1,27023,"总代价"],[1,27028,"因此，"],[1,27087,"显示"],[-1,27087,"小。"],[-1,27144,"可以"],[1,27149,"w的"],[1,27201,"w"],[-1,27201,"\n"],[1,27279,"\n"],[-1,27279,"和"],[1,28124,"Di"],[-1,28124,"每个"],[-1,28244,"时间。"],[1,28253,"大"],[1,28297,"，。"],[-1,28448,"每个"],[1,28463,"的对"],[-1,28463,"d"],[1,28475,"吊"],[-1,28503,"$"],[-1,28520,"$"],[1,28532,"##"],[1,28542,"\n\n"],[-1,28542,"##"],[-1,28864,"的"],[1,28867,"就"],[-1,28913,"广播主机"],[1,28929,"，必须要"],[-1,29021,"用"],[1,29041,"会"],[-1,29121,"暴力"],[1,29127,"让"],[1,29131,"每"],[-1,29221,"设置"],[1,29226,"存活"],[-1,29281,"都"],[1,29283,"收"],[1,29451,"构造"],[-1,29451,"\n\n"],[1,29534,"\n\n\n"],[-1,29534,"顶点，"],[1,29587,"没"],[-1,29587,"\n"],[1,29731,""],[-1,29731,"\n"]],[29732,29732],[25913,25913]]],[1528945923259,["Re@Re.local",[[1,29731,"。"]],[29731,29731],[29732,29732]]],[1528945944974,["Re@Re.local",[[-1,29723,"权重最低的下一步。"]],[29732,29732],[29723,29723]]],[1528945954765,["Re@Re.local",[[1,29723,"局部最有"]],[29723,29723],[29727,29727]]],[1528945955227,["Re@Re.local",[[-1,29725,"最有"]],[29727,29727],[29725,29725]]],[1528945957955,["Re@Re.local",[[1,29725,"最优的"]],[29725,29725],[29728,29728]]],[1528945958565,["Re@Re.local",[[-1,29727,"的"]],[29728,29728],[29727,29727]]],[1528945972411,["Re@Re.local",[[1,29727,"，在本例中即是选用权重好最低"]],[29727,29727],[29741,29741]]],[1528945973148,["Re@Re.local",[[-1,29738,"好最低"]],[29741,29741],[29738,29738]]],[1528945974377,["Re@Re.local",[[1,29738,"子弟的"]],[29738,29738],[29741,29741]]],[1528945975002,["Re@Re.local",[[-1,29738,"子弟的"]],[29741,29741],[29738,29738]]],[1528945981824,["Re@Re.local",[[1,29738,"最低的边。最后一步"]],[29738,29738],[29747,29747]]],[1528946042509,[null,[[-1,25913,""],[1,25913,"）。"],[-1,26818,"个\n\n"],[1,26821,"移动。"],[-1,26935,"\n"],[-1,26943,"w"],[1,26996,"下一次"],[-1,27000,"监测与"],[1,27023,"总代价"],[-1,27025,"因此，"],[-1,27087,"显示"],[1,27089,"小。"],[1,27144,"可以"],[-1,27147,"w的"],[-1,27201,"w"],[1,27202,"\n"],[-1,27279,"\n"],[1,27280,"和"],[-1,28124,"Di"],[1,28126,"每个"],[1,28244,"时间。"],[-1,28250,"大"],[-1,28295,"，。"],[1,28448,"每个"],[-1,28461,"的对"],[1,28463,"d"],[-1,28474,"吊"],[1,28503,"$"],[1,28519,"$"],[-1,28530,"##"],[-1,28542,"\n\n"],[1,28544,"##"],[1,28864,"的"],[-1,28866,"就"],[1,28913,"广播主机"],[-1,28925,"，必须要"],[1,29021,"用"],[-1,29040,"会"],[1,29121,"暴力"],[-1,29125,"让"],[-1,29130,"每"],[1,29221,"设置"],[-1,29224,"存活"],[1,29281,"都"],[-1,29282,"收"],[-1,29451,"构造"],[1,29453,"\n\n"],[-1,29534,"\n\n\n"],[1,29537,"顶点，"],[-1,29587,"没"],[1,29588,"\n"],[-1,29747,""],[1,29747,"\n"]],[25913,25913],[29748,29748]]],[1528946042509,[null,[[1,25913,""],[-1,25913,"）。"],[1,26820,"个\n\n"],[-1,26820,"移动。"],[1,26937,"\n"],[1,26944,"w"],[-1,26996,"下一次"],[1,27003,"监测与"],[-1,27023,"总代价"],[1,27028,"因此，"],[1,27087,"显示"],[-1,27087,"小。"],[-1,27144,"可以"],[1,27149,"w的"],[1,27201,"w"],[-1,27201,"\n"],[1,27279,"\n"],[-1,27279,"和"],[1,28124,"Di"],[-1,28124,"每个"],[-1,28244,"时间。"],[1,28253,"大"],[1,28297,"，。"],[-1,28448,"每个"],[1,28463,"的对"],[-1,28463,"d"],[1,28475,"吊"],[-1,28503,"$"],[-1,28520,"$"],[1,28532,"##"],[1,28542,"\n\n"],[-1,28542,"##"],[-1,28864,"的"],[1,28867,"就"],[-1,28913,"广播主机"],[1,28929,"，必须要"],[-1,29021,"用"],[1,29041,"会"],[-1,29121,"暴力"],[1,29127,"让"],[1,29131,"每"],[-1,29221,"设置"],[1,29226,"存活"],[-1,29281,"都"],[1,29283,"收"],[1,29451,"构造"],[-1,29451,"\n\n"],[1,29534,"\n\n\n"],[-1,29534,"顶点，"],[1,29587,"没"],[-1,29587,"\n"],[1,29747,""],[-1,29747,"\n"]],[29748,29748],[25913,25913]]],[1528945988310,["Re@Re.local",[[1,29747,"是开发Prim算法。"]],[29747,29747],[29757,29757]]],[1528945988768,["Re@Re.local",[[1,29759,"\n"]],[29757,29757],[29758,29758]]],[1528945989019,["Re@Re.local",[[1,29760,"\n"]],[29758,29758],[29759,29759]]],[1528945992554,["Re@Re.local",[[1,29759,"构造"]],[29759,29759],[29761,29761]]],[1528945997348,["Re@Re.local",[[-1,29759,"构造"]],[29761,29761],[29759,29759]]],[1528946005142,["Re@Re.local",[[1,29759,"构建生成树的基本思想如下；"]],[29759,29759],[29772,29772]]],[1528946005520,["Re@Re.local",[[1,29774,"\n"]],[29772,29772],[29773,29773]]],[1528946005976,["Re@Re.local",[[-1,29774,"\n"]],[29773,29773],[29772,29772]]],[1528946006196,["Re@Re.local",[[-1,29771,"；"]],[29772,29772],[29771,29771]]],[1528946006865,["Re@Re.local",[[1,29771,"："]],[29771,29771],[29772,29772]]],[1528946007134,["Re@Re.local",[[1,29774,"\n"]],[29772,29772],[29773,29773]]],[1528946008453,["Re@Re.local",[[1,29773,"```"]],[29773,29773],[29776,29776]]],[1528946008649,["Re@Re.local",[[1,29778,"\n"]],[29776,29776],[29777,29777]]],[1528946013757,["Re@Re.local",[[1,29777,"While T is not yet a spanning tree\n   Find an edge that is safe to add to the tree\n   Add the new edge to T"]],[29777,29777],[29884,29884]]],[1528946014252,["Re@Re.local",[[1,29886,"\n"]],[29884,29884],[29885,29885]]],[1528946014989,["Re@Re.local",[[1,29885,"```"]],[29885,29885],[29888,29888]]],[1528946015227,["Re@Re.local",[[1,29890,"\n"]],[29888,29888],[29889,29889]]],[1528946033789,["Re@Re.local",[[1,29889,"难点在于"]],[29889,29889],[29893,29893]]],[1528946102600,[null,[[-1,25913,""],[1,25913,"）。"],[-1,26818,"个\n\n"],[1,26821,"移动。"],[-1,26935,"\n"],[-1,26943,"w"],[1,26996,"下一次"],[-1,27000,"监测与"],[1,27023,"总代价"],[-1,27025,"因此，"],[-1,27087,"显示"],[1,27089,"小。"],[1,27144,"可以"],[-1,27147,"w的"],[-1,27201,"w"],[1,27202,"\n"],[-1,27279,"\n"],[1,27280,"和"],[-1,28124,"Di"],[1,28126,"每个"],[1,28244,"时间。"],[-1,28250,"大"],[-1,28295,"，。"],[1,28448,"每个"],[-1,28461,"的对"],[1,28463,"d"],[-1,28474,"吊"],[1,28503,"$"],[1,28519,"$"],[-1,28530,"##"],[-1,28542,"\n\n"],[1,28544,"##"],[1,28864,"的"],[-1,28866,"就"],[1,28913,"广播主机"],[-1,28925,"，必须要"],[1,29021,"用"],[-1,29040,"会"],[1,29121,"暴力"],[-1,29125,"让"],[-1,29130,"每"],[1,29221,"设置"],[-1,29224,"存活"],[1,29281,"都"],[-1,29282,"收"],[-1,29451,"构造"],[1,29453,"\n\n"],[-1,29534,"\n\n\n"],[1,29537,"顶点，"],[-1,29587,"没"],[1,29588,"\n"]],[25913,25913],[29589,29589]]],[1528946102600,[null,[[1,25913,""],[-1,25913,"）。"],[1,26820,"个\n\n"],[-1,26820,"移动。"],[1,26937,"\n"],[1,26944,"w"],[-1,26996,"下一次"],[1,27003,"监测与"],[-1,27023,"总代价"],[1,27028,"因此，"],[1,27087,"显示"],[-1,27087,"小。"],[-1,27144,"可以"],[1,27149,"w的"],[1,27201,"w"],[-1,27201,"\n"],[1,27279,"\n"],[-1,27279,"和"],[1,28124,"Di"],[-1,28124,"每个"],[-1,28244,"时间。"],[1,28253,"大"],[1,28297,"，。"],[-1,28448,"每个"],[1,28463,"的对"],[-1,28463,"d"],[1,28475,"吊"],[-1,28503,"$"],[-1,28520,"$"],[1,28532,"##"],[1,28542,"\n\n"],[-1,28542,"##"],[-1,28864,"的"],[1,28867,"就"],[-1,28913,"广播主机"],[1,28929,"，必须要"],[-1,29021,"用"],[1,29041,"会"],[-1,29121,"暴力"],[1,29127,"让"],[1,29131,"每"],[-1,29221,"设置"],[1,29226,"存活"],[-1,29281,"都"],[1,29283,"收"],[1,29451,"构造"],[-1,29451,"\n\n"],[1,29534,"\n\n\n"],[-1,29534,"顶点，"],[1,29587,"没"],[-1,29587,"\n"]],[29589,29589],[25913,25913]]],[1528946043407,["Re@Re.local",[[1,29893,"“"]],[29893,29893],[29894,29894]]],[1528946045324,["Re@Re.local",[[-1,29893,"“"]],[29894,29894],[29893,29893]]],[1528946046048,["Re@Re.local",[[1,29893,"\"\""]],[29893,29893],[29895,29895]]],[1528946048306,["Re@Re.local",[[1,29894,"如何"]],[29894,29894],[29896,29896]]],[1528946049042,["Re@Re.local",[[-1,29894,"如何"]],[29896,29896],[29894,29894]]],[1528946051344,["Re@Re.local",[[1,29893,"如何"]],[29893,29893],[29895,29895]]],[1528946067154,["Re@Re.local",[[1,29896,"找到安全的边（）"]],[29896,29896],[29904,29904]]],[1528946072270,["Re@Re.local",[[1,29903,"Find an edge that is safe"]],[29903,29903],[29928,29928]]],[1528946074063,["Re@Re.local",[[1,29930,"，"]],[29930,29930],[29931,29931]]],[1528946074492,["Re@Re.local",[[-1,29930,"，"]],[29931,29931],[29930,29930]]],[1528946076836,["Re@Re.local",[[1,29930,"。将"]],[29930,29930],[29932,29932]]],[1528946076972,["Re@Re.local",[[-1,29931,"将"]],[29932,29932],[29931,29931]]],[1528946081811,["Re@Re.local",[[1,29931,"将安全边"]],[29931,29931],[29935,29935]]],[1528946083353,["Re@Re.local",[[-1,29900,"的"]],[29901,29901],[29900,29900]]],[1528946101771,["Re@Re.local",[[1,29934,"定义为连接向"]],[29934,29934],[29940,29940]]],[1528946101870,["Re@Re.local",[[-1,29939,"向"]],[29940,29940],[29939,29939]]],[1528946162511,[null,[[-1,25913,""],[1,25913,"）。"],[-1,26818,"个\n\n"],[1,26821,"移动。"],[-1,26935,"\n"],[-1,26943,"w"],[1,26996,"下一次"],[-1,27000,"监测与"],[1,27023,"总代价"],[-1,27025,"因此，"],[-1,27087,"显示"],[1,27089,"小。"],[1,27144,"可以"],[-1,27147,"w的"],[-1,27201,"w"],[1,27202,"\n"],[-1,27279,"\n"],[1,27280,"和"],[-1,28124,"Di"],[1,28126,"每个"],[1,28244,"时间。"],[-1,28250,"大"],[-1,28295,"，。"],[1,28448,"每个"],[-1,28461,"的对"],[1,28463,"d"],[-1,28474,"吊"],[1,28503,"$"],[1,28519,"$"],[-1,28530,"##"],[-1,28542,"\n\n"],[1,28544,"##"],[1,28864,"的"],[-1,28866,"就"],[1,28913,"广播主机"],[-1,28925,"，必须要"],[1,29021,"用"],[-1,29040,"会"],[1,29121,"暴力"],[-1,29125,"让"],[-1,29130,"每"],[1,29221,"设置"],[-1,29224,"存活"],[1,29281,"都"],[-1,29282,"收"],[-1,29451,"构造"],[1,29453,"\n\n"],[-1,29534,"\n\n\n"],[1,29537,"顶点，"],[-1,29587,"没"],[1,29588,"\n"]],[25913,25913],[29589,29589]]],[1528946162511,[null,[[1,25913,""],[-1,25913,"）。"],[1,26820,"个\n\n"],[-1,26820,"移动。"],[1,26937,"\n"],[1,26944,"w"],[-1,26996,"下一次"],[1,27003,"监测与"],[-1,27023,"总代价"],[1,27028,"因此，"],[1,27087,"显示"],[-1,27087,"小。"],[-1,27144,"可以"],[1,27149,"w的"],[1,27201,"w"],[-1,27201,"\n"],[1,27279,"\n"],[-1,27279,"和"],[1,28124,"Di"],[-1,28124,"每个"],[-1,28244,"时间。"],[1,28253,"大"],[1,28297,"，。"],[-1,28448,"每个"],[1,28463,"的对"],[-1,28463,"d"],[1,28475,"吊"],[-1,28503,"$"],[-1,28520,"$"],[1,28532,"##"],[1,28542,"\n\n"],[-1,28542,"##"],[-1,28864,"的"],[1,28867,"就"],[-1,28913,"广播主机"],[1,28929,"，必须要"],[-1,29021,"用"],[1,29041,"会"],[-1,29121,"暴力"],[1,29127,"让"],[1,29131,"每"],[-1,29221,"设置"],[1,29226,"存活"],[-1,29281,"都"],[1,29283,"收"],[1,29451,"构造"],[-1,29451,"\n\n"],[1,29534,"\n\n\n"],[-1,29534,"顶点，"],[1,29587,"没"],[-1,29587,"\n"]],[29589,29589],[25913,25913]]],[1528946107074,["Re@Re.local",[[1,29939,"至某个不存在于"]],[29939,29939],[29946,29946]]],[1528946108150,["Re@Re.local",[[-1,29942,"不存在于"]],[29946,29946],[29942,29942]]],[1528946116120,["Re@Re.local",[[1,29942,"尚不存在于生成树"]],[29942,29942],[29950,29950]]],[1528946127043,["Re@Re.local",[[1,29937,"由生成树中的某个顶点"]],[29937,29937],[29947,29947]]],[1528946130620,["Re@Re.local",[[-1,29950,"某"]],[29951,29951],[29950,29950]]],[1528946132026,["Re@Re.local",[[1,29950,"另一个"]],[29950,29950],[29953,29953]]],[1528946134323,["Re@Re.local",[[-1,29953,"个"]],[29953,29953],[29952,29952]]],[1528946153215,["Re@Re.local",[[1,29961,"的顶点的边。这可以保证"]],[29961,29961],[29972,29972]]],[1528946344106,[null,[[-1,25913,""],[1,25913,"）。"],[-1,26818,"个\n\n"],[1,26821,"移动。"],[-1,26935,"\n"],[-1,26943,"w"],[1,26996,"下一次"],[-1,27000,"监测与"],[1,27023,"总代价"],[-1,27025,"因此，"],[-1,27087,"显示"],[1,27089,"小。"],[1,27144,"可以"],[-1,27147,"w的"],[-1,27201,"w"],[1,27202,"\n"],[-1,27279,"\n"],[1,27280,"和"],[-1,28124,"Di"],[1,28126,"每个"],[1,28244,"时间。"],[-1,28250,"大"],[-1,28295,"，。"],[1,28448,"每个"],[-1,28461,"的对"],[1,28463,"d"],[-1,28474,"吊"],[1,28503,"$"],[1,28519,"$"],[-1,28530,"##"],[-1,28542,"\n\n"],[1,28544,"##"],[1,28864,"的"],[-1,28866,"就"],[1,28913,"广播主机"],[-1,28925,"，必须要"],[1,29021,"用"],[-1,29040,"会"],[1,29121,"暴力"],[-1,29125,"让"],[-1,29130,"每"],[1,29221,"设置"],[-1,29224,"存活"],[1,29281,"都"],[-1,29282,"收"],[-1,29451,"构造"],[1,29453,"\n\n"],[-1,29534,"\n\n\n"],[1,29537,"顶点，"],[-1,29587,"没"],[1,29588,"\n"]],[25913,25913],[29589,29589]]],[1528946344106,[null,[[1,25913,""],[-1,25913,"）。"],[1,26820,"个\n\n"],[-1,26820,"移动。"],[1,26937,"\n"],[1,26944,"w"],[-1,26996,"下一次"],[1,27003,"监测与"],[-1,27023,"总代价"],[1,27028,"因此，"],[1,27087,"显示"],[-1,27087,"小。"],[-1,27144,"可以"],[1,27149,"w的"],[1,27201,"w"],[-1,27201,"\n"],[1,27279,"\n"],[-1,27279,"和"],[1,28124,"Di"],[-1,28124,"每个"],[-1,28244,"时间。"],[1,28253,"大"],[1,28297,"，。"],[-1,28448,"每个"],[1,28463,"的对"],[-1,28463,"d"],[1,28475,"吊"],[-1,28503,"$"],[-1,28520,"$"],[1,28532,"##"],[1,28542,"\n\n"],[-1,28542,"##"],[-1,28864,"的"],[1,28867,"就"],[-1,28913,"广播主机"],[1,28929,"，必须要"],[-1,29021,"用"],[1,29041,"会"],[-1,29121,"暴力"],[1,29127,"让"],[1,29131,"每"],[-1,29221,"设置"],[1,29226,"存活"],[-1,29281,"都"],[1,29283,"收"],[1,29451,"构造"],[-1,29451,"\n\n"],[1,29534,"\n\n\n"],[-1,29534,"顶点，"],[1,29587,"没"],[-1,29587,"\n"]],[29589,29589],[25913,25913]]],[1528946317687,["Re@Re.local",[[1,29972,"s"]],[29972,29972],[29973,29973]]],[1528946318164,["Re@Re.local",[[-1,29972,"s"]],[29973,29973],[29972,29972]]],[1528946338992,["Re@Re.local",[[1,29972,"生成树始终保持为树的形状，并且是五环"]],[29972,29972],[29990,29990]]],[1528946340160,["Re@Re.local",[[-1,29985,"并且是五环"]],[29990,29990],[29985,29985]]],[1528946343748,["Re@Re.local",[[1,29985,"因此是无欢"]],[29985,29985],[29990,29990]]],[1528946404065,[null,[[-1,25913,""],[1,25913,"）。"],[-1,26818,"个\n\n"],[1,26821,"移动。"],[-1,26935,"\n"],[-1,26943,"w"],[1,26996,"下一次"],[-1,27000,"监测与"],[1,27023,"总代价"],[-1,27025,"因此，"],[-1,27087,"显示"],[1,27089,"小。"],[1,27144,"可以"],[-1,27147,"w的"],[-1,27201,"w"],[1,27202,"\n"],[-1,27279,"\n"],[1,27280,"和"],[-1,28124,"Di"],[1,28126,"每个"],[1,28244,"时间。"],[-1,28250,"大"],[-1,28295,"，。"],[1,28448,"每个"],[-1,28461,"的对"],[1,28463,"d"],[-1,28474,"吊"],[1,28503,"$"],[1,28519,"$"],[-1,28530,"##"],[-1,28542,"\n\n"],[1,28544,"##"],[1,28864,"的"],[-1,28866,"就"],[1,28913,"广播主机"],[-1,28925,"，必须要"],[1,29021,"用"],[-1,29040,"会"],[1,29121,"暴力"],[-1,29125,"让"],[-1,29130,"每"],[1,29221,"设置"],[-1,29224,"存活"],[1,29281,"都"],[-1,29282,"收"],[-1,29451,"构造"],[1,29453,"\n\n"],[-1,29534,"\n\n\n"],[1,29537,"顶点，"],[-1,29587,"没"],[1,29588,"\n"]],[25913,25913],[29589,29589]]],[1528946404065,[null,[[1,25913,""],[-1,25913,"）。"],[1,26820,"个\n\n"],[-1,26820,"移动。"],[1,26937,"\n"],[1,26944,"w"],[-1,26996,"下一次"],[1,27003,"监测与"],[-1,27023,"总代价"],[1,27028,"因此，"],[1,27087,"显示"],[-1,27087,"小。"],[-1,27144,"可以"],[1,27149,"w的"],[1,27201,"w"],[-1,27201,"\n"],[1,27279,"\n"],[-1,27279,"和"],[1,28124,"Di"],[-1,28124,"每个"],[-1,28244,"时间。"],[1,28253,"大"],[1,28297,"，。"],[-1,28448,"每个"],[1,28463,"的对"],[-1,28463,"d"],[1,28475,"吊"],[-1,28503,"$"],[-1,28520,"$"],[1,28532,"##"],[1,28542,"\n\n"],[-1,28542,"##"],[-1,28864,"的"],[1,28867,"就"],[-1,28913,"广播主机"],[1,28929,"，必须要"],[-1,29021,"用"],[1,29041,"会"],[-1,29121,"暴力"],[1,29127,"让"],[1,29131,"每"],[-1,29221,"设置"],[1,29226,"存活"],[-1,29281,"都"],[1,29283,"收"],[1,29451,"构造"],[-1,29451,"\n\n"],[1,29534,"\n\n\n"],[-1,29534,"顶点，"],[1,29587,"没"],[-1,29587,"\n"]],[29589,29589],[25913,25913]]],[1528946344697,["Re@Re.local",[[1,29989,"圈"]],[29989,29989],[29990,29990]]],[1528946345013,["Re@Re.local",[[-1,29989,"圈"]],[29990,29990],[29989,29989]]],[1528946346642,["Re@Re.local",[[1,29989,"圈的。"]],[29989,29989],[29992,29992]]],[1528946347013,["Re@Re.local",[[1,29994,"\n"]],[29992,29992],[29993,29993]]],[1528946347217,["Re@Re.local",[[1,29995,"\n"]],[29993,29993],[29994,29994]]],[1528946352905,["Re@Re.local",[[1,29994,"是"]],[29994,29994],[29995,29995]]],[1528946353078,["Re@Re.local",[[-1,29994,"是"]],[29995,29995],[29994,29994]]],[1528946360738,["Re@Re.local",[[1,29994,"Prim算法的Python实现代码如图"]],[29994,29994],[30013,30013]]],[1528946361574,["Re@Re.local",[[-1,30009,"代码如图"]],[30013,30013],[30009,30009]]],[1528946371440,["Re@Re.local",[[1,30009,"如代码2所示。Prim算法于Dijs"]],[30009,30009],[30027,30027]]],[1528946372222,["Re@Re.local",[[-1,30026,"s"]],[30027,30027],[30026,30026]]],[1528946372950,["Re@Re.local",[[1,30026,"k"]],[30026,30026],[30027,30027]]],[1528946584157,[null,[[-1,25913,""],[1,25913,"）。"],[-1,26818,"个\n\n"],[1,26821,"移动。"],[-1,26935,"\n"],[-1,26943,"w"],[1,26996,"下一次"],[-1,27000,"监测与"],[1,27023,"总代价"],[-1,27025,"因此，"],[-1,27087,"显示"],[1,27089,"小。"],[1,27144,"可以"],[-1,27147,"w的"],[-1,27201,"w"],[1,27202,"\n"],[-1,27279,"\n"],[1,27280,"和"],[-1,28124,"Di"],[1,28126,"每个"],[1,28244,"时间。"],[-1,28250,"大"],[-1,28295,"，。"],[1,28448,"每个"],[-1,28461,"的对"],[1,28463,"d"],[-1,28474,"吊"],[1,28503,"$"],[1,28519,"$"],[-1,28530,"##"],[-1,28542,"\n\n"],[1,28544,"##"],[1,28864,"的"],[-1,28866,"就"],[1,28913,"广播主机"],[-1,28925,"，必须要"],[1,29021,"用"],[-1,29040,"会"],[1,29121,"暴力"],[-1,29125,"让"],[-1,29130,"每"],[1,29221,"设置"],[-1,29224,"存活"],[1,29281,"都"],[-1,29282,"收"],[-1,29451,"构造"],[1,29453,"\n\n"],[-1,29534,"\n\n\n"],[1,29537,"顶点，"],[-1,29587,"没"],[1,29588,"\n"],[-1,29992,"欢"],[1,29993,"\n"],[-1,30027,"\n"]],[25913,25913],[30027,30027]]],[1528946584157,[null,[[1,25913,""],[-1,25913,"）。"],[1,26820,"个\n\n"],[-1,26820,"移动。"],[1,26937,"\n"],[1,26944,"w"],[-1,26996,"下一次"],[1,27003,"监测与"],[-1,27023,"总代价"],[1,27028,"因此，"],[1,27087,"显示"],[-1,27087,"小。"],[-1,27144,"可以"],[1,27149,"w的"],[1,27201,"w"],[-1,27201,"\n"],[1,27279,"\n"],[-1,27279,"和"],[1,28124,"Di"],[-1,28124,"每个"],[-1,28244,"时间。"],[1,28253,"大"],[1,28297,"，。"],[-1,28448,"每个"],[1,28463,"的对"],[-1,28463,"d"],[1,28475,"吊"],[-1,28503,"$"],[-1,28520,"$"],[1,28532,"##"],[1,28542,"\n\n"],[-1,28542,"##"],[-1,28864,"的"],[1,28867,"就"],[-1,28913,"广播主机"],[1,28929,"，必须要"],[-1,29021,"用"],[1,29041,"会"],[-1,29121,"暴力"],[1,29127,"让"],[1,29131,"每"],[-1,29221,"设置"],[1,29226,"存活"],[-1,29281,"都"],[1,29283,"收"],[1,29451,"构造"],[-1,29451,"\n\n"],[1,29534,"\n\n\n"],[-1,29534,"顶点，"],[1,29587,"没"],[-1,29587,"\n"],[1,29992,"欢"],[-1,29992,"\n"],[1,30027,"\n"]],[30027,30027],[25913,25913]]],[1528946579412,["Re@Re.local",[[1,30027,"stra算法，"]],[30027,30027],[30034,30034]]],[1528946582735,["Re@Re.local",[[-1,30022,"于"]],[30023,30023],[30022,30022]]],[1528946583833,["Re@Re.local",[[1,30022,"与"]],[30022,30022],[30023,30023]]],[1528946644178,[null,[[-1,25913,""],[1,25913,"）。"],[-1,26818,"个\n\n"],[1,26821,"移动。"],[-1,26935,"\n"],[-1,26943,"w"],[1,26996,"下一次"],[-1,27000,"监测与"],[1,27023,"总代价"],[-1,27025,"因此，"],[-1,27087,"显示"],[1,27089,"小。"],[1,27144,"可以"],[-1,27147,"w的"],[-1,27201,"w"],[1,27202,"\n"],[-1,27279,"\n"],[1,27280,"和"],[-1,28124,"Di"],[1,28126,"每个"],[1,28244,"时间。"],[-1,28250,"大"],[-1,28295,"，。"],[1,28448,"每个"],[-1,28461,"的对"],[1,28463,"d"],[-1,28474,"吊"],[1,28503,"$"],[1,28519,"$"],[-1,28530,"##"],[-1,28542,"\n\n"],[1,28544,"##"],[1,28864,"的"],[-1,28866,"就"],[1,28913,"广播主机"],[-1,28925,"，必须要"],[1,29021,"用"],[-1,29040,"会"],[1,29121,"暴力"],[-1,29125,"让"],[-1,29130,"每"],[1,29221,"设置"],[-1,29224,"存活"],[1,29281,"都"],[-1,29282,"收"],[-1,29451,"构造"],[1,29453,"\n\n"],[-1,29534,"\n\n\n"],[1,29537,"顶点，"],[-1,29587,"没"],[1,29588,"\n"],[-1,29992,"欢"],[1,29993,"\n"],[-1,30034,"\n"]],[25913,25913],[30034,30034]]],[1528946644178,[null,[[1,25913,""],[-1,25913,"）。"],[1,26820,"个\n\n"],[-1,26820,"移动。"],[1,26937,"\n"],[1,26944,"w"],[-1,26996,"下一次"],[1,27003,"监测与"],[-1,27023,"总代价"],[1,27028,"因此，"],[1,27087,"显示"],[-1,27087,"小。"],[-1,27144,"可以"],[1,27149,"w的"],[1,27201,"w"],[-1,27201,"\n"],[1,27279,"\n"],[-1,27279,"和"],[1,28124,"Di"],[-1,28124,"每个"],[-1,28244,"时间。"],[1,28253,"大"],[1,28297,"，。"],[-1,28448,"每个"],[1,28463,"的对"],[-1,28463,"d"],[1,28475,"吊"],[-1,28503,"$"],[-1,28520,"$"],[1,28532,"##"],[1,28542,"\n\n"],[-1,28542,"##"],[-1,28864,"的"],[1,28867,"就"],[-1,28913,"广播主机"],[1,28929,"，必须要"],[-1,29021,"用"],[1,29041,"会"],[-1,29121,"暴力"],[1,29127,"让"],[1,29131,"每"],[-1,29221,"设置"],[1,29226,"存活"],[-1,29281,"都"],[1,29283,"收"],[1,29451,"构造"],[-1,29451,"\n\n"],[1,29534,"\n\n\n"],[-1,29534,"顶点，"],[1,29587,"没"],[-1,29587,"\n"],[1,29992,"欢"],[-1,29992,"\n"],[1,30034,"\n"]],[30034,30034],[25913,25913]]],[1528946586272,["Re@Re.local",[[-1,30033,"，"]],[30034,30034],[30033,30033]]],[1528946597510,["Re@Re.local",[[1,30033,"有相似之处，它们都使用了优先队列来"]],[30033,30033],[30050,30050]]],[1528946605672,["Re@Re.local",[[-1,30049,"来"]],[30050,30050],[30049,30049]]],[1528946607326,["Re@Re.local",[[1,30049,"来为"]],[30049,30049],[30051,30051]]],[1528946616973,["Re@Re.local",[[-1,30049,"来为"]],[30051,30051],[30049,30049]]],[1528946626457,["Re@Re.local",[[1,30049,"来选择下一个顶点以添加至图中。"]],[30049,30049],[30064,30064]]],[1528946626725,["Re@Re.local",[[1,30066,"\n"]],[30064,30064],[30065,30065]]],[1528946626902,["Re@Re.local",[[1,30067,"\n"]],[30065,30065],[30066,30066]]],[1528946628266,["Re@Re.local",[[1,30066,"*8代码"]],[30066,30066],[30070,30070]]],[1528946629513,["Re@Re.local",[[-1,30066,"*8代码"]],[30070,30070],[30066,30066]]],[1528946630653,["Re@Re.local",[[1,30066,"****"]],[30066,30066],[30070,30070]]],[1528946632623,["Re@Re.local",[[1,30068,"代码2"]],[30068,30068],[30071,30071]]],[1528946633684,["Re@Re.local",[[1,30075,"\n"]],[30073,30073],[30074,30074]]],[1528946641638,["Re@Re.local",[[1,30074,"from pythonds.graphs import PriorityQueue, Graph, Vertex\n\ndef prim(G,start):\n    pq = PriorityQueue()\n    for v in G:\n        v.setDistance(sys.maxsize)\n        v.setPred(None)\n    start.setDistance(0)\n    pq.buildHeap([(v.getDistance(),v) for v in G])\n    while not pq.isEmpty():\n        currentVert = pq.delMin()\n        for nextVert in currentVert.getConnections():\n          newCost = currentVert.getWeight(nextVert)\n          if nextVert in pq and newCost<nextVert.getDistance():\n              nextVert.setPred(currentVert)\n              nextVert.setDistance(newCost)\n              pq.decreaseKey(nextVert,newCost)"]],[30074,30074],[30693,30693]]],[1528946641829,["Re@Re.local",[[1,30695,"\n"]],[30693,30693],[30694,30694]]],[1528946642119,["Re@Re.local",[[1,30696,"\n"]],[30694,30694],[30695,30695]]],[1528946643355,["Re@Re.local",[[-1,30696,"\n"]],[30695,30695],[30694,30694]]],[1528946704154,[null,[[-1,25913,""],[1,25913,"）。"],[-1,26818,"个\n\n"],[1,26821,"移动。"],[-1,26935,"\n"],[-1,26943,"w"],[1,26996,"下一次"],[-1,27000,"监测与"],[1,27023,"总代价"],[-1,27025,"因此，"],[-1,27087,"显示"],[1,27089,"小。"],[1,27144,"可以"],[-1,27147,"w的"],[-1,27201,"w"],[1,27202,"\n"],[-1,27279,"\n"],[1,27280,"和"],[-1,28124,"Di"],[1,28126,"每个"],[1,28244,"时间。"],[-1,28250,"大"],[-1,28295,"，。"],[1,28448,"每个"],[-1,28461,"的对"],[1,28463,"d"],[-1,28474,"吊"],[1,28503,"$"],[1,28519,"$"],[-1,28530,"##"],[-1,28542,"\n\n"],[1,28544,"##"],[1,28864,"的"],[-1,28866,"就"],[1,28913,"广播主机"],[-1,28925,"，必须要"],[1,29021,"用"],[-1,29040,"会"],[1,29121,"暴力"],[-1,29125,"让"],[-1,29130,"每"],[1,29221,"设置"],[-1,29224,"存活"],[1,29281,"都"],[-1,29282,"收"],[-1,29451,"构造"],[1,29453,"\n\n"],[-1,29534,"\n\n\n"],[1,29537,"顶点，"],[-1,29587,"没"],[1,29588,"\n"],[-1,29992,"欢"],[1,29993,"\n"],[-1,30693,"\n"],[1,30694,""]],[25913,25913],[30694,30694]]],[1528946704154,[null,[[1,25913,""],[-1,25913,"）。"],[1,26820,"个\n\n"],[-1,26820,"移动。"],[1,26937,"\n"],[1,26944,"w"],[-1,26996,"下一次"],[1,27003,"监测与"],[-1,27023,"总代价"],[1,27028,"因此，"],[1,27087,"显示"],[-1,27087,"小。"],[-1,27144,"可以"],[1,27149,"w的"],[1,27201,"w"],[-1,27201,"\n"],[1,27279,"\n"],[-1,27279,"和"],[1,28124,"Di"],[-1,28124,"每个"],[-1,28244,"时间。"],[1,28253,"大"],[1,28297,"，。"],[-1,28448,"每个"],[1,28463,"的对"],[-1,28463,"d"],[1,28475,"吊"],[-1,28503,"$"],[-1,28520,"$"],[1,28532,"##"],[1,28542,"\n\n"],[-1,28542,"##"],[-1,28864,"的"],[1,28867,"就"],[-1,28913,"广播主机"],[1,28929,"，必须要"],[-1,29021,"用"],[1,29041,"会"],[-1,29121,"暴力"],[1,29127,"让"],[1,29131,"每"],[-1,29221,"设置"],[1,29226,"存活"],[-1,29281,"都"],[1,29283,"收"],[1,29451,"构造"],[-1,29451,"\n\n"],[1,29534,"\n\n\n"],[-1,29534,"顶点，"],[1,29587,"没"],[-1,29587,"\n"],[1,29992,"欢"],[-1,29992,"\n"],[1,30693,"\n"],[-1,30693,""]],[30694,30694],[25913,25913]]],[1528946645068,["Re@Re.local",[[1,30074,"\n"]],[30073,30073],[30074,30074]]],[1528946645785,["Re@Re.local",[[1,30074,"```"]],[30074,30074],[30077,30077]]],[1528946647427,["Re@Re.local",[[-1,30699,"\n"]],[30698,30698],[30697,30697]]],[1528946650263,["Re@Re.local",[[1,30697,"``````"]],[30697,30697],[30703,30703]]],[1528946652473,["Re@Re.local",[[-1,30700,"```"]],[30703,30703],[30700,30700]]],[1528946654269,["Re@Re.local",[[1,30697,"\n"]],[30697,30697],[30698,30698]]],[1528946655480,["Re@Re.local",[[1,30696,"\n"]],[30696,30696],[30697,30697]]],[1528946656284,["Re@Re.local",[[-1,30696,"\n"]],[30697,30697],[30696,30696]]],[1528946657987,["Re@Re.local",[[1,30703,"\n"]],[30701,30701],[30702,30702]]],[1528946671126,["Re@Re.local",[[1,30702,"xia"]],[30702,30702],[30705,30705]]],[1528946671719,["Re@Re.local",[[-1,30702,"xia"]],[30705,30705],[30702,30702]]],[1528946680305,["Re@Re.local",[[1,30702,"下图（图11到图17）演示了"]],[30702,30702],[30716,30716]]],[1528946681598,["Re@Re.local",[[-1,30713,"演示了"]],[30716,30716],[30713,30713]]],[1528946682563,["Re@Re.local",[[1,30713,"以"]],[30713,30713],[30714,30714]]],[1528946684916,["Re@Re.local",[[-1,30713,"以"]],[30714,30714],[30713,30713]]],[1528946687476,["Re@Re.local",[[1,30713,"眼"]],[30713,30713],[30714,30714]]],[1528946687537,["Re@Re.local",[[-1,30713,"眼"]],[30714,30714],[30713,30713]]],[1528946692576,["Re@Re.local",[[1,30713,"演示了该算法的运行。从"]],[30713,30713],[30724,30724]]],[1528946697604,["Re@Re.local",[[-1,30723,"从"]],[30724,30724],[30723,30723]]],[1528946764158,[null,[[-1,25913,""],[1,25913,"）。"],[-1,26818,"个\n\n"],[1,26821,"移动。"],[-1,26935,"\n"],[-1,26943,"w"],[1,26996,"下一次"],[-1,27000,"监测与"],[1,27023,"总代价"],[-1,27025,"因此，"],[-1,27087,"显示"],[1,27089,"小。"],[1,27144,"可以"],[-1,27147,"w的"],[-1,27201,"w"],[1,27202,"\n"],[-1,27279,"\n"],[1,27280,"和"],[-1,28124,"Di"],[1,28126,"每个"],[1,28244,"时间。"],[-1,28250,"大"],[-1,28295,"，。"],[1,28448,"每个"],[-1,28461,"的对"],[1,28463,"d"],[-1,28474,"吊"],[1,28503,"$"],[1,28519,"$"],[-1,28530,"##"],[-1,28542,"\n\n"],[1,28544,"##"],[1,28864,"的"],[-1,28866,"就"],[1,28913,"广播主机"],[-1,28925,"，必须要"],[1,29021,"用"],[-1,29040,"会"],[1,29121,"暴力"],[-1,29125,"让"],[-1,29130,"每"],[1,29221,"设置"],[-1,29224,"存活"],[1,29281,"都"],[-1,29282,"收"],[-1,29451,"构造"],[1,29453,"\n\n"],[-1,29534,"\n\n\n"],[1,29537,"顶点，"],[-1,29587,"没"],[1,29588,"\n"],[-1,29992,"欢"],[1,29993,"\n"],[-1,30723,"\n"],[1,30724,""]],[25913,25913],[30724,30724]]],[1528946764158,[null,[[1,25913,""],[-1,25913,"）。"],[1,26820,"个\n\n"],[-1,26820,"移动。"],[1,26937,"\n"],[1,26944,"w"],[-1,26996,"下一次"],[1,27003,"监测与"],[-1,27023,"总代价"],[1,27028,"因此，"],[1,27087,"显示"],[-1,27087,"小。"],[-1,27144,"可以"],[1,27149,"w的"],[1,27201,"w"],[-1,27201,"\n"],[1,27279,"\n"],[-1,27279,"和"],[1,28124,"Di"],[-1,28124,"每个"],[-1,28244,"时间。"],[1,28253,"大"],[1,28297,"，。"],[-1,28448,"每个"],[1,28463,"的对"],[-1,28463,"d"],[1,28475,"吊"],[-1,28503,"$"],[-1,28520,"$"],[1,28532,"##"],[1,28542,"\n\n"],[-1,28542,"##"],[-1,28864,"的"],[1,28867,"就"],[-1,28913,"广播主机"],[1,28929,"，必须要"],[-1,29021,"用"],[1,29041,"会"],[-1,29121,"暴力"],[1,29127,"让"],[1,29131,"每"],[-1,29221,"设置"],[1,29226,"存活"],[-1,29281,"都"],[1,29283,"收"],[1,29451,"构造"],[-1,29451,"\n\n"],[1,29534,"\n\n\n"],[-1,29534,"顶点，"],[1,29587,"没"],[-1,29587,"\n"],[1,29992,"欢"],[-1,29992,"\n"],[1,30723,"\n"],[-1,30723,""]],[30724,30724],[25913,25913]]],[1528946728767,["Re@Re.local",[[1,30724,"顶点A作为起点，到其它任意点的距离都被设置"]],[30724,30724],[30745,30745]]],[1528946730730,["Re@Re.local",[[-1,30732,"到其它任意点的距离都被设置"]],[30745,30745],[30732,30732]]],[1528946747091,["Re@Re.local",[[1,30732,"其它任意顶点的dist都被设置为无穷大，对A"]],[30732,30732],[30754,30754]]],[1528946749762,["Re@Re.local",[[-1,30752,"对A"]],[30754,30754],[30752,30752]]],[1528946753340,["Re@Re.local",[[1,30752,"对A，"]],[30752,30752],[30755,30755]]],[1528946824196,[null,[[-1,25913,""],[1,25913,"）。"],[-1,26818,"个\n\n"],[1,26821,"移动。"],[-1,26935,"\n"],[-1,26943,"w"],[1,26996,"下一次"],[-1,27000,"监测与"],[1,27023,"总代价"],[-1,27025,"因此，"],[-1,27087,"显示"],[1,27089,"小。"],[1,27144,"可以"],[-1,27147,"w的"],[-1,27201,"w"],[1,27202,"\n"],[-1,27279,"\n"],[1,27280,"和"],[-1,28124,"Di"],[1,28126,"每个"],[1,28244,"时间。"],[-1,28250,"大"],[-1,28295,"，。"],[1,28448,"每个"],[-1,28461,"的对"],[1,28463,"d"],[-1,28474,"吊"],[1,28503,"$"],[1,28519,"$"],[-1,28530,"##"],[-1,28542,"\n\n"],[1,28544,"##"],[1,28864,"的"],[-1,28866,"就"],[1,28913,"广播主机"],[-1,28925,"，必须要"],[1,29021,"用"],[-1,29040,"会"],[1,29121,"暴力"],[-1,29125,"让"],[-1,29130,"每"],[1,29221,"设置"],[-1,29224,"存活"],[1,29281,"都"],[-1,29282,"收"],[-1,29451,"构造"],[1,29453,"\n\n"],[-1,29534,"\n\n\n"],[1,29537,"顶点，"],[-1,29587,"没"],[1,29588,"\n"],[-1,29992,"欢"],[1,29993,"\n"],[-1,30723,"\n"],[1,30724,"以"]],[25913,25913],[30725,30725]]],[1528946824196,[null,[[1,25913,""],[-1,25913,"）。"],[1,26820,"个\n\n"],[-1,26820,"移动。"],[1,26937,"\n"],[1,26944,"w"],[-1,26996,"下一次"],[1,27003,"监测与"],[-1,27023,"总代价"],[1,27028,"因此，"],[1,27087,"显示"],[-1,27087,"小。"],[-1,27144,"可以"],[1,27149,"w的"],[1,27201,"w"],[-1,27201,"\n"],[1,27279,"\n"],[-1,27279,"和"],[1,28124,"Di"],[-1,28124,"每个"],[-1,28244,"时间。"],[1,28253,"大"],[1,28297,"，。"],[-1,28448,"每个"],[1,28463,"的对"],[-1,28463,"d"],[1,28475,"吊"],[-1,28503,"$"],[-1,28520,"$"],[1,28532,"##"],[1,28542,"\n\n"],[-1,28542,"##"],[-1,28864,"的"],[1,28867,"就"],[-1,28913,"广播主机"],[1,28929,"，必须要"],[-1,29021,"用"],[1,29041,"会"],[-1,29121,"暴力"],[1,29127,"让"],[1,29131,"每"],[-1,29221,"设置"],[1,29226,"存活"],[-1,29281,"都"],[1,29283,"收"],[1,29451,"构造"],[-1,29451,"\n\n"],[1,29534,"\n\n\n"],[-1,29534,"顶点，"],[1,29587,"没"],[-1,29587,"\n"],[1,29992,"欢"],[-1,29992,"\n"],[1,30723,"\n"],[-1,30723,"以"]],[30725,30725],[25913,25913]]],[1528946774833,["Re@Re.local",[[1,30755,"可以为为"]],[30755,30755],[30759,30759]]],[1528946775137,["Re@Re.local",[[-1,30758,"为"]],[30759,30759],[30758,30758]]],[1528946779678,["Re@Re.local",[[1,30758,"B和C更新其D"]],[30758,30758],[30765,30765]]],[1528946779994,["Re@Re.local",[[-1,30764,"D"]],[30765,30765],[30764,30764]]],[1528946810893,["Re@Re.local",[[1,30764,"dist值，因为通过A到B、C的距离并不是无穷。这"]],[30764,30764],[30789,30789]]],[1528946814508,["Re@Re.local",[[-1,30787,"。这"]],[30789,30789],[30787,30787]]],[1528946823747,["Re@Re.local",[[1,30787,"，于是将B和C移动到队首"]],[30787,30787],[30799,30799]]],[1528946884176,[null,[[-1,25913,""],[1,25913,"）。"],[-1,26818,"个\n\n"],[1,26821,"移动。"],[-1,26935,"\n"],[-1,26943,"w"],[1,26996,"下一次"],[-1,27000,"监测与"],[1,27023,"总代价"],[-1,27025,"因此，"],[-1,27087,"显示"],[1,27089,"小。"],[1,27144,"可以"],[-1,27147,"w的"],[-1,27201,"w"],[1,27202,"\n"],[-1,27279,"\n"],[1,27280,"和"],[-1,28124,"Di"],[1,28126,"每个"],[1,28244,"时间。"],[-1,28250,"大"],[-1,28295,"，。"],[1,28448,"每个"],[-1,28461,"的对"],[1,28463,"d"],[-1,28474,"吊"],[1,28503,"$"],[1,28519,"$"],[-1,28530,"##"],[-1,28542,"\n\n"],[1,28544,"##"],[1,28864,"的"],[-1,28866,"就"],[1,28913,"广播主机"],[-1,28925,"，必须要"],[1,29021,"用"],[-1,29040,"会"],[1,29121,"暴力"],[-1,29125,"让"],[-1,29130,"每"],[1,29221,"设置"],[-1,29224,"存活"],[1,29281,"都"],[-1,29282,"收"],[-1,29451,"构造"],[1,29453,"\n\n"],[-1,29534,"\n\n\n"],[1,29537,"顶点，"],[-1,29587,"没"],[1,29588,"\n"],[-1,29992,"欢"],[1,29993,"\n"],[-1,30723,"\n"],[1,30724,"以"]],[25913,25913],[30725,30725]]],[1528946884176,[null,[[1,25913,""],[-1,25913,"）。"],[1,26820,"个\n\n"],[-1,26820,"移动。"],[1,26937,"\n"],[1,26944,"w"],[-1,26996,"下一次"],[1,27003,"监测与"],[-1,27023,"总代价"],[1,27028,"因此，"],[1,27087,"显示"],[-1,27087,"小。"],[-1,27144,"可以"],[1,27149,"w的"],[1,27201,"w"],[-1,27201,"\n"],[1,27279,"\n"],[-1,27279,"和"],[1,28124,"Di"],[-1,28124,"每个"],[-1,28244,"时间。"],[1,28253,"大"],[1,28297,"，。"],[-1,28448,"每个"],[1,28463,"的对"],[-1,28463,"d"],[1,28475,"吊"],[-1,28503,"$"],[-1,28520,"$"],[1,28532,"##"],[1,28542,"\n\n"],[-1,28542,"##"],[-1,28864,"的"],[1,28867,"就"],[-1,28913,"广播主机"],[1,28929,"，必须要"],[-1,29021,"用"],[1,29041,"会"],[-1,29121,"暴力"],[1,29127,"让"],[1,29131,"每"],[-1,29221,"设置"],[1,29226,"存活"],[-1,29281,"都"],[1,29283,"收"],[1,29451,"构造"],[-1,29451,"\n\n"],[1,29534,"\n\n\n"],[-1,29534,"顶点，"],[1,29587,"没"],[-1,29587,"\n"],[1,29992,"欢"],[-1,29992,"\n"],[1,30723,"\n"],[-1,30723,"以"]],[30725,30725],[25913,25913]]],[1528946825691,["Re@Re.local",[[1,30800,"将"]],[30800,30800],[30801,30801]]],[1528946825925,["Re@Re.local",[[-1,30800,"将"]],[30801,30801],[30800,30800]]],[1528946834349,["Re@Re.local",[[1,30800,"为B、C更新父节点"]],[30800,30800],[30809,30809]]],[1528946843783,["Re@Re.local",[[-1,30806,"父节点"]],[30809,30809],[30806,30806]]],[1528946855445,["Re@Re.local",[[1,30806,"祖先路径"]],[30806,30806],[30810,30810]]],[1528946862731,["Re@Re.local",[[-1,30808,"路径"]],[30810,30810],[30808,30808]]],[1528946864655,["Re@Re.local",[[1,30808,"连接"]],[30808,30808],[30810,30810]]],[1528946869476,["Re@Re.local",[[-1,30800,"为B、C更新"]],[30806,30806],[30800,30800]]],[1528946873321,["Re@Re.local",[[1,30800,"更新B和C的"]],[30800,30800],[30806,30806]]],[1528946877860,["Re@Re.local",[[1,30810,"为A"]],[30810,30810],[30812,30812]]],[1528946878543,["Re@Re.local",[[-1,30811,"A"]],[30812,30812],[30811,30811]]],[1528946882991,["Re@Re.local",[[1,30811,"指向A的引用。"]],[30811,30811],[30818,30818]]],[1528946944261,[null,[[-1,25913,""],[1,25913,"）。"],[-1,26818,"个\n\n"],[1,26821,"移动。"],[-1,26935,"\n"],[-1,26943,"w"],[1,26996,"下一次"],[-1,27000,"监测与"],[1,27023,"总代价"],[-1,27025,"因此，"],[-1,27087,"显示"],[1,27089,"小。"],[1,27144,"可以"],[-1,27147,"w的"],[-1,27201,"w"],[1,27202,"\n"],[-1,27279,"\n"],[1,27280,"和"],[-1,28124,"Di"],[1,28126,"每个"],[1,28244,"时间。"],[-1,28250,"大"],[-1,28295,"，。"],[1,28448,"每个"],[-1,28461,"的对"],[1,28463,"d"],[-1,28474,"吊"],[1,28503,"$"],[1,28519,"$"],[-1,28530,"##"],[-1,28542,"\n\n"],[1,28544,"##"],[1,28864,"的"],[-1,28866,"就"],[1,28913,"广播主机"],[-1,28925,"，必须要"],[1,29021,"用"],[-1,29040,"会"],[1,29121,"暴力"],[-1,29125,"让"],[-1,29130,"每"],[1,29221,"设置"],[-1,29224,"存活"],[1,29281,"都"],[-1,29282,"收"],[-1,29451,"构造"],[1,29453,"\n\n"],[-1,29534,"\n\n\n"],[1,29537,"顶点，"],[-1,29587,"没"],[1,29588,"\n"],[-1,29992,"欢"],[1,29993,"\n"],[-1,30723,"\n"],[1,30724,"以"],[-1,30799,"\n"],[1,30800,"，"],[1,30819,"\n"]],[25913,25913],[30820,30820]]],[1528946944261,[null,[[1,25913,""],[-1,25913,"）。"],[1,26820,"个\n\n"],[-1,26820,"移动。"],[1,26937,"\n"],[1,26944,"w"],[-1,26996,"下一次"],[1,27003,"监测与"],[-1,27023,"总代价"],[1,27028,"因此，"],[1,27087,"显示"],[-1,27087,"小。"],[-1,27144,"可以"],[1,27149,"w的"],[1,27201,"w"],[-1,27201,"\n"],[1,27279,"\n"],[-1,27279,"和"],[1,28124,"Di"],[-1,28124,"每个"],[-1,28244,"时间。"],[1,28253,"大"],[1,28297,"，。"],[-1,28448,"每个"],[1,28463,"的对"],[-1,28463,"d"],[1,28475,"吊"],[-1,28503,"$"],[-1,28520,"$"],[1,28532,"##"],[1,28542,"\n\n"],[-1,28542,"##"],[-1,28864,"的"],[1,28867,"就"],[-1,28913,"广播主机"],[1,28929,"，必须要"],[-1,29021,"用"],[1,29041,"会"],[-1,29121,"暴力"],[1,29127,"让"],[1,29131,"每"],[-1,29221,"设置"],[1,29226,"存活"],[-1,29281,"都"],[1,29283,"收"],[1,29451,"构造"],[-1,29451,"\n\n"],[1,29534,"\n\n\n"],[-1,29534,"顶点，"],[1,29587,"没"],[-1,29587,"\n"],[1,29992,"欢"],[-1,29992,"\n"],[1,30723,"\n"],[-1,30723,"以"],[1,30799,"\n"],[-1,30799,"，"],[-1,30819,"\n"]],[30820,30820],[25913,25913]]],[1528946891280,["Re@Re.local",[[1,30818,"值得注意的是，先"]],[30818,30818],[30826,30826]]],[1528946891364,["Re@Re.local",[[-1,30825,"先"]],[30826,30826],[30825,30825]]],[1528946892352,["Re@Re.local",[[1,30825,"并"]],[30825,30825],[30826,30826]]],[1528946892468,["Re@Re.local",[[-1,30825,"并"]],[30826,30826],[30825,30825]]],[1528946901882,["Re@Re.local",[[1,30825,"并没有正式的"]],[30825,30825],[30831,30831]]],[1528946902895,["Re@Re.local",[[-1,30825,"并没有正式的"]],[30831,30831],[30825,30825]]],[1528946929789,["Re@Re.local",[[1,30825,"到此为止还没有正式地将B和C加入生成树中。当且"]],[30825,30825],[30848,30848]]],[1528946932837,["Re@Re.local",[[-1,30845,"。当且"]],[30848,30848],[30845,30845]]],[1528946942337,["Re@Re.local",[[1,30845,"，当节点从优先队列中移除时，才将"]],[30845,30845],[30861,30861]]],[1528946942419,["Re@Re.local",[[-1,30860,"将"]],[30861,30861],[30860,30860]]],[1528946943839,["Re@Re.local",[[1,30860,"认为其"]],[30860,30860],[30863,30863]]],[1528947004267,[null,[[-1,25913,""],[1,25913,"）。"],[-1,26818,"个\n\n"],[1,26821,"移动。"],[-1,26935,"\n"],[-1,26943,"w"],[1,26996,"下一次"],[-1,27000,"监测与"],[1,27023,"总代价"],[-1,27025,"因此，"],[-1,27087,"显示"],[1,27089,"小。"],[1,27144,"可以"],[-1,27147,"w的"],[-1,27201,"w"],[1,27202,"\n"],[-1,27279,"\n"],[1,27280,"和"],[-1,28124,"Di"],[1,28126,"每个"],[1,28244,"时间。"],[-1,28250,"大"],[-1,28295,"，。"],[1,28448,"每个"],[-1,28461,"的对"],[1,28463,"d"],[-1,28474,"吊"],[1,28503,"$"],[1,28519,"$"],[-1,28530,"##"],[-1,28542,"\n\n"],[1,28544,"##"],[1,28864,"的"],[-1,28866,"就"],[1,28913,"广播主机"],[-1,28925,"，必须要"],[1,29021,"用"],[-1,29040,"会"],[1,29121,"暴力"],[-1,29125,"让"],[-1,29130,"每"],[1,29221,"设置"],[-1,29224,"存活"],[1,29281,"都"],[-1,29282,"收"],[-1,29451,"构造"],[1,29453,"\n\n"],[-1,29534,"\n\n\n"],[1,29537,"顶点，"],[-1,29587,"没"],[1,29588,"\n"],[-1,29992,"欢"],[1,29993,"\n"],[-1,30723,"\n"],[1,30724,"以"],[-1,30799,"\n"],[1,30800,"，"],[1,30864,"\n"]],[25913,25913],[30865,30865]]],[1528947004268,[null,[[1,25913,""],[-1,25913,"）。"],[1,26820,"个\n\n"],[-1,26820,"移动。"],[1,26937,"\n"],[1,26944,"w"],[-1,26996,"下一次"],[1,27003,"监测与"],[-1,27023,"总代价"],[1,27028,"因此，"],[1,27087,"显示"],[-1,27087,"小。"],[-1,27144,"可以"],[1,27149,"w的"],[1,27201,"w"],[-1,27201,"\n"],[1,27279,"\n"],[-1,27279,"和"],[1,28124,"Di"],[-1,28124,"每个"],[-1,28244,"时间。"],[1,28253,"大"],[1,28297,"，。"],[-1,28448,"每个"],[1,28463,"的对"],[-1,28463,"d"],[1,28475,"吊"],[-1,28503,"$"],[-1,28520,"$"],[1,28532,"##"],[1,28542,"\n\n"],[-1,28542,"##"],[-1,28864,"的"],[1,28867,"就"],[-1,28913,"广播主机"],[1,28929,"，必须要"],[-1,29021,"用"],[1,29041,"会"],[-1,29121,"暴力"],[1,29127,"让"],[1,29131,"每"],[-1,29221,"设置"],[1,29226,"存活"],[-1,29281,"都"],[1,29283,"收"],[1,29451,"构造"],[-1,29451,"\n\n"],[1,29534,"\n\n\n"],[-1,29534,"顶点，"],[1,29587,"没"],[-1,29587,"\n"],[1,29992,"欢"],[-1,29992,"\n"],[1,30723,"\n"],[-1,30723,"以"],[1,30799,"\n"],[-1,30799,"，"],[-1,30864,"\n"]],[30865,30865],[25913,25913]]],[1528946947732,["Re@Re.local",[[1,30865,"了生成树。"]],[30865,30865],[30870,30870]]],[1528946948035,["Re@Re.local",[[1,30872,"\n"]],[30870,30870],[30871,30871]]],[1528946948209,["Re@Re.local",[[1,30873,"\n"]],[30871,30871],[30872,30872]]],[1528946950419,["Re@Re.local",[[1,30872,"由于B是"]],[30872,30872],[30876,30876]]],[1528946951036,["Re@Re.local",[[-1,30875,"是"]],[30876,30876],[30875,30875]]],[1528946959909,["Re@Re.local",[[1,30875,"的距离值最小，接下来边"]],[30875,30875],[30886,30886]]],[1528946960161,["Re@Re.local",[[-1,30885,"边"]],[30886,30886],[30885,30885]]],[1528946962403,["Re@Re.local",[[1,30885,"便研究便。"]],[30885,30885],[30890,30890]]],[1528946963116,["Re@Re.local",[[-1,30888,"便。"]],[30890,30890],[30888,30888]]],[1528946965031,["Re@Re.local",[[1,30888,"B。"]],[30888,30888],[30890,30890]]],[1528946972042,["Re@Re.local",[[-1,30889,"。"]],[30890,30890],[30889,30889]]],[1528946982232,["Re@Re.local",[[1,30889,"，检查B的临近节点，剋"]],[30889,30889],[30900,30900]]],[1528946984153,["Re@Re.local",[[-1,30894,"临近节点，剋"]],[30900,30900],[30894,30894]]],[1528946990895,["Re@Re.local",[[1,30894,"邻接节点，发现了D和E。"]],[30894,30894],[30906,30906]]],[1528946991408,["Re@Re.local",[[-1,30905,"。"]],[30906,30906],[30905,30905]]],[1528946999868,["Re@Re.local",[[1,30905,"，于是更新D和 "]],[30905,30905],[30913,30913]]],[1528947000442,["Re@Re.local",[[-1,30912," "]],[30913,30913],[30912,30912]]],[1528947003730,["Re@Re.local",[[1,30912,"E的dist值"]],[30912,30912],[30919,30919]]],[1528947064205,[null,[[-1,25913,""],[1,25913,"）。"],[-1,26818,"个\n\n"],[1,26821,"移动。"],[-1,26935,"\n"],[-1,26943,"w"],[1,26996,"下一次"],[-1,27000,"监测与"],[1,27023,"总代价"],[-1,27025,"因此，"],[-1,27087,"显示"],[1,27089,"小。"],[1,27144,"可以"],[-1,27147,"w的"],[-1,27201,"w"],[1,27202,"\n"],[-1,27279,"\n"],[1,27280,"和"],[-1,28124,"Di"],[1,28126,"每个"],[1,28244,"时间。"],[-1,28250,"大"],[-1,28295,"，。"],[1,28448,"每个"],[-1,28461,"的对"],[1,28463,"d"],[-1,28474,"吊"],[1,28503,"$"],[1,28519,"$"],[-1,28530,"##"],[-1,28542,"\n\n"],[1,28544,"##"],[1,28864,"的"],[-1,28866,"就"],[1,28913,"广播主机"],[-1,28925,"，必须要"],[1,29021,"用"],[-1,29040,"会"],[1,29121,"暴力"],[-1,29125,"让"],[-1,29130,"每"],[1,29221,"设置"],[-1,29224,"存活"],[1,29281,"都"],[-1,29282,"收"],[-1,29451,"构造"],[1,29453,"\n\n"],[-1,29534,"\n\n\n"],[1,29537,"顶点，"],[-1,29587,"没"],[1,29588,"\n"],[-1,29992,"欢"],[1,29993,"\n"],[-1,30723,"\n"],[1,30724,"以"],[-1,30799,"\n"],[1,30800,"，"],[-1,30863,"\n"],[1,30864,"加入"],[-1,30874,"是"],[1,30919,"\n\n"]],[25913,25913],[30921,30921]]],[1528947064206,[null,[[1,25913,""],[-1,25913,"）。"],[1,26820,"个\n\n"],[-1,26820,"移动。"],[1,26937,"\n"],[1,26944,"w"],[-1,26996,"下一次"],[1,27003,"监测与"],[-1,27023,"总代价"],[1,27028,"因此，"],[1,27087,"显示"],[-1,27087,"小。"],[-1,27144,"可以"],[1,27149,"w的"],[1,27201,"w"],[-1,27201,"\n"],[1,27279,"\n"],[-1,27279,"和"],[1,28124,"Di"],[-1,28124,"每个"],[-1,28244,"时间。"],[1,28253,"大"],[1,28297,"，。"],[-1,28448,"每个"],[1,28463,"的对"],[-1,28463,"d"],[1,28475,"吊"],[-1,28503,"$"],[-1,28520,"$"],[1,28532,"##"],[1,28542,"\n\n"],[-1,28542,"##"],[-1,28864,"的"],[1,28867,"就"],[-1,28913,"广播主机"],[1,28929,"，必须要"],[-1,29021,"用"],[1,29041,"会"],[-1,29121,"暴力"],[1,29127,"让"],[1,29131,"每"],[-1,29221,"设置"],[1,29226,"存活"],[-1,29281,"都"],[1,29283,"收"],[1,29451,"构造"],[-1,29451,"\n\n"],[1,29534,"\n\n\n"],[-1,29534,"顶点，"],[1,29587,"没"],[-1,29587,"\n"],[1,29992,"欢"],[-1,29992,"\n"],[1,30723,"\n"],[-1,30723,"以"],[1,30799,"\n"],[-1,30799,"，"],[1,30863,"\n"],[-1,30863,"加入"],[1,30875,"是"],[-1,30919,"\n\n"]],[30921,30921],[25913,25913]]],[1528947008038,["Re@Re.local",[[1,30919,"以及祖先连接"]],[30919,30919],[30925,30925]]],[1528947009476,["Re@Re.local",[[-1,30921,"祖先连接"]],[30925,30925],[30921,30921]]],[1528947012000,["Re@Re.local",[[1,30921,"predecr"]],[30921,30921],[30928,30928]]],[1528947014658,["Re@Re.local",[[-1,30921,"predecr"]],[30928,30928],[30921,30921]]],[1528947021822,["Re@Re.local",[[1,30921,"predecessor link。将"]],[30921,30921],[30939,30939]]],[1528947027379,["Re@Re.local",[[-1,30938,"将"]],[30939,30939],[30938,30938]]],[1528947031615,["Re@Re.local",[[1,30938,"沿着"]],[30938,30938],[30940,30940]]],[1528947033993,["Re@Re.local",[[-1,30937,"。沿着"]],[30940,30940],[30937,30937]]],[1528947042572,["Re@Re.local",[[1,30937,"，在优先队列中继续往下走，"]],[30937,30937],[30950,30950]]],[1528947049538,["Re@Re.local",[[-1,30949,"，"]],[30950,30950],[30949,30949]]],[1528947051027,["Re@Re.local",[[1,30949,"找到了"]],[30949,30949],[30952,30952]]],[1528947051393,["Re@Re.local",[[-1,30951,"了"]],[30952,30952],[30951,30951]]],[1528947052939,["Re@Re.local",[[1,30951,"的是C，"]],[30951,30951],[30955,30955]]],[1528947364191,[null,[[-1,25913,""],[1,25913,"）。"],[-1,26818,"个\n\n"],[1,26821,"移动。"],[-1,26935,"\n"],[-1,26943,"w"],[1,26996,"下一次"],[-1,27000,"监测与"],[1,27023,"总代价"],[-1,27025,"因此，"],[-1,27087,"显示"],[1,27089,"小。"],[1,27144,"可以"],[-1,27147,"w的"],[-1,27201,"w"],[1,27202,"\n"],[-1,27279,"\n"],[1,27280,"和"],[-1,28124,"Di"],[1,28126,"每个"],[1,28244,"时间。"],[-1,28250,"大"],[-1,28295,"，。"],[1,28448,"每个"],[-1,28461,"的对"],[1,28463,"d"],[-1,28474,"吊"],[1,28503,"$"],[1,28519,"$"],[-1,28530,"##"],[-1,28542,"\n\n"],[1,28544,"##"],[1,28864,"的"],[-1,28866,"就"],[1,28913,"广播主机"],[-1,28925,"，必须要"],[1,29021,"用"],[-1,29040,"会"],[1,29121,"暴力"],[-1,29125,"让"],[-1,29130,"每"],[1,29221,"设置"],[-1,29224,"存活"],[1,29281,"都"],[-1,29282,"收"],[-1,29451,"构造"],[1,29453,"\n\n"],[-1,29534,"\n\n\n"],[1,29537,"顶点，"],[-1,29587,"没"],[1,29588,"\n"],[-1,29992,"欢"],[1,29993,"\n"],[-1,30723,"\n"],[1,30724,"以"],[-1,30799,"\n"],[1,30800,"，"],[-1,30863,"\n"],[1,30864,"加入"],[-1,30874,"是"],[1,30955,"\n\n"]],[25913,25913],[30957,30957]]],[1528947364191,[null,[[1,25913,""],[-1,25913,"）。"],[1,26820,"个\n\n"],[-1,26820,"移动。"],[1,26937,"\n"],[1,26944,"w"],[-1,26996,"下一次"],[1,27003,"监测与"],[-1,27023,"总代价"],[1,27028,"因此，"],[1,27087,"显示"],[-1,27087,"小。"],[-1,27144,"可以"],[1,27149,"w的"],[1,27201,"w"],[-1,27201,"\n"],[1,27279,"\n"],[-1,27279,"和"],[1,28124,"Di"],[-1,28124,"每个"],[-1,28244,"时间。"],[1,28253,"大"],[1,28297,"，。"],[-1,28448,"每个"],[1,28463,"的对"],[-1,28463,"d"],[1,28475,"吊"],[-1,28503,"$"],[-1,28520,"$"],[1,28532,"##"],[1,28542,"\n\n"],[-1,28542,"##"],[-1,28864,"的"],[1,28867,"就"],[-1,28913,"广播主机"],[1,28929,"，必须要"],[-1,29021,"用"],[1,29041,"会"],[-1,29121,"暴力"],[1,29127,"让"],[1,29131,"每"],[-1,29221,"设置"],[1,29226,"存活"],[-1,29281,"都"],[1,29283,"收"],[1,29451,"构造"],[-1,29451,"\n\n"],[1,29534,"\n\n\n"],[-1,29534,"顶点，"],[1,29587,"没"],[-1,29587,"\n"],[1,29992,"欢"],[-1,29992,"\n"],[1,30723,"\n"],[-1,30723,"以"],[1,30799,"\n"],[-1,30799,"，"],[1,30863,"\n"],[-1,30863,"加入"],[1,30875,"是"],[-1,30955,"\n\n"]],[30957,30957],[25913,25913]]],[1528947349331,["Re@Re.local",[[-1,30954,"，"]],[30955,30955],[30954,30954]]],[1528947355559,["Re@Re.local",[[1,30954,"。C的唯一节点"]],[30954,30954],[30961,30961]]],[1528947359898,["Re@Re.local",[[-1,30955,"C的唯一节点"]],[30961,30961],[30955,30955]]],[1528947424187,[null,[[-1,25913,""],[1,25913,"）。"],[-1,26818,"个\n\n"],[1,26821,"移动。"],[-1,26935,"\n"],[-1,26943,"w"],[1,26996,"下一次"],[-1,27000,"监测与"],[1,27023,"总代价"],[-1,27025,"因此，"],[-1,27087,"显示"],[1,27089,"小。"],[1,27144,"可以"],[-1,27147,"w的"],[-1,27201,"w"],[1,27202,"\n"],[-1,27279,"\n"],[1,27280,"和"],[-1,28124,"Di"],[1,28126,"每个"],[1,28244,"时间。"],[-1,28250,"大"],[-1,28295,"，。"],[1,28448,"每个"],[-1,28461,"的对"],[1,28463,"d"],[-1,28474,"吊"],[1,28503,"$"],[1,28519,"$"],[-1,28530,"##"],[-1,28542,"\n\n"],[1,28544,"##"],[1,28864,"的"],[-1,28866,"就"],[1,28913,"广播主机"],[-1,28925,"，必须要"],[1,29021,"用"],[-1,29040,"会"],[1,29121,"暴力"],[-1,29125,"让"],[-1,29130,"每"],[1,29221,"设置"],[-1,29224,"存活"],[1,29281,"都"],[-1,29282,"收"],[-1,29451,"构造"],[1,29453,"\n\n"],[-1,29534,"\n\n\n"],[1,29537,"顶点，"],[-1,29587,"没"],[1,29588,"\n"],[-1,29992,"欢"],[1,29993,"\n"],[-1,30723,"\n"],[1,30724,"以"],[-1,30799,"\n"],[1,30800,"，"],[-1,30863,"\n"],[1,30864,"加入"],[-1,30874,"是"],[1,30955,"\n\n"]],[25913,25913],[30957,30957]]],[1528947424187,[null,[[1,25913,""],[-1,25913,"）。"],[1,26820,"个\n\n"],[-1,26820,"移动。"],[1,26937,"\n"],[1,26944,"w"],[-1,26996,"下一次"],[1,27003,"监测与"],[-1,27023,"总代价"],[1,27028,"因此，"],[1,27087,"显示"],[-1,27087,"小。"],[-1,27144,"可以"],[1,27149,"w的"],[1,27201,"w"],[-1,27201,"\n"],[1,27279,"\n"],[-1,27279,"和"],[1,28124,"Di"],[-1,28124,"每个"],[-1,28244,"时间。"],[1,28253,"大"],[1,28297,"，。"],[-1,28448,"每个"],[1,28463,"的对"],[-1,28463,"d"],[1,28475,"吊"],[-1,28503,"$"],[-1,28520,"$"],[1,28532,"##"],[1,28542,"\n\n"],[-1,28542,"##"],[-1,28864,"的"],[1,28867,"就"],[-1,28913,"广播主机"],[1,28929,"，必须要"],[-1,29021,"用"],[1,29041,"会"],[-1,29121,"暴力"],[1,29127,"让"],[1,29131,"每"],[-1,29221,"设置"],[1,29226,"存活"],[-1,29281,"都"],[1,29283,"收"],[1,29451,"构造"],[-1,29451,"\n\n"],[1,29534,"\n\n\n"],[-1,29534,"顶点，"],[1,29587,"没"],[-1,29587,"\n"],[1,29992,"欢"],[-1,29992,"\n"],[1,30723,"\n"],[-1,30723,"以"],[1,30799,"\n"],[-1,30799,"，"],[1,30863,"\n"],[-1,30863,"加入"],[1,30875,"是"],[-1,30955,"\n\n"]],[30957,30957],[25913,25913]]],[1528947365977,["Re@Re.local",[[1,30955,"C的为"]],[30955,30955],[30958,30958]]],[1528947366097,["Re@Re.local",[[-1,30957,"为"]],[30958,30958],[30957,30957]]],[1528947372903,["Re@Re.local",[[1,30957,"邻接顶点中位于"]],[30957,30957],[30964,30964]]],[1528947375432,["Re@Re.local",[[-1,30962,"位于"]],[30964,30964],[30962,30962]]],[1528947380035,["Re@Re.local",[[1,30962,"仍在优先嘟咧中"]],[30962,30962],[30969,30969]]],[1528947380580,["Re@Re.local",[[-1,30966,"嘟咧中"]],[30969,30969],[30966,30966]]],[1528947386300,["Re@Re.local",[[1,30966,"队列中的是F，因此可以"]],[30966,30966],[30977,30977]]],[1528947387900,["Re@Re.local",[[-1,30973,"因此可以"]],[30977,30977],[30973,30973]]],[1528947391935,["Re@Re.local",[[1,30973,"因此跟"]],[30973,30973],[30976,30976]]],[1528947392025,["Re@Re.local",[[-1,30975,"跟"]],[30976,30976],[30975,30975]]],[1528947398163,["Re@Re.local",[[1,30975,"可以更新到F的距离"]],[30975,30975],[30984,30984]]],[1528947400133,["Re@Re.local",[[-1,30979,"到F的距离"]],[30984,30984],[30979,30979]]],[1528947400627,["Re@Re.local",[[1,30979,"F"]],[30979,30979],[30980,30980]]],[1528947402072,["Re@Re.local",[[-1,30975,"可以更新F"]],[30980,30980],[30975,30975]]],[1528947404771,["Re@Re.local",[[1,30975,"更新F的f"]],[30975,30975],[30980,30980]]],[1528947405401,["Re@Re.local",[[-1,30979,"f"]],[30980,30980],[30979,30979]]],[1528947415659,["Re@Re.local",[[1,30979,"dist，然后调整F在优先队列中的为止。"]],[30979,30979],[30999,30999]]],[1528947415930,["Re@Re.local",[[1,31001,"\n"]],[30999,30999],[31000,31000]]],[1528947416120,["Re@Re.local",[[1,31002,"\n"]],[31000,31000],[31001,31001]]],[1528947416493,["Re@Re.local",[[-1,31002,"\n"]],[31001,31001],[31000,31000]]],[1528947416679,["Re@Re.local",[[-1,31001,"\n"]],[31000,31000],[30999,30999]]],[1528947417361,["Re@Re.local",[[-1,30996,"为止。"]],[30999,30999],[30996,30996]]],[1528947419733,["Re@Re.local",[[1,30996,"位置。"]],[30996,30996],[30999,30999]]],[1528947419995,["Re@Re.local",[[1,31001,"\n"]],[30999,30999],[31000,31000]]],[1528947420182,["Re@Re.local",[[1,31002,"\n"]],[31000,31000],[31001,31001]]],[1528947484175,[null,[[-1,25913,""],[1,25913,"）。"],[-1,26818,"个\n\n"],[1,26821,"移动。"],[-1,26935,"\n"],[-1,26943,"w"],[1,26996,"下一次"],[-1,27000,"监测与"],[1,27023,"总代价"],[-1,27025,"因此，"],[-1,27087,"显示"],[1,27089,"小。"],[1,27144,"可以"],[-1,27147,"w的"],[-1,27201,"w"],[1,27202,"\n"],[-1,27279,"\n"],[1,27280,"和"],[-1,28124,"Di"],[1,28126,"每个"],[1,28244,"时间。"],[-1,28250,"大"],[-1,28295,"，。"],[1,28448,"每个"],[-1,28461,"的对"],[1,28463,"d"],[-1,28474,"吊"],[1,28503,"$"],[1,28519,"$"],[-1,28530,"##"],[-1,28542,"\n\n"],[1,28544,"##"],[1,28864,"的"],[-1,28866,"就"],[1,28913,"广播主机"],[-1,28925,"，必须要"],[1,29021,"用"],[-1,29040,"会"],[1,29121,"暴力"],[-1,29125,"让"],[-1,29130,"每"],[1,29221,"设置"],[-1,29224,"存活"],[1,29281,"都"],[-1,29282,"收"],[-1,29451,"构造"],[1,29453,"\n\n"],[-1,29534,"\n\n\n"],[1,29537,"顶点，"],[-1,29587,"没"],[1,29588,"\n"],[-1,29992,"欢"],[1,29993,"\n"],[-1,30723,"\n"],[1,30724,"以"],[-1,30799,"\n"],[1,30800,"，"],[-1,30863,"\n"],[1,30864,"加入"],[-1,30874,"是"]],[25913,25913],[30874,30874]]],[1528947484175,[null,[[1,25913,""],[-1,25913,"）。"],[1,26820,"个\n\n"],[-1,26820,"移动。"],[1,26937,"\n"],[1,26944,"w"],[-1,26996,"下一次"],[1,27003,"监测与"],[-1,27023,"总代价"],[1,27028,"因此，"],[1,27087,"显示"],[-1,27087,"小。"],[-1,27144,"可以"],[1,27149,"w的"],[1,27201,"w"],[-1,27201,"\n"],[1,27279,"\n"],[-1,27279,"和"],[1,28124,"Di"],[-1,28124,"每个"],[-1,28244,"时间。"],[1,28253,"大"],[1,28297,"，。"],[-1,28448,"每个"],[1,28463,"的对"],[-1,28463,"d"],[1,28475,"吊"],[-1,28503,"$"],[-1,28520,"$"],[1,28532,"##"],[1,28542,"\n\n"],[-1,28542,"##"],[-1,28864,"的"],[1,28867,"就"],[-1,28913,"广播主机"],[1,28929,"，必须要"],[-1,29021,"用"],[1,29041,"会"],[-1,29121,"暴力"],[1,29127,"让"],[1,29131,"每"],[-1,29221,"设置"],[1,29226,"存活"],[-1,29281,"都"],[1,29283,"收"],[1,29451,"构造"],[-1,29451,"\n\n"],[1,29534,"\n\n\n"],[-1,29534,"顶点，"],[1,29587,"没"],[-1,29587,"\n"],[1,29992,"欢"],[-1,29992,"\n"],[1,30723,"\n"],[-1,30723,"以"],[1,30799,"\n"],[-1,30799,"，"],[1,30863,"\n"],[-1,30863,"加入"],[1,30875,"是"]],[30874,30874],[25913,25913]]],[1528947435005,["Re@Re.local",[[1,31001,"现在检查了节点D的邻接"]],[31001,31001],[31012,31012]]],[1528947437644,["Re@Re.local",[[-1,31005,"了节点D的邻接"]],[31012,31012],[31005,31005]]],[1528947441443,["Re@Re.local",[[1,31005,"节点D的邻接顶点。"]],[31005,31005],[31014,31014]]],[1528947442309,["Re@Re.local",[[-1,31013,"。"]],[31014,31014],[31013,31013]]],[1528947445053,["Re@Re.local",[[1,31013,"，可以发现"]],[31013,31013],[31018,31018]]],[1528947447872,["Re@Re.local",[[-1,31014,"可以发现"]],[31018,31018],[31014,31014]]],[1528947450705,["Re@Re.local",[[1,31014,"我们"]],[31014,31014],[31016,31016]]],[1528947451180,["Re@Re.local",[[-1,31014,"我们"]],[31016,31016],[31014,31014]]],[1528947457557,["Re@Re.local",[[1,31014,"可以发现通过更新E"]],[31014,31014],[31023,31023]]],[1528947544229,[null,[[-1,25913,""],[1,25913,"）。"],[-1,26818,"个\n\n"],[1,26821,"移动。"],[-1,26935,"\n"],[-1,26943,"w"],[1,26996,"下一次"],[-1,27000,"监测与"],[1,27023,"总代价"],[-1,27025,"因此，"],[-1,27087,"显示"],[1,27089,"小。"],[1,27144,"可以"],[-1,27147,"w的"],[-1,27201,"w"],[1,27202,"\n"],[-1,27279,"\n"],[1,27280,"和"],[-1,28124,"Di"],[1,28126,"每个"],[1,28244,"时间。"],[-1,28250,"大"],[-1,28295,"，。"],[1,28448,"每个"],[-1,28461,"的对"],[1,28463,"d"],[-1,28474,"吊"],[1,28503,"$"],[1,28519,"$"],[-1,28530,"##"],[-1,28542,"\n\n"],[1,28544,"##"],[1,28864,"的"],[-1,28866,"就"],[1,28913,"广播主机"],[-1,28925,"，必须要"],[1,29021,"用"],[-1,29040,"会"],[1,29121,"暴力"],[-1,29125,"让"],[-1,29130,"每"],[1,29221,"设置"],[-1,29224,"存活"],[1,29281,"都"],[-1,29282,"收"],[-1,29451,"构造"],[1,29453,"\n\n"],[-1,29534,"\n\n\n"],[1,29537,"顶点，"],[-1,29587,"没"],[1,29588,"\n"],[-1,29992,"欢"],[1,29993,"\n"],[-1,30723,"\n"],[1,30724,"以"],[-1,30799,"\n"],[1,30800,"，"],[-1,30863,"\n"],[1,30864,"加入"],[-1,30874,"是"]],[25913,25913],[30874,30874]]],[1528947544230,[null,[[1,25913,""],[-1,25913,"）。"],[1,26820,"个\n\n"],[-1,26820,"移动。"],[1,26937,"\n"],[1,26944,"w"],[-1,26996,"下一次"],[1,27003,"监测与"],[-1,27023,"总代价"],[1,27028,"因此，"],[1,27087,"显示"],[-1,27087,"小。"],[-1,27144,"可以"],[1,27149,"w的"],[1,27201,"w"],[-1,27201,"\n"],[1,27279,"\n"],[-1,27279,"和"],[1,28124,"Di"],[-1,28124,"每个"],[-1,28244,"时间。"],[1,28253,"大"],[1,28297,"，。"],[-1,28448,"每个"],[1,28463,"的对"],[-1,28463,"d"],[1,28475,"吊"],[-1,28503,"$"],[-1,28520,"$"],[1,28532,"##"],[1,28542,"\n\n"],[-1,28542,"##"],[-1,28864,"的"],[1,28867,"就"],[-1,28913,"广播主机"],[1,28929,"，必须要"],[-1,29021,"用"],[1,29041,"会"],[-1,29121,"暴力"],[1,29127,"让"],[1,29131,"每"],[-1,29221,"设置"],[1,29226,"存活"],[-1,29281,"都"],[1,29283,"收"],[1,29451,"构造"],[-1,29451,"\n\n"],[1,29534,"\n\n\n"],[-1,29534,"顶点，"],[1,29587,"没"],[-1,29587,"\n"],[1,29992,"欢"],[-1,29992,"\n"],[1,30723,"\n"],[-1,30723,"以"],[1,30799,"\n"],[-1,30799,"，"],[1,30863,"\n"],[-1,30863,"加入"],[1,30875,"是"]],[30874,30874],[25913,25913]]],[1528947508021,["Re@Re.local",[[-1,31014,"可以发现通过更新E"]],[31023,31023],[31014,31014]]],[1528947512597,["Re@Re.local",[[1,31014,"更新EW"]],[31014,31014],[31018,31018]]],[1528947513810,["Re@Re.local",[[-1,31014,"更新EW"]],[31018,31018],[31014,31014]]],[1528947518745,["Re@Re.local",[[1,31014,"发现英国更新E"]],[31014,31014],[31021,31021]]],[1528947519809,["Re@Re.local",[[-1,31016,"英国更新E"]],[31021,31021],[31016,31016]]],[1528947522746,["Re@Re.local",[[1,31016,"应该更新"]],[31016,31016],[31020,31020]]],[1528953255078,[null,[[-1,25913,""],[1,25913,"）。"],[-1,26818,"个\n\n"],[1,26821,"移动。"],[-1,26935,"\n"],[-1,26943,"w"],[1,26996,"下一次"],[-1,27000,"监测与"],[1,27023,"总代价"],[-1,27025,"因此，"],[-1,27087,"显示"],[1,27089,"小。"],[1,27144,"可以"],[-1,27147,"w的"],[-1,27201,"w"],[1,27202,"\n"],[-1,27279,"\n"],[1,27280,"和"],[-1,28124,"Di"],[1,28126,"每个"],[1,28244,"时间。"],[-1,28250,"大"],[-1,28295,"，。"],[1,28448,"每个"],[-1,28461,"的对"],[1,28463,"d"],[-1,28474,"吊"],[1,28503,"$"],[1,28519,"$"],[-1,28530,"##"],[-1,28542,"\n\n"],[1,28544,"##"],[1,28864,"的"],[-1,28866,"就"],[1,28913,"广播主机"],[-1,28925,"，必须要"],[1,29021,"用"],[-1,29040,"会"],[1,29121,"暴力"],[-1,29125,"让"],[-1,29130,"每"],[1,29221,"设置"],[-1,29224,"存活"],[1,29281,"都"],[-1,29282,"收"],[-1,29451,"构造"],[1,29453,"\n\n"],[-1,29534,"\n\n\n"],[1,29537,"顶点，"],[-1,29587,"没"],[1,29588,"\n"],[-1,29992,"欢"],[1,29993,"\n"],[-1,30723,"\n"],[1,30724,"以"],[-1,30799,"\n"],[1,30800,"，"],[-1,30863,"\n"],[1,30864,"加入"],[-1,30874,"是"]],[25913,25913],[30874,30874]]],[1528953255078,[null,[[1,25913,""],[-1,25913,"）。"],[1,26820,"个\n\n"],[-1,26820,"移动。"],[1,26937,"\n"],[1,26944,"w"],[-1,26996,"下一次"],[1,27003,"监测与"],[-1,27023,"总代价"],[1,27028,"因此，"],[1,27087,"显示"],[-1,27087,"小。"],[-1,27144,"可以"],[1,27149,"w的"],[1,27201,"w"],[-1,27201,"\n"],[1,27279,"\n"],[-1,27279,"和"],[1,28124,"Di"],[-1,28124,"每个"],[-1,28244,"时间。"],[1,28253,"大"],[1,28297,"，。"],[-1,28448,"每个"],[1,28463,"的对"],[-1,28463,"d"],[1,28475,"吊"],[-1,28503,"$"],[-1,28520,"$"],[1,28532,"##"],[1,28542,"\n\n"],[-1,28542,"##"],[-1,28864,"的"],[1,28867,"就"],[-1,28913,"广播主机"],[1,28929,"，必须要"],[-1,29021,"用"],[1,29041,"会"],[-1,29121,"暴力"],[1,29127,"让"],[1,29131,"每"],[-1,29221,"设置"],[1,29226,"存活"],[-1,29281,"都"],[1,29283,"收"],[1,29451,"构造"],[-1,29451,"\n\n"],[1,29534,"\n\n\n"],[-1,29534,"顶点，"],[1,29587,"没"],[-1,29587,"\n"],[1,29992,"欢"],[-1,29992,"\n"],[1,30723,"\n"],[-1,30723,"以"],[1,30799,"\n"],[-1,30799,"，"],[1,30863,"\n"],[-1,30863,"加入"],[1,30875,"是"]],[30874,30874],[25913,25913]]],[1528953246116,["Re@Re.local",[[1,31020,"Ed"]],[31021,31021],[31022,31022]]],[1528953247363,["Re@Re.local",[[-1,31018,"更新Ed"]],[31022,31022],[31018,31018]]],[1528953254062,["Re@Re.local",[[1,31018,"将E的dist从6更新为"]],[31018,31018],[31030,31030]]],[1528953315092,[null,[[-1,25913,""],[1,25913,"）。"],[-1,26818,"个\n\n"],[1,26821,"移动。"],[-1,26935,"\n"],[-1,26943,"w"],[1,26996,"下一次"],[-1,27000,"监测与"],[1,27023,"总代价"],[-1,27025,"因此，"],[-1,27087,"显示"],[1,27089,"小。"],[1,27144,"可以"],[-1,27147,"w的"],[-1,27201,"w"],[1,27202,"\n"],[-1,27279,"\n"],[1,27280,"和"],[-1,28124,"Di"],[1,28126,"每个"],[1,28244,"时间。"],[-1,28250,"大"],[-1,28295,"，。"],[1,28448,"每个"],[-1,28461,"的对"],[1,28463,"d"],[-1,28474,"吊"],[1,28503,"$"],[1,28519,"$"],[-1,28530,"##"],[-1,28542,"\n\n"],[1,28544,"##"],[1,28864,"的"],[-1,28866,"就"],[1,28913,"广播主机"],[-1,28925,"，必须要"],[1,29021,"用"],[-1,29040,"会"],[1,29121,"暴力"],[-1,29125,"让"],[-1,29130,"每"],[1,29221,"设置"],[-1,29224,"存活"],[1,29281,"都"],[-1,29282,"收"],[-1,29451,"构造"],[1,29453,"\n\n"],[-1,29534,"\n\n\n"],[1,29537,"顶点，"],[-1,29587,"没"],[1,29588,"\n"],[-1,29992,"欢"],[1,29993,"\n"],[-1,30723,"\n"],[1,30724,"以"],[-1,30799,"\n"],[1,30800,"，"],[-1,30863,"\n"],[1,30864,"加入"],[-1,30874,"是"]],[25913,25913],[30874,30874]]],[1528953315092,[null,[[1,25913,""],[-1,25913,"）。"],[1,26820,"个\n\n"],[-1,26820,"移动。"],[1,26937,"\n"],[1,26944,"w"],[-1,26996,"下一次"],[1,27003,"监测与"],[-1,27023,"总代价"],[1,27028,"因此，"],[1,27087,"显示"],[-1,27087,"小。"],[-1,27144,"可以"],[1,27149,"w的"],[1,27201,"w"],[-1,27201,"\n"],[1,27279,"\n"],[-1,27279,"和"],[1,28124,"Di"],[-1,28124,"每个"],[-1,28244,"时间。"],[1,28253,"大"],[1,28297,"，。"],[-1,28448,"每个"],[1,28463,"的对"],[-1,28463,"d"],[1,28475,"吊"],[-1,28503,"$"],[-1,28520,"$"],[1,28532,"##"],[1,28542,"\n\n"],[-1,28542,"##"],[-1,28864,"的"],[1,28867,"就"],[-1,28913,"广播主机"],[1,28929,"，必须要"],[-1,29021,"用"],[1,29041,"会"],[-1,29121,"暴力"],[1,29127,"让"],[1,29131,"每"],[-1,29221,"设置"],[1,29226,"存活"],[-1,29281,"都"],[1,29283,"收"],[1,29451,"构造"],[-1,29451,"\n\n"],[1,29534,"\n\n\n"],[-1,29534,"顶点，"],[1,29587,"没"],[-1,29587,"\n"],[1,29992,"欢"],[-1,29992,"\n"],[1,30723,"\n"],[-1,30723,"以"],[1,30799,"\n"],[-1,30799,"，"],[1,30863,"\n"],[-1,30863,"加入"],[1,30875,"是"]],[30874,30874],[25913,25913]]],[1528953255449,["Re@Re.local",[[1,31031,"."]],[31031,31031],[31032,31032]]],[1528953256026,["Re@Re.local",[[-1,31031,"."]],[31032,31032],[31031,31031]]],[1528953256335,["Re@Re.local",[[1,31031,"。"]],[31031,31031],[31032,31032]]],[1528953262829,["Re@Re.local",[[-1,31031,"。"]],[31032,31032],[31031,31031]]],[1528953280704,["Re@Re.local",[[1,31031,"，将E的predecessor link修改为指向D，"]],[31031,31031],[31058,31058]]],[1528953281411,["Re@Re.local",[[-1,31057,"，"]],[31058,31058],[31057,31057]]],[1528953309674,["Re@Re.local",[[1,31057,"，这样便是的"]],[31057,31057],[31063,31063]]],[1528953310161,["Re@Re.local",[[-1,31061,"是的"]],[31063,31063],[31061,31061]]],[1528953314147,["Re@Re.local",[[1,31061,"使得它"]],[31061,31061],[31064,31064]]],[1528953375125,[null,[[-1,25913,""],[1,25913,"）。"],[-1,26818,"个\n\n"],[1,26821,"移动。"],[-1,26935,"\n"],[-1,26943,"w"],[1,26996,"下一次"],[-1,27000,"监测与"],[1,27023,"总代价"],[-1,27025,"因此，"],[-1,27087,"显示"],[1,27089,"小。"],[1,27144,"可以"],[-1,27147,"w的"],[-1,27201,"w"],[1,27202,"\n"],[-1,27279,"\n"],[1,27280,"和"],[-1,28124,"Di"],[1,28126,"每个"],[1,28244,"时间。"],[-1,28250,"大"],[-1,28295,"，。"],[1,28448,"每个"],[-1,28461,"的对"],[1,28463,"d"],[-1,28474,"吊"],[1,28503,"$"],[1,28519,"$"],[-1,28530,"##"],[-1,28542,"\n\n"],[1,28544,"##"],[1,28864,"的"],[-1,28866,"就"],[1,28913,"广播主机"],[-1,28925,"，必须要"],[1,29021,"用"],[-1,29040,"会"],[1,29121,"暴力"],[-1,29125,"让"],[-1,29130,"每"],[1,29221,"设置"],[-1,29224,"存活"],[1,29281,"都"],[-1,29282,"收"],[-1,29451,"构造"],[1,29453,"\n\n"],[-1,29534,"\n\n\n"],[1,29537,"顶点，"],[-1,29587,"没"],[1,29588,"\n"],[-1,29992,"欢"],[1,29993,"\n"],[-1,30723,"\n"],[1,30724,"以"],[-1,30799,"\n"],[1,30800,"，"],[-1,30863,"\n"],[1,30864,"加入"],[-1,30874,"是"],[-1,31030,"\n"],[1,31031,"4"],[1,31065,"\n"]],[25913,25913],[31066,31066]]],[1528953375125,[null,[[1,25913,""],[-1,25913,"）。"],[1,26820,"个\n\n"],[-1,26820,"移动。"],[1,26937,"\n"],[1,26944,"w"],[-1,26996,"下一次"],[1,27003,"监测与"],[-1,27023,"总代价"],[1,27028,"因此，"],[1,27087,"显示"],[-1,27087,"小。"],[-1,27144,"可以"],[1,27149,"w的"],[1,27201,"w"],[-1,27201,"\n"],[1,27279,"\n"],[-1,27279,"和"],[1,28124,"Di"],[-1,28124,"每个"],[-1,28244,"时间。"],[1,28253,"大"],[1,28297,"，。"],[-1,28448,"每个"],[1,28463,"的对"],[-1,28463,"d"],[1,28475,"吊"],[-1,28503,"$"],[-1,28520,"$"],[1,28532,"##"],[1,28542,"\n\n"],[-1,28542,"##"],[-1,28864,"的"],[1,28867,"就"],[-1,28913,"广播主机"],[1,28929,"，必须要"],[-1,29021,"用"],[1,29041,"会"],[-1,29121,"暴力"],[1,29127,"让"],[1,29131,"每"],[-1,29221,"设置"],[1,29226,"存活"],[-1,29281,"都"],[1,29283,"收"],[1,29451,"构造"],[-1,29451,"\n\n"],[1,29534,"\n\n\n"],[-1,29534,"顶点，"],[1,29587,"没"],[-1,29587,"\n"],[1,29992,"欢"],[-1,29992,"\n"],[1,30723,"\n"],[-1,30723,"以"],[1,30799,"\n"],[-1,30799,"，"],[1,30863,"\n"],[-1,30863,"加入"],[1,30875,"是"],[1,31030,"\n"],[-1,31030,"4"],[-1,31065,"\n"]],[31066,31066],[25913,25913]]],[1528953366596,["Re@Re.local",[[1,31064,"可供移入生成树中的另一个位置。算法的其余部分如读者"]],[31064,31064],[31089,31089]]],[1528953367191,["Re@Re.local",[[-1,31086,"如读者"]],[31089,31089],[31086,31086]]],[1528953372257,["Re@Re.local",[[1,31086,"如预期一样，"]],[31086,31086],[31092,31092]]],[1528953435118,[null,[[-1,25913,""],[1,25913,"）。"],[-1,26818,"个\n\n"],[1,26821,"移动。"],[-1,26935,"\n"],[-1,26943,"w"],[1,26996,"下一次"],[-1,27000,"监测与"],[1,27023,"总代价"],[-1,27025,"因此，"],[-1,27087,"显示"],[1,27089,"小。"],[1,27144,"可以"],[-1,27147,"w的"],[-1,27201,"w"],[1,27202,"\n"],[-1,27279,"\n"],[1,27280,"和"],[-1,28124,"Di"],[1,28126,"每个"],[1,28244,"时间。"],[-1,28250,"大"],[-1,28295,"，。"],[1,28448,"每个"],[-1,28461,"的对"],[1,28463,"d"],[-1,28474,"吊"],[1,28503,"$"],[1,28519,"$"],[-1,28530,"##"],[-1,28542,"\n\n"],[1,28544,"##"],[1,28864,"的"],[-1,28866,"就"],[1,28913,"广播主机"],[-1,28925,"，必须要"],[1,29021,"用"],[-1,29040,"会"],[1,29121,"暴力"],[-1,29125,"让"],[-1,29130,"每"],[1,29221,"设置"],[-1,29224,"存活"],[1,29281,"都"],[-1,29282,"收"],[-1,29451,"构造"],[1,29453,"\n\n"],[-1,29534,"\n\n\n"],[1,29537,"顶点，"],[-1,29587,"没"],[1,29588,"\n"],[-1,29992,"欢"],[1,29993,"\n"],[-1,30723,"\n"],[1,30724,"以"],[-1,30799,"\n"],[1,30800,"，"],[-1,30863,"\n"],[1,30864,"加入"],[-1,30874,"是"],[-1,31030,"\n"],[1,31031,"4"],[1,31093,"\n"]],[25913,25913],[31094,31094]]],[1528953435118,[null,[[1,25913,""],[-1,25913,"）。"],[1,26820,"个\n\n"],[-1,26820,"移动。"],[1,26937,"\n"],[1,26944,"w"],[-1,26996,"下一次"],[1,27003,"监测与"],[-1,27023,"总代价"],[1,27028,"因此，"],[1,27087,"显示"],[-1,27087,"小。"],[-1,27144,"可以"],[1,27149,"w的"],[1,27201,"w"],[-1,27201,"\n"],[1,27279,"\n"],[-1,27279,"和"],[1,28124,"Di"],[-1,28124,"每个"],[-1,28244,"时间。"],[1,28253,"大"],[1,28297,"，。"],[-1,28448,"每个"],[1,28463,"的对"],[-1,28463,"d"],[1,28475,"吊"],[-1,28503,"$"],[-1,28520,"$"],[1,28532,"##"],[1,28542,"\n\n"],[-1,28542,"##"],[-1,28864,"的"],[1,28867,"就"],[-1,28913,"广播主机"],[1,28929,"，必须要"],[-1,29021,"用"],[1,29041,"会"],[-1,29121,"暴力"],[1,29127,"让"],[1,29131,"每"],[-1,29221,"设置"],[1,29226,"存活"],[-1,29281,"都"],[1,29283,"收"],[1,29451,"构造"],[-1,29451,"\n\n"],[1,29534,"\n\n\n"],[-1,29534,"顶点，"],[1,29587,"没"],[-1,29587,"\n"],[1,29992,"欢"],[-1,29992,"\n"],[1,30723,"\n"],[-1,30723,"以"],[1,30799,"\n"],[-1,30799,"，"],[1,30863,"\n"],[-1,30863,"加入"],[1,30875,"是"],[1,31030,"\n"],[-1,31030,"4"],[-1,31093,"\n"]],[31094,31094],[25913,25913]]],[1528953382541,["Re@Re.local",[[1,31094,"将新的节点加入到树中。"]],[31094,31094],[31105,31105]]],[1528953382964,["Re@Re.local",[[1,31107,"\n"]],[31105,31105],[31106,31106]]],[1528953383161,["Re@Re.local",[[1,31108,"\n"]],[31106,31106],[31107,31107]]],[1528953735098,[null,[[-1,25913,""],[1,25913,"）。"],[-1,26818,"个\n\n"],[1,26821,"移动。"],[-1,26935,"\n"],[-1,26943,"w"],[1,26996,"下一次"],[-1,27000,"监测与"],[1,27023,"总代价"],[-1,27025,"因此，"],[-1,27087,"显示"],[1,27089,"小。"],[1,27144,"可以"],[-1,27147,"w的"],[-1,27201,"w"],[1,27202,"\n"],[-1,27279,"\n"],[1,27280,"和"],[-1,28124,"Di"],[1,28126,"每个"],[1,28244,"时间。"],[-1,28250,"大"],[-1,28295,"，。"],[1,28448,"每个"],[-1,28461,"的对"],[1,28463,"d"],[-1,28474,"吊"],[1,28503,"$"],[1,28519,"$"],[-1,28530,"##"],[-1,28542,"\n\n"],[1,28544,"##"],[1,28864,"的"],[-1,28866,"就"],[1,28913,"广播主机"],[-1,28925,"，必须要"],[1,29021,"用"],[-1,29040,"会"],[1,29121,"暴力"],[-1,29125,"让"],[-1,29130,"每"],[1,29221,"设置"],[-1,29224,"存活"],[1,29281,"都"],[-1,29282,"收"],[-1,29451,"构造"],[1,29453,"\n\n"],[-1,29534,"\n\n\n"],[1,29537,"顶点，"],[-1,29587,"没"],[1,29588,"\n"],[-1,29992,"欢"],[1,29993,"\n"],[-1,30723,"\n"],[1,30724,"以"],[-1,30799,"\n"],[1,30800,"，"],[-1,30863,"\n"],[1,30864,"加入"],[-1,30874,"是"],[-1,31030,"\n"],[1,31031,"4"],[-1,31092,"\n"],[1,31093,"不断"],[1,31106,"\n\n"]],[25913,25913],[31108,31108]]],[1528953735098,[null,[[1,25913,""],[-1,25913,"）。"],[1,26820,"个\n\n"],[-1,26820,"移动。"],[1,26937,"\n"],[1,26944,"w"],[-1,26996,"下一次"],[1,27003,"监测与"],[-1,27023,"总代价"],[1,27028,"因此，"],[1,27087,"显示"],[-1,27087,"小。"],[-1,27144,"可以"],[1,27149,"w的"],[1,27201,"w"],[-1,27201,"\n"],[1,27279,"\n"],[-1,27279,"和"],[1,28124,"Di"],[-1,28124,"每个"],[-1,28244,"时间。"],[1,28253,"大"],[1,28297,"，。"],[-1,28448,"每个"],[1,28463,"的对"],[-1,28463,"d"],[1,28475,"吊"],[-1,28503,"$"],[-1,28520,"$"],[1,28532,"##"],[1,28542,"\n\n"],[-1,28542,"##"],[-1,28864,"的"],[1,28867,"就"],[-1,28913,"广播主机"],[1,28929,"，必须要"],[-1,29021,"用"],[1,29041,"会"],[-1,29121,"暴力"],[1,29127,"让"],[1,29131,"每"],[-1,29221,"设置"],[1,29226,"存活"],[-1,29281,"都"],[1,29283,"收"],[1,29451,"构造"],[-1,29451,"\n\n"],[1,29534,"\n\n\n"],[-1,29534,"顶点，"],[1,29587,"没"],[-1,29587,"\n"],[1,29992,"欢"],[-1,29992,"\n"],[1,30723,"\n"],[-1,30723,"以"],[1,30799,"\n"],[-1,30799,"，"],[1,30863,"\n"],[-1,30863,"加入"],[1,30875,"是"],[1,31030,"\n"],[-1,31030,"4"],[1,31092,"\n"],[-1,31092,"不断"],[-1,31107,"\n\n"]],[31108,31108],[25913,25913]]],[1528953701838,["Re@Re.local",[[1,31107,"![../_images/prima.png](http://interactivepython.org/courselib/static/pythonds/_images/prima.png)"]],[31107,31107],[31204,31204]]],[1528953702197,["Re@Re.local",[[1,31206,"\n"]],[31204,31204],[31205,31205]]],[1528953702496,["Re@Re.local",[[1,31207,"\n"]],[31205,31205],[31206,31206]]],[1528953706184,["Re@Re.local",[[1,31206,"![../_images/primb.png](http://interactivepython.org/courselib/static/pythonds/_images/primb.png)"]],[31206,31206],[31303,31303]]],[1528953706614,["Re@Re.local",[[1,31305,"\n"]],[31303,31303],[31304,31304]]],[1528953706796,["Re@Re.local",[[1,31306,"\n"]],[31304,31304],[31305,31305]]],[1528953710533,["Re@Re.local",[[1,31305,"![../_images/primc.png](http://interactivepython.org/courselib/static/pythonds/_images/primc.png)"]],[31305,31305],[31402,31402]]],[1528953710792,["Re@Re.local",[[1,31404,"\n"]],[31402,31402],[31403,31403]]],[1528953711017,["Re@Re.local",[[1,31405,"\n"]],[31403,31403],[31404,31404]]],[1528953714788,["Re@Re.local",[[1,31404,"![../_images/primd.png](http://interactivepython.org/courselib/static/pythonds/_images/primd.png)"]],[31404,31404],[31501,31501]]],[1528953715289,["Re@Re.local",[[1,31503,"\n"]],[31501,31501],[31502,31502]]],[1528953715514,["Re@Re.local",[[1,31504,"\n"]],[31502,31502],[31503,31503]]],[1528953719101,["Re@Re.local",[[1,31503,"![../_images/prime.png](http://interactivepython.org/courselib/static/pythonds/_images/prime.png)"]],[31503,31503],[31600,31600]]],[1528953719400,["Re@Re.local",[[1,31602,"\n"]],[31600,31600],[31601,31601]]],[1528953719619,["Re@Re.local",[[1,31603,"\n"]],[31601,31601],[31602,31602]]],[1528953723155,["Re@Re.local",[[1,31602,"![../_images/primf.png](http://interactivepython.org/courselib/static/pythonds/_images/primf.png)"]],[31602,31602],[31699,31699]]],[1528953723408,["Re@Re.local",[[1,31701,"\n"]],[31699,31699],[31700,31700]]],[1528953723616,["Re@Re.local",[[1,31702,"\n"]],[31700,31700],[31701,31701]]],[1528953727881,["Re@Re.local",[[1,31701,"![../_images/primg.png](http://interactivepython.org/courselib/static/pythonds/_images/primg.png)"]],[31701,31701],[31798,31798]]],[1528953728696,["Re@Re.local",[[1,31800,"\n"]],[31798,31798],[31799,31799]]],[1528953728956,["Re@Re.local",[[1,31801,"\n"]],[31799,31799],[31800,31800]]]]]]}