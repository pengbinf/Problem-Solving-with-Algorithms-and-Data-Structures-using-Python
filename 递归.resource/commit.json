{"compress":true,"commitItems":[["6b11115c-0166-46bb-aec7-de487df3551e",1524795973135,"",[[1524795921271,["Re@VAIO",[[1,0,"迭代\n===\n\n\n"]],[0,0],[9,9]]],[1524795924324,["Re@VAIO",[[1,9,"\n"]],[8,8],[9,9]]],[1524795936474,["Re@VAIO",[[-1,9,"\n"],[1,10,"##"]],[9,9],[11,11]]],[1524795937112,["Re@VAIO",[[-1,10,"#"]],[11,11],[10,10]]],[1524795939861,["Re@VAIO",[[1,10," 4 迭代 #"]],[10,10],[17,17]]],[1524795940125,["Re@VAIO",[[1,17,"\n\n"]],[17,17],[18,18]]],[1524795940717,["Re@VAIO",[[1,19,"\n"]],[18,18],[19,19]]],[1524795945488,["Re@VAIO",[[-1,19,"\n"],[1,20,"## 4.1 目标 ##"]],[19,19],[31,31]]],[1524795945687,["Re@VAIO",[[1,31,"\n\n"]],[31,31],[32,32]]],[1524795946260,["Re@VAIO",[[1,33,"\n"]],[32,32],[33,33]]],[1524795949319,["Re@VAIO",[[-1,33,"\n"],[1,34,"本章目标如下："]],[33,33],[40,40]]],[1524795949517,["Re@VAIO",[[1,40,"\n\n"]],[40,40],[41,41]]],[1524795949963,["Re@VAIO",[[-1,41,"\n"],[1,42,"-"]],[41,41],[42,42]]],[1524795950343,["Re@VAIO",[[-1,41,"-"],[1,42,"\n"]],[42,42],[41,41]]],[1524795950613,["Re@VAIO",[[1,42,"\n"]],[41,41],[42,42]]],[1524795950928,["Re@VAIO",[[-1,42,"\n"],[1,43,"-="]],[42,42],[44,44]]],[1524795951349,["Re@VAIO",[[-1,43,"="]],[44,44],[43,43]]],[1524795952064,["Re@VAIO",[[1,43," "]],[43,43],[44,44]]],[1524795970885,["Re@VAIO",[[-1,0,"迭代"]],[2,2],[0,0]]],[1524795972305,["Re@VAIO",[[1,0,"地鬼"]],[0,0],[2,2]]],[1524795973315,["Re@VAIO",[[-1,0,"地鬼"]],[2,2],[0,0]]],[1524795974457,["Re@VAIO",[[1,0,"递归"]],[0,0],[2,2]]],[1524795983221,["Re@VAIO",[[-1,13,"迭代"]],[15,15],[13,13]]],[1524795984473,["Re@VAIO",[[1,13,"递归"]],[13,13],[15,15]]],[1524796000974,["Re@VAIO",[[1,44,"了解某些问题"]],[44,44],[50,50]]],[1524796006402,["Re@VAIO",[[1,46,"："]],[46,46],[47,47]]],[1524796013587,["Re@VAIO",[[-1,49,"问题"]],[51,51],[49,49]]],[1524796024707,["Re@VAIO",[[1,49,"难以处理的问题也许用递归可以轻松解决。"]],[49,49],[68,68]]],[1524796024948,["Re@VAIO",[[1,68,"\n\n"]],[68,68],[69,69]]],[1524796030235,["Re@VAIO",[[-1,69,"\n"],[1,70,"- 掌握："]],[69,69],[74,74]]],[1524796044614,["Re@VAIO",[[1,74,"哟哦那个递归"]],[74,74],[80,80]]],[1524796068957,["Re@VAIO",[[-1,74,"哟哦那个递归"]],[80,80],[74,74]]],[1524796075737,["Re@VAIO",[[1,74,"设计递归程序。"]],[74,74],[81,81]]],[1524796076636,["Re@VAIO",[[1,81,"\n\n"]],[81,81],[82,82]]],[1524796089191,["Re@VAIO",[[-1,82,"\n"],[1,83,"- 了解并应用：帝国"]],[82,82],[92,92]]],[1524796090037,["Re@VAIO",[[-1,90,"帝国"]],[92,92],[90,90]]],[1524796092657,["Re@VAIO",[[1,90,"递归散打法则"]],[90,90],[96,96]]],[1524796092956,["Re@VAIO",[[-1,94,"法则"]],[96,96],[94,94]]],[1524796093299,["Re@VAIO",[[-1,92,"散"]],[93,93],[92,92]]],[1524796095075,["Re@VAIO",[[1,92,"三大法则；"]],[92,92],[97,97]]],[1524796095547,["Re@VAIO",[[-1,96,"；"]],[97,97],[96,96]]],[1524796096068,["Re@VAIO",[[1,96,"。"]],[96,96],[97,97]]],[1524796096280,["Re@VAIO",[[1,97,"\n\n"]],[97,97],[98,98]]],[1524796101891,["Re@VAIO",[[-1,98,"\n"],[1,99,"- 了解： "]],[98,98],[104,104]]],[1524796109612,["Re@VAIO",[[-1,100,"了解： "]],[104,104],[100,100]]],[1524796112040,["Re@VAIO",[[1,100,"实现： 问题"]],[100,100],[106,106]]],[1524796112974,["Re@VAIO",[[-1,103," 问题"]],[106,106],[103,103]]],[1524796119342,["Re@VAIO",[[1,103,"问题的递归式描述。"]],[103,103],[112,112]]],[1524796119918,["Re@VAIO",[[1,112,"\n\n"]],[112,112],[113,113]]],[1524796120291,["Re@VAIO",[[1,114,"\n"]],[113,113],[114,114]]],[1524796120845,["Re@VAIO",[[-1,114,"\n"]],[114,114],[113,113]]],[1524796126608,["Re@VAIO",[[-1,76,"递归程序"]],[80,80],[76,76]]],[1524796129426,["Re@VAIO",[[1,76,"使"]],[76,76],[77,77]]],[1524796132044,["Re@VAIO",[[-1,76,"使"]],[77,77],[76,76]]],[1524796134004,["Re@VAIO",[[1,76,"设计可以"]],[76,76],[80,80]]],[1524796134972,["Re@VAIO",[[-1,76,"设计可以"]],[80,80],[76,76]]],[1524796136027,["Re@VAIO",[[1,76,"可以"]],[76,76],[78,78]]],[1524796138358,["Re@VAIO",[[-1,76,"可以"]],[78,78],[76,76]]],[1524796144928,["Re@VAIO",[[1,76,"递归式程序"]],[76,76],[81,81]]],[1524796147046,["Re@VAIO",[[-1,114,"\n"],[1,115,"- "]],[114,114],[116,116]]],[1524796213121,[null,[[-1,116,"打"]],[116,116],[116,116]]],[1524796213122,[null,[[1,116,"打"]],[116,116],[116,116]]],[1524796168413,["Re@VAIO",[[1,116,"了解：计算机系统中递归系统"]],[116,116],[129,129]]],[1524796168741,["Re@VAIO",[[-1,127,"系统"]],[129,129],[127,127]]],[1524796171364,["Re@VAIO",[[1,127,"的实现"]],[127,127],[130,130]]],[1524796171631,["Re@VAIO",[[1,130,"\n\n"]],[130,130],[131,131]]],[1524796171837,["Re@VAIO",[[1,132,"\n"]],[131,131],[132,132]]],[1524796190023,["Re@VAIO",[[-1,132,"\n"],[1,133,"## 4.2 何为递归 ##"]],[132,132],[146,146]]],[1524796190397,["Re@VAIO",[[1,146,"\n\n"]],[146,146],[147,147]]],[1524796190987,["Re@VAIO",[[1,148,"\n"]],[147,147],[148,148]]],[1524796205252,["Re@VAIO",[[-1,148,"\n"],[1,149,"帝国"]],[148,148],[150,150]]],[1524796205708,["Re@VAIO",[[-1,148,"帝国"]],[150,150],[148,148]]],[1524796205878,["Re@VAIO",[[-1,147,"\n"],[1,148,"d"]],[148,148],[147,148]]],[1524796205998,["Re@VAIO",[[1,148,"i"]],[147,148],[147,149]]],[1524796206141,["Re@VAIO",[[1,149,"g"]],[147,149],[147,150]]],[1524796206223,["Re@VAIO",[[1,150,"u"]],[147,150],[147,151]]],[1524796206261,["Re@VAIO",[[1,151,"i"]],[147,151],[147,152]]],[1524796206364,["Re@VAIO",[[-1,147,"digui"],[1,152,"递归"]],[147,152],[149,149]]],[1524796206511,["Re@VAIO",[[-1,148,"归"]],[149,149],[148,148]]],[1524796206702,["Re@VAIO",[[-1,147,"递"],[1,148,"\n"]],[148,148],[147,147]]],[1524796206891,["Re@VAIO",[[1,148,"\n"]],[147,147],[148,148]]],[1524796211247,["Re@VAIO",[[-1,148,"\n"],[1,149,"递归是一种解决问题的方法。"]],[148,148],[161,161]]],[1524796211596,["Re@VAIO",[[-1,160,"。"]],[161,161],[160,160]]],[1524796213058,["Re@VAIO",[[1,160,"，将"]],[160,160],[162,162]]],[1524796273127,[null,[[-1,162,"打"]],[162,162],[162,162]]],[1524796273127,[null,[[1,162,"打"]],[162,162],[162,162]]],[1524796221257,["Re@VAIO",[[1,162,"一个问题分解为越来越小的子问题，知道问题的"]],[162,162],[183,183]]],[1524796222348,["Re@VAIO",[[-1,178,"知道问题的"]],[183,183],[178,178]]],[1524796225974,["Re@VAIO",[[1,178,"直到问题的规模小刀"]],[178,178],[187,187]]],[1524796226124,["Re@VAIO",[[-1,186,"刀"]],[187,187],[186,186]]],[1524796233532,["Re@VAIO",[[1,186,"到可以被很简单地解决。"]],[186,186],[197,197]]],[1524796239754,["Re@VAIO",[[-1,190,"很简单地解决。"]],[197,197],[190,190]]],[1524796248301,["Re@VAIO",[[1,190,"轻松解决。通产来说"]],[190,190],[199,199]]],[1524796248950,["Re@VAIO",[[-1,195,"通产来说"]],[199,199],[195,195]]],[1524796250563,["Re@VAIO",[[1,195,"通畅来说"]],[195,195],[199,199]]],[1524796251100,["Re@VAIO",[[-1,196,"畅来说"]],[199,199],[196,196]]],[1524796251755,["Re@VAIO",[[1,196,"通"]],[196,196],[197,197]]],[1524796252046,["Re@VAIO",[[-1,195,"通通"]],[197,197],[195,195]]],[1524796253514,["Re@VAIO",[[1,195,"通畅"]],[195,195],[197,197]]],[1524796253899,["Re@VAIO",[[-1,195,"通畅"]],[197,197],[195,195]]],[1524796270413,["Re@VAIO",[[1,195,"通常来说，递归中有"]],[195,195],[204,204]]],[1524796333167,[null,[[-1,204,"打"]],[204,204],[204,204]]],[1524796333167,[null,[[1,204,"打"]],[204,204],[204,204]]],[1524796330609,["Re@VAIO",[[1,204,"函数对自己本身的调用。从表面上来看似乎并没有什么天额比"]],[204,204],[231,231]]],[1524796331233,["Re@VAIO",[[-1,228,"天额比"]],[231,231],[228,228]]],[1524796332030,["Re@VAIO",[[1,228,"特别"]],[228,228],[230,230]]],[1524796393131,[null,[[-1,230,"打"]],[230,230],[230,230]]],[1524796393132,[null,[[1,230,"打"]],[230,230],[230,230]]],[1524796351418,["Re@VAIO",[[1,232,"，然而递归算法对于一些"]],[232,232],[243,243]]],[1524796352891,["Re@VAIO",[[-1,241,"一些"]],[243,243],[241,241]]],[1524796365447,["Re@VAIO",[[1,241,"某些问题具有一针见血的气消。"]],[241,241],[255,255]]],[1524796365754,["Re@VAIO",[[1,255,"\n\n"]],[255,255],[256,256]]],[1524796365962,["Re@VAIO",[[1,257,"\n"]],[256,256],[257,257]]],[1524796366260,["Re@VAIO",[[1,258,"\n"]],[257,257],[258,258]]],[1524796385400,["Re@VAIO",[[-1,258,"\n"],[1,259,"## 4.3 对列表"]],[258,258],[268,268]]],[1524796387563,["Re@VAIO",[[-1,266,"列表"]],[268,268],[266,266]]],[1524796392680,["Re@VAIO",[[1,266,"数字列表求和 ##"]],[266,266],[275,275]]],[1524796392984,["Re@VAIO",[[1,275,"\n\n"]],[275,275],[276,276]]],[1524796453156,[null,[[-1,230,"打"],[1,231,"指出"],[-1,240,"一"]],[230,230],[240,240]]],[1524796453156,[null,[[1,230,"打"],[-1,230,"指出"],[1,241,"一"]],[240,240],[230,230]]],[1524796393234,["Re@VAIO",[[1,277,"\n"]],[276,276],[277,277]]],[1524796412982,["Re@VAIO",[[-1,277,"\n"],[1,278,"首先来看一个并不需要递归也可以解决的问题你"]],[277,277],[298,298]]],[1524796413098,["Re@VAIO",[[-1,297,"你"]],[298,298],[297,297]]],[1524796414610,["Re@VAIO",[[1,297,"。假设"]],[297,297],[300,300]]],[1524796416099,["Re@VAIO",[[-1,298,"假设"]],[300,300],[298,298]]],[1524796425164,["Re@VAIO",[[1,298,"假设相对一个数字列表求和，比如【】"]],[298,298],[315,315]]],[1524796427699,["Re@VAIO",[[-1,313,"【】"]],[315,315],[313,313]]],[1524796446260,["Re@VAIO",[[1,313,"[1,3,5,7,9]。待"]],[313,313],[326,326]]],[1524796446396,["Re@VAIO",[[-1,325,"待"]],[326,326],[325,325]]],[1524796452935,["Re@VAIO",[[1,325,"迭代式算法如可执行"]],[325,325],[334,334]]],[1524796513159,[null,[[-1,230,"打"],[1,231,"指出"],[-1,240,"一"]],[230,230],[240,240]]],[1524796513160,[null,[[1,230,"打"],[-1,230,"指出"],[1,241,"一"]],[240,240],[230,230]]],[1524796461959,["Re@VAIO",[[1,334,"代码1所示。"]],[334,334],[340,340]]],[1524796633194,[null,[[-1,230,"打"],[1,231,"指出"],[-1,240,"一"]],[230,230],[240,240]]],[1524796633194,[null,[[1,230,"打"],[-1,230,"指出"],[1,241,"一"]],[240,240],[230,230]]],[1524796597873,["Re@VAIO",[[1,340,"函数使用求和变量（）"]],[340,340],[350,350]]],[1524796599601,["Re@VAIO",[[1,349,"theSum"]],[349,349],[355,355]]],[1524796601991,["Re@VAIO",[[1,356,"来计算"]],[356,356],[359,359]]],[1524796625266,["Re@VAIO",[[-1,357,"计算"]],[359,359],[357,357]]],[1524796627092,["Re@VAIO",[[1,357,"执行"]],[357,357],[359,359]]],[1524796632346,["Re@VAIO",[[-1,357,"执行"]],[359,359],[357,357]]],[1524796693159,[null,[[-1,230,"打"],[1,231,"指出"],[-1,240,"一"]],[230,230],[240,240]]],[1524796693159,[null,[[1,230,"打"],[-1,230,"指出"],[1,241,"一"]],[240,240],[230,230]]],[1524796639161,["Re@VAIO",[[1,357,"计算列表中数字之和。"]],[357,357],[367,367]]],[1524796639473,["Re@VAIO",[[1,367,"\n\n"]],[367,367],[368,368]]],[1524796639884,["Re@VAIO",[[1,369,"\n"]],[368,368],[369,369]]],[1524796649885,["Re@VAIO",[[-1,369,"\n"],[1,370,"** 可执行代码1： 迭代是"]],[369,369],[383,383]]],[1524796650025,["Re@VAIO",[[-1,382,"是"]],[383,383],[382,382]]],[1524796652144,["Re@VAIO",[[1,382,"求和 **"]],[382,382],[387,387]]],[1524796652377,["Re@VAIO",[[1,387,"\n\n"]],[387,387],[388,388]]],[1524796654922,["Re@VAIO",[[-1,388,"\n"],[1,389,"```Python"]],[388,388],[397,397]]],[1524796659396,["Re@VAIO",[[1,397,"\n\ndef listsum(numList):\r\n    theSum = 0\r\n    for i in numList:\r\n        theSum = theSum + i\r\n    return theSum\r\n\r\nprint(listsum([1,3,5,7,9]))"]],[397,397],[537,537]]],[1524796662622,["Re@VAIO",[[-1,419,"\r"],[-1,435,"\r"],[-1,458,"\r"],[-1,487,"\r"],[-1,506,"\r"],[-1,508,"\r"],[1,538,"\n\n"]],[532,532],[533,533]]],[1524796663204,["Re@VAIO",[[-1,533,"\n"],[1,534,"```"]],[533,533],[536,536]]],[1524796664602,["Re@VAIO",[[1,536,"\n\n"]],[536,536],[537,537]]],[1524796675314,["Re@VAIO",[[-1,537,"\n"],[1,538,"现在假设"]],[537,537],[541,541]]],[1524796675798,["Re@VAIO",[[-1,538,"在假设"]],[541,541],[538,538]]],[1524796675994,["Re@VAIO",[[-1,537,"现"],[1,538,"\n"]],[538,538],[537,537]]],[1524796683304,["Re@VAIO",[[-1,537,"\n"],[1,538,"那么，现在假设手里"]],[537,537],[546,546]]],[1524796683923,["Re@VAIO",[[-1,544,"手里"]],[546,546],[544,544]]],[1524796691822,["Re@VAIO",[[1,544,"不可以使用while或者for循环。"]],[544,544],[562,562]]],[1524796753185,[null,[[-1,230,"打"],[1,231,"指出"],[-1,240,"一"],[-1,398,"\n"],[-1,419,"\r"],[1,420,":"],[-1,434,"\r"],[1,435,"0"],[-1,456,"\r"],[1,457,":"],[-1,484,"\r"],[1,485,"i"],[-1,502,"\r\r"],[1,504,"m\n"],[1,532,"\n"]],[230,230],[533,533]]],[1524796753185,[null,[[1,230,"打"],[-1,230,"指出"],[1,241,"一"],[1,398,"\n"],[1,418,"\r"],[-1,418,":"],[1,433,"\r"],[-1,433,"0"],[1,455,"\r"],[-1,455,":"],[1,483,"\r"],[-1,483,"i"],[1,501,"\r\r"],[-1,501,"m\n"],[-1,531,"\n"]],[533,533],[230,230]]],[1524796693433,["Re@VAIO",[[-1,561,"。"]],[562,562],[561,561]]],[1524796703361,["Re@VAIO",[[1,561,"，那又该如何计算列"]],[561,561],[570,570]]],[1524796706688,["Re@VAIO",[[-1,565,"如何计算列"]],[570,570],[565,565]]],[1524796709782,["Re@VAIO",[[1,565,"如何做？"]],[565,565],[569,569]]],[1524796873219,[null,[[-1,230,"打"],[1,231,"指出"],[-1,240,"一"],[-1,398,"\n"],[-1,419,"\r"],[1,420,":"],[-1,434,"\r"],[1,435,"0"],[-1,456,"\r"],[1,457,":"],[-1,484,"\r"],[1,485,"i"],[-1,502,"\r\r"],[1,504,"m\n"],[1,532,"\n"]],[230,230],[533,533]]],[1524796873219,[null,[[1,230,"打"],[-1,230,"指出"],[1,241,"一"],[1,398,"\n"],[1,418,"\r"],[-1,418,":"],[1,433,"\r"],[-1,433,"0"],[1,455,"\r"],[-1,455,":"],[1,483,"\r"],[-1,483,"i"],[1,501,"\r\r"],[-1,501,"m\n"],[-1,531,"\n"]],[533,533],[230,230]]],[1524796822530,["Re@VAIO",[[1,569,"数学家"]],[569,569],[572,572]]],[1524796823017,["Re@VAIO",[[-1,569,"数学家"]],[572,572],[569,569]]],[1524796837124,["Re@VAIO",[[1,569,"数学家可能会想到加法本身是一种为"]],[569,569],[585,585]]],[1524796837472,["Re@VAIO",[[-1,584,"为"]],[585,585],[584,584]]],[1524796838741,["Re@VAIO",[[1,584,"徐"]],[584,584],[585,585]]],[1524796838770,["Re@VAIO",[[-1,584,"徐"]],[585,585],[584,584]]],[1524796849564,["Re@VAIO",[[1,584,"接受两个参数的函数，即一堆"]],[584,584],[597,597]]],[1524796850096,["Re@VAIO",[[-1,595,"一堆"]],[597,597],[595,595]]],[1524796855193,["Re@VAIO",[[1,595,"一对数字。为了"]],[595,595],[602,602]]],[1524796862177,["Re@VAIO",[[-1,600,"为了"]],[602,602],[600,600]]],[1524796865538,["Re@VAIO",[[1,600,"那"]],[600,600],[601,601]]],[1524796866160,["Re@VAIO",[[-1,600,"那"]],[601,601],[600,600]]],[1524796872491,["Re@VAIO",[[1,600,"对于该求和"]],[600,600],[605,605]]],[1524796933181,[null,[[-1,230,"打"],[1,231,"指出"],[-1,240,"一"],[-1,398,"\n"],[-1,419,"\r"],[1,420,":"],[-1,434,"\r"],[1,435,"0"],[-1,456,"\r"],[1,457,":"],[-1,484,"\r"],[1,485,"i"],[-1,502,"\r\r"],[1,504,"m\n"],[1,532,"\n"]],[230,230],[533,533]]],[1524796933182,[null,[[1,230,"打"],[-1,230,"指出"],[1,241,"一"],[1,398,"\n"],[1,418,"\r"],[-1,418,":"],[1,433,"\r"],[-1,433,"0"],[1,455,"\r"],[-1,455,":"],[1,483,"\r"],[-1,483,"i"],[1,501,"\r\r"],[-1,501,"m\n"],[-1,531,"\n"]],[533,533],[230,230]]],[1524796879785,["Re@VAIO",[[-1,603,"求和问题"]],[607,607],[603,603]]],[1524796886093,["Re@VAIO",[[1,603,"列表求和问题便可转化为对"]],[603,603],[615,615]]],[1524796888310,["Re@VAIO",[[-1,614,"对"]],[615,615],[614,614]]],[1524796889863,["Re@VAIO",[[1,614,"对"]],[614,614],[615,615]]],[1524796890954,["Re@VAIO",[[-1,614,"对"]],[615,615],[614,614]]],[1524796901807,["Re@VAIO",[[1,614,"多对数字求和问题，下"]],[614,614],[624,624]]],[1524796902051,["Re@VAIO",[[-1,622,"，下"]],[624,624],[622,622]]],[1524796907629,["Re@VAIO",[[1,622,"。先将列表谢"]],[622,622],[628,628]]],[1524796908801,["Re@VAIO",[[-1,624,"将列表谢"]],[628,628],[624,624]]],[1524796909788,["Re@VAIO",[[1,624,"些微"]],[624,624],[626,626]]],[1524796916055,["Re@VAIO",[[-1,624,"些微"]],[626,626],[624,624]]],[1524796924474,["Re@VAIO",[[1,624,"写为全括号化的表达式，比如："]],[624,624],[638,638]]],[1524796924976,["Re@VAIO",[[1,638,"\n\n"]],[638,638],[639,639]]],[1524796927136,["Re@VAIO",[[-1,639,"\n"],[1,640,"￥￥"]],[639,639],[641,641]]],[1524796927706,["Re@VAIO",[[-1,640,"￥"]],[641,641],[640,640]]],[1524796927905,["Re@VAIO",[[-1,639,"￥"],[1,640,"\n"]],[640,640],[639,639]]],[1524796930217,["Re@VAIO",[[-1,639,"\n"],[1,640,"$$["]],[639,639],[642,642]]],[1524796931607,["Re@VAIO",[[-1,641,"["]],[642,642],[641,641]]],[1524796993185,[null,[[-1,230,"打"],[1,231,"指出"],[-1,240,"一"],[-1,398,"\n"],[-1,419,"\r"],[1,420,":"],[-1,434,"\r"],[1,435,"0"],[-1,456,"\r"],[1,457,":"],[-1,484,"\r"],[1,485,"i"],[-1,502,"\r\r"],[1,504,"m\n"],[1,532,"\n"]],[230,230],[533,533]]],[1524796993185,[null,[[1,230,"打"],[-1,230,"指出"],[1,241,"一"],[1,398,"\n"],[1,418,"\r"],[-1,418,":"],[1,433,"\r"],[-1,433,"0"],[1,455,"\r"],[-1,455,":"],[1,483,"\r"],[-1,483,"i"],[1,501,"\r\r"],[-1,501,"m\n"],[-1,531,"\n"]],[533,533],[230,230]]],[1524796947947,["Re@VAIO",[[1,641,"((((1+3)+5)+7)+9)$$"]],[641,641],[660,660]]],[1524796948520,["Re@VAIO",[[1,660,"\n\n"]],[660,660],[661,661]]],[1524796961932,["Re@VAIO",[[-1,661,"\n"],[1,662,"也可以反方向来："]],[661,661],[669,669]]],[1524796962722,["Re@VAIO",[[1,669,"\n\n\t"]],[669,669],[671,671]]],[1524796963208,["Re@VAIO",[[1,672,"\n"]],[671,671],[672,672]]],[1524796963736,["Re@VAIO",[[-1,672,"\n"]],[672,672],[671,671]]],[1524796964404,["Re@VAIO",[[-1,670,"\t"]],[671,671],[670,670]]],[1524796965096,["Re@VAIO",[[1,671,"\n"]],[670,670],[671,671]]],[1524796965776,["Re@VAIO",[[-1,671,"\n"]],[671,671],[670,670]]],[1524796967285,["Re@VAIO",[[-1,670,"\n"],[1,671,"￥￥"]],[670,670],[672,672]]],[1524796967904,["Re@VAIO",[[-1,671,"￥"]],[672,672],[671,671]]],[1524796968088,["Re@VAIO",[[-1,670,"￥"],[1,671,"\n"]],[671,671],[670,670]]],[1524796984467,["Re@VAIO",[[-1,670,"\n"],[1,671,"$$(1+(3+(5+(7+9))))$$"]],[670,670],[691,691]]],[1524796984704,["Re@VAIO",[[1,691,"\n\n"]],[691,691],[692,692]]],[1524797053220,[null,[[-1,230,"打"],[1,231,"指出"],[-1,240,"一"],[-1,398,"\n"],[-1,419,"\r"],[1,420,":"],[-1,434,"\r"],[1,435,"0"],[-1,456,"\r"],[1,457,":"],[-1,484,"\r"],[1,485,"i"],[-1,502,"\r\r"],[1,504,"m\n"],[1,532,"\n"]],[230,230],[533,533]]],[1524797053220,[null,[[1,230,"打"],[-1,230,"指出"],[1,241,"一"],[1,398,"\n"],[1,418,"\r"],[-1,418,":"],[1,433,"\r"],[-1,433,"0"],[1,455,"\r"],[-1,455,":"],[1,483,"\r"],[-1,483,"i"],[1,501,"\r\r"],[-1,501,"m\n"],[-1,531,"\n"]],[533,533],[230,230]]],[1524797047568,["Re@VAIO",[[-1,692,"\n"],[1,693,"注意最内部的符合"]],[692,692],[700,700]]],[1524797048128,["Re@VAIO",[[-1,698,"符合"]],[700,700],[698,698]]],[1524797049782,["Re@VAIO",[[1,698,"扩"]],[698,698],[699,699]]],[1524797051026,["Re@VAIO",[[-1,694,"最内部的扩"]],[699,699],[694,694]]],[1524797052219,["Re@VAIO",[[1,694,"最"]],[694,694],[695,695]]],[1524797052340,["Re@VAIO",[[-1,694,"最"]],[695,695],[694,694]]],[1524797052869,["Re@VAIO",[[1,694,"到"]],[694,694],[695,695]]],[1524797113195,[null,[[-1,230,"打"],[1,231,"指出"],[-1,240,"一"],[-1,398,"\n"],[-1,419,"\r"],[1,420,":"],[-1,434,"\r"],[1,435,"0"],[-1,456,"\r"],[1,457,":"],[-1,484,"\r"],[1,485,"i"],[-1,502,"\r\r"],[1,504,"m\n"],[1,532,"\n"]],[230,230],[533,533]]],[1524797113195,[null,[[1,230,"打"],[-1,230,"指出"],[1,241,"一"],[1,398,"\n"],[1,418,"\r"],[-1,418,":"],[1,433,"\r"],[-1,433,"0"],[1,455,"\r"],[-1,455,":"],[1,483,"\r"],[-1,483,"i"],[1,501,"\r\r"],[-1,501,"m\n"],[-1,531,"\n"]],[533,533],[230,230]]],[1524797061006,["Re@VAIO",[[1,695,"最里面的括号组，（）"]],[695,695],[705,705]]],[1524797062956,["Re@VAIO",[[1,704,"7+9"]],[704,704],[707,707]]],[1524797067093,["Re@VAIO",[[1,708,"是"]],[708,708],[709,709]]],[1524797068032,["Re@VAIO",[[-1,708,"是"]],[709,709],[708,708]]],[1524797070362,["Re@VAIO",[[-1,702,"，"]],[703,703],[702,702]]],[1524797087632,["Re@VAIO",[[1,707,"是不需要迭代或者其它特殊结构便可解决的问题。实际上，可以用"]],[707,707],[736,736]]],[1524797096981,["Re@VAIO",[[-1,735,"用"]],[736,736],[735,735]]],[1524797110725,["Re@VAIO",[[1,735,"将求和问题些微"]],[735,735],[742,742]]],[1524797173160,[null,[[-1,230,"打"],[1,231,"指出"],[-1,240,"一"],[-1,398,"\n"],[-1,419,"\r"],[1,420,":"],[-1,434,"\r"],[1,435,"0"],[-1,456,"\r"],[1,457,":"],[-1,484,"\r"],[1,485,"i"],[-1,502,"\r\r"],[1,504,"m\n"],[1,532,"\n"]],[230,230],[533,533]]],[1524797173160,[null,[[1,230,"打"],[-1,230,"指出"],[1,241,"一"],[1,398,"\n"],[1,418,"\r"],[-1,418,":"],[1,433,"\r"],[-1,433,"0"],[1,455,"\r"],[-1,455,":"],[1,483,"\r"],[-1,483,"i"],[1,501,"\r\r"],[-1,501,"m\n"],[-1,531,"\n"]],[533,533],[230,230]]],[1524797113357,["Re@VAIO",[[1,742,"一下"]],[742,742],[744,744]]],[1524797115943,["Re@VAIO",[[-1,740,"些微一下"]],[744,744],[740,740]]],[1524797120934,["Re@VAIO",[[1,740,"写为以下组件"]],[740,740],[746,746]]],[1524797121144,["Re@VAIO",[[-1,744,"组件"]],[746,746],[744,744]]],[1524797123859,["Re@VAIO",[[1,744,"简化形式："]],[744,744],[749,749]]],[1524797124758,["Re@VAIO",[[1,749,"\n\ntotal= (1+(3+(5+(7+9))))total= (1+(3+(5+16)))total= (1+(3+21))total= (1+24)total= 25"]],[749,749],[834,834]]],[1524797129275,["Re@VAIO",[[1,750,"￥"],[-1,756," "],[1,757," "],[-1,780," "],[1,781," "],[-1,801," "],[1,802," "],[-1,818," "],[1,819," "],[-1,831," "],[1,832," ￥"]],[750,750],[752,752]]],[1524797130603,["Re@VAIO",[[-1,750,"￥￥"]],[752,752],[750,750]]],[1524797131771,["Re@VAIO",[[1,750,"$$"]],[750,750],[752,752]]],[1524797132805,["Re@VAIO",[[1,836,"$$"]],[836,836],[838,838]]],[1524797133986,["Re@VAIO",[[1,776,"\n"]],[776,776],[777,777]]],[1524797135799,["Re@VAIO",[[1,798,"\n"]],[798,798],[799,799]]],[1524797137202,["Re@VAIO",[[1,816,"\n"]],[816,816],[817,817]]],[1524797138936,["Re@VAIO",[[1,830,"\n"]],[830,830],[831,831]]],[1524797142480,["Re@VAIO",[[1,843,"\n"]],[842,842],[843,843]]],[1524797150123,["Re@VAIO",[[-1,843,"\n"],[1,844,"如何"]],[843,843],[845,845]]],[1524797233179,[null,[[-1,230,"打"],[1,231,"指出"],[-1,240,"一"],[-1,398,"\n"],[-1,419,"\r"],[1,420,":"],[-1,434,"\r"],[1,435,"0"],[-1,456,"\r"],[1,457,":"],[-1,484,"\r"],[1,485,"i"],[-1,502,"\r\r"],[1,504,"m\n"],[1,533,"\n"],[1,757,"="],[-1,758," "],[1,782,"="],[-1,783," "],[1,804,"="],[-1,805," "],[1,822,"="],[-1,823," "],[1,836,"="],[-1,837,"￥ "],[1,840,"5"],[-1,842,"5"],[1,843,"\n"]],[230,230],[844,844]]],[1524797233180,[null,[[1,230,"打"],[-1,230,"指出"],[1,241,"一"],[1,398,"\n"],[1,418,"\r"],[-1,418,":"],[1,433,"\r"],[-1,433,"0"],[1,455,"\r"],[-1,455,":"],[1,483,"\r"],[-1,483,"i"],[1,501,"\r\r"],[-1,501,"m\n"],[-1,532,"\n"],[-1,757,"="],[1,759," "],[-1,782,"="],[1,784," "],[-1,804,"="],[1,806," "],[-1,822,"="],[1,824," "],[-1,836,"="],[1,838,"￥ "],[-1,839,"5"],[1,842,"5"],[-1,842,"\n"]],[844,844],[230,230]]],[1524797232822,["Re@VAIO",[[1,845,"将"]],[845,845],[846,846]]],[1524797293195,[null,[[-1,230,"打"],[1,231,"指出"],[-1,240,"一"],[-1,398,"\n"],[-1,419,"\r"],[1,420,":"],[-1,434,"\r"],[1,435,"0"],[-1,456,"\r"],[1,457,":"],[-1,484,"\r"],[1,485,"i"],[-1,502,"\r\r"],[1,504,"m\n"],[1,533,"\n"],[1,757,"="],[-1,758," "],[1,782,"="],[-1,783," "],[1,804,"="],[-1,805," "],[1,822,"="],[-1,823," "],[1,836,"="],[-1,837,"￥ "],[1,840,"5"],[-1,842,"5"],[1,843,"\n"]],[230,230],[844,844]]],[1524797293195,[null,[[1,230,"打"],[-1,230,"指出"],[1,241,"一"],[1,398,"\n"],[1,418,"\r"],[-1,418,":"],[1,433,"\r"],[-1,433,"0"],[1,455,"\r"],[-1,455,":"],[1,483,"\r"],[-1,483,"i"],[1,501,"\r\r"],[-1,501,"m\n"],[-1,532,"\n"],[-1,757,"="],[1,759," "],[-1,782,"="],[1,784," "],[-1,804,"="],[1,806," "],[-1,822,"="],[1,824," "],[-1,836,"="],[1,838,"￥ "],[-1,839,"5"],[1,842,"5"],[-1,842,"\n"]],[844,844],[230,230]]],[1524797259222,["Re@VAIO",[[1,846,"这种思想转化为Python程序？首先，将该"]],[846,846],[867,867]]],[1524797259640,["Re@VAIO",[[-1,866,"该"]],[867,867],[866,866]]],[1524797261409,["Re@VAIO",[[1,866,"原始"]],[866,866],[868,868]]],[1524797261670,["Re@VAIO",[[-1,866,"原始"]],[868,868],[866,866]]],[1524797265394,["Re@VAIO",[[1,866,"求和问题以p"]],[866,866],[872,872]]],[1524797265863,["Re@VAIO",[[-1,871,"p"]],[872,872],[871,871]]],[1524797270515,["Re@VAIO",[[1,871,"Python列表的角度"]],[871,871],[882,882]]],[1524797271136,["Re@VAIO",[[-1,880,"角度"]],[882,882],[880,880]]],[1524797273224,["Re@VAIO",[[-1,870,"以"]],[871,871],[870,870]]],[1524797274050,["Re@VAIO",[[1,870,"按"]],[870,870],[871,871]]],[1524797276676,["Re@VAIO",[[1,880,"方式来考虑"]],[880,880],[885,885]]],[1524797277727,["Re@VAIO",[[-1,883,"考虑"]],[885,885],[883,883]]],[1524797279766,["Re@VAIO",[[1,883,"考虑。"]],[883,883],[886,886]]],[1524797353181,[null,[[-1,230,"打"],[1,231,"指出"],[-1,240,"一"],[-1,398,"\n"],[-1,419,"\r"],[1,420,":"],[-1,434,"\r"],[1,435,"0"],[-1,456,"\r"],[1,457,":"],[-1,484,"\r"],[1,485,"i"],[-1,502,"\r\r"],[1,504,"m\n"],[1,533,"\n"],[1,757,"="],[-1,758," "],[1,782,"="],[-1,783," "],[1,804,"="],[-1,805," "],[1,822,"="],[-1,823," "],[1,836,"="],[-1,837,"￥ "],[1,840,"5"],[-1,842,"5"],[1,843,"\n"]],[230,230],[844,844]]],[1524797353181,[null,[[1,230,"打"],[-1,230,"指出"],[1,241,"一"],[1,398,"\n"],[1,418,"\r"],[-1,418,":"],[1,433,"\r"],[-1,433,"0"],[1,455,"\r"],[-1,455,":"],[1,483,"\r"],[-1,483,"i"],[1,501,"\r\r"],[-1,501,"m\n"],[-1,532,"\n"],[-1,757,"="],[1,759," "],[-1,782,"="],[1,784," "],[-1,804,"="],[1,806," "],[-1,822,"="],[1,824," "],[-1,836,"="],[1,838,"￥ "],[-1,839,"5"],[1,842,"5"],[-1,842,"\n"]],[844,844],[230,230]]],[1524797329458,["Re@VAIO",[[1,886,"可能读者会认为求和"]],[886,886],[895,895]]],[1524797329759,["Re@VAIO",[[-1,893,"求和"]],[895,895],[893,893]]],[1524797330410,["Re@VAIO",[[1,893,"第"]],[893,893],[894,894]]],[1524797330742,["Re@VAIO",[[-1,893,"第"]],[894,894],[893,893]]],[1524797343817,["Re@VAIO",[[1,893,"对列表的求和即是列表中第一个元素numList[0["]],[893,893],[919,919]]],[1524797344871,["Re@VAIO",[[-1,918,"["]],[919,919],[918,918]]],[1524797346376,["Re@VAIO",[[1,918,"]yu"]],[918,918],[921,921]]],[1524797346938,["Re@VAIO",[[-1,919,"yu"]],[921,921],[919,919]]],[1524797350043,["Re@VAIO",[[1,919,"与其它所"]],[919,919],[923,923]]],[1524797350474,["Re@VAIO",[[-1,922,"所"]],[923,923],[922,922]]],[1524797351655,["Re@VAIO",[[1,922,"元素"]],[922,922],[924,924]]],[1524797351895,["Re@VAIO",[[-1,922,"元素"]],[924,924],[922,922]]],[1524797352754,["Re@VAIO",[[1,922,"所有"]],[922,922],[924,924]]],[1524797413204,[null,[[-1,230,"打"],[1,231,"指出"],[-1,240,"一"],[-1,398,"\n"],[-1,419,"\r"],[1,420,":"],[-1,434,"\r"],[1,435,"0"],[-1,456,"\r"],[1,457,":"],[-1,484,"\r"],[1,485,"i"],[-1,502,"\r\r"],[1,504,"m\n"],[1,533,"\n"],[1,757,"="],[-1,758," "],[1,782,"="],[-1,783," "],[1,804,"="],[-1,805," "],[1,822,"="],[-1,823," "],[1,836,"="],[-1,837,"￥ "],[1,840,"5"],[-1,842,"5"],[1,843,"\n"]],[230,230],[844,844]]],[1524797413205,[null,[[1,230,"打"],[-1,230,"指出"],[1,241,"一"],[1,398,"\n"],[1,418,"\r"],[-1,418,":"],[1,433,"\r"],[-1,433,"0"],[1,455,"\r"],[-1,455,":"],[1,483,"\r"],[-1,483,"i"],[1,501,"\r\r"],[-1,501,"m\n"],[-1,532,"\n"],[-1,757,"="],[1,759," "],[-1,782,"="],[1,784," "],[-1,804,"="],[1,806," "],[-1,822,"="],[1,824," "],[-1,836,"="],[1,838,"￥ "],[-1,839,"5"],[1,842,"5"],[-1,842,"\n"]],[844,844],[230,230]]],[1524797360274,["Re@VAIO",[[1,924,"元素numList[1:]之和。"]],[924,924],[940,940]]],[1524797360976,["Re@VAIO",[[-1,939,"。"]],[940,940],[939,939]]],[1524797362049,["Re@VAIO",[[1,939,"，即"]],[939,939],[941,941]]],[1524797362223,["Re@VAIO",[[-1,940,"即"]],[941,941],[940,940]]],[1524797370243,["Re@VAIO",[[1,940,"以函数形式写出即为："]],[940,940],[950,950]]],[1524797370470,["Re@VAIO",[[1,950,"\n\n"]],[950,950],[951,951]]],[1524797379276,["Re@VAIO",[[-1,951,"\n"],[1,952,"$$listSum(numList)=first(numList)+listSum(rest(numList))E"]],[951,951],[1008,1008]]],[1524797380048,["Re@VAIO",[[-1,1007,"E"]],[1008,1008],[1007,1007]]],[1524797380733,["Re@VAIO",[[1,1007,"$$"]],[1007,1007],[1009,1009]]],[1524797381478,["Re@VAIO",[[1,1009,"\n\n"]],[1009,1009],[1010,1010]]],[1524797411877,["Re@VAIO",[[-1,1010,"\n"],[1,1011,"在以上表达式中，first(numList)返回"]],[1010,1010],[1034,1034]]],[1524797473181,[null,[[-1,230,"打"],[1,231,"指出"],[-1,240,"一"],[-1,398,"\n"],[-1,419,"\r"],[1,420,":"],[-1,434,"\r"],[1,435,"0"],[-1,456,"\r"],[1,457,":"],[-1,484,"\r"],[1,485,"i"],[-1,502,"\r\r"],[1,504,"m\n"],[1,533,"\n"],[1,757,"="],[-1,758," "],[1,782,"="],[-1,783," "],[1,804,"="],[-1,805," "],[1,822,"="],[-1,823," "],[1,836,"="],[-1,837,"￥ "],[1,840,"5"],[-1,842,"5"],[1,843,"\n"]],[230,230],[844,844]]],[1524797473182,[null,[[1,230,"打"],[-1,230,"指出"],[1,241,"一"],[1,398,"\n"],[1,418,"\r"],[-1,418,":"],[1,433,"\r"],[-1,433,"0"],[1,455,"\r"],[-1,455,":"],[1,483,"\r"],[-1,483,"i"],[1,501,"\r\r"],[-1,501,"m\n"],[-1,532,"\n"],[-1,757,"="],[1,759," "],[-1,782,"="],[1,784," "],[-1,804,"="],[1,806," "],[-1,822,"="],[1,824," "],[-1,836,"="],[1,838,"￥ "],[-1,839,"5"],[1,842,"5"],[-1,842,"\n"]],[844,844],[230,230]]],[1524797420470,["Re@VAIO",[[1,1036,"中第一个元素，而rest(numli"]],[1036,1036],[1054,1054]]],[1524797420927,["Re@VAIO",[[-1,1052,"li"]],[1054,1054],[1052,1052]]],[1524797425924,["Re@VAIO",[[1,1052,"List)烦我会的是"]],[1052,1052],[1062,1062]]],[1524797428876,["Re@VAIO",[[-1,1057,"烦我会的是"]],[1062,1062],[1057,1057]]],[1524797433108,["Re@VAIO",[[1,1057,"返回的是除了第一"]],[1057,1057],[1065,1065]]],[1524797433766,["Re@VAIO",[[-1,1061,"除了第一"]],[1065,1065],[1061,1061]]],[1524797449279,["Re@VAIO",[[1,1061,"去除了第一个元素的原列表（）"]],[1061,1061],[1075,1075]]],[1524797451365,["Re@VAIO",[[1,1074,"也是一个列表"]],[1074,1074],[1080,1080]]],[1524797465848,["Re@VAIO",[[1,1081,"。用Python表达式可以些微"]],[1081,1081],[1096,1096]]],[1524797466645,["Re@VAIO",[[-1,1094,"些微"]],[1096,1096],[1094,1094]]],[1524797472132,["Re@VAIO",[[1,1094,"写为如可执行代码2所示"]],[1094,1094],[1105,1105]]],[1524797473048,["Re@VAIO",[[-1,1103,"所示"]],[1105,1105],[1103,1103]]],[1524797533223,[null,[[-1,230,"打"],[1,231,"指出"],[-1,240,"一"],[-1,398,"\n"],[-1,419,"\r"],[1,420,":"],[-1,434,"\r"],[1,435,"0"],[-1,456,"\r"],[1,457,":"],[-1,484,"\r"],[1,485,"i"],[-1,502,"\r\r"],[1,504,"m\n"],[1,533,"\n"],[1,757,"="],[-1,758," "],[1,782,"="],[-1,783," "],[1,804,"="],[-1,805," "],[1,822,"="],[-1,823," "],[1,836,"="],[-1,837,"￥ "],[1,840,"5"],[-1,842,"5"],[1,843,"\n"],[1,1034,"列表"],[-1,1050,"li"]],[230,230],[1050,1050]]],[1524797533223,[null,[[1,230,"打"],[-1,230,"指出"],[1,241,"一"],[1,398,"\n"],[1,418,"\r"],[-1,418,":"],[1,433,"\r"],[-1,433,"0"],[1,455,"\r"],[-1,455,":"],[1,483,"\r"],[-1,483,"i"],[1,501,"\r\r"],[-1,501,"m\n"],[-1,532,"\n"],[-1,757,"="],[1,759," "],[-1,782,"="],[1,784," "],[-1,804,"="],[1,806," "],[-1,822,"="],[1,824," "],[-1,836,"="],[1,838,"￥ "],[-1,839,"5"],[1,842,"5"],[-1,842,"\n"],[-1,1034,"列表"],[1,1052,"li"]],[1050,1050],[230,230]]],[1524797473791,["Re@VAIO",[[1,1103,"；"]],[1103,1103],[1104,1104]]],[1524797474167,["Re@VAIO",[[-1,1103,"；"]],[1104,1104],[1103,1103]]],[1524797474439,["Re@VAIO",[[1,1103,"："]],[1103,1103],[1104,1104]]],[1524797474744,["Re@VAIO",[[1,1104,"\n\n"]],[1104,1104],[1105,1105]]],[1524797475309,["Re@VAIO",[[1,1106,"\n"]],[1105,1105],[1106,1106]]],[1524797492497,["Re@VAIO",[[-1,1106,"\n"],[1,1107,"**可执行代码2：递归求和（）"]],[1106,1106],[1121,1121]]],[1524797496192,["Re@VAIO",[[1,1120,"第一"]],[1120,1120],[1122,1122]]],[1524797496582,["Re@VAIO",[[-1,1120,"第一"]],[1122,1122],[1120,1120]]],[1524797497874,["Re@VAIO",[[1,1120,"1"]],[1120,1120],[1121,1121]]],[1524797498239,["Re@VAIO",[[-1,1120,"1"]],[1121,1121],[1120,1120]]],[1524797501103,["Re@VAIO",[[1,1120,"第一次递归"]],[1120,1120],[1125,1125]]],[1524797504520,["Re@VAIO",[[1,1108," "]],[1108,1108],[1109,1109]]],[1524797506556,["Re@VAIO",[[1,1127," **"]],[1127,1127],[1130,1130]]],[1524797507320,["Re@VAIO",[[1,1130,"\n\n"]],[1130,1130],[1131,1131]]],[1524797511424,["Re@VAIO",[[-1,1131,"\n"],[1,1132,"```PYthon"]],[1131,1131],[1140,1140]]],[1524797512254,["Re@VAIO",[[-1,1136,"thon"]],[1140,1140],[1136,1136]]],[1524797512644,["Re@VAIO",[[1,1136,"y"]],[1136,1136],[1137,1137]]],[1524797513071,["Re@VAIO",[[-1,1135,"Yy"]],[1137,1137],[1135,1135]]],[1524797513736,["Re@VAIO",[[1,1135,"ython"]],[1135,1135],[1140,1140]]],[1524797517664,["Re@VAIO",[[1,1140,"\n\ndef listsum(numList):\r\n   if len(numList) == 1:\r\n        return numList[0]\r\n   else:\r\n        return numList[0] + listsum(numList[1:])\r\n\r\nprint(listsum([1,3,5,7,9]))"]],[1140,1140],[1306,1306]]],[1524797518759,["Re@VAIO",[[-1,1162,"\r"],[-1,1188,"\r"],[-1,1215,"\r"],[-1,1225,"\r"],[-1,1275,"\r"],[-1,1277,"\r"],[1,1307,"\n\n"]],[1301,1301],[1302,1302]]],[1524797519505,["Re@VAIO",[[-1,1302,"\n"],[1,1303,"```"]],[1302,1302],[1305,1305]]],[1524797520182,["Re@VAIO",[[1,1305,"\n\n"]],[1305,1305],[1306,1306]]],[1524797593217,[null,[[-1,230,"打"],[1,231,"指出"],[-1,240,"一"],[-1,398,"\n"],[-1,419,"\r"],[1,420,":"],[-1,434,"\r"],[1,435,"0"],[-1,456,"\r"],[1,457,":"],[-1,484,"\r"],[1,485,"i"],[-1,502,"\r\r"],[1,504,"m\n"],[1,533,"\n"],[1,757,"="],[-1,758," "],[1,782,"="],[-1,783," "],[1,804,"="],[-1,805," "],[1,822,"="],[-1,823," "],[1,836,"="],[-1,837,"￥ "],[1,840,"5"],[-1,842,"5"],[1,843,"\n"],[1,1034,"列表"],[-1,1050,"li"],[-1,1141,"\n"],[-1,1162,"\r"],[1,1163,":"],[-1,1187,"\r"],[1,1188,":"],[-1,1213,"\r"],[1,1214,"]"],[-1,1222,"\r"],[1,1223,":"],[-1,1271,"\r\r"],[1,1273,")\n"],[1,1301,"\n"]],[230,230],[1302,1302]]],[1524797593218,[null,[[1,230,"打"],[-1,230,"指出"],[1,241,"一"],[1,398,"\n"],[1,418,"\r"],[-1,418,":"],[1,433,"\r"],[-1,433,"0"],[1,455,"\r"],[-1,455,":"],[1,483,"\r"],[-1,483,"i"],[1,501,"\r\r"],[-1,501,"m\n"],[-1,532,"\n"],[-1,757,"="],[1,759," "],[-1,782,"="],[1,784," "],[-1,804,"="],[1,806," "],[-1,822,"="],[1,824," "],[-1,836,"="],[1,838,"￥ "],[-1,839,"5"],[1,842,"5"],[-1,842,"\n"],[-1,1034,"列表"],[1,1052,"li"],[1,1141,"\n"],[1,1161,"\r"],[-1,1161,":"],[1,1186,"\r"],[-1,1186,":"],[1,1212,"\r"],[-1,1212,"]"],[1,1221,"\r"],[-1,1221,":"],[1,1270,"\r\r"],[-1,1270,")\n"],[-1,1300,"\n"]],[1302,1302],[230,230]]],[1524797541078,["Re@VAIO",[[-1,1306,"\n"],[1,1307,"在这"]],[1306,1306],[1308,1308]]],[1524797541246,["Re@VAIO",[[-1,1307,"这"]],[1308,1308],[1307,1307]]],[1524797547462,["Re@VAIO",[[1,1307,"这段代码中，有些地方需要注意"]],[1307,1307],[1321,1321]]],[1524797713225,[null,[[-1,230,"打"],[1,231,"指出"],[-1,240,"一"],[-1,398,"\n"],[-1,419,"\r"],[1,420,":"],[-1,434,"\r"],[1,435,"0"],[-1,456,"\r"],[1,457,":"],[-1,484,"\r"],[1,485,"i"],[-1,502,"\r\r"],[1,504,"m\n"],[1,533,"\n"],[1,757,"="],[-1,758," "],[1,782,"="],[-1,783," "],[1,804,"="],[-1,805," "],[1,822,"="],[-1,823," "],[1,836,"="],[-1,837,"￥ "],[1,840,"5"],[-1,842,"5"],[1,843,"\n"],[1,1034,"列表"],[-1,1050,"li"],[-1,1141,"\n"],[-1,1162,"\r"],[1,1163,":"],[-1,1187,"\r"],[1,1188,":"],[-1,1213,"\r"],[1,1214,"]"],[-1,1222,"\r"],[1,1223,":"],[-1,1271,"\r\r"],[1,1273,")\n"],[1,1301,"\n"]],[230,230],[1302,1302]]],[1524797713225,[null,[[1,230,"打"],[-1,230,"指出"],[1,241,"一"],[1,398,"\n"],[1,418,"\r"],[-1,418,":"],[1,433,"\r"],[-1,433,"0"],[1,455,"\r"],[-1,455,":"],[1,483,"\r"],[-1,483,"i"],[1,501,"\r\r"],[-1,501,"m\n"],[-1,532,"\n"],[-1,757,"="],[1,759," "],[-1,782,"="],[1,784," "],[-1,804,"="],[1,806," "],[-1,822,"="],[1,824," "],[-1,836,"="],[1,838,"￥ "],[-1,839,"5"],[1,842,"5"],[-1,842,"\n"],[-1,1034,"列表"],[1,1052,"li"],[1,1141,"\n"],[1,1161,"\r"],[-1,1161,":"],[1,1186,"\r"],[-1,1186,":"],[1,1212,"\r"],[-1,1212,"]"],[1,1221,"\r"],[-1,1221,":"],[1,1270,"\r\r"],[-1,1270,")\n"],[-1,1300,"\n"]],[1302,1302],[230,230]]],[1524797693078,["Re@VAIO",[[1,1321,"。首先，在第二行先坚持啊列表"]],[1321,1321],[1335,1335]]],[1524797697407,["Re@VAIO",[[-1,1326,"第二行先坚持啊列表"]],[1335,1335],[1326,1326]]],[1524797705826,["Re@VAIO",[[1,1326,"行2检查了列表是否仅有1各元素"]],[1326,1326],[1341,1341]]],[1524797708778,["Re@VAIO",[[-1,1338,"各元素"]],[1341,1341],[1338,1338]]],[1524797710926,["Re@VAIO",[[1,1338,"个元素"]],[1338,1338],[1341,1341]]],[1524797773235,[null,[[-1,230,"打"],[1,231,"指出"],[-1,240,"一"],[-1,398,"\n"],[-1,419,"\r"],[1,420,":"],[-1,434,"\r"],[1,435,"0"],[-1,456,"\r"],[1,457,":"],[-1,484,"\r"],[1,485,"i"],[-1,502,"\r\r"],[1,504,"m\n"],[1,533,"\n"],[1,757,"="],[-1,758," "],[1,782,"="],[-1,783," "],[1,804,"="],[-1,805," "],[1,822,"="],[-1,823," "],[1,836,"="],[-1,837,"￥ "],[1,840,"5"],[-1,842,"5"],[1,843,"\n"],[1,1034,"列表"],[-1,1050,"li"],[-1,1141,"\n"],[-1,1162,"\r"],[1,1163,":"],[-1,1187,"\r"],[1,1188,":"],[-1,1213,"\r"],[1,1214,"]"],[-1,1222,"\r"],[1,1223,":"],[-1,1271,"\r\r"],[1,1273,")\n"],[1,1301,"\n"]],[230,230],[1302,1302]]],[1524797773235,[null,[[1,230,"打"],[-1,230,"指出"],[1,241,"一"],[1,398,"\n"],[1,418,"\r"],[-1,418,":"],[1,433,"\r"],[-1,433,"0"],[1,455,"\r"],[-1,455,":"],[1,483,"\r"],[-1,483,"i"],[1,501,"\r\r"],[-1,501,"m\n"],[-1,532,"\n"],[-1,757,"="],[1,759," "],[-1,782,"="],[1,784," "],[-1,804,"="],[1,806," "],[-1,822,"="],[1,824," "],[-1,836,"="],[1,838,"￥ "],[-1,839,"5"],[1,842,"5"],[-1,842,"\n"],[-1,1034,"列表"],[1,1052,"li"],[1,1141,"\n"],[1,1161,"\r"],[-1,1161,":"],[1,1186,"\r"],[-1,1186,":"],[1,1212,"\r"],[-1,1212,"]"],[1,1221,"\r"],[-1,1221,":"],[1,1270,"\r\r"],[-1,1270,")\n"],[-1,1300,"\n"]],[1302,1302],[230,230]]],[1524797726897,["Re@VAIO",[[1,1341,"。这一个"]],[1341,1341],[1345,1345]]],[1524797727750,["Re@VAIO",[[-1,1344,"个"]],[1345,1345],[1344,1344]]],[1524797731067,["Re@VAIO",[[1,1344,"判定非常"]],[1344,1344],[1348,1348]]],[1524797731935,["Re@VAIO",[[-1,1346,"非常"]],[1348,1348],[1346,1346]]],[1524797748145,["Re@VAIO",[[1,1346,"很关键，它是函数结束的控制语句。"]],[1346,1346],[1362,1362]]],[1524797753207,["Re@VAIO",[[1,1352,"控制"]],[1352,1352],[1354,1354]]],[1524797755610,["Re@VAIO",[[-1,1359,"控制"]],[1361,1361],[1359,1359]]],[1524797756943,["Re@VAIO",[[1,1359,"必要"]],[1359,1359],[1361,1361]]],[1524797770321,["Re@VAIO",[[1,1364,"长度为1的列表求和"]],[1364,1364],[1373,1373]]],[1524797833236,[null,[[-1,230,"打"],[1,231,"指出"],[-1,240,"一"],[-1,398,"\n"],[-1,419,"\r"],[1,420,":"],[-1,434,"\r"],[1,435,"0"],[-1,456,"\r"],[1,457,":"],[-1,484,"\r"],[1,485,"i"],[-1,502,"\r\r"],[1,504,"m\n"],[1,533,"\n"],[1,757,"="],[-1,758," "],[1,782,"="],[-1,783," "],[1,804,"="],[-1,805," "],[1,822,"="],[-1,823," "],[1,836,"="],[-1,837,"￥ "],[1,840,"5"],[-1,842,"5"],[1,843,"\n"],[1,1034,"列表"],[-1,1050,"li"],[-1,1141,"\n"],[-1,1162,"\r"],[1,1163,":"],[-1,1187,"\r"],[1,1188,":"],[-1,1213,"\r"],[1,1214,"]"],[-1,1222,"\r"],[1,1223,":"],[-1,1271,"\r\r"],[1,1273,")\n"],[1,1301,"\n"]],[230,230],[1302,1302]]],[1524797833236,[null,[[1,230,"打"],[-1,230,"指出"],[1,241,"一"],[1,398,"\n"],[1,418,"\r"],[-1,418,":"],[1,433,"\r"],[-1,433,"0"],[1,455,"\r"],[-1,455,":"],[1,483,"\r"],[-1,483,"i"],[1,501,"\r\r"],[-1,501,"m\n"],[-1,532,"\n"],[-1,757,"="],[1,759," "],[-1,782,"="],[1,784," "],[-1,804,"="],[1,806," "],[-1,822,"="],[1,824," "],[-1,836,"="],[1,838,"￥ "],[-1,839,"5"],[1,842,"5"],[-1,842,"\n"],[-1,1034,"列表"],[1,1052,"li"],[1,1141,"\n"],[1,1161,"\r"],[-1,1161,":"],[1,1186,"\r"],[-1,1186,":"],[1,1212,"\r"],[-1,1212,"]"],[1,1221,"\r"],[-1,1221,":"],[1,1270,"\r\r"],[-1,1270,")\n"],[-1,1300,"\n"]],[1302,1302],[230,230]]],[1524797793572,["Re@VAIO",[[1,1373,"显然便是其本身。其次，在行5该函数调用了它自己本身。这边"]],[1373,1373],[1401,1401]]],[1524797795284,["Re@VAIO",[[-1,1398,"。这边"]],[1401,1401],[1398,1398]]],[1524797800671,["Re@VAIO",[[1,1398,"。这是"]],[1398,1398],[1401,1401]]],[1524797803158,["Re@VAIO",[[-1,1400,"是"]],[1401,1401],[1400,1400]]],[1524797808813,["Re@VAIO",[[1,1400,"便是将listsum"]],[1400,1400],[1410,1410]]],[1524797820205,["Re@VAIO",[[-1,1402,"将"]],[1403,1403],[1402,1402]]],[1524797823475,["Re@VAIO",[[1,1402,"将"]],[1402,1402],[1403,1403]]],[1524797829954,["Re@VAIO",[[1,1410,"归为递归算法的源于in。"]],[1410,1410],[1422,1422]]],[1524797831652,["Re@VAIO",[[-1,1417,"源于in。"]],[1422,1422],[1417,1417]]],[1524797893255,[null,[[-1,230,"打"],[1,231,"指出"],[-1,240,"一"],[-1,398,"\n"],[-1,419,"\r"],[1,420,":"],[-1,434,"\r"],[1,435,"0"],[-1,456,"\r"],[1,457,":"],[-1,484,"\r"],[1,485,"i"],[-1,502,"\r\r"],[1,504,"m\n"],[1,533,"\n"],[1,757,"="],[-1,758," "],[1,782,"="],[-1,783," "],[1,804,"="],[-1,805," "],[1,822,"="],[-1,823," "],[1,836,"="],[-1,837,"￥ "],[1,840,"5"],[-1,842,"5"],[1,843,"\n"],[1,1034,"列表"],[-1,1050,"li"],[-1,1141,"\n"],[-1,1162,"\r"],[1,1163,":"],[-1,1187,"\r"],[1,1188,":"],[-1,1213,"\r"],[1,1214,"]"],[-1,1222,"\r"],[1,1223,":"],[-1,1271,"\r\r"],[1,1273,")\n"],[1,1301,"\n"]],[230,230],[1302,1302]]],[1524797893256,[null,[[1,230,"打"],[-1,230,"指出"],[1,241,"一"],[1,398,"\n"],[1,418,"\r"],[-1,418,":"],[1,433,"\r"],[-1,433,"0"],[1,455,"\r"],[-1,455,":"],[1,483,"\r"],[-1,483,"i"],[1,501,"\r\r"],[-1,501,"m\n"],[-1,532,"\n"],[-1,757,"="],[1,759," "],[-1,782,"="],[1,784," "],[-1,804,"="],[1,806," "],[-1,822,"="],[1,824," "],[-1,836,"="],[1,838,"￥ "],[-1,839,"5"],[1,842,"5"],[-1,842,"\n"],[-1,1034,"列表"],[1,1052,"li"],[1,1141,"\n"],[1,1161,"\r"],[-1,1161,":"],[1,1186,"\r"],[-1,1186,":"],[1,1212,"\r"],[-1,1212,"]"],[1,1221,"\r"],[-1,1221,":"],[1,1270,"\r\r"],[-1,1270,")\n"],[-1,1300,"\n"]],[1302,1302],[230,230]]],[1524797844083,["Re@VAIO",[[1,1417,"原因。递归函数是一种调用自身的函数。"]],[1417,1417],[1435,1435]]],[1524797844357,["Re@VAIO",[[1,1435,"\n\n"]],[1435,1435],[1436,1436]]],[1524797844542,["Re@VAIO",[[1,1437,"\n"]],[1436,1436],[1437,1437]]],[1524797860053,["Re@VAIO",[[-1,1437,"\n"],[1,1438,"图1演示了计算"]],[1437,1437],[1444,1444]]],[1524797860949,["Re@VAIO",[[-1,1442,"计算"]],[1444,1444],[1442,1442]]],[1524797866542,["Re@VAIO",[[1,1442,"对列表[1,3,5,7,8"]],[1442,1442],[1455,1455]]],[1524797867416,["Re@VAIO",[[-1,1454,"8"]],[1455,1455],[1454,1454]]],[1524797891481,["Re@VAIO",[[1,1454,"9]求和的递归调用。读者可以将词"]],[1454,1454],[1470,1470]]],[1524797891579,["Re@VAIO",[[-1,1469,"词"]],[1470,1470],[1469,1469]]],[1524797953220,[null,[[-1,230,"打"],[1,231,"指出"],[-1,240,"一"],[-1,398,"\n"],[-1,419,"\r"],[1,420,":"],[-1,434,"\r"],[1,435,"0"],[-1,456,"\r"],[1,457,":"],[-1,484,"\r"],[1,485,"i"],[-1,502,"\r\r"],[1,504,"m\n"],[1,533,"\n"],[1,757,"="],[-1,758," "],[1,782,"="],[-1,783," "],[1,804,"="],[-1,805," "],[1,822,"="],[-1,823," "],[1,836,"="],[-1,837,"￥ "],[1,840,"5"],[-1,842,"5"],[1,843,"\n"],[1,1034,"列表"],[-1,1050,"li"],[-1,1141,"\n"],[-1,1162,"\r"],[1,1163,":"],[-1,1187,"\r"],[1,1188,":"],[-1,1213,"\r"],[1,1214,"]"],[-1,1222,"\r"],[1,1223,":"],[-1,1271,"\r\r"],[1,1273,")\n"],[1,1301,"\n"]],[230,230],[1302,1302]]],[1524797953220,[null,[[1,230,"打"],[-1,230,"指出"],[1,241,"一"],[1,398,"\n"],[1,418,"\r"],[-1,418,":"],[1,433,"\r"],[-1,433,"0"],[1,455,"\r"],[-1,455,":"],[1,483,"\r"],[-1,483,"i"],[1,501,"\r\r"],[-1,501,"m\n"],[-1,532,"\n"],[-1,757,"="],[1,759," "],[-1,782,"="],[1,784," "],[-1,804,"="],[1,806," "],[-1,822,"="],[1,824," "],[-1,836,"="],[1,838,"￥ "],[-1,839,"5"],[1,842,"5"],[-1,842,"\n"],[-1,1034,"列表"],[1,1052,"li"],[1,1141,"\n"],[1,1161,"\r"],[-1,1161,":"],[1,1186,"\r"],[-1,1186,":"],[1,1212,"\r"],[-1,1212,"]"],[1,1221,"\r"],[-1,1221,":"],[1,1270,"\r\r"],[-1,1270,")\n"],[-1,1300,"\n"]],[1302,1302],[230,230]]],[1524797893500,["Re@VAIO",[[-1,1469,"浙西"]],[1471,1471],[1469,1469]]],[1524797902179,["Re@VAIO",[[1,1469,"这些有序调用认为是以"]],[1469,1469],[1479,1479]]],[1524797902260,["Re@VAIO",[[-1,1478,"以"]],[1479,1479],[1478,1478]]],[1524797941081,["Re@VAIO",[[1,1478,"一次次的问题简化过程。每调用一次，便解决了一个更小的我难题，"]],[1478,1478],[1508,1508]]],[1524797941937,["Re@VAIO",[[-1,1504,"我难题，"]],[1508,1508],[1504,1504]]],[1524797942585,["Re@VAIO",[[1,1504,"问题"]],[1504,1504],[1506,1506]]],[1524797943620,["Re@VAIO",[[-1,1503,"的问题"]],[1506,1506],[1503,1503]]],[1524797948324,["Re@VAIO",[[1,1503,"更容易的问题"]],[1503,1503],[1509,1509]]],[1524798013241,[null,[[-1,230,"打"],[1,231,"指出"],[-1,240,"一"],[-1,398,"\n"],[-1,419,"\r"],[1,420,":"],[-1,434,"\r"],[1,435,"0"],[-1,456,"\r"],[1,457,":"],[-1,484,"\r"],[1,485,"i"],[-1,502,"\r\r"],[1,504,"m\n"],[1,533,"\n"],[1,757,"="],[-1,758," "],[1,782,"="],[-1,783," "],[1,804,"="],[-1,805," "],[1,822,"="],[-1,823," "],[1,836,"="],[-1,837,"￥ "],[1,840,"5"],[-1,842,"5"],[1,843,"\n"],[1,1034,"列表"],[-1,1050,"li"],[-1,1141,"\n"],[-1,1162,"\r"],[1,1163,":"],[-1,1187,"\r"],[1,1188,":"],[-1,1213,"\r"],[1,1214,"]"],[-1,1222,"\r"],[1,1223,":"],[-1,1271,"\r\r"],[1,1273,")\n"],[1,1301,"\n"]],[230,230],[1302,1302]]],[1524798013241,[null,[[1,230,"打"],[-1,230,"指出"],[1,241,"一"],[1,398,"\n"],[1,418,"\r"],[-1,418,":"],[1,433,"\r"],[-1,433,"0"],[1,455,"\r"],[-1,455,":"],[1,483,"\r"],[-1,483,"i"],[1,501,"\r\r"],[-1,501,"m\n"],[-1,532,"\n"],[-1,757,"="],[1,759," "],[-1,782,"="],[1,784," "],[-1,804,"="],[1,806," "],[-1,822,"="],[1,824," "],[-1,836,"="],[1,838,"￥ "],[-1,839,"5"],[1,842,"5"],[-1,842,"\n"],[-1,1034,"列表"],[1,1052,"li"],[1,1141,"\n"],[1,1161,"\r"],[-1,1161,":"],[1,1186,"\r"],[-1,1186,":"],[1,1212,"\r"],[-1,1212,"]"],[1,1221,"\r"],[-1,1221,":"],[1,1270,"\r\r"],[-1,1270,")\n"],[-1,1300,"\n"]],[1302,1302],[230,230]]],[1524797953979,["Re@VAIO",[[-1,1496,"解决"]],[1498,1498],[1496,1496]]],[1524797956990,["Re@VAIO",[[1,1496,"转化为解决"]],[1496,1496],[1501,1501]]],[1524797957883,["Re@VAIO",[[-1,1501,"了"]],[1502,1502],[1501,1501]]],[1524797970305,["Re@VAIO",[[1,1511,"，知道问题规模不能再缩小。"]],[1511,1511],[1524,1524]]],[1524797970622,["Re@VAIO",[[1,1524,"\n\n"]],[1524,1524],[1525,1525]]],[1524797970830,["Re@VAIO",[[1,1526,"\n"]],[1525,1525],[1526,1526]]],[1524797976567,["Re@VAIO",[[1,1526,"![image](http://interactivepython.org/courselib/static/pythonds/_images/sumlistIn.png)"]],[1526,1526],[1612,1612]]],[1524797977547,["Re@VAIO",[[1,1613,"\n"]],[1612,1612],[1613,1613]]],[1524797977796,["Re@VAIO",[[1,1614,"\n"]],[1613,1613],[1614,1614]]],[1524798193264,[null,[[-1,230,"打"],[1,231,"指出"],[-1,240,"一"],[-1,398,"\n"],[-1,419,"\r"],[1,420,":"],[-1,434,"\r"],[1,435,"0"],[-1,456,"\r"],[1,457,":"],[-1,484,"\r"],[1,485,"i"],[-1,502,"\r\r"],[1,504,"m\n"],[1,533,"\n"],[1,757,"="],[-1,758," "],[1,782,"="],[-1,783," "],[1,804,"="],[-1,805," "],[1,822,"="],[-1,823," "],[1,836,"="],[-1,837,"￥ "],[1,840,"5"],[-1,842,"5"],[1,843,"\n"],[1,1034,"列表"],[-1,1050,"li"],[-1,1141,"\n"],[-1,1162,"\r"],[1,1163,":"],[-1,1187,"\r"],[1,1188,":"],[-1,1213,"\r"],[1,1214,"]"],[-1,1222,"\r"],[1,1223,":"],[-1,1271,"\r\r"],[1,1273,")\n"],[1,1301,"\n"]],[230,230],[1302,1302]]],[1524798193265,[null,[[1,230,"打"],[-1,230,"指出"],[1,241,"一"],[1,398,"\n"],[1,418,"\r"],[-1,418,":"],[1,433,"\r"],[-1,433,"0"],[1,455,"\r"],[-1,455,":"],[1,483,"\r"],[-1,483,"i"],[1,501,"\r\r"],[-1,501,"m\n"],[-1,532,"\n"],[-1,757,"="],[1,759," "],[-1,782,"="],[1,784," "],[-1,804,"="],[1,806," "],[-1,822,"="],[1,824," "],[-1,836,"="],[1,838,"￥ "],[-1,839,"5"],[1,842,"5"],[-1,842,"\n"],[-1,1034,"列表"],[1,1052,"li"],[1,1141,"\n"],[1,1161,"\r"],[-1,1161,":"],[1,1186,"\r"],[-1,1186,":"],[1,1212,"\r"],[-1,1212,"]"],[1,1221,"\r"],[-1,1221,":"],[1,1270,"\r\r"],[-1,1270,")\n"],[-1,1300,"\n"]],[1302,1302],[230,230]]],[1524798183613,["Re@VAIO",[[-1,1614,"\n"],[1,1615,"当问题已经最简化时，便开始将"]],[1614,1614],[1628,1628]]],[1524798253228,[null,[[-1,230,"打"],[1,231,"指出"],[-1,240,"一"],[-1,398,"\n"],[-1,419,"\r"],[1,420,":"],[-1,434,"\r"],[1,435,"0"],[-1,456,"\r"],[1,457,":"],[-1,484,"\r"],[1,485,"i"],[-1,502,"\r\r"],[1,504,"m\n"],[1,533,"\n"],[1,757,"="],[-1,758," "],[1,782,"="],[-1,783," "],[1,804,"="],[-1,805," "],[1,822,"="],[-1,823," "],[1,836,"="],[-1,837,"￥ "],[1,840,"5"],[-1,842,"5"],[1,843,"\n"],[1,1034,"列表"],[-1,1050,"li"],[-1,1141,"\n"],[-1,1162,"\r"],[1,1163,":"],[-1,1187,"\r"],[1,1188,":"],[-1,1213,"\r"],[1,1214,"]"],[-1,1222,"\r"],[1,1223,":"],[-1,1271,"\r\r"],[1,1273,")\n"],[1,1301,"\n"]],[230,230],[1302,1302]]],[1524798253229,[null,[[1,230,"打"],[-1,230,"指出"],[1,241,"一"],[1,398,"\n"],[1,418,"\r"],[-1,418,":"],[1,433,"\r"],[-1,433,"0"],[1,455,"\r"],[-1,455,":"],[1,483,"\r"],[-1,483,"i"],[1,501,"\r\r"],[-1,501,"m\n"],[-1,532,"\n"],[-1,757,"="],[1,759," "],[-1,782,"="],[1,784," "],[-1,804,"="],[1,806," "],[-1,822,"="],[1,824," "],[-1,836,"="],[1,838,"￥ "],[-1,839,"5"],[1,842,"5"],[-1,842,"\n"],[-1,1034,"列表"],[1,1052,"li"],[1,1141,"\n"],[1,1161,"\r"],[-1,1161,":"],[1,1186,"\r"],[-1,1186,":"],[1,1212,"\r"],[-1,1212,"]"],[1,1221,"\r"],[-1,1221,":"],[1,1270,"\r\r"],[-1,1270,")\n"],[-1,1300,"\n"]],[1302,1302],[230,230]]],[1524798211162,["Re@VAIO",[[1,1628,"每个问题的答案拼装起来直到初始问题被解禁额"]],[1628,1628],[1649,1649]]],[1524798211923,["Re@VAIO",[[-1,1646,"解禁额"]],[1649,1649],[1646,1646]]],[1524798213487,["Re@VAIO",[[1,1646,"解决。"]],[1646,1646],[1649,1649]]],[1524798216689,["Re@VAIO",[[1,1643,"、、"]],[1643,1643],[1645,1645]]],[1524798217923,["Re@VAIO",[[-1,1641,"初始、、"]],[1645,1645],[1641,1641]]],[1524798219350,["Re@VAIO",[[1,1641,"原始"]],[1641,1641],[1643,1643]]],[1524798222839,["Re@VAIO",[[1,1649,"图2给出了"]],[1649,1649],[1654,1654]]],[1524798246363,["Re@VAIO",[[-1,1649,"图2给出了"]],[1654,1654],[1649,1649]]],[1524798252397,["Re@VAIO",[[1,1649,"如图2所示，listsum"]],[1649,1649],[1662,1662]]],[1524798313221,[null,[[-1,230,"打"],[1,231,"指出"],[-1,240,"一"],[-1,398,"\n"],[-1,419,"\r"],[1,420,":"],[-1,434,"\r"],[1,435,"0"],[-1,456,"\r"],[1,457,":"],[-1,484,"\r"],[1,485,"i"],[-1,502,"\r\r"],[1,504,"m\n"],[1,533,"\n"],[1,757,"="],[-1,758," "],[1,782,"="],[-1,783," "],[1,804,"="],[-1,805," "],[1,822,"="],[-1,823," "],[1,836,"="],[-1,837,"￥ "],[1,840,"5"],[-1,842,"5"],[1,843,"\n"],[1,1034,"列表"],[-1,1050,"li"],[-1,1141,"\n"],[-1,1162,"\r"],[1,1163,":"],[-1,1187,"\r"],[1,1188,":"],[-1,1213,"\r"],[1,1214,"]"],[-1,1222,"\r"],[1,1223,":"],[-1,1271,"\r\r"],[1,1273,")\n"],[1,1301,"\n"]],[230,230],[1302,1302]]],[1524798313221,[null,[[1,230,"打"],[-1,230,"指出"],[1,241,"一"],[1,398,"\n"],[1,418,"\r"],[-1,418,":"],[1,433,"\r"],[-1,433,"0"],[1,455,"\r"],[-1,455,":"],[1,483,"\r"],[-1,483,"i"],[1,501,"\r\r"],[-1,501,"m\n"],[-1,532,"\n"],[-1,757,"="],[1,759," "],[-1,782,"="],[1,784," "],[-1,804,"="],[1,806," "],[-1,822,"="],[1,824," "],[-1,836,"="],[1,838,"￥ "],[-1,839,"5"],[1,842,"5"],[-1,842,"\n"],[-1,1034,"列表"],[1,1052,"li"],[1,1141,"\n"],[1,1161,"\r"],[-1,1161,":"],[1,1186,"\r"],[-1,1186,":"],[1,1212,"\r"],[-1,1212,"]"],[1,1221,"\r"],[-1,1221,":"],[1,1270,"\r\r"],[-1,1270,")\n"],[-1,1300,"\n"]],[1302,1302],[230,230]]],[1524798287114,["Re@VAIO",[[1,1662,"沿着调用顺序返回。但"]],[1662,1662],[1672,1672]]],[1524798287611,["Re@VAIO",[[-1,1671,"但"]],[1672,1672],[1671,1671]]],[1524798299105,["Re@VAIO",[[1,1671,"当listsum回到了最顶部的问题时，便"]],[1671,1671],[1691,1691]]],[1524798299203,["Re@VAIO",[[-1,1690,"便"]],[1691,1691],[1690,1690]]],[1524798302570,["Re@VAIO",[[1,1690,"原始问题Ian"]],[1690,1690],[1697,1697]]],[1524798303045,["Re@VAIO",[[-1,1694,"Ian"]],[1697,1697],[1694,1694]]],[1524798305970,["Re@VAIO",[[1,1694,"便得到了解决。"]],[1694,1694],[1701,1701]]],[1524798306234,["Re@VAIO",[[1,1701,"\n\n"]],[1701,1701],[1702,1702]]],[1524798306420,["Re@VAIO",[[1,1703,"\n"]],[1702,1702],[1703,1703]]],[1524798311172,["Re@VAIO",[[1,1703,"![image](http://interactivepython.org/courselib/static/pythonds/_images/sumlistOut.png)"]],[1703,1703],[1790,1790]]],[1524798312058,["Re@VAIO",[[1,1791,"\n"]],[1790,1790],[1791,1791]]],[1524798312250,["Re@VAIO",[[1,1792,"\n"]],[1791,1791],[1792,1792]]],[1524798373242,[null,[[-1,230,"打"],[1,231,"指出"],[-1,240,"一"],[-1,398,"\n"],[-1,419,"\r"],[1,420,":"],[-1,434,"\r"],[1,435,"0"],[-1,456,"\r"],[1,457,":"],[-1,484,"\r"],[1,485,"i"],[-1,502,"\r\r"],[1,504,"m\n"],[1,533,"\n"],[1,757,"="],[-1,758," "],[1,782,"="],[-1,783," "],[1,804,"="],[-1,805," "],[1,822,"="],[-1,823," "],[1,836,"="],[-1,837,"￥ "],[1,840,"5"],[-1,842,"5"],[1,843,"\n"],[1,1034,"列表"],[-1,1050,"li"],[-1,1141,"\n"],[-1,1162,"\r"],[1,1163,":"],[-1,1187,"\r"],[1,1188,":"],[-1,1213,"\r"],[1,1214,"]"],[-1,1222,"\r"],[1,1223,":"],[-1,1271,"\r\r"],[1,1273,")\n"],[1,1301,"\n"]],[230,230],[1302,1302]]],[1524798373242,[null,[[1,230,"打"],[-1,230,"指出"],[1,241,"一"],[1,398,"\n"],[1,418,"\r"],[-1,418,":"],[1,433,"\r"],[-1,433,"0"],[1,455,"\r"],[-1,455,":"],[1,483,"\r"],[-1,483,"i"],[1,501,"\r\r"],[-1,501,"m\n"],[-1,532,"\n"],[-1,757,"="],[1,759," "],[-1,782,"="],[1,784," "],[-1,804,"="],[1,806," "],[-1,822,"="],[1,824," "],[-1,836,"="],[1,838,"￥ "],[-1,839,"5"],[1,842,"5"],[-1,842,"\n"],[-1,1034,"列表"],[1,1052,"li"],[1,1141,"\n"],[1,1161,"\r"],[-1,1161,":"],[1,1186,"\r"],[-1,1186,":"],[1,1212,"\r"],[-1,1212,"]"],[1,1221,"\r"],[-1,1221,":"],[1,1270,"\r\r"],[-1,1270,")\n"],[-1,1300,"\n"]],[1302,1302],[230,230]]],[1524798353803,["Re@VAIO",[[1,1793,"\n"]],[1790,1790],[1791,1791]]],[1524798353867,["Re@VAIO",[[1,1794,"\n"]],[1791,1791],[1792,1792]]],[1524798359382,["Re@VAIO",[[1,1792,"## 4.4 递归散打定量"]],[1792,1792],[1805,1805]]],[1524798360002,["Re@VAIO",[[-1,1801,"散打定量"]],[1805,1805],[1801,1801]]],[1524798363289,["Re@VAIO",[[1,1801,"三大定律 ##"]],[1801,1801],[1808,1808]]],[1524798363531,["Re@VAIO",[[1,1811,"\n"]],[1808,1808],[1809,1809]]],[1524798363875,["Re@VAIO",[[1,1812,"\n"]],[1809,1809],[1810,1810]]],[1524798370067,["Re@VAIO",[[1,1810,"跟阿西莫夫（）"]],[1810,1810],[1817,1817]]],[1524798373002,["Re@VAIO",[[1,1816,"Asimov"]],[1816,1816],[1822,1822]]],[1524798433238,[null,[[-1,230,"打"],[1,231,"指出"],[-1,240,"一"],[-1,398,"\n"],[-1,419,"\r"],[1,420,":"],[-1,434,"\r"],[1,435,"0"],[-1,456,"\r"],[1,457,":"],[-1,484,"\r"],[1,485,"i"],[-1,502,"\r\r"],[1,504,"m\n"],[1,533,"\n"],[1,757,"="],[-1,758," "],[1,782,"="],[-1,783," "],[1,804,"="],[-1,805," "],[1,822,"="],[-1,823," "],[1,836,"="],[-1,837,"￥ "],[1,840,"5"],[-1,842,"5"],[1,843,"\n"],[1,1034,"列表"],[-1,1050,"li"],[-1,1141,"\n"],[-1,1162,"\r"],[1,1163,":"],[-1,1187,"\r"],[1,1188,":"],[-1,1213,"\r"],[1,1214,"]"],[-1,1222,"\r"],[1,1223,":"],[-1,1271,"\r\r"],[1,1273,")\n"],[1,1301,"\n"]],[230,230],[1302,1302]]],[1524798433238,[null,[[1,230,"打"],[-1,230,"指出"],[1,241,"一"],[1,398,"\n"],[1,418,"\r"],[-1,418,":"],[1,433,"\r"],[-1,433,"0"],[1,455,"\r"],[-1,455,":"],[1,483,"\r"],[-1,483,"i"],[1,501,"\r\r"],[-1,501,"m\n"],[-1,532,"\n"],[-1,757,"="],[1,759," "],[-1,782,"="],[1,784," "],[-1,804,"="],[1,806," "],[-1,822,"="],[1,824," "],[-1,836,"="],[1,838,"￥ "],[-1,839,"5"],[1,842,"5"],[-1,842,"\n"],[-1,1034,"列表"],[1,1052,"li"],[1,1141,"\n"],[1,1161,"\r"],[-1,1161,":"],[1,1186,"\r"],[-1,1186,":"],[1,1212,"\r"],[-1,1212,"]"],[1,1221,"\r"],[-1,1221,":"],[1,1270,"\r\r"],[-1,1270,")\n"],[-1,1300,"\n"]],[1302,1302],[230,230]]],[1524798380704,["Re@VAIO",[[1,1823,"机器人三大定律一样，"]],[1823,1823],[1833,1833]]],[1524798384218,["Re@VAIO",[[-1,1827,"大"]],[1828,1828],[1827,1827]]],[1524798384812,["Re@VAIO",[[-1,1802,"大"]],[1803,1803],[1802,1802]]],[1524798391000,["Re@VAIO",[[1,1831,"递归算法也要尊"]],[1831,1831],[1838,1838]]],[1524798391795,["Re@VAIO",[[-1,1836,"要尊"]],[1838,1838],[1836,1836]]],[1524798394440,["Re@VAIO",[[1,1836,"必须遵守3"]],[1836,1836],[1841,1841]]],[1524798394883,["Re@VAIO",[[-1,1840,"3"]],[1841,1841],[1840,1840]]],[1524798399302,["Re@VAIO",[[1,1840,"三条重要定律："]],[1840,1840],[1847,1847]]],[1524798399573,["Re@VAIO",[[1,1850,"\n"]],[1847,1847],[1848,1848]]],[1524798399954,["Re@VAIO",[[1,1851,"\n"]],[1848,1848],[1849,1849]]],[1524798411073,["Re@VAIO",[[1,1849,"1. 递归算法必须要有个基本出口"]],[1849,1849],[1865,1865]]],[1524798425906,["Re@VAIO",[[-1,1861,"基本出口"]],[1865,1865],[1861,1861]]],[1524798430412,["Re@VAIO",[[1,1861,"**基本情形**"]],[1861,1861],[1869,1869]]],[1524798493262,[null,[[-1,230,"打"],[1,231,"指出"],[-1,240,"一"],[-1,398,"\n"],[-1,419,"\r"],[1,420,":"],[-1,434,"\r"],[1,435,"0"],[-1,456,"\r"],[1,457,":"],[-1,484,"\r"],[1,485,"i"],[-1,502,"\r\r"],[1,504,"m\n"],[1,533,"\n"],[1,757,"="],[-1,758," "],[1,782,"="],[-1,783," "],[1,804,"="],[-1,805," "],[1,822,"="],[-1,823," "],[1,836,"="],[-1,837,"￥ "],[1,840,"5"],[-1,842,"5"],[1,843,"\n"],[1,1034,"列表"],[-1,1050,"li"],[-1,1141,"\n"],[-1,1162,"\r"],[1,1163,":"],[-1,1187,"\r"],[1,1188,":"],[-1,1213,"\r"],[1,1214,"]"],[-1,1222,"\r"],[1,1223,":"],[-1,1271,"\r\r"],[1,1273,")\n"],[1,1301,"\n"]],[230,230],[1302,1302]]],[1524798493263,[null,[[1,230,"打"],[-1,230,"指出"],[1,241,"一"],[1,398,"\n"],[1,418,"\r"],[-1,418,":"],[1,433,"\r"],[-1,433,"0"],[1,455,"\r"],[-1,455,":"],[1,483,"\r"],[-1,483,"i"],[1,501,"\r\r"],[-1,501,"m\n"],[-1,532,"\n"],[-1,757,"="],[1,759," "],[-1,782,"="],[1,784," "],[-1,804,"="],[1,806," "],[-1,822,"="],[1,824," "],[-1,836,"="],[1,838,"￥ "],[-1,839,"5"],[1,842,"5"],[-1,842,"\n"],[-1,1034,"列表"],[1,1052,"li"],[1,1141,"\n"],[1,1161,"\r"],[-1,1161,":"],[1,1186,"\r"],[-1,1186,":"],[1,1212,"\r"],[-1,1212,"]"],[1,1221,"\r"],[-1,1221,":"],[1,1270,"\r\r"],[-1,1270,")\n"],[-1,1300,"\n"]],[1302,1302],[230,230]]],[1524798434812,["Re@VAIO",[[1,1869,"作为出口。"]],[1869,1869],[1874,1874]]],[1524798435291,["Re@VAIO",[[1,1877,"\n"]],[1874,1874],[1875,1875]]],[1524798455391,["Re@VAIO",[[1,1875,"2. 递归算法必须不断改变自身状态并向"]],[1875,1875],[1894,1894]]],[1524798457434,["Re@VAIO",[[-1,1865,"情形"]],[1867,1867],[1865,1865]]],[1524798459039,["Re@VAIO",[[1,1865,"结束"]],[1865,1865],[1867,1867]]],[1524798461426,["Re@VAIO",[[-1,1865,"结束"]],[1867,1867],[1865,1865]]],[1524798475593,["Re@VAIO",[[1,1865,"结束条件"]],[1865,1865],[1869,1869]]],[1524798476015,["Re@VAIO",[[-1,1867,"条件"]],[1869,1869],[1867,1867]]],[1524798477040,["Re@VAIO",[[1,1867,"情形"]],[1867,1867],[1869,1869]]],[1524798480313,["Re@VAIO",[[-1,1865,"结束"]],[1867,1867],[1865,1865]]],[1524798488117,["Re@VAIO",[[1,1894,"基本情形卡"]],[1894,1894],[1899,1899]]],[1524798488149,["Re@VAIO",[[-1,1898,"卡"]],[1899,1899],[1898,1898]]],[1524798492393,["Re@VAIO",[[1,1898,"演进。"]],[1898,1898],[1901,1901]]],[1524798492851,["Re@VAIO",[[1,1904,"\n"]],[1901,1901],[1902,1902]]],[1524798553253,[null,[[-1,230,"打"],[1,231,"指出"],[-1,240,"一"],[-1,398,"\n"],[-1,419,"\r"],[1,420,":"],[-1,434,"\r"],[1,435,"0"],[-1,456,"\r"],[1,457,":"],[-1,484,"\r"],[1,485,"i"],[-1,502,"\r\r"],[1,504,"m\n"],[1,533,"\n"],[1,757,"="],[-1,758," "],[1,782,"="],[-1,783," "],[1,804,"="],[-1,805," "],[1,822,"="],[-1,823," "],[1,836,"="],[-1,837,"￥ "],[1,840,"5"],[-1,842,"5"],[1,843,"\n"],[1,1034,"列表"],[-1,1050,"li"],[-1,1141,"\n"],[-1,1162,"\r"],[1,1163,":"],[-1,1187,"\r"],[1,1188,":"],[-1,1213,"\r"],[1,1214,"]"],[-1,1222,"\r"],[1,1223,":"],[-1,1271,"\r\r"],[1,1273,")\n"],[1,1301,"\n"]],[230,230],[1302,1302]]],[1524798553253,[null,[[1,230,"打"],[-1,230,"指出"],[1,241,"一"],[1,398,"\n"],[1,418,"\r"],[-1,418,":"],[1,433,"\r"],[-1,433,"0"],[1,455,"\r"],[-1,455,":"],[1,483,"\r"],[-1,483,"i"],[1,501,"\r\r"],[-1,501,"m\n"],[-1,532,"\n"],[-1,757,"="],[1,759," "],[-1,782,"="],[1,784," "],[-1,804,"="],[1,806," "],[-1,822,"="],[1,824," "],[-1,836,"="],[1,838,"￥ "],[-1,839,"5"],[1,842,"5"],[-1,842,"\n"],[-1,1034,"列表"],[1,1052,"li"],[1,1141,"\n"],[1,1161,"\r"],[-1,1161,":"],[1,1186,"\r"],[-1,1186,":"],[1,1212,"\r"],[-1,1212,"]"],[1,1221,"\r"],[-1,1221,":"],[1,1270,"\r\r"],[-1,1270,")\n"],[-1,1300,"\n"]],[1302,1302],[230,230]]],[1524798493356,["Re@VAIO",[[1,1903," "]],[1903,1903],[1904,1904]]],[1524798493906,["Re@VAIO",[[-1,1903," "]],[1904,1904],[1903,1903]]],[1524798494283,["Re@VAIO",[[1,1903,"。 "]],[1903,1903],[1905,1905]]],[1524798495072,["Re@VAIO",[[-1,1903,"。 "]],[1905,1905],[1903,1903]]],[1524798506396,["Re@VAIO",[[1,1903,". 递归算法必须递归地调用自身。"]],[1903,1903],[1919,1919]]],[1524798506810,["Re@VAIO",[[1,1922,"\n"]],[1919,1919],[1920,1920]]],[1524798507058,["Re@VAIO",[[1,1923,"\n"]],[1920,1920],[1921,1921]]],[1524798529757,["Re@VAIO",[[1,1921,"现在来仔细研究一些"]],[1921,1921],[1930,1930]]],[1524798530188,["Re@VAIO",[[-1,1929,"些"]],[1930,1930],[1929,1929]]],[1524798535523,["Re@VAIO",[[1,1929,"下这些定律，"]],[1929,1929],[1935,1935]]],[1524798536923,["Re@VAIO",[[-1,1934,"，"]],[1935,1935],[1934,1934]]],[1524798541992,["Re@VAIO",[[1,1934,"以及在listsum中"]],[1934,1934],[1945,1945]]],[1524798543786,["Re@VAIO",[[-1,1931,"些"]],[1932,1932],[1931,1931]]],[1524798543991,["Re@VAIO",[[1,1931,"3"]],[1931,1931],[1932,1932]]],[1524798544290,["Re@VAIO",[[-1,1931,"3"]],[1932,1932],[1931,1931]]],[1524798545050,["Re@VAIO",[[1,1931,"三条"]],[1931,1931],[1933,1933]]],[1524798548005,["Re@VAIO",[[1,1946,"是如何得到"]],[1946,1946],[1951,1951]]],[1524798613231,[null,[[-1,230,"打"],[1,231,"指出"],[-1,240,"一"],[-1,398,"\n"],[-1,419,"\r"],[1,420,":"],[-1,434,"\r"],[1,435,"0"],[-1,456,"\r"],[1,457,":"],[-1,484,"\r"],[1,485,"i"],[-1,502,"\r\r"],[1,504,"m\n"],[1,533,"\n"],[1,757,"="],[-1,758," "],[1,782,"="],[-1,783," "],[1,804,"="],[-1,805," "],[1,822,"="],[-1,823," "],[1,836,"="],[-1,837,"￥ "],[1,840,"5"],[-1,842,"5"],[1,843,"\n"],[1,1034,"列表"],[-1,1050,"li"],[-1,1141,"\n"],[-1,1162,"\r"],[1,1163,":"],[-1,1187,"\r"],[1,1188,":"],[-1,1213,"\r"],[1,1214,"]"],[-1,1222,"\r"],[1,1223,":"],[-1,1271,"\r\r"],[1,1273,")\n"],[1,1302,"\n"],[-1,1902,"\n"],[1,1903,"3"],[1,1951,"\n"]],[230,230],[1952,1952]]],[1524798613231,[null,[[1,230,"打"],[-1,230,"指出"],[1,241,"一"],[1,398,"\n"],[1,418,"\r"],[-1,418,":"],[1,433,"\r"],[-1,433,"0"],[1,455,"\r"],[-1,455,":"],[1,483,"\r"],[-1,483,"i"],[1,501,"\r\r"],[-1,501,"m\n"],[-1,532,"\n"],[-1,757,"="],[1,759," "],[-1,782,"="],[1,784," "],[-1,804,"="],[1,806," "],[-1,822,"="],[1,824," "],[-1,836,"="],[1,838,"￥ "],[-1,839,"5"],[1,842,"5"],[-1,842,"\n"],[-1,1034,"列表"],[1,1052,"li"],[1,1141,"\n"],[1,1161,"\r"],[-1,1161,":"],[1,1186,"\r"],[-1,1186,":"],[1,1212,"\r"],[-1,1212,"]"],[1,1221,"\r"],[-1,1221,":"],[1,1270,"\r\r"],[-1,1270,")\n"],[-1,1301,"\n"],[1,1902,"\n"],[-1,1902,"3"],[-1,1951,"\n"]],[1952,1952],[230,230]]],[1524798591253,["Re@VAIO",[[1,1951,"体现的。首先，基本情形是终止算法递归的条件。一般来说，基本情形都是问题无法"]],[1951,1951],[1988,1988]]],[1524798591490,["Re@VAIO",[[-1,1986,"无法"]],[1988,1988],[1986,1986]]],[1524798596274,["Re@VAIO",[[1,1986,"规模无法再缩小的时候。"]],[1986,1986],[1997,1997]]],[1524798600674,["Re@VAIO",[[-1,1988,"无法再缩小的时候。"]],[1997,1997],[1988,1988]]],[1524798602833,["Re@VAIO",[[1,1988,"已经小刀"]],[1988,1988],[1992,1992]]],[1524798603419,["Re@VAIO",[[-1,1991,"刀"]],[1992,1992],[1991,1991]]],[1524798613063,["Re@VAIO",[[1,1991,"到足以直接解决的时候。在lists"]],[1991,1991],[2008,2008]]],[1524798673283,[null,[[-1,230,"打"],[1,231,"指出"],[-1,240,"一"],[-1,398,"\n"],[-1,419,"\r"],[1,420,":"],[-1,434,"\r"],[1,435,"0"],[-1,456,"\r"],[1,457,":"],[-1,484,"\r"],[1,485,"i"],[-1,502,"\r\r"],[1,504,"m\n"],[1,533,"\n"],[1,757,"="],[-1,758," "],[1,782,"="],[-1,783," "],[1,804,"="],[-1,805," "],[1,822,"="],[-1,823," "],[1,836,"="],[-1,837,"￥ "],[1,840,"5"],[-1,842,"5"],[1,843,"\n"],[1,1034,"列表"],[-1,1050,"li"],[-1,1141,"\n"],[-1,1162,"\r"],[1,1163,":"],[-1,1187,"\r"],[1,1188,":"],[-1,1213,"\r"],[1,1214,"]"],[-1,1222,"\r"],[1,1223,":"],[-1,1271,"\r\r"],[1,1273,")\n"],[1,1302,"\n"],[-1,1902,"\n"],[1,1903,"3"],[1,2008,"\n"]],[230,230],[2009,2009]]],[1524798673283,[null,[[1,230,"打"],[-1,230,"指出"],[1,241,"一"],[1,398,"\n"],[1,418,"\r"],[-1,418,":"],[1,433,"\r"],[-1,433,"0"],[1,455,"\r"],[-1,455,":"],[1,483,"\r"],[-1,483,"i"],[1,501,"\r\r"],[-1,501,"m\n"],[-1,532,"\n"],[-1,757,"="],[1,759," "],[-1,782,"="],[1,784," "],[-1,804,"="],[1,806," "],[-1,822,"="],[1,824," "],[-1,836,"="],[1,838,"￥ "],[-1,839,"5"],[1,842,"5"],[-1,842,"\n"],[-1,1034,"列表"],[1,1052,"li"],[1,1141,"\n"],[1,1161,"\r"],[-1,1161,":"],[1,1186,"\r"],[-1,1186,":"],[1,1212,"\r"],[-1,1212,"]"],[1,1221,"\r"],[-1,1221,":"],[1,1270,"\r\r"],[-1,1270,")\n"],[-1,1301,"\n"],[1,1902,"\n"],[-1,1902,"3"],[-1,2008,"\n"]],[2009,2009],[230,230]]],[1524798627506,["Re@VAIO",[[1,2009,"m算法中，基本情形是长度为1的列表。"]],[2009,2009],[2027,2027]]],[1524798627780,["Re@VAIO",[[1,2030,"\n"]],[2027,2027],[2028,2028]]],[1524798627987,["Re@VAIO",[[1,2031,"\n"]],[2028,2028],[2029,2029]]],[1524798636100,["Re@VAIO",[[1,2029,"为了符合"]],[2029,2029],[2033,2033]]],[1524798636881,["Re@VAIO",[[-1,2030,"了符合"]],[2033,2033],[2030,2030]]],[1524798668883,["Re@VAIO",[[1,2030,"满足第二条定律，必须设法改变当前状态并使得算法向基本情形靠近。"]],[2030,2030],[2061,2061]]],[1524798733289,[null,[[-1,230,"打"],[1,231,"指出"],[-1,240,"一"],[-1,398,"\n"],[-1,419,"\r"],[1,420,":"],[-1,434,"\r"],[1,435,"0"],[-1,456,"\r"],[1,457,":"],[-1,484,"\r"],[1,485,"i"],[-1,502,"\r\r"],[1,504,"m\n"],[1,533,"\n"],[1,757,"="],[-1,758," "],[1,782,"="],[-1,783," "],[1,804,"="],[-1,805," "],[1,822,"="],[-1,823," "],[1,836,"="],[-1,837,"￥ "],[1,840,"5"],[-1,842,"5"],[1,843,"\n"],[1,1034,"列表"],[-1,1050,"li"],[-1,1141,"\n"],[-1,1162,"\r"],[1,1163,":"],[-1,1187,"\r"],[1,1188,":"],[-1,1213,"\r"],[1,1214,"]"],[-1,1222,"\r"],[1,1223,":"],[-1,1271,"\r\r"],[1,1273,")\n"],[1,1302,"\n"],[-1,1902,"\n"],[1,1903,"3"],[-1,2008,"\n"],[1,2009,"u"],[1,2062,"\n\n"]],[230,230],[2064,2064]]],[1524798733290,[null,[[1,230,"打"],[-1,230,"指出"],[1,241,"一"],[1,398,"\n"],[1,418,"\r"],[-1,418,":"],[1,433,"\r"],[-1,433,"0"],[1,455,"\r"],[-1,455,":"],[1,483,"\r"],[-1,483,"i"],[1,501,"\r\r"],[-1,501,"m\n"],[-1,532,"\n"],[-1,757,"="],[1,759," "],[-1,782,"="],[1,784," "],[-1,804,"="],[1,806," "],[-1,822,"="],[1,824," "],[-1,836,"="],[1,838,"￥ "],[-1,839,"5"],[1,842,"5"],[-1,842,"\n"],[-1,1034,"列表"],[1,1052,"li"],[1,1141,"\n"],[1,1161,"\r"],[-1,1161,":"],[1,1186,"\r"],[-1,1186,":"],[1,1212,"\r"],[-1,1212,"]"],[1,1221,"\r"],[-1,1221,":"],[1,1270,"\r\r"],[-1,1270,")\n"],[-1,1301,"\n"],[1,1902,"\n"],[-1,1902,"3"],[1,2008,"\n"],[-1,2008,"u"],[-1,2062,"\n\n"]],[2064,2064],[230,230]]],[1524798676941,["Re@VAIO",[[1,2061,"状态的改变以为"]],[2061,2061],[2068,2068]]],[1524798680594,["Re@VAIO",[[-1,2066,"以为"]],[2068,2068],[2066,2066]]],[1524798685607,["Re@VAIO",[[1,2066,"意味着，算法使用的数据"]],[2066,2066],[2077,2077]]],[1524798690819,["Re@VAIO",[[1,2075,"一些"]],[2075,2075],[2077,2077]]],[1524798698236,["Re@VAIO",[[1,2079,"江北该"]],[2079,2079],[2082,2082]]],[1524798698688,["Re@VAIO",[[-1,2079,"江北该"]],[2082,2082],[2079,2079]]],[1524798701685,["Re@VAIO",[[1,2079,"将被干煸。"]],[2079,2079],[2084,2084]]],[1524798702632,["Re@VAIO",[[-1,2081,"干煸。"]],[2084,2084],[2081,2081]]],[1524798703314,["Re@VAIO",[[1,2081,"该百年。"]],[2081,2081],[2085,2085]]],[1524798704690,["Re@VAIO",[[-1,2081,"该百年。"]],[2085,2085],[2081,2081]]],[1524798710656,["Re@VAIO",[[1,2081,"改变。一般来说"]],[2081,2081],[2088,2088]]],[1524798723261,["Re@VAIO",[[-1,2084,"一般来说"]],[2088,2088],[2084,2084]]],[1524798725449,["Re@VAIO",[[1,2084,"通畅请"]],[2084,2084],[2087,2087]]],[1524798725875,["Re@VAIO",[[-1,2084,"通畅请"]],[2087,2087],[2084,2084]]],[1524798729205,["Re@VAIO",[[1,2084,"通常来说，"]],[2084,2084],[2089,2089]]],[1524798793258,[null,[[-1,230,"打"],[1,231,"指出"],[-1,240,"一"],[-1,398,"\n"],[-1,419,"\r"],[1,420,":"],[-1,434,"\r"],[1,435,"0"],[-1,456,"\r"],[1,457,":"],[-1,484,"\r"],[1,485,"i"],[-1,502,"\r\r"],[1,504,"m\n"],[1,533,"\n"],[1,757,"="],[-1,758," "],[1,782,"="],[-1,783," "],[1,804,"="],[-1,805," "],[1,822,"="],[-1,823," "],[1,836,"="],[-1,837,"￥ "],[1,840,"5"],[-1,842,"5"],[1,843,"\n"],[1,1034,"列表"],[-1,1050,"li"],[-1,1141,"\n"],[-1,1162,"\r"],[1,1163,":"],[-1,1187,"\r"],[1,1188,":"],[-1,1213,"\r"],[1,1214,"]"],[-1,1222,"\r"],[1,1223,":"],[-1,1271,"\r\r"],[1,1273,")\n"],[1,1302,"\n"],[-1,1902,"\n"],[1,1903,"3"],[-1,2008,"\n"],[1,2009,"u"],[1,2090,"\n\n"]],[230,230],[2092,2092]]],[1524798793259,[null,[[1,230,"打"],[-1,230,"指出"],[1,241,"一"],[1,398,"\n"],[1,418,"\r"],[-1,418,":"],[1,433,"\r"],[-1,433,"0"],[1,455,"\r"],[-1,455,":"],[1,483,"\r"],[-1,483,"i"],[1,501,"\r\r"],[-1,501,"m\n"],[-1,532,"\n"],[-1,757,"="],[1,759," "],[-1,782,"="],[1,784," "],[-1,804,"="],[1,806," "],[-1,822,"="],[1,824," "],[-1,836,"="],[1,838,"￥ "],[-1,839,"5"],[1,842,"5"],[-1,842,"\n"],[-1,1034,"列表"],[1,1052,"li"],[1,1141,"\n"],[1,1161,"\r"],[-1,1161,":"],[1,1186,"\r"],[-1,1186,":"],[1,1212,"\r"],[-1,1212,"]"],[1,1221,"\r"],[-1,1221,":"],[1,1270,"\r\r"],[-1,1270,")\n"],[-1,1301,"\n"],[1,1902,"\n"],[-1,1902,"3"],[1,2008,"\n"],[-1,2008,"u"],[-1,2090,"\n\n"]],[2092,2092],[230,230]]],[1524798735469,["Re@VAIO",[[1,2089,"这意味着"]],[2089,2089],[2093,2093]]],[1524798736328,["Re@VAIO",[[-1,2089,"这意味着"]],[2093,2093],[2089,2089]]],[1524798738316,["Re@VAIO",[[1,2089,"这"]],[2089,2089],[2090,2090]]],[1524798739499,["Re@VAIO",[[-1,2089,"这"]],[2090,2090],[2089,2089]]],[1524798749384,["Re@VAIO",[[1,2089,"即为问题规模以某种方法部"]],[2089,2089],[2101,2101]]],[1524798749433,["Re@VAIO",[[-1,2100,"部"]],[2101,2101],[2100,2100]]],[1524798760554,["Re@VAIO",[[1,2100,"缩小。在listsum算法中，基本数据结构的"]],[2100,2100],[2122,2122]]],[1524798760701,["Re@VAIO",[[-1,2121,"的"]],[2122,2122],[2121,2121]]],[1524798771931,["Re@VAIO",[[1,2121,"是列表，因此我们在"]],[2121,2121],[2130,2130]]],[1524799213295,[null,[[-1,230,"打"],[1,231,"指出"],[-1,240,"一"],[-1,398,"\n"],[-1,419,"\r"],[1,420,":"],[-1,434,"\r"],[1,435,"0"],[-1,456,"\r"],[1,457,":"],[-1,484,"\r"],[1,485,"i"],[-1,502,"\r\r"],[1,504,"m\n"],[1,533,"\n"],[1,757,"="],[-1,758," "],[1,782,"="],[-1,783," "],[1,804,"="],[-1,805," "],[1,822,"="],[-1,823," "],[1,836,"="],[-1,837,"￥ "],[1,840,"5"],[-1,842,"5"],[1,843,"\n"],[1,1034,"列表"],[-1,1050,"li"],[-1,1141,"\n"],[-1,1162,"\r"],[1,1163,":"],[-1,1187,"\r"],[1,1188,":"],[-1,1213,"\r"],[1,1214,"]"],[-1,1222,"\r"],[1,1223,":"],[-1,1271,"\r\r"],[1,1273,")\n"],[1,1302,"\n"],[-1,1902,"\n"],[1,1903,"3"],[-1,2008,"\n"],[1,2009,"u"],[1,2131,"\n\n"]],[230,230],[2133,2133]]],[1524799213295,[null,[[1,230,"打"],[-1,230,"指出"],[1,241,"一"],[1,398,"\n"],[1,418,"\r"],[-1,418,":"],[1,433,"\r"],[-1,433,"0"],[1,455,"\r"],[-1,455,":"],[1,483,"\r"],[-1,483,"i"],[1,501,"\r\r"],[-1,501,"m\n"],[-1,532,"\n"],[-1,757,"="],[1,759," "],[-1,782,"="],[1,784," "],[-1,804,"="],[1,806," "],[-1,822,"="],[1,824," "],[-1,836,"="],[1,838,"￥ "],[-1,839,"5"],[1,842,"5"],[-1,842,"\n"],[-1,1034,"列表"],[1,1052,"li"],[1,1141,"\n"],[1,1161,"\r"],[-1,1161,":"],[1,1186,"\r"],[-1,1186,":"],[1,1212,"\r"],[-1,1212,"]"],[1,1221,"\r"],[-1,1221,":"],[1,1270,"\r\r"],[-1,1270,")\n"],[-1,1301,"\n"],[1,1902,"\n"],[-1,1902,"3"],[1,2008,"\n"],[-1,2008,"u"],[-1,2131,"\n\n"]],[2133,2133],[230,230]]],[1524799191432,["Re@VAIO",[[-1,2127,"我们在"]],[2130,2130],[2127,2127]]],[1524799193100,["Re@VAIO",[[1,2127,"需呀在"]],[2127,2127],[2130,2130]]],[1524799193542,["Re@VAIO",[[-1,2127,"需呀在"]],[2130,2130],[2127,2127]]],[1524799212221,["Re@VAIO",[[1,2127,"需要在列表上想办法实现状态的改变。因为基本清新是列表长度为1，"]],[2127,2127],[2158,2158]]],[1524799273303,[null,[[-1,230,"打"],[1,231,"指出"],[-1,240,"一"],[-1,398,"\n"],[-1,419,"\r"],[1,420,":"],[-1,434,"\r"],[1,435,"0"],[-1,456,"\r"],[1,457,":"],[-1,484,"\r"],[1,485,"i"],[-1,502,"\r\r"],[1,504,"m\n"],[1,533,"\n"],[1,757,"="],[-1,758," "],[1,782,"="],[-1,783," "],[1,804,"="],[-1,805," "],[1,822,"="],[-1,823," "],[1,836,"="],[-1,837,"￥ "],[1,840,"5"],[-1,842,"5"],[1,843,"\n"],[1,1034,"列表"],[-1,1050,"li"],[-1,1141,"\n"],[-1,1162,"\r"],[1,1163,":"],[-1,1187,"\r"],[1,1188,":"],[-1,1213,"\r"],[1,1214,"]"],[-1,1222,"\r"],[1,1223,":"],[-1,1271,"\r\r"],[1,1273,")\n"],[1,1302,"\n"],[-1,1902,"\n"],[1,1903,"3"],[-1,2008,"\n"],[1,2009,"u"],[1,2159,"\n\n"]],[230,230],[2161,2161]]],[1524799273304,[null,[[1,230,"打"],[-1,230,"指出"],[1,241,"一"],[1,398,"\n"],[1,418,"\r"],[-1,418,":"],[1,433,"\r"],[-1,433,"0"],[1,455,"\r"],[-1,455,":"],[1,483,"\r"],[-1,483,"i"],[1,501,"\r\r"],[-1,501,"m\n"],[-1,532,"\n"],[-1,757,"="],[1,759," "],[-1,782,"="],[1,784," "],[-1,804,"="],[1,806," "],[-1,822,"="],[1,824," "],[-1,836,"="],[1,838,"￥ "],[-1,839,"5"],[1,842,"5"],[-1,842,"\n"],[-1,1034,"列表"],[1,1052,"li"],[1,1141,"\n"],[1,1161,"\r"],[-1,1161,":"],[1,1186,"\r"],[-1,1186,":"],[1,1212,"\r"],[-1,1212,"]"],[1,1221,"\r"],[-1,1221,":"],[1,1270,"\r\r"],[-1,1270,")\n"],[-1,1301,"\n"],[1,1902,"\n"],[-1,1902,"3"],[1,2008,"\n"],[-1,2008,"u"],[-1,2159,"\n\n"]],[2161,2161],[230,230]]],[1524799229657,["Re@VAIO",[[1,2158,"很自然的向"]],[2158,2158],[2163,2163]]],[1524799231943,["Re@VAIO",[[-1,2158,"很自然的向"]],[2163,2163],[2158,2158]]],[1524799234835,["Re@VAIO",[[1,2158,"向基本"]],[2158,2158],[2161,2161]]],[1524799237906,["Re@VAIO",[[-1,2148,"清新"]],[2150,2150],[2148,2148]]],[1524799239462,["Re@VAIO",[[1,2148,"情形"]],[2148,2148],[2150,2150]]],[1524799242283,["Re@VAIO",[[1,2161,"情形严禁的"]],[2161,2161],[2166,2166]]],[1524799243309,["Re@VAIO",[[-1,2163,"严禁的"]],[2166,2166],[2163,2163]]],[1524799245970,["Re@VAIO",[[1,2163,"演进的"]],[2163,2163],[2166,2166]]],[1524799333277,[null,[[-1,230,"打"],[1,231,"指出"],[-1,240,"一"],[-1,398,"\n"],[-1,419,"\r"],[1,420,":"],[-1,434,"\r"],[1,435,"0"],[-1,456,"\r"],[1,457,":"],[-1,484,"\r"],[1,485,"i"],[-1,502,"\r\r"],[1,504,"m\n"],[1,533,"\n"],[1,757,"="],[-1,758," "],[1,782,"="],[-1,783," "],[1,804,"="],[-1,805," "],[1,822,"="],[-1,823," "],[1,836,"="],[-1,837,"￥ "],[1,840,"5"],[-1,842,"5"],[1,843,"\n"],[1,1034,"列表"],[-1,1050,"li"],[-1,1141,"\n"],[-1,1162,"\r"],[1,1163,":"],[-1,1187,"\r"],[1,1188,":"],[-1,1213,"\r"],[1,1214,"]"],[-1,1222,"\r"],[1,1223,":"],[-1,1271,"\r\r"],[1,1273,")\n"],[1,1302,"\n"],[-1,1902,"\n"],[1,1903,"3"],[-1,2008,"\n"],[1,2009,"u"],[1,2167,"\n\n"]],[230,230],[2169,2169]]],[1524799333278,[null,[[1,230,"打"],[-1,230,"指出"],[1,241,"一"],[1,398,"\n"],[1,418,"\r"],[-1,418,":"],[1,433,"\r"],[-1,433,"0"],[1,455,"\r"],[-1,455,":"],[1,483,"\r"],[-1,483,"i"],[1,501,"\r\r"],[-1,501,"m\n"],[-1,532,"\n"],[-1,757,"="],[1,759," "],[-1,782,"="],[1,784," "],[-1,804,"="],[1,806," "],[-1,822,"="],[1,824," "],[-1,836,"="],[1,838,"￥ "],[-1,839,"5"],[1,842,"5"],[-1,842,"\n"],[-1,1034,"列表"],[1,1052,"li"],[1,1141,"\n"],[1,1161,"\r"],[-1,1161,":"],[1,1186,"\r"],[-1,1186,":"],[1,1212,"\r"],[-1,1212,"]"],[1,1221,"\r"],[-1,1221,":"],[1,1270,"\r\r"],[-1,1270,")\n"],[-1,1301,"\n"],[1,1902,"\n"],[-1,1902,"3"],[1,2008,"\n"],[-1,2008,"u"],[-1,2167,"\n\n"]],[2169,2169],[230,230]]],[1524799331922,["Re@VAIO",[[1,2166,"一种很自然的实现方式就是缩小列表。行"]],[2166,2166],[2184,2184]]],[1524799332216,["Re@VAIO",[[-1,2182,"。行"]],[2184,2184],[2182,2182]]],[1524799332718,["Re@VAIO",[[1,2182,"，"]],[2182,2182],[2183,2183]]],[1524799333184,["Re@VAIO",[[-1,2182,"，"]],[2183,2183],[2182,2182]]],[1524799393323,[null,[[-1,230,"打"],[1,231,"指出"],[-1,240,"一"],[-1,398,"\n"],[-1,419,"\r"],[1,420,":"],[-1,434,"\r"],[1,435,"0"],[-1,456,"\r"],[1,457,":"],[-1,484,"\r"],[1,485,"i"],[-1,502,"\r\r"],[1,504,"m\n"],[1,533,"\n"],[1,757,"="],[-1,758," "],[1,782,"="],[-1,783," "],[1,804,"="],[-1,805," "],[1,822,"="],[-1,823," "],[1,836,"="],[-1,837,"￥ "],[1,840,"5"],[-1,842,"5"],[1,843,"\n"],[1,1034,"列表"],[-1,1050,"li"],[-1,1141,"\n"],[-1,1162,"\r"],[1,1163,":"],[-1,1187,"\r"],[1,1188,":"],[-1,1213,"\r"],[1,1214,"]"],[-1,1222,"\r"],[1,1223,":"],[-1,1271,"\r\r"],[1,1273,")\n"],[1,1302,"\n"],[-1,1902,"\n"],[1,1903,"3"],[-1,2008,"\n"],[1,2009,"u"],[1,2183,"\n\n"]],[230,230],[2185,2185]]],[1524799393324,[null,[[1,230,"打"],[-1,230,"指出"],[1,241,"一"],[1,398,"\n"],[1,418,"\r"],[-1,418,":"],[1,433,"\r"],[-1,433,"0"],[1,455,"\r"],[-1,455,":"],[1,483,"\r"],[-1,483,"i"],[1,501,"\r\r"],[-1,501,"m\n"],[-1,532,"\n"],[-1,757,"="],[1,759," "],[-1,782,"="],[1,784," "],[-1,804,"="],[1,806," "],[-1,822,"="],[1,824," "],[-1,836,"="],[1,838,"￥ "],[-1,839,"5"],[1,842,"5"],[-1,842,"\n"],[-1,1034,"列表"],[1,1052,"li"],[1,1141,"\n"],[1,1161,"\r"],[-1,1161,":"],[1,1186,"\r"],[-1,1186,":"],[1,1212,"\r"],[-1,1212,"]"],[1,1221,"\r"],[-1,1221,":"],[1,1270,"\r\r"],[-1,1270,")\n"],[-1,1301,"\n"],[1,1902,"\n"],[-1,1902,"3"],[1,2008,"\n"],[-1,2008,"u"],[-1,2183,"\n\n"]],[2185,2185],[230,230]]],[1524799341046,["Re@VAIO",[[1,2182,"。行5便是"]],[2182,2182],[2187,2187]]],[1524799341103,["Re@VAIO",[[-1,2186,"是"]],[2187,2187],[2186,2186]]],[1524799345819,["Re@VAIO",[[1,2186,"实现了，"]],[2186,2186],[2190,2190]]],[1524799350551,["Re@VAIO",[[-1,2182,"。行5便实现了，"]],[2190,2190],[2182,2182]]],[1524799353072,["Re@VAIO",[[1,2182,"，这扁丝"]],[2182,2182],[2186,2186]]],[1524799354063,["Re@VAIO",[[-1,2184,"扁丝"]],[2186,2186],[2184,2184]]],[1524799357729,["Re@VAIO",[[1,2184,"便是行5所族谱的是"]],[2184,2184],[2193,2193]]],[1524799358420,["Re@VAIO",[[-1,2189,"族谱的是"]],[2193,2193],[2189,2189]]],[1524799362847,["Re@VAIO",[[1,2189,"做的事：铜股票调用"]],[2189,2189],[2198,2198]]],[1524799364353,["Re@VAIO",[[-1,2193,"铜股票调用"]],[2198,2198],[2193,2193]]],[1524799365720,["Re@VAIO",[[1,2193,"通过"]],[2193,2193],[2195,2195]]],[1524799379697,["Re@VAIO",[[-1,2193,"通过"]],[2195,2195],[2193,2193]]],[1524799380404,["Re@VAIO",[[1,2193,"jiang"]],[2193,2193],[2198,2198]]],[1524799381713,["Re@VAIO",[[-1,2193,"jiang"]],[2198,2198],[2193,2193]]],[1524799392672,["Re@VAIO",[[1,2193,"将列表长度缩小，然后将其作为参数来"]],[2193,2193],[2210,2210]]],[1524799453311,[null,[[-1,230,"打"],[1,231,"指出"],[-1,240,"一"],[-1,398,"\n"],[-1,419,"\r"],[1,420,":"],[-1,434,"\r"],[1,435,"0"],[-1,456,"\r"],[1,457,":"],[-1,484,"\r"],[1,485,"i"],[-1,502,"\r\r"],[1,504,"m\n"],[1,533,"\n"],[1,757,"="],[-1,758," "],[1,782,"="],[-1,783," "],[1,804,"="],[-1,805," "],[1,822,"="],[-1,823," "],[1,836,"="],[-1,837,"￥ "],[1,840,"5"],[-1,842,"5"],[1,843,"\n"],[1,1034,"列表"],[-1,1050,"li"],[-1,1141,"\n"],[-1,1162,"\r"],[1,1163,":"],[-1,1187,"\r"],[1,1188,":"],[-1,1213,"\r"],[1,1214,"]"],[-1,1222,"\r"],[1,1223,":"],[-1,1271,"\r\r"],[1,1273,")\n"],[1,1302,"\n"],[-1,1902,"\n"],[1,1903,"3"],[-1,2008,"\n"],[1,2009,"u"],[1,2211,"\n\n"]],[230,230],[2213,2213]]],[1524799453311,[null,[[1,230,"打"],[-1,230,"指出"],[1,241,"一"],[1,398,"\n"],[1,418,"\r"],[-1,418,":"],[1,433,"\r"],[-1,433,"0"],[1,455,"\r"],[-1,455,":"],[1,483,"\r"],[-1,483,"i"],[1,501,"\r\r"],[-1,501,"m\n"],[-1,532,"\n"],[-1,757,"="],[1,759," "],[-1,782,"="],[1,784," "],[-1,804,"="],[1,806," "],[-1,822,"="],[1,824," "],[-1,836,"="],[1,838,"￥ "],[-1,839,"5"],[1,842,"5"],[-1,842,"\n"],[-1,1034,"列表"],[1,1052,"li"],[1,1141,"\n"],[1,1161,"\r"],[-1,1161,":"],[1,1186,"\r"],[-1,1186,":"],[1,1212,"\r"],[-1,1212,"]"],[1,1221,"\r"],[-1,1221,":"],[1,1270,"\r\r"],[-1,1270,")\n"],[-1,1301,"\n"],[1,1902,"\n"],[-1,1902,"3"],[1,2008,"\n"],[-1,2008,"u"],[-1,2211,"\n\n"]],[2213,2213],[230,230]]],[1524799396073,["Re@VAIO",[[1,2210,"调用listsum本身。"]],[2210,2210],[2222,2222]]],[1524799404322,["Re@VAIO",[[1,2186,"可执行代码在"]],[2186,2186],[2192,2192]]],[1524799406189,["Re@VAIO",[[1,2231,"\n"]],[2228,2228],[2229,2229]]],[1524799406365,["Re@VAIO",[[1,2232,"\n"]],[2229,2229],[2230,2230]]],[1524799421368,["Re@VAIO",[[1,2230,"最后一条定律是算法必须调用自己本身。"]],[2230,2230],[2248,2248]]],[1524799513305,[null,[[-1,230,"打"],[1,231,"指出"],[-1,240,"一"],[-1,398,"\n"],[-1,419,"\r"],[1,420,":"],[-1,434,"\r"],[1,435,"0"],[-1,456,"\r"],[1,457,":"],[-1,484,"\r"],[1,485,"i"],[-1,502,"\r\r"],[1,504,"m\n"],[1,533,"\n"],[1,757,"="],[-1,758," "],[1,782,"="],[-1,783," "],[1,804,"="],[-1,805," "],[1,822,"="],[-1,823," "],[1,836,"="],[-1,837,"￥ "],[1,840,"5"],[-1,842,"5"],[1,843,"\n"],[1,1034,"列表"],[-1,1050,"li"],[-1,1141,"\n"],[-1,1162,"\r"],[1,1163,":"],[-1,1187,"\r"],[1,1188,":"],[-1,1213,"\r"],[1,1214,"]"],[-1,1222,"\r"],[1,1223,":"],[-1,1271,"\r\r"],[1,1273,")\n"],[1,1302,"\n"],[-1,1902,"\n"],[1,1903,"3"],[-1,2008,"\n"],[1,2009,"u"],[1,2249,"\n\n"]],[230,230],[2251,2251]]],[1524799513305,[null,[[1,230,"打"],[-1,230,"指出"],[1,241,"一"],[1,398,"\n"],[1,418,"\r"],[-1,418,":"],[1,433,"\r"],[-1,433,"0"],[1,455,"\r"],[-1,455,":"],[1,483,"\r"],[-1,483,"i"],[1,501,"\r\r"],[-1,501,"m\n"],[-1,532,"\n"],[-1,757,"="],[1,759," "],[-1,782,"="],[1,784," "],[-1,804,"="],[1,806," "],[-1,822,"="],[1,824," "],[-1,836,"="],[1,838,"￥ "],[-1,839,"5"],[1,842,"5"],[-1,842,"\n"],[-1,1034,"列表"],[1,1052,"li"],[1,1141,"\n"],[1,1161,"\r"],[-1,1161,":"],[1,1186,"\r"],[-1,1186,":"],[1,1212,"\r"],[-1,1212,"]"],[1,1221,"\r"],[-1,1221,":"],[1,1270,"\r\r"],[-1,1270,")\n"],[-1,1301,"\n"],[1,1902,"\n"],[-1,1902,"3"],[1,2008,"\n"],[-1,2008,"u"],[-1,2249,"\n\n"]],[2251,2251],[230,230]]],[1524799508770,["Re@VAIO",[[1,2248,"，"]],[2248,2248],[2249,2249]]],[1524799509518,["Re@VAIO",[[-1,2247,"。，"]],[2249,2249],[2247,2247]]],[1524799512252,["Re@VAIO",[[1,2247,"，这是递归"]],[2247,2247],[2252,2252]]],[1524799573332,[null,[[-1,230,"打"],[1,231,"指出"],[-1,240,"一"],[-1,398,"\n"],[-1,419,"\r"],[1,420,":"],[-1,434,"\r"],[1,435,"0"],[-1,456,"\r"],[1,457,":"],[-1,484,"\r"],[1,485,"i"],[-1,502,"\r\r"],[1,504,"m\n"],[1,533,"\n"],[1,757,"="],[-1,758," "],[1,782,"="],[-1,783," "],[1,804,"="],[-1,805," "],[1,822,"="],[-1,823," "],[1,836,"="],[-1,837,"￥ "],[1,840,"5"],[-1,842,"5"],[1,843,"\n"],[1,1034,"列表"],[-1,1050,"li"],[-1,1141,"\n"],[-1,1162,"\r"],[1,1163,":"],[-1,1187,"\r"],[1,1188,":"],[-1,1213,"\r"],[1,1214,"]"],[-1,1222,"\r"],[1,1223,":"],[-1,1271,"\r\r"],[1,1273,")\n"],[1,1302,"\n"],[-1,1902,"\n"],[1,1903,"3"],[-1,2008,"\n"],[1,2009,"u"],[1,2253,"\n\n"]],[230,230],[2255,2255]]],[1524799573332,[null,[[1,230,"打"],[-1,230,"指出"],[1,241,"一"],[1,398,"\n"],[1,418,"\r"],[-1,418,":"],[1,433,"\r"],[-1,433,"0"],[1,455,"\r"],[-1,455,":"],[1,483,"\r"],[-1,483,"i"],[1,501,"\r\r"],[-1,501,"m\n"],[-1,532,"\n"],[-1,757,"="],[1,759," "],[-1,782,"="],[1,784," "],[-1,804,"="],[1,806," "],[-1,822,"="],[1,824," "],[-1,836,"="],[1,838,"￥ "],[-1,839,"5"],[1,842,"5"],[-1,842,"\n"],[-1,1034,"列表"],[1,1052,"li"],[1,1141,"\n"],[1,1161,"\r"],[-1,1161,":"],[1,1186,"\r"],[-1,1186,":"],[1,1212,"\r"],[-1,1212,"]"],[1,1221,"\r"],[-1,1221,":"],[1,1270,"\r\r"],[-1,1270,")\n"],[-1,1301,"\n"],[1,1902,"\n"],[-1,1902,"3"],[1,2008,"\n"],[-1,2008,"u"],[-1,2253,"\n\n"]],[2255,2255],[230,230]]],[1524799516132,["Re@VAIO",[[1,2252,"本"]],[2252,2252],[2253,2253]]],[1524799516254,["Re@VAIO",[[-1,2252,"本"]],[2253,2253],[2252,2252]]],[1524799527995,["Re@VAIO",[[1,2252,"根本的定义。递归丢与徐"]],[2252,2252],[2263,2263]]],[1524799528557,["Re@VAIO",[[-1,2260,"丢与徐"]],[2263,2263],[2260,2260]]],[1524799535307,["Re@VAIO",[[1,2260,"对于许多初学者来说是各优秀"]],[2260,2260],[2273,2273]]],[1524799535696,["Re@VAIO",[[-1,2270,"各优秀"]],[2273,2273],[2270,2270]]],[1524799539027,["Re@VAIO",[[1,2270,"个有些混淆的"]],[2270,2270],[2276,2276]]],[1524799539990,["Re@VAIO",[[-1,2273,"混淆的"]],[2276,2276],[2273,2273]]],[1524799568413,["Re@VAIO",[[1,2273,"难懂的概念。读者应当已经"]],[2273,2273],[2285,2285]]],[1524799633314,[null,[[-1,230,"打"],[1,231,"指出"],[-1,240,"一"],[-1,398,"\n"],[-1,419,"\r"],[1,420,":"],[-1,434,"\r"],[1,435,"0"],[-1,456,"\r"],[1,457,":"],[-1,484,"\r"],[1,485,"i"],[-1,502,"\r\r"],[1,504,"m\n"],[1,533,"\n"],[1,757,"="],[-1,758," "],[1,782,"="],[-1,783," "],[1,804,"="],[-1,805," "],[1,822,"="],[-1,823," "],[1,836,"="],[-1,837,"￥ "],[1,840,"5"],[-1,842,"5"],[1,843,"\n"],[1,1034,"列表"],[-1,1050,"li"],[-1,1141,"\n"],[-1,1162,"\r"],[1,1163,":"],[-1,1187,"\r"],[1,1188,":"],[-1,1213,"\r"],[1,1214,"]"],[-1,1222,"\r"],[1,1223,":"],[-1,1271,"\r\r"],[1,1273,")\n"],[1,1302,"\n"],[-1,1902,"\n"],[1,1903,"3"],[-1,2008,"\n"],[1,2009,"u"],[1,2286,"\n\n"]],[230,230],[2288,2288]]],[1524799633315,[null,[[1,230,"打"],[-1,230,"指出"],[1,241,"一"],[1,398,"\n"],[1,418,"\r"],[-1,418,":"],[1,433,"\r"],[-1,433,"0"],[1,455,"\r"],[-1,455,":"],[1,483,"\r"],[-1,483,"i"],[1,501,"\r\r"],[-1,501,"m\n"],[-1,532,"\n"],[-1,757,"="],[1,759," "],[-1,782,"="],[1,784," "],[-1,804,"="],[1,806," "],[-1,822,"="],[1,824," "],[-1,836,"="],[1,838,"￥ "],[-1,839,"5"],[1,842,"5"],[-1,842,"\n"],[-1,1034,"列表"],[1,1052,"li"],[1,1141,"\n"],[1,1161,"\r"],[-1,1161,":"],[1,1186,"\r"],[-1,1186,":"],[1,1212,"\r"],[-1,1212,"]"],[1,1221,"\r"],[-1,1221,":"],[1,1270,"\r\r"],[-1,1270,")\n"],[-1,1301,"\n"],[1,1902,"\n"],[-1,1902,"3"],[1,2008,"\n"],[-1,2008,"u"],[-1,2286,"\n\n"]],[2288,2288],[230,230]]],[1524799579239,["Re@VAIO",[[1,2285,"发现，递归是一种很有"]],[2285,2285],[2295,2295]]],[1524799580989,["Re@VAIO",[[-1,2290,"是一种很有"]],[2295,2295],[2290,2290]]],[1524799591881,["Re@VAIO",[[1,2290,"函数是一种很优秀的方法，可以"]],[2290,2290],[2304,2304]]],[1524799592485,["Re@VAIO",[[-1,2302,"可以"]],[2304,2304],[2302,2302]]],[1524799594542,["Re@VAIO",[[1,2302,"借助他"]],[2302,2302],[2305,2305]]],[1524799594726,["Re@VAIO",[[-1,2304,"他"]],[2305,2305],[2304,2304]]],[1524799602217,["Re@VAIO",[[1,2304,"它可以将大规模的问题缩小"]],[2304,2304],[2316,2316]]],[1524799602613,["Re@VAIO",[[-1,2314,"缩小"]],[2316,2316],[2314,2314]]],[1524799607693,["Re@VAIO",[[1,2314,"拆分为很像"]],[2314,2314],[2319,2319]]],[1524799608074,["Re@VAIO",[[-1,2317,"很像"]],[2319,2319],[2317,2317]]],[1524799620982,["Re@VAIO",[[1,2317,"小问题。小"]],[2317,2317],[2322,2322]]],[1524799622764,["Re@VAIO",[[-1,2320,"。小"]],[2322,2322],[2320,2320]]],[1524799631548,["Re@VAIO",[[1,2320,"，解决这些小问题只需要写一个函数"]],[2320,2320],[2336,2336]]],[1524799631922,["Re@VAIO",[[-1,2334,"函数"]],[2336,2336],[2334,2334]]],[1524799633163,["Re@VAIO",[[1,2334,"简单的"]],[2334,2334],[2337,2337]]],[1524799693316,[null,[[-1,230,"打"],[1,231,"指出"],[-1,240,"一"],[-1,398,"\n"],[-1,419,"\r"],[1,420,":"],[-1,434,"\r"],[1,435,"0"],[-1,456,"\r"],[1,457,":"],[-1,484,"\r"],[1,485,"i"],[-1,502,"\r\r"],[1,504,"m\n"],[1,533,"\n"],[1,757,"="],[-1,758," "],[1,782,"="],[-1,783," "],[1,804,"="],[-1,805," "],[1,822,"="],[-1,823," "],[1,836,"="],[-1,837,"￥ "],[1,840,"5"],[-1,842,"5"],[1,843,"\n"],[1,1034,"列表"],[-1,1050,"li"],[-1,1141,"\n"],[-1,1162,"\r"],[1,1163,":"],[-1,1187,"\r"],[1,1188,":"],[-1,1213,"\r"],[1,1214,"]"],[-1,1222,"\r"],[1,1223,":"],[-1,1271,"\r\r"],[1,1273,")\n"],[1,1302,"\n"],[-1,1902,"\n"],[1,1903,"3"],[-1,2008,"\n"],[1,2009,"u"],[1,2338,"\n\n"]],[230,230],[2340,2340]]],[1524799693316,[null,[[1,230,"打"],[-1,230,"指出"],[1,241,"一"],[1,398,"\n"],[1,418,"\r"],[-1,418,":"],[1,433,"\r"],[-1,433,"0"],[1,455,"\r"],[-1,455,":"],[1,483,"\r"],[-1,483,"i"],[1,501,"\r\r"],[-1,501,"m\n"],[-1,532,"\n"],[-1,757,"="],[1,759," "],[-1,782,"="],[1,784," "],[-1,804,"="],[1,806," "],[-1,822,"="],[1,824," "],[-1,836,"="],[1,838,"￥ "],[-1,839,"5"],[1,842,"5"],[-1,842,"\n"],[-1,1034,"列表"],[1,1052,"li"],[1,1141,"\n"],[1,1161,"\r"],[-1,1161,":"],[1,1186,"\r"],[-1,1186,":"],[1,1212,"\r"],[-1,1212,"]"],[1,1221,"\r"],[-1,1221,":"],[1,1270,"\r\r"],[-1,1270,")\n"],[-1,1301,"\n"],[1,1902,"\n"],[-1,1902,"3"],[1,2008,"\n"],[-1,2008,"u"],[-1,2338,"\n\n"]],[2340,2340],[230,230]]],[1524799638893,["Re@VAIO",[[1,2337,"函数来对它们及逆行出来"]],[2337,2337],[2348,2348]]],[1524799639773,["Re@VAIO",[[-1,2343,"及逆行出来"]],[2348,2348],[2343,2343]]],[1524799662263,["Re@VAIO",[[1,2343,"处理即可。看起来"]],[2343,2343],[2351,2351]]],[1524799662934,["Re@VAIO",[[-1,2348,"看起来"]],[2351,2351],[2348,2348]]],[1524799681604,["Re@VAIO",[[1,2348,"表面看起来，递归似乎是将显然"]],[2348,2348],[2362,2362]]],[1524799682037,["Re@VAIO",[[-1,2359,"将显然"]],[2362,2362],[2359,2359]]],[1524799689185,["Re@VAIO",[[1,2359,"陷入了一种循环。然"]],[2359,2359],[2368,2368]]],[1524799689266,["Re@VAIO",[[-1,2367,"然"]],[2368,2368],[2367,2367]]],[1524799692213,["Re@VAIO",[[1,2367,"但实际上"]],[2367,2367],[2371,2371]]],[1524799753320,[null,[[-1,230,"打"],[1,231,"指出"],[-1,240,"一"],[-1,398,"\n"],[-1,419,"\r"],[1,420,":"],[-1,434,"\r"],[1,435,"0"],[-1,456,"\r"],[1,457,":"],[-1,484,"\r"],[1,485,"i"],[-1,502,"\r\r"],[1,504,"m\n"],[1,533,"\n"],[1,757,"="],[-1,758," "],[1,782,"="],[-1,783," "],[1,804,"="],[-1,805," "],[1,822,"="],[-1,823," "],[1,836,"="],[-1,837,"￥ "],[1,840,"5"],[-1,842,"5"],[1,843,"\n"],[1,1034,"列表"],[-1,1050,"li"],[-1,1141,"\n"],[-1,1162,"\r"],[1,1163,":"],[-1,1187,"\r"],[1,1188,":"],[-1,1213,"\r"],[1,1214,"]"],[-1,1222,"\r"],[1,1223,":"],[-1,1271,"\r\r"],[1,1273,")\n"],[1,1302,"\n"],[-1,1902,"\n"],[1,1903,"3"],[-1,2008,"\n"],[1,2009,"u"],[1,2372,"\n\n"]],[230,230],[2374,2374]]],[1524799753321,[null,[[1,230,"打"],[-1,230,"指出"],[1,241,"一"],[1,398,"\n"],[1,418,"\r"],[-1,418,":"],[1,433,"\r"],[-1,433,"0"],[1,455,"\r"],[-1,455,":"],[1,483,"\r"],[-1,483,"i"],[1,501,"\r\r"],[-1,501,"m\n"],[-1,532,"\n"],[-1,757,"="],[1,759," "],[-1,782,"="],[1,784," "],[-1,804,"="],[1,806," "],[-1,822,"="],[1,824," "],[-1,836,"="],[1,838,"￥ "],[-1,839,"5"],[1,842,"5"],[-1,842,"\n"],[-1,1034,"列表"],[1,1052,"li"],[1,1141,"\n"],[1,1161,"\r"],[-1,1161,":"],[1,1186,"\r"],[-1,1186,":"],[1,1212,"\r"],[-1,1212,"]"],[1,1221,"\r"],[-1,1221,":"],[1,1270,"\r\r"],[-1,1270,")\n"],[-1,1301,"\n"],[1,1902,"\n"],[-1,1902,"3"],[1,2008,"\n"],[-1,2008,"u"],[-1,2372,"\n\n"]],[2374,2374],[230,230]]],[1524799701863,["Re@VAIO",[[1,2371,"在"]],[2371,2371],[2372,2372]]],[1524799702014,["Re@VAIO",[[-1,2371,"在"]],[2372,2372],[2371,2371]]],[1524799717428,["Re@VAIO",[[1,2371,"它在逻辑上并不是循环的，递归的逻辑是将"]],[2371,2371],[2390,2390]]],[1524799722105,["Re@VAIO",[[-1,2389,"将"]],[2390,2390],[2389,2389]]],[1524799726267,["Re@VAIO",[[1,2389,"用有没得表达"]],[2389,2389],[2395,2395]]],[1524799727076,["Re@VAIO",[[-1,2390,"有没得表达"]],[2395,2395],[2390,2390]]],[1524799729767,["Re@VAIO",[[1,2390,"优美简介的"]],[2390,2390],[2395,2395]]],[1524799730389,["Re@VAIO",[[-1,2392,"简介的"]],[2395,2395],[2392,2392]]],[1524799744671,["Re@VAIO",[[1,2392,"简洁的表达式将问题拆分为更小更简单的。"]],[2392,2392],[2411,2411]]],[1524799746792,["Re@VAIO",[[1,2414,"\n"]],[2411,2411],[2412,2412]]],[1524799746988,["Re@VAIO",[[1,2415,"\n"]],[2412,2412],[2413,2413]]],[1524799752581,["Re@VAIO",[[1,2413,"在本章的剩余部分，"]],[2413,2413],[2422,2422]]],[1524799813296,[null,[[-1,230,"打"],[1,231,"指出"],[-1,240,"一"],[-1,398,"\n"],[-1,419,"\r"],[1,420,":"],[-1,434,"\r"],[1,435,"0"],[-1,456,"\r"],[1,457,":"],[-1,484,"\r"],[1,485,"i"],[-1,502,"\r\r"],[1,504,"m\n"],[1,533,"\n"],[1,757,"="],[-1,758," "],[1,782,"="],[-1,783," "],[1,804,"="],[-1,805," "],[1,822,"="],[-1,823," "],[1,836,"="],[-1,837,"￥ "],[1,840,"5"],[-1,842,"5"],[1,843,"\n"],[1,1034,"列表"],[-1,1050,"li"],[-1,1141,"\n"],[-1,1162,"\r"],[1,1163,":"],[-1,1187,"\r"],[1,1188,":"],[-1,1213,"\r"],[1,1214,"]"],[-1,1222,"\r"],[1,1223,":"],[-1,1271,"\r\r"],[1,1273,")\n"],[1,1302,"\n"],[-1,1902,"\n"],[1,1903,"3"],[-1,2008,"\n"],[1,2009,"u"],[-1,2422,""],[1,2422,"\n\n"]],[230,230],[2424,2424]]],[1524799813297,[null,[[1,230,"打"],[-1,230,"指出"],[1,241,"一"],[1,398,"\n"],[1,418,"\r"],[-1,418,":"],[1,433,"\r"],[-1,433,"0"],[1,455,"\r"],[-1,455,":"],[1,483,"\r"],[-1,483,"i"],[1,501,"\r\r"],[-1,501,"m\n"],[-1,532,"\n"],[-1,757,"="],[1,759," "],[-1,782,"="],[1,784," "],[-1,804,"="],[1,806," "],[-1,822,"="],[1,824," "],[-1,836,"="],[1,838,"￥ "],[-1,839,"5"],[1,842,"5"],[-1,842,"\n"],[-1,1034,"列表"],[1,1052,"li"],[1,1141,"\n"],[1,1161,"\r"],[-1,1161,":"],[1,1186,"\r"],[-1,1186,":"],[1,1212,"\r"],[-1,1212,"]"],[1,1221,"\r"],[-1,1221,":"],[1,1270,"\r\r"],[-1,1270,")\n"],[-1,1301,"\n"],[1,1902,"\n"],[-1,1902,"3"],[1,2008,"\n"],[-1,2008,"u"],[1,2422,""],[-1,2422,"\n\n"]],[2424,2424],[230,230]]],[1524799756162,["Re@VAIO",[[-1,2421,"，"]],[2422,2422],[2421,2421]]],[1524799764037,["Re@VAIO",[[1,2421,"将进一步研究帝国，"]],[2421,2421],[2430,2430]]],[1524799765173,["Re@VAIO",[[-1,2427,"帝国，"]],[2430,2430],[2427,2427]]],[1524799777443,["Re@VAIO",[[1,2427,"递归，每个例子中都会"]],[2427,2427],[2437,2437]]],[1524799779868,["Re@VAIO",[[-1,2436,"会"]],[2437,2437],[2436,2436]]],[1524799784778,["Re@VAIO",[[1,2436,"着重用如何利用散打"]],[2436,2436],[2445,2445]]],[1524799785348,["Re@VAIO",[[-1,2443,"散打"]],[2445,2445],[2443,2443]]],[1524799788711,["Re@VAIO",[[1,2443,"三定律来设计算法。"]],[2443,2443],[2452,2452]]],[1524799789277,["Re@VAIO",[[1,2455,"\n"]],[2452,2452],[2453,2453]]],[1524799789484,["Re@VAIO",[[1,2456,"\n"]],[2453,2453],[2454,2454]]],[1524799791044,["Re@VAIO",[[-1,2456,"\n"]],[2454,2454],[2453,2453]]],[1524799791728,["Re@VAIO",[[1,2456,"\n"]],[2453,2453],[2454,2454]]],[1524799795551,["Re@VAIO",[[1,2438,"于"]],[2438,2438],[2439,2439]]],[1524799796573,["Re@VAIO",[[1,2458,"\n"]],[2454,2454],[2455,2455]]],[1524799812674,["Re@VAIO",[[1,2455,"## 4.5 将"]],[2455,2455],[2463,2463]]],[1524799873335,[null,[[-1,230,"打"],[1,231,"指出"],[-1,240,"一"],[-1,398,"\n"],[-1,419,"\r"],[1,420,":"],[-1,434,"\r"],[1,435,"0"],[-1,456,"\r"],[1,457,":"],[-1,484,"\r"],[1,485,"i"],[-1,502,"\r\r"],[1,504,"m\n"],[1,533,"\n"],[1,757,"="],[-1,758," "],[1,782,"="],[-1,783," "],[1,804,"="],[-1,805," "],[1,822,"="],[-1,823," "],[1,836,"="],[-1,837,"￥ "],[1,840,"5"],[-1,842,"5"],[1,843,"\n"],[1,1034,"列表"],[-1,1050,"li"],[-1,1141,"\n"],[-1,1162,"\r"],[1,1163,":"],[-1,1187,"\r"],[1,1188,":"],[-1,1213,"\r"],[1,1214,"]"],[-1,1222,"\r"],[1,1223,":"],[-1,1271,"\r\r"],[1,1273,")\n"],[1,1302,"\n"],[-1,1902,"\n"],[1,1903,"3"],[-1,2008,"\n"],[1,2009,"u"],[-1,2463,""],[1,2463,"\n"]],[230,230],[2464,2464]]],[1524799873335,[null,[[1,230,"打"],[-1,230,"指出"],[1,241,"一"],[1,398,"\n"],[1,418,"\r"],[-1,418,":"],[1,433,"\r"],[-1,433,"0"],[1,455,"\r"],[-1,455,":"],[1,483,"\r"],[-1,483,"i"],[1,501,"\r\r"],[-1,501,"m\n"],[-1,532,"\n"],[-1,757,"="],[1,759," "],[-1,782,"="],[1,784," "],[-1,804,"="],[1,806," "],[-1,822,"="],[1,824," "],[-1,836,"="],[1,838,"￥ "],[-1,839,"5"],[1,842,"5"],[-1,842,"\n"],[-1,1034,"列表"],[1,1052,"li"],[1,1141,"\n"],[1,1161,"\r"],[-1,1161,":"],[1,1186,"\r"],[-1,1186,":"],[1,1212,"\r"],[-1,1212,"]"],[1,1221,"\r"],[-1,1221,":"],[1,1270,"\r\r"],[-1,1270,")\n"],[-1,1301,"\n"],[1,1902,"\n"],[-1,1902,"3"],[1,2008,"\n"],[-1,2008,"u"],[1,2463,""],[-1,2463,"\n"]],[2464,2464],[230,230]]],[1524799824650,["Re@VAIO",[[1,2463,"整数 "]],[2463,2463],[2466,2466]]],[1524799825440,["Re@VAIO",[[-1,2465," "]],[2466,2466],[2465,2465]]],[1524799827844,["Re@VAIO",[[1,2465,"标识为"]],[2465,2465],[2468,2468]]],[1524799828516,["Re@VAIO",[[-1,2465,"标识为"]],[2468,2468],[2465,2465]]],[1524799829711,["Re@VAIO",[[1,2465,"表位"]],[2465,2465],[2467,2467]]],[1524799829956,["Re@VAIO",[[-1,2465,"表位"]],[2467,2467],[2465,2465]]],[1524799831896,["Re@VAIO",[[1,2465,"标示"]],[2465,2465],[2467,2467]]],[1524799832236,["Re@VAIO",[[-1,2465,"标示"]],[2467,2467],[2465,2465]]],[1524799835642,["Re@VAIO",[[1,2465,"转化为以"]],[2465,2465],[2469,2469]]],[1524799836091,["Re@VAIO",[[-1,2468,"以"]],[2469,2469],[2468,2468]]],[1524799841511,["Re@VAIO",[[1,2468,"以任何进制标识的子"]],[2468,2468],[2477,2477]]],[1524799842166,["Re@VAIO",[[-1,2473,"标识的子"]],[2477,2477],[2473,2473]]],[1524799846029,["Re@VAIO",[[1,2473,"表示的字符串 ##"]],[2473,2473],[2482,2482]]],[1524799846188,["Re@VAIO",[[1,2486,"\n"]],[2482,2482],[2483,2483]]],[1524799846437,["Re@VAIO",[[1,2487,"\n"]],[2483,2483],[2484,2484]]],[1524799871590,["Re@VAIO",[[1,2484,"假设需要将整数转化为二进制"]],[2484,2484],[2497,2497]]],[1524799933345,[null,[[-1,230,"打"],[1,231,"指出"],[-1,240,"一"],[-1,398,"\n"],[-1,419,"\r"],[1,420,":"],[-1,434,"\r"],[1,435,"0"],[-1,456,"\r"],[1,457,":"],[-1,484,"\r"],[1,485,"i"],[-1,502,"\r\r"],[1,504,"m\n"],[1,533,"\n"],[1,757,"="],[-1,758," "],[1,782,"="],[-1,783," "],[1,804,"="],[-1,805," "],[1,822,"="],[-1,823," "],[1,836,"="],[-1,837,"￥ "],[1,840,"5"],[-1,842,"5"],[1,843,"\n"],[1,1034,"列表"],[-1,1050,"li"],[-1,1141,"\n"],[-1,1162,"\r"],[1,1163,":"],[-1,1187,"\r"],[1,1188,":"],[-1,1213,"\r"],[1,1214,"]"],[-1,1222,"\r"],[1,1223,":"],[-1,1271,"\r\r"],[1,1273,")\n"],[1,1302,"\n"],[-1,1902,"\n"],[1,1903,"3"],[-1,2008,"\n"],[1,2009,"u"],[-1,2497,""],[1,2497,"\n"]],[230,230],[2498,2498]]],[1524799933345,[null,[[1,230,"打"],[-1,230,"指出"],[1,241,"一"],[1,398,"\n"],[1,418,"\r"],[-1,418,":"],[1,433,"\r"],[-1,433,"0"],[1,455,"\r"],[-1,455,":"],[1,483,"\r"],[-1,483,"i"],[1,501,"\r\r"],[-1,501,"m\n"],[-1,532,"\n"],[-1,757,"="],[1,759," "],[-1,782,"="],[1,784," "],[-1,804,"="],[1,806," "],[-1,822,"="],[1,824," "],[-1,836,"="],[1,838,"￥ "],[-1,839,"5"],[1,842,"5"],[-1,842,"\n"],[-1,1034,"列表"],[1,1052,"li"],[1,1141,"\n"],[1,1161,"\r"],[-1,1161,":"],[1,1186,"\r"],[-1,1186,":"],[1,1212,"\r"],[-1,1212,"]"],[1,1221,"\r"],[-1,1221,":"],[1,1270,"\r\r"],[-1,1270,")\n"],[-1,1301,"\n"],[1,1902,"\n"],[-1,1902,"3"],[1,2008,"\n"],[-1,2008,"u"],[1,2497,""],[-1,2497,"\n"]],[2498,2498],[230,230]]],[1524799880739,["Re@VAIO",[[1,2497,"与十六进制之间的某个进制"]],[2497,2497],[2509,2509]]],[1524799883428,["Re@VAIO",[[-1,2504,"的某个进制"]],[2509,2509],[2504,2504]]],[1524799886326,["Re@VAIO",[[1,2504,"任意的"]],[2504,2504],[2507,2507]]],[1524799887492,["Re@VAIO",[[-1,2504,"任意的"]],[2507,2507],[2504,2504]]],[1524799891081,["Re@VAIO",[[1,2504,"的某进制标识"]],[2504,2504],[2510,2510]]],[1524799891758,["Re@VAIO",[[-1,2508,"标识"]],[2510,2510],[2508,2508]]],[1524799894827,["Re@VAIO",[[1,2508,"表示的字符串，"]],[2508,2508],[2515,2515]]],[1524799904890,["Re@VAIO",[[-1,2514,"，"]],[2515,2515],[2514,2514]]],[1524799913976,["Re@VAIO",[[1,2514,"形式。将整数10"]],[2514,2514],[2522,2522]]],[1524799915245,["Re@VAIO",[[-1,2517,"将整数10"]],[2522,2522],[2517,2517]]],[1524799919471,["Re@VAIO",[[1,2517,"比如，整数是"]],[2517,2517],[2523,2523]]],[1524799919612,["Re@VAIO",[[-1,2522,"是"]],[2523,2523],[2522,2522]]],[1524799927850,["Re@VAIO",[[1,2522,"10的十进制字符串为“”"]],[2522,2522],[2534,2534]]],[1524799930156,["Re@VAIO",[[-1,2532,"“”"]],[2534,2534],[2532,2532]]],[1524799932462,["Re@VAIO",[[1,2532,"\"10\""]],[2532,2532],[2536,2536]]],[1524799993345,[null,[[-1,230,"打"],[1,231,"指出"],[-1,240,"一"],[-1,398,"\n"],[-1,419,"\r"],[1,420,":"],[-1,434,"\r"],[1,435,"0"],[-1,456,"\r"],[1,457,":"],[-1,484,"\r"],[1,485,"i"],[-1,502,"\r\r"],[1,504,"m\n"],[1,533,"\n"],[1,757,"="],[-1,758," "],[1,782,"="],[-1,783," "],[1,804,"="],[-1,805," "],[1,822,"="],[-1,823," "],[1,836,"="],[-1,837,"￥ "],[1,840,"5"],[-1,842,"5"],[1,843,"\n"],[1,1034,"列表"],[-1,1050,"li"],[-1,1141,"\n"],[-1,1162,"\r"],[1,1163,":"],[-1,1187,"\r"],[1,1188,":"],[-1,1213,"\r"],[1,1214,"]"],[-1,1222,"\r"],[1,1223,":"],[-1,1271,"\r\r"],[1,1273,")\n"],[1,1302,"\n"],[-1,1902,"\n"],[1,1903,"3"],[-1,2008,"\n"],[1,2009,"u"],[-1,2536,""],[1,2536,"\n"]],[230,230],[2537,2537]]],[1524799993345,[null,[[1,230,"打"],[-1,230,"指出"],[1,241,"一"],[1,398,"\n"],[1,418,"\r"],[-1,418,":"],[1,433,"\r"],[-1,433,"0"],[1,455,"\r"],[-1,455,":"],[1,483,"\r"],[-1,483,"i"],[1,501,"\r\r"],[-1,501,"m\n"],[-1,532,"\n"],[-1,757,"="],[1,759," "],[-1,782,"="],[1,784," "],[-1,804,"="],[1,806," "],[-1,822,"="],[1,824," "],[-1,836,"="],[1,838,"￥ "],[-1,839,"5"],[1,842,"5"],[-1,842,"\n"],[-1,1034,"列表"],[1,1052,"li"],[1,1141,"\n"],[1,1161,"\r"],[-1,1161,":"],[1,1186,"\r"],[-1,1186,":"],[1,1212,"\r"],[-1,1212,"]"],[1,1221,"\r"],[-1,1221,":"],[1,1270,"\r\r"],[-1,1270,")\n"],[-1,1301,"\n"],[1,1902,"\n"],[-1,1902,"3"],[1,2008,"\n"],[-1,2008,"u"],[1,2536,""],[-1,2536,"\n"]],[2537,2537],[230,230]]],[1524799962951,["Re@VAIO",[[1,2536,"，而二进制字符串为\"1010\"。有很多算法可以解决该问题，报"]],[2536,2536],[2566,2566]]],[1524799963060,["Re@VAIO",[[-1,2565,"报"]],[2566,2566],[2565,2565]]],[1524799967297,["Re@VAIO",[[1,2565,"包括前文提到过"]],[2565,2565],[2572,2572]]],[1524799967857,["Re@VAIO",[[-1,2569,"提到过"]],[2572,2572],[2569,2569]]],[1524799971905,["Re@VAIO",[[1,2569,"说过的以栈的"]],[2569,2569],[2575,2575]]],[1524799972852,["Re@VAIO",[[-1,2574,"的"]],[2575,2575],[2574,2574]]],[1524799985388,["Re@VAIO",[[1,2574,"来解决，该问题的递归"]],[2574,2574],[2584,2584]]],[1524800053347,[null,[[-1,230,"打"],[1,231,"指出"],[-1,240,"一"],[-1,398,"\n"],[-1,419,"\r"],[1,420,":"],[-1,434,"\r"],[1,435,"0"],[-1,456,"\r"],[1,457,":"],[-1,484,"\r"],[1,485,"i"],[-1,502,"\r\r"],[1,504,"m\n"],[1,533,"\n"],[1,757,"="],[-1,758," "],[1,782,"="],[-1,783," "],[1,804,"="],[-1,805," "],[1,822,"="],[-1,823," "],[1,836,"="],[-1,837,"￥ "],[1,840,"5"],[-1,842,"5"],[1,843,"\n"],[1,1034,"列表"],[-1,1050,"li"],[-1,1141,"\n"],[-1,1162,"\r"],[1,1163,":"],[-1,1187,"\r"],[1,1188,":"],[-1,1213,"\r"],[1,1214,"]"],[-1,1222,"\r"],[1,1223,":"],[-1,1271,"\r\r"],[1,1273,")\n"],[1,1302,"\n"],[-1,1902,"\n"],[1,1903,"3"],[-1,2008,"\n"],[1,2009,"u"],[-1,2584,""],[1,2584,"\n"]],[230,230],[2585,2585]]],[1524800053347,[null,[[1,230,"打"],[-1,230,"指出"],[1,241,"一"],[1,398,"\n"],[1,418,"\r"],[-1,418,":"],[1,433,"\r"],[-1,433,"0"],[1,455,"\r"],[-1,455,":"],[1,483,"\r"],[-1,483,"i"],[1,501,"\r\r"],[-1,501,"m\n"],[-1,532,"\n"],[-1,757,"="],[1,759," "],[-1,782,"="],[1,784," "],[-1,804,"="],[1,806," "],[-1,822,"="],[1,824," "],[-1,836,"="],[1,838,"￥ "],[-1,839,"5"],[1,842,"5"],[-1,842,"\n"],[-1,1034,"列表"],[1,1052,"li"],[1,1141,"\n"],[1,1161,"\r"],[-1,1161,":"],[1,1186,"\r"],[-1,1186,":"],[1,1212,"\r"],[-1,1212,"]"],[1,1221,"\r"],[-1,1221,":"],[1,1270,"\r\r"],[-1,1270,")\n"],[-1,1301,"\n"],[1,1902,"\n"],[-1,1902,"3"],[1,2008,"\n"],[-1,2008,"u"],[1,2584,""],[-1,2584,"\n"]],[2585,2585],[230,230]]],[1524799998965,["Re@VAIO",[[-1,2578,"该问题的递归"]],[2584,2584],[2578,2578]]],[1524800012320,["Re@VAIO",[[1,2578,"但是用递归思想来解决该问题还是最简洁的。"]],[2578,2578],[2598,2598]]],[1524800012575,["Re@VAIO",[[1,2602,"\n"]],[2598,2598],[2599,2599]]],[1524800012771,["Re@VAIO",[[1,2603,"\n"]],[2599,2599],[2600,2600]]],[1524800173339,[null,[[-1,230,"打"],[1,231,"指出"],[-1,240,"一"],[-1,398,"\n"],[-1,419,"\r"],[1,420,":"],[-1,434,"\r"],[1,435,"0"],[-1,456,"\r"],[1,457,":"],[-1,484,"\r"],[1,485,"i"],[-1,502,"\r\r"],[1,504,"m\n"],[1,533,"\n"],[1,757,"="],[-1,758," "],[1,782,"="],[-1,783," "],[1,804,"="],[-1,805," "],[1,822,"="],[-1,823," "],[1,836,"="],[-1,837,"￥ "],[1,840,"5"],[-1,842,"5"],[1,843,"\n"],[1,1034,"列表"],[-1,1050,"li"],[-1,1141,"\n"],[-1,1162,"\r"],[1,1163,":"],[-1,1187,"\r"],[1,1188,":"],[-1,1213,"\r"],[1,1214,"]"],[-1,1222,"\r"],[1,1223,":"],[-1,1271,"\r\r"],[1,1273,")\n"],[1,1302,"\n"],[-1,1902,"\n"],[1,1903,"3"],[-1,2008,"\n"],[1,2009,"u"],[-1,2598,""],[1,2598,"\n"]],[230,230],[2599,2599]]],[1524800173339,[null,[[1,230,"打"],[-1,230,"指出"],[1,241,"一"],[1,398,"\n"],[1,418,"\r"],[-1,418,":"],[1,433,"\r"],[-1,433,"0"],[1,455,"\r"],[-1,455,":"],[1,483,"\r"],[-1,483,"i"],[1,501,"\r\r"],[-1,501,"m\n"],[-1,532,"\n"],[-1,757,"="],[1,759," "],[-1,782,"="],[1,784," "],[-1,804,"="],[1,806," "],[-1,822,"="],[1,824," "],[-1,836,"="],[1,838,"￥ "],[-1,839,"5"],[1,842,"5"],[-1,842,"\n"],[-1,1034,"列表"],[1,1052,"li"],[1,1141,"\n"],[1,1161,"\r"],[-1,1161,":"],[1,1186,"\r"],[-1,1186,":"],[1,1212,"\r"],[-1,1212,"]"],[1,1221,"\r"],[-1,1221,":"],[1,1270,"\r\r"],[-1,1270,")\n"],[-1,1301,"\n"],[1,1902,"\n"],[-1,1902,"3"],[1,2008,"\n"],[-1,2008,"u"],[1,2598,""],[-1,2598,"\n"]],[2599,2599],[230,230]]],[1524800118282,["Re@VAIO",[[1,2604,"\n"]],[2598,2598],[2599,2599]]],[1524800118635,["Re@VAIO",[[1,2605,"\n"]],[2599,2599],[2600,2600]]],[1524800149475,["Re@VAIO",[[1,2600,"接下来以十进制的整数768来进行艳"]],[2600,2600],[2617,2617]]],[1524800150330,["Re@VAIO",[[-1,2613,"来进行艳"]],[2617,2617],[2613,2613]]],[1524800155570,["Re@VAIO",[[1,2613,"为例展开。"]],[2613,2613],[2618,2618]]],[1524800156682,["Re@VAIO",[[-1,2615,"展开。"]],[2618,2618],[2615,2615]]],[1524800165012,["Re@VAIO",[[1,2615,"演示一个具体的问题。假设"]],[2615,2615],[2627,2627]]],[1524800293345,[null,[[-1,230,"打"],[1,231,"指出"],[-1,240,"一"],[-1,398,"\n"],[-1,419,"\r"],[1,420,":"],[-1,434,"\r"],[1,435,"0"],[-1,456,"\r"],[1,457,":"],[-1,484,"\r"],[1,485,"i"],[-1,502,"\r\r"],[1,504,"m\n"],[1,533,"\n"],[1,757,"="],[-1,758," "],[1,782,"="],[-1,783," "],[1,804,"="],[-1,805," "],[1,822,"="],[-1,823," "],[1,836,"="],[-1,837,"￥ "],[1,840,"5"],[-1,842,"5"],[1,843,"\n"],[1,1034,"列表"],[-1,1050,"li"],[-1,1141,"\n"],[-1,1162,"\r"],[1,1163,":"],[-1,1187,"\r"],[1,1188,":"],[-1,1213,"\r"],[1,1214,"]"],[-1,1222,"\r"],[1,1223,":"],[-1,1271,"\r\r"],[1,1273,")\n"],[1,1302,"\n"],[-1,1902,"\n"],[1,1903,"3"],[-1,2008,"\n"],[1,2009,"u"],[-1,2627,""],[1,2627,"\n"]],[230,230],[2628,2628]]],[1524800293345,[null,[[1,230,"打"],[-1,230,"指出"],[1,241,"一"],[1,398,"\n"],[1,418,"\r"],[-1,418,":"],[1,433,"\r"],[-1,433,"0"],[1,455,"\r"],[-1,455,":"],[1,483,"\r"],[-1,483,"i"],[1,501,"\r\r"],[-1,501,"m\n"],[-1,532,"\n"],[-1,757,"="],[1,759," "],[-1,782,"="],[1,784," "],[-1,804,"="],[1,806," "],[-1,822,"="],[1,824," "],[-1,836,"="],[1,838,"￥ "],[-1,839,"5"],[1,842,"5"],[-1,842,"\n"],[-1,1034,"列表"],[1,1052,"li"],[1,1141,"\n"],[1,1161,"\r"],[-1,1161,":"],[1,1186,"\r"],[-1,1186,":"],[1,1212,"\r"],[-1,1212,"]"],[1,1221,"\r"],[-1,1221,":"],[1,1270,"\r\r"],[-1,1270,")\n"],[-1,1301,"\n"],[1,1902,"\n"],[-1,1902,"3"],[1,2008,"\n"],[-1,2008,"u"],[1,2627,""],[-1,2627,"\n"]],[2628,2628],[230,230]]],[1524800290922,["Re@VAIO",[[1,2627,"用"]],[2627,2627],[2628,2628]]],[1524800353362,[null,[[-1,230,"打"],[1,231,"指出"],[-1,240,"一"],[-1,398,"\n"],[-1,419,"\r"],[1,420,":"],[-1,434,"\r"],[1,435,"0"],[-1,456,"\r"],[1,457,":"],[-1,484,"\r"],[1,485,"i"],[-1,502,"\r\r"],[1,504,"m\n"],[1,533,"\n"],[1,757,"="],[-1,758," "],[1,782,"="],[-1,783," "],[1,804,"="],[-1,805," "],[1,822,"="],[-1,823," "],[1,836,"="],[-1,837,"￥ "],[1,840,"5"],[-1,842,"5"],[1,843,"\n"],[1,1034,"列表"],[-1,1050,"li"],[-1,1141,"\n"],[-1,1162,"\r"],[1,1163,":"],[-1,1187,"\r"],[1,1188,":"],[-1,1213,"\r"],[1,1214,"]"],[-1,1222,"\r"],[1,1223,":"],[-1,1271,"\r\r"],[1,1273,")\n"],[1,1302,"\n"],[-1,1902,"\n"],[1,1903,"3"],[-1,2008,"\n"],[1,2009,"u"],[-1,2628,""],[1,2628,"\n"]],[230,230],[2629,2629]]],[1524800353362,[null,[[1,230,"打"],[-1,230,"指出"],[1,241,"一"],[1,398,"\n"],[1,418,"\r"],[-1,418,":"],[1,433,"\r"],[-1,433,"0"],[1,455,"\r"],[-1,455,":"],[1,483,"\r"],[-1,483,"i"],[1,501,"\r\r"],[-1,501,"m\n"],[-1,532,"\n"],[-1,757,"="],[1,759," "],[-1,782,"="],[1,784," "],[-1,804,"="],[1,806," "],[-1,822,"="],[1,824," "],[-1,836,"="],[1,838,"￥ "],[-1,839,"5"],[1,842,"5"],[-1,842,"\n"],[-1,1034,"列表"],[1,1052,"li"],[1,1141,"\n"],[1,1161,"\r"],[-1,1161,":"],[1,1186,"\r"],[-1,1186,":"],[1,1212,"\r"],[-1,1212,"]"],[1,1221,"\r"],[-1,1221,":"],[1,1270,"\r\r"],[-1,1270,")\n"],[-1,1301,"\n"],[1,1902,"\n"],[-1,1902,"3"],[1,2008,"\n"],[-1,2008,"u"],[1,2628,""],[-1,2628,"\n"]],[2629,2629],[230,230]]],[1524800301929,["Re@VAIO",[[1,2628,"一组字符串来对应前10各数"]],[2628,2628],[2641,2641]]],[1524800302233,["Re@VAIO",[[-1,2639,"各数"]],[2641,2641],[2639,2639]]],[1524800353265,["Re@VAIO",[[1,2639,"个数字，比如说convString = \"0123456789\" 。通过在字符串中检索，很容易便可将10以内的数字"]],[2639,2639],[2696,2696]]],[1524800413373,[null,[[-1,230,"打"],[1,231,"指出"],[-1,240,"一"],[-1,398,"\n"],[-1,419,"\r"],[1,420,":"],[-1,434,"\r"],[1,435,"0"],[-1,456,"\r"],[1,457,":"],[-1,484,"\r"],[1,485,"i"],[-1,502,"\r\r"],[1,504,"m\n"],[1,533,"\n"],[1,757,"="],[-1,758," "],[1,782,"="],[-1,783," "],[1,804,"="],[-1,805," "],[1,822,"="],[-1,823," "],[1,836,"="],[-1,837,"￥ "],[1,840,"5"],[-1,842,"5"],[1,843,"\n"],[1,1034,"列表"],[-1,1050,"li"],[-1,1141,"\n"],[-1,1162,"\r"],[1,1163,":"],[-1,1187,"\r"],[1,1188,":"],[-1,1213,"\r"],[1,1214,"]"],[-1,1222,"\r"],[1,1223,":"],[-1,1271,"\r\r"],[1,1273,")\n"],[1,1302,"\n"],[-1,1902,"\n"],[1,1903,"3"],[-1,2008,"\n"],[1,2009,"u"],[-1,2696,""],[1,2696,"\n"]],[230,230],[2697,2697]]],[1524800413373,[null,[[1,230,"打"],[-1,230,"指出"],[1,241,"一"],[1,398,"\n"],[1,418,"\r"],[-1,418,":"],[1,433,"\r"],[-1,433,"0"],[1,455,"\r"],[-1,455,":"],[1,483,"\r"],[-1,483,"i"],[1,501,"\r\r"],[-1,501,"m\n"],[-1,532,"\n"],[-1,757,"="],[1,759," "],[-1,782,"="],[1,784," "],[-1,804,"="],[1,806," "],[-1,822,"="],[1,824," "],[-1,836,"="],[1,838,"￥ "],[-1,839,"5"],[1,842,"5"],[-1,842,"\n"],[-1,1034,"列表"],[1,1052,"li"],[1,1141,"\n"],[1,1161,"\r"],[-1,1161,":"],[1,1186,"\r"],[-1,1186,":"],[1,1212,"\r"],[-1,1212,"]"],[1,1221,"\r"],[-1,1221,":"],[1,1270,"\r\r"],[-1,1270,")\n"],[-1,1301,"\n"],[1,1902,"\n"],[-1,1902,"3"],[1,2008,"\n"],[-1,2008,"u"],[1,2696,""],[-1,2696,"\n"]],[2697,2697],[230,230]]],[1524800355975,["Re@VAIO",[[1,2696,"进行转化，"]],[2696,2696],[2701,2701]]],[1524800357241,["Re@VAIO",[[-1,2700,"，"]],[2701,2701],[2700,2700]]],[1524800362641,["Re@VAIO",[[1,2700,"。比如"]],[2700,2700],[2703,2703]]],[1524800365195,["Re@VAIO",[[-1,2700,"。比如"]],[2703,2703],[2700,2700]]],[1524800370763,["Re@VAIO",[[1,2700,"，例如9"]],[2700,2700],[2704,2704]]],[1524800371337,["Re@VAIO",[[-1,2703,"9"]],[2704,2704],[2703,2703]]],[1524800387304,["Re@VAIO",[[1,2703,"整数9，那么字符串便是convString[9] 或者"]],[2703,2703],[2730,2730]]],[1524800388953,["Re@VAIO",[[-1,2727," 或者"]],[2730,2730],[2727,2727]]],[1524800409827,["Re@VAIO",[[1,2727,"，即\"9\"。如果将"]],[2727,2727],[2736,2736]]],[1524800410633,["Re@VAIO",[[-1,2733,"如果将"]],[2736,2736],[2733,2733]]],[1524800412053,["Re@VAIO",[[1,2733,"将"]],[2733,2733],[2734,2734]]],[1524800473360,[null,[[-1,230,"打"],[1,231,"指出"],[-1,240,"一"],[-1,398,"\n"],[-1,419,"\r"],[1,420,":"],[-1,434,"\r"],[1,435,"0"],[-1,456,"\r"],[1,457,":"],[-1,484,"\r"],[1,485,"i"],[-1,502,"\r\r"],[1,504,"m\n"],[1,533,"\n"],[1,757,"="],[-1,758," "],[1,782,"="],[-1,783," "],[1,804,"="],[-1,805," "],[1,822,"="],[-1,823," "],[1,836,"="],[-1,837,"￥ "],[1,840,"5"],[-1,842,"5"],[1,843,"\n"],[1,1034,"列表"],[-1,1050,"li"],[-1,1141,"\n"],[-1,1162,"\r"],[1,1163,":"],[-1,1187,"\r"],[1,1188,":"],[-1,1213,"\r"],[1,1214,"]"],[-1,1222,"\r"],[1,1223,":"],[-1,1271,"\r\r"],[1,1273,")\n"],[1,1302,"\n"],[-1,1902,"\n"],[1,1903,"3"],[-1,2008,"\n"],[1,2009,"u"],[-1,2734,""],[1,2734,"\n"]],[230,230],[2735,2735]]],[1524800473360,[null,[[1,230,"打"],[-1,230,"指出"],[1,241,"一"],[1,398,"\n"],[1,418,"\r"],[-1,418,":"],[1,433,"\r"],[-1,433,"0"],[1,455,"\r"],[-1,455,":"],[1,483,"\r"],[-1,483,"i"],[1,501,"\r\r"],[-1,501,"m\n"],[-1,532,"\n"],[-1,757,"="],[1,759," "],[-1,782,"="],[1,784," "],[-1,804,"="],[1,806," "],[-1,822,"="],[1,824," "],[-1,836,"="],[1,838,"￥ "],[-1,839,"5"],[1,842,"5"],[-1,842,"\n"],[-1,1034,"列表"],[1,1052,"li"],[1,1141,"\n"],[1,1161,"\r"],[-1,1161,":"],[1,1186,"\r"],[-1,1186,":"],[1,1212,"\r"],[-1,1212,"]"],[1,1221,"\r"],[-1,1221,":"],[1,1270,"\r\r"],[-1,1270,")\n"],[-1,1301,"\n"],[1,1902,"\n"],[-1,1902,"3"],[1,2008,"\n"],[-1,2008,"u"],[1,2734,""],[-1,2734,"\n"]],[2735,2735],[230,230]]],[1524800419784,["Re@VAIO",[[1,2734,"769拆分为丧单独"]],[2734,2734],[2743,2743]]],[1524800420529,["Re@VAIO",[[-1,2740,"丧单独"]],[2743,2743],[2740,2740]]],[1524800443655,["Re@VAIO",[[1,2740,"三个单独的数字7，6，9，将其转化为字符串也很简单了。小于"]],[2740,2740],[2769,2769]]],[1524800445377,["Re@VAIO",[[-1,2767,"小于"]],[2769,2769],[2767,2767]]],[1524800451807,["Re@VAIO",[[1,2767,"小于10的整数看起来是"]],[2767,2767],[2778,2778]]],[1524800452209,["Re@VAIO",[[-1,2777,"是"]],[2778,2778],[2777,2777]]],[1524800452811,["Re@VAIO",[[1,2777,"可"]],[2777,2777],[2778,2778]]],[1524800452840,["Re@VAIO",[[-1,2777,"可"]],[2778,2778],[2777,2777]]],[1524800455925,["Re@VAIO",[[1,2777,"是不错的基本情形。"]],[2777,2777],[2786,2786]]],[1524807853508,[null,[[-1,230,"打"],[1,231,"指出"],[-1,240,"一"],[-1,398,"\n"],[-1,419,"\r"],[1,420,":"],[-1,434,"\r"],[1,435,"0"],[-1,456,"\r"],[1,457,":"],[-1,484,"\r"],[1,485,"i"],[-1,502,"\r\r"],[1,504,"m\n"],[1,533,"\n"],[1,757,"="],[-1,758," "],[1,782,"="],[-1,783," "],[1,804,"="],[-1,805," "],[1,822,"="],[-1,823," "],[1,836,"="],[-1,837,"￥ "],[1,840,"5"],[-1,842,"5"],[1,843,"\n"],[1,1034,"列表"],[-1,1050,"li"],[-1,1141,"\n"],[-1,1162,"\r"],[1,1163,":"],[-1,1187,"\r"],[1,1188,":"],[-1,1213,"\r"],[1,1214,"]"],[-1,1222,"\r"],[1,1223,":"],[-1,1271,"\r\r"],[1,1273,")\n"],[1,1302,"\n"],[-1,1902,"\n"],[1,1903,"3"],[-1,2008,"\n"],[1,2009,"u"],[-1,2786,""],[1,2786,"\n"]],[230,230],[2787,2787]]],[1524807853508,[null,[[1,230,"打"],[-1,230,"指出"],[1,241,"一"],[1,398,"\n"],[1,418,"\r"],[-1,418,":"],[1,433,"\r"],[-1,433,"0"],[1,455,"\r"],[-1,455,":"],[1,483,"\r"],[-1,483,"i"],[1,501,"\r\r"],[-1,501,"m\n"],[-1,532,"\n"],[-1,757,"="],[1,759," "],[-1,782,"="],[1,784," "],[-1,804,"="],[1,806," "],[-1,822,"="],[1,824," "],[-1,836,"="],[1,838,"￥ "],[-1,839,"5"],[1,842,"5"],[-1,842,"\n"],[-1,1034,"列表"],[1,1052,"li"],[1,1141,"\n"],[1,1161,"\r"],[-1,1161,":"],[1,1186,"\r"],[-1,1186,":"],[1,1212,"\r"],[-1,1212,"]"],[1,1221,"\r"],[-1,1221,":"],[1,1270,"\r\r"],[-1,1270,")\n"],[-1,1301,"\n"],[1,1902,"\n"],[-1,1902,"3"],[1,2008,"\n"],[-1,2008,"u"],[1,2786,""],[-1,2786,"\n"]],[2787,2787],[230,230]]],[1524807850281,["Re@VAIO",[[1,2788,"确定进制后"]],[2788,2788],[2793,2793]]],[1524807913497,[null,[[-1,230,"打"],[1,231,"指出"],[-1,240,"一"],[-1,398,"\n"],[-1,419,"\r"],[1,420,":"],[-1,434,"\r"],[1,435,"0"],[-1,456,"\r"],[1,457,":"],[-1,484,"\r"],[1,485,"i"],[-1,502,"\r\r"],[1,504,"m\n"],[1,533,"\n"],[1,757,"="],[-1,758," "],[1,782,"="],[-1,783," "],[1,804,"="],[-1,805," "],[1,822,"="],[-1,823," "],[1,836,"="],[-1,837,"￥ "],[1,840,"5"],[-1,842,"5"],[1,843,"\n"],[1,1034,"列表"],[-1,1050,"li"],[-1,1141,"\n"],[-1,1162,"\r"],[1,1163,":"],[-1,1187,"\r"],[1,1188,":"],[-1,1213,"\r"],[1,1214,"]"],[-1,1222,"\r"],[1,1223,":"],[-1,1271,"\r\r"],[1,1273,")\n"],[1,1302,"\n"],[-1,1902,"\n"],[1,1903,"3"],[-1,2008,"\n"],[1,2009,"u"],[-1,2793,""],[1,2793,"\n"]],[230,230],[2794,2794]]],[1524807913497,[null,[[1,230,"打"],[-1,230,"指出"],[1,241,"一"],[1,398,"\n"],[1,418,"\r"],[-1,418,":"],[1,433,"\r"],[-1,433,"0"],[1,455,"\r"],[-1,455,":"],[1,483,"\r"],[-1,483,"i"],[1,501,"\r\r"],[-1,501,"m\n"],[-1,532,"\n"],[-1,757,"="],[1,759," "],[-1,782,"="],[1,784," "],[-1,804,"="],[1,806," "],[-1,822,"="],[1,824," "],[-1,836,"="],[1,838,"￥ "],[-1,839,"5"],[1,842,"5"],[-1,842,"\n"],[-1,1034,"列表"],[1,1052,"li"],[1,1141,"\n"],[1,1161,"\r"],[-1,1161,":"],[1,1186,"\r"],[-1,1186,":"],[1,1212,"\r"],[-1,1212,"]"],[1,1221,"\r"],[-1,1221,":"],[1,1270,"\r\r"],[-1,1270,")\n"],[-1,1301,"\n"],[1,1902,"\n"],[-1,1902,"3"],[1,2008,"\n"],[-1,2008,"u"],[1,2793,""],[-1,2793,"\n"]],[2794,2794],[230,230]]],[1524807857884,["Re@VAIO",[[-1,2790,"进制后"]],[2793,2793],[2790,2790]]],[1524807868568,["Re@VAIO",[[1,2790,"基本情形后，算法"]],[2790,2790],[2798,2798]]],[1524807869346,["Re@VAIO",[[-1,2796,"算法"]],[2798,2798],[2796,2796]]],[1524807877436,["Re@VAIO",[[1,2796,"整个算法将包括3部分："]],[2796,2796],[2807,2807]]],[1524807877779,["Re@VAIO",[[1,2811,"\n"]],[2807,2807],[2808,2808]]],[1524807878257,["Re@VAIO",[[1,2812,"\n"]],[2808,2808],[2809,2809]]],[1524807892632,["Re@VAIO",[[1,2809,"1. 将原始"]],[2809,2809],[2815,2815]]],[1524807896322,["Re@VAIO",[[-1,2813,"原始"]],[2815,2815],[2813,2813]]],[1524807904517,["Re@VAIO",[[1,2813,"原数字转化为一系列"]],[2813,2813],[2822,2822]]],[1524807904796,["Re@VAIO",[[-1,2820,"系列"]],[2822,2822],[2820,2820]]],[1524807906109,["Re@VAIO",[[1,2820,"组"]],[2820,2820],[2821,2821]]],[1524807911825,["Re@VAIO",[[-1,2819,"一组"]],[2821,2821],[2819,2819]]],[1524807973521,[null,[[-1,230,"打"],[1,231,"指出"],[-1,240,"一"],[-1,398,"\n"],[-1,419,"\r"],[1,420,":"],[-1,434,"\r"],[1,435,"0"],[-1,456,"\r"],[1,457,":"],[-1,484,"\r"],[1,485,"i"],[-1,502,"\r\r"],[1,504,"m\n"],[1,533,"\n"],[1,757,"="],[-1,758," "],[1,782,"="],[-1,783," "],[1,804,"="],[-1,805," "],[1,822,"="],[-1,823," "],[1,836,"="],[-1,837,"￥ "],[1,840,"5"],[-1,842,"5"],[1,843,"\n"],[1,1034,"列表"],[-1,1050,"li"],[-1,1141,"\n"],[-1,1162,"\r"],[1,1163,":"],[-1,1187,"\r"],[1,1188,":"],[-1,1213,"\r"],[1,1214,"]"],[-1,1222,"\r"],[1,1223,":"],[-1,1271,"\r\r"],[1,1273,")\n"],[1,1302,"\n"],[-1,1902,"\n"],[1,1903,"3"],[-1,2008,"\n"],[1,2009,"u"],[-1,2819,""],[1,2819,"\n"]],[230,230],[2820,2820]]],[1524807973521,[null,[[1,230,"打"],[-1,230,"指出"],[1,241,"一"],[1,398,"\n"],[1,418,"\r"],[-1,418,":"],[1,433,"\r"],[-1,433,"0"],[1,455,"\r"],[-1,455,":"],[1,483,"\r"],[-1,483,"i"],[1,501,"\r\r"],[-1,501,"m\n"],[-1,532,"\n"],[-1,757,"="],[1,759," "],[-1,782,"="],[1,784," "],[-1,804,"="],[1,806," "],[-1,822,"="],[1,824," "],[-1,836,"="],[1,838,"￥ "],[-1,839,"5"],[1,842,"5"],[-1,842,"\n"],[-1,1034,"列表"],[1,1052,"li"],[1,1141,"\n"],[1,1161,"\r"],[-1,1161,":"],[1,1186,"\r"],[-1,1186,":"],[1,1212,"\r"],[-1,1212,"]"],[1,1221,"\r"],[-1,1221,":"],[1,1270,"\r\r"],[-1,1270,")\n"],[-1,1301,"\n"],[1,1902,"\n"],[-1,1902,"3"],[1,2008,"\n"],[-1,2008,"u"],[1,2819,""],[-1,2819,"\n"]],[2820,2820],[230,230]]],[1524807918225,["Re@VAIO",[[1,2819,"一串单数子。"]],[2819,2819],[2825,2825]]],[1524807918608,["Re@VAIO",[[1,2829,"\n"]],[2825,2825],[2826,2826]]],[1524807919203,["Re@VAIO",[[-1,2829,"\n"]],[2826,2826],[2825,2825]]],[1524807919944,["Re@VAIO",[[-1,2821,"单数子。"]],[2825,2825],[2821,2821]]],[1524807922026,["Re@VAIO",[[1,2821,"单数字。"]],[2821,2821],[2825,2825]]],[1524807922257,["Re@VAIO",[[1,2829,"\n"]],[2825,2825],[2826,2826]]],[1524807925551,["Re@VAIO",[[1,2826,"2. 将"]],[2826,2826],[2830,2830]]],[1524807929825,["Re@VAIO",[[-1,2829,"将"]],[2830,2830],[2829,2829]]],[1524807933424,["Re@VAIO",[[1,2829,"利用查询"]],[2829,2829],[2833,2833]]],[1524807938407,["Re@VAIO",[[-1,2831,"查询"]],[2833,2833],[2831,2831]]],[1524807960027,["Re@VAIO",[[1,2831,"检索将单数字转为字符串。"]],[2831,2831],[2843,2843]]],[1524807960537,["Re@VAIO",[[1,2847,"\n"]],[2843,2843],[2844,2844]]],[1524807961260,["Re@VAIO",[[1,2844,"3. "]],[2844,2844],[2847,2847]]],[1524807963795,["Re@VAIO",[[-1,2820,"串"]],[2821,2821],[2820,2820]]],[1524807964632,["Re@VAIO",[[1,2820,"系列"]],[2820,2820],[2822,2822]]],[1524807973309,["Re@VAIO",[[1,2848,"将各单"]],[2848,2848],[2851,2851]]],[1524808033502,[null,[[-1,230,"打"],[1,231,"指出"],[-1,240,"一"],[-1,398,"\n"],[-1,419,"\r"],[1,420,":"],[-1,434,"\r"],[1,435,"0"],[-1,456,"\r"],[1,457,":"],[-1,484,"\r"],[1,485,"i"],[-1,502,"\r\r"],[1,504,"m\n"],[1,533,"\n"],[1,757,"="],[-1,758," "],[1,782,"="],[-1,783," "],[1,804,"="],[-1,805," "],[1,822,"="],[-1,823," "],[1,836,"="],[-1,837,"￥ "],[1,840,"5"],[-1,842,"5"],[1,843,"\n"],[1,1034,"列表"],[-1,1050,"li"],[-1,1141,"\n"],[-1,1162,"\r"],[1,1163,":"],[-1,1187,"\r"],[1,1188,":"],[-1,1213,"\r"],[1,1214,"]"],[-1,1222,"\r"],[1,1223,":"],[-1,1271,"\r\r"],[1,1273,")\n"],[1,1302,"\n"],[-1,1902,"\n"],[1,1903,"3"],[-1,2008,"\n"],[1,2009,"u"]],[230,230],[2010,2010]]],[1524808033502,[null,[[1,230,"打"],[-1,230,"指出"],[1,241,"一"],[1,398,"\n"],[1,418,"\r"],[-1,418,":"],[1,433,"\r"],[-1,433,"0"],[1,455,"\r"],[-1,455,":"],[1,483,"\r"],[-1,483,"i"],[1,501,"\r\r"],[-1,501,"m\n"],[-1,532,"\n"],[-1,757,"="],[1,759," "],[-1,782,"="],[1,784," "],[-1,804,"="],[1,806," "],[-1,822,"="],[1,824," "],[-1,836,"="],[1,838,"￥ "],[-1,839,"5"],[1,842,"5"],[-1,842,"\n"],[-1,1034,"列表"],[1,1052,"li"],[1,1141,"\n"],[1,1161,"\r"],[-1,1161,":"],[1,1186,"\r"],[-1,1186,":"],[1,1212,"\r"],[-1,1212,"]"],[1,1221,"\r"],[-1,1221,":"],[1,1270,"\r\r"],[-1,1270,")\n"],[-1,1301,"\n"],[1,1902,"\n"],[-1,1902,"3"],[1,2008,"\n"],[-1,2008,"u"]],[2010,2010],[230,230]]],[1524807975343,["Re@VAIO",[[1,2851,"字符串"]],[2851,2851],[2854,2854]]],[1524807980137,["Re@VAIO",[[1,2851,"数字"]],[2851,2851],[2853,2853]]],[1524807981977,["Re@VAIO",[[1,2856,"俩"]],[2856,2856],[2857,2857]]],[1524807982072,["Re@VAIO",[[-1,2856,"俩"]],[2857,2857],[2856,2856]]],[1524807983748,["Re@VAIO",[[1,2856,"链接"]],[2856,2856],[2858,2858]]],[1524807984216,["Re@VAIO",[[-1,2856,"链接"]],[2858,2858],[2856,2856]]],[1524807989042,["Re@VAIO",[[1,2856,"连接起来，形成最终的结果。"]],[2856,2856],[2869,2869]]],[1524807989345,["Re@VAIO",[[1,2873,"\n"]],[2869,2869],[2870,2870]]],[1524807989560,["Re@VAIO",[[1,2874,"\n"]],[2870,2870],[2871,2871]]],[1524807996895,["Re@VAIO",[[1,2871,"下一步是计算"]],[2871,2871],[2877,2877]]],[1524808004327,["Re@VAIO",[[-1,2875,"计算"]],[2877,2877],[2875,2875]]],[1524808009246,["Re@VAIO",[[1,2875,"解禁额"]],[2875,2875],[2878,2878]]],[1524808010041,["Re@VAIO",[[-1,2875,"解禁额"]],[2878,2878],[2875,2875]]],[1524808011149,["Re@VAIO",[[1,2875,"解决"]],[2875,2875],[2877,2877]]],[1524808011817,["Re@VAIO",[[-1,2875,"解决"]],[2877,2877],[2875,2875]]],[1524808023533,["Re@VAIO",[[1,2875,"实现状态的改变，使得其向"]],[2875,2875],[2887,2887]]],[1524808023802,["Re@VAIO",[[-1,2885,"其向"]],[2887,2887],[2885,2885]]],[1524808030882,["Re@VAIO",[[1,2885,"程序向基本情形靠近。"]],[2885,2885],[2895,2895]]],[1524808093529,[null,[[-1,230,"打"],[1,231,"指出"],[-1,240,"一"],[-1,398,"\n"],[-1,419,"\r"],[1,420,":"],[-1,434,"\r"],[1,435,"0"],[-1,456,"\r"],[1,457,":"],[-1,484,"\r"],[1,485,"i"],[-1,502,"\r\r"],[1,504,"m\n"],[1,533,"\n"],[1,757,"="],[-1,758," "],[1,782,"="],[-1,783," "],[1,804,"="],[-1,805," "],[1,822,"="],[-1,823," "],[1,836,"="],[-1,837,"￥ "],[1,840,"5"],[-1,842,"5"],[1,843,"\n"],[1,1034,"列表"],[-1,1050,"li"],[-1,1141,"\n"],[-1,1162,"\r"],[1,1163,":"],[-1,1187,"\r"],[1,1188,":"],[-1,1213,"\r"],[1,1214,"]"],[-1,1222,"\r"],[1,1223,":"],[-1,1271,"\r\r"],[1,1273,")\n"],[1,1302,"\n"],[-1,1902,"\n"],[1,1903,"3"],[-1,2008,"\n"],[1,2009,"u"]],[230,230],[2010,2010]]],[1524808093529,[null,[[1,230,"打"],[-1,230,"指出"],[1,241,"一"],[1,398,"\n"],[1,418,"\r"],[-1,418,":"],[1,433,"\r"],[-1,433,"0"],[1,455,"\r"],[-1,455,":"],[1,483,"\r"],[-1,483,"i"],[1,501,"\r\r"],[-1,501,"m\n"],[-1,532,"\n"],[-1,757,"="],[1,759," "],[-1,782,"="],[1,784," "],[-1,804,"="],[1,806," "],[-1,822,"="],[1,824," "],[-1,836,"="],[1,838,"￥ "],[-1,839,"5"],[1,842,"5"],[-1,842,"\n"],[-1,1034,"列表"],[1,1052,"li"],[1,1141,"\n"],[1,1161,"\r"],[-1,1161,":"],[1,1186,"\r"],[-1,1186,":"],[1,1212,"\r"],[-1,1212,"]"],[1,1221,"\r"],[-1,1221,":"],[1,1270,"\r\r"],[-1,1270,")\n"],[-1,1301,"\n"],[1,1902,"\n"],[-1,1902,"3"],[1,2008,"\n"],[-1,2008,"u"]],[2010,2010],[230,230]]],[1524808040851,["Re@VAIO",[[1,2895,"因为 研读"]],[2895,2895],[2900,2900]]],[1524808041374,["Re@VAIO",[[-1,2897," 研读"]],[2900,2900],[2897,2897]]],[1524808047533,["Re@VAIO",[[1,2897,"研究对象是数字，不妨考虑"]],[2897,2897],[2909,2909]]],[1524808051265,["Re@VAIO",[[-1,2907,"考虑"]],[2909,2909],[2907,2907]]],[1524808055209,["Re@VAIO",[[1,2907,"回想一想扫描"]],[2907,2907],[2913,2913]]],[1524808055521,["Re@VAIO",[[-1,2911,"扫描"]],[2913,2913],[2911,2911]]],[1524808072841,["Re@VAIO",[[1,2911,"什么数学运算可以减少数字。嘴鸥可能"]],[2911,2911],[2928,2928]]],[1524808073616,["Re@VAIO",[[-1,2923,"。嘴鸥可能"]],[2928,2928],[2923,2923]]],[1524808075593,["Re@VAIO",[[1,2923,"，最优可能"]],[2923,2923],[2928,2928]]],[1524808076028,["Re@VAIO",[[-1,2925,"优可能"]],[2928,2928],[2925,2925]]],[1524808077481,["Re@VAIO",[[1,2925,"有看可能"]],[2925,2925],[2929,2929]]],[1524808078073,["Re@VAIO",[[-1,2926,"看可能"]],[2929,2929],[2926,2926]]],[1524808081254,["Re@VAIO",[[1,2926,"可能的是出发和"]],[2926,2926],[2933,2933]]],[1524808081689,["Re@VAIO",[[-1,2930,"出发和"]],[2933,2933],[2930,2930]]],[1524808085457,["Re@VAIO",[[1,2930,"减法和除法。"]],[2930,2930],[2936,2936]]],[1524808153523,[null,[[-1,230,"打"],[1,231,"指出"],[-1,240,"一"],[-1,398,"\n"],[-1,419,"\r"],[1,420,":"],[-1,434,"\r"],[1,435,"0"],[-1,456,"\r"],[1,457,":"],[-1,484,"\r"],[1,485,"i"],[-1,502,"\r\r"],[1,504,"m\n"],[1,533,"\n"],[1,757,"="],[-1,758," "],[1,782,"="],[-1,783," "],[1,804,"="],[-1,805," "],[1,822,"="],[-1,823," "],[1,836,"="],[-1,837,"￥ "],[1,840,"5"],[-1,842,"5"],[1,843,"\n"],[1,1034,"列表"],[-1,1050,"li"],[-1,1141,"\n"],[-1,1162,"\r"],[1,1163,":"],[-1,1187,"\r"],[1,1188,":"],[-1,1213,"\r"],[1,1214,"]"],[-1,1222,"\r"],[1,1223,":"],[-1,1271,"\r\r"],[1,1273,")\n"],[1,1302,"\n"],[-1,1902,"\n"],[1,1903,"3"],[-1,2008,"\n"],[1,2009,"u"]],[230,230],[2010,2010]]],[1524808153524,[null,[[1,230,"打"],[-1,230,"指出"],[1,241,"一"],[1,398,"\n"],[1,418,"\r"],[-1,418,":"],[1,433,"\r"],[-1,433,"0"],[1,455,"\r"],[-1,455,":"],[1,483,"\r"],[-1,483,"i"],[1,501,"\r\r"],[-1,501,"m\n"],[-1,532,"\n"],[-1,757,"="],[1,759," "],[-1,782,"="],[1,784," "],[-1,804,"="],[1,806," "],[-1,822,"="],[1,824," "],[-1,836,"="],[1,838,"￥ "],[-1,839,"5"],[1,842,"5"],[-1,842,"\n"],[-1,1034,"列表"],[1,1052,"li"],[1,1141,"\n"],[1,1161,"\r"],[-1,1161,":"],[1,1186,"\r"],[-1,1186,":"],[1,1212,"\r"],[-1,1212,"]"],[1,1221,"\r"],[-1,1221,":"],[1,1270,"\r\r"],[-1,1270,")\n"],[-1,1301,"\n"],[1,1902,"\n"],[-1,1902,"3"],[1,2008,"\n"],[-1,2008,"u"]],[2010,2010],[230,230]]],[1524808131407,["Re@VAIO",[[1,2940,"\n"]],[2936,2936],[2937,2937]]],[1524808131656,["Re@VAIO",[[1,2941,"\n"]],[2937,2937],[2938,2938]]],[1524808135843,["Re@VAIO",[[-1,2941,"\n"]],[2938,2938],[2937,2937]]],[1524808136310,["Re@VAIO",[[-1,2940,"\n"]],[2937,2937],[2936,2936]]],[1524808148070,["Re@VAIO",[[1,2936,"虽然说减法也许是可行的，但"]],[2936,2936],[2949,2949]]],[1524808213509,[null,[[-1,230,"打"],[1,231,"指出"],[-1,240,"一"],[-1,398,"\n"],[-1,419,"\r"],[1,420,":"],[-1,434,"\r"],[1,435,"0"],[-1,456,"\r"],[1,457,":"],[-1,484,"\r"],[1,485,"i"],[-1,502,"\r\r"],[1,504,"m\n"],[1,533,"\n"],[1,757,"="],[-1,758," "],[1,782,"="],[-1,783," "],[1,804,"="],[-1,805," "],[1,822,"="],[-1,823," "],[1,836,"="],[-1,837,"￥ "],[1,840,"5"],[-1,842,"5"],[1,843,"\n"],[1,1034,"列表"],[-1,1050,"li"],[-1,1141,"\n"],[-1,1162,"\r"],[1,1163,":"],[-1,1187,"\r"],[1,1188,":"],[-1,1213,"\r"],[1,1214,"]"],[-1,1222,"\r"],[1,1223,":"],[-1,1271,"\r\r"],[1,1273,")\n"],[1,1302,"\n"],[-1,1902,"\n"],[1,1903,"3"],[-1,2008,"\n"],[1,2009,"u"]],[230,230],[2010,2010]]],[1524808213509,[null,[[1,230,"打"],[-1,230,"指出"],[1,241,"一"],[1,398,"\n"],[1,418,"\r"],[-1,418,":"],[1,433,"\r"],[-1,433,"0"],[1,455,"\r"],[-1,455,":"],[1,483,"\r"],[-1,483,"i"],[1,501,"\r\r"],[-1,501,"m\n"],[-1,532,"\n"],[-1,757,"="],[1,759," "],[-1,782,"="],[1,784," "],[-1,804,"="],[1,806," "],[-1,822,"="],[1,824," "],[-1,836,"="],[1,838,"￥ "],[-1,839,"5"],[1,842,"5"],[-1,842,"\n"],[-1,1034,"列表"],[1,1052,"li"],[1,1141,"\n"],[1,1161,"\r"],[-1,1161,":"],[1,1186,"\r"],[-1,1186,":"],[1,1212,"\r"],[-1,1212,"]"],[1,1221,"\r"],[-1,1221,":"],[1,1270,"\r\r"],[-1,1270,")\n"],[-1,1301,"\n"],[1,1902,"\n"],[-1,1902,"3"],[1,2008,"\n"],[-1,2008,"u"]],[2010,2010],[230,230]]],[1524808159221,["Re@VAIO",[[1,2949,"有些"]],[2949,2949],[2951,2951]]],[1524808160960,["Re@VAIO",[[-1,2949,"有些"]],[2951,2951],[2949,2949]]],[1524808166824,["Re@VAIO",[[1,2949,"以上"]],[2949,2949],[2951,2951]]],[1524808167089,["Re@VAIO",[[-1,2949,"以上"]],[2951,2951],[2949,2949]]],[1524808177000,["Re@VAIO",[[1,2949,"有些令人困扰的是谁来见"]],[2949,2949],[2960,2960]]],[1524808177553,["Re@VAIO",[[-1,2957,"谁来见"]],[2960,2960],[2957,2957]]],[1524808183575,["Re@VAIO",[[1,2957,"减法的来年改革"]],[2957,2957],[2964,2964]]],[1524808184780,["Re@VAIO",[[-1,2957,"减法的来年改革"]],[2964,2964],[2957,2957]]],[1524808188620,["Re@VAIO",[[1,2957,"如何确定决发"]],[2957,2957],[2963,2963]]],[1524808188904,["Re@VAIO",[[-1,2961,"决发"]],[2963,2963],[2961,2961]]],[1524808192848,["Re@VAIO",[[1,2961,"减法操作的两个对象"]],[2961,2961],[2970,2970]]],[1524808197353,["Re@VAIO",[[1,2957,"在这里"]],[2957,2957],[2960,2960]]],[1524808201863,["Re@VAIO",[[1,2973,"。而值"]],[2973,2973],[2976,2976]]],[1524808201992,["Re@VAIO",[[-1,2975,"值"]],[2976,2976],[2975,2975]]],[1524808205922,["Re@VAIO",[[1,2975,"出发的好"]],[2975,2975],[2979,2979]]],[1524808206472,["Re@VAIO",[[-1,2975,"出发的好"]],[2979,2979],[2975,2975]]],[1524808207728,["Re@VAIO",[[1,2975,"处罚"]],[2975,2975],[2977,2977]]],[1524808208145,["Re@VAIO",[[-1,2975,"处罚"]],[2977,2977],[2975,2975]]],[1524808212864,["Re@VAIO",[[1,2975,"除法则清晰很多"]],[2975,2975],[2982,2982]]],[1524808273529,[null,[[-1,230,"打"],[1,231,"指出"],[-1,240,"一"],[-1,398,"\n"],[-1,419,"\r"],[1,420,":"],[-1,434,"\r"],[1,435,"0"],[-1,456,"\r"],[1,457,":"],[-1,484,"\r"],[1,485,"i"],[-1,502,"\r\r"],[1,504,"m\n"],[1,533,"\n"],[1,757,"="],[-1,758," "],[1,782,"="],[-1,783," "],[1,804,"="],[-1,805," "],[1,822,"="],[-1,823," "],[1,836,"="],[-1,837,"￥ "],[1,840,"5"],[-1,842,"5"],[1,843,"\n"],[1,1034,"列表"],[-1,1050,"li"],[-1,1141,"\n"],[-1,1162,"\r"],[1,1163,":"],[-1,1187,"\r"],[1,1188,":"],[-1,1213,"\r"],[1,1214,"]"],[-1,1222,"\r"],[1,1223,":"],[-1,1271,"\r\r"],[1,1273,")\n"],[1,1302,"\n"],[-1,1902,"\n"],[1,1903,"3"],[-1,2008,"\n"],[1,2009,"u"]],[230,230],[2010,2010]]],[1524808273529,[null,[[1,230,"打"],[-1,230,"指出"],[1,241,"一"],[1,398,"\n"],[1,418,"\r"],[-1,418,":"],[1,433,"\r"],[-1,433,"0"],[1,455,"\r"],[-1,455,":"],[1,483,"\r"],[-1,483,"i"],[1,501,"\r\r"],[-1,501,"m\n"],[-1,532,"\n"],[-1,757,"="],[1,759," "],[-1,782,"="],[1,784," "],[-1,804,"="],[1,806," "],[-1,822,"="],[1,824," "],[-1,836,"="],[1,838,"￥ "],[-1,839,"5"],[1,842,"5"],[-1,842,"\n"],[-1,1034,"列表"],[1,1052,"li"],[1,1141,"\n"],[1,1161,"\r"],[-1,1161,":"],[1,1186,"\r"],[-1,1186,":"],[1,1212,"\r"],[-1,1212,"]"],[1,1221,"\r"],[-1,1221,":"],[1,1270,"\r\r"],[-1,1270,")\n"],[-1,1301,"\n"],[1,1902,"\n"],[-1,1902,"3"],[1,2008,"\n"],[-1,2008,"u"]],[2010,2010],[230,230]]],[1524808218727,["Re@VAIO",[[1,2982,"。"]],[2982,2982],[2983,2983]]],[1524808224026,["Re@VAIO",[[1,2987,"\n"]],[2983,2983],[2984,2984]]],[1524808224239,["Re@VAIO",[[1,2988,"\n"]],[2984,2984],[2985,2985]]],[1524808240815,["Re@VAIO",[[1,2985,"将整数769除以10，可以得到76及"]],[2985,2985],[3003,3003]]],[1524808241144,["Re@VAIO",[[-1,3002,"及"]],[3003,3003],[3002,3002]]],[1524808245318,["Re@VAIO",[[1,3002,"余9."]],[3002,3002],[3005,3005]]],[1524808245865,["Re@VAIO",[[-1,3004,"."]],[3005,3005],[3004,3004]]],[1524808246257,["Re@VAIO",[[1,3004,"."]],[3004,3004],[3005,3005]]],[1524808246753,["Re@VAIO",[[-1,3004,"."]],[3005,3005],[3004,3004]]],[1524808247052,["Re@VAIO",[[1,3004,"。"]],[3004,3004],[3005,3005]]],[1524808250247,["Re@VAIO",[[-1,3004,"。"]],[3005,3005],[3004,3004]]],[1524808251393,["Re@VAIO",[[1,3004,"。"]],[3004,3004],[3005,3005]]],[1524808251958,["Re@VAIO",[[-1,3004,"。"]],[3005,3005],[3004,3004]]],[1524808254565,["Re@VAIO",[[1,3004,"，这个两个"]],[3004,3004],[3009,3009]]],[1524808255824,["Re@VAIO",[[-1,3006,"个两个"]],[3009,3009],[3006,3006]]],[1524808268349,["Re@VAIO",[[1,3006,"两个数字很有用。首先，余数是一个小于10的数，"]],[3006,3006],[3029,3029]]],[1524808271786,["Re@VAIO",[[-1,3027,"数，"]],[3029,3029],[3027,3027]]],[1524808333536,[null,[[-1,230,"打"],[1,231,"指出"],[-1,240,"一"],[-1,398,"\n"],[-1,419,"\r"],[1,420,":"],[-1,434,"\r"],[1,435,"0"],[-1,456,"\r"],[1,457,":"],[-1,484,"\r"],[1,485,"i"],[-1,502,"\r\r"],[1,504,"m\n"],[1,533,"\n"],[1,757,"="],[-1,758," "],[1,782,"="],[-1,783," "],[1,804,"="],[-1,805," "],[1,822,"="],[-1,823," "],[1,836,"="],[-1,837,"￥ "],[1,840,"5"],[-1,842,"5"],[1,843,"\n"],[1,1034,"列表"],[-1,1050,"li"],[-1,1141,"\n"],[-1,1162,"\r"],[1,1163,":"],[-1,1187,"\r"],[1,1188,":"],[-1,1213,"\r"],[1,1214,"]"],[-1,1222,"\r"],[1,1223,":"],[-1,1271,"\r\r"],[1,1273,")\n"],[1,1302,"\n"],[-1,1902,"\n"],[1,1903,"3"],[-1,2008,"\n"],[1,2009,"u"]],[230,230],[2010,2010]]],[1524808333536,[null,[[1,230,"打"],[-1,230,"指出"],[1,241,"一"],[1,398,"\n"],[1,418,"\r"],[-1,418,":"],[1,433,"\r"],[-1,433,"0"],[1,455,"\r"],[-1,455,":"],[1,483,"\r"],[-1,483,"i"],[1,501,"\r\r"],[-1,501,"m\n"],[-1,532,"\n"],[-1,757,"="],[1,759," "],[-1,782,"="],[1,784," "],[-1,804,"="],[1,806," "],[-1,822,"="],[1,824," "],[-1,836,"="],[1,838,"￥ "],[-1,839,"5"],[1,842,"5"],[-1,842,"\n"],[-1,1034,"列表"],[1,1052,"li"],[1,1141,"\n"],[1,1161,"\r"],[-1,1161,":"],[1,1186,"\r"],[-1,1186,":"],[1,1212,"\r"],[-1,1212,"]"],[1,1221,"\r"],[-1,1221,":"],[1,1270,"\r\r"],[-1,1270,")\n"],[-1,1301,"\n"],[1,1902,"\n"],[-1,1902,"3"],[1,2008,"\n"],[-1,2008,"u"]],[2010,2010],[230,230]]],[1524808280475,["Re@VAIO",[[1,3027,"底的数，"]],[3027,3027],[3031,3031]]],[1524808284985,["Re@VAIO",[[-1,2791,"本情形"]],[2794,2794],[2791,2791]]],[1524808287744,["Re@VAIO",[[1,2791,"进制"]],[2791,2791],[2793,2793]]],[1524808289686,["Re@VAIO",[[1,2791,"本"]],[2791,2791],[2792,2792]]],[1524808296630,["Re@VAIO",[[-1,3024,"10的底"]],[3028,3028],[3024,3024]]],[1524808298666,["Re@VAIO",[[1,3024,"进制10"]],[3024,3024],[3028,3028]]],[1524808304704,["Re@VAIO",[[1,3026,"（）"]],[3026,3026],[3028,3028]]],[1524808306440,["Re@VAIO",[[-1,3027,"）10"]],[3030,3030],[3027,3027]]],[1524808307398,["Re@VAIO",[[1,3027,"10）"]],[3027,3027],[3030,3030]]],[1524808326925,["Re@VAIO",[[1,3033,"因此可以直接使用检索转化为字符串。第二"]],[3033,3033],[3052,3052]]],[1524808327184,["Re@VAIO",[[-1,3050,"第二"]],[3052,3052],[3050,3050]]],[1524808328680,["Re@VAIO",[[1,3050,"其次，"]],[3050,3050],[3053,3053]]],[1524808393575,[null,[[-1,230,"打"],[1,231,"指出"],[-1,240,"一"],[-1,398,"\n"],[-1,419,"\r"],[1,420,":"],[-1,434,"\r"],[1,435,"0"],[-1,456,"\r"],[1,457,":"],[-1,484,"\r"],[1,485,"i"],[-1,502,"\r\r"],[1,504,"m\n"],[1,533,"\n"],[1,757,"="],[-1,758," "],[1,782,"="],[-1,783," "],[1,804,"="],[-1,805," "],[1,822,"="],[-1,823," "],[1,836,"="],[-1,837,"￥ "],[1,840,"5"],[-1,842,"5"],[1,843,"\n"],[1,1034,"列表"],[-1,1050,"li"],[-1,1141,"\n"],[-1,1162,"\r"],[1,1163,":"],[-1,1187,"\r"],[1,1188,":"],[-1,1213,"\r"],[1,1214,"]"],[-1,1222,"\r"],[1,1223,":"],[-1,1271,"\r\r"],[1,1273,")\n"],[1,1302,"\n"],[-1,1902,"\n"],[1,1903,"3"],[-1,2008,"\n"],[1,2009,"u"]],[230,230],[2010,2010]]],[1524808393575,[null,[[1,230,"打"],[-1,230,"指出"],[1,241,"一"],[1,398,"\n"],[1,418,"\r"],[-1,418,":"],[1,433,"\r"],[-1,433,"0"],[1,455,"\r"],[-1,455,":"],[1,483,"\r"],[-1,483,"i"],[1,501,"\r\r"],[-1,501,"m\n"],[-1,532,"\n"],[-1,757,"="],[1,759," "],[-1,782,"="],[1,784," "],[-1,804,"="],[1,806," "],[-1,822,"="],[1,824," "],[-1,836,"="],[1,838,"￥ "],[-1,839,"5"],[1,842,"5"],[-1,842,"\n"],[-1,1034,"列表"],[1,1052,"li"],[1,1141,"\n"],[1,1161,"\r"],[-1,1161,":"],[1,1186,"\r"],[-1,1186,":"],[1,1212,"\r"],[-1,1212,"]"],[1,1221,"\r"],[-1,1221,":"],[1,1270,"\r\r"],[-1,1270,")\n"],[-1,1301,"\n"],[1,1902,"\n"],[-1,1902,"3"],[1,2008,"\n"],[-1,2008,"u"]],[2010,2010],[230,230]]],[1524808342819,["Re@VAIO",[[1,3053,"得到了一个比原始"]],[3053,3053],[3061,3061]]],[1524808357784,["Re@VAIO",[[-1,3058,"比原始"]],[3061,3061],[3058,3058]]],[1524808372004,["Re@VAIO",[[1,3058,"小于初始数字的数，这使得"]],[3058,3058],[3070,3070]]],[1524808372560,["Re@VAIO",[[-1,3068,"使得"]],[3070,3070],[3068,3068]]],[1524808392161,["Re@VAIO",[[1,3068,"便向基本情形靠近了一步。现在"]],[3068,3068],[3082,3082]]],[1524808453531,[null,[[-1,230,"打"],[1,231,"指出"],[-1,240,"一"],[-1,398,"\n"],[-1,419,"\r"],[1,420,":"],[-1,434,"\r"],[1,435,"0"],[-1,456,"\r"],[1,457,":"],[-1,484,"\r"],[1,485,"i"],[-1,502,"\r\r"],[1,504,"m\n"],[1,533,"\n"],[1,757,"="],[-1,758," "],[1,782,"="],[-1,783," "],[1,804,"="],[-1,805," "],[1,822,"="],[-1,823," "],[1,836,"="],[-1,837,"￥ "],[1,840,"5"],[-1,842,"5"],[1,843,"\n"],[1,1034,"列表"],[-1,1050,"li"],[-1,1141,"\n"],[-1,1162,"\r"],[1,1163,":"],[-1,1187,"\r"],[1,1188,":"],[-1,1213,"\r"],[1,1214,"]"],[-1,1222,"\r"],[1,1223,":"],[-1,1271,"\r\r"],[1,1273,")\n"],[1,1302,"\n"],[-1,1902,"\n"],[1,1903,"3"],[-1,2008,"\n"],[1,2009,"u"]],[230,230],[2010,2010]]],[1524808453531,[null,[[1,230,"打"],[-1,230,"指出"],[1,241,"一"],[1,398,"\n"],[1,418,"\r"],[-1,418,":"],[1,433,"\r"],[-1,433,"0"],[1,455,"\r"],[-1,455,":"],[1,483,"\r"],[-1,483,"i"],[1,501,"\r\r"],[-1,501,"m\n"],[-1,532,"\n"],[-1,757,"="],[1,759," "],[-1,782,"="],[1,784," "],[-1,804,"="],[1,806," "],[-1,822,"="],[1,824," "],[-1,836,"="],[1,838,"￥ "],[-1,839,"5"],[1,842,"5"],[-1,842,"\n"],[-1,1034,"列表"],[1,1052,"li"],[1,1141,"\n"],[1,1161,"\r"],[-1,1161,":"],[1,1186,"\r"],[-1,1186,":"],[1,1212,"\r"],[-1,1212,"]"],[1,1221,"\r"],[-1,1221,":"],[1,1270,"\r\r"],[-1,1270,")\n"],[-1,1301,"\n"],[1,1902,"\n"],[-1,1902,"3"],[1,2008,"\n"],[-1,2008,"u"]],[2010,2010],[230,230]]],[1524808404942,["Re@VAIO",[[1,3082,"需要做得便是将76转化为它的字符标识。"]],[3082,3082],[3101,3101]]],[1524808405935,["Re@VAIO",[[-1,3098,"标识。"]],[3101,3101],[3098,3098]]],[1524808411366,["Re@VAIO",[[1,3098,"表示。同"]],[3098,3098],[3102,3102]]],[1524808411410,["Re@VAIO",[[-1,3101,"同"]],[3102,3102],[3101,3101]]],[1524808414698,["Re@VAIO",[[1,3101,"同样，利用"]],[3101,3101],[3106,3106]]],[1524808419312,["Re@VAIO",[[-1,3104,"利用"]],[3106,3106],[3104,3104]]],[1524808423969,["Re@VAIO",[[1,3104,"利用出发"]],[3104,3104],[3108,3108]]],[1524808424392,["Re@VAIO",[[-1,3106,"出发"]],[3108,3108],[3106,3106]]],[1524808433605,["Re@VAIO",[[1,3106,"除法可以得到7余6.最后"]],[3106,3106],[3118,3118]]],[1524808435823,["Re@VAIO",[[-1,3115,".最后"]],[3118,3118],[3115,3115]]],[1524808446265,["Re@VAIO",[[1,3115,"。最后，问题退化到将7转为为"]],[3115,3115],[3129,3129]]],[1524808449696,["Re@VAIO",[[-1,3126,"转为为"]],[3129,3129],[3126,3126]]],[1524808452136,["Re@VAIO",[[1,3126,"转为"]],[3126,3126],[3128,3128]]],[1524808513621,[null,[[-1,230,"打"],[1,231,"指出"],[-1,240,"一"],[-1,398,"\n"],[-1,419,"\r"],[1,420,":"],[-1,434,"\r"],[1,435,"0"],[-1,456,"\r"],[1,457,":"],[-1,484,"\r"],[1,485,"i"],[-1,502,"\r\r"],[1,504,"m\n"],[1,533,"\n"],[1,757,"="],[-1,758," "],[1,782,"="],[-1,783," "],[1,804,"="],[-1,805," "],[1,822,"="],[-1,823," "],[1,836,"="],[-1,837,"￥ "],[1,840,"5"],[-1,842,"5"],[1,843,"\n"],[1,1034,"列表"],[-1,1050,"li"],[-1,1141,"\n"],[-1,1162,"\r"],[1,1163,":"],[-1,1187,"\r"],[1,1188,":"],[-1,1213,"\r"],[1,1214,"]"],[-1,1222,"\r"],[1,1223,":"],[-1,1271,"\r\r"],[1,1273,")\n"],[1,1302,"\n"],[-1,1902,"\n"],[1,1903,"3"],[-1,2008,"\n"],[1,2009,"u"]],[230,230],[2010,2010]]],[1524808513622,[null,[[1,230,"打"],[-1,230,"指出"],[1,241,"一"],[1,398,"\n"],[1,418,"\r"],[-1,418,":"],[1,433,"\r"],[-1,433,"0"],[1,455,"\r"],[-1,455,":"],[1,483,"\r"],[-1,483,"i"],[1,501,"\r\r"],[-1,501,"m\n"],[-1,532,"\n"],[-1,757,"="],[1,759," "],[-1,782,"="],[1,784," "],[-1,804,"="],[1,806," "],[-1,822,"="],[1,824," "],[-1,836,"="],[1,838,"￥ "],[-1,839,"5"],[1,842,"5"],[-1,842,"\n"],[-1,1034,"列表"],[1,1052,"li"],[1,1141,"\n"],[1,1161,"\r"],[-1,1161,":"],[1,1186,"\r"],[-1,1186,":"],[1,1212,"\r"],[-1,1212,"]"],[1,1221,"\r"],[-1,1221,":"],[1,1270,"\r\r"],[-1,1270,")\n"],[-1,1301,"\n"],[1,1902,"\n"],[-1,1902,"3"],[1,2008,"\n"],[-1,2008,"u"]],[2010,2010],[230,230]]],[1524808460008,["Re@VAIO",[[-1,3123,"到将7转为"]],[3128,3128],[3123,3123]]],[1524808469787,["Re@VAIO",[[1,3123,"为转化7."]],[3123,3123],[3128,3128]]],[1524808474271,["Re@VAIO",[[-1,3127,"."]],[3128,3128],[3127,3127]]],[1524808477256,["Re@VAIO",[[1,3127,"。这些"]],[3127,3127],[3130,3130]]],[1524808477647,["Re@VAIO",[[-1,3128,"这些"]],[3130,3130],[3128,3128]]],[1524808482673,["Re@VAIO",[[1,3128,"流程如图3所示。注意"]],[3128,3128],[3138,3138]]],[1524808496541,["Re@VAIO",[[-1,3136,"注意"]],[3138,3138],[3136,3136]]],[1524808499475,["Re@VAIO",[[1,3136,"需要"]],[3136,3136],[3138,3138]]],[1524808499676,["Re@VAIO",[[-1,3136,"需要"]],[3138,3138],[3136,3136]]],[1524808505572,["Re@VAIO",[[1,3136,"注意，需要被保存的数据"]],[3136,3136],[3147,3147]]],[1524808506855,["Re@VAIO",[[-1,3146,"据"]],[3147,3147],[3146,3146]]],[1524808510754,["Re@VAIO",[[1,3146,"被防止在事宜"]],[3146,3146],[3152,3152]]],[1524808511546,["Re@VAIO",[[-1,3147,"防止在事宜"]],[3152,3152],[3147,3147]]],[1524808513351,["Re@VAIO",[[1,3147,"放置在"]],[3147,3147],[3150,3150]]],[1524808573547,[null,[[-1,230,"打"],[1,231,"指出"],[-1,240,"一"],[-1,398,"\n"],[-1,419,"\r"],[1,420,":"],[-1,434,"\r"],[1,435,"0"],[-1,456,"\r"],[1,457,":"],[-1,484,"\r"],[1,485,"i"],[-1,502,"\r\r"],[1,504,"m\n"],[1,533,"\n"],[1,757,"="],[-1,758," "],[1,782,"="],[-1,783," "],[1,804,"="],[-1,805," "],[1,822,"="],[-1,823," "],[1,836,"="],[-1,837,"￥ "],[1,840,"5"],[-1,842,"5"],[1,843,"\n"],[1,1034,"列表"],[-1,1050,"li"],[-1,1141,"\n"],[-1,1162,"\r"],[1,1163,":"],[-1,1187,"\r"],[1,1188,":"],[-1,1213,"\r"],[1,1214,"]"],[-1,1222,"\r"],[1,1223,":"],[-1,1271,"\r\r"],[1,1273,")\n"],[1,1302,"\n"],[-1,1902,"\n"],[1,1903,"3"],[-1,2008,"\n"],[1,2009,"u"]],[230,230],[2010,2010]]],[1524808573547,[null,[[1,230,"打"],[-1,230,"指出"],[1,241,"一"],[1,398,"\n"],[1,418,"\r"],[-1,418,":"],[1,433,"\r"],[-1,433,"0"],[1,455,"\r"],[-1,455,":"],[1,483,"\r"],[-1,483,"i"],[1,501,"\r\r"],[-1,501,"m\n"],[-1,532,"\n"],[-1,757,"="],[1,759," "],[-1,782,"="],[1,784," "],[-1,804,"="],[1,806," "],[-1,822,"="],[1,824," "],[-1,836,"="],[1,838,"￥ "],[-1,839,"5"],[1,842,"5"],[-1,842,"\n"],[-1,1034,"列表"],[1,1052,"li"],[1,1141,"\n"],[1,1161,"\r"],[-1,1161,":"],[1,1186,"\r"],[-1,1186,":"],[1,1212,"\r"],[-1,1212,"]"],[1,1221,"\r"],[-1,1221,":"],[1,1270,"\r\r"],[-1,1270,")\n"],[-1,1301,"\n"],[1,1902,"\n"],[-1,1902,"3"],[1,2008,"\n"],[-1,2008,"u"]],[2010,2010],[230,230]]],[1524808515187,["Re@VAIO",[[1,3150,"示意图右侧。"]],[3150,3150],[3156,3156]]],[1524808515589,["Re@VAIO",[[1,3160,"\n"]],[3156,3156],[3157,3157]]],[1524808515782,["Re@VAIO",[[1,3161,"\n"]],[3157,3157],[3158,3158]]],[1524808520395,["Re@VAIO",[[1,3158,"![image](http://interactivepython.org/courselib/static/pythonds/_images/toStr.png)"]],[3158,3158],[3240,3240]]],[1524808520751,["Re@VAIO",[[1,3244,"\n"]],[3240,3240],[3241,3241]]],[1524808520958,["Re@VAIO",[[1,3245,"\n"]],[3241,3241],[3242,3242]]],[1524808526238,["Re@VAIO",[[1,3242,"可执行代码1给出"]],[3242,3242],[3250,3250]]],[1524808526975,["Re@VAIO",[[-1,3248,"给出"]],[3250,3250],[3248,3248]]],[1524808542944,["Re@VAIO",[[1,3248,"实现了撒谎能够使"]],[3248,3248],[3256,3256]]],[1524808543777,["Re@VAIO",[[-1,3251,"撒谎能够使"]],[3256,3256],[3251,3251]]],[1524808550506,["Re@VAIO",[[1,3251,"上述的算法。"]],[3251,3251],[3257,3257]]],[1524808551231,["Re@VAIO",[[1,3261,"\n"]],[3257,3257],[3258,3258]]],[1524808551422,["Re@VAIO",[[1,3262,"\n"]],[3258,3258],[3259,3259]]],[1524808561486,["Re@VAIO",[[1,3259,"** 可执行代码1： 待"]],[3259,3259],[3271,3271]]],[1524808562671,["Re@VAIO",[[-1,3267,"1： 待"]],[3271,3271],[3267,3267]]],[1524808566385,["Re@VAIO",[[1,3267,"1：迭代算法："]],[3267,3267],[3274,3274]]],[1524808570699,["Re@VAIO",[[-1,3273,"："]],[3274,3274],[3273,3273]]],[1524808572801,["Re@VAIO",[[1,3273,"——整数"]],[3273,3273],[3277,3277]]],[1524808633547,[null,[[-1,230,"打"],[1,231,"指出"],[-1,240,"一"],[-1,398,"\n"],[-1,419,"\r"],[1,420,":"],[-1,434,"\r"],[1,435,"0"],[-1,456,"\r"],[1,457,":"],[-1,484,"\r"],[1,485,"i"],[-1,502,"\r\r"],[1,504,"m\n"],[1,533,"\n"],[1,757,"="],[-1,758," "],[1,782,"="],[-1,783," "],[1,804,"="],[-1,805," "],[1,822,"="],[-1,823," "],[1,836,"="],[-1,837,"￥ "],[1,840,"5"],[-1,842,"5"],[1,843,"\n"],[1,1034,"列表"],[-1,1050,"li"],[-1,1141,"\n"],[-1,1162,"\r"],[1,1163,":"],[-1,1187,"\r"],[1,1188,":"],[-1,1213,"\r"],[1,1214,"]"],[-1,1222,"\r"],[1,1223,":"],[-1,1271,"\r\r"],[1,1273,")\n"],[1,1302,"\n"],[-1,1902,"\n"],[1,1903,"3"],[-1,2008,"\n"],[1,2009,"u"]],[230,230],[2010,2010]]],[1524808633547,[null,[[1,230,"打"],[-1,230,"指出"],[1,241,"一"],[1,398,"\n"],[1,418,"\r"],[-1,418,":"],[1,433,"\r"],[-1,433,"0"],[1,455,"\r"],[-1,455,":"],[1,483,"\r"],[-1,483,"i"],[1,501,"\r\r"],[-1,501,"m\n"],[-1,532,"\n"],[-1,757,"="],[1,759," "],[-1,782,"="],[1,784," "],[-1,804,"="],[1,806," "],[-1,822,"="],[1,824," "],[-1,836,"="],[1,838,"￥ "],[-1,839,"5"],[1,842,"5"],[-1,842,"\n"],[-1,1034,"列表"],[1,1052,"li"],[1,1141,"\n"],[1,1161,"\r"],[-1,1161,":"],[1,1186,"\r"],[-1,1186,":"],[1,1212,"\r"],[-1,1212,"]"],[1,1221,"\r"],[-1,1221,":"],[1,1270,"\r\r"],[-1,1270,")\n"],[-1,1301,"\n"],[1,1902,"\n"],[-1,1902,"3"],[1,2008,"\n"],[-1,2008,"u"]],[2010,2010],[230,230]]],[1524808619274,["Re@VAIO",[[1,3277,"转化为字符串 **"]],[3277,3277],[3286,3286]]],[1524808619702,["Re@VAIO",[[1,3290,"\n"]],[3286,3286],[3287,3287]]],[1524808622140,["Re@VAIO",[[1,3287,"```Pyho"]],[3287,3287],[3294,3294]]],[1524808622670,["Re@VAIO",[[-1,3292,"ho"]],[3294,3294],[3292,3292]]],[1524808623179,["Re@VAIO",[[1,3292,"thon"]],[3292,3292],[3296,3296]]],[1524808623400,["Re@VAIO",[[1,3300,"\n"]],[3296,3296],[3297,3297]]],[1524808628127,["Re@VAIO",[[1,3297,"def toStr(n,base):\r\n   convertString = \"0123456789ABCDEF\"\r\n   if n < base:\r\n      return convertString[n]\r\n   else:\r\n      return toStr(n//base,base) + convertString[n%base]\r\n\r\nprint(toStr(1453,16))"]],[3297,3297],[3495,3495]]],[1524808629095,["Re@VAIO",[[-1,3315,"\r"],[-1,3354,"\r"],[-1,3371,"\r"],[-1,3402,"\r"],[-1,3412,"\r"],[-1,3470,"\r"],[-1,3472,"\r"],[1,3495,"\n\n"]],[3492,3492],[3493,3493]]],[1524808629796,["Re@VAIO",[[-1,3493,"\n"],[1,3494,"```"]],[3493,3493],[3496,3496]]],[1524808630842,["Re@VAIO",[[-1,3492,"\n"]],[3492,3492],[3491,3491]]],[1524808631039,["Re@VAIO",[[-1,3491,"\n"]],[3491,3491],[3490,3490]]],[1524808631408,["Re@VAIO",[[-1,3490,"\n"]],[3490,3490],[3489,3489]]],[1524808631912,["Re@VAIO",[[-1,3489,"\n"]],[3489,3489],[3488,3488]]],[1524808632565,["Re@VAIO",[[1,3492,"\n\n"]],[3492,3492],[3493,3493]]],[1524808632990,["Re@VAIO",[[1,3494,"\n"]],[3493,3493],[3494,3494]]],[1524808693580,[null,[[-1,230,"打"],[1,231,"指出"],[-1,240,"一"],[-1,398,"\n"],[-1,419,"\r"],[1,420,":"],[-1,434,"\r"],[1,435,"0"],[-1,456,"\r"],[1,457,":"],[-1,484,"\r"],[1,485,"i"],[-1,502,"\r\r"],[1,504,"m\n"],[1,533,"\n"],[1,757,"="],[-1,758," "],[1,782,"="],[-1,783," "],[1,804,"="],[-1,805," "],[1,822,"="],[-1,823," "],[1,836,"="],[-1,837,"￥ "],[1,840,"5"],[-1,842,"5"],[1,843,"\n"],[1,1034,"列表"],[-1,1050,"li"],[-1,1141,"\n"],[-1,1162,"\r"],[1,1163,":"],[-1,1187,"\r"],[1,1188,":"],[-1,1213,"\r"],[1,1214,"]"],[-1,1222,"\r"],[1,1223,":"],[-1,1271,"\r\r"],[1,1273,")\n"],[1,1302,"\n"],[-1,1902,"\n"],[1,1903,"3"],[-1,2008,"\n"],[1,2009,"u"]],[230,230],[2010,2010]]],[1524808693581,[null,[[1,230,"打"],[-1,230,"指出"],[1,241,"一"],[1,398,"\n"],[1,418,"\r"],[-1,418,":"],[1,433,"\r"],[-1,433,"0"],[1,455,"\r"],[-1,455,":"],[1,483,"\r"],[-1,483,"i"],[1,501,"\r\r"],[-1,501,"m\n"],[-1,532,"\n"],[-1,757,"="],[1,759," "],[-1,782,"="],[1,784," "],[-1,804,"="],[1,806," "],[-1,822,"="],[1,824," "],[-1,836,"="],[1,838,"￥ "],[-1,839,"5"],[1,842,"5"],[-1,842,"\n"],[-1,1034,"列表"],[1,1052,"li"],[1,1141,"\n"],[1,1161,"\r"],[-1,1161,":"],[1,1186,"\r"],[-1,1186,":"],[1,1212,"\r"],[-1,1212,"]"],[1,1221,"\r"],[-1,1221,":"],[1,1270,"\r\r"],[-1,1270,")\n"],[-1,1301,"\n"],[1,1902,"\n"],[-1,1902,"3"],[1,2008,"\n"],[-1,2008,"u"]],[2010,2010],[230,230]]],[1524808633901,["Re@VAIO",[[-1,3494,"\n"]],[3494,3494],[3493,3493]]],[1524808638443,["Re@VAIO",[[-1,3493,"\n"],[1,3494,"注意在地"]],[3493,3493],[3497,3497]]],[1524808638907,["Re@VAIO",[[-1,3496,"地"]],[3497,3497],[3496,3496]]],[1524808685089,["Re@VAIO",[[1,3496,"第3行，检测了基本情形，即n小于目标进制。一旦检测到基本情形，便停止递归，然后返回"]],[3496,3496],[3537,3537]]],[1524808689564,["Re@VAIO",[[-1,3535,"返回"]],[3537,3537],[3535,3535]]],[1524808693255,["Re@VAIO",[[1,3535,"根据convert"]],[3535,3535],[3544,3544]]],[1524808753558,[null,[[-1,230,"打"],[1,231,"指出"],[-1,240,"一"],[-1,398,"\n"],[-1,419,"\r"],[1,420,":"],[-1,434,"\r"],[1,435,"0"],[-1,456,"\r"],[1,457,":"],[-1,484,"\r"],[1,485,"i"],[-1,502,"\r\r"],[1,504,"m\n"],[1,533,"\n"],[1,757,"="],[-1,758," "],[1,782,"="],[-1,783," "],[1,804,"="],[-1,805," "],[1,822,"="],[-1,823," "],[1,836,"="],[-1,837,"￥ "],[1,840,"5"],[-1,842,"5"],[1,843,"\n"],[1,1034,"列表"],[-1,1050,"li"],[-1,1141,"\n"],[-1,1162,"\r"],[1,1163,":"],[-1,1187,"\r"],[1,1188,":"],[-1,1213,"\r"],[1,1214,"]"],[-1,1222,"\r"],[1,1223,":"],[-1,1271,"\r\r"],[1,1273,")\n"],[1,1302,"\n"],[-1,1902,"\n"],[1,1903,"3"],[-1,2008,"\n"],[1,2009,"u"]],[230,230],[2010,2010]]],[1524808753558,[null,[[1,230,"打"],[-1,230,"指出"],[1,241,"一"],[1,398,"\n"],[1,418,"\r"],[-1,418,":"],[1,433,"\r"],[-1,433,"0"],[1,455,"\r"],[-1,455,":"],[1,483,"\r"],[-1,483,"i"],[1,501,"\r\r"],[-1,501,"m\n"],[-1,532,"\n"],[-1,757,"="],[1,759," "],[-1,782,"="],[1,784," "],[-1,804,"="],[1,806," "],[-1,822,"="],[1,824," "],[-1,836,"="],[1,838,"￥ "],[-1,839,"5"],[1,842,"5"],[-1,842,"\n"],[-1,1034,"列表"],[1,1052,"li"],[1,1141,"\n"],[1,1161,"\r"],[-1,1161,":"],[1,1186,"\r"],[-1,1186,":"],[1,1212,"\r"],[-1,1212,"]"],[1,1221,"\r"],[-1,1221,":"],[1,1270,"\r\r"],[-1,1270,")\n"],[-1,1301,"\n"],[1,1902,"\n"],[-1,1902,"3"],[1,2008,"\n"],[-1,2008,"u"]],[2010,2010],[230,230]]],[1524808703301,["Re@VAIO",[[1,3544,"String序列返回结果。在第六行"]],[3544,3544],[3561,3561]]],[1524808813558,[null,[[-1,230,"打"],[1,231,"指出"],[-1,240,"一"],[-1,398,"\n"],[-1,419,"\r"],[1,420,":"],[-1,434,"\r"],[1,435,"0"],[-1,456,"\r"],[1,457,":"],[-1,484,"\r"],[1,485,"i"],[-1,502,"\r\r"],[1,504,"m\n"],[1,533,"\n"],[1,757,"="],[-1,758," "],[1,782,"="],[-1,783," "],[1,804,"="],[-1,805," "],[1,822,"="],[-1,823," "],[1,836,"="],[-1,837,"￥ "],[1,840,"5"],[-1,842,"5"],[1,843,"\n"],[1,1034,"列表"],[-1,1050,"li"],[-1,1141,"\n"],[-1,1162,"\r"],[1,1163,":"],[-1,1187,"\r"],[1,1188,":"],[-1,1213,"\r"],[1,1214,"]"],[-1,1222,"\r"],[1,1223,":"],[-1,1271,"\r\r"],[1,1273,")\n"],[1,1302,"\n"],[-1,1902,"\n"],[1,1903,"3"],[-1,2008,"\n"],[1,2009,"u"]],[230,230],[2010,2010]]],[1524808813558,[null,[[1,230,"打"],[-1,230,"指出"],[1,241,"一"],[1,398,"\n"],[1,418,"\r"],[-1,418,":"],[1,433,"\r"],[-1,433,"0"],[1,455,"\r"],[-1,455,":"],[1,483,"\r"],[-1,483,"i"],[1,501,"\r\r"],[-1,501,"m\n"],[-1,532,"\n"],[-1,757,"="],[1,759," "],[-1,782,"="],[1,784," "],[-1,804,"="],[1,806," "],[-1,822,"="],[1,824," "],[-1,836,"="],[1,838,"￥ "],[-1,839,"5"],[1,842,"5"],[-1,842,"\n"],[-1,1034,"列表"],[1,1052,"li"],[1,1141,"\n"],[1,1161,"\r"],[-1,1161,":"],[1,1186,"\r"],[-1,1186,":"],[1,1212,"\r"],[-1,1212,"]"],[1,1221,"\r"],[-1,1221,":"],[1,1270,"\r\r"],[-1,1270,")\n"],[-1,1301,"\n"],[1,1902,"\n"],[-1,1902,"3"],[1,2008,"\n"],[-1,2008,"u"]],[2010,2010],[230,230]]],[1524808811175,["Re@VAIO",[[-1,3558,"第六行"]],[3561,3561],[3558,3558]]],[1524808873560,[null,[[-1,230,"打"],[1,231,"指出"],[-1,240,"一"],[-1,398,"\n"],[-1,419,"\r"],[1,420,":"],[-1,434,"\r"],[1,435,"0"],[-1,456,"\r"],[1,457,":"],[-1,484,"\r"],[1,485,"i"],[-1,502,"\r\r"],[1,504,"m\n"],[1,533,"\n"],[1,757,"="],[-1,758," "],[1,782,"="],[-1,783," "],[1,804,"="],[-1,805," "],[1,822,"="],[-1,823," "],[1,836,"="],[-1,837,"￥ "],[1,840,"5"],[-1,842,"5"],[1,843,"\n"],[1,1034,"列表"],[-1,1050,"li"],[-1,1141,"\n"],[-1,1162,"\r"],[1,1163,":"],[-1,1187,"\r"],[1,1188,":"],[-1,1213,"\r"],[1,1214,"]"],[-1,1222,"\r"],[1,1223,":"],[-1,1271,"\r\r"],[1,1273,")\n"],[1,1302,"\n"],[-1,1902,"\n"],[1,1903,"3"],[-1,2008,"\n"],[1,2009,"u"]],[230,230],[2010,2010]]],[1524808873561,[null,[[1,230,"打"],[-1,230,"指出"],[1,241,"一"],[1,398,"\n"],[1,418,"\r"],[-1,418,":"],[1,433,"\r"],[-1,433,"0"],[1,455,"\r"],[-1,455,":"],[1,483,"\r"],[-1,483,"i"],[1,501,"\r\r"],[-1,501,"m\n"],[-1,532,"\n"],[-1,757,"="],[1,759," "],[-1,782,"="],[1,784," "],[-1,804,"="],[1,806," "],[-1,822,"="],[1,824," "],[-1,836,"="],[1,838,"￥ "],[-1,839,"5"],[1,842,"5"],[-1,842,"\n"],[-1,1034,"列表"],[1,1052,"li"],[1,1141,"\n"],[1,1161,"\r"],[-1,1161,":"],[1,1186,"\r"],[-1,1186,":"],[1,1212,"\r"],[-1,1212,"]"],[1,1221,"\r"],[-1,1221,":"],[1,1270,"\r\r"],[-1,1270,")\n"],[-1,1301,"\n"],[1,1902,"\n"],[-1,1902,"3"],[1,2008,"\n"],[-1,2008,"u"]],[2010,2010],[230,230]]],[1524808816555,["Re@VAIO",[[1,3558,"行6"]],[3558,3558],[3560,3560]]],[1524808933522,[null,[[-1,230,"打"],[1,231,"指出"],[-1,240,"一"],[-1,398,"\n"],[-1,419,"\r"],[1,420,":"],[-1,434,"\r"],[1,435,"0"],[-1,456,"\r"],[1,457,":"],[-1,484,"\r"],[1,485,"i"],[-1,502,"\r\r"],[1,504,"m\n"],[1,533,"\n"],[1,757,"="],[-1,758," "],[1,782,"="],[-1,783," "],[1,804,"="],[-1,805," "],[1,822,"="],[-1,823," "],[1,836,"="],[-1,837,"￥ "],[1,840,"5"],[-1,842,"5"],[1,843,"\n"],[1,1034,"列表"],[-1,1050,"li"],[-1,1141,"\n"],[-1,1162,"\r"],[1,1163,":"],[-1,1187,"\r"],[1,1188,":"],[-1,1213,"\r"],[1,1214,"]"],[-1,1222,"\r"],[1,1223,":"],[-1,1271,"\r\r"],[1,1273,")\n"],[1,1302,"\n"],[-1,1902,"\n"],[1,1903,"3"],[-1,2008,"\n"],[1,2009,"u"]],[230,230],[2010,2010]]],[1524808933522,[null,[[1,230,"打"],[-1,230,"指出"],[1,241,"一"],[1,398,"\n"],[1,418,"\r"],[-1,418,":"],[1,433,"\r"],[-1,433,"0"],[1,455,"\r"],[-1,455,":"],[1,483,"\r"],[-1,483,"i"],[1,501,"\r\r"],[-1,501,"m\n"],[-1,532,"\n"],[-1,757,"="],[1,759," "],[-1,782,"="],[1,784," "],[-1,804,"="],[1,806," "],[-1,822,"="],[1,824," "],[-1,836,"="],[1,838,"￥ "],[-1,839,"5"],[1,842,"5"],[-1,842,"\n"],[-1,1034,"列表"],[1,1052,"li"],[1,1141,"\n"],[1,1161,"\r"],[-1,1161,":"],[1,1186,"\r"],[-1,1186,":"],[1,1212,"\r"],[-1,1212,"]"],[1,1221,"\r"],[-1,1221,":"],[1,1270,"\r\r"],[-1,1270,")\n"],[-1,1301,"\n"],[1,1902,"\n"],[-1,1902,"3"],[1,2008,"\n"],[-1,2008,"u"]],[2010,2010],[230,230]]],[1524808923943,["Re@VAIO",[[1,3560,"同时满足了第2和第3定律，"]],[3560,3560],[3573,3573]]],[1524808927685,["Re@VAIO",[[-1,3572,"，"]],[3573,3573],[3572,3572]]],[1524808932916,["Re@VAIO",[[1,3560,"，通过递归"]],[3560,3560],[3565,3565]]],[1524808993565,[null,[[-1,230,"打"],[1,231,"指出"],[-1,240,"一"],[-1,398,"\n"],[-1,419,"\r"],[1,420,":"],[-1,434,"\r"],[1,435,"0"],[-1,456,"\r"],[1,457,":"],[-1,484,"\r"],[1,485,"i"],[-1,502,"\r\r"],[1,504,"m\n"],[1,533,"\n"],[1,757,"="],[-1,758," "],[1,782,"="],[-1,783," "],[1,804,"="],[-1,805," "],[1,822,"="],[-1,823," "],[1,836,"="],[-1,837,"￥ "],[1,840,"5"],[-1,842,"5"],[1,843,"\n"],[1,1034,"列表"],[-1,1050,"li"],[-1,1141,"\n"],[-1,1162,"\r"],[1,1163,":"],[-1,1187,"\r"],[1,1188,":"],[-1,1213,"\r"],[1,1214,"]"],[-1,1222,"\r"],[1,1223,":"],[-1,1271,"\r\r"],[1,1273,")\n"],[1,1302,"\n"],[-1,1902,"\n"],[1,1903,"3"],[-1,2008,"\n"],[1,2009,"u"]],[230,230],[2010,2010]]],[1524808993565,[null,[[1,230,"打"],[-1,230,"指出"],[1,241,"一"],[1,398,"\n"],[1,418,"\r"],[-1,418,":"],[1,433,"\r"],[-1,433,"0"],[1,455,"\r"],[-1,455,":"],[1,483,"\r"],[-1,483,"i"],[1,501,"\r\r"],[-1,501,"m\n"],[-1,532,"\n"],[-1,757,"="],[1,759," "],[-1,782,"="],[1,784," "],[-1,804,"="],[1,806," "],[-1,822,"="],[1,824," "],[-1,836,"="],[1,838,"￥ "],[-1,839,"5"],[1,842,"5"],[-1,842,"\n"],[-1,1034,"列表"],[1,1052,"li"],[1,1141,"\n"],[1,1161,"\r"],[-1,1161,":"],[1,1186,"\r"],[-1,1186,":"],[1,1212,"\r"],[-1,1212,"]"],[1,1221,"\r"],[-1,1221,":"],[1,1270,"\r\r"],[-1,1270,")\n"],[-1,1301,"\n"],[1,1902,"\n"],[-1,1902,"3"],[1,2008,"\n"],[-1,2008,"u"]],[2010,2010],[230,230]]],[1524808944665,["Re@VAIO",[[1,3565,"调用和除法降低问题规模来"]],[3565,3565],[3577,3577]]],[1524808946674,["Re@VAIO",[[1,3589,"。"]],[3589,3589],[3590,3590]]],[1524809053565,[null,[[-1,230,"打"],[1,231,"指出"],[-1,240,"一"],[-1,398,"\n"],[-1,419,"\r"],[1,420,":"],[-1,434,"\r"],[1,435,"0"],[-1,456,"\r"],[1,457,":"],[-1,484,"\r"],[1,485,"i"],[-1,502,"\r\r"],[1,504,"m\n"],[1,533,"\n"],[1,757,"="],[-1,758," "],[1,782,"="],[-1,783," "],[1,804,"="],[-1,805," "],[1,822,"="],[-1,823," "],[1,836,"="],[-1,837,"￥ "],[1,840,"5"],[-1,842,"5"],[1,843,"\n"],[1,1034,"列表"],[-1,1050,"li"],[-1,1141,"\n"],[-1,1162,"\r"],[1,1163,":"],[-1,1187,"\r"],[1,1188,":"],[-1,1213,"\r"],[1,1214,"]"],[-1,1222,"\r"],[1,1223,":"],[-1,1271,"\r\r"],[1,1273,")\n"],[1,1302,"\n"],[-1,1902,"\n"],[1,1903,"3"],[-1,2008,"\n"],[1,2009,"u"]],[230,230],[2010,2010]]],[1524809053565,[null,[[1,230,"打"],[-1,230,"指出"],[1,241,"一"],[1,398,"\n"],[1,418,"\r"],[-1,418,":"],[1,433,"\r"],[-1,433,"0"],[1,455,"\r"],[-1,455,":"],[1,483,"\r"],[-1,483,"i"],[1,501,"\r\r"],[-1,501,"m\n"],[-1,532,"\n"],[-1,757,"="],[1,759," "],[-1,782,"="],[1,784," "],[-1,804,"="],[1,806," "],[-1,822,"="],[1,824," "],[-1,836,"="],[1,838,"￥ "],[-1,839,"5"],[1,842,"5"],[-1,842,"\n"],[-1,1034,"列表"],[1,1052,"li"],[1,1141,"\n"],[1,1161,"\r"],[-1,1161,":"],[1,1186,"\r"],[-1,1186,":"],[1,1212,"\r"],[-1,1212,"]"],[1,1221,"\r"],[-1,1221,":"],[1,1270,"\r\r"],[-1,1270,")\n"],[-1,1301,"\n"],[1,1902,"\n"],[-1,1902,"3"],[1,2008,"\n"],[-1,2008,"u"]],[2010,2010],[230,230]]],[1524809011740,["Re@VAIO",[[1,3590,"\n\n"]],[3590,3590],[3591,3591]]],[1524809011788,["Re@VAIO",[[1,3592,"\n"]],[3591,3591],[3592,3592]]],[1524809017544,["Re@VAIO",[[-1,3592,"\n"],[1,3593,"再来追踪一次agitated"]],[3592,3592],[3606,3606]]],[1524809018968,["Re@VAIO",[[-1,3598,"agitated"]],[3606,3606],[3598,3598]]],[1524809033595,["Re@VAIO",[[1,3598,"该算法，这次将整数10转化为2进制标识"]],[3598,3598],[3617,3617]]],[1524809034349,["Re@VAIO",[[-1,3615,"标识"]],[3617,3617],[3615,3615]]],[1524809035557,["Re@VAIO",[[1,3615,"表示"]],[3615,3615],[3617,3617]]],[1524809036284,["Re@VAIO",[[-1,3615,"表示"]],[3617,3617],[3615,3615]]],[1524809039789,["Re@VAIO",[[1,3615,"形式字符串。"]],[3615,3615],[3621,3621]]],[1524809041309,["Re@VAIO",[[1,3621,"\n\n"]],[3621,3621],[3622,3622]]],[1524809041885,["Re@VAIO",[[1,3623,"\n"]],[3622,3622],[3623,3623]]],[1524809046647,["Re@VAIO",[[1,3623,"![image](http://interactivepython.org/courselib/static/pythonds/_images/toStrBase2.png)"]],[3623,3623],[3710,3710]]],[1524809113564,[null,[[-1,230,"打"],[1,231,"指出"],[-1,240,"一"],[-1,398,"\n"],[-1,419,"\r"],[1,420,":"],[-1,434,"\r"],[1,435,"0"],[-1,456,"\r"],[1,457,":"],[-1,484,"\r"],[1,485,"i"],[-1,502,"\r\r"],[1,504,"m\n"],[1,533,"\n"],[1,757,"="],[-1,758," "],[1,782,"="],[-1,783," "],[1,804,"="],[-1,805," "],[1,822,"="],[-1,823," "],[1,836,"="],[-1,837,"￥ "],[1,840,"5"],[-1,842,"5"],[1,843,"\n"],[1,1034,"列表"],[-1,1050,"li"],[-1,1141,"\n"],[-1,1162,"\r"],[1,1163,":"],[-1,1187,"\r"],[1,1188,":"],[-1,1213,"\r"],[1,1214,"]"],[-1,1222,"\r"],[1,1223,":"],[-1,1271,"\r\r"],[1,1273,")\n"],[1,1302,"\n"],[-1,1902,"\n"],[1,1903,"3"],[-1,2008,"\n"],[1,2009,"u"]],[230,230],[2010,2010]]],[1524809113564,[null,[[1,230,"打"],[-1,230,"指出"],[1,241,"一"],[1,398,"\n"],[1,418,"\r"],[-1,418,":"],[1,433,"\r"],[-1,433,"0"],[1,455,"\r"],[-1,455,":"],[1,483,"\r"],[-1,483,"i"],[1,501,"\r\r"],[-1,501,"m\n"],[-1,532,"\n"],[-1,757,"="],[1,759," "],[-1,782,"="],[1,784," "],[-1,804,"="],[1,806," "],[-1,822,"="],[1,824," "],[-1,836,"="],[1,838,"￥ "],[-1,839,"5"],[1,842,"5"],[-1,842,"\n"],[-1,1034,"列表"],[1,1052,"li"],[1,1141,"\n"],[1,1161,"\r"],[-1,1161,":"],[1,1186,"\r"],[-1,1186,":"],[1,1212,"\r"],[-1,1212,"]"],[1,1221,"\r"],[-1,1221,":"],[1,1270,"\r\r"],[-1,1270,")\n"],[-1,1301,"\n"],[1,1902,"\n"],[-1,1902,"3"],[1,2008,"\n"],[-1,2008,"u"]],[2010,2010],[230,230]]],[1524809096542,["Re@VAIO",[[1,3711,"\n"]],[3710,3710],[3711,3711]]],[1524809096659,["Re@VAIO",[[1,3712,"\n"]],[3711,3711],[3712,3712]]],[1524809107584,["Re@VAIO",[[-1,3712,"\n"],[1,3713,"图4演示了"]],[3712,3712],[3717,3717]]],[1524809173566,[null,[[-1,230,"打"],[1,231,"指出"],[-1,240,"一"],[-1,398,"\n"],[-1,419,"\r"],[1,420,":"],[-1,434,"\r"],[1,435,"0"],[-1,456,"\r"],[1,457,":"],[-1,484,"\r"],[1,485,"i"],[-1,502,"\r\r"],[1,504,"m\n"],[1,533,"\n"],[1,757,"="],[-1,758," "],[1,782,"="],[-1,783," "],[1,804,"="],[-1,805," "],[1,822,"="],[-1,823," "],[1,836,"="],[-1,837,"￥ "],[1,840,"5"],[-1,842,"5"],[1,843,"\n"],[1,1034,"列表"],[-1,1050,"li"],[-1,1141,"\n"],[-1,1162,"\r"],[1,1163,":"],[-1,1187,"\r"],[1,1188,":"],[-1,1213,"\r"],[1,1214,"]"],[-1,1222,"\r"],[1,1223,":"],[-1,1271,"\r\r"],[1,1273,")\n"],[1,1302,"\n"],[-1,1902,"\n"],[1,1903,"3"],[-1,2008,"\n"],[1,2009,"u"]],[230,230],[2010,2010]]],[1524809173566,[null,[[1,230,"打"],[-1,230,"指出"],[1,241,"一"],[1,398,"\n"],[1,418,"\r"],[-1,418,":"],[1,433,"\r"],[-1,433,"0"],[1,455,"\r"],[-1,455,":"],[1,483,"\r"],[-1,483,"i"],[1,501,"\r\r"],[-1,501,"m\n"],[-1,532,"\n"],[-1,757,"="],[1,759," "],[-1,782,"="],[1,784," "],[-1,804,"="],[1,806," "],[-1,822,"="],[1,824," "],[-1,836,"="],[1,838,"￥ "],[-1,839,"5"],[1,842,"5"],[-1,842,"\n"],[-1,1034,"列表"],[1,1052,"li"],[1,1141,"\n"],[1,1161,"\r"],[-1,1161,":"],[1,1186,"\r"],[-1,1186,":"],[1,1212,"\r"],[-1,1212,"]"],[1,1221,"\r"],[-1,1221,":"],[1,1270,"\r\r"],[-1,1270,")\n"],[-1,1301,"\n"],[1,1902,"\n"],[-1,1902,"3"],[1,2008,"\n"],[-1,2008,"u"]],[2010,2010],[230,230]]],[1524809119733,["Re@VAIO",[[-1,3712,"图4演示了"]],[3717,3717],[3712,3712]]],[1524809119893,["Re@VAIO",[[-1,3711,"\n"],[1,3712,"r"]],[3712,3712],[3711,3712]]],[1524809120069,["Re@VAIO",[[1,3712,"u"]],[3711,3712],[3711,3713]]],[1524809120353,["Re@VAIO",[[-1,3712,"u"]],[3711,3713],[3711,3712]]],[1524809120541,["Re@VAIO",[[-1,3711,"r"]],[3711,3712],[0,0]]],[1524809120718,["Re@VAIO",[[1,3711,"\n\n"]],[3711,3711],[3712,3712]]],[1524809122707,["Re@VAIO",[[-1,3712,"\n"],[1,3713,"如图所示"]],[3712,3712],[3716,3716]]],[1524809123045,["Re@VAIO",[[-1,3714,"所示"]],[3716,3716],[3714,3714]]],[1524809128095,["Re@VAIO",[[1,3714,"4所示，得到了所需街恶果"]],[3714,3714],[3726,3726]]],[1524809131124,["Re@VAIO",[[-1,3723,"街恶果"]],[3726,3726],[3723,3723]]],[1524809151158,["Re@VAIO",[[1,3723,"结果，但是似乎数字的顺序错了。"]],[3723,3723],[3738,3738]]],[1524809155572,["Re@VAIO",[[-1,3620,"。"]],[3621,3621],[3620,3620]]],[1524809157100,["Re@VAIO",[[1,3620,"（）“”"]],[3620,3620],[3624,3624]]],[1524809158922,["Re@VAIO",[[-1,3622,"“”"]],[3624,3624],[3622,3622]]],[1524809162179,["Re@VAIO",[[1,3621,"\"1010\""]],[3621,3621],[3627,3627]]],[1524809533578,[null,[[-1,230,"打"],[1,231,"指出"],[-1,240,"一"],[-1,398,"\n"],[-1,419,"\r"],[1,420,":"],[-1,434,"\r"],[1,435,"0"],[-1,456,"\r"],[1,457,":"],[-1,484,"\r"],[1,485,"i"],[-1,502,"\r\r"],[1,504,"m\n"],[1,533,"\n"],[1,757,"="],[-1,758," "],[1,782,"="],[-1,783," "],[1,804,"="],[-1,805," "],[1,822,"="],[-1,823," "],[1,836,"="],[-1,837,"￥ "],[1,840,"5"],[-1,842,"5"],[1,843,"\n"],[1,1034,"列表"],[-1,1050,"li"],[-1,1141,"\n"],[-1,1162,"\r"],[1,1163,":"],[-1,1187,"\r"],[1,1188,":"],[-1,1213,"\r"],[1,1214,"]"],[-1,1222,"\r"],[1,1223,":"],[-1,1271,"\r\r"],[1,1273,")\n"],[1,1302,"\n"],[-1,1902,"\n"],[1,1903,"3"],[-1,2008,"\n"],[1,2009,"u"]],[230,230],[2010,2010]]],[1524809533578,[null,[[1,230,"打"],[-1,230,"指出"],[1,241,"一"],[1,398,"\n"],[1,418,"\r"],[-1,418,":"],[1,433,"\r"],[-1,433,"0"],[1,455,"\r"],[-1,455,":"],[1,483,"\r"],[-1,483,"i"],[1,501,"\r\r"],[-1,501,"m\n"],[-1,532,"\n"],[-1,757,"="],[1,759," "],[-1,782,"="],[1,784," "],[-1,804,"="],[1,806," "],[-1,822,"="],[1,824," "],[-1,836,"="],[1,838,"￥ "],[-1,839,"5"],[1,842,"5"],[-1,842,"\n"],[-1,1034,"列表"],[1,1052,"li"],[1,1141,"\n"],[1,1161,"\r"],[-1,1161,":"],[1,1186,"\r"],[-1,1186,":"],[1,1212,"\r"],[-1,1212,"]"],[1,1221,"\r"],[-1,1221,":"],[1,1270,"\r\r"],[-1,1270,")\n"],[-1,1301,"\n"],[1,1902,"\n"],[-1,1902,"3"],[1,2008,"\n"],[-1,2008,"u"]],[2010,2010],[230,230]]],[1524809480551,["Re@VAIO",[[1,3745,"dans"]],[3745,3745],[3749,3749]]],[1524809481363,["Re@VAIO",[[-1,3745,"dans"]],[3749,3749],[3745,3745]]],[1524809484167,["Re@VAIO",[[-1,3733,"但是"]],[3735,3735],[3733,3733]]],[1524809498098,["Re@VAIO",[[1,3743,"但是实际上，算法运行是正常的，因为是先掉要"]],[3743,3743],[3764,3764]]],[1524809498358,["Re@VAIO",[[-1,3762,"掉要"]],[3764,3764],[3762,3762]]],[1524809500013,["Re@VAIO",[[1,3762,"调用"]],[3762,3762],[3764,3764]]],[1524809502428,["Re@VAIO",[[-1,3761,"先调用"]],[3764,3764],[3761,3761]]],[1524809503338,["Re@VAIO",[[1,3761,"先"]],[3761,3761],[3762,3762]]],[1524809503558,["Re@VAIO",[[-1,3761,"先"]],[3762,3762],[3761,3761]]],[1524809506597,["Re@VAIO",[[1,3761,"在行6中是"]],[3761,3761],[3766,3766]]],[1524809506891,["Re@VAIO",[[-1,3765,"是"]],[3766,3766],[3765,3765]]],[1524809516177,["Re@VAIO",[[1,3765,"是先进行的递归调用，然后再将"]],[3765,3765],[3779,3779]]],[1524809713572,[null,[[-1,230,"打"],[1,231,"指出"],[-1,240,"一"],[-1,398,"\n"],[-1,419,"\r"],[1,420,":"],[-1,434,"\r"],[1,435,"0"],[-1,456,"\r"],[1,457,":"],[-1,484,"\r"],[1,485,"i"],[-1,502,"\r\r"],[1,504,"m\n"],[1,533,"\n"],[1,757,"="],[-1,758," "],[1,782,"="],[-1,783," "],[1,804,"="],[-1,805," "],[1,822,"="],[-1,823," "],[1,836,"="],[-1,837,"￥ "],[1,840,"5"],[-1,842,"5"],[1,843,"\n"],[1,1034,"列表"],[-1,1050,"li"],[-1,1141,"\n"],[-1,1162,"\r"],[1,1163,":"],[-1,1187,"\r"],[1,1188,":"],[-1,1213,"\r"],[1,1214,"]"],[-1,1222,"\r"],[1,1223,":"],[-1,1271,"\r\r"],[1,1273,")\n"],[1,1302,"\n"],[-1,1902,"\n"],[1,1903,"3"],[-1,2008,"\n"],[1,2009,"u"]],[230,230],[2010,2010]]],[1524809713572,[null,[[1,230,"打"],[-1,230,"指出"],[1,241,"一"],[1,398,"\n"],[1,418,"\r"],[-1,418,":"],[1,433,"\r"],[-1,433,"0"],[1,455,"\r"],[-1,455,":"],[1,483,"\r"],[-1,483,"i"],[1,501,"\r\r"],[-1,501,"m\n"],[-1,532,"\n"],[-1,757,"="],[1,759," "],[-1,782,"="],[1,784," "],[-1,804,"="],[1,806," "],[-1,822,"="],[1,824," "],[-1,836,"="],[1,838,"￥ "],[-1,839,"5"],[1,842,"5"],[-1,842,"\n"],[-1,1034,"列表"],[1,1052,"li"],[1,1141,"\n"],[1,1161,"\r"],[-1,1161,":"],[1,1186,"\r"],[-1,1186,":"],[1,1212,"\r"],[-1,1212,"]"],[1,1221,"\r"],[-1,1221,":"],[1,1270,"\r\r"],[-1,1270,")\n"],[-1,1301,"\n"],[1,1902,"\n"],[-1,1902,"3"],[1,2008,"\n"],[-1,2008,"u"]],[2010,2010],[230,230]]],[1524809678489,["Re@VAIO",[[1,3779,"余数的标识"]],[3779,3779],[3784,3784]]],[1524809679346,["Re@VAIO",[[-1,3782,"标识"]],[3784,3784],[3782,3782]]],[1524809680640,["Re@VAIO",[[1,3782,"标示"]],[3782,3782],[3784,3784]]],[1524809681230,["Re@VAIO",[[-1,3782,"标示"]],[3784,3784],[3782,3782]]],[1524809685485,["Re@VAIO",[[1,3782,"表示加上"]],[3782,3782],[3786,3786]]],[1524809686284,["Re@VAIO",[[-1,3782,"表示加上"]],[3786,3786],[3782,3782]]],[1524809699029,["Re@VAIO",[[1,3782,"字符串标识加上。如果"]],[3782,3782],[3792,3792]]],[1524809699514,["Re@VAIO",[[-1,3790,"如果"]],[3792,3792],[3790,3790]]],[1524809702900,["Re@VAIO",[[1,3790,"反之，则"]],[3790,3790],[3794,3794]]],[1524809706280,["Re@VAIO",[[-1,3790,"反之，则"]],[3794,3794],[3790,3790]]],[1524809707344,["Re@VAIO",[[1,3790,"如果"]],[3790,3790],[3792,3792]]],[1524809713437,["Re@VAIO",[[-1,3791,"果"]],[3792,3792],[3791,3791]]],[1524809773579,[null,[[-1,230,"打"],[1,231,"指出"],[-1,240,"一"],[-1,398,"\n"],[-1,419,"\r"],[1,420,":"],[-1,434,"\r"],[1,435,"0"],[-1,456,"\r"],[1,457,":"],[-1,484,"\r"],[1,485,"i"],[-1,502,"\r\r"],[1,504,"m\n"],[1,533,"\n"],[1,757,"="],[-1,758," "],[1,782,"="],[-1,783," "],[1,804,"="],[-1,805," "],[1,822,"="],[-1,823," "],[1,836,"="],[-1,837,"￥ "],[1,840,"5"],[-1,842,"5"],[1,843,"\n"],[1,1034,"列表"],[-1,1050,"li"],[-1,1141,"\n"],[-1,1162,"\r"],[1,1163,":"],[-1,1187,"\r"],[1,1188,":"],[-1,1213,"\r"],[1,1214,"]"],[-1,1222,"\r"],[1,1223,":"],[-1,1271,"\r\r"],[1,1273,")\n"],[1,1302,"\n"],[-1,1902,"\n"],[1,1903,"3"],[-1,2008,"\n"],[1,2009,"u"]],[230,230],[2010,2010]]],[1524809773579,[null,[[1,230,"打"],[-1,230,"指出"],[1,241,"一"],[1,398,"\n"],[1,418,"\r"],[-1,418,":"],[1,433,"\r"],[-1,433,"0"],[1,455,"\r"],[-1,455,":"],[1,483,"\r"],[-1,483,"i"],[1,501,"\r\r"],[-1,501,"m\n"],[-1,532,"\n"],[-1,757,"="],[1,759," "],[-1,782,"="],[1,784," "],[-1,804,"="],[1,806," "],[-1,822,"="],[1,824," "],[-1,836,"="],[1,838,"￥ "],[-1,839,"5"],[1,842,"5"],[-1,842,"\n"],[-1,1034,"列表"],[1,1052,"li"],[1,1141,"\n"],[1,1161,"\r"],[-1,1161,":"],[1,1186,"\r"],[-1,1186,":"],[1,1212,"\r"],[-1,1212,"]"],[1,1221,"\r"],[-1,1221,":"],[1,1270,"\r\r"],[-1,1270,")\n"],[-1,1301,"\n"],[1,1902,"\n"],[-1,1902,"3"],[1,2008,"\n"],[-1,2008,"u"]],[2010,2010],[230,230]]],[1524809736353,["Re@VAIO",[[1,3790,"\n\n"]],[3790,3790],[3791,3791]]],[1524809736432,["Re@VAIO",[[1,3792,"\n"]],[3791,3791],[3792,3792]]],[1524809751853,["Re@VAIO",[[-1,3792,"\n"],[1,3793,"## 4.6 栈桢：实现递归 ##"]],[3792,3792],[3809,3809]]],[1524809751994,["Re@VAIO",[[1,3809,"\n\n"]],[3809,3809],[3810,3810]]],[1524809752468,["Re@VAIO",[[1,3811,"\n"]],[3810,3810],[3811,3811]]],[1524809833596,[null,[[-1,230,"打"],[1,231,"指出"],[-1,240,"一"],[-1,398,"\n"],[-1,419,"\r"],[1,420,":"],[-1,434,"\r"],[1,435,"0"],[-1,456,"\r"],[1,457,":"],[-1,484,"\r"],[1,485,"i"],[-1,502,"\r\r"],[1,504,"m\n"],[1,533,"\n"],[1,757,"="],[-1,758," "],[1,782,"="],[-1,783," "],[1,804,"="],[-1,805," "],[1,822,"="],[-1,823," "],[1,836,"="],[-1,837,"￥ "],[1,840,"5"],[-1,842,"5"],[1,843,"\n"],[1,1034,"列表"],[-1,1050,"li"],[-1,1141,"\n"],[-1,1162,"\r"],[1,1163,":"],[-1,1187,"\r"],[1,1188,":"],[-1,1213,"\r"],[1,1214,"]"],[-1,1222,"\r"],[1,1223,":"],[-1,1271,"\r\r"],[1,1273,")\n"],[1,1302,"\n"],[-1,1902,"\n"],[1,1903,"3"],[-1,2008,"\n"],[1,2009,"u"],[-1,3812,"如"]],[230,230],[3812,3812]]],[1524809833596,[null,[[1,230,"打"],[-1,230,"指出"],[1,241,"一"],[1,398,"\n"],[1,418,"\r"],[-1,418,":"],[1,433,"\r"],[-1,433,"0"],[1,455,"\r"],[-1,455,":"],[1,483,"\r"],[-1,483,"i"],[1,501,"\r\r"],[-1,501,"m\n"],[-1,532,"\n"],[-1,757,"="],[1,759," "],[-1,782,"="],[1,784," "],[-1,804,"="],[1,806," "],[-1,822,"="],[1,824," "],[-1,836,"="],[1,838,"￥ "],[-1,839,"5"],[1,842,"5"],[-1,842,"\n"],[-1,1034,"列表"],[1,1052,"li"],[1,1141,"\n"],[1,1161,"\r"],[-1,1161,":"],[1,1186,"\r"],[-1,1186,":"],[1,1212,"\r"],[-1,1212,"]"],[1,1221,"\r"],[-1,1221,":"],[1,1270,"\r\r"],[-1,1270,")\n"],[-1,1301,"\n"],[1,1902,"\n"],[-1,1902,"3"],[1,2008,"\n"],[-1,2008,"u"],[1,3812,"如"]],[3812,3812],[230,230]]],[1524809805719,["Re@VAIO",[[-1,3811,"\n"],[1,3812,"设想，如果部按"]],[3811,3811],[3818,3818]]],[1524809805929,["Re@VAIO",[[-1,3816,"部按"]],[3818,3818],[3816,3816]]],[1524809819030,["Re@VAIO",[[1,3816,"不按上文那样将递归调用烦"]],[3816,3816],[3828,3828]]],[1524809819699,["Re@VAIO",[[-1,3827,"烦"]],[3828,3828],[3827,3827]]],[1524809825545,["Re@VAIO",[[1,3827,"的结果与"]],[3827,3827],[3831,3831]]],[1524809832843,["Re@VAIO",[[-1,3830,"与"]],[3831,3831],[3830,3830]]],[1524809893598,[null,[[-1,230,"打"],[1,231,"指出"],[-1,240,"一"],[-1,398,"\n"],[-1,419,"\r"],[1,420,":"],[-1,434,"\r"],[1,435,"0"],[-1,456,"\r"],[1,457,":"],[-1,484,"\r"],[1,485,"i"],[-1,502,"\r\r"],[1,504,"m\n"],[1,533,"\n"],[1,757,"="],[-1,758," "],[1,782,"="],[-1,783," "],[1,804,"="],[-1,805," "],[1,822,"="],[-1,823," "],[1,836,"="],[-1,837,"￥ "],[1,840,"5"],[-1,842,"5"],[1,843,"\n"],[1,1034,"列表"],[-1,1050,"li"],[-1,1141,"\n"],[-1,1162,"\r"],[1,1163,":"],[-1,1187,"\r"],[1,1188,":"],[-1,1213,"\r"],[1,1214,"]"],[-1,1222,"\r"],[1,1223,":"],[-1,1271,"\r\r"],[1,1273,")\n"],[1,1302,"\n"],[-1,1902,"\n"],[1,1903,"3"],[-1,2008,"\n"],[1,2009,"u"],[-1,3830,"如"]],[230,230],[3830,3830]]],[1524809893598,[null,[[1,230,"打"],[-1,230,"指出"],[1,241,"一"],[1,398,"\n"],[1,418,"\r"],[-1,418,":"],[1,433,"\r"],[-1,433,"0"],[1,455,"\r"],[-1,455,":"],[1,483,"\r"],[-1,483,"i"],[1,501,"\r\r"],[-1,501,"m\n"],[-1,532,"\n"],[-1,757,"="],[1,759," "],[-1,782,"="],[1,784," "],[-1,804,"="],[1,806," "],[-1,822,"="],[1,824," "],[-1,836,"="],[1,838,"￥ "],[-1,839,"5"],[1,842,"5"],[-1,842,"\n"],[-1,1034,"列表"],[1,1052,"li"],[1,1141,"\n"],[1,1161,"\r"],[-1,1161,":"],[1,1186,"\r"],[-1,1186,":"],[1,1212,"\r"],[-1,1212,"]"],[1,1221,"\r"],[-1,1221,":"],[1,1270,"\r\r"],[-1,1270,")\n"],[-1,1301,"\n"],[1,1902,"\n"],[-1,1902,"3"],[1,2008,"\n"],[-1,2008,"u"],[1,3830,"如"]],[3830,3830],[230,230]]],[1524809834416,["Re@VAIO",[[-1,3828,"结果"]],[3830,3830],[3828,3828]]],[1524809837808,["Re@VAIO",[[1,3828,"单字符结果练起"]],[3828,3828],[3835,3835]]],[1524809838065,["Re@VAIO",[[-1,3833,"练起"]],[3835,3835],[3833,3833]]],[1524809842076,["Re@VAIO",[[1,3833,"依次链接以前"]],[3833,3833],[3839,3839]]],[1524809842729,["Re@VAIO",[[-1,3835,"链接以前"]],[3839,3839],[3835,3835]]],[1524809871348,["Re@VAIO",[[1,3835,"连接起来得到结果，而是将算法修改为将字符串压入栈中"]],[3835,3835],[3860,3860]]],[1524809881410,["Re@VAIO",[[1,3852,"在递归调用之前"]],[3852,3852],[3859,3859]]],[1524809892770,["Re@VAIO",[[1,3867,"。调整后的算法如可执行代码1所示。"]],[3867,3867],[3884,3884]]],[1524809893296,["Re@VAIO",[[1,3884,"\n\n"]],[3884,3884],[3885,3885]]],[1524809953593,[null,[[-1,230,"打"],[1,231,"指出"],[-1,240,"一"],[-1,398,"\n"],[-1,419,"\r"],[1,420,":"],[-1,434,"\r"],[1,435,"0"],[-1,456,"\r"],[1,457,":"],[-1,484,"\r"],[1,485,"i"],[-1,502,"\r\r"],[1,504,"m\n"],[1,533,"\n"],[1,757,"="],[-1,758," "],[1,782,"="],[-1,783," "],[1,804,"="],[-1,805," "],[1,822,"="],[-1,823," "],[1,836,"="],[-1,837,"￥ "],[1,840,"5"],[-1,842,"5"],[1,843,"\n"],[1,1034,"列表"],[-1,1050,"li"],[-1,1141,"\n"],[-1,1162,"\r"],[1,1163,":"],[-1,1187,"\r"],[1,1188,":"],[-1,1213,"\r"],[1,1214,"]"],[-1,1222,"\r"],[1,1223,":"],[-1,1271,"\r\r"],[1,1273,")\n"],[1,1302,"\n"],[-1,1902,"\n"],[1,1903,"3"],[-1,2008,"\n"],[1,2009,"u"],[-1,3886,"如"]],[230,230],[3886,3886]]],[1524809953593,[null,[[1,230,"打"],[-1,230,"指出"],[1,241,"一"],[1,398,"\n"],[1,418,"\r"],[-1,418,":"],[1,433,"\r"],[-1,433,"0"],[1,455,"\r"],[-1,455,":"],[1,483,"\r"],[-1,483,"i"],[1,501,"\r\r"],[-1,501,"m\n"],[-1,532,"\n"],[-1,757,"="],[1,759," "],[-1,782,"="],[1,784," "],[-1,804,"="],[1,806," "],[-1,822,"="],[1,824," "],[-1,836,"="],[1,838,"￥ "],[-1,839,"5"],[1,842,"5"],[-1,842,"\n"],[-1,1034,"列表"],[1,1052,"li"],[1,1141,"\n"],[1,1161,"\r"],[-1,1161,":"],[1,1186,"\r"],[-1,1186,":"],[1,1212,"\r"],[-1,1212,"]"],[1,1221,"\r"],[-1,1221,":"],[1,1270,"\r\r"],[-1,1270,")\n"],[-1,1301,"\n"],[1,1902,"\n"],[-1,1902,"3"],[1,2008,"\n"],[-1,2008,"u"],[1,3886,"如"]],[3886,3886],[230,230]]],[1524809895482,["Re@VAIO",[[-1,3886,"\n"],[1,3887,"``"]],[3886,3886],[3888,3888]]],[1524809896712,["Re@VAIO",[[-1,3886,"``"]],[3888,3888],[3886,3886]]],[1524809917501,["Re@VAIO",[[-1,3885,"\n"],[1,3886,"** 利用栈实现整数转化为字符串 **"]],[3886,3886],[3904,3904]]],[1524809922080,["Re@VAIO",[[1,3888,"可执行代码1 "]],[3888,3888],[3895,3895]]],[1524809923377,["Re@VAIO",[[-1,3894," "]],[3895,3895],[3894,3894]]],[1524809923628,["Re@VAIO",[[1,3894,"："]],[3894,3894],[3895,3895]]],[1524809925057,["Re@VAIO",[[1,3911,"\n\n"]],[3911,3911],[3912,3912]]],[1524809929427,["Re@VAIO",[[-1,3912,"\n"],[1,3913,"```Python"]],[3912,3912],[3921,3921]]],[1524809933034,["Re@VAIO",[[1,3921,"\n\nfrom pythonds.basic.stack import Stack\r\n\r\nrStack = Stack()\r\n\r\ndef toStr(n,base):\r\n    convertString = \"0123456789ABCDEF\"\r\n    while n > 0:\r\n        if n < base:\r\n            rStack.push(convertString[n])\r\n        else:\r\n            rStack.push(convertString[n % base])\r\n        n = n // base\r\n    res = \"\"\r\n    while not rStack.isEmpty():\r\n        res = res + str(rStack.pop())\r\n    return res\r\n\r\nprint(toStr(1453,16))"]],[3921,3921],[4340,4340]]],[1524809936018,["Re@VAIO",[[-1,3960,"\r"],[-1,3962,"\r"],[-1,3980,"\r"],[-1,3982,"\r"],[-1,4002,"\r"],[-1,4042,"\r"],[-1,4060,"\r"],[-1,4082,"\r"],[-1,4125,"\r"],[-1,4140,"\r"],[-1,4190,"\r"],[-1,4213,"\r"],[-1,4227,"\r"],[-1,4260,"\r"],[-1,4299,"\r"],[-1,4315,"\r"],[-1,4317,"\r"],[1,4341,"\n\n"]],[4324,4324],[4325,4325]]],[1524809936761,["Re@VAIO",[[-1,4325,"\n"],[1,4326,"````"]],[4325,4325],[4329,4329]]],[1524809937421,["Re@VAIO",[[-1,4328,"`"]],[4329,4329],[4328,4328]]],[1524809937672,["Re@VAIO",[[1,4328,"\n\n"]],[4328,4328],[4329,4329]]],[1524809938064,["Re@VAIO",[[1,4330,"\n"]],[4329,4329],[4330,4330]]],[1524809938530,["Re@VAIO",[[-1,4330,"\n"]],[4330,4330],[4329,4329]]],[1524809953007,["Re@VAIO",[[-1,4329,"\n"],[1,4330,"每一次调用toStr，都将一个字符放入"]],[4329,4329],[4348,4348]]],[1524810013581,[null,[[-1,230,"打"],[1,231,"指出"],[-1,240,"一"],[-1,398,"\n"],[-1,419,"\r"],[1,420,":"],[-1,434,"\r"],[1,435,"0"],[-1,456,"\r"],[1,457,":"],[-1,484,"\r"],[1,485,"i"],[-1,502,"\r\r"],[1,504,"m\n"],[1,533,"\n"],[1,757,"="],[-1,758," "],[1,782,"="],[-1,783," "],[1,804,"="],[-1,805," "],[1,822,"="],[-1,823," "],[1,836,"="],[-1,837,"￥ "],[1,840,"5"],[-1,842,"5"],[1,843,"\n"],[1,1034,"列表"],[-1,1050,"li"],[-1,1141,"\n"],[-1,1162,"\r"],[1,1163,":"],[-1,1187,"\r"],[1,1188,":"],[-1,1213,"\r"],[1,1214,"]"],[-1,1222,"\r"],[1,1223,":"],[-1,1271,"\r\r"],[1,1273,")\n"],[1,1302,"\n"],[-1,1902,"\n"],[1,1903,"3"],[-1,2008,"\n"],[1,2009,"u"],[-1,3922,"\n"],[-1,3960,"\r\r"],[1,3962,"k\n"],[-1,3978,"\r\r"],[1,3980,")\n"],[-1,3998,"\r"],[1,3999,":"],[-1,4037,"\r"],[1,4038,"\""],[-1,4054,"\r"],[1,4055,":"],[-1,4075,"\r"],[1,4076,":"],[-1,4117,"\r"],[1,4118,")"],[-1,4131,"\r"],[1,4132,":"],[-1,4180,"\r"],[1,4181,")"],[-1,4202,"\r"],[1,4203,"e"],[-1,4215,"\r"],[1,4216,"\""],[-1,4247,"\r"],[1,4248,":"],[-1,4285,"\r"],[1,4286,")"],[-1,4300,"\r\r"],[1,4302,"s\n"],[1,4324,"\n"]],[230,230],[4325,4325]]],[1524810013581,[null,[[1,230,"打"],[-1,230,"指出"],[1,241,"一"],[1,398,"\n"],[1,418,"\r"],[-1,418,":"],[1,433,"\r"],[-1,433,"0"],[1,455,"\r"],[-1,455,":"],[1,483,"\r"],[-1,483,"i"],[1,501,"\r\r"],[-1,501,"m\n"],[-1,532,"\n"],[-1,757,"="],[1,759," "],[-1,782,"="],[1,784," "],[-1,804,"="],[1,806," "],[-1,822,"="],[1,824," "],[-1,836,"="],[1,838,"￥ "],[-1,839,"5"],[1,842,"5"],[-1,842,"\n"],[-1,1034,"列表"],[1,1052,"li"],[1,1141,"\n"],[1,1161,"\r"],[-1,1161,":"],[1,1186,"\r"],[-1,1186,":"],[1,1212,"\r"],[-1,1212,"]"],[1,1221,"\r"],[-1,1221,":"],[1,1270,"\r\r"],[-1,1270,")\n"],[-1,1301,"\n"],[1,1902,"\n"],[-1,1902,"3"],[1,2008,"\n"],[-1,2008,"u"],[1,3922,"\n"],[1,3959,"\r\r"],[-1,3959,"k\n"],[1,3977,"\r\r"],[-1,3977,")\n"],[1,3997,"\r"],[-1,3997,":"],[1,4036,"\r"],[-1,4036,"\""],[1,4053,"\r"],[-1,4053,":"],[1,4074,"\r"],[-1,4074,":"],[1,4116,"\r"],[-1,4116,")"],[1,4130,"\r"],[-1,4130,":"],[1,4179,"\r"],[-1,4179,")"],[1,4201,"\r"],[-1,4201,"e"],[1,4214,"\r"],[-1,4214,"\""],[1,4246,"\r"],[-1,4246,":"],[1,4284,"\r"],[-1,4284,")"],[1,4299,"\r\r"],[-1,4299,"s\n"],[-1,4323,"\n"]],[4325,4325],[230,230]]],[1524809974966,["Re@VAIO",[[1,4348,"栈中。就前一个例子来说，可以发"]],[4348,4348],[4363,4363]]],[1524809975721,["Re@VAIO",[[-1,4362,"发"]],[4363,4363],[4362,4362]]],[1524809982589,["Re@VAIO",[[1,4362,"发现在低词"]],[4362,4362],[4367,4367]]],[1524809982961,["Re@VAIO",[[-1,4365,"低词"]],[4367,4367],[4365,4365]]],[1524809984205,["Re@VAIO",[[1,4365,"第四次"]],[4365,4365],[4368,4368]]],[1524809984689,["Re@VAIO",[[-1,4366,"四次"]],[4368,4368],[4366,4366]]],[1524809994748,["Re@VAIO",[[1,4366,"4次调用后，得到到"]],[4366,4366],[4375,4375]]],[1524809994894,["Re@VAIO",[[-1,4374,"到"]],[4375,4375],[4374,4374]]],[1524810009434,["Re@VAIO",[[1,4374,"的栈如图5所示。注意，现在可以直接见"]],[4374,4374],[4392,4392]]],[1524810011485,["Re@VAIO",[[-1,4391,"见"]],[4392,4392],[4391,4391]]],[1524810012597,["Re@VAIO",[[1,4391,"将"]],[4391,4391],[4392,4392]]],[1524810073608,[null,[[-1,230,"打"],[1,231,"指出"],[-1,240,"一"],[-1,398,"\n"],[-1,419,"\r"],[1,420,":"],[-1,434,"\r"],[1,435,"0"],[-1,456,"\r"],[1,457,":"],[-1,484,"\r"],[1,485,"i"],[-1,502,"\r\r"],[1,504,"m\n"],[1,533,"\n"],[1,757,"="],[-1,758," "],[1,782,"="],[-1,783," "],[1,804,"="],[-1,805," "],[1,822,"="],[-1,823," "],[1,836,"="],[-1,837,"￥ "],[1,840,"5"],[-1,842,"5"],[1,843,"\n"],[1,1034,"列表"],[-1,1050,"li"],[-1,1141,"\n"],[-1,1162,"\r"],[1,1163,":"],[-1,1187,"\r"],[1,1188,":"],[-1,1213,"\r"],[1,1214,"]"],[-1,1222,"\r"],[1,1223,":"],[-1,1271,"\r\r"],[1,1273,")\n"],[1,1302,"\n"],[-1,1902,"\n"],[1,1903,"3"],[-1,2008,"\n"],[1,2009,"u"],[-1,3922,"\n"],[-1,3960,"\r\r"],[1,3962,"k\n"],[-1,3978,"\r\r"],[1,3980,")\n"],[-1,3998,"\r"],[1,3999,":"],[-1,4037,"\r"],[1,4038,"\""],[-1,4054,"\r"],[1,4055,":"],[-1,4075,"\r"],[1,4076,":"],[-1,4117,"\r"],[1,4118,")"],[-1,4131,"\r"],[1,4132,":"],[-1,4180,"\r"],[1,4181,")"],[-1,4202,"\r"],[1,4203,"e"],[-1,4215,"\r"],[1,4216,"\""],[-1,4247,"\r"],[1,4248,":"],[-1,4285,"\r"],[1,4286,")"],[-1,4300,"\r\r"],[1,4302,"s\n"],[1,4324,"\n"]],[230,230],[4325,4325]]],[1524810073608,[null,[[1,230,"打"],[-1,230,"指出"],[1,241,"一"],[1,398,"\n"],[1,418,"\r"],[-1,418,":"],[1,433,"\r"],[-1,433,"0"],[1,455,"\r"],[-1,455,":"],[1,483,"\r"],[-1,483,"i"],[1,501,"\r\r"],[-1,501,"m\n"],[-1,532,"\n"],[-1,757,"="],[1,759," "],[-1,782,"="],[1,784," "],[-1,804,"="],[1,806," "],[-1,822,"="],[1,824," "],[-1,836,"="],[1,838,"￥ "],[-1,839,"5"],[1,842,"5"],[-1,842,"\n"],[-1,1034,"列表"],[1,1052,"li"],[1,1141,"\n"],[1,1161,"\r"],[-1,1161,":"],[1,1186,"\r"],[-1,1186,":"],[1,1212,"\r"],[-1,1212,"]"],[1,1221,"\r"],[-1,1221,":"],[1,1270,"\r\r"],[-1,1270,")\n"],[-1,1301,"\n"],[1,1902,"\n"],[-1,1902,"3"],[1,2008,"\n"],[-1,2008,"u"],[1,3922,"\n"],[1,3959,"\r\r"],[-1,3959,"k\n"],[1,3977,"\r\r"],[-1,3977,")\n"],[1,3997,"\r"],[-1,3997,":"],[1,4036,"\r"],[-1,4036,"\""],[1,4053,"\r"],[-1,4053,":"],[1,4074,"\r"],[-1,4074,":"],[1,4116,"\r"],[-1,4116,")"],[1,4130,"\r"],[-1,4130,":"],[1,4179,"\r"],[-1,4179,")"],[1,4201,"\r"],[-1,4201,"e"],[1,4214,"\r"],[-1,4214,"\""],[1,4246,"\r"],[-1,4246,":"],[1,4284,"\r"],[-1,4284,")"],[1,4299,"\r\r"],[-1,4299,"s\n"],[-1,4323,"\n"]],[4325,4325],[230,230]]],[1524810015705,["Re@VAIO",[[1,4392,"字符从st"]],[4392,4392],[4397,4397]]],[1524810016089,["Re@VAIO",[[-1,4395,"st"]],[4397,4397],[4395,4395]]],[1524810035572,["Re@VAIO",[[1,4395,"栈中推出，再将他们链接为最后的结果\"1010\"即可。"]],[4395,4395],[4421,4421]]],[1524810036096,["Re@VAIO",[[1,4421,"\n\n"]],[4421,4421],[4422,4422]]],[1524810036520,["Re@VAIO",[[1,4423,"\n"]],[4422,4422],[4423,4423]]],[1524810313626,[null,[[-1,230,"打"],[1,231,"指出"],[-1,240,"一"],[-1,398,"\n"],[-1,419,"\r"],[1,420,":"],[-1,434,"\r"],[1,435,"0"],[-1,456,"\r"],[1,457,":"],[-1,484,"\r"],[1,485,"i"],[-1,502,"\r\r"],[1,504,"m\n"],[1,533,"\n"],[1,757,"="],[-1,758," "],[1,782,"="],[-1,783," "],[1,804,"="],[-1,805," "],[1,822,"="],[-1,823," "],[1,836,"="],[-1,837,"￥ "],[1,840,"5"],[-1,842,"5"],[1,843,"\n"],[1,1034,"列表"],[-1,1050,"li"],[-1,1141,"\n"],[-1,1162,"\r"],[1,1163,":"],[-1,1187,"\r"],[1,1188,":"],[-1,1213,"\r"],[1,1214,"]"],[-1,1222,"\r"],[1,1223,":"],[-1,1271,"\r\r"],[1,1273,")\n"],[1,1302,"\n"],[-1,1902,"\n"],[1,1903,"3"],[-1,2008,"\n"],[1,2009,"u"],[-1,3922,"\n"],[-1,3960,"\r\r"],[1,3962,"k\n"],[-1,3978,"\r\r"],[1,3980,")\n"],[-1,3998,"\r"],[1,3999,":"],[-1,4037,"\r"],[1,4038,"\""],[-1,4054,"\r"],[1,4055,":"],[-1,4075,"\r"],[1,4076,":"],[-1,4117,"\r"],[1,4118,")"],[-1,4131,"\r"],[1,4132,":"],[-1,4180,"\r"],[1,4181,")"],[-1,4202,"\r"],[1,4203,"e"],[-1,4215,"\r"],[1,4216,"\""],[-1,4247,"\r"],[1,4248,":"],[-1,4285,"\r"],[1,4286,")"],[-1,4300,"\r\r"],[1,4302,"s\n"],[1,4324,"\n"]],[230,230],[4325,4325]]],[1524810313626,[null,[[1,230,"打"],[-1,230,"指出"],[1,241,"一"],[1,398,"\n"],[1,418,"\r"],[-1,418,":"],[1,433,"\r"],[-1,433,"0"],[1,455,"\r"],[-1,455,":"],[1,483,"\r"],[-1,483,"i"],[1,501,"\r\r"],[-1,501,"m\n"],[-1,532,"\n"],[-1,757,"="],[1,759," "],[-1,782,"="],[1,784," "],[-1,804,"="],[1,806," "],[-1,822,"="],[1,824," "],[-1,836,"="],[1,838,"￥ "],[-1,839,"5"],[1,842,"5"],[-1,842,"\n"],[-1,1034,"列表"],[1,1052,"li"],[1,1141,"\n"],[1,1161,"\r"],[-1,1161,":"],[1,1186,"\r"],[-1,1186,":"],[1,1212,"\r"],[-1,1212,"]"],[1,1221,"\r"],[-1,1221,":"],[1,1270,"\r\r"],[-1,1270,")\n"],[-1,1301,"\n"],[1,1902,"\n"],[-1,1902,"3"],[1,2008,"\n"],[-1,2008,"u"],[1,3922,"\n"],[1,3959,"\r\r"],[-1,3959,"k\n"],[1,3977,"\r\r"],[-1,3977,")\n"],[1,3997,"\r"],[-1,3997,":"],[1,4036,"\r"],[-1,4036,"\""],[1,4053,"\r"],[-1,4053,":"],[1,4074,"\r"],[-1,4074,":"],[1,4116,"\r"],[-1,4116,")"],[1,4130,"\r"],[-1,4130,":"],[1,4179,"\r"],[-1,4179,")"],[1,4201,"\r"],[-1,4201,"e"],[1,4214,"\r"],[-1,4214,"\""],[1,4246,"\r"],[-1,4246,":"],[1,4284,"\r"],[-1,4284,")"],[1,4299,"\r\r"],[-1,4299,"s\n"],[-1,4323,"\n"]],[4325,4325],[230,230]]],[1524810302804,["Re@VAIO",[[-1,4423,"\n"],[1,4424,"此例说"]],[4423,4423],[4426,4426]]],[1524810303111,["Re@VAIO",[[-1,4425,"说"]],[4426,4426],[4425,4425]]],[1524810304929,["Re@VAIO",[[1,4425,"艳"]],[4425,4425],[4426,4426]]],[1524810305056,["Re@VAIO",[[-1,4425,"艳"]],[4426,4426],[4425,4425]]],[1524810311633,["Re@VAIO",[[1,4425,"说明了Python是如何实现"]],[4425,4425],[4439,4439]]],[1524810373578,[null,[[-1,230,"打"],[1,231,"指出"],[-1,240,"一"],[-1,398,"\n"],[-1,419,"\r"],[1,420,":"],[-1,434,"\r"],[1,435,"0"],[-1,456,"\r"],[1,457,":"],[-1,484,"\r"],[1,485,"i"],[-1,502,"\r\r"],[1,504,"m\n"],[1,533,"\n"],[1,757,"="],[-1,758," "],[1,782,"="],[-1,783," "],[1,804,"="],[-1,805," "],[1,822,"="],[-1,823," "],[1,836,"="],[-1,837,"￥ "],[1,840,"5"],[-1,842,"5"],[1,843,"\n"],[1,1034,"列表"],[-1,1050,"li"],[-1,1141,"\n"],[-1,1162,"\r"],[1,1163,":"],[-1,1187,"\r"],[1,1188,":"],[-1,1213,"\r"],[1,1214,"]"],[-1,1222,"\r"],[1,1223,":"],[-1,1271,"\r\r"],[1,1273,")\n"],[1,1302,"\n"],[-1,1902,"\n"],[1,1903,"3"],[-1,2008,"\n"],[1,2009,"u"],[-1,3922,"\n"],[-1,3960,"\r\r"],[1,3962,"k\n"],[-1,3978,"\r\r"],[1,3980,")\n"],[-1,3998,"\r"],[1,3999,":"],[-1,4037,"\r"],[1,4038,"\""],[-1,4054,"\r"],[1,4055,":"],[-1,4075,"\r"],[1,4076,":"],[-1,4117,"\r"],[1,4118,")"],[-1,4131,"\r"],[1,4132,":"],[-1,4180,"\r"],[1,4181,")"],[-1,4202,"\r"],[1,4203,"e"],[-1,4215,"\r"],[1,4216,"\""],[-1,4247,"\r"],[1,4248,":"],[-1,4285,"\r"],[1,4286,")"],[-1,4300,"\r\r"],[1,4302,"s\n"],[1,4324,"\n"]],[230,230],[4325,4325]]],[1524810373578,[null,[[1,230,"打"],[-1,230,"指出"],[1,241,"一"],[1,398,"\n"],[1,418,"\r"],[-1,418,":"],[1,433,"\r"],[-1,433,"0"],[1,455,"\r"],[-1,455,":"],[1,483,"\r"],[-1,483,"i"],[1,501,"\r\r"],[-1,501,"m\n"],[-1,532,"\n"],[-1,757,"="],[1,759," "],[-1,782,"="],[1,784," "],[-1,804,"="],[1,806," "],[-1,822,"="],[1,824," "],[-1,836,"="],[1,838,"￥ "],[-1,839,"5"],[1,842,"5"],[-1,842,"\n"],[-1,1034,"列表"],[1,1052,"li"],[1,1141,"\n"],[1,1161,"\r"],[-1,1161,":"],[1,1186,"\r"],[-1,1186,":"],[1,1212,"\r"],[-1,1212,"]"],[1,1221,"\r"],[-1,1221,":"],[1,1270,"\r\r"],[-1,1270,")\n"],[-1,1301,"\n"],[1,1902,"\n"],[-1,1902,"3"],[1,2008,"\n"],[-1,2008,"u"],[1,3922,"\n"],[1,3959,"\r\r"],[-1,3959,"k\n"],[1,3977,"\r\r"],[-1,3977,")\n"],[1,3997,"\r"],[-1,3997,":"],[1,4036,"\r"],[-1,4036,"\""],[1,4053,"\r"],[-1,4053,":"],[1,4074,"\r"],[-1,4074,":"],[1,4116,"\r"],[-1,4116,")"],[1,4130,"\r"],[-1,4130,":"],[1,4179,"\r"],[-1,4179,")"],[1,4201,"\r"],[-1,4201,"e"],[1,4214,"\r"],[-1,4214,"\""],[1,4246,"\r"],[-1,4246,":"],[1,4284,"\r"],[-1,4284,")"],[1,4299,"\r\r"],[-1,4299,"s\n"],[-1,4323,"\n"]],[4325,4325],[230,230]]],[1524810317220,["Re@VAIO",[[1,4439,"递归函数的"]],[4439,4439],[4444,4444]]],[1524810317683,["Re@VAIO",[[-1,4443,"的"]],[4444,4444],[4443,4443]]],[1524810321216,["Re@VAIO",[[1,4443,"调用的。当"]],[4443,4443],[4448,4448]]],[1524810322874,["Re@VAIO",[[-1,4447,"当"]],[4448,4448],[4447,4447]]],[1524810371639,["Re@VAIO",[[1,4447,"在Python中，调用一个函数时，系统会"]],[4447,4447],[4467,4467]]],[1524810433610,[null,[[-1,230,"打"],[1,231,"指出"],[-1,240,"一"],[-1,398,"\n"],[-1,419,"\r"],[1,420,":"],[-1,434,"\r"],[1,435,"0"],[-1,456,"\r"],[1,457,":"],[-1,484,"\r"],[1,485,"i"],[-1,502,"\r\r"],[1,504,"m\n"],[1,533,"\n"],[1,757,"="],[-1,758," "],[1,782,"="],[-1,783," "],[1,804,"="],[-1,805," "],[1,822,"="],[-1,823," "],[1,836,"="],[-1,837,"￥ "],[1,840,"5"],[-1,842,"5"],[1,843,"\n"],[1,1034,"列表"],[-1,1050,"li"],[-1,1141,"\n"],[-1,1162,"\r"],[1,1163,":"],[-1,1187,"\r"],[1,1188,":"],[-1,1213,"\r"],[1,1214,"]"],[-1,1222,"\r"],[1,1223,":"],[-1,1271,"\r\r"],[1,1273,")\n"],[1,1302,"\n"],[-1,1902,"\n"],[1,1903,"3"],[-1,2008,"\n"],[1,2009,"u"],[-1,3922,"\n"],[-1,3960,"\r\r"],[1,3962,"k\n"],[-1,3978,"\r\r"],[1,3980,")\n"],[-1,3998,"\r"],[1,3999,":"],[-1,4037,"\r"],[1,4038,"\""],[-1,4054,"\r"],[1,4055,":"],[-1,4075,"\r"],[1,4076,":"],[-1,4117,"\r"],[1,4118,")"],[-1,4131,"\r"],[1,4132,":"],[-1,4180,"\r"],[1,4181,")"],[-1,4202,"\r"],[1,4203,"e"],[-1,4215,"\r"],[1,4216,"\""],[-1,4247,"\r"],[1,4248,":"],[-1,4285,"\r"],[1,4286,")"],[-1,4300,"\r\r"],[1,4302,"s\n"],[1,4324,"\n"]],[230,230],[4325,4325]]],[1524810433611,[null,[[1,230,"打"],[-1,230,"指出"],[1,241,"一"],[1,398,"\n"],[1,418,"\r"],[-1,418,":"],[1,433,"\r"],[-1,433,"0"],[1,455,"\r"],[-1,455,":"],[1,483,"\r"],[-1,483,"i"],[1,501,"\r\r"],[-1,501,"m\n"],[-1,532,"\n"],[-1,757,"="],[1,759," "],[-1,782,"="],[1,784," "],[-1,804,"="],[1,806," "],[-1,822,"="],[1,824," "],[-1,836,"="],[1,838,"￥ "],[-1,839,"5"],[1,842,"5"],[-1,842,"\n"],[-1,1034,"列表"],[1,1052,"li"],[1,1141,"\n"],[1,1161,"\r"],[-1,1161,":"],[1,1186,"\r"],[-1,1186,":"],[1,1212,"\r"],[-1,1212,"]"],[1,1221,"\r"],[-1,1221,":"],[1,1270,"\r\r"],[-1,1270,")\n"],[-1,1301,"\n"],[1,1902,"\n"],[-1,1902,"3"],[1,2008,"\n"],[-1,2008,"u"],[1,3922,"\n"],[1,3959,"\r\r"],[-1,3959,"k\n"],[1,3977,"\r\r"],[-1,3977,")\n"],[1,3997,"\r"],[-1,3997,":"],[1,4036,"\r"],[-1,4036,"\""],[1,4053,"\r"],[-1,4053,":"],[1,4074,"\r"],[-1,4074,":"],[1,4116,"\r"],[-1,4116,")"],[1,4130,"\r"],[-1,4130,":"],[1,4179,"\r"],[-1,4179,")"],[1,4201,"\r"],[-1,4201,"e"],[1,4214,"\r"],[-1,4214,"\""],[1,4246,"\r"],[-1,4246,":"],[1,4284,"\r"],[-1,4284,")"],[1,4299,"\r\r"],[-1,4299,"s\n"],[-1,4323,"\n"]],[4325,4325],[230,230]]],[1524810406737,["Re@VAIO",[[1,4467,"分配一个栈桢用来处理该函数中的局部变量。当函数执行完毕，返回值被放入栈顶等待被调用的函数出"]],[4467,4467],[4512,4512]]],[1524810406895,["Re@VAIO",[[-1,4511,"出"]],[4512,4512],[4511,4511]]],[1524810409335,["Re@VAIO",[[1,4511,"处理。如果"]],[4511,4511],[4516,4516]]],[1524810409656,["Re@VAIO",[[-1,4515,"果"]],[4516,4516],[4515,4515]]],[1524810417476,["Re@VAIO",[[1,4515,"图6所示"]],[4515,4515],[4519,4519]]],[1524810553627,[null,[[-1,230,"打"],[1,231,"指出"],[-1,240,"一"],[-1,398,"\n"],[-1,419,"\r"],[1,420,":"],[-1,434,"\r"],[1,435,"0"],[-1,456,"\r"],[1,457,":"],[-1,484,"\r"],[1,485,"i"],[-1,502,"\r\r"],[1,504,"m\n"],[1,533,"\n"],[1,757,"="],[-1,758," "],[1,782,"="],[-1,783," "],[1,804,"="],[-1,805," "],[1,822,"="],[-1,823," "],[1,836,"="],[-1,837,"￥ "],[1,840,"5"],[-1,842,"5"],[1,843,"\n"],[1,1034,"列表"],[-1,1050,"li"],[-1,1141,"\n"],[-1,1162,"\r"],[1,1163,":"],[-1,1187,"\r"],[1,1188,":"],[-1,1213,"\r"],[1,1214,"]"],[-1,1222,"\r"],[1,1223,":"],[-1,1271,"\r\r"],[1,1273,")\n"],[1,1302,"\n"],[-1,1902,"\n"],[1,1903,"3"],[-1,2008,"\n"],[1,2009,"u"],[-1,3922,"\n"],[-1,3960,"\r\r"],[1,3962,"k\n"],[-1,3978,"\r\r"],[1,3980,")\n"],[-1,3998,"\r"],[1,3999,":"],[-1,4037,"\r"],[1,4038,"\""],[-1,4054,"\r"],[1,4055,":"],[-1,4075,"\r"],[1,4076,":"],[-1,4117,"\r"],[1,4118,")"],[-1,4131,"\r"],[1,4132,":"],[-1,4180,"\r"],[1,4181,")"],[-1,4202,"\r"],[1,4203,"e"],[-1,4215,"\r"],[1,4216,"\""],[-1,4247,"\r"],[1,4248,":"],[-1,4285,"\r"],[1,4286,")"],[-1,4300,"\r\r"],[1,4302,"s\n"],[1,4324,"\n"]],[230,230],[4325,4325]]],[1524810553628,[null,[[1,230,"打"],[-1,230,"指出"],[1,241,"一"],[1,398,"\n"],[1,418,"\r"],[-1,418,":"],[1,433,"\r"],[-1,433,"0"],[1,455,"\r"],[-1,455,":"],[1,483,"\r"],[-1,483,"i"],[1,501,"\r\r"],[-1,501,"m\n"],[-1,532,"\n"],[-1,757,"="],[1,759," "],[-1,782,"="],[1,784," "],[-1,804,"="],[1,806," "],[-1,822,"="],[1,824," "],[-1,836,"="],[1,838,"￥ "],[-1,839,"5"],[1,842,"5"],[-1,842,"\n"],[-1,1034,"列表"],[1,1052,"li"],[1,1141,"\n"],[1,1161,"\r"],[-1,1161,":"],[1,1186,"\r"],[-1,1186,":"],[1,1212,"\r"],[-1,1212,"]"],[1,1221,"\r"],[-1,1221,":"],[1,1270,"\r\r"],[-1,1270,")\n"],[-1,1301,"\n"],[1,1902,"\n"],[-1,1902,"3"],[1,2008,"\n"],[-1,2008,"u"],[1,3922,"\n"],[1,3959,"\r\r"],[-1,3959,"k\n"],[1,3977,"\r\r"],[-1,3977,")\n"],[1,3997,"\r"],[-1,3997,":"],[1,4036,"\r"],[-1,4036,"\""],[1,4053,"\r"],[-1,4053,":"],[1,4074,"\r"],[-1,4074,":"],[1,4116,"\r"],[-1,4116,")"],[1,4130,"\r"],[-1,4130,":"],[1,4179,"\r"],[-1,4179,")"],[1,4201,"\r"],[-1,4201,"e"],[1,4214,"\r"],[-1,4214,"\""],[1,4246,"\r"],[-1,4246,":"],[1,4284,"\r"],[-1,4284,")"],[1,4299,"\r\r"],[-1,4299,"s\n"],[-1,4323,"\n"]],[4325,4325],[230,230]]],[1524810534521,["Re@VAIO",[[1,4519,"。"]],[4519,4519],[4520,4520]]]]],["a7ed6c11-7bc4-42d2-a52c-8c82731bbf05",1525080695107,"递归\n===\n\n\n# 4 递归 #\n\n## 4.1 目标 ##\n\n本章目标如下：\n\n- 了解：某些难以处理的问题也许用递归可以轻松解决。\n- 掌握：设计递归式程序。\n- 了解并应用：递归三大法则。\n- 实现：问题的递归式描述。\n- 了解：计算机系统中递归的实现\n\n## 4.2 何为递归 ##\n\n递归是一种解决问题的方法，将一个问题分解为越来越小的子问题，直到问题的规模小到可以被轻松解决。通常来说，递归中有函数对自己本身的调用。从表面上来看似乎并没有什么特别指出，然而递归算法对于某些问题具有一针见血的气消。\n\n\n## 4.3 对数字列表求和 ##\n\n首先来看一个并不需要递归也可以解决的问题。假设相对一个数字列表求和，比如[1,3,5,7,9]。迭代式算法如可执行代码1所示。函数使用求和变量（theSum）来计算列表中数字之和。\n\n** 可执行代码1： 迭代求和 **\n```Python\ndef listsum(numList):\n    theSum = 0\n    for i in numList:\n        theSum = theSum + i\n    return theSum\n\nprint(listsum([1,3,5,7,9]))\n\n```\n那么，现在假设不可以使用while或者for循环，那又该如何做？数学家可能会想到加法本身是一种接受两个参数的函数，即一对数字。对于该列表求和问题便可转化为多对数字求和问题。先写为全括号化的表达式，比如：\n$$((((1+3)+5)+7)+9)$$\n也可以反方向来：\n$$(1+(3+(5+(7+9))))$$\n注意到最里面的括号组（7+9）是不需要迭代或者其它特殊结构便可解决的问题。实际上，可以将求和问题写为以下简化形式：\n$$total= (1+(3+(5+(7+9))))\ntotal= (1+(3+(5+16)))\ntotal= (1+(3+21))\ntotal= (1+24)\ntotal= 25$$\n如何将这种思想转化为Python程序？首先，将求和问题按Python列表的方式来考虑。可能读者会认为对列表的求和即是列表中第一个元素numList[0]与其它所有元素numList[1:]之和，以函数形式写出即为：\n$$listSum(numList)=first(numList)+listSum(rest(numList))$$\n在以上表达式中，first(numList)返回列表中第一个元素，而rest(numList)返回的是去除了第一个元素的原列表（也是一个列表）。用Python表达式可以写为如可执行代码2：\n\n** 可执行代码2：递归求和（第一次递归） **\n```Python\ndef listsum(numList):\n   if len(numList) == 1:\n        return numList[0]\n   else:\n        return numList[0] + listsum(numList[1:])\n\nprint(listsum([1,3,5,7,9]))\n\n```\n在这段代码中，有些地方需要注意。首先，在行2检查了列表是否仅有1个元素。这一判定很关键，它是控制函数结束的必要语句。长度为1的列表求和显然便是其本身。其次，在行5该函数调用了它自己本身。这便是将listsum归为递归算法的原因。递归函数是一种调用自身的函数。\n\n图1演示了对列表[1,3,5,7,9]求和的递归调用。读者可以将这些有序调用认为是一次次的问题简化过程。每调用一次，便转化为解决一个更小更容易的问题，知道问题规模不能再缩小。\n\n![image](http://interactivepython.org/courselib/static/pythonds/_images/sumlistIn.png)\n\n当问题已经最简化时，便开始将每个问题的答案拼装起来直到原始问题被解决。如图2所示，listsum沿着调用顺序返回。当listsum回到了最顶部的问题时，原始问题便得到了解决。\n\n![image](http://interactivepython.org/courselib/static/pythonds/_images/sumlistOut.png)\n\n## 4.4 递归三定律 ##\n\n跟阿西莫夫（Asimov）机器人三定律一样，递归算法也必须遵守三条重要定律：\n\n1. 递归算法必须要有个**基本情形**作为出口。\n2. 递归算法必须不断改变自身状态并向基本情形演进。\n3. 递归算法必须递归地调用自身。\n\n现在来仔细研究一下这三条定律以及在listsum中是如何得到体现的。首先，基本情形是终止算法递归的条件。一般来说，基本情形都是问题规模已经小到足以直接解决的时候。在listsum算法中，基本情形是长度为1的列表。\n\n为满足第二条定律，必须设法改变当前状态并使得算法向基本情形靠近。状态的改变意味着，算法使用的一些数据将被改变。通常来说，即为问题规模以某种方法缩小。在listsum算法中，基本数据结构是列表，因此需要在列表上想办法实现状态的改变。因为基本情形是列表长度为1，向基本情形演进的一种很自然的实现方式就是缩小列表，这便是可执行代码在行5所做的事：将列表长度缩小，然后将其作为参数来调用listsum本身。\n\n最后一条定律是算法必须调用自己本身，这是递归根本的定义。递归对于许多初学者来说是个有些难懂的概念。读者应当已经发现，递归函数是一种很优秀的方法，借助它可以将大规模的问题拆分为小问题，解决这些小问题只需要写一个简单的函数来对它们处理即可。表面看起来，递归似乎是陷入了一种循环。但实际上它在逻辑上并不是循环的，递归的逻辑是用优美简洁的表达式将问题拆分为更小更简单的。\n\n在本章的剩余部分将进一步研究递归，每个例子中都着重于用如何利用三定律来设计算法。\n\n## 4.5 将整数转化为以任何进制表示的字符串 ##\n\n假设需要将整数转化为二进制与十六进制之间的某进制表示的字符串形式。比如，整数10的十进制字符串为\"10\"，而二进制字符串为\"1010\"。有很多算法可以解决该问题，包括前文说过的以栈来解决，但是用递归思想来解决该问题还是最简洁的。\n\n接下来以十进制的整数768为例演示一个具体的问题。假设用一组字符串来对应前10个数字，比如说convString = \"0123456789\" 。通过在字符串中检索，很容易便可将10以内的数字进行转化，例如整数9，那么字符串便是convString[9]，即\"9\"。将769拆分为三个单独的数字7，6，9，将其转化为字符串也很简单了。小于10的整数看起来是不错的基本情形。\n\n确定基本进制后，整个算法将包括3部分：\n\n1. 将原数字转化为一系列单数字。\n2. 利用检索将单数字转为字符串。\n3. 将各单数字字符串连接起来，形成最终的结果。\n\n下一步是实现状态的改变，使得程序向基本情形靠近。因为研究对象是数字，不妨回想一想什么数学运算可以减少数字，最有可能的是减法和除法。虽然说减法也许是可行的，但有些令人困扰的是在这里如何确定减法操作的两个对象。而除法则清晰很多。\n\n将整数769除以10，可以得到76余9，这两个数字很有用。首先，余数是一个小于进制（10）的数，因此可以直接使用检索转化为字符串。其次，得到了一个小于初始数字的数，这便向基本情形靠近了一步。现在需要做得便是将76转化为它的字符表示。同样，利用除法可以得到7余6。最后，问题退化为转化7。流程如图3所示。注意，需要被保存的数被放置在示意图右侧。\n\n![image](http://interactivepython.org/courselib/static/pythonds/_images/toStr.png)\n\n可执行代码1实现了上述的算法。\n\n** 可执行代码1：迭代算法——整数转化为字符串 **\n```Python\ndef toStr(n,base):\n   convertString = \"0123456789ABCDEF\"\n   if n < base:\n      return convertString[n]\n   else:\n      return toStr(n//base,base) + convertString[n%base]\n\nprint(toStr(1453,16))\n```\n注意在第3行，检测了基本情形，即n小于目标进制。一旦检测到基本情形，便停止递归，然后根据convertString序列返回结果。在行6，通过递归调用和除法降低问题规模来同时满足了第2和第3定律。\n\n再来追踪一次该算法，这次将整数10转化为2进制形式字符串（\"1010\"）\n\n![image](http://interactivepython.org/courselib/static/pythonds/_images/toStrBase2.png)\n\n如图4所示，得到了所需结果，似乎数字的顺序错了。但是实际上，算法运行是正常的，因为是在行6中是先进行的递归调用，然后再将余数的字符串标识加上。\n\n## 4.6 栈桢：实现递归 ##\n\n设想，如果不按上文那样将递归调用的单字符结果依次连接起来得到结果，而是将算法修改为在递归调用之前将字符串压入栈中。调整后的算法如可执行代码1所示。\n** 可执行代码1：利用栈实现整数转化为字符串 **\n```Python\nfrom pythonds.basic.stack import Stack\n\nrStack = Stack()\n\ndef toStr(n,base):\n    convertString = \"0123456789ABCDEF\"\n    while n > 0:\n        if n < base:\n            rStack.push(convertString[n])\n        else:\n            rStack.push(convertString[n % base])\n        n = n // base\n    res = \"\"\n    while not rStack.isEmpty():\n        res = res + str(rStack.pop())\n    return res\n\nprint(toStr(1453,16))\n\n```\n每一次调用toStr，都将一个字符放入栈中。就前一个例子来说，可以发现在第4次调用后，得到的栈如图5所示。注意，现在可以直接将字符从栈中推出，再将他们链接为最后的结果\"1010\"即可。\n\n此例说明了Python是如何实现递归函数调用的。在Python中，调用一个函数时，系统会分配一个栈桢用来处理该函数中的局部变量。当函数执行完毕，返回值被放入栈顶等待被调用的函数处理。如图6所示。",[[1525080690794,["Re@Re.local",[[-1,0,"递归"]],[2,2],[0,0]]],[1525080691046,["Re@Re.local",[[1,0,"d"]],[0,0],[1,1]]],[1525080691592,["Re@Re.local",[[-1,0,"d"]],[1,1],[0,0]]],[1525080693325,["Re@Re.local",[[1,0,"递归"]],[0,0],[2,2]]],[1525080823304,["Re@Re.local",[[1,4423,"\n"]],[4421,4421],[4422,4422]]],[1525080823912,["Re@Re.local",[[1,4424,"\n"]],[4422,4422],[4423,4423]]],[1525080824243,["Re@Re.local",[[1,4423,"![../_images/recstack.png](http://interactivepython.org/courselib/static/pythonds/_images/recstack.png)"]],[4423,4423],[4526,4526]]],[1525080826926,["Re@Re.local",[[1,4625,"\n\n"]],[4625,4625],[4626,4626]]],[1525080827128,["Re@Re.local",[[1,4627,"\n"]],[4626,4626],[4627,4627]]],[1525080831402,["Re@Re.local",[[1,4627,"![../_images/newcallstack.png](http://interactivepython.org/courselib/static/pythonds/_images/newcallstack.png)"]],[4627,4627],[4738,4738]]],[1525080832592,["Re@Re.local",[[1,4739,"\n"]],[4738,4738],[4739,4739]]],[1525080833025,["Re@Re.local",[[1,4740,"\n"]],[4739,4739],[4740,4740]]],[1525080838891,["Re@Re.local",[[-1,4740,"\n"],[1,4741,"注意大"]],[4740,4740],[4743,4743]]],[1525080838996,["Re@Re.local",[[-1,4742,"大"]],[4743,4743],[4742,4742]]],[1525080846589,["Re@Re.local",[[1,4742,"对toStr*"]],[4742,4742],[4749,4749]]],[1525080846999,["Re@Re.local",[[-1,4748,"*"]],[4749,4749],[4748,4748]]],[1525080864393,["Re@Re.local",[[1,4748,"(2//2, 2)的调用在栈中给"]],[4748,4748],[4764,4764]]],[1525080864729,["Re@Re.local",[[-1,4763,"给"]],[4764,4764],[4763,4763]]],[1525080875632,["Re@Re.local",[[1,4763,"返回了值“1”。该"]],[4763,4763],[4772,4772]]],[1525080878574,["Re@Re.local",[[1,4772,"返回值又"]],[4772,4772],[4776,4776]]],[1525081366096,["Re@Re.local",[[1,4776,"bei"]],[4776,4776],[4776,4776]]],[1525081367785,["Re@Re.local",[[-1,4776,"bei"]],[4779,4779],[4776,4776]]],[1525081509405,["Re@Re.local",[[1,4776,"被"]],[4776,4776],[4777,4777]]],[1525081591152,["Re@Re.local",[[-1,4775,"又被"]],[4777,4777],[4775,4775]]],[1525081604891,["Re@Re.local",[[1,4775,"在表达式“1” + convertString[2%2]"]],[4775,4775],[4803,4803]]]]],["58ab33ce-026d-4be6-a4e3-379620c5259e",1525328205094,"递归\n===\n\n\n# 4 递归 #\n\n## 4.1 目标 ##\n\n本章目标如下：\n\n- 了解：某些难以处理的问题也许用递归可以轻松解决。\n- 掌握：设计递归式程序。\n- 了解并应用：递归三大法则。\n- 实现：问题的递归式描述。\n- 了解：计算机系统中递归的实现\n\n## 4.2 何为递归 ##\n\n递归是一种解决问题的方法，将一个问题分解为越来越小的子问题，直到问题的规模小到可以被轻松解决。通常来说，递归中有函数对自己本身的调用。从表面上来看似乎并没有什么特别指出，然而递归算法对于某些问题具有一针见血的气消。\n\n\n## 4.3 对数字列表求和 ##\n\n首先来看一个并不需要递归也可以解决的问题。假设相对一个数字列表求和，比如[1,3,5,7,9]。迭代式算法如可执行代码1所示。函数使用求和变量（theSum）来计算列表中数字之和。\n\n** 可执行代码1： 迭代求和 **\n```Python\ndef listsum(numList):\n    theSum = 0\n    for i in numList:\n        theSum = theSum + i\n    return theSum\n\nprint(listsum([1,3,5,7,9]))\n\n```\n那么，现在假设不可以使用while或者for循环，那又该如何做？数学家可能会想到加法本身是一种接受两个参数的函数，即一对数字。对于该列表求和问题便可转化为多对数字求和问题。先写为全括号化的表达式，比如：\n$$((((1+3)+5)+7)+9)$$\n也可以反方向来：\n$$(1+(3+(5+(7+9))))$$\n注意到最里面的括号组（7+9）是不需要迭代或者其它特殊结构便可解决的问题。实际上，可以将求和问题写为以下简化形式：\n$$total= (1+(3+(5+(7+9))))\ntotal= (1+(3+(5+16)))\ntotal= (1+(3+21))\ntotal= (1+24)\ntotal= 25$$\n如何将这种思想转化为Python程序？首先，将求和问题按Python列表的方式来考虑。可能读者会认为对列表的求和即是列表中第一个元素numList[0]与其它所有元素numList[1:]之和，以函数形式写出即为：\n$$listSum(numList)=first(numList)+listSum(rest(numList))$$\n在以上表达式中，first(numList)返回列表中第一个元素，而rest(numList)返回的是去除了第一个元素的原列表（也是一个列表）。用Python表达式可以写为如可执行代码2：\n\n** 可执行代码2：递归求和（第一次递归） **\n```Python\ndef listsum(numList):\n   if len(numList) == 1:\n        return numList[0]\n   else:\n        return numList[0] + listsum(numList[1:])\n\nprint(listsum([1,3,5,7,9]))\n\n```\n在这段代码中，有些地方需要注意。首先，在行2检查了列表是否仅有1个元素。这一判定很关键，它是控制函数结束的必要语句。长度为1的列表求和显然便是其本身。其次，在行5该函数调用了它自己本身。这便是将listsum归为递归算法的原因。递归函数是一种调用自身的函数。\n\n图1演示了对列表[1,3,5,7,9]求和的递归调用。读者可以将这些有序调用认为是一次次的问题简化过程。每调用一次，便转化为解决一个更小更容易的问题，知道问题规模不能再缩小。\n\n![image](http://interactivepython.org/courselib/static/pythonds/_images/sumlistIn.png)\n\n当问题已经最简化时，便开始将每个问题的答案拼装起来直到原始问题被解决。如图2所示，listsum沿着调用顺序返回。当listsum回到了最顶部的问题时，原始问题便得到了解决。\n\n![image](http://interactivepython.org/courselib/static/pythonds/_images/sumlistOut.png)\n\n## 4.4 递归三定律 ##\n\n跟阿西莫夫（Asimov）机器人三定律一样，递归算法也必须遵守三条重要定律：\n\n1. 递归算法必须要有个**基本情形**作为出口。\n2. 递归算法必须不断改变自身状态并向基本情形演进。\n3. 递归算法必须递归地调用自身。\n\n现在来仔细研究一下这三条定律以及在listsum中是如何得到体现的。首先，基本情形是终止算法递归的条件。一般来说，基本情形都是问题规模已经小到足以直接解决的时候。在listsum算法中，基本情形是长度为1的列表。\n\n为满足第二条定律，必须设法改变当前状态并使得算法向基本情形靠近。状态的改变意味着，算法使用的一些数据将被改变。通常来说，即为问题规模以某种方法缩小。在listsum算法中，基本数据结构是列表，因此需要在列表上想办法实现状态的改变。因为基本情形是列表长度为1，向基本情形演进的一种很自然的实现方式就是缩小列表，这便是可执行代码在行5所做的事：将列表长度缩小，然后将其作为参数来调用listsum本身。\n\n最后一条定律是算法必须调用自己本身，这是递归根本的定义。递归对于许多初学者来说是个有些难懂的概念。读者应当已经发现，递归函数是一种很优秀的方法，借助它可以将大规模的问题拆分为小问题，解决这些小问题只需要写一个简单的函数来对它们处理即可。表面看起来，递归似乎是陷入了一种循环。但实际上它在逻辑上并不是循环的，递归的逻辑是用优美简洁的表达式将问题拆分为更小更简单的。\n\n在本章的剩余部分将进一步研究递归，每个例子中都着重于用如何利用三定律来设计算法。\n\n## 4.5 将整数转化为以任何进制表示的字符串 ##\n\n假设需要将整数转化为二进制与十六进制之间的某进制表示的字符串形式。比如，整数10的十进制字符串为\"10\"，而二进制字符串为\"1010\"。有很多算法可以解决该问题，包括前文说过的以栈来解决，但是用递归思想来解决该问题还是最简洁的。\n\n接下来以十进制的整数768为例演示一个具体的问题。假设用一组字符串来对应前10个数字，比如说convString = \"0123456789\" 。通过在字符串中检索，很容易便可将10以内的数字进行转化，例如整数9，那么字符串便是convString[9]，即\"9\"。将769拆分为三个单独的数字7，6，9，将其转化为字符串也很简单了。小于10的整数看起来是不错的基本情形。\n\n确定基本进制后，整个算法将包括3部分：\n\n1. 将原数字转化为一系列单数字。\n2. 利用检索将单数字转为字符串。\n3. 将各单数字字符串连接起来，形成最终的结果。\n\n下一步是实现状态的改变，使得程序向基本情形靠近。因为研究对象是数字，不妨回想一想什么数学运算可以减少数字，最有可能的是减法和除法。虽然说减法也许是可行的，但有些令人困扰的是在这里如何确定减法操作的两个对象。而除法则清晰很多。\n\n将整数769除以10，可以得到76余9，这两个数字很有用。首先，余数是一个小于进制（10）的数，因此可以直接使用检索转化为字符串。其次，得到了一个小于初始数字的数，这便向基本情形靠近了一步。现在需要做得便是将76转化为它的字符表示。同样，利用除法可以得到7余6。最后，问题退化为转化7。流程如图3所示。注意，需要被保存的数被放置在示意图右侧。\n\n![image](http://interactivepython.org/courselib/static/pythonds/_images/toStr.png)\n\n可执行代码1实现了上述的算法。\n\n** 可执行代码1：迭代算法——整数转化为字符串 **\n```Python\ndef toStr(n,base):\n   convertString = \"0123456789ABCDEF\"\n   if n < base:\n      return convertString[n]\n   else:\n      return toStr(n//base,base) + convertString[n%base]\n\nprint(toStr(1453,16))\n```\n注意在第3行，检测了基本情形，即n小于目标进制。一旦检测到基本情形，便停止递归，然后根据convertString序列返回结果。在行6，通过递归调用和除法降低问题规模来同时满足了第2和第3定律。\n\n再来追踪一次该算法，这次将整数10转化为2进制形式字符串（\"1010\"）\n\n![image](http://interactivepython.org/courselib/static/pythonds/_images/toStrBase2.png)\n\n如图4所示，得到了所需结果，似乎数字的顺序错了。但是实际上，算法运行是正常的，因为是在行6中是先进行的递归调用，然后再将余数的字符串标识加上。\n\n## 4.6 栈桢：实现递归 ##\n\n设想，如果不按上文那样将递归调用的单字符结果依次连接起来得到结果，而是将算法修改为在递归调用之前将字符串压入栈中。调整后的算法如可执行代码1所示。\n** 可执行代码1：利用栈实现整数转化为字符串 **\n```Python\nfrom pythonds.basic.stack import Stack\n\nrStack = Stack()\n\ndef toStr(n,base):\n    convertString = \"0123456789ABCDEF\"\n    while n > 0:\n        if n < base:\n            rStack.push(convertString[n])\n        else:\n            rStack.push(convertString[n % base])\n        n = n // base\n    res = \"\"\n    while not rStack.isEmpty():\n        res = res + str(rStack.pop())\n    return res\n\nprint(toStr(1453,16))\n\n```\n每一次调用toStr，都将一个字符放入栈中。就前一个例子来说，可以发现在第4次调用后，得到的栈如图5所示。注意，现在可以直接将字符从栈中推出，再将他们链接为最后的结果\"1010\"即可。\n\n![../_images/recstack.png](http://interactivepython.org/courselib/static/pythonds/_images/recstack.png)\n\n此例说明了Python是如何实现递归函数调用的。在Python中，调用一个函数时，系统会分配一个栈桢用来处理该函数中的局部变量。当函数执行完毕，返回值被放入栈顶等待被调用的函数处理。如图6所示。\n\n![../_images/newcallstack.png](http://interactivepython.org/courselib/static/pythonds/_images/newcallstack.png)\n\n注意对toStr(2//2, 2)的调用在栈中返回了值“1”。该返回值在表达式“1” + convertString[2%2]",[[1525328164381,["Re@Re.local",[[1,4803,"yon"]],[4803,4803],[4806,4806]]],[1525328164970,["Re@Re.local",[[-1,4803,"yon"]],[4806,4806],[4803,4803]]],[1525328176099,["Re@Re.local",[[1,4803,"用来取代函数调用toStr(1m2"]],[4803,4803],[4820,4820]]],[1525328176747,["Re@Re.local",[[-1,4818,"m2"]],[4820,4820],[4818,4818]]],[1525328177011,["Re@Re.local",[[1,4818,"m"]],[4818,4818],[4819,4819]]],[1525328177865,["Re@Re.local",[[-1,4818,"m"]],[4819,4819],[4818,4818]]],[1525328179873,["Re@Re.local",[[1,4818,",2)。"]],[4818,4818],[4822,4822]]],[1525328193002,["Re@Re.local",[[-1,4821,"。"]],[4822,4822],[4821,4821]]],[1525328197040,["Re@Re.local",[[1,4821,"，执行后得到的结果1"]],[4821,4821],[4831,4831]]],[1525328197376,["Re@Re.local",[[-1,4830,"1"]],[4831,4831],[4830,4830]]],[1525328203019,["Re@Re.local",[[1,4830,"“10”又被防御"]],[4830,4830],[4838,4838]]],[1525328203247,["Re@Re.local",[[-1,4836,"防御"]],[4838,4838],[4836,4836]]],[1525328204516,["Re@Re.local",[[1,4836,"放在"]],[4836,4836],[4838,4838]]],[1525328211633,["Re@Re.local",[[1,4838,"栈顶。"]],[4838,4838],[4841,4841]]],[1525328520487,["Re@Re.local",[[1,4841,"zhey"]],[4841,4841],[4845,4845]]],[1525328521389,["Re@Re.local",[[-1,4841,"zhey"]],[4845,4845],[4841,4841]]],[1525328522233,["Re@Re.local",[[1,4841,"这样"]],[4841,4841],[4843,4843]]]]],["d1dd53ff-a01d-46ee-80df-d72b86b23ee9",1525337340020,"递归\n===\n\n\n# 4 递归 #\n\n## 4.1 目标 ##\n\n本章目标如下：\n\n- 了解：某些难以处理的问题也许用递归可以轻松解决。\n- 掌握：设计递归式程序。\n- 了解并应用：递归三大法则。\n- 实现：问题的递归式描述。\n- 了解：计算机系统中递归的实现\n\n## 4.2 何为递归 ##\n\n递归是一种解决问题的方法，将一个问题分解为越来越小的子问题，直到问题的规模小到可以被轻松解决。通常来说，递归中有函数对自己本身的调用。从表面上来看似乎并没有什么特别指出，然而递归算法对于某些问题具有一针见血的气消。\n\n\n## 4.3 对数字列表求和 ##\n\n首先来看一个并不需要递归也可以解决的问题。假设相对一个数字列表求和，比如[1,3,5,7,9]。迭代式算法如可执行代码1所示。函数使用求和变量（theSum）来计算列表中数字之和。\n\n** 可执行代码1： 迭代求和 **\n```Python\ndef listsum(numList):\n    theSum = 0\n    for i in numList:\n        theSum = theSum + i\n    return theSum\n\nprint(listsum([1,3,5,7,9]))\n\n```\n那么，现在假设不可以使用while或者for循环，那又该如何做？数学家可能会想到加法本身是一种接受两个参数的函数，即一对数字。对于该列表求和问题便可转化为多对数字求和问题。先写为全括号化的表达式，比如：\n$$((((1+3)+5)+7)+9)$$\n也可以反方向来：\n$$(1+(3+(5+(7+9))))$$\n注意到最里面的括号组（7+9）是不需要迭代或者其它特殊结构便可解决的问题。实际上，可以将求和问题写为以下简化形式：\n$$total= (1+(3+(5+(7+9))))\ntotal= (1+(3+(5+16)))\ntotal= (1+(3+21))\ntotal= (1+24)\ntotal= 25$$\n如何将这种思想转化为Python程序？首先，将求和问题按Python列表的方式来考虑。可能读者会认为对列表的求和即是列表中第一个元素numList[0]与其它所有元素numList[1:]之和，以函数形式写出即为：\n$$listSum(numList)=first(numList)+listSum(rest(numList))$$\n在以上表达式中，first(numList)返回列表中第一个元素，而rest(numList)返回的是去除了第一个元素的原列表（也是一个列表）。用Python表达式可以写为如可执行代码2：\n\n** 可执行代码2：递归求和（第一次递归） **\n```Python\ndef listsum(numList):\n   if len(numList) == 1:\n        return numList[0]\n   else:\n        return numList[0] + listsum(numList[1:])\n\nprint(listsum([1,3,5,7,9]))\n\n```\n在这段代码中，有些地方需要注意。首先，在行2检查了列表是否仅有1个元素。这一判定很关键，它是控制函数结束的必要语句。长度为1的列表求和显然便是其本身。其次，在行5该函数调用了它自己本身。这便是将listsum归为递归算法的原因。递归函数是一种调用自身的函数。\n\n图1演示了对列表[1,3,5,7,9]求和的递归调用。读者可以将这些有序调用认为是一次次的问题简化过程。每调用一次，便转化为解决一个更小更容易的问题，知道问题规模不能再缩小。\n\n![image](http://interactivepython.org/courselib/static/pythonds/_images/sumlistIn.png)\n\n当问题已经最简化时，便开始将每个问题的答案拼装起来直到原始问题被解决。如图2所示，listsum沿着调用顺序返回。当listsum回到了最顶部的问题时，原始问题便得到了解决。\n\n![image](http://interactivepython.org/courselib/static/pythonds/_images/sumlistOut.png)\n\n## 4.4 递归三定律 ##\n\n跟阿西莫夫（Asimov）机器人三定律一样，递归算法也必须遵守三条重要定律：\n\n1. 递归算法必须要有个**基本情形**作为出口。\n2. 递归算法必须不断改变自身状态并向基本情形演进。\n3. 递归算法必须递归地调用自身。\n\n现在来仔细研究一下这三条定律以及在listsum中是如何得到体现的。首先，基本情形是终止算法递归的条件。一般来说，基本情形都是问题规模已经小到足以直接解决的时候。在listsum算法中，基本情形是长度为1的列表。\n\n为满足第二条定律，必须设法改变当前状态并使得算法向基本情形靠近。状态的改变意味着，算法使用的一些数据将被改变。通常来说，即为问题规模以某种方法缩小。在listsum算法中，基本数据结构是列表，因此需要在列表上想办法实现状态的改变。因为基本情形是列表长度为1，向基本情形演进的一种很自然的实现方式就是缩小列表，这便是可执行代码在行5所做的事：将列表长度缩小，然后将其作为参数来调用listsum本身。\n\n最后一条定律是算法必须调用自己本身，这是递归根本的定义。递归对于许多初学者来说是个有些难懂的概念。读者应当已经发现，递归函数是一种很优秀的方法，借助它可以将大规模的问题拆分为小问题，解决这些小问题只需要写一个简单的函数来对它们处理即可。表面看起来，递归似乎是陷入了一种循环。但实际上它在逻辑上并不是循环的，递归的逻辑是用优美简洁的表达式将问题拆分为更小更简单的。\n\n在本章的剩余部分将进一步研究递归，每个例子中都着重于用如何利用三定律来设计算法。\n\n## 4.5 将整数转化为以任何进制表示的字符串 ##\n\n假设需要将整数转化为二进制与十六进制之间的某进制表示的字符串形式。比如，整数10的十进制字符串为\"10\"，而二进制字符串为\"1010\"。有很多算法可以解决该问题，包括前文说过的以栈来解决，但是用递归思想来解决该问题还是最简洁的。\n\n接下来以十进制的整数768为例演示一个具体的问题。假设用一组字符串来对应前10个数字，比如说convString = \"0123456789\" 。通过在字符串中检索，很容易便可将10以内的数字进行转化，例如整数9，那么字符串便是convString[9]，即\"9\"。将769拆分为三个单独的数字7，6，9，将其转化为字符串也很简单了。小于10的整数看起来是不错的基本情形。\n\n确定基本进制后，整个算法将包括3部分：\n\n1. 将原数字转化为一系列单数字。\n2. 利用检索将单数字转为字符串。\n3. 将各单数字字符串连接起来，形成最终的结果。\n\n下一步是实现状态的改变，使得程序向基本情形靠近。因为研究对象是数字，不妨回想一想什么数学运算可以减少数字，最有可能的是减法和除法。虽然说减法也许是可行的，但有些令人困扰的是在这里如何确定减法操作的两个对象。而除法则清晰很多。\n\n将整数769除以10，可以得到76余9，这两个数字很有用。首先，余数是一个小于进制（10）的数，因此可以直接使用检索转化为字符串。其次，得到了一个小于初始数字的数，这便向基本情形靠近了一步。现在需要做得便是将76转化为它的字符表示。同样，利用除法可以得到7余6。最后，问题退化为转化7。流程如图3所示。注意，需要被保存的数被放置在示意图右侧。\n\n![image](http://interactivepython.org/courselib/static/pythonds/_images/toStr.png)\n\n可执行代码1实现了上述的算法。\n\n** 可执行代码1：迭代算法——整数转化为字符串 **\n```Python\ndef toStr(n,base):\n   convertString = \"0123456789ABCDEF\"\n   if n < base:\n      return convertString[n]\n   else:\n      return toStr(n//base,base) + convertString[n%base]\n\nprint(toStr(1453,16))\n```\n注意在第3行，检测了基本情形，即n小于目标进制。一旦检测到基本情形，便停止递归，然后根据convertString序列返回结果。在行6，通过递归调用和除法降低问题规模来同时满足了第2和第3定律。\n\n再来追踪一次该算法，这次将整数10转化为2进制形式字符串（\"1010\"）\n\n![image](http://interactivepython.org/courselib/static/pythonds/_images/toStrBase2.png)\n\n如图4所示，得到了所需结果，似乎数字的顺序错了。但是实际上，算法运行是正常的，因为是在行6中是先进行的递归调用，然后再将余数的字符串标识加上。\n\n## 4.6 栈桢：实现递归 ##\n\n设想，如果不按上文那样将递归调用的单字符结果依次连接起来得到结果，而是将算法修改为在递归调用之前将字符串压入栈中。调整后的算法如可执行代码1所示。\n** 可执行代码1：利用栈实现整数转化为字符串 **\n```Python\nfrom pythonds.basic.stack import Stack\n\nrStack = Stack()\n\ndef toStr(n,base):\n    convertString = \"0123456789ABCDEF\"\n    while n > 0:\n        if n < base:\n            rStack.push(convertString[n])\n        else:\n            rStack.push(convertString[n % base])\n        n = n // base\n    res = \"\"\n    while not rStack.isEmpty():\n        res = res + str(rStack.pop())\n    return res\n\nprint(toStr(1453,16))\n\n```\n每一次调用toStr，都将一个字符放入栈中。就前一个例子来说，可以发现在第4次调用后，得到的栈如图5所示。注意，现在可以直接将字符从栈中推出，再将他们链接为最后的结果\"1010\"即可。\n\n![../_images/recstack.png](http://interactivepython.org/courselib/static/pythonds/_images/recstack.png)\n\n此例说明了Python是如何实现递归函数调用的。在Python中，调用一个函数时，系统会分配一个栈桢用来处理该函数中的局部变量。当函数执行完毕，返回值被放入栈顶等待被调用的函数处理。如图6所示。\n\n![../_images/newcallstack.png](http://interactivepython.org/courselib/static/pythonds/_images/newcallstack.png)\n\n注意对toStr(2//2, 2)的调用在栈中返回了值“1”。该返回值在表达式“1” + convertString[2%2]用来取代函数调用toStr(1,2)，执行后得到的结果“10”又被放在栈顶。这样",[[1525337308835,["Re@VAIO",[[1,4843,"以来"]],[4843,4843],[4845,4845]]],[1525337309239,["Re@VAIO",[[-1,4843,"以来"]],[4845,4845],[4843,4843]]],[1525337313582,["Re@VAIO",[[1,4843,"一来，Python的"]],[4843,4843],[4853,4853]]],[1525337320604,["Re@VAIO",[[-1,4846,"Python的"]],[4853,4853],[4846,4846]]],[1525337332997,["Re@VAIO",[[1,4846,"在Python中认为是栈替代了"]],[4846,4846],[4861,4861]]],[1525337358289,["Re@VAIO",[[1,4861,"代码4中栈的作用。"]],[4861,4861],[4870,4870]]],[1525337436462,["Re@VAIO",[[-1,4846,"在Python中认为是栈替代了代码4中栈的作用。"]],[4846,4870],[4846,4846]]],[1525337458728,["Re@VAIO",[[1,4846,"Python的调用栈取代了代码4中所使用的栈。在"]],[4846,4846],[4870,4870]]],[1525337461300,["Re@VAIO",[[-1,4869,"在这里"]],[4872,4872],[4869,4869]]],[1525337471527,["Re@VAIO",[[1,4869,"在该例子中，读者可以认为栈的"]],[4869,4869],[4883,4883]]],[1525337475359,["Re@VAIO",[[-1,4882,"的"]],[4883,4883],[4882,4882]]],[1525337492145,["Re@VAIO",[[1,4882,"顶的返回值替代了累加变量的作用。"]],[4882,4882],[4898,4898]]],[1525337494429,["Re@VAIO",[[1,4898,"\n\n"]],[4898,4898],[4899,4899]]],[1525337494637,["Re@VAIO",[[1,4900,"\n"]],[4899,4899],[4900,4900]]],[1525337516280,["Re@VAIO",[[-1,4900,"\n"],[1,4901,"栈桢也为该"]],[4900,4900],[4905,4905]]],[1525337516807,["Re@VAIO",[[-1,4904,"该"]],[4905,4905],[4904,4904]]],[1525337519466,["Re@VAIO",[[1,4904,"对应函数"]],[4904,4904],[4908,4908]]],[1525337526263,["Re@VAIO",[[1,4908,"使用的变量提供了一个做哟"]],[4908,4908],[4920,4920]]],[1525337527694,["Re@VAIO",[[-1,4913,"提供了一个做哟"]],[4920,4920],[4913,4913]]],[1525337532612,["Re@VAIO",[[1,4913,"规定了作用域。及时"]],[4913,4913],[4922,4922]]],[1525337534775,["Re@VAIO",[[-1,4920,"及时"]],[4922,4922],[4920,4920]]],[1525337535494,["Re@VAIO",[[1,4920,"岁"]],[4920,4920],[4921,4921]]],[1525337535638,["Re@VAIO",[[-1,4920,"岁"]],[4921,4921],[4920,4920]]],[1525337537188,["Re@VAIO",[[1,4920,"即使"]],[4920,4920],[4922,4922]]],[1525337537461,["Re@VAIO",[[-1,4920,"即使"]],[4922,4922],[4920,4920]]],[1525337546823,["Re@VAIO",[[1,4920,"虽然多次调用同一个函数，每一个函数"]],[4920,4920],[4937,4937]]],[1525337548176,["Re@VAIO",[[-1,4932,"每一个函数"]],[4937,4937],[4932,4932]]],[1525337574478,["Re@VAIO",[[1,4932,"每一次调用都为函数的局部变量创建一个新的uoyon"]],[4932,4932],[4957,4957]]],[1525337575287,["Re@VAIO",[[-1,4952,"uoyon"]],[4957,4957],[4952,4952]]],[1525337576775,["Re@VAIO",[[1,4952,"作用域。"]],[4952,4952],[4956,4956]]],[1525337577018,["Re@VAIO",[[1,4956,"\n\n"]],[4956,4956],[4957,4957]]],[1525337577222,["Re@VAIO",[[1,4958,"\n"]],[4957,4957],[4958,4958]]],[1525337639734,["Re@VAIO",[[1,4959,"\n"]],[4956,4956],[4957,4957]]],[1525337639813,["Re@VAIO",[[1,4960,"\n"]],[4957,4957],[4958,4958]]],[1525337650419,["Re@VAIO",[[1,4958,"## 4.7 图示递归 ##"]],[4958,4958],[4972,4972]]],[1525337651446,["Re@VAIO",[[1,4975,"\n"]],[4972,4972],[4973,4973]]],[1525337651677,["Re@VAIO",[[1,4976,"\n"]],[4973,4973],[4974,4974]]],[1525337655578,["Re@VAIO",[[1,4974,"在上一届"]],[4974,4974],[4978,4978]]],[1525337655887,["Re@VAIO",[[-1,4977,"届"]],[4978,4978],[4977,4977]]],[1525337667189,["Re@VAIO",[[1,4977,"节中介绍了一下"]],[4977,4977],[4984,4984]]],[1525337667438,["Re@VAIO",[[-1,4982,"一下"]],[4984,4984],[4982,4982]]],[1525337669346,["Re@VAIO",[[1,4982,"一些使用过"]],[4982,4982],[4987,4987]]],[1525337670584,["Re@VAIO",[[-1,4986,"过"]],[4987,4987],[4986,4986]]],[1525337675855,["Re@VAIO",[[1,4986,"递归算法可以轻松解决的往年提"]],[4986,4986],[5000,5000]]],[1525337676647,["Re@VAIO",[[-1,4997,"往年提"]],[5000,5000],[4997,4997]]],[1525337677211,["Re@VAIO",[[1,4997,"问题。"]],[4997,4997],[5000,5000]]],[1525337678510,["Re@VAIO",[[-1,4999,"。"]],[5000,5000],[4999,4999]]],[1525337680937,["Re@VAIO",[[1,4999,"，然而"]],[4999,4999],[5002,5002]]],[1525337720963,["Re@VAIO",[[1,5002,"很难为抽象"]],[5002,5002],[5007,5007]]],[1525337759295,["Re@VAIO",[[-1,5004,"为抽象"]],[5007,5007],[5004,5004]]],[1525337770402,["Re@VAIO",[[1,5004,"给出递归函数实际运行"]],[5004,5004],[5014,5014]]],[1525337771447,["Re@VAIO",[[-1,5010,"实际运行"]],[5014,5014],[5010,5010]]],[1525337782936,["Re@VAIO",[[1,5010,"运行的可视化方法或者思维导图。"]],[5010,5010],[5025,5025]]],[1525337783473,["Re@VAIO",[[-1,5024,"。"]],[5025,5025],[5024,5024]]],[1525337787512,["Re@VAIO",[[1,5024,"，这使得"]],[5024,5024],[5028,5028]]],[1525337788295,["Re@VAIO",[[-1,5024,"，这使得"]],[5028,5028],[5024,5024]]],[1525337788703,["Re@VAIO",[[1,5024,"。"]],[5024,5024],[5025,5025]]],[1525337789230,["Re@VAIO",[[-1,5024,"。"]],[5025,5025],[5024,5024]]],[1525337798419,["Re@VAIO",[[1,5024,"，这就使得低谷"]],[5024,5024],[5031,5031]]],[1525337798743,["Re@VAIO",[[-1,5029,"低谷"]],[5031,5031],[5029,5029]]],[1525337803541,["Re@VAIO",[[1,5029,"递归算法不是那么容易掌握的，"]],[5029,5029],[5043,5043]]],[1525337804825,["Re@VAIO",[[-1,5042,"，"]],[5043,5043],[5042,5042]]],[1525337808006,["Re@VAIO",[[1,5042,"。在本节中，"]],[5042,5042],[5048,5048]]],[1525337811934,["Re@VAIO",[[-1,5043,"在本节中，"]],[5048,5048],[5043,5043]]],[1525337817563,["Re@VAIO",[[1,5043,"本节将研究一些"]],[5043,5043],[5050,5050]]],[1525337828035,["Re@VAIO",[[1,5050,"有"]],[5050,5050],[5051,5051]]],[1525337828260,["Re@VAIO",[[-1,5050,"有"]],[5051,5051],[5050,5050]]],[1525337877649,["Re@VAIO",[[1,5050,"递归的例子并画出它们的图例。通过研究这些图例的"]],[5050,5050],[5073,5073]]],[1525337878638,["Re@VAIO",[[-1,5070,"图例的"]],[5073,5073],[5070,5070]]],[1525337881661,["Re@VAIO",[[-1,5058,"它们的图例"]],[5063,5063],[5058,5058]]],[1525337883188,["Re@VAIO",[[1,5058,"一些"]],[5058,5058],[5060,5060]]],[1525337884208,["Re@VAIO",[[-1,5058,"一些"]],[5060,5060],[5058,5058]]],[1525337887234,["Re@VAIO",[[1,5058,"示意图"]],[5058,5058],[5061,5061]]],[1525337891329,["Re@VAIO",[[1,5068,"示意图，也"]],[5068,5068],[5073,5073]]],[1525337892110,["Re@VAIO",[[-1,5071,"，也"]],[5073,5073],[5071,5071]]],[1525337899843,["Re@VAIO",[[1,5071,"的形成过程，可以形成"]],[5071,5071],[5081,5081]]],[1525337903791,["Re@VAIO",[[-1,5077,"可以形成"]],[5081,5081],[5077,5077]]],[1525337907358,["Re@VAIO",[[1,5077,"便会对递归的"]],[5077,5077],[5083,5083]]],[1525337907510,["Re@VAIO",[[-1,5082,"的"]],[5083,5083],[5082,5082]]],[1525337910987,["Re@VAIO",[[1,5082,"过程有更加肾内科的"]],[5082,5082],[5091,5091]]],[1525337911646,["Re@VAIO",[[-1,5087,"肾内科的"]],[5091,5091],[5087,5087]]],[1525337919078,["Re@VAIO",[[1,5087,"深刻的理解，从而更"]],[5087,5087],[5096,5096]]],[1525337919185,["Re@VAIO",[[-1,5095,"更"]],[5096,5096],[5095,5095]]],[1525337920846,["Re@VAIO",[[1,5095,"性"]],[5095,5095],[5096,5096]]],[1525337920918,["Re@VAIO",[[-1,5095,"性"]],[5096,5096],[5095,5095]]],[1525337921679,["Re@VAIO",[[1,5095,"对"]],[5095,5095],[5096,5096]]],[1525337923623,["Re@VAIO",[[-1,5092,"，从而对"]],[5096,5096],[5092,5092]]],[1525337924199,["Re@VAIO",[[1,5092,"。"]],[5092,5092],[5093,5093]]],[1525337924422,["Re@VAIO",[[1,5096,"\n"]],[5093,5093],[5094,5094]]],[1525337924597,["Re@VAIO",[[1,5097,"\n"]],[5094,5094],[5095,5095]]],[1525337939637,["Re@VAIO",[[1,5095,"这里使用Python的"]],[5095,5095],[5106,5106]]],[1525337942530,["Re@VAIO",[[1,5106,"海关"]],[5106,5106],[5108,5108]]],[1525337944194,["Re@VAIO",[[-1,5106,"海关"]],[5108,5108],[5106,5106]]],[1525337945998,["Re@VAIO",[[1,5106,"海归"]],[5106,5106],[5108,5108]]],[1525337946494,["Re@VAIO",[[-1,5106,"海归"]],[5108,5108],[5106,5106]]],[1525337973764,["Re@VAIO",[[1,5106,"海龟图像模块turtle进行可视化。turtle模块是所有py"]],[5106,5106],[5137,5137]]],[1525337974295,["Re@VAIO",[[-1,5135,"py"]],[5137,5137],[5135,5135]]],[1525337982385,["Re@VAIO",[[1,5135,"Python版本的标配并且很容易使用"]],[5135,5135],[5153,5153]]],[1525337984029,["Re@VAIO",[[-1,5151,"使用"]],[5153,5153],[5151,5151]]],[1525337985302,["Re@VAIO",[[1,5151,"上手。"]],[5151,5151],[5154,5154]]],[1525338032176,["Re@VAIO",[[-1,5153,"。"]],[5154,5154],[5153,5153]]],[1525338035032,["Re@VAIO",[[1,5153,"，祈福号"]],[5153,5153],[5157,5157]]],[1525338035505,["Re@VAIO",[[-1,5154,"祈福号"]],[5157,5157],[5154,5154]]],[1525338038922,["Re@VAIO",[[1,5154,"其符号也很棒见"]],[5154,5154],[5161,5161]]],[1525338039183,["Re@VAIO",[[-1,5159,"棒见"]],[5161,5161],[5159,5159]]],[1525338047007,["Re@VAIO",[[1,5159,"简单。创建一个"]],[5159,5159],[5166,5166]]],[1525338047142,["Re@VAIO",[[-1,5165,"个"]],[5166,5166],[5165,5165]]],[1525338052323,["Re@VAIO",[[1,5165,"只海龟并"]],[5165,5165],[5169,5169]]],[1525338052477,["Re@VAIO",[[-1,5168,"并"]],[5169,5169],[5168,5168]]],[1525338058941,["Re@VAIO",[[1,5168,"，该海龟可以前进/"]],[5168,5168],[5177,5177]]],[1525338065971,["Re@VAIO",[[1,5177,"后退/左转/右转等。"]],[5177,5177],[5187,5187]]],[1525338076891,["Re@VAIO",[[-1,5186,"。"]],[5187,5187],[5186,5186]]],[1525338077192,["Re@VAIO",[[1,5186,"，"]],[5186,5186],[5187,5187]]],[1525338078182,["Re@VAIO",[[-1,5186,"，"]],[5187,5187],[5186,5186]]],[1525338082382,["Re@VAIO",[[1,5186,"，也"]],[5186,5186],[5188,5188]]],[1525338082463,["Re@VAIO",[[-1,5187,"也"]],[5188,5188],[5187,5187]]],[1525338084139,["Re@VAIO",[[1,5187,"单人也"]],[5187,5187],[5190,5190]]],[1525338084713,["Re@VAIO",[[-1,5187,"单人也"]],[5190,5190],[5187,5187]]],[1525338114483,["Re@VAIO",[[1,5187,"并且可以控制尾巴的抬起和放下。当海龟的尾巴放下时"]],[5187,5187],[5211,5211]]],[1525338115707,["Re@VAIO",[[-1,5210,"时"]],[5211,5211],[5210,5210]]],[1525338119671,["Re@VAIO",[[1,5210,"且在移动时，"]],[5210,5210],[5216,5216]]],[1525338161835,["Re@VAIO",[[1,5216,"便会绘制出线。为了提高观赏性，可以改变海龟尾巴的宽度以及画笔的颜色。"]],[5216,5216],[5250,5250]]],[1525338162293,["Re@VAIO",[[1,5253,"\n"]],[5250,5250],[5251,5251]]],[1525338162501,["Re@VAIO",[[1,5254,"\n"]],[5251,5251],[5252,5252]]],[1525338308698,["Re@VAIO",[[1,5252,"下面简单说明一下"]],[5252,5252],[5260,5260]]],[1525338309855,["Re@VAIO",[[-1,5258,"一下"]],[5260,5260],[5258,5258]]],[1525338313200,["Re@VAIO",[[1,5258,"turl"]],[5258,5258],[5262,5262]]],[1525338313530,["Re@VAIO",[[-1,5261,"l"]],[5262,5262],[5261,5261]]],[1525338319353,["Re@VAIO",[[1,5261,"tle左图的基本放啊分"]],[5261,5261],[5272,5272]]],[1525338320935,["Re@VAIO",[[-1,5269,"放啊分"]],[5272,5272],[5269,5269]]],[1525338322074,["Re@VAIO",[[1,5269,"方法"]],[5269,5269],[5271,5271]]],[1525338324096,["Re@VAIO",[[-1,5264,"左图的基本方法"]],[5271,5271],[5264,5264]]],[1525338327074,["Re@VAIO",[[1,5264,"作图的基础。"]],[5264,5264],[5270,5270]]],[1525338337984,["Re@VAIO",[[-1,5269,"。"]],[5270,5270],[5269,5269]]],[1525338343992,["Re@VAIO",[[1,5269,"，这里会利用tutle"]],[5269,5269],[5280,5280]]],[1525338345662,["Re@VAIO",[[-1,5277,"tle"]],[5280,5280],[5277,5277]]],[1525338358434,["Re@VAIO",[[1,5277,"rtle绘制一个螺旋线。如可执行代码所示。"]],[5277,5277],[5298,5298]]],[1525338390587,["Re@VAIO",[[1,5298,"引入turtle模块后，创建一个turtle实例。当turtle出啊个"]],[5298,5298],[5333,5333]]],[1525338391493,["Re@VAIO",[[-1,5330,"出啊个"]],[5333,5333],[5330,5330]]],[1525338394604,["Re@VAIO",[[1,5330,"生成后后"]],[5330,5330],[5334,5334]]],[1525338394711,["Re@VAIO",[[-1,5333,"后"]],[5334,5334],[5333,5333]]],[1525338410486,["Re@VAIO",[[1,5333,"，为其创建一个窗口用来绘制"]],[5333,5333],[5346,5346]]],[1525338410598,["Re@VAIO",[[-1,5345,"制"]],[5346,5346],[5345,5345]]],[1525338419910,["Re@VAIO",[[1,5345,"图。接下来定义drawSpiral"]],[5345,5345],[5362,5362]]],[1525338421288,["Re@VAIO",[[1,5362,"函数。"]],[5362,5362],[5365,5365]]],[1525339308729,["Re@VAIO",[[-1,1863,"基本情形"],[1,1867,"约束条件"]],[1863,1867],[1863,1867]]],[1525339309271,["Re@VAIO",[[-1,1894,"基本情形"],[1,1898,"约束条件"]],[1894,1898],[1894,1898]]],[1525339310177,["Re@VAIO",[[-1,1958,"基本情形"],[1,1962,"约束条件"]],[1958,1962],[1958,1962]]],[1525339310911,["Re@VAIO",[[-1,1978,"基本情形"],[1,1982,"约束条件"]],[1978,1982],[1978,1982]]],[1525339311375,["Re@VAIO",[[-1,2014,"基本情形"],[1,2018,"约束条件"]],[2014,2018],[2014,2018]]],[1525339311824,["Re@VAIO",[[-1,2054,"基本情形"],[1,2058,"约束条件"]],[2054,2058],[2054,2058]]],[1525339312056,["Re@VAIO",[[-1,2146,"基本情形"],[1,2150,"约束条件"]],[2146,2150],[2146,2150]]],[1525339312582,["Re@VAIO",[[-1,2159,"基本情形"],[1,2163,"约束条件"]],[2159,2163],[2159,2163]]],[1525339313447,["Re@VAIO",[[-1,2781,"基本情形"],[1,2785,"约束条件"]],[2781,2785],[2781,2785]]],[1525339313903,["Re@VAIO",[[-1,2888,"基本情形"],[1,2892,"约束条件"]],[2888,2892],[2888,2892]]],[1525339314167,["Re@VAIO",[[-1,3070,"基本情形"],[1,3074,"约束条件"]],[3070,3074],[3070,3074]]],[1525339314330,["Re@VAIO",[[-1,3503,"基本情形"],[1,3507,"约束条件"]],[3503,3507],[3503,3507]]],[1525339314894,["Re@VAIO",[[-1,3522,"基本情形"],[1,3526,"约束条件"]],[3522,3526],[3522,3526]]],[1525339391808,["Re@VAIO",[[1,5365,"该函数的基本月"]],[5365,5365],[5372,5372]]],[1525339393054,["Re@VAIO",[[-1,5368,"的基本月"]],[5372,5372],[5368,5368]]],[1525339409054,["Re@VAIO",[[1,5368,"的约束条件是线的长度见效到"]],[5368,5368],[5381,5381]]],[1525339409975,["Re@VAIO",[[-1,5378,"见效到"]],[5381,5381],[5378,5378]]],[1525339412109,["Re@VAIO",[[1,5378,"减少到"]],[5378,5378],[5381,5381]]],[1525339425455,["Re@VAIO",[[1,5374,"与"]],[5374,5374],[5375,5375]]],[1525339425599,["Re@VAIO",[[-1,5374,"与"]],[5375,5375],[5374,5374]]],[1525339427930,["Re@VAIO",[[1,5374,"待画"]],[5374,5374],[5376,5376]]],[1525339434532,["Re@VAIO",[[1,5380,"（）"]],[5380,5380],[5382,5382]]],[1525339437940,["Re@VAIO",[[1,5381,"以冷"]],[5381,5381],[5383,5383]]],[1525339438299,["Re@VAIO",[[-1,5381,"以冷"]],[5383,5383],[5381,5381]]],[1525339439979,["Re@VAIO",[[1,5381,"以l"]],[5381,5381],[5383,5383]]],[1525339442276,["Re@VAIO",[[1,5384,"n参数标识"]],[5384,5384],[5389,5389]]],[1525339443768,["Re@VAIO",[[-1,5387,"标识"]],[5389,5389],[5387,5387]]],[1525339444572,["Re@VAIO",[[1,5387,"表示"]],[5387,5387],[5389,5389]]],[1525339450202,["Re@VAIO",[[1,5393,"0或者更小"]],[5393,5393],[5398,5398]]],[1525339452675,["Re@VAIO",[[-1,5393,"0或者更小"]],[5398,5398],[5393,5393]]],[1525339457055,["Re@VAIO",[[1,5393,"小于或等于0时。"]],[5393,5393],[5401,5401]]],[1525339457776,["Re@VAIO",[[-1,5399,"时。"]],[5401,5401],[5399,5399]]],[1525339484519,["Re@VAIO",[[1,5399,"。若长度扔"]],[5399,5399],[5404,5404]]],[1525339484855,["Re@VAIO",[[-1,5403,"扔"]],[5404,5404],[5403,5403]]],[1525339492707,["Re@VAIO",[[1,5403,"仍大于0，则命令海龟向前"]],[5403,5403],[5415,5415]]],[1525339494758,["Re@VAIO",[[-1,5413,"向前"]],[5415,5415],[5413,5413]]],[1525339499468,["Re@VAIO",[[1,5413,"前进len单位，"]],[5413,5413],[5421,5421]]],[1525339560118,[null,[[-1,5383,"）"],[1,5384,"e"],[1,5389,"）"],[-1,5392,"\n"],[1,5421,"\n"]],[5383,5383],[5422,5422]]],[1525339560118,[null,[[1,5383,"）"],[-1,5383,"e"],[-1,5389,"）"],[1,5393,"\n"],[-1,5421,"\n"]],[5422,5422],[5383,5383]]],[1525339500617,["Re@VAIO",[[1,5421,"并且"]],[5421,5421],[5423,5423]]],[1525339507276,["Re@VAIO",[[-1,5420,"，并且"]],[5423,5423],[5420,5420]]],[1525339543357,["Re@VAIO",[[1,5420,"然后右转90度。递归"]],[5420,5420],[5430,5430]]],[1525339551919,["Re@VAIO",[[-1,5428,"递归"]],[5430,5430],[5428,5428]]],[1525339558480,["Re@VAIO",[[1,5428,"递归"]],[5428,5428],[5430,5430]]],[1525339558903,["Re@VAIO",[[-1,5428,"递归"]],[5430,5430],[5428,5428]]],[1525339620113,[null,[[-1,5383,"）"],[1,5384,"e"],[1,5389,"）"],[-1,5392,"\n"],[1,5428,"\n"]],[5383,5383],[5429,5429]]],[1525339620113,[null,[[1,5383,"）"],[-1,5383,"e"],[-1,5389,"）"],[1,5393,"\n"],[-1,5428,"\n"]],[5429,5429],[5383,5383]]],[1525339566909,["Re@VAIO",[[1,5428,"通过调用drawSpiral"]],[5428,5428],[5442,5442]]],[1525339571877,["Re@VAIO",[[1,5430,"再次"]],[5430,5430],[5432,5432]]],[1525339603562,["Re@VAIO",[[1,5444,"并且传入减小后的长度实现递归。在可执行代码1的最后，调用了函数myWin.exitonclick()，"]],[5444,5444],[5495,5495]]],[1525339800180,[null,[[-1,5383,"）"],[1,5384,"e"],[1,5389,"）"],[-1,5392,"\n"],[1,5495,"\n"]],[5383,5383],[5496,5496]]],[1525339800180,[null,[[1,5383,"）"],[-1,5383,"e"],[-1,5389,"）"],[1,5393,"\n"],[-1,5495,"\n"]],[5496,5496],[5383,5383]]],[1525339788023,["Re@VAIO",[[1,5495,"zh"]],[5498,5498],[5497,5497]]],[1525339788655,["Re@VAIO",[[-1,5495,"zh"]],[5497,5497],[5495,5495]]],[1525339799915,["Re@VAIO",[[1,5495,"这是"]],[5495,5495],[5497,5497]]],[1525339860159,[null,[[-1,5383,"）"],[1,5384,"e"],[1,5389,"）"],[-1,5392,"\n"],[1,5497,"\n"]],[5383,5383],[5498,5498]]],[1525339860159,[null,[[1,5383,"）"],[-1,5383,"e"],[-1,5389,"）"],[1,5393,"\n"],[-1,5497,"\n"]],[5498,5498],[5383,5383]]],[1525339801387,["Re@VAIO",[[1,5497,"一个遍历"]],[5497,5497],[5501,5501]]],[1525339802725,["Re@VAIO",[[-1,5495,"这是一个遍历"]],[5501,5501],[5495,5495]]],[1525339804609,["Re@VAIO",[[1,5495,"这仅仅"]],[5495,5495],[5498,5498]]],[1525339805399,["Re@VAIO",[[-1,5496,"仅仅"]],[5498,5498],[5496,5496]]],[1525339809688,["Re@VAIO",[[1,5496,"不过是一个遍历的小韩式"]],[5496,5496],[5507,5507]]],[1525339810663,["Re@VAIO",[[-1,5501,"遍历的小韩式"]],[5507,5507],[5501,5501]]],[1525339815180,["Re@VAIO",[[1,5501,"便利的小韩曙而已"]],[5501,5501],[5509,5509]]],[1525339816775,["Re@VAIO",[[-1,5504,"小韩曙而已"]],[5509,5509],[5504,5504]]],[1525339819858,["Re@VAIO",[[1,5504,"窗口"]],[5504,5504],[5506,5506]]],[1525339826346,["Re@VAIO",[[-1,5496,"不过是一个便利的"]],[5504,5504],[5496,5496]]],[1525339827321,["Re@VAIO",[[1,5496,"是"]],[5496,5496],[5497,5497]]],[1525339831204,["Re@VAIO",[[1,5499,"的一个很遍历的"]],[5499,5499],[5506,5506]]],[1525339831792,["Re@VAIO",[[-1,5503,"遍历的"]],[5506,5506],[5503,5503]]],[1525339835453,["Re@VAIO",[[1,5503,"便利的方法，用于"]],[5503,5503],[5511,5511]]],[1525339838647,["Re@VAIO",[[-1,5509,"用于"]],[5511,5511],[5509,5509]]],[1525339858063,["Re@VAIO",[[1,5509,"它将海龟置于待机状态知道点击"]],[5509,5509],[5523,5523]]],[1525339858809,["Re@VAIO",[[-1,5519,"知道点击"]],[5523,5523],[5519,5519]]],[1525339859920,["Re@VAIO",[[1,5519,"直到"]],[5519,5519],[5521,5521]]],[1525339920120,[null,[[-1,5383,"）"],[1,5384,"e"],[1,5389,"）"],[-1,5392,"\n"],[1,5521,"\n"]],[5383,5383],[5522,5522]]],[1525339920120,[null,[[1,5383,"）"],[-1,5383,"e"],[-1,5389,"）"],[1,5393,"\n"],[-1,5521,"\n"]],[5522,5522],[5383,5383]]],[1525339872392,["Re@VAIO",[[1,5521,"在窗口内发生点击操作，然后清空"]],[5521,5521],[5536,5536]]],[1525339872725,["Re@VAIO",[[-1,5534,"清空"]],[5536,5536],[5534,5534]]],[1525339880620,["Re@VAIO",[[1,5534,"页面才清空并退出。"]],[5534,5534],[5543,5543]]],[1525339880865,["Re@VAIO",[[1,5546,"\n"]],[5543,5543],[5544,5544]]],[1525339881022,["Re@VAIO",[[1,5547,"\n"]],[5544,5544],[5545,5545]]],[1525339900961,["Re@VAIO",[[1,5545,"**可执行代码1：使用海龟绘制递归螺旋线**"]],[5545,5545],[5567,5567]]],[1525339901423,["Re@VAIO",[[1,5570,"\n"]],[5567,5567],[5568,5568]]],[1525339901630,["Re@VAIO",[[1,5571,"\n"]],[5568,5568],[5569,5569]]],[1525339902279,["Re@VAIO",[[-1,5571,"\n"]],[5569,5569],[5568,5568]]],[1525339905779,["Re@VAIO",[[1,5568,"```Python"]],[5568,5568],[5577,5577]]],[1525339905958,["Re@VAIO",[[1,5580,"\n"]],[5577,5577],[5578,5578]]],[1525339906247,["Re@VAIO",[[1,5578,"import turtle\r\n\r\nmyTurtle = turtle.Turtle()\r\nmyWin = turtle.Screen()\r\n\r\ndef drawSpiral(myTurtle, lineLen):\r\n    if lineLen > 0:\r\n        myTurtle.forward(lineLen)\r\n        myTurtle.right(90)\r\n        drawSpiral(myTurtle,lineLen-5)\r\n\r\ndrawSpiral(myTurtle,100)\r\nmyWin.exitonclick()"]],[5578,5578],[5857,5857]]],[1525339906445,["Re@VAIO",[[-1,5591,"\r"],[-1,5593,"\r"],[-1,5621,"\r"],[-1,5646,"\r"],[-1,5648,"\r"],[-1,5684,"\r"],[-1,5705,"\r"],[-1,5740,"\r"],[-1,5768,"\r"],[-1,5808,"\r"],[-1,5810,"\r"],[-1,5836,"\r"],[1,5857,"\n\n"]],[5848,5848],[5849,5849]]],[1525339907348,["Re@VAIO",[[-1,5849,"\n"]],[5849,5849],[5848,5848]]],[1525339907551,["Re@VAIO",[[-1,5848,"\n"]],[5848,5848],[5847,5847]]],[1525339907821,["Re@VAIO",[[-1,5847,"\n"]],[5847,5847],[5846,5846]]],[1525339908691,["Re@VAIO",[[-1,5846,"\n"],[1,5847,"```"]],[5846,5846],[5849,5849]]],[1525339909079,["Re@VAIO",[[1,5849,"\n\n"]],[5849,5849],[5850,5850]]],[1525339909527,["Re@VAIO",[[1,5851,"\n"]],[5850,5850],[5851,5851]]],[1525339980125,[null,[[-1,5383,"）"],[1,5384,"e"],[1,5389,"）"],[-1,5392,"\n"]],[5383,5383],[5392,5392]]],[1525339980125,[null,[[1,5383,"）"],[-1,5383,"e"],[-1,5389,"）"],[1,5393,"\n"]],[5392,5392],[5383,5383]]],[1525339923961,["Re@VAIO",[[-1,5851,"\n"],[1,5852,"这就是使用"]],[5851,5851],[5856,5856]]],[1525339924248,["Re@VAIO",[[-1,5854,"使用"]],[5856,5856],[5854,5854]]],[1525339927782,["Re@VAIO",[[1,5854,"海龟左图所需要"]],[5854,5854],[5861,5861]]],[1525339929177,["Re@VAIO",[[-1,5856,"左图所需要"]],[5861,5861],[5856,5856]]],[1525339932505,["Re@VAIO",[[1,5856,"模块所需要"]],[5856,5856],[5861,5861]]],[1525339932967,["Re@VAIO",[[-1,5858,"所需要"]],[5861,5861],[5858,5858]]],[1525339939481,["Re@VAIO",[[1,5858,"中所需要了解的一些基本只是"]],[5858,5858],[5871,5871]]],[1525339940366,["Re@VAIO",[[-1,5869,"只是"]],[5871,5871],[5869,5869]]],[1525339977112,["Re@VAIO",[[1,5869,"知识，据此便可以绘制漂亮的团了。下一个程序将绘制一个分形数。"]],[5869,5869],[5899,5899]]],[1525339977882,["Re@VAIO",[[-1,5897,"数。"]],[5899,5899],[5897,5897]]],[1525339978938,["Re@VAIO",[[1,5897,"树。"]],[5897,5897],[5899,5899]]],[1525340040122,[null,[[-1,5383,"）"],[1,5384,"e"],[1,5389,"）"],[-1,5392,"\n"]],[5383,5383],[5392,5392]]],[1525340040122,[null,[[1,5383,"）"],[-1,5383,"e"],[-1,5389,"）"],[1,5393,"\n"]],[5392,5392],[5383,5383]]],[1525340029665,["Re@VAIO",[[1,5899,"分形是数学的一个分支，它与递归有许多相似点。分形的定义是，对伊一个"]],[5899,5899],[5932,5932]]],[1525340031846,["Re@VAIO",[[-1,5929,"伊一个"]],[5932,5932],[5929,5929]]],[1525340037658,["Re@VAIO",[[1,5929,"于某个图形，无论放大"]],[5929,5929],[5939,5939]]],[1525340100123,[null,[[-1,5383,"）"],[1,5384,"e"],[1,5389,"）"],[-1,5392,"\n"]],[5383,5383],[5392,5392]]],[1525340100123,[null,[[1,5383,"）"],[-1,5383,"e"],[-1,5389,"）"],[1,5393,"\n"]],[5392,5392],[5383,5383]]],[1525340073658,["Re@VAIO",[[1,5939,"多少倍，其基本形状都是一致的，他"]],[5939,5939],[5955,5955]]],[1525340073744,["Re@VAIO",[[-1,5954,"他"]],[5955,5955],[5954,5954]]],[1525340079765,["Re@VAIO",[[1,5954,"此时便称之为分形"]],[5954,5954],[5962,5962]]],[1525340081615,["Re@VAIO",[[-1,5921,"分形的定义是，"]],[5922,5928],[5921,5921]]],[1525340083163,["Re@VAIO",[[1,5955,"。"]],[5955,5955],[5956,5956]]],[1525340085273,["Re@VAIO",[[1,5953,"**"]],[5953,5953],[5955,5955]]],[1525340086547,["Re@VAIO",[[1,5957,"**"]],[5957,5957],[5959,5959]]],[1525340094605,["Re@VAIO",[[1,5960,"在自然"]],[5960,5960],[5963,5963]]],[1525340095194,["Re@VAIO",[[-1,5961,"自然"]],[5963,5963],[5961,5961]]],[1525340097447,["Re@VAIO",[[1,5961,"自然界中"]],[5961,5961],[5965,5965]]],[1525340160156,[null,[[-1,5383,"）"],[1,5384,"e"],[1,5389,"）"],[-1,5392,"\n"]],[5383,5383],[5392,5392]]],[1525340160156,[null,[[1,5383,"）"],[-1,5383,"e"],[-1,5389,"）"],[1,5393,"\n"]],[5392,5392],[5383,5383]]],[1525340104199,["Re@VAIO",[[-1,5960,"在自然界中"]],[5965,5965],[5960,5960]]],[1525340108212,["Re@VAIO",[[1,5960,"自然兴县"]],[5960,5960],[5964,5964]]],[1525340108514,["Re@VAIO",[[-1,5962,"兴县"]],[5964,5964],[5962,5962]]],[1525340112048,["Re@VAIO",[[1,5962,"现象的很"]],[5962,5962],[5966,5966]]],[1525340112158,["Re@VAIO",[[-1,5965,"很"]],[5966,5966],[5965,5965]]],[1525340114968,["Re@VAIO",[[1,5960,"很多"]],[5960,5960],[5962,5962]]],[1525340125534,["Re@VAIO",[[-1,5966,"的"]],[5967,5967],[5966,5966]]],[1525340131411,["Re@VAIO",[[1,5966,"具有分形特点，因此"]],[5966,5966],[5975,5975]]]]],["1b9a1310-433e-4cae-bc9a-14bce76d54ea",1525354558781,"递归\n===\n\n\n# 4 递归 #\n\n## 4.1 目标 ##\n\n本章目标如下：\n\n- 了解：某些难以处理的问题也许用递归可以轻松解决。\n- 掌握：设计递归式程序。\n- 了解并应用：递归三大法则。\n- 实现：问题的递归式描述。\n- 了解：计算机系统中递归的实现\n\n## 4.2 何为递归 ##\n\n递归是一种解决问题的方法，将一个问题分解为越来越小的子问题，直到问题的规模小到可以被轻松解决。通常来说，递归中有函数对自己本身的调用。从表面上来看似乎并没有什么特别指出，然而递归算法对于某些问题具有一针见血的气消。\n\n\n## 4.3 对数字列表求和 ##\n\n首先来看一个并不需要递归也可以解决的问题。假设相对一个数字列表求和，比如[1,3,5,7,9]。迭代式算法如可执行代码1所示。函数使用求和变量（theSum）来计算列表中数字之和。\n\n** 可执行代码1： 迭代求和 **\n```Python\ndef listsum(numList):\n    theSum = 0\n    for i in numList:\n        theSum = theSum + i\n    return theSum\n\nprint(listsum([1,3,5,7,9]))\n\n```\n那么，现在假设不可以使用while或者for循环，那又该如何做？数学家可能会想到加法本身是一种接受两个参数的函数，即一对数字。对于该列表求和问题便可转化为多对数字求和问题。先写为全括号化的表达式，比如：\n$$((((1+3)+5)+7)+9)$$\n也可以反方向来：\n$$(1+(3+(5+(7+9))))$$\n注意到最里面的括号组（7+9）是不需要迭代或者其它特殊结构便可解决的问题。实际上，可以将求和问题写为以下简化形式：\n$$total= (1+(3+(5+(7+9))))\ntotal= (1+(3+(5+16)))\ntotal= (1+(3+21))\ntotal= (1+24)\ntotal= 25$$\n如何将这种思想转化为Python程序？首先，将求和问题按Python列表的方式来考虑。可能读者会认为对列表的求和即是列表中第一个元素numList[0]与其它所有元素numList[1:]之和，以函数形式写出即为：\n$$listSum(numList)=first(numList)+listSum(rest(numList))$$\n在以上表达式中，first(numList)返回列表中第一个元素，而rest(numList)返回的是去除了第一个元素的原列表（也是一个列表）。用Python表达式可以写为如可执行代码2：\n\n** 可执行代码2：递归求和（第一次递归） **\n```Python\ndef listsum(numList):\n   if len(numList) == 1:\n        return numList[0]\n   else:\n        return numList[0] + listsum(numList[1:])\n\nprint(listsum([1,3,5,7,9]))\n\n```\n在这段代码中，有些地方需要注意。首先，在行2检查了列表是否仅有1个元素。这一判定很关键，它是控制函数结束的必要语句。长度为1的列表求和显然便是其本身。其次，在行5该函数调用了它自己本身。这便是将listsum归为递归算法的原因。递归函数是一种调用自身的函数。\n\n图1演示了对列表[1,3,5,7,9]求和的递归调用。读者可以将这些有序调用认为是一次次的问题简化过程。每调用一次，便转化为解决一个更小更容易的问题，知道问题规模不能再缩小。\n\n![image](http://interactivepython.org/courselib/static/pythonds/_images/sumlistIn.png)\n\n当问题已经最简化时，便开始将每个问题的答案拼装起来直到原始问题被解决。如图2所示，listsum沿着调用顺序返回。当listsum回到了最顶部的问题时，原始问题便得到了解决。\n\n![image](http://interactivepython.org/courselib/static/pythonds/_images/sumlistOut.png)\n\n## 4.4 递归三定律 ##\n\n跟阿西莫夫（Asimov）机器人三定律一样，递归算法也必须遵守三条重要定律：\n\n1. 递归算法必须要有个**约束条件**作为出口。\n2. 递归算法必须不断改变自身状态并向约束条件演进。\n3. 递归算法必须递归地调用自身。\n\n现在来仔细研究一下这三条定律以及在listsum中是如何得到体现的。首先，约束条件是终止算法递归的条件。一般来说，约束条件都是问题规模已经小到足以直接解决的时候。在listsum算法中，约束条件是长度为1的列表。\n\n为满足第二条定律，必须设法改变当前状态并使得算法向约束条件靠近。状态的改变意味着，算法使用的一些数据将被改变。通常来说，即为问题规模以某种方法缩小。在listsum算法中，基本数据结构是列表，因此需要在列表上想办法实现状态的改变。因为约束条件是列表长度为1，向约束条件演进的一种很自然的实现方式就是缩小列表，这便是可执行代码在行5所做的事：将列表长度缩小，然后将其作为参数来调用listsum本身。\n\n最后一条定律是算法必须调用自己本身，这是递归根本的定义。递归对于许多初学者来说是个有些难懂的概念。读者应当已经发现，递归函数是一种很优秀的方法，借助它可以将大规模的问题拆分为小问题，解决这些小问题只需要写一个简单的函数来对它们处理即可。表面看起来，递归似乎是陷入了一种循环。但实际上它在逻辑上并不是循环的，递归的逻辑是用优美简洁的表达式将问题拆分为更小更简单的。\n\n在本章的剩余部分将进一步研究递归，每个例子中都着重于用如何利用三定律来设计算法。\n\n## 4.5 将整数转化为以任何进制表示的字符串 ##\n\n假设需要将整数转化为二进制与十六进制之间的某进制表示的字符串形式。比如，整数10的十进制字符串为\"10\"，而二进制字符串为\"1010\"。有很多算法可以解决该问题，包括前文说过的以栈来解决，但是用递归思想来解决该问题还是最简洁的。\n\n接下来以十进制的整数768为例演示一个具体的问题。假设用一组字符串来对应前10个数字，比如说convString = \"0123456789\" 。通过在字符串中检索，很容易便可将10以内的数字进行转化，例如整数9，那么字符串便是convString[9]，即\"9\"。将769拆分为三个单独的数字7，6，9，将其转化为字符串也很简单了。小于10的整数看起来是不错的约束条件。\n\n确定基本进制后，整个算法将包括3部分：\n\n1. 将原数字转化为一系列单数字。\n2. 利用检索将单数字转为字符串。\n3. 将各单数字字符串连接起来，形成最终的结果。\n\n下一步是实现状态的改变，使得程序向约束条件靠近。因为研究对象是数字，不妨回想一想什么数学运算可以减少数字，最有可能的是减法和除法。虽然说减法也许是可行的，但有些令人困扰的是在这里如何确定减法操作的两个对象。而除法则清晰很多。\n\n将整数769除以10，可以得到76余9，这两个数字很有用。首先，余数是一个小于进制（10）的数，因此可以直接使用检索转化为字符串。其次，得到了一个小于初始数字的数，这便向约束条件靠近了一步。现在需要做得便是将76转化为它的字符表示。同样，利用除法可以得到7余6。最后，问题退化为转化7。流程如图3所示。注意，需要被保存的数被放置在示意图右侧。\n\n![image](http://interactivepython.org/courselib/static/pythonds/_images/toStr.png)\n\n可执行代码1实现了上述的算法。\n\n** 可执行代码1：迭代算法——整数转化为字符串 **\n```Python\ndef toStr(n,base):\n   convertString = \"0123456789ABCDEF\"\n   if n < base:\n      return convertString[n]\n   else:\n      return toStr(n//base,base) + convertString[n%base]\n\nprint(toStr(1453,16))\n```\n注意在第3行，检测了约束条件，即n小于目标进制。一旦检测到约束条件，便停止递归，然后根据convertString序列返回结果。在行6，通过递归调用和除法降低问题规模来同时满足了第2和第3定律。\n\n再来追踪一次该算法，这次将整数10转化为2进制形式字符串（\"1010\"）\n\n![image](http://interactivepython.org/courselib/static/pythonds/_images/toStrBase2.png)\n\n如图4所示，得到了所需结果，似乎数字的顺序错了。但是实际上，算法运行是正常的，因为是在行6中是先进行的递归调用，然后再将余数的字符串标识加上。\n\n## 4.6 栈桢：实现递归 ##\n\n设想，如果不按上文那样将递归调用的单字符结果依次连接起来得到结果，而是将算法修改为在递归调用之前将字符串压入栈中。调整后的算法如可执行代码1所示。\n** 可执行代码1：利用栈实现整数转化为字符串 **\n```Python\nfrom pythonds.basic.stack import Stack\n\nrStack = Stack()\n\ndef toStr(n,base):\n    convertString = \"0123456789ABCDEF\"\n    while n > 0:\n        if n < base:\n            rStack.push(convertString[n])\n        else:\n            rStack.push(convertString[n % base])\n        n = n // base\n    res = \"\"\n    while not rStack.isEmpty():\n        res = res + str(rStack.pop())\n    return res\n\nprint(toStr(1453,16))\n\n```\n每一次调用toStr，都将一个字符放入栈中。就前一个例子来说，可以发现在第4次调用后，得到的栈如图5所示。注意，现在可以直接将字符从栈中推出，再将他们链接为最后的结果\"1010\"即可。\n\n![../_images/recstack.png](http://interactivepython.org/courselib/static/pythonds/_images/recstack.png)\n\n此例说明了Python是如何实现递归函数调用的。在Python中，调用一个函数时，系统会分配一个栈桢用来处理该函数中的局部变量。当函数执行完毕，返回值被放入栈顶等待被调用的函数处理。如图6所示。\n\n![../_images/newcallstack.png](http://interactivepython.org/courselib/static/pythonds/_images/newcallstack.png)\n\n注意对toStr(2//2, 2)的调用在栈中返回了值“1”。该返回值在表达式“1” + convertString[2%2]用来取代函数调用toStr(1,2)，执行后得到的结果“10”又被放在栈顶。这样一来，Python的调用栈取代了代码4中所使用的栈。在该例子中，读者可以认为栈顶的返回值替代了累加变量的作用。\n\n栈桢也为对应函数使用的变量规定了作用域。虽然多次调用同一个函数，每一次调用都为函数的局部变量创建一个新的作用域。\n\n## 4.7 图示递归 ##\n\n在上一节中介绍了一些使用递归算法可以轻松解决的问题，然而很难给出递归函数运行的可视化方法或者思维导图，这就使得递归算法不是那么容易掌握的。本节将研究一些递归的例子并画出示意图。通过研究这些示意图的形成过程，便会对递归过程有更加深刻的理解。\n\n这里使用Python的海龟图像模块turtle进行可视化。turtle模块是所有Python版本的标配并且很容易上手，其符号也很简单。创建一只海龟，该海龟可以前进/后退/左转/右转等，并且可以控制尾巴的抬起和放下。当海龟的尾巴放下且在移动时，便会绘制出线。为了提高观赏性，可以改变海龟尾巴的宽度以及画笔的颜色。\n\n下面简单说明turtle作图的基础，这里会利用turtle绘制一个螺旋线。如可执行代码所示。引入turtle模块后，创建一个turtle实例。当turtle生成后，为其创建一个窗口用来绘图。接下来定义drawSpiral函数。该函数的约束条件是待画线的长度（以len参数表示）减少到小于或等于0。若长度仍大于0，则命令海龟前进len单位然后右转90度。通过再次调用drawSpiral并且传入减小后的长度实现递归。在可执行代码1的最后，调用了函数myWin.exitonclick()，这是窗口的一个很便利的方法，它将海龟置于待机状态直到在窗口内发生点击操作，然后页面才清空并退出。\n\n**可执行代码1：使用海龟绘制递归螺旋线**\n```Python\nimport turtle\n\nmyTurtle = turtle.Turtle()\nmyWin = turtle.Screen()\n\ndef drawSpiral(myTurtle, lineLen):\n    if lineLen > 0:\n        myTurtle.forward(lineLen)\n        myTurtle.right(90)\n        drawSpiral(myTurtle,lineLen-5)\n\ndrawSpiral(myTurtle,100)\nmyWin.exitonclick()\n```\n\n这就是海龟模块中所需要了解的一些基本知识，据此便可以绘制漂亮的团了。下一个程序将绘制一个分形树。分形是数学的一个分支，它与递归有许多相似点。对于某个图形，无论放大多少倍，其基本形状都是一致的，此时便称之为**分形**。很多自然现象具有分形特点，因此",[[1525354529290,["Re@Re.local",[[-1,5973,"因此"]],[5975,5975],[5973,5973]]],[1525354530238,["Re@Re.local",[[1,5973,"bi"]],[5973,5973],[5975,5975]]],[1525354530922,["Re@Re.local",[[-1,5973,"bi"]],[5975,5975],[5973,5973]]],[1525354537938,["Re@Re.local",[[1,5973,"比如大陆"]],[5973,5973],[5977,5977]]],[1525354538485,["Re@Re.local",[[-1,5975,"大陆"]],[5977,5977],[5975,5975]]],[1525354554643,["Re@Re.local",[[1,5975,"海岸线，雪花，山脉，"]],[5975,5975],[5985,5985]]],[1525354563153,["Re@Re.local",[[1,5986,"以及灌木等。"]],[5986,5986],[5992,5992]]],[1525354567564,["Re@Re.local",[[-1,5991,"。"]],[5992,5992],[5991,5991]]],[1525354568568,["Re@Re.local",[[1,5991,"。"]],[5991,5991],[5992,5992]]],[1525354581913,["Re@Re.local",[[-1,5991,"。"]],[5992,5992],[5991,5991]]],[1525354586181,["Re@Re.local",[[1,5991,"，这种"]],[5991,5991],[5994,5994]]],[1525354589717,["Re@Re.local",[[-1,5992,"这种"]],[5994,5994],[5992,5992]]],[1525354599981,["Re@Re.local",[[1,5992,"这使得计算"]],[5992,5992],[5997,5997]]],[1525354600679,["Re@Re.local",[[-1,5995,"计算"]],[5997,5997],[5995,5995]]],[1525354605566,["Re@Re.local",[[1,5995,"CG（c"]],[5995,5995],[5999,5999]]],[1525354605816,["Re@Re.local",[[-1,5998,"c"]],[5999,5999],[5998,5998]]],[1525354606486,["Re@Re.local",[[1,5998,"COm"]],[5998,5998],[6001,6001]]],[1525354607084,["Re@Re.local",[[-1,5999,"Om"]],[6001,6001],[5999,5999]]],[1525354617797,["Re@Re.local",[[1,5999,"omputer Generated）电影具有了"]],[5999,5999],[6022,6022]]],[1525354678761,[null,[[1,5985,"树"],[-1,5990,"。"]],[5985,5985],[5990,5990]]],[1525354678761,[null,[[-1,5985,"树"],[1,5991,"。"]],[5990,5990],[5985,5985]]],[1525354672421,["Re@Re.local",[[1,6022,"可行性。接下来的例子中将绘制一颗"]],[6022,6022],[6038,6038]]],[1525354740318,[null,[[1,5985,"树"],[-1,5990,"。"]],[5985,5985],[5990,5990]]],[1525354740318,[null,[[-1,5985,"树"],[1,5991,"。"]],[5990,5990],[5985,5985]]],[1525354684326,["Re@Re.local",[[1,6038,"分形树。"]],[6038,6038],[6042,6042]]],[1525354684561,["Re@Re.local",[[1,6042,"\n\n"]],[6042,6042],[6043,6043]]],[1525354684766,["Re@Re.local",[[1,6044,"\n"]],[6043,6043],[6044,6044]]],[1525355772201,[null,[[1,5985,"树"],[-1,5990,"。"]],[5985,5985],[5990,5990]]],[1525355772201,[null,[[-1,5985,"树"],[1,5991,"。"]],[5990,5990],[5985,5985]]],[1525355738977,["Re@Re.local",[[-1,6044,"\n"],[1,6045,"为了"]],[6044,6044],[6046,6046]]],[1525355744495,["Re@Re.local",[[-1,6044,"为了"]],[6046,6046],[6044,6044]]],[1525355745306,["Re@Re.local",[[1,6044,"\n\n"]],[6044,6044],[6045,6045]]],[1525355747374,["Re@Re.local",[[-1,6045,"\n"]],[6045,6045],[6044,6044]]],[1525355763280,["Re@Re.local",[[-1,6044,"\n"],[1,6045,"为了画出这棵树，"]],[6044,6044],[6052,6052]]],[1525355832164,[null,[[1,5985,"树"],[-1,5990,"。"]],[5985,5985],[5990,5990]]],[1525355832164,[null,[[-1,5985,"树"],[1,5991,"。"]],[5990,5990],[5985,5985]]],[1525355782741,["Re@Re.local",[[1,6052,"思考一下如何以分型死"]],[6052,6052],[6062,6062]]],[1525355784404,["Re@Re.local",[[-1,6052,"思考一下如何以分型死"]],[6062,6062],[6052,6052]]],[1525355799108,["Re@Re.local",[[1,6052,"考虑一下如何用分形思想来描述一棵树是很有用的。"]],[6052,6052],[6075,6075]]],[1525355806204,["Re@Re.local",[[-1,6054,"一下"]],[6056,6056],[6054,6054]]],[1525355811457,["Re@Re.local",[[1,6073,"回忆一下"]],[6073,6073],[6077,6077]]],[1525355815613,["Re@Re.local",[[-1,6073,"回忆一下"]],[6077,6077],[6073,6073]]],[1525355816977,["Re@Re.local",[[1,6073,"会想"]],[6073,6073],[6075,6075]]],[1525355817874,["Re@Re.local",[[-1,6073,"会想"]],[6075,6075],[6073,6073]]],[1525355830540,["Re@Re.local",[[1,6073,"回想一下，分形"]],[6073,6073],[6080,6080]]],[1525355892169,[null,[[1,5985,"树"],[-1,5990,"。"]],[5985,5985],[5990,5990]]],[1525355892169,[null,[[-1,5985,"树"],[1,5991,"。"]],[5990,5990],[5985,5985]]],[1525355853239,["Re@Re.local",[[1,6080,"就是在各级放大"]],[6080,6080],[6087,6087]]],[1525355854511,["Re@Re.local",[[-1,6082,"在各级放大"]],[6087,6087],[6082,6082]]],[1525355866012,["Re@Re.local",[[1,6082,"无论放大多少倍其"]],[6082,6082],[6090,6090]]],[1525355869790,["Re@Re.local",[[-1,6089,"其"]],[6090,6090],[6089,6089]]],[1525355883280,["Re@Re.local",[[1,6089,"都具有相似性的东西。"]],[6089,6089],[6099,6099]]],[1525355952267,[null,[[1,5985,"树"],[-1,5990,"。"]],[5985,5985],[5990,5990]]],[1525355952267,[null,[[-1,5985,"树"],[1,5991,"。"]],[5990,5990],[5985,5985]]],[1525355908278,["Re@Re.local",[[1,6099,"将这种思想用来考虑"]],[6099,6099],[6108,6108]]],[1525355909047,["Re@Re.local",[[-1,6106,"考虑"]],[6108,6108],[6106,6106]]],[1525355934475,["Re@Re.local",[[1,6106,"研究树或者灌木，可以发现即使是小树枝也具有与整棵树想死的"]],[6106,6106],[6134,6134]]],[1525355936548,["Re@Re.local",[[-1,6131,"想死的"]],[6134,6134],[6131,6131]]],[1525355940909,["Re@Re.local",[[1,6131,"一致的行"]],[6131,6131],[6135,6135]]],[1525355941146,["Re@Re.local",[[-1,6134,"行"]],[6135,6135],[6134,6134]]],[1525355944503,["Re@Re.local",[[1,6134,"形状和特点。"]],[6134,6134],[6140,6140]]],[1525356072190,[null,[[1,5985,"树"],[-1,5990,"。"]],[5985,5985],[5990,5990]]],[1525356072190,[null,[[-1,5985,"树"],[1,5991,"。"]],[5990,5990],[5985,5985]]],[1525356061677,["Re@Re.local",[[1,6140,"据此可以将树定义为yi"]],[6140,6140],[6151,6151]]],[1525356062483,["Re@Re.local",[[-1,6149,"yi"]],[6151,6151],[6149,6149]]],[1525356064091,["Re@Re.local",[[1,6149,"一种"]],[6149,6149],[6151,6151]]],[1525356064880,["Re@Re.local",[[-1,6150,"种"]],[6151,6151],[6150,6150]]],[1525356065462,["Re@Re.local",[[1,6150,"哥"]],[6150,6150],[6151,6151]]],[1525356069801,["Re@Re.local",[[-1,6150,"哥"]],[6151,6151],[6150,6150]]],[1525356071846,["Re@Re.local",[[1,6150,"个"]],[6150,6150],[6151,6151]]],[1525356133319,[null,[[1,5985,"树"],[-1,5990,"。"]],[5985,5985],[5990,5990]]],[1525356133319,[null,[[-1,5985,"树"],[1,5991,"。"]],[5990,5990],[5985,5985]]],[1525356078220,["Re@Re.local",[[1,6151,"左右"]],[6151,6151],[6153,6153]]],[1525356078851,["Re@Re.local",[[-1,6151,"左右"]],[6153,6153],[6151,6151]]],[1525356087291,["Re@Re.local",[[1,6151,"分叉，其"]],[6151,6151],[6155,6155]]],[1525356088004,["Re@Re.local",[[-1,6151,"分叉，其"]],[6155,6155],[6151,6151]]],[1525356092481,["Re@Re.local",[[1,6151,"左右分叉，每个"]],[6151,6151],[6158,6158]]],[1525356093487,["Re@Re.local",[[-1,6156,"每个"]],[6158,6158],[6156,6156]]],[1525356097457,["Re@Re.local",[[1,6156,"左、又"]],[6156,6156],[6159,6159]]],[1525356097900,["Re@Re.local",[[-1,6156,"左、又"]],[6159,6159],[6156,6156]]],[1525356104002,["Re@Re.local",[[1,6156,"且左右分叉"]],[6156,6156],[6161,6161]]],[1525356104534,["Re@Re.local",[[-1,6159,"分叉"]],[6161,6161],[6159,6159]]],[1525356110874,["Re@Re.local",[[1,6159,"各又"]],[6159,6159],[6161,6161]]],[1525356111513,["Re@Re.local",[[-1,6160,"又"]],[6161,6161],[6160,6160]]],[1525356121541,["Re@Re.local",[[1,6160,"有一个更小的“树”（分叉）。"]],[6160,6160],[6174,6174]]],[1525356193316,[null,[[1,5985,"树"],[-1,5990,"。"]],[5985,5985],[5990,5990]]],[1525356193316,[null,[[-1,5985,"树"],[1,5991,"。"]],[5990,5990],[5985,5985]]],[1525356138504,["Re@Re.local",[[1,6174,"引入帝国的"]],[6174,6174],[6179,6179]]],[1525356145607,["Re@Re.local",[[-1,6176,"帝国的"]],[6179,6179],[6176,6176]]],[1525356151555,["Re@Re.local",[[1,6176,"递归的概念，那么这些树"]],[6176,6176],[6187,6187]]],[1525356152046,["Re@Re.local",[[-1,6184,"这些树"]],[6187,6187],[6184,6184]]],[1525356169144,["Re@Re.local",[[1,6184,"树便是这些递归的小树构成的。"]],[6184,6184],[6198,6198]]],[1525356169686,["Re@Re.local",[[1,6198,"\n\n"]],[6198,6198],[6199,6199]]],[1525356170011,["Re@Re.local",[[1,6200,"\n"]],[6199,6199],[6200,6200]]],[1525356187125,["Re@Re.local",[[-1,6200,"\n"],[1,6201,"现在将上述思路转换为Python代码。代码1"]],[6200,6200],[6222,6222]]],[1525356192921,["Re@Re.local",[[-1,6219,"代码1"]],[6222,6222],[6219,6219]]],[1525356253319,[null,[[1,5985,"树"],[-1,5990,"。"]],[5985,5985],[5990,5990]]],[1525356253319,[null,[[-1,5985,"树"],[1,5991,"。"]],[5990,5990],[5985,5985]]],[1525356200034,["Re@Re.local",[[1,6219,"代码1将"]],[6219,6219],[6223,6223]]],[1525356200166,["Re@Re.local",[[-1,6222,"将"]],[6223,6223],[6222,6222]]],[1525356235391,["Re@Re.local",[[1,6222,"利用海龟来绘制了一颗分形树。可以发现，行5和行7进行了递归调用。在行5"]],[6222,6222],[6257,6257]]],[1525356373351,[null,[[1,5985,"树"],[-1,5990,"。"]],[5985,5985],[5990,5990]]],[1525356373351,[null,[[-1,5985,"树"],[1,5991,"。"]],[5990,5990],[5985,5985]]],[1525356326888,["Re@Re.local",[[1,6257,"，"]],[6256,6257],[6258,6258]]],[1525356433762,[null,[[1,5985,"树"],[-1,5990,"。"]],[5985,5985],[5990,5990]]],[1525356433763,[null,[[-1,5985,"树"],[1,5991,"。"]],[5990,5990],[5985,5985]]],[1525356406688,["Re@Re.local",[[-1,6254,"在行5，"]],[6258,6258],[6254,6254]]],[1525356431576,["Re@Re.local",[[1,6254,"行5在右转20度后进行了递归调用，这便是前文提到的右"]],[6254,6254],[6280,6280]]],[1525356493769,[null,[[1,5985,"树"],[-1,5990,"。"]],[5985,5985],[5990,5990]]],[1525356493769,[null,[[-1,5985,"树"],[1,5991,"。"]],[5990,5990],[5985,5985]]],[1525356465496,["Re@Re.local",[[1,6280,"分叉；在行7，海龟进行了另一次递归调用，这"]],[6280,6280],[6301,6301]]],[1525356468751,["Re@Re.local",[[-1,6300,"这"]],[6301,6301],[6300,6300]]],[1525356475532,["Re@Re.local",[[1,6300,"在右转"]],[6300,6300],[6303,6303]]],[1525356476645,["Re@Re.local",[[-1,6301,"右转"]],[6303,6303],[6301,6301]]],[1525356478354,["Re@Re.local",[[1,6301,"左转"]],[6301,6301],[6303,6303]]],[1525356480022,["Re@Re.local",[[-1,6299,"，在左转"]],[6303,6303],[6299,6299]]],[1525356490165,["Re@Re.local",[[1,6289,"在左转40度后"]],[6289,6289],[6296,6296]]],[1525356554760,[null,[[1,5985,"树"],[-1,5990,"。"]],[5985,5985],[5990,5990]]],[1525356554761,[null,[[-1,5985,"树"],[1,5991,"。"]],[5990,5990],[5985,5985]]],[1525356501123,["Re@Re.local",[[1,6306,"，这极为"]],[6306,6306],[6310,6310]]],[1525356501396,["Re@Re.local",[[-1,6308,"极为"]],[6310,6310],[6308,6308]]],[1525356506567,["Re@Re.local",[[1,6308,"即为左分叉。"]],[6308,6308],[6314,6314]]],[1525356736200,[null,[[1,5985,"树"],[-1,5990,"。"]],[5985,5985],[5990,5990]]],[1525356736200,[null,[[-1,5985,"树"],[1,5991,"。"]],[5990,5990],[5985,5985]]],[1525356735476,["Re@Re.local",[[1,6314,"此外，"]],[6314,6314],[6317,6317]]],[1525356796194,[null,[[1,5985,"树"],[-1,5990,"。"]],[5985,5985],[5990,5990]]],[1525356796194,[null,[[-1,5985,"树"],[1,5991,"。"]],[5990,5990],[5985,5985]]],[1525356742678,["Re@Re.local",[[1,6317,"注意到每次调用"]],[6317,6317],[6324,6324]]],[1525357096207,[null,[[1,5985,"树"],[-1,5990,"。"]],[5985,5985],[5990,5990]]],[1525357096207,[null,[[-1,5985,"树"],[1,5991,"。"]],[5990,5990],[5985,5985]]],[1525357095100,["Re@Re.local",[[1,6324,"tree后，都从"]],[6324,6324],[6332,6332]]],[1525357156183,[null,[[1,5985,"树"],[-1,5990,"。"]],[5985,5985],[5990,5990]]],[1525357156184,[null,[[-1,5985,"树"],[1,5991,"。"]],[5990,5990],[5985,5985]]],[1525357096765,["Re@Re.local",[[-1,6331,"从"]],[6332,6332],[6331,6331]]],[1525357107938,["Re@Re.local",[[1,6331,"对branchlen参数进行减法运算"]],[6331,6331],[6349,6349]]],[1525357110569,["Re@Re.local",[[1,6345,"了"]],[6345,6345],[6346,6346]]],[1525357137045,["Re@Re.local",[[1,6350,"，这保证了递归树是越来越小的。读者应该"]],[6350,6350],[6369,6369]]]]],["d9362db8-e60b-4459-8f99-d949ad1c359d",1525401248239,"递归\n===\n\n\n# 4 递归 #\n\n## 4.1 目标 ##\n\n本章目标如下：\n\n- 了解：某些难以处理的问题也许用递归可以轻松解决。\n- 掌握：设计递归式程序。\n- 了解并应用：递归三大法则。\n- 实现：问题的递归式描述。\n- 了解：计算机系统中递归的实现\n\n## 4.2 何为递归 ##\n\n递归是一种解决问题的方法，将一个问题分解为越来越小的子问题，直到问题的规模小到可以被轻松解决。通常来说，递归中有函数对自己本身的调用。从表面上来看似乎并没有什么特别指出，然而递归算法对于某些问题具有一针见血的气消。\n\n\n## 4.3 对数字列表求和 ##\n\n首先来看一个并不需要递归也可以解决的问题。假设相对一个数字列表求和，比如[1,3,5,7,9]。迭代式算法如可执行代码1所示。函数使用求和变量（theSum）来计算列表中数字之和。\n\n** 可执行代码1： 迭代求和 **\n```Python\ndef listsum(numList):\n    theSum = 0\n    for i in numList:\n        theSum = theSum + i\n    return theSum\n\nprint(listsum([1,3,5,7,9]))\n\n```\n那么，现在假设不可以使用while或者for循环，那又该如何做？数学家可能会想到加法本身是一种接受两个参数的函数，即一对数字。对于该列表求和问题便可转化为多对数字求和问题。先写为全括号化的表达式，比如：\n$$((((1+3)+5)+7)+9)$$\n也可以反方向来：\n$$(1+(3+(5+(7+9))))$$\n注意到最里面的括号组（7+9）是不需要迭代或者其它特殊结构便可解决的问题。实际上，可以将求和问题写为以下简化形式：\n$$total= (1+(3+(5+(7+9))))\ntotal= (1+(3+(5+16)))\ntotal= (1+(3+21))\ntotal= (1+24)\ntotal= 25$$\n如何将这种思想转化为Python程序？首先，将求和问题按Python列表的方式来考虑。可能读者会认为对列表的求和即是列表中第一个元素numList[0]与其它所有元素numList[1:]之和，以函数形式写出即为：\n$$listSum(numList)=first(numList)+listSum(rest(numList))$$\n在以上表达式中，first(numList)返回列表中第一个元素，而rest(numList)返回的是去除了第一个元素的原列表（也是一个列表）。用Python表达式可以写为如可执行代码2：\n\n** 可执行代码2：递归求和（第一次递归） **\n```Python\ndef listsum(numList):\n   if len(numList) == 1:\n        return numList[0]\n   else:\n        return numList[0] + listsum(numList[1:])\n\nprint(listsum([1,3,5,7,9]))\n\n```\n在这段代码中，有些地方需要注意。首先，在行2检查了列表是否仅有1个元素。这一判定很关键，它是控制函数结束的必要语句。长度为1的列表求和显然便是其本身。其次，在行5该函数调用了它自己本身。这便是将listsum归为递归算法的原因。递归函数是一种调用自身的函数。\n\n图1演示了对列表[1,3,5,7,9]求和的递归调用。读者可以将这些有序调用认为是一次次的问题简化过程。每调用一次，便转化为解决一个更小更容易的问题，知道问题规模不能再缩小。\n\n![image](http://interactivepython.org/courselib/static/pythonds/_images/sumlistIn.png)\n\n当问题已经最简化时，便开始将每个问题的答案拼装起来直到原始问题被解决。如图2所示，listsum沿着调用顺序返回。当listsum回到了最顶部的问题时，原始问题便得到了解决。\n\n![image](http://interactivepython.org/courselib/static/pythonds/_images/sumlistOut.png)\n\n## 4.4 递归三定律 ##\n\n跟阿西莫夫（Asimov）机器人三定律一样，递归算法也必须遵守三条重要定律：\n\n1. 递归算法必须要有个**约束条件**作为出口。\n2. 递归算法必须不断改变自身状态并向约束条件演进。\n3. 递归算法必须递归地调用自身。\n\n现在来仔细研究一下这三条定律以及在listsum中是如何得到体现的。首先，约束条件是终止算法递归的条件。一般来说，约束条件都是问题规模已经小到足以直接解决的时候。在listsum算法中，约束条件是长度为1的列表。\n\n为满足第二条定律，必须设法改变当前状态并使得算法向约束条件靠近。状态的改变意味着，算法使用的一些数据将被改变。通常来说，即为问题规模以某种方法缩小。在listsum算法中，基本数据结构是列表，因此需要在列表上想办法实现状态的改变。因为约束条件是列表长度为1，向约束条件演进的一种很自然的实现方式就是缩小列表，这便是可执行代码在行5所做的事：将列表长度缩小，然后将其作为参数来调用listsum本身。\n\n最后一条定律是算法必须调用自己本身，这是递归根本的定义。递归对于许多初学者来说是个有些难懂的概念。读者应当已经发现，递归函数是一种很优秀的方法，借助它可以将大规模的问题拆分为小问题，解决这些小问题只需要写一个简单的函数来对它们处理即可。表面看起来，递归似乎是陷入了一种循环。但实际上它在逻辑上并不是循环的，递归的逻辑是用优美简洁的表达式将问题拆分为更小更简单的。\n\n在本章的剩余部分将进一步研究递归，每个例子中都着重于用如何利用三定律来设计算法。\n\n## 4.5 将整数转化为以任何进制表示的字符串 ##\n\n假设需要将整数转化为二进制与十六进制之间的某进制表示的字符串形式。比如，整数10的十进制字符串为\"10\"，而二进制字符串为\"1010\"。有很多算法可以解决该问题，包括前文说过的以栈来解决，但是用递归思想来解决该问题还是最简洁的。\n\n接下来以十进制的整数768为例演示一个具体的问题。假设用一组字符串来对应前10个数字，比如说convString = \"0123456789\" 。通过在字符串中检索，很容易便可将10以内的数字进行转化，例如整数9，那么字符串便是convString[9]，即\"9\"。将769拆分为三个单独的数字7，6，9，将其转化为字符串也很简单了。小于10的整数看起来是不错的约束条件。\n\n确定基本进制后，整个算法将包括3部分：\n\n1. 将原数字转化为一系列单数字。\n2. 利用检索将单数字转为字符串。\n3. 将各单数字字符串连接起来，形成最终的结果。\n\n下一步是实现状态的改变，使得程序向约束条件靠近。因为研究对象是数字，不妨回想一想什么数学运算可以减少数字，最有可能的是减法和除法。虽然说减法也许是可行的，但有些令人困扰的是在这里如何确定减法操作的两个对象。而除法则清晰很多。\n\n将整数769除以10，可以得到76余9，这两个数字很有用。首先，余数是一个小于进制（10）的数，因此可以直接使用检索转化为字符串。其次，得到了一个小于初始数字的数，这便向约束条件靠近了一步。现在需要做得便是将76转化为它的字符表示。同样，利用除法可以得到7余6。最后，问题退化为转化7。流程如图3所示。注意，需要被保存的数被放置在示意图右侧。\n\n![image](http://interactivepython.org/courselib/static/pythonds/_images/toStr.png)\n\n可执行代码1实现了上述的算法。\n\n** 可执行代码1：迭代算法——整数转化为字符串 **\n```Python\ndef toStr(n,base):\n   convertString = \"0123456789ABCDEF\"\n   if n < base:\n      return convertString[n]\n   else:\n      return toStr(n//base,base) + convertString[n%base]\n\nprint(toStr(1453,16))\n```\n注意在第3行，检测了约束条件，即n小于目标进制。一旦检测到约束条件，便停止递归，然后根据convertString序列返回结果。在行6，通过递归调用和除法降低问题规模来同时满足了第2和第3定律。\n\n再来追踪一次该算法，这次将整数10转化为2进制形式字符串（\"1010\"）\n\n![image](http://interactivepython.org/courselib/static/pythonds/_images/toStrBase2.png)\n\n如图4所示，得到了所需结果，似乎数字的顺序错了。但是实际上，算法运行是正常的，因为是在行6中是先进行的递归调用，然后再将余数的字符串标识加上。\n\n## 4.6 栈桢：实现递归 ##\n\n设想，如果不按上文那样将递归调用的单字符结果依次连接起来得到结果，而是将算法修改为在递归调用之前将字符串压入栈中。调整后的算法如可执行代码1所示。\n** 可执行代码1：利用栈实现整数转化为字符串 **\n```Python\nfrom pythonds.basic.stack import Stack\n\nrStack = Stack()\n\ndef toStr(n,base):\n    convertString = \"0123456789ABCDEF\"\n    while n > 0:\n        if n < base:\n            rStack.push(convertString[n])\n        else:\n            rStack.push(convertString[n % base])\n        n = n // base\n    res = \"\"\n    while not rStack.isEmpty():\n        res = res + str(rStack.pop())\n    return res\n\nprint(toStr(1453,16))\n\n```\n每一次调用toStr，都将一个字符放入栈中。就前一个例子来说，可以发现在第4次调用后，得到的栈如图5所示。注意，现在可以直接将字符从栈中推出，再将他们链接为最后的结果\"1010\"即可。\n\n![../_images/recstack.png](http://interactivepython.org/courselib/static/pythonds/_images/recstack.png)\n\n此例说明了Python是如何实现递归函数调用的。在Python中，调用一个函数时，系统会分配一个栈桢用来处理该函数中的局部变量。当函数执行完毕，返回值被放入栈顶等待被调用的函数处理。如图6所示。\n\n![../_images/newcallstack.png](http://interactivepython.org/courselib/static/pythonds/_images/newcallstack.png)\n\n注意对toStr(2//2, 2)的调用在栈中返回了值“1”。该返回值在表达式“1” + convertString[2%2]用来取代函数调用toStr(1,2)，执行后得到的结果“10”又被放在栈顶。这样一来，Python的调用栈取代了代码4中所使用的栈。在该例子中，读者可以认为栈顶的返回值替代了累加变量的作用。\n\n栈桢也为对应函数使用的变量规定了作用域。虽然多次调用同一个函数，每一次调用都为函数的局部变量创建一个新的作用域。\n\n## 4.7 图示递归 ##\n\n在上一节中介绍了一些使用递归算法可以轻松解决的问题，然而很难给出递归函数运行的可视化方法或者思维导图，这就使得递归算法不是那么容易掌握的。本节将研究一些递归的例子并画出示意图。通过研究这些示意图的形成过程，便会对递归过程有更加深刻的理解。\n\n这里使用Python的海龟图像模块turtle进行可视化。turtle模块是所有Python版本的标配并且很容易上手，其符号也很简单。创建一只海龟，该海龟可以前进/后退/左转/右转等，并且可以控制尾巴的抬起和放下。当海龟的尾巴放下且在移动时，便会绘制出线。为了提高观赏性，可以改变海龟尾巴的宽度以及画笔的颜色。\n\n下面简单说明turtle作图的基础，这里会利用turtle绘制一个螺旋线。如可执行代码所示。引入turtle模块后，创建一个turtle实例。当turtle生成后，为其创建一个窗口用来绘图。接下来定义drawSpiral函数。该函数的约束条件是待画线的长度（以len参数表示）减少到小于或等于0。若长度仍大于0，则命令海龟前进len单位然后右转90度。通过再次调用drawSpiral并且传入减小后的长度实现递归。在可执行代码1的最后，调用了函数myWin.exitonclick()，这是窗口的一个很便利的方法，它将海龟置于待机状态直到在窗口内发生点击操作，然后页面才清空并退出。\n\n**可执行代码1：使用海龟绘制递归螺旋线**\n```Python\nimport turtle\n\nmyTurtle = turtle.Turtle()\nmyWin = turtle.Screen()\n\ndef drawSpiral(myTurtle, lineLen):\n    if lineLen > 0:\n        myTurtle.forward(lineLen)\n        myTurtle.right(90)\n        drawSpiral(myTurtle,lineLen-5)\n\ndrawSpiral(myTurtle,100)\nmyWin.exitonclick()\n```\n\n这就是海龟模块中所需要了解的一些基本知识，据此便可以绘制漂亮的团了。下一个程序将绘制一个分形树。分形是数学的一个分支，它与递归有许多相似点。对于某个图形，无论放大多少倍，其基本形状都是一致的，此时便称之为**分形**。很多自然现象具有分形特点，比如海岸线，雪花，山脉，树以及灌木等，这使得CG（Computer Generated）电影具有了可行性。接下来的例子中将绘制一颗分形树。\n\n为了画出这棵树，考虑如何用分形思想来描述一棵树是很有用的。回想一下，分形就是无论放大多少倍都具有相似性的东西。将这种思想用来研究树或者灌木，可以发现即使是小树枝也具有与整棵树一致的形状和特点。据此可以将树定义为一个左右分叉，且左右各有一个更小的“树”（分叉）。引入递归的概念，那么树便是这些递归的小树构成的。\n\n现在将上述思路转换为Python代码。代码1利用海龟来绘制了一颗分形树。可以发现，行5和行7进行了递归调用。行5在右转20度后进行了递归调用，这便是前文提到的右分叉；在行7，海龟在左转40度后进行了另一次递归调用，这即为左分叉。此外，注意到每次调用tree后，都对branchlen参数进行了减法运算，这保证了递归树是越来越小的。读者应该",[[1525401221727,["Re@Re.local",[[1,6369,"ye"]],[6367,6369],[6371,6371]]],[1525401222342,["Re@Re.local",[[-1,6369,"ye"]],[6371,6371],[6369,6369]]],[1525401239255,["Re@Re.local",[[1,6369,"也意识到了开始的"]],[6369,6369],[6377,6377]]],[1525401242496,["Re@Re.local",[[-1,6370,"意识到了开始的"]],[6377,6377],[6370,6370]]],[1525401246207,["Re@Re.local",[[1,6370,"注意到"]],[6370,6370],[6373,6373]]],[1525401270741,["Re@Re.local",[[1,6374,"行2的**if**语句是brachLen比啊"]],[6374,6374],[6396,6396]]],[1525401273515,["Re@Re.local",[[-1,6386,"brachLen比啊"]],[6396,6396],[6386,6386]]],[1525401278539,["Re@Re.local",[[1,6386,"防止branch"]],[6386,6386],[6394,6394]]],[1525401281431,["Re@Re.local",[[-1,6386,"防止branch"]],[6394,6394],[6386,6386]]],[1525401286696,["Re@Re.local",[[1,6386,"一个越苏"]],[6386,6386],[6390,6390]]],[1525401287415,["Re@Re.local",[[-1,6386,"一个越苏"]],[6390,6390],[6386,6386]]],[1525401288842,["Re@Re.local",[[1,6386,"用啦"]],[6386,6386],[6388,6388]]],[1525401292048,["Re@Re.local",[[-1,6385,"是用啦"]],[6388,6388],[6385,6385]]],[1525401299584,["Re@Re.local",[[1,6385,"即是约束条件，防止"]],[6385,6385],[6394,6394]]],[1525401300026,["Re@Re.local",[[-1,6392,"防止"]],[6394,6394],[6392,6392]]],[1525401307642,["Re@Re.local",[[1,6392,"在branchLen过小"]],[6392,6392],[6404,6404]]],[1525401370563,[null,[[1,6373,"了"],[-1,6384,"是"]],[6373,6373],[6384,6384]]],[1525401370563,[null,[[-1,6373,"了"],[1,6385,"是"]],[6384,6384],[6373,6373]]],[1525401309280,["Re@Re.local",[[1,6404,"时出发。"]],[6404,6404],[6408,6408]]],[1525401310188,["Re@Re.local",[[-1,6405,"出发。"]],[6408,6408],[6405,6405]]],[1525401311598,["Re@Re.local",[[1,6405,"触发/"]],[6405,6405],[6408,6408]]],[1525401312081,["Re@Re.local",[[-1,6407,"/"]],[6408,6408],[6407,6407]]],[1525401312406,["Re@Re.local",[[1,6407,"。"]],[6407,6407],[6408,6408]]],[1525401312656,["Re@Re.local",[[1,6408,"\n\n"]],[6408,6408],[6409,6409]]],[1525401312868,["Re@Re.local",[[1,6410,"\n"]],[6409,6409],[6410,6410]]],[1525401880992,[null,[[1,6373,"了"],[-1,6384,"是"]],[6373,6373],[6384,6384]]],[1525401880992,[null,[[-1,6373,"了"],[1,6385,"是"]],[6384,6384],[6373,6373]]],[1525401867438,["Re@Re.local",[[1,6411,"\n"]],[6408,6408],[6409,6409]]],[1525401867638,["Re@Re.local",[[1,6412,"\n"]],[6409,6409],[6410,6410]]],[1525401874210,["Re@Re.local",[[1,6410,"**代码1**"]],[6410,6410],[6417,6417]]],[1525401874500,["Re@Re.local",[[1,6420,"\n"]],[6417,6417],[6418,6418]]],[1525401877622,["Re@Re.local",[[1,6418,"```Python"]],[6418,6418],[6427,6427]]],[1525401877850,["Re@Re.local",[[1,6430,"\n"]],[6427,6427],[6428,6428]]],[1525401940972,[null,[[1,6373,"了"],[-1,6384,"是"]],[6373,6373],[6384,6384]]],[1525401940973,[null,[[-1,6373,"了"],[1,6385,"是"]],[6384,6384],[6373,6373]]],[1525401888356,["Re@Re.local",[[1,6428,"def tree(branchLen,t):\n    if branchLen > 5:\n        t.forward(branchLen)\n        t.right(20)\n        tree(branchLen-15,t)\n        t.left(40)\n        tree(branchLen-10,t)\n        t.right(20)\n        t.backward(branchLen)```````"]],[6428,6428],[6655,6655]]],[1525401890753,["Re@Re.local",[[-1,6648,"```````"]],[6655,6655],[6648,6648]]],[1525401891185,["Re@Re.local",[[1,6651,"\n"]],[6648,6648],[6649,6649]]],[1525401891764,["Re@Re.local",[[-1,6651,"\n"]],[6649,6649],[6648,6648]]],[1525401892198,["Re@Re.local",[[-1,6647,")"]],[6648,6648],[6647,6647]]],[1525401895736,["Re@Re.local",[[1,6647,")```"]],[6647,6647],[6651,6651]]],[1525401898708,["Re@Re.local",[[1,6648,"\n"]],[6648,6648],[6649,6649]]],[1525402000984,[null,[[1,6373,"了"],[-1,6384,"是"]],[6373,6373],[6384,6384]]],[1525402000984,[null,[[-1,6373,"了"],[1,6385,"是"]],[6384,6384],[6373,6373]]],[1525401949333,["Re@Re.local",[[1,6653,"wa"]],[6653,6653],[6655,6655]]],[1525401949963,["Re@Re.local",[[-1,6653,"wa"]],[6655,6655],[6653,6653]]],[1525401953478,["Re@Re.local",[[1,6653,"分叉书"]],[6653,6653],[6656,6656]]],[1525401953987,["Re@Re.local",[[-1,6653,"分叉书"]],[6656,6656],[6653,6653]]],[1525401957690,["Re@Re.local",[[1,6653,"完整的代码入"]],[6653,6653],[6659,6659]]],[1525401958080,["Re@Re.local",[[-1,6658,"入"]],[6659,6659],[6658,6658]]],[1525401959047,["Re@Re.local",[[1,6658,"如"]],[6658,6658],[6659,6659]]],[1525401959604,["Re@Re.local",[[-1,6658,"如"]],[6659,6659],[6658,6658]]],[1525401964219,["Re@Re.local",[[1,6658,"如可执行代码2琐事。"]],[6658,6658],[6668,6668]]],[1525401964976,["Re@Re.local",[[-1,6665,"琐事。"]],[6668,6668],[6665,6665]]],[1525402000823,["Re@Re.local",[[1,6665,"所示。在运行代码"]],[6665,6665],[6673,6673]]],[1525402060985,[null,[[1,6373,"了"],[-1,6384,"是"]],[6373,6373],[6384,6384]]],[1525402060985,[null,[[-1,6373,"了"],[1,6385,"是"]],[6384,6384],[6373,6373]]],[1525402002228,["Re@Re.local",[[1,6673,"钱"]],[6673,6673],[6674,6674]]],[1525402002480,["Re@Re.local",[[-1,6673,"钱"]],[6674,6674],[6673,6673]]],[1525402057293,["Re@Re.local",[[1,6673,"前，思考一下是fan"]],[6673,6673],[6683,6683]]],[1525402058186,["Re@Re.local",[[-1,6680,"fan"]],[6683,6683],[6680,6680]]],[1525402120987,[null,[[1,6373,"了"],[-1,6384,"是"]],[6373,6373],[6384,6384]]],[1525402120987,[null,[[-1,6373,"了"],[1,6385,"是"]],[6384,6384],[6373,6373]]],[1525402063779,["Re@Re.local",[[1,6680,"分叉树是如何形成的"]],[6680,6680],[6689,6689]]],[1525402066715,["Re@Re.local",[[-1,6686,"形成的"]],[6689,6689],[6686,6686]]],[1525402068329,["Re@Re.local",[[1,6686,"绘制的。"]],[6686,6686],[6690,6690]]],[1525402180993,[null,[[1,6373,"了"],[-1,6384,"是"]],[6373,6373],[6384,6384]]],[1525402180993,[null,[[-1,6373,"了"],[1,6385,"是"]],[6384,6384],[6373,6373]]],[1525402144768,["Re@Re.local",[[1,6690,"这些递归调用"]],[6690,6690],[6696,6696]]],[1525402151876,["Re@Re.local",[[-1,6689,"。"]],[6690,6690],[6689,6689]]],[1525402156513,["Re@Re.local",[[1,6689,"，以及"]],[6689,6689],[6692,6692]]],[1525402162563,["Re@Re.local",[[-1,6689,"，以及这些递归调用"]],[6698,6698],[6689,6689]]],[1525402168127,["Re@Re.local",[[1,6689,"。仔细观察这些"]],[6689,6689],[6696,6696]]],[1525402241014,[null,[[1,6373,"了"],[-1,6384,"是"]],[6373,6373],[6384,6384]]],[1525402241014,[null,[[-1,6373,"了"],[1,6385,"是"]],[6384,6384],[6373,6373]]],[1525402215761,["Re@Re.local",[[1,6696,"调用，"]],[6696,6696],[6699,6699]]],[1525402224891,["Re@Re.local",[[-1,6698,"，"]],[6699,6699],[6698,6698]]],[1525402225793,["Re@Re.local",[[1,6698,"，"]],[6698,6698],[6699,6699]]],[1525402301001,[null,[[1,6373,"了"],[-1,6384,"是"]],[6373,6373],[6384,6384]]],[1525402301001,[null,[[-1,6373,"了"],[1,6385,"是"]],[6384,6384],[6373,6373]]],[1525402265347,["Re@Re.local",[[1,6699,"研究"]],[6699,6699],[6701,6701]]],[1525402265643,["Re@Re.local",[[-1,6699,"研究"]],[6701,6701],[6699,6699]]],[1525402268921,["Re@Re.local",[[1,6699,"想想树"]],[6699,6699],[6702,6702]]],[1525402269019,["Re@Re.local",[[-1,6701,"树"]],[6702,6702],[6701,6701]]],[1525402299678,["Re@Re.local",[[1,6701,"分叉树是如何展开的。它是同时对称地绘制左右分叉还是先"]],[6701,6701],[6727,6727]]],[1525402361008,[null,[[1,6373,"了"],[-1,6384,"是"]],[6373,6373],[6384,6384]]],[1525402361008,[null,[[-1,6373,"了"],[1,6385,"是"]],[6384,6384],[6373,6373]]],[1525402305092,["Re@Re.local",[[1,6727,"右再左？"]],[6727,6727],[6731,6731]]],[1525402358446,["Re@Re.local",[[1,6733,"\n"]],[6731,6731],[6732,6732]]],[1525402358646,["Re@Re.local",[[1,6734,"\n"]],[6732,6732],[6733,6733]]],[1525402421009,[null,[[1,6373,"了"],[-1,6384,"是"]],[6373,6373],[6384,6384]]],[1525402421009,[null,[[-1,6373,"了"],[1,6385,"是"]],[6384,6384],[6373,6373]]],[1525402382827,["Re@Re.local",[[1,6733,"**可执行代码2:递归绘制分叉树**"]],[6733,6733],[6751,6751]]],[1525402383162,["Re@Re.local",[[1,6753,"\n"]],[6751,6751],[6752,6752]]],[1525402384288,["Re@Re.local",[[1,6752,"···"]],[6752,6752],[6755,6755]]],[1525402384979,["Re@Re.local",[[-1,6752,"···"]],[6755,6755],[6752,6752]]],[1525402387262,["Re@Re.local",[[1,6752,"```Python"]],[6752,6752],[6761,6761]]],[1525402387537,["Re@Re.local",[[1,6763,"\n"]],[6761,6761],[6762,6762]]],[1525402388648,["Re@Re.local",[[1,6762,"def tree(branchLen,t):\n    if branchLen > 5:\n        t.forward(branchLen)\n        t.right(20)\n        tree(branchLen-15,t)\n        t.left(40)\n        tree(branchLen-15,t)\n        t.right(20)\n        t.backward(branchLen)\n\ndef main():\n    t = turtle.Turtle()\n    myWin = turtle.Screen()\n    t.left(90)\n    t.up()\n    t.backward(100)\n    t.down()\n    t.color(\"green\")\n    tree(75,t)\n    myWin.exitonclick()\n\nmain()"]],[6762,6762],[7174,7174]]],[1525402391743,["Re@Re.local",[[1,7176,"\n"]],[7174,7174],[7175,7175]]],[1525402392471,["Re@Re.local",[[1,7175,"```"]],[7175,7175],[7178,7178]]],[1525402399621,["Re@Re.local",[[1,7180,"\n"]],[7178,7178],[7179,7179]]],[1525402481015,[null,[[1,6373,"了"],[-1,6384,"是"]],[6373,6373],[6384,6384]]],[1525402481015,[null,[[-1,6373,"了"],[1,6385,"是"]],[6384,6384],[6373,6373]]],[1525402439520,["Re@Re.local",[[1,7179,"zhuy"]],[7179,7179],[7183,7183]]],[1525402440299,["Re@Re.local",[[-1,7179,"zhuy"]],[7183,7183],[7179,7179]]],[1525402441287,["Re@Re.local",[[1,7179,"注意"]],[7179,7179],[7181,7181]]],[1525402541025,[null,[[1,6373,"了"],[-1,6384,"是"]],[6373,6373],[6384,6384]]],[1525402541025,[null,[[-1,6373,"了"],[1,6385,"是"]],[6384,6384],[6373,6373]]],[1525402511537,["Re@Re.local",[[1,7181,"分叉树上的每一个分叉点如何"]],[7181,7181],[7194,7194]]],[1525402512693,["Re@Re.local",[[-1,7192,"如何"]],[7194,7194],[7192,7192]]],[1525402538254,["Re@Re.local",[[1,7192,"是如何对一次递归调用对树"]],[7192,7192],[7204,7204]]],[1525402539665,["Re@Re.local",[[-1,7202,"对树"]],[7204,7204],[7202,7202]]],[1525402601028,[null,[[1,6373,"了"],[-1,6384,"是"]],[6373,6373],[6384,6384]]],[1525402601028,[null,[[-1,6373,"了"],[1,6385,"是"]],[6384,6384],[6373,6373]]],[1525402553022,["Re@Re.local",[[-1,7195,"对"]],[7196,7196],[7195,7195]]],[1525402554508,["Re@Re.local",[[1,7195,"相应"]],[7195,7195],[7197,7197]]],[1525402556324,["Re@Re.local",[[-1,7197,"一次"]],[7199,7199],[7197,7197]]],[1525402561287,["Re@Re.local",[[1,7201,"对，"]],[7201,7201],[7203,7203]]],[1525402562022,["Re@Re.local",[[-1,7201,"对，"]],[7203,7203],[7201,7201]]],[1525402579785,["Re@Re.local",[[1,7201,"，以及分叉树"]],[7201,7201],[7207,7207]]],[1525402661053,[null,[[1,6373,"了"],[-1,6384,"是"]],[6373,6373],[6384,6384]]],[1525402661053,[null,[[-1,6373,"了"],[1,6385,"是"]],[6384,6384],[6373,6373]]],[1525402650955,["Re@Re.local",[[1,7207,"是如何一路炒"]],[7207,7207],[7213,7213]]],[1525402651529,["Re@Re.local",[[-1,7210,"一路炒"]],[7213,7213],[7210,7210]]],[1525402660441,["Re@Re.local",[[1,7210,"一路朝右绘制到最后的"]],[7210,7210],[7220,7220]]],[1525402721036,[null,[[1,6373,"了"],[-1,6384,"是"]],[6373,6373],[6384,6384]]],[1525402721036,[null,[[-1,6373,"了"],[1,6385,"是"]],[6384,6384],[6373,6373]]],[1525402661440,["Re@Re.local",[[-1,7218,"后的"]],[7220,7220],[7218,7218]]],[1525402668658,["Re@Re.local",[[1,7218,"短的那个分之"]],[7218,7218],[7224,7224]]],[1525402669318,["Re@Re.local",[[-1,7222,"分之"]],[7224,7224],[7222,7222]]],[1525402678609,["Re@Re.local",[[1,7222,"分支的。如土1所示"]],[7222,7222],[7231,7231]]],[1525402680217,["Re@Re.local",[[-1,7227,"土1所示"]],[7231,7231],[7227,7227]]],[1525402683329,["Re@Re.local",[[1,7227,"图1所示，"]],[7227,7227],[7232,7232]]],[1525402685836,["Re@Re.local",[[-1,7231,"，"]],[7232,7232],[7231,7231]]],[1525402686723,["Re@Re.local",[[1,7231,"。"]],[7231,7231],[7232,7232]]],[1525402781040,[null,[[1,6373,"了"],[-1,6384,"是"]],[6373,6373],[6384,6384]]],[1525402781040,[null,[[-1,6373,"了"],[1,6385,"是"]],[6384,6384],[6373,6373]]],[1525402770380,["Re@Re.local",[[1,7232,"现在，仔细观察，程序"]],[7232,7232],[7242,7242]]],[1525402961064,[null,[[1,6373,"了"],[-1,6384,"是"]],[6373,6373],[6384,6384]]],[1525402961064,[null,[[-1,6373,"了"],[1,6385,"是"]],[6384,6384],[6373,6373]]],[1525402911040,["Re@Re.local",[[1,7242,"是如"]],[7242,7242],[7244,7244]]],[1525402912219,["Re@Re.local",[[-1,7242,"是如"]],[7244,7244],[7242,7242]]],[1525402918097,["Re@Re.local",[[1,7242,"是在"]],[7242,7242],[7244,7244]]],[1525402918543,["Re@Re.local",[[-1,7243,"在"]],[7244,7244],[7243,7243]]],[1525402936517,["Re@Re.local",[[1,7243,"在整个树的右侧绘制完成后在"]],[7243,7243],[7256,7256]]],[1525402936876,["Re@Re.local",[[-1,7255,"在"]],[7256,7256],[7255,7255]]],[1525402947302,["Re@Re.local",[[1,7255,"再沿着"]],[7255,7255],[7258,7258]]],[1525403021050,[null,[[1,6373,"了"],[-1,6384,"是"]],[6373,6373],[6384,6384]]],[1525403021050,[null,[[-1,6373,"了"],[1,6385,"是"]],[6384,6384],[6373,6373]]],[1525402982094,["Re@Re.local",[[1,7258,"树干"]],[7258,7258],[7260,7260]]],[1525402982975,["Re@Re.local",[[-1,7258,"树干"]],[7260,7260],[7258,7258]]],[1525402985675,["Re@Re.local",[[1,7258,"分叉返回"]],[7258,7258],[7262,7262]]],[1525403017262,["Re@Re.local",[[-1,7228,"1"]],[7229,7229],[7228,7228]]],[1525403017489,["Re@Re.local",[[1,7228,"2"]],[7228,7228],[7229,7229]]],[1525403081056,[null,[[1,6373,"了"],[-1,6384,"是"]],[6373,6373],[6384,6384]]],[1525403081057,[null,[[-1,6373,"了"],[1,6385,"是"]],[6384,6384],[6373,6373]]],[1525403054047,["Re@Re.local",[[1,7262,"."]],[7262,7262],[7263,7263]]],[1525403055491,["Re@Re.local",[[-1,7262,"."]],[7263,7263],[7262,7262]]],[1525403058562,["Re@Re.local",[[1,7262,"，这搬"]],[7262,7262],[7265,7265]]],[1525403059575,["Re@Re.local",[[-1,7263,"这搬"]],[7265,7265],[7263,7263]]],[1525403062785,["Re@Re.local",[[1,7263,"分叉树的半侧"]],[7263,7263],[7269,7269]]],[1525403064359,["Re@Re.local",[[-1,7267,"半侧"]],[7269,7269],[7267,7267]]],[1525403076262,["Re@Re.local",[[1,7267,"右半侧如图1所示。接下来，树"]],[7267,7267],[7281,7281]]],[1525403078910,["Re@Re.local",[[-1,7279,"，树"]],[7281,7281],[7279,7279]]],[1525403080460,["Re@Re.local",[[1,7279,"将绘制"]],[7279,7279],[7282,7282]]],[1525403141061,[null,[[1,6373,"了"],[-1,6384,"是"]],[6373,6373],[6384,6384]]],[1525403141061,[null,[[-1,6373,"了"],[1,6385,"是"]],[6384,6384],[6373,6373]]],[1525403083241,["Re@Re.local",[[1,7282,"树的左侧。"]],[7282,7282],[7287,7287]]],[1525403104696,["Re@Re.local",[[-1,7286,"。"]],[7287,7287],[7286,7286]]],[1525403138958,["Re@Re.local",[[1,7286,"，然而并不是直接画出最大的左侧，而是先画出"]],[7286,7286],[7307,7307]]],[1525403202157,[null,[[1,6373,"了"],[-1,6384,"是"]],[6373,6373],[6384,6384]]],[1525403202157,[null,[[-1,6373,"了"],[1,6385,"是"]],[6384,6384],[6373,6373]]],[1525403148933,["Re@Re.local",[[1,7307,"小枝的最有"]],[7307,7307],[7312,7312]]],[1525403149314,["Re@Re.local",[[-1,7310,"最有"]],[7312,7312],[7310,7310]]],[1525403151251,["Re@Re.local",[[1,7310,"右侧"]],[7310,7310],[7312,7312]]],[1525403163059,["Re@Re.local",[[-1,7304,"先画出小枝的右侧"]],[7312,7312],[7304,7304]]],[1525403167849,["Re@Re.local",[[1,7304,"在每次到达最短枝的"]],[7304,7304],[7313,7313]]],[1525403168256,["Re@Re.local",[[-1,7312,"的"]],[7313,7313],[7312,7312]]],[1525403187039,["Re@Re.local",[[1,7312,"前，先画出左分支的整个右半部分"]],[7312,7312],[7327,7327]]],[1525403454563,[null,[[1,6373,"了"],[-1,6384,"是"]],[6373,6373],[6384,6384]]],[1525403454563,[null,[[-1,6373,"了"],[1,6385,"是"]],[6384,6384],[6373,6373]]],[1525403453227,["Re@Re.local",[[1,7327,"，然后再返回画左半部分。"]],[7327,7327],[7339,7339]]],[1525403453801,["Re@Re.local",[[1,7341,"\n"]],[7339,7339],[7340,7340]]],[1525403454013,["Re@Re.local",[[1,7342,"\n"]],[7340,7340],[7341,7341]]],[1525403514537,[null,[[1,6373,"了"],[-1,6384,"是"]],[6373,6373],[6384,6384]]],[1525403514538,[null,[[-1,6373,"了"],[1,6385,"是"]],[6384,6384],[6373,6373]]],[1525403460052,["Re@Re.local",[[1,7341,"![../_images/tree1.png](http://interactivepython.org/courselib/static/pythonds/_images/tree1.png)"]],[7341,7341],[7438,7438]]],[1525403460936,["Re@Re.local",[[1,7440,"\n"]],[7438,7438],[7439,7439]]],[1525403461524,["Re@Re.local",[[1,7441,"\n"]],[7439,7439],[7440,7440]]],[1525403465724,["Re@Re.local",[[1,7440,"![../_images/tree2.png](http://interactivepython.org/courselib/static/pythonds/_images/tree2.png)"]],[7440,7440],[7537,7537]]],[1525403466233,["Re@Re.local",[[1,7539,"\n"]],[7537,7537],[7538,7538]]],[1525403466604,["Re@Re.local",[[1,7540,"\n"]],[7538,7538],[7539,7539]]],[1525403489361,["Re@Re.local",[[1,7539,"分形树只是一个起点，"]],[7539,7539],[7549,7549]]],[1525403496991,["Re@Re.local",[[-1,7548,"，"]],[7549,7549],[7548,7548]]],[1525403510114,["Re@Re.local",[[1,7548,"，此外，读者也应该注意到这棵树看起来并不是那么真是"]],[7548,7548],[7573,7573]]],[1525403510518,["Re@Re.local",[[-1,7571,"真是"]],[7573,7573],[7571,7571]]],[1525403513573,["Re@Re.local",[[1,7571,"真实，因为"]],[7571,7571],[7576,7576]]],[1525403574546,[null,[[1,6373,"了"],[-1,6384,"是"]],[6373,6373],[6384,6384]]],[1525403574546,[null,[[-1,6373,"了"],[1,6385,"是"]],[6384,6384],[6373,6373]]],[1525403538438,["Re@Re.local",[[1,7576,"自然界中并不会真的像计算机程序那样堆成。"]],[7576,7576],[7596,7596]]],[1525403539519,["Re@Re.local",[[-1,7593,"堆成。"]],[7596,7596],[7593,7593]]],[1525403547513,["Re@Re.local",[[1,7593,"具有高度对称性。"]],[7593,7593],[7601,7601]]],[1525403635263,[null,[[1,6373,"了"],[-1,6384,"是"]],[6373,6373],[6384,6384]]],[1525403635263,[null,[[-1,6373,"了"],[1,6385,"是"]],[6384,6384],[6373,6373]]],[1525403612232,["Re@Re.local",[[1,7601,"贲张的"]],[7601,7601],[7604,7604]]],[1525403612828,["Re@Re.local",[[-1,7601,"贲张的"]],[7604,7604],[7601,7601]]],[1525403626140,["Re@Re.local",[[1,7601,"本章的最后将会介绍一些有趣的选项，可以使得"]],[7601,7601],[7622,7622]]],[1525404306179,[null,[[1,6373,"了"],[-1,6384,"是"]],[6373,6373],[6384,6384]]],[1525404306179,[null,[[-1,6373,"了"],[1,6385,"是"]],[6384,6384],[6373,6373]]],[1525404272728,["Re@Re.local",[[1,7622,"分叉树看起来更真实。"]],[7622,7622],[7632,7632]]],[1525404274632,["Re@Re.local",[[1,7634,"\n"]],[7632,7632],[7633,7633]]],[1525404274822,["Re@Re.local",[[1,7635,"\n"]],[7633,7633],[7634,7634]]],[1525416146124,[null,[[1,6373,"了"],[-1,6384,"是"]],[6373,6373],[6384,6384]]],[1525416146124,[null,[[-1,6373,"了"],[1,6385,"是"]],[6384,6384],[6373,6373]]],[1525416110029,["Re@Re.local",[[1,7634,"## 4.8 xie"]],[7634,7634],[7644,7644]]],[1525416110634,["Re@Re.local",[[-1,7641,"xie"]],[7644,7644],[7641,7641]]],[1525416118606,["Re@Re.local",[[1,7641,"谢尔宾斯基本"]],[7641,7641],[7647,7647]]],[1525416119085,["Re@Re.local",[[-1,7646,"本"]],[7647,7647],[7646,7646]]],[1525416119872,["Re@Re.local",[[1,7646," "]],[7646,7646],[7647,7647]]],[1525416120213,["Re@Re.local",[[-1,7646," "]],[7647,7647],[7646,7646]]],[1525416122852,["Re@Re.local",[[1,7646,"三角形 ##"]],[7646,7646],[7652,7652]]],[1525416123040,["Re@Re.local",[[1,7654,"\n"]],[7652,7652],[7653,7653]]],[1525416123308,["Re@Re.local",[[1,7655,"\n"]],[7653,7653],[7654,7654]]],[1525416266135,[null,[[1,6373,"了"],[-1,6384,"是"]],[6373,6373],[6384,6384]]],[1525416266135,[null,[[-1,6373,"了"],[1,6385,"是"]],[6384,6384],[6373,6373]]],[1525416241022,["Re@Re.local",[[1,7654,"谢尔宾斯基三角形也是一种展示"]],[7654,7654],[7668,7668]]],[1525416241579,["Re@Re.local",[[-1,7666,"展示"]],[7668,7668],[7666,7666]]],[1525416247022,["Re@Re.local",[[1,7666,"具有自我相似性"]],[7666,7666],[7673,7673]]],[1525416248330,["Re@Re.local",[[-1,7669,"我"]],[7670,7670],[7669,7669]]],[1525416253143,["Re@Re.local",[[1,7672,"的分形图形。"]],[7672,7672],[7678,7678]]],[1525416257693,["Re@Re.local",[[-1,7677,"。"]],[7678,7678],[7677,7677]]],[1525416258616,["Re@Re.local",[[1,7677,"，如同"]],[7677,7677],[7680,7680]]],[1525416259085,["Re@Re.local",[[-1,7679,"同"]],[7680,7680],[7679,7679]]],[1525416265932,["Re@Re.local",[[1,7679,"图三所示。谢尔宾斯基"]],[7679,7679],[7689,7689]]],[1525416326132,[null,[[1,6373,"了"],[-1,6384,"是"]],[6373,6373],[6384,6384]]],[1525416326132,[null,[[-1,6373,"了"],[1,6385,"是"]],[6384,6384],[6373,6373]]],[1525416280151,["Re@Re.local",[[1,7689,"三角形是一种三香"]],[7689,7689],[7697,7697]]],[1525416280682,["Re@Re.local",[[-1,7696,"香"]],[7697,7697],[7696,7696]]],[1525416321335,["Re@Re.local",[[1,7696,"向递归算法。手绘谢尔宾斯基三角形的方法很简单。从某个大的三角形"]],[7696,7696],[7727,7727]]],[1525416322889,["Re@Re.local",[[-1,7723,"的三角形"]],[7727,7727],[7723,7723]]],[1525416325784,["Re@Re.local",[[1,7723,"的三角形开始，"]],[7723,7723],[7730,7730]]],[1525416386124,[null,[[1,6373,"了"],[-1,6384,"是"]],[6373,6373],[6384,6384]]],[1525416386124,[null,[[-1,6373,"了"],[1,6385,"是"]],[6384,6384],[6373,6373]]],[1525416334629,["Re@Re.local",[[1,7730,"将这个大三角形氛围"]],[7730,7730],[7739,7739]]],[1525416335173,["Re@Re.local",[[-1,7737,"氛围"]],[7739,7739],[7737,7737]]],[1525416337659,["Re@Re.local",[[1,7737,"分为"]],[7737,7737],[7739,7739]]],[1525417106170,[null,[[1,6373,"了"],[-1,6384,"是"]],[6373,6373],[6384,6384]]],[1525417106170,[null,[[-1,6373,"了"],[1,6385,"是"]],[6384,6384],[6373,6373]]],[1525417091950,["Re@Re.local",[[1,7739,"4ge"]],[7739,7739],[7742,7742]]],[1525417092604,["Re@Re.local",[[-1,7740,"ge"]],[7742,7742],[7740,7740]]],[1525417094376,["Re@Re.local",[[1,7740,"个新"]],[7740,7740],[7742,7742]]],[1525417094516,["Re@Re.local",[[-1,7741,"新"]],[7742,7742],[7741,7741]]],[1525417101066,["Re@Re.local",[[1,7741,"小的三角形："]],[7741,7741],[7747,7747]]],[1525417166156,[null,[[1,6373,"了"],[-1,6384,"是"]],[6373,6373],[6384,6384]]],[1525417166156,[null,[[-1,6373,"了"],[1,6385,"是"]],[6384,6384],[6373,6373]]],[1525417122333,["Re@Re.local",[[1,7747,"连接每条边的重点"]],[7747,7747],[7755,7755]]],[1525417125095,["Re@Re.local",[[-1,7753,"重点"]],[7755,7755],[7753,7753]]],[1525417138535,["Re@Re.local",[[1,7753,"中点。"]],[7753,7753],[7756,7756]]],[1525417139965,["Re@Re.local",[[-1,7755,"。"]],[7756,7756],[7755,7755]]],[1525417144282,["Re@Re.local",[[1,7755,"；除了"]],[7755,7755],[7758,7758]]],[1525417145043,["Re@Re.local",[[-1,7756,"除了"]],[7758,7758],[7756,7756]]],[1525417147305,["Re@Re.local",[[1,7756,"对除了"]],[7756,7756],[7759,7759]]],[1525417148157,["Re@Re.local",[[-1,7756,"对除了"]],[7759,7759],[7756,7756]]],[1525417165688,["Re@Re.local",[[1,7756,"剔除掉新的4个三角形中间的那个，对生育的"]],[7756,7756],[7776,7776]]],[1525417226169,[null,[[1,6373,"了"],[-1,6384,"是"]],[6373,6373],[6384,6384]]],[1525417226169,[null,[[-1,6373,"了"],[1,6385,"是"]],[6384,6384],[6373,6373]]],[1525417166507,["Re@Re.local",[[-1,7773,"生育"]],[7775,7775],[7773,7773]]],[1525417188314,["Re@Re.local",[[1,7773,"剩余的三个采取同样的步骤，"]],[7773,7773],[7786,7786]]],[1525417189374,["Re@Re.local",[[-1,7785,"，"]],[7786,7786],[7785,7785]]],[1525417201475,["Re@Re.local",[[1,7785,"；以此类推，不断递归循环。"]],[7785,7785],[7798,7798]]],[1525417208995,["Re@Re.local",[[-1,7797,"。"]],[7798,7798],[7797,7797]]],[1525417215544,["Re@Re.local",[[1,7797,"。如果笔足够吸"]],[7797,7797],[7804,7804]]],[1525417215686,["Re@Re.local",[[-1,7803,"吸"]],[7804,7804],[7803,7803]]],[1525417220863,["Re@Re.local",[[1,7803,"细的话，是可以吴"]],[7803,7803],[7811,7811]]],[1525417221083,["Re@Re.local",[[-1,7810,"吴"]],[7811,7811],[7810,7810]]],[1525417224927,["Re@Re.local",[[1,7810,"无穷"]],[7810,7810],[7812,7812]]],[1525417286169,[null,[[1,6373,"了"],[-1,6384,"是"],[-1,7812,"的"]],[6373,6373],[7812,7812]]],[1525417286169,[null,[[-1,6373,"了"],[1,6385,"是"],[1,7812,"的"]],[7812,7812],[6373,6373]]],[1525417242974,["Re@Re.local",[[1,7812,"地画下去的。"]],[7812,7812],[7818,7818]]],[1525417243381,["Re@Re.local",[[1,7820,"\n"]],[7818,7818],[7819,7819]]],[1525417243643,["Re@Re.local",[[1,7821,"\n"]],[7819,7819],[7820,7820]]],[1525417466248,[null,[[1,6373,"了"],[-1,6384,"是"],[-1,7818,"的"]],[6373,6373],[7818,7818]]],[1525417466248,[null,[[-1,6373,"了"],[1,6385,"是"],[1,7818,"的"]],[7818,7818],[6373,6373]]],[1525417431844,["Re@Re.local",[[1,7822,"\n"]],[7819,7819],[7820,7820]]],[1525417434088,["Re@Re.local",[[1,7819,"![../_images/sierpinski.png](http://interactivepython.org/courselib/static/pythonds/_images/sierpinski.png)"]],[7819,7819],[7926,7926]]],[1525417435736,["Re@Re.local",[[1,7930,"\n"]],[7926,7926],[7927,7927]]],[1525417437557,["Re@Re.local",[[1,7819,"\n"]],[7818,7818],[7819,7819]]],[1525417439071,["Re@Re.local",[[1,7932,"\n"]],[7928,7928],[7929,7929]]],[1525417452235,["Re@Re.local",[[1,7929,"因为要"]],[7929,7929],[7932,7932]]],[1525417456323,["Re@Re.local",[[-1,7929,"因为要"]],[7932,7932],[7929,7929]]],[1525417463493,["Re@Re.local",[[1,7929,"既然这个算法可以无限运行，拿"]],[7929,7929],[7943,7943]]],[1525417464506,["Re@Re.local",[[-1,7942,"拿"]],[7943,7943],[7942,7942]]],[1525417465248,["Re@Re.local",[[1,7942,"那"]],[7942,7942],[7943,7943]]],[1525417526184,[null,[[1,6373,"了"],[-1,6384,"是"],[-1,7818,"的"],[1,7819,"\n"],[-1,7943,"\n"]],[6373,6373],[7943,7943]]],[1525417526184,[null,[[-1,6373,"了"],[1,6385,"是"],[1,7818,"的"],[-1,7818,"\n"],[1,7943,"\n"]],[7943,7943],[6373,6373]]],[1525417512399,["Re@Re.local",[[1,7943,"就必须得找出约束条件。这里被随意地设置为了绘制三角形"]],[7943,7943],[7969,7969]]],[1525417516843,["Re@Re.local",[[-1,7964,"绘制三角形"]],[7969,7969],[7964,7964]]],[1525417519574,["Re@Re.local",[[1,7964,"划分次数"]],[7964,7964],[7968,7968]]],[1525417586186,[null,[[1,6373,"了"],[-1,6384,"是"],[-1,7818,"的"],[1,7819,"\n"],[-1,7968,"\n"]],[6373,6373],[7968,7968]]],[1525417586186,[null,[[-1,6373,"了"],[1,6385,"是"],[1,7818,"的"],[-1,7818,"\n"],[1,7968,"\n"]],[7968,7968],[6373,6373]]],[1525417527005,["Re@Re.local",[[1,7968,"。"]],[7968,7968],[7969,7969]]],[1525417530054,["Re@Re.local",[[-1,7957,"随意地"]],[7960,7960],[7957,7957]]],[1525417533154,["Re@Re.local",[[1,7961,"任意"]],[7961,7961],[7963,7963]]],[1525417536316,["Re@Re.local",[[1,7963,"d"]],[7968,7968],[7963,7964]]],[1525417536384,["Re@Re.local",[[-1,7963,"d"],[1,7964,"的"]],[7964,7964],[7964,7964]]],[1525417549361,["Re@Re.local",[[1,7969,"有时这杯"]],[7969,7969],[7973,7973]]],[1525417550885,["Re@Re.local",[[-1,7968,"。有时这杯"]],[7973,7973],[7968,7968]]],[1525417561629,["Re@Re.local",[[1,7968,"，有时这被称为想死"]],[7968,7968],[7977,7977]]],[1525417561936,["Re@Re.local",[[-1,7975,"想死"]],[7977,7977],[7975,7975]]],[1525417580227,["Re@Re.local",[[1,7975,"相似性维数。每次调用递归"]],[7975,7975],[7987,7987]]],[1525417581962,["Re@Re.local",[[-1,7983,"调用递归"]],[7987,7987],[7983,7983]]],[1525417585830,["Re@Re.local",[[1,7983,"进行递归调用，就"]],[7983,7983],[7991,7991]]],[1525417646187,[null,[[1,6373,"了"],[-1,6384,"是"],[-1,7818,"的"],[1,7819,"\n"],[-1,7991,"\n"]],[6373,6373],[7991,7991]]],[1525417646187,[null,[[-1,6373,"了"],[1,6385,"是"],[1,7818,"的"],[-1,7818,"\n"],[1,7991,"\n"]],[7991,7991],[6373,6373]]],[1525417595477,["Re@Re.local",[[1,7991,"将维数减1知道为"]],[7991,7991],[7999,7999]]],[1525417595900,["Re@Re.local",[[-1,7996,"知道为"]],[7999,7999],[7996,7996]]],[1525417598404,["Re@Re.local",[[1,7996,"直到为0."]],[7996,7996],[8001,8001]]],[1525417605010,["Re@Re.local",[[-1,8000,"."]],[8001,8001],[8000,8000]]],[1525417605520,["Re@Re.local",[[1,8000,"."]],[8000,8000],[8001,8001]]],[1525417605947,["Re@Re.local",[[-1,8000,"."]],[8001,8001],[8000,8000]]],[1525417611465,["Re@Re.local",[[1,8000,"。代码如可执行代码1所示。"]],[8000,8000],[8013,8013]]],[1525417611736,["Re@Re.local",[[1,8017,"\n"]],[8013,8013],[8014,8014]]],[1525417611940,["Re@Re.local",[[1,8018,"\n"]],[8014,8014],[8015,8015]]],[1525417619109,["Re@Re.local",[[1,8015,"**可执行代码1:"]],[8015,8015],[8024,8024]]],[1525417620786,["Re@Re.local",[[1,8014,"绘制"]],[8014,8014],[8016,8016]]],[1525417621410,["Re@Re.local",[[-1,8014,"绘制"]],[8016,8016],[8014,8014]]],[1525417628345,["Re@Re.local",[[1,8024,"绘制谢尔宾斯基三角形 "]],[8024,8024],[8035,8035]]],[1525417628825,["Re@Re.local",[[-1,8034," "]],[8035,8035],[8034,8034]]],[1525417629534,["Re@Re.local",[[1,8034,"**"]],[8034,8034],[8036,8036]]],[1525417629741,["Re@Re.local",[[1,8040,"\n"]],[8036,8036],[8037,8037]]],[1525417631115,["Re@Re.local",[[1,8037,"\t\t"]],[8037,8037],[8039,8039]]],[1525417631760,["Re@Re.local",[[-1,8037,"\t\t"]],[8039,8039],[8037,8037]]],[1525417634207,["Re@Re.local",[[1,8037,"```Python"]],[8037,8037],[8046,8046]]],[1525417706204,[null,[[1,6373,"了"],[-1,6384,"是"],[-1,7818,"的"],[1,7819,"\n"],[-1,8046,"\n"]],[6373,6373],[8046,8046]]],[1525417706204,[null,[[-1,6373,"了"],[1,6385,"是"],[1,7818,"的"],[-1,7818,"\n"],[1,8046,"\n"]],[8046,8046],[6373,6373]]],[1525417648555,["Re@Re.local",[[1,8050,"\n"]],[8046,8046],[8047,8047]]],[1525417665197,["Re@Re.local",[[1,8047,"import turtle\n\ndef drawTriangle(points,color,myTurtle):\n    myTurtle.fillcolor(color)\n    myTurtle.up()\n    myTurtle.goto(points[0][0],points[0][1])\n    myTurtle.down()\n    myTurtle.begin_fill()\n    myTurtle.goto(points[1][0],points[1][1])\n    myTurtle.goto(points[2][0],points[2][1])\n    myTurtle.goto(points[0][0],points[0][1])\n    myTurtle.end_fill()\n\ndef getMid(p1,p2):\n    return ( (p1[0]+p2[0]) / 2, (p1[1] + p2[1]) / 2)\n\ndef sierpinski(points,degree,myTurtle):\n    colormap = ['blue','red','green','white','yellow',\n                'violet','orange']\n    drawTriangle(points,colormap[degree],myTurtle)\n    if degree > 0:\n        sierpinski([points[0],\n                        getMid(points[0], points[1]),\n                        getMid(points[0], points[2])],\n                   degree-1, myTurtle)\n        sierpinski([points[1],\n                        getMid(points[0], points[1]),\n                        getMid(points[1], points[2])],\n                   degree-1, myTurtle)\n        sierpinski([points[2],\n                        getMid(points[2], points[1]),\n                        getMid(points[0], points[2])],\n                   degree-1, myTurtle)\n\ndef main():\n   myTurtle = turtle.Turtle()\n   myWin = turtle.Screen()\n   myPoints = [[-100,-50],[0,100],[100,-50]]\n   sierpinski(myPoints,3,myTurtle)\n   myWin.exitonclick()\n\nmain()\n"]],[8047,8047],[9393,9393]]],[1525417665891,["Re@Re.local",[[1,9397,"\n"]],[9393,9393],[9394,9394]]],[1525417666775,["Re@Re.local",[[-1,9397,"\n"]],[9394,9394],[9393,9393]]],[1525417667755,["Re@Re.local",[[1,9393,"```"]],[9393,9393],[9396,9396]]],[1525417668176,["Re@Re.local",[[1,9400,"\n"]],[9396,9396],[9397,9397]]],[1525417690146,["Re@Re.local",[[1,9397,"代码1即是按前文所述思想边"]],[9397,9397],[9410,9410]]],[1525417690289,["Re@Re.local",[[-1,9409,"边"]],[9410,9410],[9409,9409]]],[1525417705934,["Re@Re.local",[[1,9409,"写出来的。sierpinsk"]],[9409,9409],[9423,9423]]],[1525417766199,[null,[[1,6373,"了"],[-1,6384,"是"],[-1,7818,"的"],[1,7819,"\n"],[-1,9423,"\n"]],[6373,6373],[9423,9423]]],[1525417766199,[null,[[-1,6373,"了"],[1,6385,"是"],[1,7818,"的"],[-1,7818,"\n"],[1,9423,"\n"]],[9423,9423],[6373,6373]]],[1525417707488,["Re@Re.local",[[1,9424,"左的"]],[9424,9424],[9426,9426]]],[1525417707940,["Re@Re.local",[[-1,9424,"左的"]],[9426,9426],[9424,9424]]],[1525417743610,["Re@Re.local",[[1,9424,"做的第一件事是绘制最外部的三角形。接下来，进行了三次递归调用，每一次都死活哟"]],[9424,9424],[9462,9462]]],[1525417744025,["Re@Re.local",[[-1,9459,"死活哟"]],[9462,9462],[9459,9459]]],[1525417748566,["Re@Re.local",[[1,9459,"是用来获得"]],[9459,9459],[9464,9464]]],[1525417751898,["Re@Re.local",[[-1,9462,"获得"]],[9464,9464],[9462,9462]]],[1525417756393,["Re@Re.local",[[1,9462,"通过连接充电来获得"]],[9462,9462],[9471,9471]]],[1525417757357,["Re@Re.local",[[-1,9466,"充电来获得"]],[9471,9471],[9466,9466]]],[1525417762458,["Re@Re.local",[[1,9466,"中点来获得新的三角形。"]],[9466,9466],[9477,9477]]],[1525418066239,[null,[[1,6373,"了"],[-1,6384,"是"],[-1,7818,"的"],[1,7819,"\n"],[-1,9423,"\n"],[1,9424,"i"]],[6373,6373],[9425,9425]]],[1525418066240,[null,[[-1,6373,"了"],[1,6385,"是"],[1,7818,"的"],[-1,7818,"\n"],[1,9423,"\n"],[-1,9423,"i"]],[9425,9425],[6373,6373]]],[1525418063492,["Re@Re.local",[[1,9477,"这里又用了标准的海龟库。"]],[9477,9477],[9489,9489]]],[1525418126216,[null,[[1,6373,"了"],[-1,6384,"是"],[-1,7818,"的"],[1,7819,"\n"],[-1,9423,"\n"],[1,9424,"i"]],[6373,6373],[9425,9425]]],[1525418126216,[null,[[-1,6373,"了"],[1,6385,"是"],[1,7818,"的"],[-1,7818,"\n"],[1,9423,"\n"],[-1,9423,"i"]],[9425,9425],[6373,6373]]],[1525418073508,["Re@Re.local",[[1,9489,"可以"]],[9489,9489],[9491,9491]]],[1525418075450,["Re@Re.local",[[-1,9489,"可以"]],[9491,9491],[9489,9489]]],[1525418081755,["Re@Re.local",[[1,9489,"可以通过在Python云心"]],[9489,9489],[9502,9502]]],[1525418082147,["Re@Re.local",[[-1,9500,"云心"]],[9502,9502],[9500,9500]]],[1525418088459,["Re@Re.local",[[1,9500,"提示符里输入helt"]],[9500,9500],[9510,9510]]],[1525418088783,["Re@Re.local",[[-1,9509,"t"]],[9510,9510],[9509,9509]]],[1525418090471,["Re@Re.local",[[1,9509,"p(;"]],[9509,9509],[9512,9512]]],[1525418091171,["Re@Re.local",[[-1,9511,";"]],[9512,9512],[9511,9511]]],[1525418093711,["Re@Re.local",[[1,9511,"'turtle;"]],[9511,9511],[9519,9519]]],[1525418094365,["Re@Re.local",[[-1,9518,";"]],[9519,9519],[9518,9518]]],[1525418119539,["Re@Re.local",[[1,9518,"')。"]],[9518,9518],[9521,9521]]],[1525418122152,["Re@Re.local",[[-1,9520,"。"]],[9521,9521],[9520,9520]]],[1525418124032,["Re@Re.local",[[1,9520,"来"]],[9520,9520],[9521,9521]]],[1525418186212,[null,[[1,6373,"了"],[-1,6384,"是"],[-1,7818,"的"],[1,7819,"\n"],[-1,9423,"\n"],[1,9424,"i"]],[6373,6373],[9425,9425]]],[1525418186212,[null,[[-1,6373,"了"],[1,6385,"是"],[1,7818,"的"],[-1,7818,"\n"],[1,9423,"\n"],[-1,9423,"i"]],[9425,9425],[6373,6373]]],[1525418128797,["Re@Re.local",[[1,9521,"进一步研究"]],[9521,9521],[9526,9526]]],[1525418131102,["Re@Re.local",[[-1,9521,"进一步研究"]],[9526,9526],[9521,9521]]],[1525418141062,["Re@Re.local",[[1,9521,"细究turtle库中可用的方法。"]],[9521,9521],[9537,9537]]],[1525418141325,["Re@Re.local",[[1,9541,"\n"]],[9537,9537],[9538,9538]]],[1525418141587,["Re@Re.local",[[1,9542,"\n"]],[9538,9538],[9539,9539]]],[1525418426260,[null,[[1,6373,"了"],[-1,6384,"是"],[-1,7818,"的"],[1,7819,"\n"],[-1,9423,"\n"],[1,9424,"i"]],[6373,6373],[9425,9425]]],[1525418426260,[null,[[-1,6373,"了"],[1,6385,"是"],[1,7818,"的"],[-1,7818,"\n"],[1,9423,"\n"],[-1,9423,"i"]],[9425,9425],[6373,6373]]],[1525418400782,["Re@Re.local",[[1,9539,"看看"]],[9539,9539],[9541,9541]]],[1525418401642,["Re@Re.local",[[-1,9539,"看看"]],[9541,9541],[9539,9539]]],[1525418403724,["Re@Re.local",[[1,9539,"仔细"]],[9539,9539],[9541,9541]]]]],["3ca39944-3b6e-4ebe-8715-63682debc94c",1525921009866,"递归\n===\n\n\n# 4 递归 #\n\n## 4.1 目标 ##\n\n本章目标如下：\n\n- 了解：某些难以处理的问题也许用递归可以轻松解决。\n- 掌握：设计递归式程序。\n- 了解并应用：递归三大法则。\n- 实现：问题的递归式描述。\n- 了解：计算机系统中递归的实现\n\n## 4.2 何为递归 ##\n\n递归是一种解决问题的方法，将一个问题分解为越来越小的子问题，直到问题的规模小到可以被轻松解决。通常来说，递归中有函数对自己本身的调用。从表面上来看似乎并没有什么特别指出，然而递归算法对于某些问题具有一针见血的气消。\n\n\n## 4.3 对数字列表求和 ##\n\n首先来看一个并不需要递归也可以解决的问题。假设相对一个数字列表求和，比如[1,3,5,7,9]。迭代式算法如可执行代码1所示。函数使用求和变量（theSum）来计算列表中数字之和。\n\n** 可执行代码1： 迭代求和 **\n```Python\ndef listsum(numList):\n    theSum = 0\n    for i in numList:\n        theSum = theSum + i\n    return theSum\n\nprint(listsum([1,3,5,7,9]))\n\n```\n那么，现在假设不可以使用while或者for循环，那又该如何做？数学家可能会想到加法本身是一种接受两个参数的函数，即一对数字。对于该列表求和问题便可转化为多对数字求和问题。先写为全括号化的表达式，比如：\n$$((((1+3)+5)+7)+9)$$\n也可以反方向来：\n$$(1+(3+(5+(7+9))))$$\n注意到最里面的括号组（7+9）是不需要迭代或者其它特殊结构便可解决的问题。实际上，可以将求和问题写为以下简化形式：\n$$total= (1+(3+(5+(7+9))))\ntotal= (1+(3+(5+16)))\ntotal= (1+(3+21))\ntotal= (1+24)\ntotal= 25$$\n如何将这种思想转化为Python程序？首先，将求和问题按Python列表的方式来考虑。可能读者会认为对列表的求和即是列表中第一个元素numList[0]与其它所有元素numList[1:]之和，以函数形式写出即为：\n$$listSum(numList)=first(numList)+listSum(rest(numList))$$\n在以上表达式中，first(numList)返回列表中第一个元素，而rest(numList)返回的是去除了第一个元素的原列表（也是一个列表）。用Python表达式可以写为如可执行代码2：\n\n** 可执行代码2：递归求和（第一次递归） **\n```Python\ndef listsum(numList):\n   if len(numList) == 1:\n        return numList[0]\n   else:\n        return numList[0] + listsum(numList[1:])\n\nprint(listsum([1,3,5,7,9]))\n\n```\n在这段代码中，有些地方需要注意。首先，在行2检查了列表是否仅有1个元素。这一判定很关键，它是控制函数结束的必要语句。长度为1的列表求和显然便是其本身。其次，在行5该函数调用了它自己本身。这便是将listsum归为递归算法的原因。递归函数是一种调用自身的函数。\n\n图1演示了对列表[1,3,5,7,9]求和的递归调用。读者可以将这些有序调用认为是一次次的问题简化过程。每调用一次，便转化为解决一个更小更容易的问题，知道问题规模不能再缩小。\n\n![image](http://interactivepython.org/courselib/static/pythonds/_images/sumlistIn.png)\n\n当问题已经最简化时，便开始将每个问题的答案拼装起来直到原始问题被解决。如图2所示，listsum沿着调用顺序返回。当listsum回到了最顶部的问题时，原始问题便得到了解决。\n\n![image](http://interactivepython.org/courselib/static/pythonds/_images/sumlistOut.png)\n\n## 4.4 递归三定律 ##\n\n跟阿西莫夫（Asimov）机器人三定律一样，递归算法也必须遵守三条重要定律：\n\n1. 递归算法必须要有个**约束条件**作为出口。\n2. 递归算法必须不断改变自身状态并向约束条件演进。\n3. 递归算法必须递归地调用自身。\n\n现在来仔细研究一下这三条定律以及在listsum中是如何得到体现的。首先，约束条件是终止算法递归的条件。一般来说，约束条件都是问题规模已经小到足以直接解决的时候。在listsum算法中，约束条件是长度为1的列表。\n\n为满足第二条定律，必须设法改变当前状态并使得算法向约束条件靠近。状态的改变意味着，算法使用的一些数据将被改变。通常来说，即为问题规模以某种方法缩小。在listsum算法中，基本数据结构是列表，因此需要在列表上想办法实现状态的改变。因为约束条件是列表长度为1，向约束条件演进的一种很自然的实现方式就是缩小列表，这便是可执行代码在行5所做的事：将列表长度缩小，然后将其作为参数来调用listsum本身。\n\n最后一条定律是算法必须调用自己本身，这是递归根本的定义。递归对于许多初学者来说是个有些难懂的概念。读者应当已经发现，递归函数是一种很优秀的方法，借助它可以将大规模的问题拆分为小问题，解决这些小问题只需要写一个简单的函数来对它们处理即可。表面看起来，递归似乎是陷入了一种循环。但实际上它在逻辑上并不是循环的，递归的逻辑是用优美简洁的表达式将问题拆分为更小更简单的。\n\n在本章的剩余部分将进一步研究递归，每个例子中都着重于用如何利用三定律来设计算法。\n\n## 4.5 将整数转化为以任何进制表示的字符串 ##\n\n假设需要将整数转化为二进制与十六进制之间的某进制表示的字符串形式。比如，整数10的十进制字符串为\"10\"，而二进制字符串为\"1010\"。有很多算法可以解决该问题，包括前文说过的以栈来解决，但是用递归思想来解决该问题还是最简洁的。\n\n接下来以十进制的整数768为例演示一个具体的问题。假设用一组字符串来对应前10个数字，比如说convString = \"0123456789\" 。通过在字符串中检索，很容易便可将10以内的数字进行转化，例如整数9，那么字符串便是convString[9]，即\"9\"。将769拆分为三个单独的数字7，6，9，将其转化为字符串也很简单了。小于10的整数看起来是不错的约束条件。\n\n确定基本进制后，整个算法将包括3部分：\n\n1. 将原数字转化为一系列单数字。\n2. 利用检索将单数字转为字符串。\n3. 将各单数字字符串连接起来，形成最终的结果。\n\n下一步是实现状态的改变，使得程序向约束条件靠近。因为研究对象是数字，不妨回想一想什么数学运算可以减少数字，最有可能的是减法和除法。虽然说减法也许是可行的，但有些令人困扰的是在这里如何确定减法操作的两个对象。而除法则清晰很多。\n\n将整数769除以10，可以得到76余9，这两个数字很有用。首先，余数是一个小于进制（10）的数，因此可以直接使用检索转化为字符串。其次，得到了一个小于初始数字的数，这便向约束条件靠近了一步。现在需要做得便是将76转化为它的字符表示。同样，利用除法可以得到7余6。最后，问题退化为转化7。流程如图3所示。注意，需要被保存的数被放置在示意图右侧。\n\n![image](http://interactivepython.org/courselib/static/pythonds/_images/toStr.png)\n\n可执行代码1实现了上述的算法。\n\n** 可执行代码1：迭代算法——整数转化为字符串 **\n```Python\ndef toStr(n,base):\n   convertString = \"0123456789ABCDEF\"\n   if n < base:\n      return convertString[n]\n   else:\n      return toStr(n//base,base) + convertString[n%base]\n\nprint(toStr(1453,16))\n```\n注意在第3行，检测了约束条件，即n小于目标进制。一旦检测到约束条件，便停止递归，然后根据convertString序列返回结果。在行6，通过递归调用和除法降低问题规模来同时满足了第2和第3定律。\n\n再来追踪一次该算法，这次将整数10转化为2进制形式字符串（\"1010\"）\n\n![image](http://interactivepython.org/courselib/static/pythonds/_images/toStrBase2.png)\n\n如图4所示，得到了所需结果，似乎数字的顺序错了。但是实际上，算法运行是正常的，因为是在行6中是先进行的递归调用，然后再将余数的字符串标识加上。\n\n## 4.6 栈桢：实现递归 ##\n\n设想，如果不按上文那样将递归调用的单字符结果依次连接起来得到结果，而是将算法修改为在递归调用之前将字符串压入栈中。调整后的算法如可执行代码1所示。\n** 可执行代码1：利用栈实现整数转化为字符串 **\n```Python\nfrom pythonds.basic.stack import Stack\n\nrStack = Stack()\n\ndef toStr(n,base):\n    convertString = \"0123456789ABCDEF\"\n    while n > 0:\n        if n < base:\n            rStack.push(convertString[n])\n        else:\n            rStack.push(convertString[n % base])\n        n = n // base\n    res = \"\"\n    while not rStack.isEmpty():\n        res = res + str(rStack.pop())\n    return res\n\nprint(toStr(1453,16))\n\n```\n每一次调用toStr，都将一个字符放入栈中。就前一个例子来说，可以发现在第4次调用后，得到的栈如图5所示。注意，现在可以直接将字符从栈中推出，再将他们链接为最后的结果\"1010\"即可。\n\n![../_images/recstack.png](http://interactivepython.org/courselib/static/pythonds/_images/recstack.png)\n\n此例说明了Python是如何实现递归函数调用的。在Python中，调用一个函数时，系统会分配一个栈桢用来处理该函数中的局部变量。当函数执行完毕，返回值被放入栈顶等待被调用的函数处理。如图6所示。\n\n![../_images/newcallstack.png](http://interactivepython.org/courselib/static/pythonds/_images/newcallstack.png)\n\n注意对toStr(2//2, 2)的调用在栈中返回了值“1”。该返回值在表达式“1” + convertString[2%2]用来取代函数调用toStr(1,2)，执行后得到的结果“10”又被放在栈顶。这样一来，Python的调用栈取代了代码4中所使用的栈。在该例子中，读者可以认为栈顶的返回值替代了累加变量的作用。\n\n栈桢也为对应函数使用的变量规定了作用域。虽然多次调用同一个函数，每一次调用都为函数的局部变量创建一个新的作用域。\n\n## 4.7 图示递归 ##\n\n在上一节中介绍了一些使用递归算法可以轻松解决的问题，然而很难给出递归函数运行的可视化方法或者思维导图，这就使得递归算法不是那么容易掌握的。本节将研究一些递归的例子并画出示意图。通过研究这些示意图的形成过程，便会对递归过程有更加深刻的理解。\n\n这里使用Python的海龟图像模块turtle进行可视化。turtle模块是所有Python版本的标配并且很容易上手，其符号也很简单。创建一只海龟，该海龟可以前进/后退/左转/右转等，并且可以控制尾巴的抬起和放下。当海龟的尾巴放下且在移动时，便会绘制出线。为了提高观赏性，可以改变海龟尾巴的宽度以及画笔的颜色。\n\n下面简单说明turtle作图的基础，这里会利用turtle绘制一个螺旋线。如可执行代码所示。引入turtle模块后，创建一个turtle实例。当turtle生成后，为其创建一个窗口用来绘图。接下来定义drawSpiral函数。该函数的约束条件是待画线的长度（以len参数表示）减少到小于或等于0。若长度仍大于0，则命令海龟前进len单位然后右转90度。通过再次调用drawSpiral并且传入减小后的长度实现递归。在可执行代码1的最后，调用了函数myWin.exitonclick()，这是窗口的一个很便利的方法，它将海龟置于待机状态直到在窗口内发生点击操作，然后页面才清空并退出。\n\n**可执行代码1：使用海龟绘制递归螺旋线**\n```Python\nimport turtle\n\nmyTurtle = turtle.Turtle()\nmyWin = turtle.Screen()\n\ndef drawSpiral(myTurtle, lineLen):\n    if lineLen > 0:\n        myTurtle.forward(lineLen)\n        myTurtle.right(90)\n        drawSpiral(myTurtle,lineLen-5)\n\ndrawSpiral(myTurtle,100)\nmyWin.exitonclick()\n```\n\n这就是海龟模块中所需要了解的一些基本知识，据此便可以绘制漂亮的团了。下一个程序将绘制一个分形树。分形是数学的一个分支，它与递归有许多相似点。对于某个图形，无论放大多少倍，其基本形状都是一致的，此时便称之为**分形**。很多自然现象具有分形特点，比如海岸线，雪花，山脉，树以及灌木等，这使得CG（Computer Generated）电影具有了可行性。接下来的例子中将绘制一颗分形树。\n\n为了画出这棵树，考虑如何用分形思想来描述一棵树是很有用的。回想一下，分形就是无论放大多少倍都具有相似性的东西。将这种思想用来研究树或者灌木，可以发现即使是小树枝也具有与整棵树一致的形状和特点。据此可以将树定义为一个左右分叉，且左右各有一个更小的“树”（分叉）。引入递归的概念，那么树便是这些递归的小树构成的。\n\n现在将上述思路转换为Python代码。代码1利用海龟来绘制了一颗分形树。可以发现，行5和行7进行了递归调用。行5在右转20度后进行了递归调用，这便是前文提到的右分叉；在行7，海龟在左转40度后进行了另一次递归调用，这即为左分叉。此外，注意到每次调用tree后，都对branchlen参数进行了减法运算，这保证了递归树是越来越小的。读者应该也注意到了行2的**if**语句即是约束条件，在branchLen过小时触发。\n\n**代码1**\n```Python\ndef tree(branchLen,t):\n    if branchLen > 5:\n        t.forward(branchLen)\n        t.right(20)\n        tree(branchLen-15,t)\n        t.left(40)\n        tree(branchLen-10,t)\n        t.right(20)\n        t.backward(branchLen)\n```\n完整的代码如可执行代码2所示。在运行代码前，思考一下是分叉树是如何绘制的。仔细观察这些调用，想想分叉树是如何展开的。它是同时对称地绘制左右分叉还是先右再左？\n\n**可执行代码2:递归绘制分叉树**\n```Python\ndef tree(branchLen,t):\n    if branchLen > 5:\n        t.forward(branchLen)\n        t.right(20)\n        tree(branchLen-15,t)\n        t.left(40)\n        tree(branchLen-15,t)\n        t.right(20)\n        t.backward(branchLen)\n\ndef main():\n    t = turtle.Turtle()\n    myWin = turtle.Screen()\n    t.left(90)\n    t.up()\n    t.backward(100)\n    t.down()\n    t.color(\"green\")\n    tree(75,t)\n    myWin.exitonclick()\n\nmain()\n```\n注意分叉树上的每一个分叉点是如何相应递归调用，以及分叉树是如何一路朝右绘制到最短的那个分支的。如图2所示。现在，仔细观察，程序是在整个树的右侧绘制完成后再沿着分叉返回，分叉树的右半侧如图1所示。接下来将绘制树的左侧，然而并不是直接画出最大的左侧，而是在每次到达最短枝前，先画出左分支的整个右半部分，然后再返回画左半部分。\n\n![../_images/tree1.png](http://interactivepython.org/courselib/static/pythonds/_images/tree1.png)\n\n![../_images/tree2.png](http://interactivepython.org/courselib/static/pythonds/_images/tree2.png)\n\n分形树只是一个起点，此外，读者也应该注意到这棵树看起来并不是那么真实，因为自然界中并不会真的像计算机程序那样具有高度对称性。本章的最后将会介绍一些有趣的选项，可以使得分叉树看起来更真实。\n\n## 4.8 谢尔宾斯基三角形 ##\n\n谢尔宾斯基三角形也是一种具有自相似性的分形图形，如图三所示。谢尔宾斯基三角形是一种三向递归算法。手绘谢尔宾斯基三角形的方法很简单。从某个大的三角形开始，将这个大三角形分为4个小的三角形：连接每条边的中点；剔除掉新的4个三角形中间的那个，对剩余的三个采取同样的步骤；以此类推，不断递归循环。如果笔足够细的话，是可以无穷地画下去的。\n\n![../_images/sierpinski.png](http://interactivepython.org/courselib/static/pythonds/_images/sierpinski.png)\n\n既然这个算法可以无限运行，那就必须得找出约束条件。这里被设置为了任意的划分次数，有时这被称为相似性维数。每次进行递归调用，就将维数减1直到为0。代码如可执行代码1所示。\n\n**可执行代码1:绘制谢尔宾斯基三角形**\n```Python\nimport turtle\n\ndef drawTriangle(points,color,myTurtle):\n    myTurtle.fillcolor(color)\n    myTurtle.up()\n    myTurtle.goto(points[0][0],points[0][1])\n    myTurtle.down()\n    myTurtle.begin_fill()\n    myTurtle.goto(points[1][0],points[1][1])\n    myTurtle.goto(points[2][0],points[2][1])\n    myTurtle.goto(points[0][0],points[0][1])\n    myTurtle.end_fill()\n\ndef getMid(p1,p2):\n    return ( (p1[0]+p2[0]) / 2, (p1[1] + p2[1]) / 2)\n\ndef sierpinski(points,degree,myTurtle):\n    colormap = ['blue','red','green','white','yellow',\n                'violet','orange']\n    drawTriangle(points,colormap[degree],myTurtle)\n    if degree > 0:\n        sierpinski([points[0],\n                        getMid(points[0], points[1]),\n                        getMid(points[0], points[2])],\n                   degree-1, myTurtle)\n        sierpinski([points[1],\n                        getMid(points[0], points[1]),\n                        getMid(points[1], points[2])],\n                   degree-1, myTurtle)\n        sierpinski([points[2],\n                        getMid(points[2], points[1]),\n                        getMid(points[0], points[2])],\n                   degree-1, myTurtle)\n\ndef main():\n   myTurtle = turtle.Turtle()\n   myWin = turtle.Screen()\n   myPoints = [[-100,-50],[0,100],[100,-50]]\n   sierpinski(myPoints,3,myTurtle)\n   myWin.exitonclick()\n\nmain()\n```\n代码1即是按前文所述思想写出来的。sierpinski做的第一件事是绘制最外部的三角形。接下来，进行了三次递归调用，每一次都是用来通过连接中点来获得新的三角形。这里又用了标准的海龟库。可以通过在Python提示符里输入help('turtle')来细究turtle库中可用的方法。\n\n仔细\n\n\n\n",[[1525920968993,["Re@Re.local",[[1,9541,"k"]],[9541,9541],[9542,9542]]],[1525920969375,["Re@Re.local",[[-1,9541,"k"]],[9542,9542],[9541,9541]]],[1525920978334,["Re@Re.local",[[1,9541,"研究代码，想想三角形"]],[9541,9541],[9551,9551]]],[1525920978940,["Re@Re.local",[[-1,9548,"三角形"]],[9551,9551],[9548,9548]]],[1525920979861,["Re@Re.local",[[1,9548,"这个"]],[9548,9548],[9550,9550]]],[1525920980623,["Re@Re.local",[[-1,9548,"这个"]],[9550,9550],[9548,9548]]],[1525920984959,["Re@Re.local",[[1,9548,"这些三角形是按照什么"]],[9548,9548],[9558,9558]]],[1525920988141,["Re@Re.local",[[-1,9553,"是按照什么"]],[9558,9558],[9553,9553]]],[1525920991052,["Re@Re.local",[[1,9553,"的绘制顺序。"]],[9553,9553],[9559,9559]]],[1525921029023,["Re@Re.local",[[1,9559,"确切地来说，顺序"]],[9559,9559],[9567,9567]]],[1525921029346,["Re@Re.local",[[-1,9565,"顺序"]],[9567,9567],[9565,9565]]],[1525921031944,["Re@Re.local",[[1,9565,"顺序"]],[9565,9565],[9567,9567]]],[1525921032509,["Re@Re.local",[[-1,9565,"顺序"]],[9567,9567],[9565,9565]]],[1525921038931,["Re@Re.local",[[1,9565,"各个角的顺序"]],[9565,9565],[9571,9571]]],[1525921039923,["Re@Re.local",[[-1,9568,"的顺序"]],[9571,9571],[9568,9568]]],[1525921041073,["Re@Re.local",[[1,9568,"里"]],[9568,9568],[9569,9569]]],[1525921043693,["Re@Re.local",[[-1,9565,"各个角里"]],[9569,9569],[9565,9565]]],[1525921061941,["Re@Re.local",[[1,9565,"绘制顺序取决于锤"]],[9565,9565],[9573,9573]]],[1525921062205,["Re@Re.local",[[-1,9571,"于锤"]],[9573,9573],[9571,9571]]],[1525921068767,["Re@Re.local",[[1,9571,"于初始的设定"]],[9571,9571],[9577,9577]]],[1525921127973,["Re@Re.local",[[1,9577,"，这里假设顺序是左下，上，右下。考虑到sierpinski函数调用"]],[9577,9577],[9610,9610]]],[1525921130635,["Re@Re.local",[[-1,9610,"乐趣"]],[9612,9612],[9610,9610]]],[1525921136693,["Re@Re.local",[[1,9610,"其本身，sierpinski"]],[9610,9610],[9624,9624]]],[1525921249883,[null,[[1,9626,"\n\n"]],[9626,9626],[9628,9628]]],[1525921249883,[null,[[-1,9626,"\n\n"]],[9628,9628],[9626,9626]]],[1525921238141,["Re@Re.local",[[1,9613,"的方式"]],[9613,9613],[9616,9616]]],[1525921241200,["Re@Re.local",[[1,9627,"现实"]],[9627,9627],[9629,9629]]],[1525921242003,["Re@Re.local",[[-1,9627,"现实"]],[9629,9629],[9627,9627]]],[1525921249211,["Re@Re.local",[[1,9627,"先是直接向"]],[9627,9627],[9632,9632]]],[1525921309846,[null,[[1,9634,"\n\n"]],[9634,9634],[9636,9636]]],[1525921309846,[null,[[-1,9634,"\n\n"]],[9636,9636],[9634,9634]]],[1525921254153,["Re@Re.local",[[-1,9631,"向"]],[9632,9632],[9631,9631]]],[1525921256707,["Re@Re.local",[[1,9631,"一路"]],[9631,9631],[9633,9633]]],[1525921257381,["Re@Re.local",[[-1,9629,"直接一路"]],[9633,9633],[9629,9629]]],[1525921260693,["Re@Re.local",[[1,9629,"直接一路向"]],[9629,9629],[9634,9634]]],[1525921264652,["Re@Re.local",[[-1,9631,"一路向"]],[9634,9634],[9631,9631]]],[1525921282828,["Re@Re.local",[[1,9631,"到达可以绘制的最小的左下角的三角形"]],[9631,9631],[9648,9648]]],[1525921295924,["Re@Re.local",[[1,9629,"沿最短路线"]],[9629,9629],[9634,9634]]],[1525921300039,["Re@Re.local",[[1,9653,"，"]],[9653,9653],[9654,9654]]],[1525921369905,[null,[[1,9656,"\n\n"]],[9656,9656],[9658,9658]]],[1525921369905,[null,[[-1,9656,"\n\n"]],[9658,9658],[9656,9656]]],[1525921319693,["Re@Re.local",[[1,9654,"然后返回"]],[9654,9654],[9658,9658]]],[1525921319977,["Re@Re.local",[[-1,9657,"回"]],[9658,9658],[9657,9657]]],[1525921325889,["Re@Re.local",[[1,9657,"过来绘制其它的剩余部分。"]],[9657,9657],[9669,9669]]],[1525921332062,["Re@Re.local",[[-1,9668,"。"]],[9669,9669],[9668,9668]]],[1525921332652,["Re@Re.local",[[1,9668,"："]],[9668,9668],[9669,9669]]],[1525921333899,["Re@Re.local",[[-1,9668,"："]],[9669,9669],[9668,9668]]],[1525921336406,["Re@Re.local",[[1,9668,"；现已"]],[9668,9668],[9671,9671]]],[1525921336746,["Re@Re.local",[[-1,9669,"现已"]],[9671,9671],[9669,9669]]],[1525921337970,["Re@Re.local",[[1,9669,"先是"]],[9669,9669],[9671,9671]]],[1525921339945,["Re@Re.local",[[-1,9669,"先是"]],[9671,9671],[9669,9669]]],[1525921340998,["Re@Re.local",[[1,9669,"同样"]],[9669,9669],[9671,9671]]],[1525921341252,["Re@Re.local",[[-1,9669,"同样"]],[9671,9671],[9669,9669]]],[1525921344695,["Re@Re.local",[[-1,9654,"然后"]],[9656,9656],[9654,9654]]],[1525921345469,["Re@Re.local",[[1,9654,"再"]],[9654,9654],[9655,9655]]],[1525921346741,["Re@Re.local",[[-1,9667,"；"]],[9668,9668],[9667,9667]]],[1525921349349,["Re@Re.local",[[1,9667,"：先是向"]],[9667,9667],[9671,9671]]],[1525921349441,["Re@Re.local",[[-1,9670,"向"]],[9671,9671],[9670,9670]]],[1525921352033,["Re@Re.local",[[1,9670,"按蕾丝"]],[9670,9670],[9673,9673]]],[1525921352915,["Re@Re.local",[[-1,9671,"蕾丝"]],[9673,9673],[9671,9671]]],[1525921355295,["Re@Re.local",[[1,9671,"类似的方式"]],[9671,9671],[9676,9676]]],[1525921429879,[null,[[1,9678,"\n\n"]],[9678,9678],[9680,9680]]],[1525921429880,[null,[[-1,9678,"\n\n"]],[9680,9680],[9678,9678]]],[1525921370422,["Re@Re.local",[[1,9676,"一次"]],[9676,9676],[9678,9678]]],[1525921370899,["Re@Re.local",[[-1,9676,"一次"]],[9678,9678],[9676,9676]]],[1525921390223,["Re@Re.local",[[1,9676,"直接向最小的、嘴顶"]],[9676,9676],[9685,9685]]],[1525921390474,["Re@Re.local",[[-1,9683,"嘴顶"]],[9685,9685],[9683,9683]]],[1525921416885,["Re@Re.local",[[1,9683,"最顶部的三角形前进；最后再绘制右下角的最小的三角形。"]],[9683,9683],[9709,9709]]],[1525921733036,[null,[[1,9711,"\n\n"]],[9711,9711],[9713,9713]]],[1525921733036,[null,[[-1,9711,"\n\n"]],[9713,9713],[9711,9711]]],[1525921692093,["Re@Re.local",[[1,9711,"有时候可以根据"]],[9711,9711],[9718,9718]]],[1525921699836,["Re@Re.local",[[-1,9716,"根据"]],[9718,9718],[9716,9716]]],[1525921705447,["Re@Re.local",[[1,9716,"按照函数调用的图示"]],[9716,9716],[9725,9725]]],[1525921708272,["Re@Re.local",[[-1,9722,"的图示"]],[9725,9725],[9722,9722]]],[1525921709629,["Re@Re.local",[[1,9722,"的图示"]],[9722,9722],[9725,9725]]],[1525921712633,["Re@Re.local",[[-1,9714,"可以按照"]],[9718,9718],[9714,9714]]],[1525921713396,["Re@Re.local",[[1,9714,"根据"]],[9714,9714],[9716,9716]]],[1525921715789,["Re@Re.local",[[-1,9721,"图示"]],[9723,9723],[9721,9721]]],[1525921721112,["Re@Re.local",[[1,9721,"示意图来理解递归算法是"]],[9721,9721],[9732,9732]]],[1525921721518,["Re@Re.local",[[-1,9731,"是"]],[9732,9732],[9731,9731]]],[1525921727129,["Re@Re.local",[[1,9731,"是又有"]],[9731,9731],[9734,9734]]],[1525921727475,["Re@Re.local",[[-1,9732,"又有"]],[9734,9734],[9732,9732]]],[1525921731280,["Re@Re.local",[[1,9732,"很有用的。如"]],[9732,9732],[9738,9738]]],[1525921731686,["Re@Re.local",[[-1,9737,"如"]],[9738,9738],[9737,9737]]],[1525921793004,[null,[[1,9737,"\n\n"]],[9737,9737],[9739,9739]]],[1525921793004,[null,[[-1,9737,"\n\n"]],[9739,9739],[9737,9737]]],[1525921736996,["Re@Re.local",[[1,9737,"该"]],[9737,9737],[9738,9738]]],[1525921737102,["Re@Re.local",[[-1,9737,"该"]],[9738,9738],[9737,9737]]],[1525921742849,["Re@Re.local",[[1,9737,"如图4所示，本立的递归"]],[9737,9737],[9748,9748]]],[1525921743558,["Re@Re.local",[[-1,9743,"本立的递归"]],[9748,9748],[9743,9743]]],[1525921755851,["Re@Re.local",[[1,9743,"本例中的递归算法总是"]],[9743,9743],[9753,9753]]],[1525921760351,["Re@Re.local",[[-1,9751,"总是"]],[9753,9753],[9751,9751]]],[1525922633877,[null,[[1,9751,"\n\n"]],[9751,9751],[9753,9753]]],[1525922633877,[null,[[-1,9751,"\n\n"]],[9753,9753],[9751,9751]]],[1525922574517,["Re@Re.local",[[1,9751,"jj"]],[9751,9751],[9753,9753]]],[1525922575041,["Re@Re.local",[[-1,9751,"jj"]],[9753,9753],[9751,9751]]],[1525923053912,[null,[[1,9751,"\n\n"]],[9751,9751],[9753,9753]]],[1525923053913,[null,[[-1,9751,"\n\n"]],[9753,9753],[9751,9751]]],[1525923046655,["Re@Re.local",[[1,9751,"总是"]],[9751,9751],[9753,9753]]],[1525923047180,["Re@Re.local",[[-1,9751,"总是"]],[9753,9753],[9751,9751]]],[1525923052430,["Re@Re.local",[[1,9751,"是"]],[9751,9751],[9752,9752]]],[1525923113850,[null,[[1,9752,"\n\n"]],[9752,9752],[9754,9754]]],[1525923113850,[null,[[-1,9752,"\n\n"]],[9754,9754],[9752,9752]]],[1525923054745,["Re@Re.local",[[-1,9751,"是"]],[9752,9752],[9751,9751]]],[1525923088088,["Re@Re.local",[[1,9751,"总是一直想做"]],[9751,9751],[9757,9757]]],[1525923089183,["Re@Re.local",[[-1,9751,"总是一直想做"]],[9757,9757],[9751,9751]]],[1525923092422,["Re@Re.local",[[1,9751,"一路"]],[9751,9751],[9753,9753]]],[1525923092756,["Re@Re.local",[[-1,9751,"一路"]],[9753,9753],[9751,9751]]],[1525923111430,["Re@Re.local",[[1,9751,"总是先"]],[9751,9751],[9754,9754]]],[1525923173900,[null,[[1,9754,"\n\n"]],[9754,9754],[9756,9756]]],[1525923173900,[null,[[-1,9754,"\n\n"]],[9756,9756],[9754,9754]]],[1525923119043,["Re@Re.local",[[1,9754,"向左边前进。"]],[9754,9754],[9760,9760]]],[1525923473892,[null,[[1,9760,"\n\n"]],[9760,9760],[9762,9762]]],[1525923473892,[null,[[-1,9760,"\n\n"]],[9762,9762],[9760,9760]]],[1525923446637,["Re@Re.local",[[1,9760,"黑色的"]],[9760,9760],[9763,9763]]],[1525923450792,["Re@Re.local",[[-1,9761,"色的"]],[9763,9763],[9761,9761]]],[1525923463875,["Re@Re.local",[[1,9761,"线表示正在运行的，灰色的表示没有运行的。"]],[9761,9761],[9781,9781]]],[1525923533868,[null,[[1,9781,"\n\n"]],[9781,9781],[9783,9783]]],[1525923533869,[null,[[-1,9781,"\n\n"]],[9783,9783],[9781,9781]]],[1525923515545,["Re@Re.local",[[-1,9780,"。"]],[9781,9781],[9780,9780]]],[1525923520908,["Re@Re.local",[[1,9780,"，越靠近图4的地步"]],[9780,9780],[9789,9789]]],[1525923521873,["Re@Re.local",[[-1,9787,"地步"]],[9789,9789],[9787,9787]]],[1525923528970,["Re@Re.local",[[1,9787,"底部，三角形越小。"]],[9787,9787],[9796,9796]]],[1525923593858,[null,[[1,9796,"\n\n"]],[9796,9796],[9798,9798]]],[1525923593858,[null,[[-1,9796,"\n\n"]],[9798,9798],[9796,9796]]],[1525923554127,["Re@Re.local",[[1,9796,"函数每次绘制"]],[9796,9796],[9802,9802]]],[1525923554589,["Re@Re.local",[[-1,9800,"绘制"]],[9802,9802],[9800,9800]]],[1525923564898,["Re@Re.local",[[1,9800,"执行都消耗一个相似维度，"]],[9800,9800],[9812,9812]]],[1525923566657,["Re@Re.local",[[-1,9811,"，"]],[9812,9812],[9811,9811]]],[1525923567909,["Re@Re.local",[[1,9811,"。"]],[9811,9811],[9812,9812]]]]],["6be41623-1dc8-4465-9221-73bdd0b1adf3",1526053672833,"递归\n===\n\n\n# 4 递归 #\n\n## 4.1 目标 ##\n\n本章目标如下：\n\n- 了解：某些难以处理的问题也许用递归可以轻松解决。\n- 掌握：设计递归式程序。\n- 了解并应用：递归三大法则。\n- 实现：问题的递归式描述。\n- 了解：计算机系统中递归的实现\n\n## 4.2 何为递归 ##\n\n递归是一种解决问题的方法，将一个问题分解为越来越小的子问题，直到问题的规模小到可以被轻松解决。通常来说，递归中有函数对自己本身的调用。从表面上来看似乎并没有什么特别指出，然而递归算法对于某些问题具有一针见血的气消。\n\n\n## 4.3 对数字列表求和 ##\n\n首先来看一个并不需要递归也可以解决的问题。假设相对一个数字列表求和，比如[1,3,5,7,9]。迭代式算法如可执行代码1所示。函数使用求和变量（theSum）来计算列表中数字之和。\n\n** 可执行代码1： 迭代求和 **\n```Python\ndef listsum(numList):\n    theSum = 0\n    for i in numList:\n        theSum = theSum + i\n    return theSum\n\nprint(listsum([1,3,5,7,9]))\n\n```\n那么，现在假设不可以使用while或者for循环，那又该如何做？数学家可能会想到加法本身是一种接受两个参数的函数，即一对数字。对于该列表求和问题便可转化为多对数字求和问题。先写为全括号化的表达式，比如：\n$$((((1+3)+5)+7)+9)$$\n也可以反方向来：\n$$(1+(3+(5+(7+9))))$$\n注意到最里面的括号组（7+9）是不需要迭代或者其它特殊结构便可解决的问题。实际上，可以将求和问题写为以下简化形式：\n$$total= (1+(3+(5+(7+9))))\ntotal= (1+(3+(5+16)))\ntotal= (1+(3+21))\ntotal= (1+24)\ntotal= 25$$\n如何将这种思想转化为Python程序？首先，将求和问题按Python列表的方式来考虑。可能读者会认为对列表的求和即是列表中第一个元素numList[0]与其它所有元素numList[1:]之和，以函数形式写出即为：\n$$listSum(numList)=first(numList)+listSum(rest(numList))$$\n在以上表达式中，first(numList)返回列表中第一个元素，而rest(numList)返回的是去除了第一个元素的原列表（也是一个列表）。用Python表达式可以写为如可执行代码2：\n\n** 可执行代码2：递归求和（第一次递归） **\n```Python\ndef listsum(numList):\n   if len(numList) == 1:\n        return numList[0]\n   else:\n        return numList[0] + listsum(numList[1:])\n\nprint(listsum([1,3,5,7,9]))\n\n```\n在这段代码中，有些地方需要注意。首先，在行2检查了列表是否仅有1个元素。这一判定很关键，它是控制函数结束的必要语句。长度为1的列表求和显然便是其本身。其次，在行5该函数调用了它自己本身。这便是将listsum归为递归算法的原因。递归函数是一种调用自身的函数。\n\n图1演示了对列表[1,3,5,7,9]求和的递归调用。读者可以将这些有序调用认为是一次次的问题简化过程。每调用一次，便转化为解决一个更小更容易的问题，知道问题规模不能再缩小。\n\n![image](http://interactivepython.org/courselib/static/pythonds/_images/sumlistIn.png)\n\n当问题已经最简化时，便开始将每个问题的答案拼装起来直到原始问题被解决。如图2所示，listsum沿着调用顺序返回。当listsum回到了最顶部的问题时，原始问题便得到了解决。\n\n![image](http://interactivepython.org/courselib/static/pythonds/_images/sumlistOut.png)\n\n## 4.4 递归三定律 ##\n\n跟阿西莫夫（Asimov）机器人三定律一样，递归算法也必须遵守三条重要定律：\n\n1. 递归算法必须要有个**约束条件**作为出口。\n2. 递归算法必须不断改变自身状态并向约束条件演进。\n3. 递归算法必须递归地调用自身。\n\n现在来仔细研究一下这三条定律以及在listsum中是如何得到体现的。首先，约束条件是终止算法递归的条件。一般来说，约束条件都是问题规模已经小到足以直接解决的时候。在listsum算法中，约束条件是长度为1的列表。\n\n为满足第二条定律，必须设法改变当前状态并使得算法向约束条件靠近。状态的改变意味着，算法使用的一些数据将被改变。通常来说，即为问题规模以某种方法缩小。在listsum算法中，基本数据结构是列表，因此需要在列表上想办法实现状态的改变。因为约束条件是列表长度为1，向约束条件演进的一种很自然的实现方式就是缩小列表，这便是可执行代码在行5所做的事：将列表长度缩小，然后将其作为参数来调用listsum本身。\n\n最后一条定律是算法必须调用自己本身，这是递归根本的定义。递归对于许多初学者来说是个有些难懂的概念。读者应当已经发现，递归函数是一种很优秀的方法，借助它可以将大规模的问题拆分为小问题，解决这些小问题只需要写一个简单的函数来对它们处理即可。表面看起来，递归似乎是陷入了一种循环。但实际上它在逻辑上并不是循环的，递归的逻辑是用优美简洁的表达式将问题拆分为更小更简单的。\n\n在本章的剩余部分将进一步研究递归，每个例子中都着重于用如何利用三定律来设计算法。\n\n## 4.5 将整数转化为以任何进制表示的字符串 ##\n\n假设需要将整数转化为二进制与十六进制之间的某进制表示的字符串形式。比如，整数10的十进制字符串为\"10\"，而二进制字符串为\"1010\"。有很多算法可以解决该问题，包括前文说过的以栈来解决，但是用递归思想来解决该问题还是最简洁的。\n\n接下来以十进制的整数768为例演示一个具体的问题。假设用一组字符串来对应前10个数字，比如说convString = \"0123456789\" 。通过在字符串中检索，很容易便可将10以内的数字进行转化，例如整数9，那么字符串便是convString[9]，即\"9\"。将769拆分为三个单独的数字7，6，9，将其转化为字符串也很简单了。小于10的整数看起来是不错的约束条件。\n\n确定基本进制后，整个算法将包括3部分：\n\n1. 将原数字转化为一系列单数字。\n2. 利用检索将单数字转为字符串。\n3. 将各单数字字符串连接起来，形成最终的结果。\n\n下一步是实现状态的改变，使得程序向约束条件靠近。因为研究对象是数字，不妨回想一想什么数学运算可以减少数字，最有可能的是减法和除法。虽然说减法也许是可行的，但有些令人困扰的是在这里如何确定减法操作的两个对象。而除法则清晰很多。\n\n将整数769除以10，可以得到76余9，这两个数字很有用。首先，余数是一个小于进制（10）的数，因此可以直接使用检索转化为字符串。其次，得到了一个小于初始数字的数，这便向约束条件靠近了一步。现在需要做得便是将76转化为它的字符表示。同样，利用除法可以得到7余6。最后，问题退化为转化7。流程如图3所示。注意，需要被保存的数被放置在示意图右侧。\n\n![image](http://interactivepython.org/courselib/static/pythonds/_images/toStr.png)\n\n可执行代码1实现了上述的算法。\n\n** 可执行代码1：迭代算法——整数转化为字符串 **\n```Python\ndef toStr(n,base):\n   convertString = \"0123456789ABCDEF\"\n   if n < base:\n      return convertString[n]\n   else:\n      return toStr(n//base,base) + convertString[n%base]\n\nprint(toStr(1453,16))\n```\n注意在第3行，检测了约束条件，即n小于目标进制。一旦检测到约束条件，便停止递归，然后根据convertString序列返回结果。在行6，通过递归调用和除法降低问题规模来同时满足了第2和第3定律。\n\n再来追踪一次该算法，这次将整数10转化为2进制形式字符串（\"1010\"）\n\n![image](http://interactivepython.org/courselib/static/pythonds/_images/toStrBase2.png)\n\n如图4所示，得到了所需结果，似乎数字的顺序错了。但是实际上，算法运行是正常的，因为是在行6中是先进行的递归调用，然后再将余数的字符串标识加上。\n\n## 4.6 栈桢：实现递归 ##\n\n设想，如果不按上文那样将递归调用的单字符结果依次连接起来得到结果，而是将算法修改为在递归调用之前将字符串压入栈中。调整后的算法如可执行代码1所示。\n** 可执行代码1：利用栈实现整数转化为字符串 **\n```Python\nfrom pythonds.basic.stack import Stack\n\nrStack = Stack()\n\ndef toStr(n,base):\n    convertString = \"0123456789ABCDEF\"\n    while n > 0:\n        if n < base:\n            rStack.push(convertString[n])\n        else:\n            rStack.push(convertString[n % base])\n        n = n // base\n    res = \"\"\n    while not rStack.isEmpty():\n        res = res + str(rStack.pop())\n    return res\n\nprint(toStr(1453,16))\n\n```\n每一次调用toStr，都将一个字符放入栈中。就前一个例子来说，可以发现在第4次调用后，得到的栈如图5所示。注意，现在可以直接将字符从栈中推出，再将他们链接为最后的结果\"1010\"即可。\n\n![../_images/recstack.png](http://interactivepython.org/courselib/static/pythonds/_images/recstack.png)\n\n此例说明了Python是如何实现递归函数调用的。在Python中，调用一个函数时，系统会分配一个栈桢用来处理该函数中的局部变量。当函数执行完毕，返回值被放入栈顶等待被调用的函数处理。如图6所示。\n\n![../_images/newcallstack.png](http://interactivepython.org/courselib/static/pythonds/_images/newcallstack.png)\n\n注意对toStr(2//2, 2)的调用在栈中返回了值“1”。该返回值在表达式“1” + convertString[2%2]用来取代函数调用toStr(1,2)，执行后得到的结果“10”又被放在栈顶。这样一来，Python的调用栈取代了代码4中所使用的栈。在该例子中，读者可以认为栈顶的返回值替代了累加变量的作用。\n\n栈桢也为对应函数使用的变量规定了作用域。虽然多次调用同一个函数，每一次调用都为函数的局部变量创建一个新的作用域。\n\n## 4.7 图示递归 ##\n\n在上一节中介绍了一些使用递归算法可以轻松解决的问题，然而很难给出递归函数运行的可视化方法或者思维导图，这就使得递归算法不是那么容易掌握的。本节将研究一些递归的例子并画出示意图。通过研究这些示意图的形成过程，便会对递归过程有更加深刻的理解。\n\n这里使用Python的海龟图像模块turtle进行可视化。turtle模块是所有Python版本的标配并且很容易上手，其符号也很简单。创建一只海龟，该海龟可以前进/后退/左转/右转等，并且可以控制尾巴的抬起和放下。当海龟的尾巴放下且在移动时，便会绘制出线。为了提高观赏性，可以改变海龟尾巴的宽度以及画笔的颜色。\n\n下面简单说明turtle作图的基础，这里会利用turtle绘制一个螺旋线。如可执行代码所示。引入turtle模块后，创建一个turtle实例。当turtle生成后，为其创建一个窗口用来绘图。接下来定义drawSpiral函数。该函数的约束条件是待画线的长度（以len参数表示）减少到小于或等于0。若长度仍大于0，则命令海龟前进len单位然后右转90度。通过再次调用drawSpiral并且传入减小后的长度实现递归。在可执行代码1的最后，调用了函数myWin.exitonclick()，这是窗口的一个很便利的方法，它将海龟置于待机状态直到在窗口内发生点击操作，然后页面才清空并退出。\n\n**可执行代码1：使用海龟绘制递归螺旋线**\n```Python\nimport turtle\n\nmyTurtle = turtle.Turtle()\nmyWin = turtle.Screen()\n\ndef drawSpiral(myTurtle, lineLen):\n    if lineLen > 0:\n        myTurtle.forward(lineLen)\n        myTurtle.right(90)\n        drawSpiral(myTurtle,lineLen-5)\n\ndrawSpiral(myTurtle,100)\nmyWin.exitonclick()\n```\n\n这就是海龟模块中所需要了解的一些基本知识，据此便可以绘制漂亮的团了。下一个程序将绘制一个分形树。分形是数学的一个分支，它与递归有许多相似点。对于某个图形，无论放大多少倍，其基本形状都是一致的，此时便称之为**分形**。很多自然现象具有分形特点，比如海岸线，雪花，山脉，树以及灌木等，这使得CG（Computer Generated）电影具有了可行性。接下来的例子中将绘制一颗分形树。\n\n为了画出这棵树，考虑如何用分形思想来描述一棵树是很有用的。回想一下，分形就是无论放大多少倍都具有相似性的东西。将这种思想用来研究树或者灌木，可以发现即使是小树枝也具有与整棵树一致的形状和特点。据此可以将树定义为一个左右分叉，且左右各有一个更小的“树”（分叉）。引入递归的概念，那么树便是这些递归的小树构成的。\n\n现在将上述思路转换为Python代码。代码1利用海龟来绘制了一颗分形树。可以发现，行5和行7进行了递归调用。行5在右转20度后进行了递归调用，这便是前文提到的右分叉；在行7，海龟在左转40度后进行了另一次递归调用，这即为左分叉。此外，注意到每次调用tree后，都对branchlen参数进行了减法运算，这保证了递归树是越来越小的。读者应该也注意到了行2的**if**语句即是约束条件，在branchLen过小时触发。\n\n**代码1**\n```Python\ndef tree(branchLen,t):\n    if branchLen > 5:\n        t.forward(branchLen)\n        t.right(20)\n        tree(branchLen-15,t)\n        t.left(40)\n        tree(branchLen-10,t)\n        t.right(20)\n        t.backward(branchLen)\n```\n完整的代码如可执行代码2所示。在运行代码前，思考一下是分叉树是如何绘制的。仔细观察这些调用，想想分叉树是如何展开的。它是同时对称地绘制左右分叉还是先右再左？\n\n**可执行代码2:递归绘制分叉树**\n```Python\ndef tree(branchLen,t):\n    if branchLen > 5:\n        t.forward(branchLen)\n        t.right(20)\n        tree(branchLen-15,t)\n        t.left(40)\n        tree(branchLen-15,t)\n        t.right(20)\n        t.backward(branchLen)\n\ndef main():\n    t = turtle.Turtle()\n    myWin = turtle.Screen()\n    t.left(90)\n    t.up()\n    t.backward(100)\n    t.down()\n    t.color(\"green\")\n    tree(75,t)\n    myWin.exitonclick()\n\nmain()\n```\n注意分叉树上的每一个分叉点是如何相应递归调用，以及分叉树是如何一路朝右绘制到最短的那个分支的。如图2所示。现在，仔细观察，程序是在整个树的右侧绘制完成后再沿着分叉返回，分叉树的右半侧如图1所示。接下来将绘制树的左侧，然而并不是直接画出最大的左侧，而是在每次到达最短枝前，先画出左分支的整个右半部分，然后再返回画左半部分。\n\n![../_images/tree1.png](http://interactivepython.org/courselib/static/pythonds/_images/tree1.png)\n\n![../_images/tree2.png](http://interactivepython.org/courselib/static/pythonds/_images/tree2.png)\n\n分形树只是一个起点，此外，读者也应该注意到这棵树看起来并不是那么真实，因为自然界中并不会真的像计算机程序那样具有高度对称性。本章的最后将会介绍一些有趣的选项，可以使得分叉树看起来更真实。\n\n## 4.8 谢尔宾斯基三角形 ##\n\n谢尔宾斯基三角形也是一种具有自相似性的分形图形，如图三所示。谢尔宾斯基三角形是一种三向递归算法。手绘谢尔宾斯基三角形的方法很简单。从某个大的三角形开始，将这个大三角形分为4个小的三角形：连接每条边的中点；剔除掉新的4个三角形中间的那个，对剩余的三个采取同样的步骤；以此类推，不断递归循环。如果笔足够细的话，是可以无穷地画下去的。\n\n![../_images/sierpinski.png](http://interactivepython.org/courselib/static/pythonds/_images/sierpinski.png)\n\n既然这个算法可以无限运行，那就必须得找出约束条件。这里被设置为了任意的划分次数，有时这被称为相似性维数。每次进行递归调用，就将维数减1直到为0。代码如可执行代码1所示。\n\n**可执行代码1:绘制谢尔宾斯基三角形**\n```Python\nimport turtle\n\ndef drawTriangle(points,color,myTurtle):\n    myTurtle.fillcolor(color)\n    myTurtle.up()\n    myTurtle.goto(points[0][0],points[0][1])\n    myTurtle.down()\n    myTurtle.begin_fill()\n    myTurtle.goto(points[1][0],points[1][1])\n    myTurtle.goto(points[2][0],points[2][1])\n    myTurtle.goto(points[0][0],points[0][1])\n    myTurtle.end_fill()\n\ndef getMid(p1,p2):\n    return ( (p1[0]+p2[0]) / 2, (p1[1] + p2[1]) / 2)\n\ndef sierpinski(points,degree,myTurtle):\n    colormap = ['blue','red','green','white','yellow',\n                'violet','orange']\n    drawTriangle(points,colormap[degree],myTurtle)\n    if degree > 0:\n        sierpinski([points[0],\n                        getMid(points[0], points[1]),\n                        getMid(points[0], points[2])],\n                   degree-1, myTurtle)\n        sierpinski([points[1],\n                        getMid(points[0], points[1]),\n                        getMid(points[1], points[2])],\n                   degree-1, myTurtle)\n        sierpinski([points[2],\n                        getMid(points[2], points[1]),\n                        getMid(points[0], points[2])],\n                   degree-1, myTurtle)\n\ndef main():\n   myTurtle = turtle.Turtle()\n   myWin = turtle.Screen()\n   myPoints = [[-100,-50],[0,100],[100,-50]]\n   sierpinski(myPoints,3,myTurtle)\n   myWin.exitonclick()\n\nmain()\n```\n代码1即是按前文所述思想写出来的。sierpinski做的第一件事是绘制最外部的三角形。接下来，进行了三次递归调用，每一次都是用来通过连接中点来获得新的三角形。这里又用了标准的海龟库。可以通过在Python提示符里输入help('turtle')来细究turtle库中可用的方法。\n\n仔细研究代码，想想这些三角形的绘制顺序。确切地来说，绘制顺序取决于初始的设定，这里假设顺序是左下，上，右下。考虑到sierpinski函数调用其本身的方式，sierpinski先是沿最短路线直接到达可以绘制的最小的左下角的三角形，再返过来绘制其它的剩余部分：先是按类似的方式直接向最小的、最顶部的三角形前进；最后再绘制右下角的最小的三角形。\n\n有时候根据函数调用的示意图来理解递归算法是很有用的。如图4所示，本例中的递归算法总是先向左边前进。黑线表示正在运行的，灰色的表示没有运行的，越靠近图4的底部，三角形越小。函数每次执行都消耗一个相似维度。\n\n",[[1526053654183,["Re@Re.local",[[1,9812,"到达最"]],[9812,9812],[9815,9815]]],[1526053654586,["Re@Re.local",[[-1,9814,"最"]],[9815,9815],[9814,9814]]],[1526053657162,["Re@Re.local",[[1,9814,"最底部做"]],[9814,9814],[9818,9818]]],[1526053657246,["Re@Re.local",[[-1,9817,"做"]],[9818,9818],[9817,9817]]],[1526053658596,["Re@Re.local",[[1,9817,"左边"]],[9817,9817],[9819,9819]]],[1526053659040,["Re@Re.local",[[-1,9818,"边"]],[9819,9819],[9818,9818]]],[1526053670238,["Re@Re.local",[[1,9818,"边的"]],[9818,9818],[9820,9820]]],[1526053675455,["Re@Re.local",[[1,9824,"，回"]],[9824,9824],[9826,9826]]],[1526053676117,["Re@Re.local",[[-1,9825,"回"]],[9826,9826],[9825,9825]]],[1526053681653,["Re@Re.local",[[1,9825,"将继续绘制中间"]],[9825,9825],[9832,9832]]],[1526054272588,[null,[[-1,9820,"\n\n，回"],[1,9824,"三角形后，"],[1,9831,"\n\n"]],[9820,9820],[9833,9833]]],[1526054272588,[null,[[1,9820,"\n\n，回"],[-1,9820,"三角形后，"],[-1,9832,"\n\n"]],[9833,9833],[9820,9820]]],[1526054241043,["Re@Re.local",[[1,9832,"d "]],[9832,9832],[9834,9834]]],[1526054241765,["Re@Re.local",[[-1,9832,"d "]],[9834,9834],[9832,9832]]],[1526054242358,["Re@Re.local",[[1,9832,"de "]],[9832,9832],[9835,9835]]],[1526054242988,["Re@Re.local",[[-1,9832,"de "]],[9835,9835],[9832,9832]]],[1526054243474,["Re@Re.local",[[1,9832,"de "]],[9832,9832],[9835,9835]]],[1526054244052,["Re@Re.local",[[-1,9832,"de "]],[9835,9835],[9832,9832]]],[1526054268796,["Re@Re.local",[[1,9832,"的三角形，并以此类推，"]],[9832,9832],[9843,9843]]],[1526054269366,["Re@Re.local",[[-1,9842,"，"]],[9843,9843],[9842,9842]]],[1526054269666,["Re@Re.local",[[1,9842,"。"]],[9842,9842],[9843,9843]]],[1526054269935,["Re@Re.local",[[1,9845,"\n"]],[9843,9843],[9844,9844]]],[1526054270118,["Re@Re.local",[[1,9846,"\n"]],[9844,9844],[9845,9845]]],[1526054332909,[null,[[-1,9820,"\n\n，回"],[1,9824,"三角形后，"],[-1,9831,"d"],[1,9845,"\n\n"]],[9820,9820],[9847,9847]]],[1526054332909,[null,[[1,9820,"\n\n，回"],[-1,9820,"三角形后，"],[1,9832,"d"],[-1,9845,"\n\n"]],[9847,9847],[9820,9820]]],[1526054284685,["Re@Re.local",[[1,9845,"![../_images/stCallTree.png](http://interactivepython.org/courselib/static/pythonds/_images/stCallTree.png)"]],[9845,9845],[9952,9952]]],[1526054286258,["Re@Re.local",[[1,9954,"\n"]],[9952,9952],[9953,9953]]],[1526054286525,["Re@Re.local",[[1,9955,"\n"]],[9953,9953],[9954,9954]]],[1526054325188,["Re@Re.local",[[1,9954,"sierpinski函数很大程度上是基于getMid函数的。getMid函数接收两个"]],[9954,9954],[9996,9996]]],[1526054394590,[null,[[-1,9820,"\n\n，回"],[1,9824,"三角形后，"],[-1,9831,"d"],[1,9996,"\n\n"]],[9820,9820],[9998,9998]]],[1526054394590,[null,[[1,9820,"\n\n，回"],[-1,9820,"三角形后，"],[1,9832,"d"],[-1,9996,"\n\n"]],[9998,9998],[9820,9820]]],[1526054337579,["Re@Re.local",[[1,9996,"参数作为断电"]],[9996,9996],[10002,10002]]],[1526054338720,["Re@Re.local",[[-1,10000,"断电"]],[10002,10002],[10000,10000]]],[1526054340872,["Re@Re.local",[[1,10000,"端点，"]],[10000,10000],[10003,10003]]],[1526054572905,[null,[[-1,9820,"\n\n，回"],[1,9824,"三角形后，"],[-1,9831,"d"],[1,10003,"\n\n"]],[9820,9820],[10005,10005]]],[1526054572906,[null,[[1,9820,"\n\n，回"],[-1,9820,"三角形后，"],[1,9832,"d"],[-1,10003,"\n\n"]],[10005,10005],[9820,9820]]],[1526054544660,["Re@Re.local",[[1,10003,"返回两者的中点。此外，可执行代码1中使用了begin_fill和end_fill方法来绘制灰色的"]],[10003,10003],[10051,10051]]],[1526054545398,["Re@Re.local",[[-1,10048,"灰色的"]],[10051,10051],[10048,10048]]],[1526054546468,["Re@Re.local",[[1,10048,"填充"]],[10048,10048],[10050,10050]]],[1526054551206,["Re@Re.local",[[-1,10048,"填充"]],[10050,10050],[10048,10048]]],[1526054551968,["Re@Re.local",[[1,10048,"袋"]],[10048,10048],[10049,10049]]],[1526054552235,["Re@Re.local",[[-1,10048,"袋"]],[10049,10049],[10048,10048]]],[1526054555535,["Re@Re.local",[[1,10048,"带填充色的三角形。"]],[10048,10048],[10057,10057]]],[1526054555787,["Re@Re.local",[[1,10059,"\n"]],[10057,10057],[10058,10058]]],[1526054556147,["Re@Re.local",[[1,10060,"\n"]],[10058,10058],[10059,10059]]],[1526054571585,["Re@Re.local",[[1,10059,"## 4.9 复杂递归问题 ##"]],[10059,10059],[10075,10075]]],[1526054571822,["Re@Re.local",[[1,10077,"\n"]],[10075,10075],[10076,10076]]],[1526054572054,["Re@Re.local",[[1,10078,"\n"]],[10076,10076],[10077,10077]]],[1526054632857,[null,[[-1,9820,"\n\n，回"],[1,9824,"三角形后，"],[-1,9831,"d"],[1,10077,"\n\n"]],[9820,9820],[10079,10079]]],[1526054632857,[null,[[1,9820,"\n\n，回"],[-1,9820,"三角形后，"],[1,9832,"d"],[-1,10077,"\n\n"]],[10079,10079],[9820,9820]]],[1526054576658,["Re@Re.local",[[1,10078,"前几姐"]],[10078,10078],[10081,10081]]],[1526054577029,["Re@Re.local",[[-1,10080,"姐"]],[10081,10081],[10080,10080]]],[1526054585207,["Re@Re.local",[[1,10080,"节中，本书讨论了一些相对"]],[10080,10080],[10092,10092]]],[1526054752926,[null,[[-1,9820,"\n\n，回"],[1,9824,"三角形后，"],[-1,9831,"d"],[1,10077,"在"],[-1,10079,"姐"],[1,10092,"\n\n"]],[9820,9820],[10094,10094]]],[1526054752926,[null,[[1,9820,"\n\n，回"],[-1,9820,"三角形后，"],[1,9832,"d"],[-1,10077,"在"],[1,10080,"姐"],[-1,10092,"\n\n"]],[10094,10094],[9820,9820]]],[1526054715524,["Re@Re.local",[[1,10092,"简单的问题并且使用了徒刑"]],[10092,10092],[10104,10104]]],[1526054725893,["Re@Re.local",[[-1,10097,"并且使用了徒刑"]],[10104,10104],[10097,10097]]],[1526054732516,["Re@Re.local",[[1,10094,"并且图形上比较"]],[10094,10094],[10101,10101]]],[1526054734761,["Re@Re.local",[[-1,10099,"比较"]],[10101,10101],[10099,10099]]],[1526054735924,["Re@Re.local",[[1,10099,"很有趣"]],[10099,10099],[10102,10102]]],[1526054751878,["Re@Re.local",[[1,10105,"来帮助读者理解递归。在本届中"]],[10105,10105],[10119,10119]]],[1526054752175,["Re@Re.local",[[-1,10117,"届中"]],[10119,10119],[10117,10117]]],[1526054813004,[null,[[-1,9820,"\n\n，回"],[1,9824,"三角形后，"],[-1,9831,"d"],[1,10077,"在"],[-1,10079,"姐"],[1,10117,"\n\n"]],[9820,9820],[10119,10119]]],[1526054813004,[null,[[1,9820,"\n\n，回"],[-1,9820,"三角形后，"],[1,9832,"d"],[-1,10077,"在"],[1,10080,"姐"],[-1,10117,"\n\n"]],[10119,10119],[9820,9820]]],[1526054772535,["Re@Re.local",[[1,10117,"节中，将研究一些使用迭代是"]],[10117,10117],[10130,10130]]],[1526054772659,["Re@Re.local",[[-1,10129,"是"]],[10130,10130],[10129,10129]]],[1526054782695,["Re@Re.local",[[1,10129,"法那你一节"]],[10129,10129],[10134,10134]]],[1526054783322,["Re@Re.local",[[-1,10130,"那你一节"]],[10134,10134],[10130,10130]]],[1526054786677,["Re@Re.local",[[1,10130,"难以解决的问题"]],[10130,10130],[10137,10137]]],[1526054787035,["Re@Re.local",[[-1,10135,"问题"]],[10137,10137],[10135,10135]]],[1526054790755,["Re@Re.local",[[1,10135,"然而用"]],[10135,10135],[10138,10138]]],[1526054790875,["Re@Re.local",[[-1,10137,"用"]],[10138,10138],[10137,10137]]],[1526054793017,["Re@Re.local",[[1,10137,"却可以用"]],[10137,10137],[10141,10141]]],[1526054797607,["Re@Re.local",[[-1,10140,"用"]],[10141,10141],[10140,10140]]],[1526054807765,["Re@Re.local",[[1,10140,"用递归法优雅而简洁地解决"]],[10140,10140],[10152,10152]]],[1526054811020,["Re@Re.local",[[-1,10134,"的"]],[10135,10135],[10134,10134]]],[1526054812548,["Re@Re.local",[[1,10151,"的"]],[10151,10151],[10152,10152]]],[1526054872896,[null,[[-1,9820,"\n\n，回"],[1,9824,"三角形后，"],[-1,9831,"d"],[1,10077,"在"],[-1,10079,"姐"],[1,10152,"\n\n"]],[9820,9820],[10154,10154]]],[1526054872896,[null,[[1,9820,"\n\n，回"],[-1,9820,"三角形后，"],[1,9832,"d"],[-1,10077,"在"],[1,10080,"姐"],[-1,10152,"\n\n"]],[10154,10154],[9820,9820]]],[1526054838790,["Re@Re.local",[[1,10154,"。z"]],[10154,10154],[10156,10156]]],[1526054839134,["Re@Re.local",[[-1,10155,"z"]],[10156,10156],[10155,10155]]],[1526054840980,["Re@Re.local",[[1,10155,"在自后"]],[10155,10155],[10158,10158]]],[1526054841474,["Re@Re.local",[[-1,10156,"自后"]],[10158,10158],[10156,10156]]],[1526054848589,["Re@Re.local",[[1,10156,"最后，将讲解一个看起来"]],[10156,10156],[10167,10167]]],[1526054850071,["Re@Re.local",[[-1,10164,"看起来"]],[10167,10167],[10164,10164]]],[1526054852418,["Re@Re.local",[[1,10164,"看起来能股"]],[10164,10164],[10169,10169]]],[1526054852841,["Re@Re.local",[[-1,10166,"来能股"]],[10169,10169],[10166,10166]]],[1526054858640,["Re@Re.local",[[1,10166,"来似乎能用递归法解决然而"]],[10166,10166],[10178,10178]]],[1526054859393,["Re@Re.local",[[-1,10176,"然而"]],[10178,10178],[10176,10176]]],[1526054865509,["Re@Re.local",[[1,10176,"但实际上并不能的问题来"]],[10176,10176],[10187,10187]]],[1526054866467,["Re@Re.local",[[-1,10186,"来"]],[10187,10187],[10186,10186]]],[1526054870698,["Re@Re.local",[[1,10186,"。"]],[10186,10186],[10187,10187]]],[1526054871002,["Re@Re.local",[[1,10189,"\n"]],[10187,10187],[10188,10188]]],[1526054871201,["Re@Re.local",[[1,10190,"\n"]],[10188,10188],[10189,10189]]],[1526054932897,[null,[[-1,9820,"\n\n，回"],[1,9824,"三角形后，"],[-1,9831,"d"],[1,10077,"在"],[-1,10079,"姐"],[1,10152,"问题"],[-1,10153,"z"],[-1,10155,"自"],[1,10189,"\n\n"]],[9820,9820],[10191,10191]]],[1526054932897,[null,[[1,9820,"\n\n，回"],[-1,9820,"三角形后，"],[1,9832,"d"],[-1,10077,"在"],[1,10080,"姐"],[-1,10152,"问题"],[1,10155,"z"],[1,10156,"自"],[-1,10189,"\n\n"]],[10191,10191],[9820,9820]]],[1526054889621,["Re@Re.local",[[1,10189,"## Hanoi "]],[10189,10189],[10198,10198]]],[1526054890347,["Re@Re.local",[[-1,10197," "]],[10198,10198],[10197,10197]]],[1526054893000,["Re@Re.local",[[1,10197,"塔"]],[10197,10197],[10198,10198]]],[1526054894354,["Re@Re.local",[[-1,10192,"Hanoi塔"]],[10198,10198],[10192,10192]]],[1526054904988,["Re@Re.local",[[1,10192,"河内（Hanoi）塔问题 ##"]],[10192,10192],[10207,10207]]],[1526054905134,["Re@Re.local",[[1,10209,"\n"]],[10207,10207],[10208,10208]]],[1526054905319,["Re@Re.local",[[1,10210,"\n"]],[10208,10208],[10209,10209]]],[1526054908977,["Re@Re.local",[[1,10192,"4.10 "]],[10192,10192],[10197,10197]]],[1526054931060,["Re@Re.local",[[1,10214,"河内塔问题由法国数学家Edouard于1883年提出。"]],[10214,10214],[10241,10241]]],[1526054992986,[null,[[-1,9820,"\n\n，回"],[1,9824,"三角形后，"],[-1,9831,"d"],[1,10077,"在"],[-1,10079,"姐"],[1,10152,"问题"],[-1,10153,"z"],[-1,10155,"自"],[1,10241,"\n\n"]],[9820,9820],[10243,10243]]],[1526054992986,[null,[[1,9820,"\n\n，回"],[-1,9820,"三角形后，"],[1,9832,"d"],[-1,10077,"在"],[1,10080,"姐"],[-1,10152,"问题"],[1,10155,"z"],[1,10156,"自"],[-1,10241,"\n\n"]],[10243,10243],[9820,9820]]],[1526054960634,["Re@Re.local",[[-1,10240,"。"]],[10241,10241],[10240,10240]]],[1526054962997,["Re@Re.local",[[1,10240,"，她"]],[10240,10240],[10242,10242]]],[1526054965385,["Re@Re.local",[[-1,10241,"她"]],[10242,10242],[10241,10241]]],[1526054967350,["Re@Re.local",[[1,10241,"他"]],[10241,10241],[10242,10242]]],[1526054968322,["Re@Re.local",[[-1,10240,"，他"]],[10242,10242],[10240,10240]]],[1526054968793,["Re@Re.local",[[1,10240,"。"]],[10240,10240],[10241,10241]]],[1526054978582,["Re@Re.local",[[-1,10240,"。"]],[10241,10241],[10240,10240]]],[1526054982970,["Re@Re.local",[[1,10240,"，是受到一个"]],[10240,10240],[10246,10246]]],[1526054985489,["Re@Re.local",[[-1,10240,"，是受到一个"]],[10246,10246],[10240,10240]]],[1526054992699,["Re@Re.local",[[1,10238,"受到印度教中"]],[10238,10238],[10244,10244]]],[1526055052926,[null,[[-1,9820,"\n\n，回"],[1,9824,"三角形后，"],[-1,9831,"d"],[1,10077,"在"],[-1,10079,"姐"],[1,10152,"问题"],[-1,10153,"z"],[-1,10155,"自"],[1,10246,"\n\n"]],[9820,9820],[10248,10248]]],[1526055052927,[null,[[1,9820,"\n\n，回"],[-1,9820,"三角形后，"],[1,9832,"d"],[-1,10077,"在"],[1,10080,"姐"],[-1,10152,"问题"],[1,10155,"z"],[1,10156,"自"],[-1,10246,"\n\n"]],[10248,10248],[9820,9820]]],[1526054995263,["Re@Re.local",[[1,10245,"一个股市"]],[10245,10245],[10249,10249]]],[1526054995960,["Re@Re.local",[[-1,10247,"股市"]],[10249,10249],[10247,10247]]],[1526054997981,["Re@Re.local",[[1,10247,"故事启发而"]],[10247,10247],[10252,10252]]],[1526054999565,["Re@Re.local",[[1,10254,"。"]],[10254,10254],[10255,10255]]],[1526055000079,["Re@Re.local",[[-1,10254,"。"]],[10255,10255],[10254,10254]]],[1526055016546,["Re@Re.local",[[1,10254,"，在故事中，年轻的"]],[10254,10254],[10263,10263]]],[1526055017626,["Re@Re.local",[[-1,10262,"的"]],[10263,10263],[10262,10262]]],[1526055034752,["Re@Re.local",[[1,10262,"僧侣将被予以考题。在开始的"]],[10262,10262],[10275,10275]]],[1526055035471,["Re@Re.local",[[-1,10271,"在开始的"]],[10275,10275],[10271,10271]]],[1526055048773,["Re@Re.local",[[1,10271,"在最开始，僧侣们回π"]],[10271,10271],[10281,10281]]],[1526055112977,[null,[[-1,9820,"\n\n，回"],[1,9824,"三角形后，"],[-1,9831,"d"],[1,10077,"在"],[-1,10079,"姐"],[1,10152,"问题"],[-1,10153,"z"],[-1,10155,"自"],[-1,10244,"提"],[1,10245,"的"],[1,10252,"提"],[-1,10253,"。"],[1,10281,"\n\n"]],[9820,9820],[10283,10283]]],[1526055112978,[null,[[1,9820,"\n\n，回"],[-1,9820,"三角形后，"],[1,9832,"d"],[-1,10077,"在"],[1,10080,"姐"],[-1,10152,"问题"],[1,10155,"z"],[1,10156,"自"],[1,10244,"提"],[-1,10244,"的"],[-1,10252,"提"],[1,10254,"。"],[-1,10281,"\n\n"]],[10283,10283],[9820,9820]]],[1526055059364,["Re@Re.local",[[-1,10282,"\n"]],[10282,10282],[10281,10281]]],[1526055059795,["Re@Re.local",[[-1,10280,"π"]],[10281,10281],[10280,10280]]],[1526055065253,["Re@Re.local",[[1,10280,"得到3跟杆"]],[10280,10280],[10285,10285]]],[1526055066569,["Re@Re.local",[[-1,10283,"跟杆"]],[10285,10285],[10283,10283]]],[1526055070011,["Re@Re.local",[[1,10283,"根杆，"]],[10283,10283],[10286,10286]]],[1526055105135,["Re@Re.local",[[-1,10285,"，"]],[10286,10286],[10285,10285]]],[1526055107041,["Re@Re.local",[[1,10285,"以及"]],[10285,10285],[10287,10287]]],[1526055172895,[null,[[-1,9820,"\n\n，回"],[1,9824,"三角形后，"],[-1,9831,"d"],[1,10077,"在"],[-1,10079,"姐"],[1,10152,"问题"],[-1,10153,"z"],[-1,10155,"自"],[-1,10244,"提"],[1,10245,"的"],[1,10252,"提"],[-1,10253,"。"],[1,10287,"\n"]],[9820,9820],[10288,10288]]],[1526055172896,[null,[[1,9820,"\n\n，回"],[-1,9820,"三角形后，"],[1,9832,"d"],[-1,10077,"在"],[1,10080,"姐"],[-1,10152,"问题"],[1,10155,"z"],[1,10156,"自"],[1,10244,"提"],[-1,10244,"的"],[-1,10252,"提"],[1,10254,"。"],[-1,10287,"\n"]],[10288,10288],[9820,9820]]],[1526055116168,["Re@Re.local",[[1,10287,"64根进"]],[10287,10287],[10291,10291]]],[1526055116590,["Re@Re.local",[[-1,10289,"根进"]],[10291,10291],[10289,10289]]],[1526055139697,["Re@Re.local",[[1,10289,"个金圆盘，每个"]],[10289,10289],[10296,10296]]],[1526055140486,["Re@Re.local",[[-1,10293,"，每个"]],[10296,10296],[10293,10293]]],[1526055171939,["Re@Re.local",[[1,10293,"，每个盘都比其下面的盘小一些。他们的任务是将这64个"]],[10293,10293],[10319,10319]]],[1526055232909,[null,[[-1,9820,"\n\n，回"],[1,9824,"三角形后，"],[-1,9831,"d"],[1,10077,"在"],[-1,10079,"姐"],[1,10152,"问题"],[-1,10153,"z"],[-1,10155,"自"],[-1,10244,"提"],[1,10245,"的"],[1,10252,"提"],[-1,10253,"。"],[1,10319,"\n"]],[9820,9820],[10320,10320]]],[1526055232910,[null,[[1,9820,"\n\n，回"],[-1,9820,"三角形后，"],[1,9832,"d"],[-1,10077,"在"],[1,10080,"姐"],[-1,10152,"问题"],[1,10155,"z"],[1,10156,"自"],[1,10244,"提"],[-1,10244,"的"],[-1,10252,"提"],[1,10254,"。"],[-1,10319,"\n"]],[10320,10320],[9820,9820]]],[1526055232412,["Re@Re.local",[[1,10319,"盘从这"]],[10319,10319],[10322,10322]]],[1526055292937,[null,[[-1,9820,"\n\n，回"],[1,9824,"三角形后，"],[-1,9831,"d"],[1,10077,"在"],[-1,10079,"姐"],[1,10152,"问题"],[-1,10153,"z"],[-1,10155,"自"],[-1,10244,"提"],[1,10245,"的"],[1,10252,"提"],[-1,10253,"。"],[1,10322,"\n"]],[9820,9820],[10323,10323]]],[1526055292937,[null,[[1,9820,"\n\n，回"],[-1,9820,"三角形后，"],[1,9832,"d"],[-1,10077,"在"],[1,10080,"姐"],[-1,10152,"问题"],[1,10155,"z"],[1,10156,"自"],[1,10244,"提"],[-1,10244,"的"],[-1,10252,"提"],[1,10254,"。"],[-1,10322,"\n"]],[10323,10323],[9820,9820]]],[1526055233116,["Re@Re.local",[[-1,10321,"这"]],[10322,10322],[10321,10321]]],[1526055235307,["Re@Re.local",[[1,10321,"一饿"]],[10321,10321],[10323,10323]]],[1526055235621,["Re@Re.local",[[-1,10321,"一饿"]],[10323,10323],[10321,10321]]],[1526055239820,["Re@Re.local",[[1,10321,"其中的"]],[10321,10321],[10324,10324]]],[1526055240720,["Re@Re.local",[[-1,10321,"其中的"]],[10324,10324],[10321,10321]]],[1526055255672,["Re@Re.local",[[1,10321,"一个盘移动到另外一个盘去，并且由两个"]],[10321,10321],[10339,10339]]],[1526055256508,["Re@Re.local",[[-1,10336,"由两个"]],[10339,10339],[10336,10336]]],[1526055258998,["Re@Re.local",[[1,10336,"有两条"]],[10336,10336],[10339,10339]]],[1526055259138,["Re@Re.local",[[-1,10338,"条"]],[10339,10339],[10338,10338]]],[1526055261664,["Re@Re.local",[[1,10338,"个限制条件。"]],[10338,10338],[10344,10344]]],[1526055265440,["Re@Re.local",[[-1,10343,"。"]],[10344,10344],[10343,10343]]],[1526055267269,["Re@Re.local",[[1,10343,"：内粗="]],[10343,10343],[10347,10347]]],[1526055267942,["Re@Re.local",[[-1,10344,"内粗="]],[10347,10347],[10344,10344]]],[1526055269882,["Re@Re.local",[[1,10344,"每次及"]],[10344,10344],[10347,10347]]],[1526055269993,["Re@Re.local",[[-1,10346,"及"]],[10347,10347],[10346,10346]]],[1526055277040,["Re@Re.local",[[1,10346,"只允许移动一个盘；"]],[10346,10346],[10355,10355]]],[1526055283971,["Re@Re.local",[[-1,10354,"；"]],[10355,10355],[10354,10354]]],[1526055291291,["Re@Re.local",[[1,10354,"；禁止将大盘"]],[10354,10354],[10360,10360]]],[1526055352913,[null,[[-1,9820,"\n\n，回"],[1,9824,"三角形后，"],[-1,9831,"d"],[1,10077,"在"],[-1,10079,"姐"],[1,10152,"问题"],[-1,10153,"z"],[-1,10155,"自"],[-1,10244,"提"],[1,10245,"的"],[1,10252,"提"],[-1,10253,"。"],[1,10360,"\n"]],[9820,9820],[10361,10361]]],[1526055352914,[null,[[1,9820,"\n\n，回"],[-1,9820,"三角形后，"],[1,9832,"d"],[-1,10077,"在"],[1,10080,"姐"],[-1,10152,"问题"],[1,10155,"z"],[1,10156,"自"],[1,10244,"提"],[-1,10244,"的"],[-1,10252,"提"],[1,10254,"。"],[-1,10360,"\n"]],[10361,10361],[9820,9820]]],[1526055317671,["Re@Re.local",[[1,10362,"小盘之上。传说中，\t"]],[10362,10362],[10372,10372]]],[1526055318921,["Re@Re.local",[[-1,10371,"\t"]],[10372,10372],[10371,10371]]],[1526055320860,["Re@Re.local",[[1,10371,"ruguo"]],[10371,10371],[10376,10376]]],[1526055322033,["Re@Re.local",[[-1,10371,"ruguo"]],[10376,10376],[10371,10371]]],[1526055412931,[null,[[-1,9820,"\n\n，回"],[1,9824,"三角形后，"],[-1,9831,"d"],[1,10077,"在"],[-1,10079,"姐"],[1,10152,"问题"],[-1,10153,"z"],[-1,10155,"自"],[-1,10244,"提"],[1,10245,"的"],[1,10252,"提"],[-1,10253,"。"],[1,10360,"置于"],[-1,10369,"\tr"],[1,10371,"\n"]],[9820,9820],[10372,10372]]],[1526055412931,[null,[[1,9820,"\n\n，回"],[-1,9820,"三角形后，"],[1,9832,"d"],[-1,10077,"在"],[1,10080,"姐"],[-1,10152,"问题"],[1,10155,"z"],[1,10156,"自"],[1,10244,"提"],[-1,10244,"的"],[-1,10252,"提"],[1,10254,"。"],[-1,10360,"置于"],[1,10371,"\tr"],[-1,10371,"\n"]],[10372,10372],[9820,9820]]],[1526055396200,["Re@Re.local",[[1,10367,"僧侣们夜以继日地努力，每秒移动一个盘子。"]],[10367,10367],[10387,10387]]],[1526055411593,["Re@Re.local",[[1,10391,"当他们完成此任务时，"]],[10391,10391],[10401,10401]]],[1526055472918,[null,[[-1,9820,"\n\n，回"],[1,9824,"三角形后，"],[-1,9831,"d"],[1,10077,"在"],[-1,10079,"姐"],[1,10152,"问题"],[-1,10153,"z"],[-1,10155,"自"],[-1,10244,"提"],[1,10245,"的"],[1,10252,"提"],[-1,10253,"。"],[1,10360,"置于"],[-1,10365,"传说"],[1,10387,"传说"],[-1,10389,"\tr"],[1,10401,"\n"]],[9820,9820],[10402,10402]]],[1526055472918,[null,[[1,9820,"\n\n，回"],[-1,9820,"三角形后，"],[1,9832,"d"],[-1,10077,"在"],[1,10080,"姐"],[-1,10152,"问题"],[1,10155,"z"],[1,10156,"自"],[1,10244,"提"],[-1,10244,"的"],[-1,10252,"提"],[1,10254,"。"],[-1,10360,"置于"],[1,10367,"传说"],[-1,10387,"传说"],[1,10391,"\tr"],[-1,10401,"\n"]],[10402,10402],[9820,9820]]],[1526055413412,["Re@Re.local",[[1,10401,"世界"]],[10401,10401],[10403,10403]]],[1526055414165,["Re@Re.local",[[-1,10401,"世界"]],[10403,10403],[10401,10401]]],[1526055417257,["Re@Re.local",[[1,10401,"世界将会会饿"]],[10401,10401],[10407,10407]]],[1526055418178,["Re@Re.local",[[-1,10405,"会饿"]],[10407,10407],[10405,10405]]],[1526055419655,["Re@Re.local",[[1,10405,"毁灭。"]],[10405,10405],[10408,10408]]],[1526055419956,["Re@Re.local",[[1,10409,"\n"]],[10408,10408],[10409,10409]]],[1526055420136,["Re@Re.local",[[1,10410,"\n"]],[10409,10409],[10410,10410]]],[1526055438085,["Re@Re.local",[[-1,10410,"\n"],[1,10411,"传说很厚去"]],[10410,10410],[10415,10415]]],[1526055438403,["Re@Re.local",[[-1,10413,"厚去"]],[10415,10415],[10413,10413]]],[1526055441766,["Re@Re.local",[[1,10413,"有趣，单限制"]],[10413,10413],[10419,10419]]],[1526055442758,["Re@Re.local",[[-1,10416,"单限制"]],[10419,10419],[10416,10416]]],[1526055446085,["Re@Re.local",[[1,10416,"但限制"]],[10416,10416],[10419,10419]]],[1526055446703,["Re@Re.local",[[-1,10417,"限制"]],[10419,10419],[10417,10417]]],[1526055450229,["Re@Re.local",[[1,10417,"现在也不用单行世界"]],[10417,10417],[10426,10426]]],[1526055450940,["Re@Re.local",[[-1,10422,"单行世界"]],[10426,10426],[10422,10422]]],[1526055455104,["Re@Re.local",[[1,10422,"担心世纪末日的问题。"]],[10422,10422],[10432,10432]]],[1526055592966,[null,[[-1,9820,"\n\n，回"],[1,9824,"三角形后，"],[-1,9831,"d"],[1,10077,"在"],[-1,10079,"姐"],[1,10152,"问题"],[-1,10153,"z"],[-1,10155,"自"],[-1,10244,"提"],[1,10245,"的"],[1,10252,"提"],[-1,10253,"。"],[1,10360,"置于"],[-1,10365,"传说"],[1,10387,"传说"],[-1,10389,"\tr"]],[9820,9820],[10389,10389]]],[1526055592966,[null,[[1,9820,"\n\n，回"],[-1,9820,"三角形后，"],[1,9832,"d"],[-1,10077,"在"],[1,10080,"姐"],[-1,10152,"问题"],[1,10155,"z"],[1,10156,"自"],[1,10244,"提"],[-1,10244,"的"],[-1,10252,"提"],[1,10254,"。"],[-1,10360,"置于"],[1,10367,"传说"],[-1,10387,"传说"],[1,10391,"\tr"]],[10389,10389],[9820,9820]]],[1526055578207,["Re@Re.local",[[1,10432,"为了"]],[10432,10432],[10434,10434]]],[1526055582947,["Re@Re.local",[[-1,10432,"为了"]],[10434,10434],[10432,10432]]],[1526055585303,["Re@Re.local",[[1,10432,"毫无差错的"]],[10432,10432],[10437,10437]]],[1526055586108,["Re@Re.local",[[-1,10432,"毫无差错的"]],[10437,10437],[10432,10432]]],[1526055591167,["Re@Re.local",[[1,10432,"正确地完成该任务"]],[10432,10432],[10440,10440]]],[1526055652958,[null,[[-1,9820,"\n\n，回"],[1,9824,"三角形后，"],[-1,9831,"d"],[1,10077,"在"],[-1,10079,"姐"],[1,10152,"问题"],[-1,10153,"z"],[-1,10155,"自"],[-1,10244,"提"],[1,10245,"的"],[1,10252,"提"],[-1,10253,"。"],[1,10360,"置于"],[-1,10365,"传说"],[1,10387,"传说"],[-1,10389,"\tr"]],[9820,9820],[10389,10389]]],[1526055652958,[null,[[1,9820,"\n\n，回"],[-1,9820,"三角形后，"],[1,9832,"d"],[-1,10077,"在"],[1,10080,"姐"],[-1,10152,"问题"],[1,10155,"z"],[1,10156,"自"],[1,10244,"提"],[-1,10244,"的"],[-1,10252,"提"],[1,10254,"。"],[-1,10360,"置于"],[1,10367,"传说"],[-1,10387,"传说"],[1,10391,"\tr"]],[10389,10389],[9820,9820]]],[1526055604624,["Re@Re.local",[[1,10442,"##"]],[10442,10442],[10444,10444]]],[1526055605582,["Re@Re.local",[[-1,10442,"##"]],[10444,10444],[10442,10442]]],[1526055631415,["Re@Re.local",[[1,10442,"$$2^64-1=18446744073709551615$$此"]],[10442,10442],[10474,10474]]],[1526055633910,["Re@Re.local",[[-1,10473,"此"]],[10474,10474],[10473,10473]]],[1526055635260,["Re@Re.local",[[1,10473,"次"]],[10473,10473],[10474,10474]]],[1526055640416,["Re@Re.local",[[-1,10446,"64"]],[10448,10448],[10446,10446]]],[1526055641928,["Re@Re.local",[[1,10446,"（64）"]],[10446,10446],[10450,10450]]],[1526055647325,["Re@Re.local",[[-1,10445,"^（64）"]],[10450,10450],[10445,10445]]],[1526055652663,["Re@Re.local",[[1,10445,"^(64"]],[10445,10445],[10449,10449]]],[1526055714001,[null,[[-1,9820,"\n\n，回"],[1,9824,"三角形后，"],[-1,9831,"d"],[1,10077,"在"],[-1,10079,"姐"],[1,10152,"问题"],[-1,10153,"z"],[-1,10155,"自"],[-1,10244,"提"],[1,10245,"的"],[1,10252,"提"],[-1,10253,"。"],[1,10360,"置于"],[-1,10365,"传说"],[1,10387,"传说"],[-1,10389,"\tr"],[-1,10440,"##"],[1,10442,"需要"]],[9820,9820],[10444,10444]]],[1526055714001,[null,[[1,9820,"\n\n，回"],[-1,9820,"三角形后，"],[1,9832,"d"],[-1,10077,"在"],[1,10080,"姐"],[-1,10152,"问题"],[1,10155,"z"],[1,10156,"自"],[1,10244,"提"],[-1,10244,"的"],[-1,10252,"提"],[1,10254,"。"],[-1,10360,"置于"],[1,10367,"传说"],[-1,10387,"传说"],[1,10391,"\tr"],[1,10440,"##"],[-1,10440,"需要"]],[10444,10444],[9820,9820]]],[1526055654619,["Re@Re.local",[[-1,10446,"(64"]],[10449,10449],[10446,10446]]],[1526055657241,["Re@Re.local",[[1,10446,"{}"]],[10446,10446],[10448,10448]]],[1526055659799,["Re@Re.local",[[1,10447,"64"]],[10447,10447],[10449,10449]]],[1526055666548,["Re@Re.local",[[-1,10443,"$"]],[10444,10444],[10443,10443]]],[1526055668702,["Re@Re.local",[[-1,10473,"$"]],[10474,10474],[10473,10473]]],[1526055673725,["Re@Re.local",[[1,10474,"热"]],[10474,10474],[10475,10475]]],[1526055673844,["Re@Re.local",[[-1,10474,"热"]],[10475,10475],[10474,10474]]],[1526055693239,["Re@Re.local",[[1,10474,"移动。1喵"]],[10474,10474],[10479,10479]]],[1526055693564,["Re@Re.local",[[-1,10478,"喵"]],[10479,10479],[10478,10478]]],[1526055703709,["Re@Re.local",[[1,10478,"秒移动1次，也需要5849421="]],[10478,10478],[10495,10495]]],[1526055704296,["Re@Re.local",[[-1,10493,"1="]],[10495,10495],[10493,10493]]],[1526055708737,["Re@Re.local",[[1,10493,"417355年。"]],[10493,10493],[10501,10501]]],[1526055774024,[null,[[-1,9820,"\n\n，回"],[1,9824,"三角形后，"],[-1,9831,"d"],[1,10077,"在"],[-1,10079,"姐"],[1,10152,"问题"],[-1,10153,"z"],[-1,10155,"自"],[-1,10244,"提"],[1,10245,"的"],[1,10252,"提"],[-1,10253,"。"],[1,10360,"置于"],[-1,10365,"传说"],[1,10387,"传说"],[-1,10389,"\tr"],[-1,10440,"##"],[1,10442,"需要"]],[9820,9820],[10444,10444]]],[1526055774024,[null,[[1,9820,"\n\n，回"],[-1,9820,"三角形后，"],[1,9832,"d"],[-1,10077,"在"],[1,10080,"姐"],[-1,10152,"问题"],[1,10155,"z"],[1,10156,"自"],[1,10244,"提"],[-1,10244,"的"],[-1,10252,"提"],[1,10254,"。"],[-1,10360,"置于"],[1,10367,"传说"],[-1,10387,"传说"],[1,10391,"\tr"],[1,10440,"##"],[-1,10440,"需要"]],[10444,10444],[9820,9820]]],[1526055740269,["Re@Re.local",[[1,10501,"先是"]],[10501,10501],[10503,10503]]],[1526055740764,["Re@Re.local",[[-1,10501,"先是"]],[10503,10503],[10501,10501]]],[1526055752884,["Re@Re.local",[[1,10501,"显然，实际所需时间比咋"]],[10501,10501],[10512,10512]]],[1526055752998,["Re@Re.local",[[-1,10511,"咋"]],[10512,10512],[10511,10511]]],[1526055757223,["Re@Re.local",[[1,10511,"这更长。"]],[10511,10511],[10515,10515]]],[1526055757437,["Re@Re.local",[[1,10515,"\n\n"]],[10515,10515],[10516,10516]]],[1526055757687,["Re@Re.local",[[1,10517,"\n"]],[10516,10516],[10517,10517]]],[1526055763361,["Re@Re.local",[[-1,10517,"\n"],[1,10518,"图1"]],[10517,10517],[10519,10519]]],[1526055764240,["Re@Re.local",[[-1,10517,"图1"]],[10519,10519],[10517,10517]]],[1526055834048,[null,[[-1,9820,"\n\n，回"],[1,9824,"三角形后，"],[-1,9831,"d"],[1,10077,"在"],[-1,10079,"姐"],[1,10152,"问题"],[-1,10153,"z"],[-1,10155,"自"],[-1,10244,"提"],[1,10245,"的"],[1,10252,"提"],[-1,10253,"。"],[1,10360,"置于"],[-1,10365,"传说"],[1,10387,"传说"],[-1,10389,"\tr"],[-1,10440,"##"],[1,10442,"需要"]],[9820,9820],[10444,10444]]],[1526055834048,[null,[[1,9820,"\n\n，回"],[-1,9820,"三角形后，"],[1,9832,"d"],[-1,10077,"在"],[1,10080,"姐"],[-1,10152,"问题"],[1,10155,"z"],[1,10156,"自"],[1,10244,"提"],[-1,10244,"的"],[-1,10252,"提"],[1,10254,"。"],[-1,10360,"置于"],[1,10367,"传说"],[-1,10387,"传说"],[1,10391,"\tr"],[1,10440,"##"],[-1,10440,"需要"]],[10444,10444],[9820,9820]]],[1526055828135,["Re@Re.local",[[1,10517,"\n\n"]],[10517,10517],[10518,10518]]],[1526055828951,["Re@Re.local",[[-1,10518,"\n"]],[10518,10518],[10517,10517]]],[1526055829928,["Re@Re.local",[[-1,10517,"\n"],[1,10518,"ru "]],[10517,10517],[10520,10520]]],[1526055830709,["Re@Re.local",[[-1,10517,"ru "]],[10520,10520],[10517,10517]]],[1526055831024,["Re@Re.local",[[-1,10516,"\n"],[1,10517,"t"]],[10517,10517],[10516,10517]]],[1526055831284,["Re@Re.local",[[-1,10516,"t"]],[10516,10517],[0,0]]],[1526055894024,[null,[[-1,9820,"\n\n，回"],[1,9824,"三角形后，"],[-1,9831,"d"],[1,10077,"在"],[-1,10079,"姐"],[1,10152,"问题"],[-1,10153,"z"],[-1,10155,"自"],[-1,10244,"提"],[1,10245,"的"],[1,10252,"提"],[-1,10253,"。"],[1,10360,"置于"],[-1,10365,"传说"],[1,10387,"传说"],[-1,10389,"\tr"],[-1,10440,"##"],[1,10442,"需要"]],[9820,9820],[10444,10444]]],[1526055894024,[null,[[1,9820,"\n\n，回"],[-1,9820,"三角形后，"],[1,9832,"d"],[-1,10077,"在"],[1,10080,"姐"],[-1,10152,"问题"],[1,10155,"z"],[1,10156,"自"],[1,10244,"提"],[-1,10244,"的"],[-1,10252,"提"],[1,10254,"。"],[-1,10360,"置于"],[1,10367,"传说"],[-1,10387,"传说"],[1,10391,"\tr"],[1,10440,"##"],[-1,10440,"需要"]],[10444,10444],[9820,9820]]],[1526055835535,["Re@Re.local",[[1,10516,"\n\n"]],[10516,10516],[10517,10517]]],[1526055835749,["Re@Re.local",[[1,10518,"\n"]],[10517,10517],[10518,10518]]],[1526055837456,["Re@Re.local",[[-1,10518,"\n"],[1,10519,"如图"]],[10518,10518],[10520,10520]]],[1526055841240,["Re@Re.local",[[-1,10517,"\n"],[1,10518,"1所示"]],[10517,10518],[10520,10520]]],[1526055841827,["Re@Re.local",[[-1,10518,"所示"]],[10520,10520],[10518,10518]]],[1526055844394,["Re@Re.local",[[1,10520,"碎片时"]],[10520,10520],[10523,10523]]],[1526055844826,["Re@Re.local",[[-1,10520,"碎片时"]],[10523,10523],[10520,10520]]],[1526055845872,["Re@Re.local",[[1,10520,"所示，"]],[10520,10520],[10523,10523]]],[1526055861879,["Re@Re.local",[[-1,10517,"1如图所示，"]],[10523,10523],[10517,10517]]],[1526055862365,["Re@Re.local",[[-1,10516,"\n"],[1,10517,"t"]],[10517,10517],[10516,10517]]],[1526055862524,["Re@Re.local",[[1,10517,"u"]],[10516,10517],[10516,10518]]],[1526055862698,["Re@Re.local",[[-1,10516,"tu"],[1,10518,"图"]],[10516,10518],[10517,10517]]],[1526055862851,["Re@Re.local",[[-1,10516,"图"],[1,10517,"\n"]],[10517,10517],[10516,10516]]],[1526055863478,["Re@Re.local",[[1,10517,"\n"]],[10516,10516],[10517,10517]]],[1526055865154,["Re@Re.local",[[-1,10517,"\n"],[1,10518,"图1掩饰"]],[10517,10517],[10521,10521]]],[1526055865955,["Re@Re.local",[[-1,10519,"掩饰"]],[10521,10521],[10519,10519]]],[1526055872816,["Re@Re.local",[[1,10519,"演示了从第一个柱子"]],[10519,10519],[10528,10528]]],[1526055877449,["Re@Re.local",[[-1,10525,"个柱子"]],[10528,10528],[10525,10525]]],[1526055879796,["Re@Re.local",[[1,10525,"根杆"]],[10525,10525],[10527,10527]]],[1526055956124,[null,[[-1,9820,"\n\n，回"],[1,9824,"三角形后，"],[-1,9831,"d"],[1,10077,"在"],[-1,10079,"姐"],[1,10152,"问题"],[-1,10153,"z"],[-1,10155,"自"],[-1,10244,"提"],[1,10245,"的"],[1,10252,"提"],[-1,10253,"。"],[1,10360,"置于"],[-1,10365,"传说"],[1,10387,"传说"],[-1,10389,"\tr"],[-1,10440,"##"],[1,10442,"需要"]],[9820,9820],[10444,10444]]],[1526055956125,[null,[[1,9820,"\n\n，回"],[-1,9820,"三角形后，"],[1,9832,"d"],[-1,10077,"在"],[1,10080,"姐"],[-1,10152,"问题"],[1,10155,"z"],[1,10156,"自"],[1,10244,"提"],[-1,10244,"的"],[-1,10252,"提"],[1,10254,"。"],[-1,10360,"置于"],[1,10367,"传说"],[-1,10387,"传说"],[1,10391,"\tr"],[1,10440,"##"],[-1,10440,"需要"]],[10444,10444],[9820,9820]]],[1526055904145,["Re@Re.local",[[1,10527,"移动到第三根杆时，中间的杆"]],[10527,10527],[10540,10540]]],[1526055909473,["Re@Re.local",[[-1,10538,"的杆"]],[10540,10540],[10538,10538]]],[1526055934856,["Re@Re.local",[[1,10538,"杆上的盘子的情况。注意到，根"]],[10538,10538],[10552,10552]]],[1526055934990,["Re@Re.local",[[-1,10551,"根"]],[10552,10552],[10551,10551]]],[1526055937734,["Re@Re.local",[[1,10551,"按照规则的"]],[10551,10551],[10556,10556]]],[1526055938640,["Re@Re.local",[[-1,10553,"规则的"]],[10556,10556],[10553,10553]]],[1526055939873,["Re@Re.local",[[1,10553,"规定，"]],[10553,10553],[10556,10556]]],[1526056016043,[null,[[-1,9820,"\n\n，回"],[1,9824,"三角形后，"],[-1,9831,"d"],[1,10077,"在"],[-1,10079,"姐"],[1,10152,"问题"],[-1,10153,"z"],[-1,10155,"自"],[-1,10244,"提"],[1,10245,"的"],[1,10252,"提"],[-1,10253,"。"],[1,10360,"置于"],[-1,10365,"传说"],[1,10387,"传说"],[-1,10389,"\tr"],[-1,10440,"##"],[1,10442,"需要"]],[9820,9820],[10444,10444]]],[1526056016043,[null,[[1,9820,"\n\n，回"],[-1,9820,"三角形后，"],[1,9832,"d"],[-1,10077,"在"],[1,10080,"姐"],[-1,10152,"问题"],[1,10155,"z"],[1,10156,"自"],[1,10244,"提"],[-1,10244,"的"],[-1,10252,"提"],[1,10254,"。"],[-1,10360,"置于"],[1,10367,"传说"],[-1,10387,"传说"],[1,10391,"\tr"],[1,10440,"##"],[-1,10440,"需要"]],[10444,10444],[9820,9820]]],[1526055960054,["Re@Re.local",[[1,10556,"圆盘"]],[10556,10556],[10558,10558]]],[1526055960591,["Re@Re.local",[[-1,10556,"圆盘"]],[10558,10558],[10556,10556]]],[1526055961839,["Re@Re.local",[[1,10556,"没跟尬"]],[10556,10556],[10559,10559]]],[1526055962287,["Re@Re.local",[[-1,10556,"没跟尬"]],[10559,10559],[10556,10556]]],[1526055969580,["Re@Re.local",[[1,10556,"每根杆上的盘子都是从小"]],[10556,10556],[10567,10567]]],[1526055970268,["Re@Re.local",[[-1,10565,"从小"]],[10567,10567],[10565,10565]]],[1526055974031,["Re@Re.local",[[1,10565,"从上到下一次边"]],[10565,10565],[10572,10572]]],[1526055974481,["Re@Re.local",[[-1,10569,"一次边"]],[10572,10572],[10569,10569]]],[1526055976257,["Re@Re.local",[[1,10569,"依次比"]],[10569,10569],[10572,10572]]],[1526055977150,["Re@Re.local",[[-1,10571,"比"]],[10572,10572],[10571,10571]]],[1526055978836,["Re@Re.local",[[1,10571,"变小的"]],[10571,10571],[10574,10574]]],[1526055983682,["Re@Re.local",[[-1,10572,"小的"]],[10574,10574],[10572,10572]]],[1526055984947,["Re@Re.local",[[1,10572,"大。"]],[10572,10572],[10574,10574]]],[1526055985280,["Re@Re.local",[[-1,10573,"。"]],[10574,10574],[10573,10573]]],[1526055985785,["Re@Re.local",[[1,10573,"的。"]],[10573,10573],[10575,10575]]]]],["e2c7ac63-c8d4-4cad-8691-0f9fa92ae341",1526574952827,"递归\n===\n\n\n# 4 递归 #\n\n## 4.1 目标 ##\n\n本章目标如下：\n\n- 了解：某些难以处理的问题也许用递归可以轻松解决。\n- 掌握：设计递归式程序。\n- 了解并应用：递归三大法则。\n- 实现：问题的递归式描述。\n- 了解：计算机系统中递归的实现\n\n## 4.2 何为递归 ##\n\n递归是一种解决问题的方法，将一个问题分解为越来越小的子问题，直到问题的规模小到可以被轻松解决。通常来说，递归中有函数对自己本身的调用。从表面上来看似乎并没有什么特别指出，然而递归算法对于某些问题具有一针见血的气消。\n\n\n## 4.3 对数字列表求和 ##\n\n首先来看一个并不需要递归也可以解决的问题。假设相对一个数字列表求和，比如[1,3,5,7,9]。迭代式算法如可执行代码1所示。函数使用求和变量（theSum）来计算列表中数字之和。\n\n** 可执行代码1： 迭代求和 **\n```Python\ndef listsum(numList):\n    theSum = 0\n    for i in numList:\n        theSum = theSum + i\n    return theSum\n\nprint(listsum([1,3,5,7,9]))\n\n```\n那么，现在假设不可以使用while或者for循环，那又该如何做？数学家可能会想到加法本身是一种接受两个参数的函数，即一对数字。对于该列表求和问题便可转化为多对数字求和问题。先写为全括号化的表达式，比如：\n$$((((1+3)+5)+7)+9)$$\n也可以反方向来：\n$$(1+(3+(5+(7+9))))$$\n注意到最里面的括号组（7+9）是不需要迭代或者其它特殊结构便可解决的问题。实际上，可以将求和问题写为以下简化形式：\n$$total= (1+(3+(5+(7+9))))\ntotal= (1+(3+(5+16)))\ntotal= (1+(3+21))\ntotal= (1+24)\ntotal= 25$$\n如何将这种思想转化为Python程序？首先，将求和问题按Python列表的方式来考虑。可能读者会认为对列表的求和即是列表中第一个元素numList[0]与其它所有元素numList[1:]之和，以函数形式写出即为：\n$$listSum(numList)=first(numList)+listSum(rest(numList))$$\n在以上表达式中，first(numList)返回列表中第一个元素，而rest(numList)返回的是去除了第一个元素的原列表（也是一个列表）。用Python表达式可以写为如可执行代码2：\n\n** 可执行代码2：递归求和（第一次递归） **\n```Python\ndef listsum(numList):\n   if len(numList) == 1:\n        return numList[0]\n   else:\n        return numList[0] + listsum(numList[1:])\n\nprint(listsum([1,3,5,7,9]))\n\n```\n在这段代码中，有些地方需要注意。首先，在行2检查了列表是否仅有1个元素。这一判定很关键，它是控制函数结束的必要语句。长度为1的列表求和显然便是其本身。其次，在行5该函数调用了它自己本身。这便是将listsum归为递归算法的原因。递归函数是一种调用自身的函数。\n\n图1演示了对列表[1,3,5,7,9]求和的递归调用。读者可以将这些有序调用认为是一次次的问题简化过程。每调用一次，便转化为解决一个更小更容易的问题，知道问题规模不能再缩小。\n\n![image](http://interactivepython.org/courselib/static/pythonds/_images/sumlistIn.png)\n\n当问题已经最简化时，便开始将每个问题的答案拼装起来直到原始问题被解决。如图2所示，listsum沿着调用顺序返回。当listsum回到了最顶部的问题时，原始问题便得到了解决。\n\n![image](http://interactivepython.org/courselib/static/pythonds/_images/sumlistOut.png)\n\n## 4.4 递归三定律 ##\n\n跟阿西莫夫（Asimov）机器人三定律一样，递归算法也必须遵守三条重要定律：\n\n1. 递归算法必须要有个**约束条件**作为出口。\n2. 递归算法必须不断改变自身状态并向约束条件演进。\n3. 递归算法必须递归地调用自身。\n\n现在来仔细研究一下这三条定律以及在listsum中是如何得到体现的。首先，约束条件是终止算法递归的条件。一般来说，约束条件都是问题规模已经小到足以直接解决的时候。在listsum算法中，约束条件是长度为1的列表。\n\n为满足第二条定律，必须设法改变当前状态并使得算法向约束条件靠近。状态的改变意味着，算法使用的一些数据将被改变。通常来说，即为问题规模以某种方法缩小。在listsum算法中，基本数据结构是列表，因此需要在列表上想办法实现状态的改变。因为约束条件是列表长度为1，向约束条件演进的一种很自然的实现方式就是缩小列表，这便是可执行代码在行5所做的事：将列表长度缩小，然后将其作为参数来调用listsum本身。\n\n最后一条定律是算法必须调用自己本身，这是递归根本的定义。递归对于许多初学者来说是个有些难懂的概念。读者应当已经发现，递归函数是一种很优秀的方法，借助它可以将大规模的问题拆分为小问题，解决这些小问题只需要写一个简单的函数来对它们处理即可。表面看起来，递归似乎是陷入了一种循环。但实际上它在逻辑上并不是循环的，递归的逻辑是用优美简洁的表达式将问题拆分为更小更简单的。\n\n在本章的剩余部分将进一步研究递归，每个例子中都着重于用如何利用三定律来设计算法。\n\n## 4.5 将整数转化为以任何进制表示的字符串 ##\n\n假设需要将整数转化为二进制与十六进制之间的某进制表示的字符串形式。比如，整数10的十进制字符串为\"10\"，而二进制字符串为\"1010\"。有很多算法可以解决该问题，包括前文说过的以栈来解决，但是用递归思想来解决该问题还是最简洁的。\n\n接下来以十进制的整数768为例演示一个具体的问题。假设用一组字符串来对应前10个数字，比如说convString = \"0123456789\" 。通过在字符串中检索，很容易便可将10以内的数字进行转化，例如整数9，那么字符串便是convString[9]，即\"9\"。将769拆分为三个单独的数字7，6，9，将其转化为字符串也很简单了。小于10的整数看起来是不错的约束条件。\n\n确定基本进制后，整个算法将包括3部分：\n\n1. 将原数字转化为一系列单数字。\n2. 利用检索将单数字转为字符串。\n3. 将各单数字字符串连接起来，形成最终的结果。\n\n下一步是实现状态的改变，使得程序向约束条件靠近。因为研究对象是数字，不妨回想一想什么数学运算可以减少数字，最有可能的是减法和除法。虽然说减法也许是可行的，但有些令人困扰的是在这里如何确定减法操作的两个对象。而除法则清晰很多。\n\n将整数769除以10，可以得到76余9，这两个数字很有用。首先，余数是一个小于进制（10）的数，因此可以直接使用检索转化为字符串。其次，得到了一个小于初始数字的数，这便向约束条件靠近了一步。现在需要做得便是将76转化为它的字符表示。同样，利用除法可以得到7余6。最后，问题退化为转化7。流程如图3所示。注意，需要被保存的数被放置在示意图右侧。\n\n![image](http://interactivepython.org/courselib/static/pythonds/_images/toStr.png)\n\n可执行代码1实现了上述的算法。\n\n** 可执行代码1：迭代算法——整数转化为字符串 **\n```Python\ndef toStr(n,base):\n   convertString = \"0123456789ABCDEF\"\n   if n < base:\n      return convertString[n]\n   else:\n      return toStr(n//base,base) + convertString[n%base]\n\nprint(toStr(1453,16))\n```\n注意在第3行，检测了约束条件，即n小于目标进制。一旦检测到约束条件，便停止递归，然后根据convertString序列返回结果。在行6，通过递归调用和除法降低问题规模来同时满足了第2和第3定律。\n\n再来追踪一次该算法，这次将整数10转化为2进制形式字符串（\"1010\"）\n\n![image](http://interactivepython.org/courselib/static/pythonds/_images/toStrBase2.png)\n\n如图4所示，得到了所需结果，似乎数字的顺序错了。但是实际上，算法运行是正常的，因为是在行6中是先进行的递归调用，然后再将余数的字符串标识加上。\n\n## 4.6 栈桢：实现递归 ##\n\n设想，如果不按上文那样将递归调用的单字符结果依次连接起来得到结果，而是将算法修改为在递归调用之前将字符串压入栈中。调整后的算法如可执行代码1所示。\n** 可执行代码1：利用栈实现整数转化为字符串 **\n```Python\nfrom pythonds.basic.stack import Stack\n\nrStack = Stack()\n\ndef toStr(n,base):\n    convertString = \"0123456789ABCDEF\"\n    while n > 0:\n        if n < base:\n            rStack.push(convertString[n])\n        else:\n            rStack.push(convertString[n % base])\n        n = n // base\n    res = \"\"\n    while not rStack.isEmpty():\n        res = res + str(rStack.pop())\n    return res\n\nprint(toStr(1453,16))\n\n```\n每一次调用toStr，都将一个字符放入栈中。就前一个例子来说，可以发现在第4次调用后，得到的栈如图5所示。注意，现在可以直接将字符从栈中推出，再将他们链接为最后的结果\"1010\"即可。\n\n![../_images/recstack.png](http://interactivepython.org/courselib/static/pythonds/_images/recstack.png)\n\n此例说明了Python是如何实现递归函数调用的。在Python中，调用一个函数时，系统会分配一个栈桢用来处理该函数中的局部变量。当函数执行完毕，返回值被放入栈顶等待被调用的函数处理。如图6所示。\n\n![../_images/newcallstack.png](http://interactivepython.org/courselib/static/pythonds/_images/newcallstack.png)\n\n注意对toStr(2//2, 2)的调用在栈中返回了值“1”。该返回值在表达式“1” + convertString[2%2]用来取代函数调用toStr(1,2)，执行后得到的结果“10”又被放在栈顶。这样一来，Python的调用栈取代了代码4中所使用的栈。在该例子中，读者可以认为栈顶的返回值替代了累加变量的作用。\n\n栈桢也为对应函数使用的变量规定了作用域。虽然多次调用同一个函数，每一次调用都为函数的局部变量创建一个新的作用域。\n\n## 4.7 图示递归 ##\n\n在上一节中介绍了一些使用递归算法可以轻松解决的问题，然而很难给出递归函数运行的可视化方法或者思维导图，这就使得递归算法不是那么容易掌握的。本节将研究一些递归的例子并画出示意图。通过研究这些示意图的形成过程，便会对递归过程有更加深刻的理解。\n\n这里使用Python的海龟图像模块turtle进行可视化。turtle模块是所有Python版本的标配并且很容易上手，其符号也很简单。创建一只海龟，该海龟可以前进/后退/左转/右转等，并且可以控制尾巴的抬起和放下。当海龟的尾巴放下且在移动时，便会绘制出线。为了提高观赏性，可以改变海龟尾巴的宽度以及画笔的颜色。\n\n下面简单说明turtle作图的基础，这里会利用turtle绘制一个螺旋线。如可执行代码所示。引入turtle模块后，创建一个turtle实例。当turtle生成后，为其创建一个窗口用来绘图。接下来定义drawSpiral函数。该函数的约束条件是待画线的长度（以len参数表示）减少到小于或等于0。若长度仍大于0，则命令海龟前进len单位然后右转90度。通过再次调用drawSpiral并且传入减小后的长度实现递归。在可执行代码1的最后，调用了函数myWin.exitonclick()，这是窗口的一个很便利的方法，它将海龟置于待机状态直到在窗口内发生点击操作，然后页面才清空并退出。\n\n**可执行代码1：使用海龟绘制递归螺旋线**\n```Python\nimport turtle\n\nmyTurtle = turtle.Turtle()\nmyWin = turtle.Screen()\n\ndef drawSpiral(myTurtle, lineLen):\n    if lineLen > 0:\n        myTurtle.forward(lineLen)\n        myTurtle.right(90)\n        drawSpiral(myTurtle,lineLen-5)\n\ndrawSpiral(myTurtle,100)\nmyWin.exitonclick()\n```\n\n这就是海龟模块中所需要了解的一些基本知识，据此便可以绘制漂亮的团了。下一个程序将绘制一个分形树。分形是数学的一个分支，它与递归有许多相似点。对于某个图形，无论放大多少倍，其基本形状都是一致的，此时便称之为**分形**。很多自然现象具有分形特点，比如海岸线，雪花，山脉，树以及灌木等，这使得CG（Computer Generated）电影具有了可行性。接下来的例子中将绘制一颗分形树。\n\n为了画出这棵树，考虑如何用分形思想来描述一棵树是很有用的。回想一下，分形就是无论放大多少倍都具有相似性的东西。将这种思想用来研究树或者灌木，可以发现即使是小树枝也具有与整棵树一致的形状和特点。据此可以将树定义为一个左右分叉，且左右各有一个更小的“树”（分叉）。引入递归的概念，那么树便是这些递归的小树构成的。\n\n现在将上述思路转换为Python代码。代码1利用海龟来绘制了一颗分形树。可以发现，行5和行7进行了递归调用。行5在右转20度后进行了递归调用，这便是前文提到的右分叉；在行7，海龟在左转40度后进行了另一次递归调用，这即为左分叉。此外，注意到每次调用tree后，都对branchlen参数进行了减法运算，这保证了递归树是越来越小的。读者应该也注意到了行2的**if**语句即是约束条件，在branchLen过小时触发。\n\n**代码1**\n```Python\ndef tree(branchLen,t):\n    if branchLen > 5:\n        t.forward(branchLen)\n        t.right(20)\n        tree(branchLen-15,t)\n        t.left(40)\n        tree(branchLen-10,t)\n        t.right(20)\n        t.backward(branchLen)\n```\n完整的代码如可执行代码2所示。在运行代码前，思考一下是分叉树是如何绘制的。仔细观察这些调用，想想分叉树是如何展开的。它是同时对称地绘制左右分叉还是先右再左？\n\n**可执行代码2:递归绘制分叉树**\n```Python\ndef tree(branchLen,t):\n    if branchLen > 5:\n        t.forward(branchLen)\n        t.right(20)\n        tree(branchLen-15,t)\n        t.left(40)\n        tree(branchLen-15,t)\n        t.right(20)\n        t.backward(branchLen)\n\ndef main():\n    t = turtle.Turtle()\n    myWin = turtle.Screen()\n    t.left(90)\n    t.up()\n    t.backward(100)\n    t.down()\n    t.color(\"green\")\n    tree(75,t)\n    myWin.exitonclick()\n\nmain()\n```\n注意分叉树上的每一个分叉点是如何相应递归调用，以及分叉树是如何一路朝右绘制到最短的那个分支的。如图2所示。现在，仔细观察，程序是在整个树的右侧绘制完成后再沿着分叉返回，分叉树的右半侧如图1所示。接下来将绘制树的左侧，然而并不是直接画出最大的左侧，而是在每次到达最短枝前，先画出左分支的整个右半部分，然后再返回画左半部分。\n\n![../_images/tree1.png](http://interactivepython.org/courselib/static/pythonds/_images/tree1.png)\n\n![../_images/tree2.png](http://interactivepython.org/courselib/static/pythonds/_images/tree2.png)\n\n分形树只是一个起点，此外，读者也应该注意到这棵树看起来并不是那么真实，因为自然界中并不会真的像计算机程序那样具有高度对称性。本章的最后将会介绍一些有趣的选项，可以使得分叉树看起来更真实。\n\n## 4.8 谢尔宾斯基三角形 ##\n\n谢尔宾斯基三角形也是一种具有自相似性的分形图形，如图三所示。谢尔宾斯基三角形是一种三向递归算法。手绘谢尔宾斯基三角形的方法很简单。从某个大的三角形开始，将这个大三角形分为4个小的三角形：连接每条边的中点；剔除掉新的4个三角形中间的那个，对剩余的三个采取同样的步骤；以此类推，不断递归循环。如果笔足够细的话，是可以无穷地画下去的。\n\n![../_images/sierpinski.png](http://interactivepython.org/courselib/static/pythonds/_images/sierpinski.png)\n\n既然这个算法可以无限运行，那就必须得找出约束条件。这里被设置为了任意的划分次数，有时这被称为相似性维数。每次进行递归调用，就将维数减1直到为0。代码如可执行代码1所示。\n\n**可执行代码1:绘制谢尔宾斯基三角形**\n```Python\nimport turtle\n\ndef drawTriangle(points,color,myTurtle):\n    myTurtle.fillcolor(color)\n    myTurtle.up()\n    myTurtle.goto(points[0][0],points[0][1])\n    myTurtle.down()\n    myTurtle.begin_fill()\n    myTurtle.goto(points[1][0],points[1][1])\n    myTurtle.goto(points[2][0],points[2][1])\n    myTurtle.goto(points[0][0],points[0][1])\n    myTurtle.end_fill()\n\ndef getMid(p1,p2):\n    return ( (p1[0]+p2[0]) / 2, (p1[1] + p2[1]) / 2)\n\ndef sierpinski(points,degree,myTurtle):\n    colormap = ['blue','red','green','white','yellow',\n                'violet','orange']\n    drawTriangle(points,colormap[degree],myTurtle)\n    if degree > 0:\n        sierpinski([points[0],\n                        getMid(points[0], points[1]),\n                        getMid(points[0], points[2])],\n                   degree-1, myTurtle)\n        sierpinski([points[1],\n                        getMid(points[0], points[1]),\n                        getMid(points[1], points[2])],\n                   degree-1, myTurtle)\n        sierpinski([points[2],\n                        getMid(points[2], points[1]),\n                        getMid(points[0], points[2])],\n                   degree-1, myTurtle)\n\ndef main():\n   myTurtle = turtle.Turtle()\n   myWin = turtle.Screen()\n   myPoints = [[-100,-50],[0,100],[100,-50]]\n   sierpinski(myPoints,3,myTurtle)\n   myWin.exitonclick()\n\nmain()\n```\n代码1即是按前文所述思想写出来的。sierpinski做的第一件事是绘制最外部的三角形。接下来，进行了三次递归调用，每一次都是用来通过连接中点来获得新的三角形。这里又用了标准的海龟库。可以通过在Python提示符里输入help('turtle')来细究turtle库中可用的方法。\n\n仔细研究代码，想想这些三角形的绘制顺序。确切地来说，绘制顺序取决于初始的设定，这里假设顺序是左下，上，右下。考虑到sierpinski函数调用其本身的方式，sierpinski先是沿最短路线直接到达可以绘制的最小的左下角的三角形，再返过来绘制其它的剩余部分：先是按类似的方式直接向最小的、最顶部的三角形前进；最后再绘制右下角的最小的三角形。\n\n有时候根据函数调用的示意图来理解递归算法是很有用的。如图4所示，本例中的递归算法总是先向左边前进。黑线表示正在运行的，灰色的表示没有运行的，越靠近图4的底部，三角形越小。函数每次执行都消耗一个相似维度。到达最底部左边的三角形后，将继续绘制中间的三角形，并以此类推。\n\n![../_images/stCallTree.png](http://interactivepython.org/courselib/static/pythonds/_images/stCallTree.png)\n\nsierpinski函数很大程度上是基于getMid函数的。getMid函数接收两个参数作为端点，返回两者的中点。此外，可执行代码1中使用了begin_fill和end_fill方法来绘制带填充色的三角形。\n\n## 4.9 复杂递归问题 ##\n\n在前几节中，本书讨论了一些相对简单并且图形上很有趣的问题来帮助读者理解递归。在本节中，将研究一些使用迭代法难以解决然而却可以用递归法优雅而简洁地解决的问题。在最后，将讲解一个看起来似乎能用递归法解决但实际上并不能的问题。\n\n## 4.10 河内（Hanoi）塔问题 ##\n\n河内塔问题由法国数学家Edouard于1883年受到印度教中的一个故事启发而提出，在故事中，年轻僧侣将被予以考题。在最开始，僧侣们回得到3根杆以及64个金圆盘，每个盘都比其下面的盘小一些。他们的任务是将这64个盘从一个盘移动到另外一个盘去，并且有两个限制条件：每次只允许移动一个盘；禁止将大盘置于小盘之上。僧侣们夜以继日地努力，每秒移动一个盘子。传说中，当他们完成此任务时，世界将会毁灭。\n\n传说很有趣，但现在也不用担心世纪末日的问题。正确地完成该任务需要$2^{64}-1=18446744073709551615$次移动。1秒移动1次，也需要584942417355年。显然，实际所需时间比这更长。\n\n图1演示了从第一根杆移动到第三根杆时，中间杆上的盘子的情况。注意到，按照规定，每根杆上的盘子都是从上到下依次变大的。",[[1526574917020,["Re@Re.local",[[-1,10279,"回"]],[10280,10280],[10279,10279]]],[1526574917691,["Re@Re.local",[[1,10279,"hui"]],[10279,10279],[10282,10282]]],[1526574918378,["Re@Re.local",[[-1,10279,"hui"]],[10282,10282],[10279,10279]]],[1526574919612,["Re@Re.local",[[1,10279,"会"]],[10279,10279],[10280,10280]]],[1526574956185,["Re@Re.local",[[1,10575,"若果你只"]],[10575,10575],[10579,10579]]],[1526574956873,["Re@Re.local",[[-1,10575,"若果你只"]],[10579,10579],[10575,10575]]],[1526574961778,["Re@Re.local",[[1,10575,"如果你之前没有接触过这种"]],[10575,10575],[10587,10587]]],[1526575511932,["Re@Re.local",[[-1,10585,"这种"]],[10587,10587],[10585,10585]]],[1526575513645,["Re@Re.local",[[1,10585,"gai"]],[10585,10585],[10588,10588]]],[1526575514276,["Re@Re.local",[[-1,10585,"gai"]],[10588,10588],[10585,10585]]],[1526575521867,["Re@Re.local",[[1,10585,"该问题，那不妨现在来思考一下"]],[10585,10585],[10599,10599]]],[1526575523178,["Re@Re.local",[[-1,10595,"思考一下"]],[10599,10599],[10595,10595]]],[1526575546904,["Re@Re.local",[[1,10595,"尝试一下。你不"]],[10595,10595],[10602,10602]]],[1526575547708,["Re@Re.local",[[-1,10599,"。你不"]],[10602,10602],[10599,10599]]],[1526575644247,["Re@Re.local",[[1,10599,"."]],[10599,10599],[10600,10600]]],[1526575774504,["Re@Re.local",[[1,10600,"bi"]],[10600,10600],[10602,10602]]],[1526575775347,["Re@Re.local",[[-1,10599,".bi"]],[10602,10602],[10599,10599]]],[1526575785198,["Re@Re.local",[[1,10599,"。不必想想"]],[10599,10599],[10604,10604]]],[1526575785623,["Re@Re.local",[[-1,10602,"想想"]],[10604,10604],[10602,10602]]],[1526575797216,["Re@Re.local",[[1,10602,"真的想象盘子和杆什么的，"]],[10602,10602],[10614,10614]]],[1526575807133,["Re@Re.local",[[1,10614,"一堆书或者一堆纸即可。"]],[10614,10614],[10625,10625]]],[1526575807405,["Re@Re.local",[[1,10625,"\n\n"]],[10625,10625],[10626,10626]]],[1526575807639,["Re@Re.local",[[1,10627,"\n"]],[10626,10626],[10627,10627]]],[1526575809168,["Re@Re.local",[[1,10627,"![image](http://interactivepython.org/courselib/static/pythonds/_images/hanoi.png)"]],[10627,10627],[10709,10709]]],[1526575810781,["Re@Re.local",[[1,10710,"\n"]],[10709,10709],[10710,10710]]],[1526575811283,["Re@Re.local",[[1,10711,"\n"]],[10710,10710],[10711,10711]]],[1526575832722,["Re@Re.local",[[-1,10711,"\n"],[1,10712,"那么用递归该如何解决这个问题呢"]],[10711,10711],[10726,10726]]],[1526575833172,["Re@Re.local",[[-1,10725,"呢"]],[10726,10726],[10725,10725]]],[1526575834237,["Re@Re.local",[[1,10725,"呢"]],[10725,10725],[10726,10726]]],[1526575834843,["Re@Re.local",[[-1,10725,"呢"]],[10726,10726],[10725,10725]]],[1526575836706,["Re@Re.local",[[1,10725,"？受限"]],[10725,10725],[10728,10728]]],[1526575837293,["Re@Re.local",[[-1,10725,"？受限"]],[10728,10728],[10725,10725]]],[1526575840766,["Re@Re.local",[[1,10725,"？"]],[10725,10725],[10726,10726]]],[1526575908682,["Re@Re.local",[[1,10726,"约束条件又是什么？"]],[10726,10726],[10735,10735]]],[1526575931162,["Re@Re.local",[[1,10735,"从头开始"]],[10735,10735],[10739,10739]]],[1526575931772,["Re@Re.local",[[-1,10735,"从头开始"]],[10739,10739],[10735,10735]]],[1526575936445,["Re@Re.local",[[1,10735,"现在来从头研究下"]],[10735,10735],[10743,10743]]],[1526575937331,["Re@Re.local",[[-1,10740,"研究下"]],[10743,10743],[10740,10740]]],[1526575948571,["Re@Re.local",[[1,10740,"考虑下这个问题。假设有5个盘子"]],[10740,10740],[10755,10755]]],[1526575948874,["Re@Re.local",[[-1,10753,"盘子"]],[10755,10755],[10753,10753]]],[1526575961446,["Re@Re.local",[[1,10753,"盘子，并且开始都放在1好"]],[10753,10753],[10765,10765]]],[1526575961753,["Re@Re.local",[[-1,10763,"1好"]],[10765,10765],[10763,10763]]],[1526575974019,["Re@Re.local",[[1,10763,"杆1上。乳沟"]],[10763,10763],[10769,10769]]],[1526575974703,["Re@Re.local",[[-1,10767,"乳沟"]],[10769,10769],[10767,10767]]],[1526575978250,["Re@Re.local",[[1,10767,"如果已经知道了如何"]],[10767,10767],[10776,10776]]],[1526576038612,["Re@Re.local",[[1,10776,"将4个盘子移动到"]],[10776,10776],[10784,10784]]],[1526576073006,["Re@Re.local",[[1,10784,"杆2上，便可以轻松地将底部的盘子移动"]],[10784,10784],[10802,10802]]],[1526576073376,["Re@Re.local",[[-1,10801,"动"]],[10802,10802],[10801,10801]]],[1526576097034,["Re@Re.local",[[1,10801,"到杆3上，然后把那死"]],[10801,10801],[10811,10811]]],[1526576097125,["Re@Re.local",[[-1,10810,"死"]],[10811,10811],[10810,10810]]],[1526576098530,["Re@Re.local",[[1,10810,"4个盘子"]],[10810,10810],[10814,10814]]],[1526576125137,["Re@Re.local",[[1,10815,"杆2移动到杆3上。但是如果不"]],[10815,10815],[10829,10829]]],[1526576125675,["Re@Re.local",[[-1,10826,"如果不"]],[10829,10829],[10826,10826]]],[1526576134528,["Re@Re.local",[[1,10826,"不知道如何将"]],[10826,10826],[10832,10832]]],[1526576135219,["Re@Re.local",[[-1,10831,"将"]],[10832,10832],[10831,10831]]],[1526576137656,["Re@Re.local",[[1,10831,"移动4过热"]],[10831,10831],[10836,10836]]],[1526576138426,["Re@Re.local",[[-1,10834,"过热"]],[10836,10836],[10834,10834]]],[1526576143039,["Re@Re.local",[[1,10834,"个盘子又"]],[10834,10834],[10838,10838]]],[1526576145277,["Re@Re.local",[[-1,10829,"如何"]],[10831,10831],[10829,10829]]],[1526576146928,["Re@Re.local",[[1,10829,"怎么"]],[10829,10829],[10831,10831]]],[1526576158711,["Re@Re.local",[[1,10838,"该如何是好？那么假设知道"]],[10838,10838],[10850,10850]]],[1526576219154,[null,[[1,10814,"从"],[-1,10825,"如"]],[10814,10814],[10825,10825]]],[1526576219154,[null,[[-1,10814,"从"],[1,10826,"如"]],[10825,10825],[10814,10814]]],[1526576161708,["Re@Re.local",[[-1,10846,"假设知道"]],[10850,10850],[10846,10846]]],[1526576164099,["Re@Re.local",[[1,10846,"加入"]],[10846,10846],[10848,10848]]],[1526576164419,["Re@Re.local",[[-1,10846,"加入"]],[10848,10848],[10846,10846]]],[1526576168052,["Re@Re.local",[[1,10846,"考虑下，加入知道"]],[10846,10846],[10854,10854]]],[1526576168641,["Re@Re.local",[[-1,10850,"加入知道"]],[10854,10854],[10850,10850]]],[1526576172066,["Re@Re.local",[[1,10850,"假如知道3"]],[10850,10850],[10855,10855]]],[1526576173074,["Re@Re.local",[[-1,10854,"3"]],[10855,10855],[10854,10854]]],[1526576211737,["Re@Re.local",[[1,10854,"如何移动3个盘子的杆，"]],[10854,10854],[10865,10865]]],[1526576214472,["Re@Re.local",[[-1,10864,"，"]],[10865,10865],[10864,10864]]],[1526576216081,["Re@Re.local",[[1,10864,"...."]],[10864,10864],[10868,10868]]],[1526576216676,["Re@Re.local",[[-1,10867,"."]],[10868,10868],[10867,10867]]],[1526576218452,["Re@Re.local",[[1,10867,"以此"]],[10867,10867],[10869,10869]]],[1526576279158,[null,[[1,10814,"从"],[-1,10825,"如"]],[10814,10814],[10825,10825]]],[1526576279159,[null,[[-1,10814,"从"],[1,10826,"如"]],[10825,10825],[10814,10814]]],[1526576226820,["Re@Re.local",[[1,10869,"类推。显然读者会统一"]],[10869,10869],[10879,10879]]],[1526576227476,["Re@Re.local",[[-1,10877,"统一"]],[10879,10879],[10877,10877]]],[1526576228845,["Re@Re.local",[[1,10877,"同意，"]],[10877,10877],[10880,10880]]],[1526576235512,["Re@Re.local",[[-1,10874,"读者会同意，"]],[10880,10880],[10874,10874]]],[1526576240464,["Re@Re.local",[[1,10874,"将1个盘子的"]],[10874,10874],[10880,10880]]],[1526576241101,["Re@Re.local",[[-1,10879,"的"]],[10880,10880],[10879,10879]]],[1526576242578,["Re@Re.local",[[1,10879,"从"]],[10879,10879],[10880,10880]]],[1526576243484,["Re@Re.local",[[-1,10879,"从"]],[10880,10880],[10879,10879]]],[1526576250479,["Re@Re.local",[[1,10879,"移动到杆3是很容易的，"]],[10879,10879],[10890,10890]]],[1526576250928,["Re@Re.local",[[-1,10889,"，"]],[10890,10890],[10889,10889]]],[1526576256571,["Re@Re.local",[[1,10889,"。那么"]],[10889,10889],[10892,10892]]],[1526576257074,["Re@Re.local",[[-1,10890,"那么"]],[10892,10892],[10890,10890]]],[1526576258093,["Re@Re.local",[[1,10890,"听起"]],[10890,10890],[10892,10892]]],[1526576258344,["Re@Re.local",[[-1,10890,"听起"]],[10892,10892],[10890,10890]]],[1526576274731,["Re@Re.local",[[1,10890,"看起来似乎这就是约束条件了。"]],[10890,10890],[10904,10904]]],[1526576274959,["Re@Re.local",[[1,10904,"\n\n"]],[10904,10904],[10905,10905]]],[1526576275175,["Re@Re.local",[[1,10906,"\n"]],[10905,10905],[10906,10906]]],[1526576339160,[null,[[1,10814,"从"],[-1,10825,"如"]],[10814,10814],[10825,10825]]],[1526576339161,[null,[[-1,10814,"从"],[1,10826,"如"]],[10825,10825],[10814,10814]]],[1526576291298,["Re@Re.local",[[-1,10906,"\n"],[1,10907,"厦门"]],[10906,10906],[10908,10908]]],[1526576291725,["Re@Re.local",[[-1,10906,"厦门"]],[10908,10908],[10906,10906]]],[1526576292038,["Re@Re.local",[[-1,10905,"\n"],[1,10906,"i"]],[10906,10906],[10905,10906]]],[1526576292105,["Re@Re.local",[[1,10906," a"]],[10905,10906],[10905,10908]]],[1526576292434,["Re@Re.local",[[-1,10906," a"]],[10905,10908],[10905,10906]]],[1526576292841,["Re@Re.local",[[-1,10905,"i"]],[10905,10906],[0,0]]],[1526576293430,["Re@Re.local",[[1,10905,"\n\n"]],[10905,10905],[10906,10906]]],[1526576297935,["Re@Re.local",[[-1,10906,"\n"],[1,10907,"下面是用"]],[10906,10906],[10910,10910]]],[1526576399166,[null,[[1,10814,"从"],[-1,10825,"如"]],[10814,10814],[10825,10825]]],[1526576399166,[null,[[-1,10814,"从"],[1,10826,"如"]],[10825,10825],[10814,10814]]],[1526576373946,["Re@Re.local",[[1,10910,"·"]],[10910,10910],[10911,10911]]],[1526576375784,["Re@Re.local",[[-1,10910,"·"]],[10911,10911],[10910,10910]]],[1526576459168,[null,[[1,10814,"从"],[-1,10825,"如"]],[10814,10814],[10825,10825]]],[1526576459168,[null,[[-1,10814,"从"],[1,10826,"如"]],[10825,10825],[10814,10814]]],[1526576402243,["Re@Re.local",[[-1,10906,"下面是用"]],[10910,10910],[10906,10906]]],[1526576403903,["Re@Re.local",[[1,10906,"\n\n"]],[10906,10906],[10907,10907]]],[1526576418996,["Re@Re.local",[[-1,10907,"\n"],[1,10908,"下面用高等抽象的方法来看待"]],[10907,10907],[10920,10920]]],[1526576432106,["Re@Re.local",[[-1,10909,"用高等抽象的方法来看待"]],[10920,10920],[10909,10909]]],[1526576439383,["Re@Re.local",[[1,10909,"是对该问题的高度提"]],[10909,10909],[10918,10918]]],[1526576440748,["Re@Re.local",[[-1,10912,"问题的高度提"]],[10918,10918],[10912,10912]]],[1526576446982,["Re@Re.local",[[1,10912,"问题解法的高度提炼"]],[10912,10912],[10921,10921]]],[1526576447946,["Re@Re.local",[[-1,10919,"提炼"]],[10921,10921],[10919,10919]]],[1526576451221,["Re@Re.local",[[1,10919,"概括："]],[10919,10919],[10922,10922]]],[1526576451423,["Re@Re.local",[[1,10922,"\n\n"]],[10922,10922],[10923,10923]]],[1526576453889,["Re@Re.local",[[-1,10923,"\n"],[1,10924,"1. "]],[10923,10923],[10926,10926]]],[1526576458809,["Re@Re.local",[[1,10923,"\n"]],[10922,10922],[10923,10923]]],[1526576582130,[null,[[1,10814,"从"],[-1,10825,"如"]],[10814,10814],[10825,10825]]],[1526576582130,[null,[[-1,10814,"从"],[1,10826,"如"]],[10825,10825],[10814,10814]]],[1526576540746,["Re@Re.local",[[-1,10911,"该问题解法"]],[10916,10916],[10911,10911]]],[1526576561142,["Re@Re.local",[[1,10911,"盘子从起始杆通过中间杆移动到目标杆"]],[10911,10911],[10928,10928]]],[1526576642123,[null,[[1,10814,"从"],[-1,10825,"如"]],[10814,10814],[10825,10825]]],[1526576642123,[null,[[-1,10814,"从"],[1,10826,"如"]],[10825,10825],[10814,10814]]],[1526576628942,["Re@Re.local",[[1,10939,"利用目标杆，将"]],[10939,10939],[10946,10946]]],[1526576702131,[null,[[1,10814,"从"],[-1,10825,"如"]],[10814,10814],[10825,10825]]],[1526576702131,[null,[[-1,10814,"从"],[1,10826,"如"]],[10825,10825],[10814,10814]]],[1526576653241,["Re@Re.local",[[1,10946,"高度为 "]],[10946,10946],[10950,10950]]],[1526576654710,["Re@Re.local",[[-1,10949," "]],[10950,10950],[10949,10949]]],[1526576670278,["Re@Re.local",[[1,10933,"（设起始盘"]],[10933,10933],[10938,10938]]],[1526576670843,["Re@Re.local",[[-1,10935,"起始盘"]],[10938,10938],[10935,10935]]],[1526576676094,["Re@Re.local",[[1,10935,"盘数为Height）"]],[10935,10935],[10945,10945]]],[1526576678666,["Re@Re.local",[[1,10961," h"]],[10961,10961],[10963,10963]]],[1526576678998,["Re@Re.local",[[-1,10962,"h"]],[10963,10963],[10962,10962]]],[1526576691909,["Re@Re.local",[[1,10962,"Height - 1 的塔移动到中间杆上。"]],[10962,10962],[10983,10983]]],[1526576692460,["Re@Re.local",[[1,10983,"\n\n"]],[10983,10983],[10984,10984]]],[1526576695219,["Re@Re.local",[[-1,10984,"\n"],[1,10985,"2. 利用"]],[10984,10984],[10989,10989]]],[1526576695670,["Re@Re.local",[[-1,10987,"利用"]],[10989,10989],[10987,10987]]],[1526576700393,["Re@Re.local",[[1,10987,"将摄于的盘移动"]],[10987,10987],[10994,10994]]],[1526576702001,["Re@Re.local",[[-1,10988,"摄于的盘移动"]],[10994,10994],[10988,10988]]],[1526576762126,[null,[[1,10814,"从"],[-1,10825,"如"]],[10814,10814],[10825,10825]]],[1526576762127,[null,[[-1,10814,"从"],[1,10826,"如"]],[10825,10825],[10814,10814]]],[1526576705465,["Re@Re.local",[[1,10988,"剩余的盘子"]],[10988,10988],[10993,10993]]],[1526576706634,["Re@Re.local",[[-1,10992,"子"]],[10993,10993],[10992,10992]]],[1526576710030,["Re@Re.local",[[1,10992,"移动"]],[10992,10992],[10994,10994]]],[1526576823077,[null,[[1,10814,"从"],[-1,10825,"如"]],[10814,10814],[10825,10825]]],[1526576823077,[null,[[-1,10814,"从"],[1,10826,"如"]],[10825,10825],[10814,10814]]],[1526576814944,["Re@Re.local",[[1,10994,"到"]],[10994,10994],[10995,10995]]],[1526576883025,[null,[[1,10814,"从"],[-1,10825,"如"]],[10814,10814],[10825,10825]]],[1526576883025,[null,[[-1,10814,"从"],[1,10826,"如"]],[10825,10825],[10814,10814]]],[1526576860314,["Re@Re.local",[[-1,10987,"将剩余的盘移动到"]],[10995,10995],[10987,10987]]],[1526576875590,["Re@Re.local",[[1,10987,"将剩下的那个盘子放到目标"]],[10987,10987],[10999,10999]]],[1526576943030,[null,[[1,10814,"从"],[-1,10825,"如"]],[10814,10814],[10825,10825]]],[1526576943030,[null,[[-1,10814,"从"],[1,10826,"如"]],[10825,10825],[10814,10814]]],[1526576904468,["Re@Re.local",[[1,10999,"杆上"]],[10999,10999],[11001,11001]]],[1526576905037,["Re@Re.local",[[-1,10999,"杆上"]],[11001,11001],[10999,10999]]],[1526576911422,["Re@Re.local",[[1,10999,"上"]],[10999,10999],[11000,11000]]],[1526576912060,["Re@Re.local",[[-1,10999,"上"]],[11000,11000],[10999,10999]]],[1526576916340,["Re@Re.local",[[1,10999,"杆上。"]],[10999,10999],[11002,11002]]],[1526576916839,["Re@Re.local",[[1,11002,"\n\n"]],[11002,11002],[11003,11003]]],[1526576923050,["Re@Re.local",[[-1,11003,"\n"],[1,11004,"3. 将高度为H"]],[11003,11003],[11011,11011]]],[1526576923485,["Re@Re.local",[[-1,11010,"H"]],[11011,11011],[11010,11010]]],[1526576932556,["Re@Re.local",[[1,11010," Height - 1 的塔移动到目标杆上。"]],[11010,11010],[11032,11032]]],[1526576936253,["Re@Re.local",[[1,11007,"将"]],[11006,11006],[11007,11007]]],[1526576936329,["Re@Re.local",[[-1,11007,"将"]],[11007,11007],[11006,11006]]],[1526576939217,["Re@Re.local",[[1,11006,"利用中奖杆"]],[11006,11006],[11011,11011]]],[1526576939984,["Re@Re.local",[[-1,11008,"中奖杆"]],[11011,11011],[11008,11008]]],[1526576942800,["Re@Re.local",[[1,11008,"中间杆， "]],[11008,11008],[11013,11013]]],[1526577003657,[null,[[1,10814,"从"],[-1,10825,"如"]],[10814,10814],[10825,10825]]],[1526577003658,[null,[[-1,10814,"从"],[1,10826,"如"]],[10825,10825],[10814,10814]]],[1526576943410,["Re@Re.local",[[-1,11012," "]],[11013,11013],[11012,11012]]],[1526576945245,["Re@Re.local",[[1,11038,"\n\n"]],[11038,11038],[11039,11039]]],[1526576945473,["Re@Re.local",[[1,11040,"\n"]],[11039,11039],[11040,11040]]],[1526576959654,["Re@Re.local",[[-1,11040,"\n"],[1,11041,"把持"]],[11040,11040],[11042,11042]]],[1526576960530,["Re@Re.local",[[-1,11040,"把持"]],[11042,11042],[11040,11040]]],[1526576961492,["Re@Re.local",[[1,11040,"\n\n"]],[11040,11040],[11041,11041]]],[1526576962203,["Re@Re.local",[[-1,11041,"\n"]],[11041,11041],[0,0]]],[1526576962392,["Re@Re.local",[[-1,11040,"\n"]],[11041,11041],[11040,11040]]],[1526576963501,["Re@Re.local",[[1,11040,"\n\n"]],[11040,11040],[11041,11041]]],[1526576965063,["Re@Re.local",[[-1,11041,"\n"],[1,11042,"组"]],[11041,11041],[11042,11042]]],[1526576965172,["Re@Re.local",[[-1,11041,"组"]],[11042,11042],[11041,11041]]],[1526576965898,["Re@Re.local",[[-1,11040,"\n"],[1,11041,"b"]],[11041,11041],[11040,11041]]],[1526576965991,["Re@Re.local",[[1,11041,"a"]],[11040,11041],[11040,11042]]],[1526576966075,["Re@Re.local",[[1,11042,"o"]],[11040,11042],[11040,11043]]],[1526576966311,["Re@Re.local",[[1,11043," c"]],[11040,11043],[11040,11045]]],[1526576966428,["Re@Re.local",[[1,11045,"h"]],[11040,11045],[11040,11046]]],[1526576966499,["Re@Re.local",[[1,11046,"i"]],[11040,11046],[11040,11047]]],[1526576966688,["Re@Re.local",[[-1,11040,"bao chi"],[1,11047,"保持"]],[11040,11047],[11042,11042]]],[1526576967648,["Re@Re.local",[[-1,11040,"保持"]],[11042,11042],[11040,11040]]],[1526576967871,["Re@Re.local",[[-1,11039,"\n"],[1,11040,"w"]],[11040,11040],[11039,11040]]],[1526576967918,["Re@Re.local",[[1,11040,"e"]],[11039,11040],[11039,11041]]],[1526576968025,["Re@Re.local",[[1,11041,"i"]],[11039,11041],[11039,11042]]],[1526576968198,["Re@Re.local",[[1,11042," z"]],[11039,11042],[11039,11044]]],[1526576968637,["Re@Re.local",[[-1,11039,"wei z"],[1,11044,"为主"]],[11039,11044],[11041,11041]]],[1526576968708,["Re@Re.local",[[-1,11040,"主"]],[11041,11041],[11040,11040]]],[1526576968894,["Re@Re.local",[[-1,11039,"为"],[1,11040,"\n"]],[11040,11040],[11039,11039]]],[1526576969175,["Re@Re.local",[[1,11040,"\n"]],[11039,11039],[11040,11040]]],[1526576975264,["Re@Re.local",[[-1,11040,"\n"],[1,11041,"维持大碟"]],[11040,11040],[11044,11044]]],[1526576975601,["Re@Re.local",[[-1,11043,"碟"]],[11044,11044],[11043,11043]]],[1526576982476,["Re@Re.local",[[1,11043,"盘在下的规则，"]],[11043,11043],[11050,11050]]],[1526576982867,["Re@Re.local",[[-1,11049,"，"]],[11050,11050],[11049,11049]]],[1526576997020,["Re@Re.local",[[1,11049,"便可以递归使用上面的3步，将"]],[11049,11049],[11063,11063]]],[1526577063670,[null,[[1,10814,"从"],[-1,10825,"如"]],[10814,10814],[10825,10825]]],[1526577063670,[null,[[-1,10814,"从"],[1,10826,"如"]],[10825,10825],[10814,10814]]],[1526577020853,["Re@Re.local",[[-1,11062,"将"]],[11063,11063],[11062,11062]]],[1526577024662,["Re@Re.local",[[1,11062,"将上"]],[11062,11062],[11064,11064]]],[1526577024902,["Re@Re.local",[[-1,11063,"上"]],[11064,11064],[11063,11063]]],[1526577027466,["Re@Re.local",[[1,11063,"任何大跌"]],[11063,11063],[11067,11067]]],[1526577028444,["Re@Re.local",[[-1,11063,"任何大跌"]],[11067,11067],[11063,11063]]],[1526577031472,["Re@Re.local",[[1,11063,"任何大贵"]],[11063,11063],[11067,11067]]],[1526577031819,["Re@Re.local",[[-1,11065,"大贵"]],[11067,11067],[11065,11065]]],[1526577036562,["Re@Re.local",[[1,11065,"规模更大的问题一"]],[11065,11065],[11073,11073]]],[1526577036817,["Re@Re.local",[[-1,11072,"一"]],[11073,11073],[11072,11072]]],[1526577039207,["Re@Re.local",[[1,11072,"以递归的杆"]],[11072,11072],[11077,11077]]],[1526577039531,["Re@Re.local",[[-1,11075,"的杆"]],[11077,11077],[11075,11075]]],[1526577040330,["Re@Re.local",[[1,11075,"反弹"]],[11075,11075],[11077,11077]]],[1526577040857,["Re@Re.local",[[-1,11075,"反弹"]],[11077,11077],[11075,11075]]],[1526577043034,["Re@Re.local",[[1,11075,"的方式处理掉"]],[11075,11075],[11081,11081]]],[1526577046698,["Re@Re.local",[[-1,11062,"将任何规模更大的问题以递归的方式处理掉"]],[11081,11081],[11062,11062]]],[1526577058639,["Re@Re.local",[[1,11062,"便可以处理任何更大规模的问题。"]],[11062,11062],[11077,11077]]],[1526577123697,[null,[[1,10814,"从"],[-1,10825,"如"]],[10814,10814],[10825,10825]]],[1526577123697,[null,[[-1,10814,"从"],[1,10826,"如"]],[10825,10825],[10814,10814]]],[1526577070477,["Re@Re.local",[[-1,11076,"。"]],[11077,11077],[11076,11076]]],[1526577073329,["Re@Re.local",[[1,11076,"，唯一确实"]],[11076,11076],[11081,11081]]],[1526577074161,["Re@Re.local",[[-1,11076,"，唯一确实"]],[11081,11081],[11076,11076]]],[1526577081045,["Re@Re.local",[[1,11076,"。上述步骤中唯一确实"]],[11076,11076],[11086,11086]]],[1526577081618,["Re@Re.local",[[-1,11084,"确实"]],[11086,11086],[11084,11084]]],[1526577095376,["Re@Re.local",[[1,11084,"缺少的就是对约束条件的确定。嘴贱的H"]],[11084,11084],[11102,11102]]],[1526577096861,["Re@Re.local",[[-1,11097,"。嘴贱的H"]],[11102,11102],[11097,11097]]],[1526577110336,["Re@Re.local",[[1,11097,"。最简的河内塔问题是"]],[11097,11097],[11107,11107]]],[1526577114954,["Re@Re.local",[[-1,11106,"是"]],[11107,11107],[11106,11106]]],[1526577122743,["Re@Re.local",[[1,11106,"是仅有一个盘子的塔。"]],[11106,11106],[11116,11116]]],[1526577183690,[null,[[1,10814,"从"],[-1,10825,"如"]],[10814,10814],[10825,10825]]],[1526577183690,[null,[[-1,10814,"从"],[1,10826,"如"]],[10825,10825],[10814,10814]]],[1526577140633,["Re@Re.local",[[1,11117,"这种情况下，只需要将该盘子移动"]],[11117,11117],[11132,11132]]],[1526577140975,["Re@Re.local",[[-1,11130,"移动"]],[11132,11132],[11130,11130]]],[1526577155017,["Re@Re.local",[[1,11130,"直接移动到目标杆即可。高度为1的黑内塔"]],[11130,11130],[11149,11149]]],[1526577155622,["Re@Re.local",[[-1,11146,"黑内塔"]],[11149,11149],[11146,11146]]],[1526577169703,["Re@Re.local",[[1,11146,"河内塔即是约束条件。此外，上述步骤"]],[11146,11146],[11163,11163]]],[1526577304587,[null,[[1,10814,"从"],[-1,10825,"如"],[1,11116,"在"],[-1,11129,"移"]],[10814,10814],[11129,11129]]],[1526577304587,[null,[[-1,10814,"从"],[1,10826,"如"],[-1,11116,"在"],[1,11130,"移"]],[11129,11129],[10814,10814]]],[1526577284290,["Re@Re.local",[[1,11163,"通过"]],[11163,11163],[11165,11165]]],[1526577364580,[null,[[1,10814,"从"],[-1,10825,"如"],[1,11116,"在"],[-1,11129,"移"]],[10814,10814],[11129,11129]]],[1526577364580,[null,[[-1,10814,"从"],[1,10826,"如"],[-1,11116,"在"],[1,11130,"移"]],[11129,11129],[10814,10814]]],[1526577333264,["Re@Re.local",[[1,11029,"中间"]],[11029,11029],[11031,11031]]],[1526577334247,["Re@Re.local",[[-1,11031,"塔"]],[11032,11032],[11031,11031]]],[1526577335403,["Re@Re.local",[[1,11031,"杆"]],[11031,11031],[11032,11032]]],[1526577343734,["Re@Re.local",[[1,11029,"塔从"]],[11029,11029],[11031,11031]]],[1526577356715,["Re@Re.local",[[1,10975,"从起始杆"]],[10975,10975],[10979,10979]]],[1526577424623,[null,[[1,10814,"从"],[-1,10825,"如"],[1,11124,"在"],[-1,11137,"移"]],[10814,10814],[11137,11137]]],[1526577424623,[null,[[-1,10814,"从"],[1,10826,"如"],[-1,11124,"在"],[1,11138,"移"]],[11137,11137],[10814,10814]]],[1526577422897,["Re@Re.local",[[-1,11171,"通过"]],[11173,11173],[11171,11171]]],[1526577423719,["Re@Re.local",[[1,11171,"在"]],[11171,11171],[11172,11172]]],[1526577484575,[null,[[1,10814,"从"],[-1,10825,"如"],[1,11124,"在"],[-1,11137,"移"]],[10814,10814],[11137,11137]]],[1526577484575,[null,[[-1,10814,"从"],[1,10826,"如"],[-1,11124,"在"],[1,11138,"移"]],[11137,11137],[10814,10814]]],[1526577435786,["Re@Re.local",[[1,11172,"步骤1和3中通过减少"]],[11172,11172],[11182,11182]]],[1526577436574,["Re@Re.local",[[-1,11178,"通过减少"]],[11182,11182],[11178,11178]]],[1526577439454,["Re@Re.local",[[1,11171,"通过"]],[11171,11171],[11173,11173]]],[1526577452103,["Re@Re.local",[[1,11180,"减少塔的高度来实现了向约束条件收敛的"]],[11180,11180],[11198,11198]]],[1526577453559,["Re@Re.local",[[-1,11197,"的"]],[11198,11198],[11197,11197]]],[1526577466335,["Re@Re.local",[[1,11197,"。代码1给出了解决河内塔问题的Python "]],[11197,11197],[11219,11219]]],[1526577466692,["Re@Re.local",[[-1,11218," "]],[11219,11219],[11218,11218]]],[1526577468003,["Re@Re.local",[[1,11218,"代码。"]],[11218,11218],[11221,11221]]],[1526577468313,["Re@Re.local",[[1,11221,"\n\n"]],[11221,11221],[11222,11222]]],[1526577468519,["Re@Re.local",[[1,11223,"\n"]],[11222,11222],[11223,11223]]],[1526577470740,["Re@Re.local",[[-1,11223,"\n"],[1,11224,"```Pyh"]],[11223,11223],[11229,11229]]],[1526577471110,["Re@Re.local",[[-1,11228,"h"]],[11229,11229],[11228,11228]]],[1526577471562,["Re@Re.local",[[1,11228,"thon"]],[11228,11228],[11232,11232]]],[1526577471720,["Re@Re.local",[[1,11232,"\n\n"]],[11232,11232],[11233,11233]]],[1526577471904,["Re@Re.local",[[1,11234,"\n"]],[11233,11233],[11234,11234]]],[1526577472689,["Re@Re.local",[[-1,11234,"\n"]],[11234,11234],[11233,11233]]],[1526577478473,["Re@Re.local",[[1,11233,"def moveTower(height,fromPole, toPole, withPole):\n    if height >= 1:\n        moveTower(height-1,fromPole,withPole,toPole)\n        moveDisk(fromPole,toPole)\n        moveTower(height-1,withPole,toPole,fromPole)"]],[11233,11233],[11442,11442]]],[1526577479856,["Re@Re.local",[[-1,11442,"\n"],[1,11443,"```"]],[11442,11442],[11445,11445]]],[1526577483171,["Re@Re.local",[[1,11442,"\n"]],[11442,11442],[11443,11443]]],[1526577544578,[null,[[1,10814,"从"],[-1,10825,"如"],[1,11124,"在"],[-1,11137,"移"]],[10814,10814],[11137,11137]]],[1526577544578,[null,[[-1,10814,"从"],[1,10826,"如"],[-1,11124,"在"],[1,11138,"移"]],[11137,11137],[10814,10814]]],[1526577484899,["Re@Re.local",[[1,11446,"\n\n"]],[11446,11446],[11447,11447]]],[1526577496871,["Re@Re.local",[[-1,11447,"\n"],[1,11448,"注意到代码1中的"]],[11447,11447],[11455,11455]]],[1526577498429,["Re@Re.local",[[-1,11452,"1中的"]],[11455,11455],[11452,11452]]],[1526577499330,["Re@Re.local",[[1,11452,"1"]],[11452,11452],[11453,11453]]],[1526577504470,["Re@Re.local",[[-1,11448,"意到代码1"]],[11453,11453],[11448,11448]]],[1526577504693,["Re@Re.local",[[-1,11447,"注"],[1,11448,"\n"]],[11448,11448],[11447,11447]]],[1526577506223,["Re@Re.local",[[-1,11447,"\n"]],[11447,11447],[0,0]]],[1526577506476,["Re@Re.local",[[-1,11446,"\n"],[1,11447,"z"]],[0,0],[11446,11447]]],[1526577506600,["Re@Re.local",[[1,11447,"h"]],[11446,11447],[11446,11448]]],[1526577506738,["Re@Re.local",[[1,11448,"e"]],[11446,11448],[11446,11449]]],[1526577507103,["Re@Re.local",[[-1,11446,"zhe"],[1,11449,"这"]],[11446,11449],[11447,11447]]],[1526577507757,["Re@Re.local",[[-1,11445,"`这"]],[11447,11447],[11445,11445]]],[1526577508721,["Re@Re.local",[[1,11445,"`这"]],[11445,11445],[11447,11447]]],[1526577509800,["Re@Re.local",[[1,11446,"zhe"],[-1,11446,"这"]],[11447,11447],[11446,11449]]],[1526577510508,["Re@Re.local",[[-1,11448,"e"]],[11446,11449],[11446,11448]]],[1526577511028,["Re@Re.local",[[-1,11447,"h"]],[11446,11448],[11446,11447]]],[1526577511778,["Re@Re.local",[[1,11446,"\n"],[-1,11446,"z"]],[11446,11447],[0,0]]],[1526577513739,["Re@Re.local",[[1,11447,"\n"]],[11446,11446],[11447,11447]]],[1526577527324,["Re@Re.local",[[-1,11447,"\n"],[1,11448,"该代码看起来似乎就像英文的"]],[11447,11447],[11460,11460]]],[1526577529953,["Re@Re.local",[[-1,11457,"英文的"]],[11460,11460],[11457,11457]]],[1526577534023,["Re@Re.local",[[1,11457,"英文的描述"]],[11457,11457],[11462,11462]]],[1526577534719,["Re@Re.local",[[-1,11459,"的描述"]],[11462,11462],[11459,11459]]],[1526577539888,["Re@Re.local",[[1,11459,"描述性文字一样。"]],[11459,11459],[11467,11467]]],[1526577859196,[null,[[1,10814,"从"],[-1,10825,"如"],[1,11124,"在"],[-1,11137,"移"]],[10814,10814],[11137,11137]]],[1526577859196,[null,[[-1,10814,"从"],[1,10826,"如"],[-1,11124,"在"],[1,11138,"移"]],[11137,11137],[10814,10814]]],[1526577828742,["Re@Re.local",[[1,11467,"该算法的关键是，进行了两次不同的递归调用"]],[11467,11467],[11487,11487]]],[1526577853207,["Re@Re.local",[[1,11471,"简便性"]],[11471,11471],[11474,11474]]],[1526577858262,["Re@Re.local",[[-1,11476,"是，"]],[11478,11478],[11476,11476]]],[1526577919149,[null,[[1,10814,"从"],[-1,10825,"如"],[1,11124,"在"],[-1,11137,"移"]],[10814,10814],[11137,11137]]],[1526577919149,[null,[[-1,10814,"从"],[1,10826,"如"],[-1,11124,"在"],[1,11138,"移"]],[11137,11137],[10814,10814]]],[1526577859440,["Re@Re.local",[[1,11476,"在于"]],[11476,11476],[11478,11478]]],[1526577867281,["Re@Re.local",[[1,11490,"。在航"]],[11490,11490],[11493,11493]]],[1526577868077,["Re@Re.local",[[-1,11492,"航"]],[11493,11493],[11492,11492]]],[1526577879992,["Re@Re.local",[[1,11492,"行3，将"]],[11492,11492],[11496,11496]]],[1526577881213,["Re@Re.local",[[-1,11495,"将"]],[11496,11496],[11495,11495]]],[1526577890042,["Re@Re.local",[[1,11495,"将出了最底部（最大的）盘子"]],[11495,11495],[11508,11508]]],[1526577893106,["Re@Re.local",[[-1,11496,"出"]],[11497,11497],[11496,11496]]],[1526577894151,["Re@Re.local",[[1,11496,"除"]],[11496,11496],[11497,11497]]],[1526577910885,["Re@Re.local",[[1,11508,"全部移到中间杆上，"]],[11508,11508],[11517,11517]]],[1526577915804,["Re@Re.local",[[-1,11516,"，"]],[11517,11517],[11516,11516]]],[1526577917904,["Re@Re.local",[[1,11516,"。在"]],[11516,11516],[11518,11518]]],[1526577918073,["Re@Re.local",[[-1,11517,"在"]],[11518,11518],[11517,11517]]],[1526577918974,["Re@Re.local",[[1,11517,"下"]],[11517,11517],[11518,11518]]],[1526577979136,[null,[[1,10814,"从"],[-1,10825,"如"],[1,11124,"在"],[-1,11137,"移"]],[10814,10814],[11137,11137]]],[1526577979136,[null,[[-1,10814,"从"],[1,10826,"如"],[-1,11124,"在"],[1,11138,"移"]],[11137,11137],[10814,10814]]],[1526577919783,["Re@Re.local",[[-1,11517,"下"]],[11518,11518],[11517,11517]]],[1526577921191,["Re@Re.local",[[1,11517,"行"]],[11517,11517],[11518,11518]]],[1526577921666,["Re@Re.local",[[-1,11516,"。行"]],[11518,11518],[11516,11516]]],[1526577941063,["Re@Re.local",[[1,11516,"，行4仅是将"]],[11516,11516],[11522,11522]]],[1526577947638,["Re@Re.local",[[-1,11520,"是将"]],[11522,11522],[11520,11520]]],[1526577960550,["Re@Re.local",[[1,11520,"将底部的盘子移动到目标盘，"]],[11520,11520],[11533,11533]]],[1526577962756,["Re@Re.local",[[-1,11532,"，"]],[11533,11533],[11532,11532]]],[1526577978347,["Re@Re.local",[[1,11532,"。行5则是将"]],[11532,11532],[11538,11538]]],[1526578039153,[null,[[1,10814,"从"],[-1,10825,"如"],[1,11124,"在"],[-1,11137,"移"]],[10814,10814],[11137,11137]]],[1526578039153,[null,[[-1,10814,"从"],[1,10826,"如"],[-1,11124,"在"],[1,11138,"移"]],[11137,11137],[10814,10814]]],[1526577995161,["Re@Re.local",[[1,11538,"中间杆上的圆盘移动到目标杆上。"]],[11538,11538],[11553,11553]]],[1526578008600,["Re@Re.local",[[-1,11548,"目标杆上。"]],[11553,11553],[11548,11548]]],[1526578016918,["Re@Re.local",[[1,11548,"最大盘的上部（目标杆——"]],[11548,11548],[11560,11560]]],[1526578017661,["Re@Re.local",[[-1,11558,"——"]],[11560,11560],[11558,11558]]],[1526578037709,["Re@Re.local",[[1,11558,"）即可。约束条件即是塔高度为0时"]],[11558,11558],[11574,11574]]],[1526578038432,["Re@Re.local",[[-1,11573,"时"]],[11574,11574],[11573,11573]]],[1526578038907,["Re@Re.local",[[1,11573,"。"]],[11573,11573],[11574,11574]]],[1526578099152,[null,[[1,10814,"从"],[-1,10825,"如"],[1,11124,"在"],[-1,11137,"移"]],[10814,10814],[11137,11137]]],[1526578099152,[null,[[-1,10814,"从"],[1,10826,"如"],[-1,11124,"在"],[1,11138,"移"]],[11137,11137],[10814,10814]]],[1526578094618,["Re@Re.local",[[1,11574,"处理约束条件"]],[11574,11574],[11580,11580]]],[1526578159167,[null,[[1,10814,"从"],[-1,10825,"如"],[1,11124,"在"],[-1,11137,"移"]],[10814,10814],[11137,11137]]],[1526578159167,[null,[[-1,10814,"从"],[1,10826,"如"],[-1,11124,"在"],[1,11138,"移"]],[11137,11137],[10814,10814]]],[1526578105893,["Re@Re.local",[[1,11574,"注意，"]],[11574,11574],[11577,11577]]],[1526578124031,["Re@Re.local",[[1,11583,"在这种情况下是调用moveDisk函数的前提条件。"]],[11583,11583],[11608,11608]]],[1526578124430,["Re@Re.local",[[1,11608,"\n\n"]],[11608,11608],[11609,11609]]],[1526578124620,["Re@Re.local",[[1,11610,"\n"]],[11609,11609],[11610,11610]]],[1526578134370,["Re@Re.local",[[-1,11610,"\n"],[1,11611,"moveDisk函数，如列表2"]],[11610,11610],[11625,11625]]],[1526578135269,["Re@Re.local",[[-1,11622,"列表2"]],[11625,11625],[11622,11622]]],[1526578146675,["Re@Re.local",[[1,11622,"代码2所示，也很简单。它仅仅是打印出"]],[11622,11622],[11640,11640]]],[1526578219525,[null,[[1,10814,"从"],[-1,10825,"如"],[1,11124,"在"],[-1,11137,"移"]],[10814,10814],[11137,11137]]],[1526578219525,[null,[[-1,10814,"从"],[1,10826,"如"],[-1,11124,"在"],[1,11138,"移"]],[11137,11137],[10814,10814]]],[1526578173048,["Re@Re.local",[[1,11640,"从一根盘"]],[11640,11640],[11644,11644]]],[1526578176415,["Re@Re.local",[[-1,11640,"从一根盘"]],[11644,11644],[11640,11640]]],[1526578188358,["Re@Re.local",[[1,11640,"将某个盘子从某个杆上移动到另一个杆的"]],[11640,11640],[11658,11658]]],[1526578189969,["Re@Re.local",[[-1,11641,"某个"]],[11643,11643],[11641,11641]]],[1526578192628,["Re@Re.local",[[1,11656,"过程，"]],[11656,11656],[11659,11659]]],[1526578194046,["Re@Re.local",[[-1,11658,"，"]],[11659,11659],[11658,11658]]],[1526578196009,["Re@Re.local",[[1,11658,"。如果"]],[11658,11658],[11661,11661]]],[1526578202206,["Re@Re.local",[[-1,11659,"如果"]],[11661,11661],[11659,11659]]],[1526578203250,["Re@Re.local",[[1,11659,"读者"]],[11659,11659],[11661,11661]]],[1526578203929,["Re@Re.local",[[-1,11659,"读者"]],[11661,11661],[11659,11659]]],[1526578209287,["Re@Re.local",[[1,11659,"读者可以试着运行i 下"]],[11659,11659],[11670,11670]]],[1526578210033,["Re@Re.local",[[-1,11667,"i 下"]],[11670,11670],[11667,11667]]],[1526578211193,["Re@Re.local",[[1,11667,"一下，"]],[11667,11667],[11670,11670]]],[1526578212117,["Re@Re.local",[[-1,11669,"，"]],[11670,11670],[11669,11669]]],[1526578217044,["Re@Re.local",[[1,11669,"，便可发现该算法是"]],[11669,11669],[11678,11678]]],[1526578217250,["Re@Re.local",[[-1,11677,"是"]],[11678,11678],[11677,11677]]],[1526578279502,[null,[[1,10814,"从"],[-1,10825,"如"],[1,11124,"在"],[-1,11137,"移"]],[10814,10814],[11137,11137]]],[1526578279502,[null,[[-1,10814,"从"],[1,10826,"如"],[-1,11124,"在"],[1,11138,"移"]],[11137,11137],[10814,10814]]],[1526578224299,["Re@Re.local",[[1,11677,"可以很搞笑地解决"]],[11677,11677],[11685,11685]]],[1526578225091,["Re@Re.local",[[-1,11680,"搞笑地解决"]],[11685,11685],[11680,11680]]],[1526578229966,["Re@Re.local",[[1,11680,"高效地解决该问题。"]],[11680,11680],[11689,11689]]],[1526578230270,["Re@Re.local",[[1,11689,"\n\n"]],[11689,11689],[11690,11690]]],[1526578230491,["Re@Re.local",[[1,11691,"\n"]],[11690,11690],[11691,11691]]],[1526578246322,["Re@Re.local",[[-1,11691,"\n"],[1,11692,"带啊"]],[11691,11691],[11693,11693]]],[1526578246650,["Re@Re.local",[[-1,11691,"带啊"]],[11693,11693],[11691,11691]]],[1526578248876,["Re@Re.local",[[1,11223,"\n"]],[11222,11222],[11223,11223]]],[1526578251861,["Re@Re.local",[[1,11223,"**代码1**"]],[11223,11223],[11230,11230]]],[1526578254176,["Re@Re.local",[[1,11699,"\n"]],[11698,11698],[11699,11699]]],[1526578255877,["Re@Re.local",[[-1,11699,"\n"],[1,11700,"*8代码"]],[11699,11699],[11703,11703]]],[1526578256307,["Re@Re.local",[[-1,11700,"8代码"]],[11703,11703],[11700,11700]]],[1526578256943,["Re@Re.local",[[1,11700,"代码"]],[11700,11700],[11702,11702]]],[1526578257269,["Re@Re.local",[[-1,11700,"代码"]],[11702,11702],[11700,11700]]],[1526578260409,["Re@Re.local",[[1,11700,"*代码2**"]],[11700,11700],[11706,11706]]],[1526578260751,["Re@Re.local",[[1,11706,"\n\n"]],[11706,11706],[11707,11707]]],[1526578261896,["Re@Re.local",[[-1,11707,"\n"],[1,11708,"···"]],[11707,11707],[11710,11710]]],[1526578262268,["Re@Re.local",[[-1,11708,"··"]],[11710,11710],[11708,11708]]],[1526578262434,["Re@Re.local",[[-1,11707,"·"],[1,11708,"\n"]],[11708,11708],[11707,11707]]],[1526578264158,["Re@Re.local",[[-1,11707,"\n"],[1,11708,"```Python"]],[11707,11707],[11716,11716]]],[1526578264458,["Re@Re.local",[[1,11716,"\n\n"]],[11716,11716],[11717,11717]]],[1526578265311,["Re@Re.local",[[-1,11717,"\n"],[1,11718,"def"]],[11717,11717],[11720,11720]]],[1526578269394,["Re@Re.local",[[-1,11718,"ef"]],[11720,11720],[11718,11718]]],[1526578269553,["Re@Re.local",[[-1,11717,"d"],[1,11718,"\n"]],[11718,11718],[11717,11717]]],[1526578269784,["Re@Re.local",[[1,11717,"def moveDisk(fp,tp):\n    print(\"moving disk from\",fp,\"to\",tp)"]],[11717,11717],[11778,11778]]],[1526578270420,["Re@Re.local",[[1,11779,"\n"]],[11778,11778],[11779,11779]]],[1526578270867,["Re@Re.local",[[-1,11779,"\n"]],[11779,11779],[11778,11778]]],[1526578271527,["Re@Re.local",[[-1,11778,"\n"],[1,11779,"```"]],[11778,11778],[11781,11781]]],[1526578274366,["Re@Re.local",[[1,11778,"\n"]],[11778,11778],[11779,11779]]],[1526578276061,["Re@Re.local",[[1,11782,"\n\n"]],[11782,11782],[11783,11783]]],[1526578341650,[null,[[1,10814,"从"],[-1,10825,"如"],[1,11124,"在"],[-1,11137,"移"]],[10814,10814],[11137,11137]]],[1526578341650,[null,[[-1,10814,"从"],[1,10826,"如"],[-1,11124,"在"],[1,11138,"移"]],[11137,11137],[10814,10814]]],[1526578280587,["Re@Re.local",[[-1,11783,"\n"],[1,11784,"z"]],[11783,11783],[11784,11784]]],[1526578281124,["Re@Re.local",[[-1,11783,"z"],[1,11784,"\n"]],[11784,11784],[11783,11783]]],[1526578282272,["Re@Re.local",[[-1,11783,"\n"],[1,11784,"注意"]],[11783,11783],[11785,11785]]],[1526578282739,["Re@Re.local",[[-1,11784,"意"]],[11785,11785],[11784,11784]]],[1526578282920,["Re@Re.local",[[-1,11783,"注"],[1,11784,"\n"]],[11784,11784],[11783,11783]]],[1526578284177,["Re@Re.local",[[-1,11783,"\n"],[1,11784,"先"]],[11783,11783],[11784,11784]]],[1526578284281,["Re@Re.local",[[-1,11783,"先"],[1,11784,"\n"]],[11784,11784],[11783,11783]]],[1526578284458,["Re@Re.local",[[-1,11783,"\n"]],[11783,11783],[11782,11782]]],[1526578285102,["Re@Re.local",[[1,11783,"\n"]],[11782,11782],[11783,11783]]],[1526578287005,["Re@Re.local",[[-1,11783,"\n"],[1,11784,"既然已经"]],[11783,11783],[11787,11787]]],[1526578289864,["Re@Re.local",[[-1,11785,"已经"]],[11787,11787],[11785,11785]]],[1526578401664,[null,[[1,10814,"从"],[-1,10825,"如"],[1,11124,"在"],[-1,11137,"移"]],[10814,10814],[11137,11137]]],[1526578401664,[null,[[-1,10814,"从"],[1,10826,"如"],[-1,11124,"在"],[1,11138,"移"]],[11137,11137],[10814,10814]]],[1526578395712,["Re@Re.local",[[-1,11784,"然"]],[11785,11785],[11784,11784]]],[1526578395927,["Re@Re.local",[[-1,11783,"既"],[1,11784,"\n"]],[11784,11784],[11783,11783]]],[1526578397929,["Re@Re.local",[[-1,11783,"\n"]],[11783,11783],[0,0]]],[1526578398171,["Re@Re.local",[[-1,11782,"\n"],[1,11783,"k"]],[0,0],[11782,11783]]],[1526578398320,["Re@Re.local",[[1,11783,"a"]],[11782,11783],[11782,11784]]],[1526578398372,["Re@Re.local",[[1,11784,"n"]],[11782,11784],[11782,11785]]],[1526578399636,["Re@Re.local",[[-1,11784,"n"]],[11782,11785],[11782,11784]]],[1526578400065,["Re@Re.local",[[-1,11782,"ak"]],[11782,11784],[11782,11782]]],[1526578401117,["Re@Re.local",[[1,11782,"\n\n"]],[11782,11782],[11783,11783]]],[1526578401354,["Re@Re.local",[[1,11784,"\n"]],[11783,11783],[11784,11784]]],[1526578461673,[null,[[1,10814,"从"],[-1,10825,"如"],[1,11124,"在"],[-1,11137,"移"]],[10814,10814],[11137,11137]]],[1526578461673,[null,[[-1,10814,"从"],[1,10826,"如"],[-1,11124,"在"],[1,11138,"移"]],[11137,11137],[10814,10814]]],[1526578408229,["Re@Re.local",[[-1,11784,"\n"],[1,11785,"看过moveTower和moveDsi"]],[11784,11784],[11803,11803]]],[1526578408595,["Re@Re.local",[[-1,11801,"si"]],[11803,11803],[11801,11801]]],[1526578414460,["Re@Re.local",[[1,11801,"isk的代码后，读者可能会向为啥"]],[11801,11801],[11817,11817]]],[1526578414918,["Re@Re.local",[[-1,11814,"向为啥"]],[11817,11817],[11814,11814]]],[1526578419942,["Re@Re.local",[[1,11814,"想为何不显示"]],[11814,11814],[11820,11820]]],[1526578423138,["Re@Re.local",[[-1,11818,"显示"]],[11820,11820],[11818,11818]]],[1526578438409,["Re@Re.local",[[1,11818,"直接使用栈来追踪某个盘子咋"]],[11818,11818],[11831,11831]]],[1526578439635,["Re@Re.local",[[-1,11826,"某个盘子咋"]],[11831,11831],[11826,11826]]],[1526578441379,["Re@Re.local",[[1,11826,"盘子在"]],[11826,11826],[11829,11829]]],[1526578447180,["Re@Re.local",[[-1,11826,"盘子在"]],[11829,11829],[11826,11826]]],[1526578450721,["Re@Re.local",[[1,11826,"某个"]],[11826,11826],[11828,11828]]],[1526578451058,["Re@Re.local",[[-1,11826,"某个"]],[11828,11828],[11826,11826]]],[1526578452921,["Re@Re.local",[[1,11826,"哪个"]],[11826,11826],[11828,11828]]],[1526578454850,["Re@Re.local",[[-1,11826,"哪个"]],[11828,11828],[11826,11826]]],[1526578456854,["Re@Re.local",[[1,11826,"盘子"]],[11826,11826],[11828,11828]]],[1526578457247,["Re@Re.local",[[-1,11826,"盘子"]],[11828,11828],[11826,11826]]],[1526578461434,["Re@Re.local",[[1,11826,"任意盘子的"]],[11826,11826],[11831,11831]]],[1526578521668,[null,[[1,10814,"从"],[-1,10825,"如"],[1,11124,"在"],[-1,11137,"移"]],[10814,10814],[11137,11137]]],[1526578521668,[null,[[-1,10814,"从"],[1,10826,"如"],[-1,11124,"在"],[1,11138,"移"]],[11137,11137],[10814,10814]]],[1526578472801,["Re@Re.local",[[1,11830,"在哪个杆里。这里是提示，"]],[11830,11830],[11842,11842]]],[1526578474811,["Re@Re.local",[[-1,11836,"这里是提示，"]],[11842,11842],[11836,11836]]],[1526578480181,["Re@Re.local",[[1,11836,"提示：如果要先是的"]],[11836,11836],[11845,11845]]],[1526578480619,["Re@Re.local",[[-1,11842,"先是的"]],[11845,11845],[11842,11842]]],[1526578481901,["Re@Re.local",[[1,11842,"显示"]],[11842,11842],[11844,11844]]],[1526578482631,["Re@Re.local",[[-1,11842,"显示"]],[11844,11844],[11842,11842]]],[1526578493701,["Re@Re.local",[[1,11842,"显式地跟"]],[11842,11842],[11846,11846]]],[1526578493831,["Re@Re.local",[[-1,11845,"跟"]],[11846,11846],[11845,11845]]],[1526578503014,["Re@Re.local",[[1,11845,"追踪盘子，应该"]],[11845,11845],[11852,11852]]],[1526578503828,["Re@Re.local",[[-1,11850,"应该"]],[11852,11852],[11850,11850]]],[1526578516620,["Re@Re.local",[[1,11850,"应该需要3个栈，每个对应一个杆。"]],[11850,11850],[11866,11866]]],[1526578582223,[null,[[1,10814,"从"],[-1,10825,"如"],[1,11124,"在"],[-1,11137,"移"],[-1,11866,"的"]],[10814,10814],[11866,11866]]],[1526578582223,[null,[[-1,10814,"从"],[1,10826,"如"],[-1,11124,"在"],[1,11138,"移"],[1,11866,"的"]],[11866,11866],[10814,10814]]],[1526578548987,["Re@Re.local",[[1,11866,"答案是，Python本身就提供了我们所需要"]],[11866,11866],[11887,11887]]],[1526578549342,["Re@Re.local",[[-1,11885,"需要"]],[11887,11887],[11885,11885]]],[1526578561386,["Re@Re.local",[[1,11878,"隐式地"]],[11878,11878],[11881,11881]]],[1526578562459,["Re@Re.local",[[-1,11881,"就"]],[11882,11882],[11881,11881]]],[1526578564614,["Re@Re.local",[[1,11878,"就"]],[11878,11878],[11879,11879]]],[1526578571566,["Re@Re.local",[[1,11888,"需要的调用栈。"]],[11888,11888],[11895,11895]]],[1526578571913,["Re@Re.local",[[1,11895,"\n\n"]],[11895,11895],[11896,11896]]],[1526578572265,["Re@Re.local",[[1,11897,"\n"]],[11896,11896],[11897,11897]]],[1526578580135,["Re@Re.local",[[-1,11897,"\n"],[1,11898,"##"]],[11897,11897],[11899,11899]]],[1526578642204,[null,[[1,10814,"从"],[-1,10825,"如"],[1,11124,"在"],[-1,11137,"移"],[-1,11899,"的"]],[10814,10814],[11899,11899]]],[1526578642204,[null,[[-1,10814,"从"],[1,10826,"如"],[-1,11124,"在"],[1,11138,"移"],[1,11899,"的"]],[11899,11899],[10814,10814]]],[1526578584124,["Re@Re.local",[[1,11899," 4.6 "]],[11899,11899],[11904,11904]]],[1526578584793,["Re@Re.local",[[-1,11903," "]],[11904,11904],[11903,11903]]],[1526578585633,["Re@Re.local",[[1,11903,"探索"]],[11903,11903],[11905,11905]]],[1526578586036,["Re@Re.local",[[-1,11903,"探索"]],[11905,11905],[11903,11903]]],[1526578588609,["Re@Re.local",[[1,11903," 探索迷宫 ##"]],[11903,11903],[11911,11911]]],[1526578588736,["Re@Re.local",[[1,11911,"\n\n"]],[11911,11911],[11912,11912]]],[1526578590394,["Re@Re.local",[[1,11913,"\n"]],[11912,11912],[11913,11913]]],[1526578593677,["Re@Re.local",[[-1,11913,"\n"],[1,11914,"本届将"]],[11913,11913],[11916,11916]]],[1526578593926,["Re@Re.local",[[-1,11914,"届将"]],[11916,11916],[11914,11914]]],[1526578596523,["Re@Re.local",[[1,11914,"节将研究"]],[11914,11914],[11918,11918]]],[1526578703808,[null,[[1,10814,"从"],[-1,10825,"如"],[1,11124,"在"],[-1,11137,"移"],[-1,11918,"的"]],[10814,10814],[11918,11918]]],[1526578703809,[null,[[-1,10814,"从"],[1,10826,"如"],[-1,11124,"在"],[1,11138,"移"],[1,11918,"的"]],[11918,11918],[10814,10814]]],[1526578658659,["Re@Re.local",[[1,11918,"d"]],[11918,11918],[11919,11919]]],[1526578659028,["Re@Re.local",[[-1,11918,"d"]],[11919,11919],[11918,11918]]],[1526578674195,["Re@Re.local",[[1,11918,"的问题跟拓宽机器人活动范围有关。"]],[11918,11918],[11934,11934]]],[1526578763780,[null,[[1,10814,"从"],[-1,10825,"如"],[1,11124,"在"],[-1,11137,"移"],[-1,11934,"的"]],[10814,10814],[11934,11934]]],[1526578763780,[null,[[-1,10814,"从"],[1,10826,"如"],[-1,11124,"在"],[1,11138,"移"],[1,11934,"的"]],[11934,11934],[10814,10814]]],[1526578724047,["Re@Re.local",[[-1,11933,"。"]],[11934,11934],[11933,11933]]],[1526578735871,["Re@Re.local",[[1,11933,"：如何走出迷宫？如果寝室内又一个"]],[11933,11933],[11949,11949]]],[1526578737684,["Re@Re.local",[[-1,11946,"又一个"]],[11949,11949],[11946,11946]]],[1526578744015,["Re@Re.local",[[1,11946,"有一个真空"]],[11946,11946],[11951,11951]]],[1526578751427,["Re@Re.local",[[1,11949,"Roomba"]],[11949,11949],[11955,11955]]],[1526578754824,["Re@Re.local",[[1,11957,"清洁"]],[11957,11957],[11959,11959]]],[1526578755780,["Re@Re.local",[[-1,11957,"清洁"]],[11959,11959],[11957,11957]]],[1526578757717,["Re@Re.local",[[1,11957,"打扫机器人"]],[11957,11957],[11962,11962]]],[1526578819485,[null,[[1,10814,"从"],[-1,10825,"如"],[1,11124,"在"],[-1,11137,"移"],[-1,11962,"的"]],[10814,10814],[11962,11962]]],[1526578819485,[null,[[-1,10814,"从"],[1,10826,"如"],[-1,11124,"在"],[1,11138,"移"],[1,11962,"的"]],[11962,11962],[10814,10814]]],[1526578780073,["Re@Re.local",[[1,11962,"，读者可能下"]],[11962,11962],[11968,11968]]],[1526578780512,["Re@Re.local",[[-1,11967,"下"]],[11968,11968],[11967,11967]]],[1526578783200,["Re@Re.local",[[1,11967,"会想利用所"]],[11967,11967],[11972,11972]]],[1526578783321,["Re@Re.local",[[-1,11971,"所"]],[11972,11972],[11971,11971]]],[1526578790868,["Re@Re.local",[[1,11971,"本节所学只是对其进行重新编程。"]],[11971,11971],[11986,11986]]]]],["03d995e6-c3c5-41d7-92e6-bd2b40effc90",1526578884470,"递归\n===\n\n\n# 4 递归 #\n\n## 4.1 目标 ##\n\n本章目标如下：\n\n- 了解：某些难以处理的问题也许用递归可以轻松解决。\n- 掌握：设计递归式程序。\n- 了解并应用：递归三大法则。\n- 实现：问题的递归式描述。\n- 了解：计算机系统中递归的实现\n\n## 4.2 何为递归 ##\n\n递归是一种解决问题的方法，将一个问题分解为越来越小的子问题，直到问题的规模小到可以被轻松解决。通常来说，递归中有函数对自己本身的调用。从表面上来看似乎并没有什么特别指出，然而递归算法对于某些问题具有一针见血的气消。\n\n\n## 4.3 对数字列表求和 ##\n\n首先来看一个并不需要递归也可以解决的问题。假设相对一个数字列表求和，比如[1,3,5,7,9]。迭代式算法如可执行代码1所示。函数使用求和变量（theSum）来计算列表中数字之和。\n\n** 可执行代码1： 迭代求和 **\n```Python\ndef listsum(numList):\n    theSum = 0\n    for i in numList:\n        theSum = theSum + i\n    return theSum\n\nprint(listsum([1,3,5,7,9]))\n\n```\n那么，现在假设不可以使用while或者for循环，那又该如何做？数学家可能会想到加法本身是一种接受两个参数的函数，即一对数字。对于该列表求和问题便可转化为多对数字求和问题。先写为全括号化的表达式，比如：\n$$((((1+3)+5)+7)+9)$$\n也可以反方向来：\n$$(1+(3+(5+(7+9))))$$\n注意到最里面的括号组（7+9）是不需要迭代或者其它特殊结构便可解决的问题。实际上，可以将求和问题写为以下简化形式：\n$$total= (1+(3+(5+(7+9))))\ntotal= (1+(3+(5+16)))\ntotal= (1+(3+21))\ntotal= (1+24)\ntotal= 25$$\n如何将这种思想转化为Python程序？首先，将求和问题按Python列表的方式来考虑。可能读者会认为对列表的求和即是列表中第一个元素numList[0]与其它所有元素numList[1:]之和，以函数形式写出即为：\n$$listSum(numList)=first(numList)+listSum(rest(numList))$$\n在以上表达式中，first(numList)返回列表中第一个元素，而rest(numList)返回的是去除了第一个元素的原列表（也是一个列表）。用Python表达式可以写为如可执行代码2：\n\n** 可执行代码2：递归求和（第一次递归） **\n```Python\ndef listsum(numList):\n   if len(numList) == 1:\n        return numList[0]\n   else:\n        return numList[0] + listsum(numList[1:])\n\nprint(listsum([1,3,5,7,9]))\n\n```\n在这段代码中，有些地方需要注意。首先，在行2检查了列表是否仅有1个元素。这一判定很关键，它是控制函数结束的必要语句。长度为1的列表求和显然便是其本身。其次，在行5该函数调用了它自己本身。这便是将listsum归为递归算法的原因。递归函数是一种调用自身的函数。\n\n图1演示了对列表[1,3,5,7,9]求和的递归调用。读者可以将这些有序调用认为是一次次的问题简化过程。每调用一次，便转化为解决一个更小更容易的问题，知道问题规模不能再缩小。\n\n![image](http://interactivepython.org/courselib/static/pythonds/_images/sumlistIn.png)\n\n当问题已经最简化时，便开始将每个问题的答案拼装起来直到原始问题被解决。如图2所示，listsum沿着调用顺序返回。当listsum回到了最顶部的问题时，原始问题便得到了解决。\n\n![image](http://interactivepython.org/courselib/static/pythonds/_images/sumlistOut.png)\n\n## 4.4 递归三定律 ##\n\n跟阿西莫夫（Asimov）机器人三定律一样，递归算法也必须遵守三条重要定律：\n\n1. 递归算法必须要有个**约束条件**作为出口。\n2. 递归算法必须不断改变自身状态并向约束条件演进。\n3. 递归算法必须递归地调用自身。\n\n现在来仔细研究一下这三条定律以及在listsum中是如何得到体现的。首先，约束条件是终止算法递归的条件。一般来说，约束条件都是问题规模已经小到足以直接解决的时候。在listsum算法中，约束条件是长度为1的列表。\n\n为满足第二条定律，必须设法改变当前状态并使得算法向约束条件靠近。状态的改变意味着，算法使用的一些数据将被改变。通常来说，即为问题规模以某种方法缩小。在listsum算法中，基本数据结构是列表，因此需要在列表上想办法实现状态的改变。因为约束条件是列表长度为1，向约束条件演进的一种很自然的实现方式就是缩小列表，这便是可执行代码在行5所做的事：将列表长度缩小，然后将其作为参数来调用listsum本身。\n\n最后一条定律是算法必须调用自己本身，这是递归根本的定义。递归对于许多初学者来说是个有些难懂的概念。读者应当已经发现，递归函数是一种很优秀的方法，借助它可以将大规模的问题拆分为小问题，解决这些小问题只需要写一个简单的函数来对它们处理即可。表面看起来，递归似乎是陷入了一种循环。但实际上它在逻辑上并不是循环的，递归的逻辑是用优美简洁的表达式将问题拆分为更小更简单的。\n\n在本章的剩余部分将进一步研究递归，每个例子中都着重于用如何利用三定律来设计算法。\n\n## 4.5 将整数转化为以任何进制表示的字符串 ##\n\n假设需要将整数转化为二进制与十六进制之间的某进制表示的字符串形式。比如，整数10的十进制字符串为\"10\"，而二进制字符串为\"1010\"。有很多算法可以解决该问题，包括前文说过的以栈来解决，但是用递归思想来解决该问题还是最简洁的。\n\n接下来以十进制的整数768为例演示一个具体的问题。假设用一组字符串来对应前10个数字，比如说convString = \"0123456789\" 。通过在字符串中检索，很容易便可将10以内的数字进行转化，例如整数9，那么字符串便是convString[9]，即\"9\"。将769拆分为三个单独的数字7，6，9，将其转化为字符串也很简单了。小于10的整数看起来是不错的约束条件。\n\n确定基本进制后，整个算法将包括3部分：\n\n1. 将原数字转化为一系列单数字。\n2. 利用检索将单数字转为字符串。\n3. 将各单数字字符串连接起来，形成最终的结果。\n\n下一步是实现状态的改变，使得程序向约束条件靠近。因为研究对象是数字，不妨回想一想什么数学运算可以减少数字，最有可能的是减法和除法。虽然说减法也许是可行的，但有些令人困扰的是在这里如何确定减法操作的两个对象。而除法则清晰很多。\n\n将整数769除以10，可以得到76余9，这两个数字很有用。首先，余数是一个小于进制（10）的数，因此可以直接使用检索转化为字符串。其次，得到了一个小于初始数字的数，这便向约束条件靠近了一步。现在需要做得便是将76转化为它的字符表示。同样，利用除法可以得到7余6。最后，问题退化为转化7。流程如图3所示。注意，需要被保存的数被放置在示意图右侧。\n\n![image](http://interactivepython.org/courselib/static/pythonds/_images/toStr.png)\n\n可执行代码1实现了上述的算法。\n\n** 可执行代码1：迭代算法——整数转化为字符串 **\n```Python\ndef toStr(n,base):\n   convertString = \"0123456789ABCDEF\"\n   if n < base:\n      return convertString[n]\n   else:\n      return toStr(n//base,base) + convertString[n%base]\n\nprint(toStr(1453,16))\n```\n注意在第3行，检测了约束条件，即n小于目标进制。一旦检测到约束条件，便停止递归，然后根据convertString序列返回结果。在行6，通过递归调用和除法降低问题规模来同时满足了第2和第3定律。\n\n再来追踪一次该算法，这次将整数10转化为2进制形式字符串（\"1010\"）\n\n![image](http://interactivepython.org/courselib/static/pythonds/_images/toStrBase2.png)\n\n如图4所示，得到了所需结果，似乎数字的顺序错了。但是实际上，算法运行是正常的，因为是在行6中是先进行的递归调用，然后再将余数的字符串标识加上。\n\n## 4.6 栈桢：实现递归 ##\n\n设想，如果不按上文那样将递归调用的单字符结果依次连接起来得到结果，而是将算法修改为在递归调用之前将字符串压入栈中。调整后的算法如可执行代码1所示。\n** 可执行代码1：利用栈实现整数转化为字符串 **\n```Python\nfrom pythonds.basic.stack import Stack\n\nrStack = Stack()\n\ndef toStr(n,base):\n    convertString = \"0123456789ABCDEF\"\n    while n > 0:\n        if n < base:\n            rStack.push(convertString[n])\n        else:\n            rStack.push(convertString[n % base])\n        n = n // base\n    res = \"\"\n    while not rStack.isEmpty():\n        res = res + str(rStack.pop())\n    return res\n\nprint(toStr(1453,16))\n\n```\n每一次调用toStr，都将一个字符放入栈中。就前一个例子来说，可以发现在第4次调用后，得到的栈如图5所示。注意，现在可以直接将字符从栈中推出，再将他们链接为最后的结果\"1010\"即可。\n\n![../_images/recstack.png](http://interactivepython.org/courselib/static/pythonds/_images/recstack.png)\n\n此例说明了Python是如何实现递归函数调用的。在Python中，调用一个函数时，系统会分配一个栈桢用来处理该函数中的局部变量。当函数执行完毕，返回值被放入栈顶等待被调用的函数处理。如图6所示。\n\n![../_images/newcallstack.png](http://interactivepython.org/courselib/static/pythonds/_images/newcallstack.png)\n\n注意对toStr(2//2, 2)的调用在栈中返回了值“1”。该返回值在表达式“1” + convertString[2%2]用来取代函数调用toStr(1,2)，执行后得到的结果“10”又被放在栈顶。这样一来，Python的调用栈取代了代码4中所使用的栈。在该例子中，读者可以认为栈顶的返回值替代了累加变量的作用。\n\n栈桢也为对应函数使用的变量规定了作用域。虽然多次调用同一个函数，每一次调用都为函数的局部变量创建一个新的作用域。\n\n## 4.7 图示递归 ##\n\n在上一节中介绍了一些使用递归算法可以轻松解决的问题，然而很难给出递归函数运行的可视化方法或者思维导图，这就使得递归算法不是那么容易掌握的。本节将研究一些递归的例子并画出示意图。通过研究这些示意图的形成过程，便会对递归过程有更加深刻的理解。\n\n这里使用Python的海龟图像模块turtle进行可视化。turtle模块是所有Python版本的标配并且很容易上手，其符号也很简单。创建一只海龟，该海龟可以前进/后退/左转/右转等，并且可以控制尾巴的抬起和放下。当海龟的尾巴放下且在移动时，便会绘制出线。为了提高观赏性，可以改变海龟尾巴的宽度以及画笔的颜色。\n\n下面简单说明turtle作图的基础，这里会利用turtle绘制一个螺旋线。如可执行代码所示。引入turtle模块后，创建一个turtle实例。当turtle生成后，为其创建一个窗口用来绘图。接下来定义drawSpiral函数。该函数的约束条件是待画线的长度（以len参数表示）减少到小于或等于0。若长度仍大于0，则命令海龟前进len单位然后右转90度。通过再次调用drawSpiral并且传入减小后的长度实现递归。在可执行代码1的最后，调用了函数myWin.exitonclick()，这是窗口的一个很便利的方法，它将海龟置于待机状态直到在窗口内发生点击操作，然后页面才清空并退出。\n\n**可执行代码1：使用海龟绘制递归螺旋线**\n```Python\nimport turtle\n\nmyTurtle = turtle.Turtle()\nmyWin = turtle.Screen()\n\ndef drawSpiral(myTurtle, lineLen):\n    if lineLen > 0:\n        myTurtle.forward(lineLen)\n        myTurtle.right(90)\n        drawSpiral(myTurtle,lineLen-5)\n\ndrawSpiral(myTurtle,100)\nmyWin.exitonclick()\n```\n\n这就是海龟模块中所需要了解的一些基本知识，据此便可以绘制漂亮的团了。下一个程序将绘制一个分形树。分形是数学的一个分支，它与递归有许多相似点。对于某个图形，无论放大多少倍，其基本形状都是一致的，此时便称之为**分形**。很多自然现象具有分形特点，比如海岸线，雪花，山脉，树以及灌木等，这使得CG（Computer Generated）电影具有了可行性。接下来的例子中将绘制一颗分形树。\n\n为了画出这棵树，考虑如何用分形思想来描述一棵树是很有用的。回想一下，分形就是无论放大多少倍都具有相似性的东西。将这种思想用来研究树或者灌木，可以发现即使是小树枝也具有与整棵树一致的形状和特点。据此可以将树定义为一个左右分叉，且左右各有一个更小的“树”（分叉）。引入递归的概念，那么树便是这些递归的小树构成的。\n\n现在将上述思路转换为Python代码。代码1利用海龟来绘制了一颗分形树。可以发现，行5和行7进行了递归调用。行5在右转20度后进行了递归调用，这便是前文提到的右分叉；在行7，海龟在左转40度后进行了另一次递归调用，这即为左分叉。此外，注意到每次调用tree后，都对branchlen参数进行了减法运算，这保证了递归树是越来越小的。读者应该也注意到了行2的**if**语句即是约束条件，在branchLen过小时触发。\n\n**代码1**\n```Python\ndef tree(branchLen,t):\n    if branchLen > 5:\n        t.forward(branchLen)\n        t.right(20)\n        tree(branchLen-15,t)\n        t.left(40)\n        tree(branchLen-10,t)\n        t.right(20)\n        t.backward(branchLen)\n```\n完整的代码如可执行代码2所示。在运行代码前，思考一下是分叉树是如何绘制的。仔细观察这些调用，想想分叉树是如何展开的。它是同时对称地绘制左右分叉还是先右再左？\n\n**可执行代码2:递归绘制分叉树**\n```Python\ndef tree(branchLen,t):\n    if branchLen > 5:\n        t.forward(branchLen)\n        t.right(20)\n        tree(branchLen-15,t)\n        t.left(40)\n        tree(branchLen-15,t)\n        t.right(20)\n        t.backward(branchLen)\n\ndef main():\n    t = turtle.Turtle()\n    myWin = turtle.Screen()\n    t.left(90)\n    t.up()\n    t.backward(100)\n    t.down()\n    t.color(\"green\")\n    tree(75,t)\n    myWin.exitonclick()\n\nmain()\n```\n注意分叉树上的每一个分叉点是如何相应递归调用，以及分叉树是如何一路朝右绘制到最短的那个分支的。如图2所示。现在，仔细观察，程序是在整个树的右侧绘制完成后再沿着分叉返回，分叉树的右半侧如图1所示。接下来将绘制树的左侧，然而并不是直接画出最大的左侧，而是在每次到达最短枝前，先画出左分支的整个右半部分，然后再返回画左半部分。\n\n![../_images/tree1.png](http://interactivepython.org/courselib/static/pythonds/_images/tree1.png)\n\n![../_images/tree2.png](http://interactivepython.org/courselib/static/pythonds/_images/tree2.png)\n\n分形树只是一个起点，此外，读者也应该注意到这棵树看起来并不是那么真实，因为自然界中并不会真的像计算机程序那样具有高度对称性。本章的最后将会介绍一些有趣的选项，可以使得分叉树看起来更真实。\n\n## 4.8 谢尔宾斯基三角形 ##\n\n谢尔宾斯基三角形也是一种具有自相似性的分形图形，如图三所示。谢尔宾斯基三角形是一种三向递归算法。手绘谢尔宾斯基三角形的方法很简单。从某个大的三角形开始，将这个大三角形分为4个小的三角形：连接每条边的中点；剔除掉新的4个三角形中间的那个，对剩余的三个采取同样的步骤；以此类推，不断递归循环。如果笔足够细的话，是可以无穷地画下去的。\n\n![../_images/sierpinski.png](http://interactivepython.org/courselib/static/pythonds/_images/sierpinski.png)\n\n既然这个算法可以无限运行，那就必须得找出约束条件。这里被设置为了任意的划分次数，有时这被称为相似性维数。每次进行递归调用，就将维数减1直到为0。代码如可执行代码1所示。\n\n**可执行代码1:绘制谢尔宾斯基三角形**\n```Python\nimport turtle\n\ndef drawTriangle(points,color,myTurtle):\n    myTurtle.fillcolor(color)\n    myTurtle.up()\n    myTurtle.goto(points[0][0],points[0][1])\n    myTurtle.down()\n    myTurtle.begin_fill()\n    myTurtle.goto(points[1][0],points[1][1])\n    myTurtle.goto(points[2][0],points[2][1])\n    myTurtle.goto(points[0][0],points[0][1])\n    myTurtle.end_fill()\n\ndef getMid(p1,p2):\n    return ( (p1[0]+p2[0]) / 2, (p1[1] + p2[1]) / 2)\n\ndef sierpinski(points,degree,myTurtle):\n    colormap = ['blue','red','green','white','yellow',\n                'violet','orange']\n    drawTriangle(points,colormap[degree],myTurtle)\n    if degree > 0:\n        sierpinski([points[0],\n                        getMid(points[0], points[1]),\n                        getMid(points[0], points[2])],\n                   degree-1, myTurtle)\n        sierpinski([points[1],\n                        getMid(points[0], points[1]),\n                        getMid(points[1], points[2])],\n                   degree-1, myTurtle)\n        sierpinski([points[2],\n                        getMid(points[2], points[1]),\n                        getMid(points[0], points[2])],\n                   degree-1, myTurtle)\n\ndef main():\n   myTurtle = turtle.Turtle()\n   myWin = turtle.Screen()\n   myPoints = [[-100,-50],[0,100],[100,-50]]\n   sierpinski(myPoints,3,myTurtle)\n   myWin.exitonclick()\n\nmain()\n```\n代码1即是按前文所述思想写出来的。sierpinski做的第一件事是绘制最外部的三角形。接下来，进行了三次递归调用，每一次都是用来通过连接中点来获得新的三角形。这里又用了标准的海龟库。可以通过在Python提示符里输入help('turtle')来细究turtle库中可用的方法。\n\n仔细研究代码，想想这些三角形的绘制顺序。确切地来说，绘制顺序取决于初始的设定，这里假设顺序是左下，上，右下。考虑到sierpinski函数调用其本身的方式，sierpinski先是沿最短路线直接到达可以绘制的最小的左下角的三角形，再返过来绘制其它的剩余部分：先是按类似的方式直接向最小的、最顶部的三角形前进；最后再绘制右下角的最小的三角形。\n\n有时候根据函数调用的示意图来理解递归算法是很有用的。如图4所示，本例中的递归算法总是先向左边前进。黑线表示正在运行的，灰色的表示没有运行的，越靠近图4的底部，三角形越小。函数每次执行都消耗一个相似维度。到达最底部左边的三角形后，将继续绘制中间的三角形，并以此类推。\n\n![../_images/stCallTree.png](http://interactivepython.org/courselib/static/pythonds/_images/stCallTree.png)\n\nsierpinski函数很大程度上是基于getMid函数的。getMid函数接收两个参数作为端点，返回两者的中点。此外，可执行代码1中使用了begin_fill和end_fill方法来绘制带填充色的三角形。\n\n## 4.9 复杂递归问题 ##\n\n在前几节中，本书讨论了一些相对简单并且图形上很有趣的问题来帮助读者理解递归。在本节中，将研究一些使用迭代法难以解决然而却可以用递归法优雅而简洁地解决的问题。在最后，将讲解一个看起来似乎能用递归法解决但实际上并不能的问题。\n\n## 4.10 河内（Hanoi）塔问题 ##\n\n河内塔问题由法国数学家Edouard于1883年受到印度教中的一个故事启发而提出，在故事中，年轻僧侣将被予以考题。在最开始，僧侣们会得到3根杆以及64个金圆盘，每个盘都比其下面的盘小一些。他们的任务是将这64个盘从一个盘移动到另外一个盘去，并且有两个限制条件：每次只允许移动一个盘；禁止将大盘置于小盘之上。僧侣们夜以继日地努力，每秒移动一个盘子。传说中，当他们完成此任务时，世界将会毁灭。\n\n传说很有趣，但现在也不用担心世纪末日的问题。正确地完成该任务需要$2^{64}-1=18446744073709551615$次移动。1秒移动1次，也需要584942417355年。显然，实际所需时间比这更长。\n\n图1演示了从第一根杆移动到第三根杆时，中间杆上的盘子的情况。注意到，按照规定，每根杆上的盘子都是从上到下依次变大的。如果你之前没有接触过该问题，那不妨现在来尝试一下。不必真的想象盘子和杆什么的，一堆书或者一堆纸即可。\n\n![image](http://interactivepython.org/courselib/static/pythonds/_images/hanoi.png)\n\n那么用递归该如何解决这个问题？约束条件又是什么？现在来从头考虑下这个问题。假设有5个盘子，并且开始都放在杆1上。如果已经知道了如何将4个盘子移动到杆2上，便可以轻松地将底部的盘子移到杆3上，然后把那4个盘子从杆2移动到杆3上。但是不知道怎么移动4个盘子又该如何是好？那么考虑下，假如知道如何移动3个盘子的杆...以此类推。显然将1个盘子移动到杆3是很容易的。看起来似乎这就是约束条件了。\n\n\n下面是对盘子从起始杆通过中间杆移动到目标杆的高度概括（设盘数为Height）：\n\n1. 利用目标杆，将高度为 Height - 1 的塔从起始杆移动到中间杆上。\n2. 将剩下的那个盘子放到目标杆上。\n3. 利用中间杆，将高度为 Height - 1 的塔从中间杆移动到目标杆上。\n\n维持大盘在下的规则便可以递归使用上面的3步，便可以处理任何更大规模的问题。上述步骤中唯一缺少的就是对约束条件的确定。最简的河内塔问题是仅有一个盘子的塔。在这种情况下，只需要将该盘子直接移动到目标杆即可。高度为1的河内塔即是约束条件。此外，上述步骤通过在步骤1和3中减少塔的高度来实现了向约束条件收敛。代码1给出了解决河内塔问题的Python代码。\n\n**代码1**\n```Python\ndef moveTower(height,fromPole, toPole, withPole):\n    if height >= 1:\n        moveTower(height-1,fromPole,withPole,toPole)\n        moveDisk(fromPole,toPole)\n        moveTower(height-1,withPole,toPole,fromPole)\n```\n该代码看起来似乎就像英文描述性文字一样。该算法的简便性关键在于进行了两次不同的递归调用。在行3，将除了最底部（最大的）盘子全部移到中间杆上，行4仅将底部的盘子移动到目标盘。行5则是将中间杆上的圆盘移动到最大盘的上部（目标杆）即可。约束条件即是塔高度为0。注意，处理约束条件在这种情况下是调用moveDisk函数的前提条件。\n\nmoveDisk函数，如代码2所示，也很简单。它仅仅是打印出将盘子从某个杆上移动到另一个杆的过程。读者可以试着运行一下，便可发现该算法可以很高效地解决该问题。\n\n**代码2**\n```Python\ndef moveDisk(fp,tp):\n    print(\"moving disk from\",fp,\"to\",tp)\n```\n\n看过moveTower和moveDisk的代码后，读者可能会想为何不直接使用栈来追踪任意盘子在哪个杆里。提示：如果要显式地追踪盘子，应该需要3个栈，每个对应一个杆。答案是，Python本身就隐式地提供了我们所需要的调用栈。\n\n## 4.6 探索迷宫 ##\n\n本节将研究的问题跟拓宽机器人活动范围有关：如何走出迷宫？如果寝室内有一个Roomba真空打扫机器人，读者可能会想利用本节所学只是对其进行重新编程。",[[1526578830057,["Re@Re.local",[[1,11986,"本节的问题是："]],[11986,11986],[11993,11993]]],[1526578832281,["Re@Re.local",[[-1,11992,"："]],[11993,11993],[11992,11992]]],[1526578847147,["Re@Re.local",[[1,11992,"帮助海龟走出虚拟的"]],[11992,11992],[12001,12001]]],[1526578847902,["Re@Re.local",[[-1,12000,"的"]],[12001,12001],[12000,12000]]],[1526578872926,["Re@Re.local",[[1,12000,"迷宫。在我们"]],[12000,12000],[12006,12006]]],[1526578873703,["Re@Re.local",[[-1,12004,"我们"]],[12006,12006],[12004,12004]]],[1526578883166,["Re@Re.local",[[1,12004,"该问题中，假设海龟掉入"]],[12004,12004],[12015,12015]]],[1526578885579,["Re@Re.local",[[1,12015,"中央，需要"]],[12015,12015],[12020,12020]]],[1526578892577,["Re@Re.local",[[-1,12017,"，需要"]],[12020,12020],[12017,12017]]],[1526578893747,["Re@Re.local",[[1,12017,"，"]],[12017,12017],[12018,12018]]],[1526578895357,["Re@Re.local",[[-1,12017,"，"]],[12018,12018],[12017,12017]]],[1526578897098,["Re@Re.local",[[1,12017,"，"]],[12017,12017],[12018,12018]]],[1526578901725,["Re@Re.local",[[-1,12017,"，"]],[12018,12018],[12017,12017]]],[1526578929451,["Re@Re.local",[[1,12017,"并开始虚招出炉。观察图2，思考如何走出迷宫"]],[12017,12017],[12038,12038]]],[1526578930388,["Re@Re.local",[[-1,12034,"走出迷宫"]],[12038,12038],[12034,12034]]],[1526578932846,["Re@Re.local",[[1,12034,"解决该问题。"]],[12034,12034],[12040,12040]]],[1526578933136,["Re@Re.local",[[1,12040,"\n\n"]],[12040,12040],[12041,12041]]],[1526578933363,["Re@Re.local",[[1,12042,"\n"]],[12041,12041],[12042,12042]]],[1526578937635,["Re@Re.local",[[1,12042,"![../_images/maze.png](http://interactivepython.org/courselib/static/pythonds/_images/maze.png)"]],[12042,12042],[12137,12137]]],[1526578938475,["Re@Re.local",[[1,12138,"\n"]],[12137,12137],[12138,12138]]],[1526578938738,["Re@Re.local",[[1,12139,"\n"]],[12138,12138],[12139,12139]]],[1526578970046,["Re@Re.local",[[-1,12139,"\n"],[1,12140,"为了简化问题，假设迷宫被分为许多正放心"]],[12139,12139],[12158,12158]]],[1526578973055,["Re@Re.local",[[-1,12150,"被分为许多正放心"]],[12158,12158],[12150,12150]]],[1526578976569,["Re@Re.local",[[1,12150,"以正方形的"]],[12150,12150],[12155,12155]]],[1526578977254,["Re@Re.local",[[-1,12154,"的"]],[12155,12155],[12154,12154]]],[1526578980795,["Re@Re.local",[[1,12154,"为单位划分。"]],[12154,12154],[12160,12160]]]]],["b0913474-a925-4de4-bf20-05a6810e7d3f",1526811281924,"递归\n===\n\n\n# 4 递归 #\n\n## 4.1 目标 ##\n\n本章目标如下：\n\n- 了解：某些难以处理的问题也许用递归可以轻松解决。\n- 掌握：设计递归式程序。\n- 了解并应用：递归三大法则。\n- 实现：问题的递归式描述。\n- 了解：计算机系统中递归的实现\n\n## 4.2 何为递归 ##\n\n递归是一种解决问题的方法，将一个问题分解为越来越小的子问题，直到问题的规模小到可以被轻松解决。通常来说，递归中有函数对自己本身的调用。从表面上来看似乎并没有什么特别指出，然而递归算法对于某些问题具有一针见血的气消。\n\n\n## 4.3 对数字列表求和 ##\n\n首先来看一个并不需要递归也可以解决的问题。假设相对一个数字列表求和，比如[1,3,5,7,9]。迭代式算法如可执行代码1所示。函数使用求和变量（theSum）来计算列表中数字之和。\n\n** 可执行代码1： 迭代求和 **\n```Python\ndef listsum(numList):\n    theSum = 0\n    for i in numList:\n        theSum = theSum + i\n    return theSum\n\nprint(listsum([1,3,5,7,9]))\n\n```\n那么，现在假设不可以使用while或者for循环，那又该如何做？数学家可能会想到加法本身是一种接受两个参数的函数，即一对数字。对于该列表求和问题便可转化为多对数字求和问题。先写为全括号化的表达式，比如：\n$$((((1+3)+5)+7)+9)$$\n也可以反方向来：\n$$(1+(3+(5+(7+9))))$$\n注意到最里面的括号组（7+9）是不需要迭代或者其它特殊结构便可解决的问题。实际上，可以将求和问题写为以下简化形式：\n$$total= (1+(3+(5+(7+9))))\ntotal= (1+(3+(5+16)))\ntotal= (1+(3+21))\ntotal= (1+24)\ntotal= 25$$\n如何将这种思想转化为Python程序？首先，将求和问题按Python列表的方式来考虑。可能读者会认为对列表的求和即是列表中第一个元素numList[0]与其它所有元素numList[1:]之和，以函数形式写出即为：\n$$listSum(numList)=first(numList)+listSum(rest(numList))$$\n在以上表达式中，first(numList)返回列表中第一个元素，而rest(numList)返回的是去除了第一个元素的原列表（也是一个列表）。用Python表达式可以写为如可执行代码2：\n\n** 可执行代码2：递归求和（第一次递归） **\n```Python\ndef listsum(numList):\n   if len(numList) == 1:\n        return numList[0]\n   else:\n        return numList[0] + listsum(numList[1:])\n\nprint(listsum([1,3,5,7,9]))\n\n```\n在这段代码中，有些地方需要注意。首先，在行2检查了列表是否仅有1个元素。这一判定很关键，它是控制函数结束的必要语句。长度为1的列表求和显然便是其本身。其次，在行5该函数调用了它自己本身。这便是将listsum归为递归算法的原因。递归函数是一种调用自身的函数。\n\n图1演示了对列表[1,3,5,7,9]求和的递归调用。读者可以将这些有序调用认为是一次次的问题简化过程。每调用一次，便转化为解决一个更小更容易的问题，知道问题规模不能再缩小。\n\n![image](http://interactivepython.org/courselib/static/pythonds/_images/sumlistIn.png)\n\n当问题已经最简化时，便开始将每个问题的答案拼装起来直到原始问题被解决。如图2所示，listsum沿着调用顺序返回。当listsum回到了最顶部的问题时，原始问题便得到了解决。\n\n![image](http://interactivepython.org/courselib/static/pythonds/_images/sumlistOut.png)\n\n## 4.4 递归三定律 ##\n\n跟阿西莫夫（Asimov）机器人三定律一样，递归算法也必须遵守三条重要定律：\n\n1. 递归算法必须要有个**约束条件**作为出口。\n2. 递归算法必须不断改变自身状态并向约束条件演进。\n3. 递归算法必须递归地调用自身。\n\n现在来仔细研究一下这三条定律以及在listsum中是如何得到体现的。首先，约束条件是终止算法递归的条件。一般来说，约束条件都是问题规模已经小到足以直接解决的时候。在listsum算法中，约束条件是长度为1的列表。\n\n为满足第二条定律，必须设法改变当前状态并使得算法向约束条件靠近。状态的改变意味着，算法使用的一些数据将被改变。通常来说，即为问题规模以某种方法缩小。在listsum算法中，基本数据结构是列表，因此需要在列表上想办法实现状态的改变。因为约束条件是列表长度为1，向约束条件演进的一种很自然的实现方式就是缩小列表，这便是可执行代码在行5所做的事：将列表长度缩小，然后将其作为参数来调用listsum本身。\n\n最后一条定律是算法必须调用自己本身，这是递归根本的定义。递归对于许多初学者来说是个有些难懂的概念。读者应当已经发现，递归函数是一种很优秀的方法，借助它可以将大规模的问题拆分为小问题，解决这些小问题只需要写一个简单的函数来对它们处理即可。表面看起来，递归似乎是陷入了一种循环。但实际上它在逻辑上并不是循环的，递归的逻辑是用优美简洁的表达式将问题拆分为更小更简单的。\n\n在本章的剩余部分将进一步研究递归，每个例子中都着重于用如何利用三定律来设计算法。\n\n## 4.5 将整数转化为以任何进制表示的字符串 ##\n\n假设需要将整数转化为二进制与十六进制之间的某进制表示的字符串形式。比如，整数10的十进制字符串为\"10\"，而二进制字符串为\"1010\"。有很多算法可以解决该问题，包括前文说过的以栈来解决，但是用递归思想来解决该问题还是最简洁的。\n\n接下来以十进制的整数768为例演示一个具体的问题。假设用一组字符串来对应前10个数字，比如说convString = \"0123456789\" 。通过在字符串中检索，很容易便可将10以内的数字进行转化，例如整数9，那么字符串便是convString[9]，即\"9\"。将769拆分为三个单独的数字7，6，9，将其转化为字符串也很简单了。小于10的整数看起来是不错的约束条件。\n\n确定基本进制后，整个算法将包括3部分：\n\n1. 将原数字转化为一系列单数字。\n2. 利用检索将单数字转为字符串。\n3. 将各单数字字符串连接起来，形成最终的结果。\n\n下一步是实现状态的改变，使得程序向约束条件靠近。因为研究对象是数字，不妨回想一想什么数学运算可以减少数字，最有可能的是减法和除法。虽然说减法也许是可行的，但有些令人困扰的是在这里如何确定减法操作的两个对象。而除法则清晰很多。\n\n将整数769除以10，可以得到76余9，这两个数字很有用。首先，余数是一个小于进制（10）的数，因此可以直接使用检索转化为字符串。其次，得到了一个小于初始数字的数，这便向约束条件靠近了一步。现在需要做得便是将76转化为它的字符表示。同样，利用除法可以得到7余6。最后，问题退化为转化7。流程如图3所示。注意，需要被保存的数被放置在示意图右侧。\n\n![image](http://interactivepython.org/courselib/static/pythonds/_images/toStr.png)\n\n可执行代码1实现了上述的算法。\n\n** 可执行代码1：迭代算法——整数转化为字符串 **\n```Python\ndef toStr(n,base):\n   convertString = \"0123456789ABCDEF\"\n   if n < base:\n      return convertString[n]\n   else:\n      return toStr(n//base,base) + convertString[n%base]\n\nprint(toStr(1453,16))\n```\n注意在第3行，检测了约束条件，即n小于目标进制。一旦检测到约束条件，便停止递归，然后根据convertString序列返回结果。在行6，通过递归调用和除法降低问题规模来同时满足了第2和第3定律。\n\n再来追踪一次该算法，这次将整数10转化为2进制形式字符串（\"1010\"）\n\n![image](http://interactivepython.org/courselib/static/pythonds/_images/toStrBase2.png)\n\n如图4所示，得到了所需结果，似乎数字的顺序错了。但是实际上，算法运行是正常的，因为是在行6中是先进行的递归调用，然后再将余数的字符串标识加上。\n\n## 4.6 栈桢：实现递归 ##\n\n设想，如果不按上文那样将递归调用的单字符结果依次连接起来得到结果，而是将算法修改为在递归调用之前将字符串压入栈中。调整后的算法如可执行代码1所示。\n** 可执行代码1：利用栈实现整数转化为字符串 **\n```Python\nfrom pythonds.basic.stack import Stack\n\nrStack = Stack()\n\ndef toStr(n,base):\n    convertString = \"0123456789ABCDEF\"\n    while n > 0:\n        if n < base:\n            rStack.push(convertString[n])\n        else:\n            rStack.push(convertString[n % base])\n        n = n // base\n    res = \"\"\n    while not rStack.isEmpty():\n        res = res + str(rStack.pop())\n    return res\n\nprint(toStr(1453,16))\n\n```\n每一次调用toStr，都将一个字符放入栈中。就前一个例子来说，可以发现在第4次调用后，得到的栈如图5所示。注意，现在可以直接将字符从栈中推出，再将他们链接为最后的结果\"1010\"即可。\n\n![../_images/recstack.png](http://interactivepython.org/courselib/static/pythonds/_images/recstack.png)\n\n此例说明了Python是如何实现递归函数调用的。在Python中，调用一个函数时，系统会分配一个栈桢用来处理该函数中的局部变量。当函数执行完毕，返回值被放入栈顶等待被调用的函数处理。如图6所示。\n\n![../_images/newcallstack.png](http://interactivepython.org/courselib/static/pythonds/_images/newcallstack.png)\n\n注意对toStr(2//2, 2)的调用在栈中返回了值“1”。该返回值在表达式“1” + convertString[2%2]用来取代函数调用toStr(1,2)，执行后得到的结果“10”又被放在栈顶。这样一来，Python的调用栈取代了代码4中所使用的栈。在该例子中，读者可以认为栈顶的返回值替代了累加变量的作用。\n\n栈桢也为对应函数使用的变量规定了作用域。虽然多次调用同一个函数，每一次调用都为函数的局部变量创建一个新的作用域。\n\n## 4.7 图示递归 ##\n\n在上一节中介绍了一些使用递归算法可以轻松解决的问题，然而很难给出递归函数运行的可视化方法或者思维导图，这就使得递归算法不是那么容易掌握的。本节将研究一些递归的例子并画出示意图。通过研究这些示意图的形成过程，便会对递归过程有更加深刻的理解。\n\n这里使用Python的海龟图像模块turtle进行可视化。turtle模块是所有Python版本的标配并且很容易上手，其符号也很简单。创建一只海龟，该海龟可以前进/后退/左转/右转等，并且可以控制尾巴的抬起和放下。当海龟的尾巴放下且在移动时，便会绘制出线。为了提高观赏性，可以改变海龟尾巴的宽度以及画笔的颜色。\n\n下面简单说明turtle作图的基础，这里会利用turtle绘制一个螺旋线。如可执行代码所示。引入turtle模块后，创建一个turtle实例。当turtle生成后，为其创建一个窗口用来绘图。接下来定义drawSpiral函数。该函数的约束条件是待画线的长度（以len参数表示）减少到小于或等于0。若长度仍大于0，则命令海龟前进len单位然后右转90度。通过再次调用drawSpiral并且传入减小后的长度实现递归。在可执行代码1的最后，调用了函数myWin.exitonclick()，这是窗口的一个很便利的方法，它将海龟置于待机状态直到在窗口内发生点击操作，然后页面才清空并退出。\n\n**可执行代码1：使用海龟绘制递归螺旋线**\n```Python\nimport turtle\n\nmyTurtle = turtle.Turtle()\nmyWin = turtle.Screen()\n\ndef drawSpiral(myTurtle, lineLen):\n    if lineLen > 0:\n        myTurtle.forward(lineLen)\n        myTurtle.right(90)\n        drawSpiral(myTurtle,lineLen-5)\n\ndrawSpiral(myTurtle,100)\nmyWin.exitonclick()\n```\n\n这就是海龟模块中所需要了解的一些基本知识，据此便可以绘制漂亮的团了。下一个程序将绘制一个分形树。分形是数学的一个分支，它与递归有许多相似点。对于某个图形，无论放大多少倍，其基本形状都是一致的，此时便称之为**分形**。很多自然现象具有分形特点，比如海岸线，雪花，山脉，树以及灌木等，这使得CG（Computer Generated）电影具有了可行性。接下来的例子中将绘制一颗分形树。\n\n为了画出这棵树，考虑如何用分形思想来描述一棵树是很有用的。回想一下，分形就是无论放大多少倍都具有相似性的东西。将这种思想用来研究树或者灌木，可以发现即使是小树枝也具有与整棵树一致的形状和特点。据此可以将树定义为一个左右分叉，且左右各有一个更小的“树”（分叉）。引入递归的概念，那么树便是这些递归的小树构成的。\n\n现在将上述思路转换为Python代码。代码1利用海龟来绘制了一颗分形树。可以发现，行5和行7进行了递归调用。行5在右转20度后进行了递归调用，这便是前文提到的右分叉；在行7，海龟在左转40度后进行了另一次递归调用，这即为左分叉。此外，注意到每次调用tree后，都对branchlen参数进行了减法运算，这保证了递归树是越来越小的。读者应该也注意到了行2的**if**语句即是约束条件，在branchLen过小时触发。\n\n**代码1**\n```Python\ndef tree(branchLen,t):\n    if branchLen > 5:\n        t.forward(branchLen)\n        t.right(20)\n        tree(branchLen-15,t)\n        t.left(40)\n        tree(branchLen-10,t)\n        t.right(20)\n        t.backward(branchLen)\n```\n完整的代码如可执行代码2所示。在运行代码前，思考一下是分叉树是如何绘制的。仔细观察这些调用，想想分叉树是如何展开的。它是同时对称地绘制左右分叉还是先右再左？\n\n**可执行代码2:递归绘制分叉树**\n```Python\ndef tree(branchLen,t):\n    if branchLen > 5:\n        t.forward(branchLen)\n        t.right(20)\n        tree(branchLen-15,t)\n        t.left(40)\n        tree(branchLen-15,t)\n        t.right(20)\n        t.backward(branchLen)\n\ndef main():\n    t = turtle.Turtle()\n    myWin = turtle.Screen()\n    t.left(90)\n    t.up()\n    t.backward(100)\n    t.down()\n    t.color(\"green\")\n    tree(75,t)\n    myWin.exitonclick()\n\nmain()\n```\n注意分叉树上的每一个分叉点是如何相应递归调用，以及分叉树是如何一路朝右绘制到最短的那个分支的。如图2所示。现在，仔细观察，程序是在整个树的右侧绘制完成后再沿着分叉返回，分叉树的右半侧如图1所示。接下来将绘制树的左侧，然而并不是直接画出最大的左侧，而是在每次到达最短枝前，先画出左分支的整个右半部分，然后再返回画左半部分。\n\n![../_images/tree1.png](http://interactivepython.org/courselib/static/pythonds/_images/tree1.png)\n\n![../_images/tree2.png](http://interactivepython.org/courselib/static/pythonds/_images/tree2.png)\n\n分形树只是一个起点，此外，读者也应该注意到这棵树看起来并不是那么真实，因为自然界中并不会真的像计算机程序那样具有高度对称性。本章的最后将会介绍一些有趣的选项，可以使得分叉树看起来更真实。\n\n## 4.8 谢尔宾斯基三角形 ##\n\n谢尔宾斯基三角形也是一种具有自相似性的分形图形，如图三所示。谢尔宾斯基三角形是一种三向递归算法。手绘谢尔宾斯基三角形的方法很简单。从某个大的三角形开始，将这个大三角形分为4个小的三角形：连接每条边的中点；剔除掉新的4个三角形中间的那个，对剩余的三个采取同样的步骤；以此类推，不断递归循环。如果笔足够细的话，是可以无穷地画下去的。\n\n![../_images/sierpinski.png](http://interactivepython.org/courselib/static/pythonds/_images/sierpinski.png)\n\n既然这个算法可以无限运行，那就必须得找出约束条件。这里被设置为了任意的划分次数，有时这被称为相似性维数。每次进行递归调用，就将维数减1直到为0。代码如可执行代码1所示。\n\n**可执行代码1:绘制谢尔宾斯基三角形**\n```Python\nimport turtle\n\ndef drawTriangle(points,color,myTurtle):\n    myTurtle.fillcolor(color)\n    myTurtle.up()\n    myTurtle.goto(points[0][0],points[0][1])\n    myTurtle.down()\n    myTurtle.begin_fill()\n    myTurtle.goto(points[1][0],points[1][1])\n    myTurtle.goto(points[2][0],points[2][1])\n    myTurtle.goto(points[0][0],points[0][1])\n    myTurtle.end_fill()\n\ndef getMid(p1,p2):\n    return ( (p1[0]+p2[0]) / 2, (p1[1] + p2[1]) / 2)\n\ndef sierpinski(points,degree,myTurtle):\n    colormap = ['blue','red','green','white','yellow',\n                'violet','orange']\n    drawTriangle(points,colormap[degree],myTurtle)\n    if degree > 0:\n        sierpinski([points[0],\n                        getMid(points[0], points[1]),\n                        getMid(points[0], points[2])],\n                   degree-1, myTurtle)\n        sierpinski([points[1],\n                        getMid(points[0], points[1]),\n                        getMid(points[1], points[2])],\n                   degree-1, myTurtle)\n        sierpinski([points[2],\n                        getMid(points[2], points[1]),\n                        getMid(points[0], points[2])],\n                   degree-1, myTurtle)\n\ndef main():\n   myTurtle = turtle.Turtle()\n   myWin = turtle.Screen()\n   myPoints = [[-100,-50],[0,100],[100,-50]]\n   sierpinski(myPoints,3,myTurtle)\n   myWin.exitonclick()\n\nmain()\n```\n代码1即是按前文所述思想写出来的。sierpinski做的第一件事是绘制最外部的三角形。接下来，进行了三次递归调用，每一次都是用来通过连接中点来获得新的三角形。这里又用了标准的海龟库。可以通过在Python提示符里输入help('turtle')来细究turtle库中可用的方法。\n\n仔细研究代码，想想这些三角形的绘制顺序。确切地来说，绘制顺序取决于初始的设定，这里假设顺序是左下，上，右下。考虑到sierpinski函数调用其本身的方式，sierpinski先是沿最短路线直接到达可以绘制的最小的左下角的三角形，再返过来绘制其它的剩余部分：先是按类似的方式直接向最小的、最顶部的三角形前进；最后再绘制右下角的最小的三角形。\n\n有时候根据函数调用的示意图来理解递归算法是很有用的。如图4所示，本例中的递归算法总是先向左边前进。黑线表示正在运行的，灰色的表示没有运行的，越靠近图4的底部，三角形越小。函数每次执行都消耗一个相似维度。到达最底部左边的三角形后，将继续绘制中间的三角形，并以此类推。\n\n![../_images/stCallTree.png](http://interactivepython.org/courselib/static/pythonds/_images/stCallTree.png)\n\nsierpinski函数很大程度上是基于getMid函数的。getMid函数接收两个参数作为端点，返回两者的中点。此外，可执行代码1中使用了begin_fill和end_fill方法来绘制带填充色的三角形。\n\n## 4.9 复杂递归问题 ##\n\n在前几节中，本书讨论了一些相对简单并且图形上很有趣的问题来帮助读者理解递归。在本节中，将研究一些使用迭代法难以解决然而却可以用递归法优雅而简洁地解决的问题。在最后，将讲解一个看起来似乎能用递归法解决但实际上并不能的问题。\n\n## 4.10 河内（Hanoi）塔问题 ##\n\n河内塔问题由法国数学家Edouard于1883年受到印度教中的一个故事启发而提出，在故事中，年轻僧侣将被予以考题。在最开始，僧侣们会得到3根杆以及64个金圆盘，每个盘都比其下面的盘小一些。他们的任务是将这64个盘从一个盘移动到另外一个盘去，并且有两个限制条件：每次只允许移动一个盘；禁止将大盘置于小盘之上。僧侣们夜以继日地努力，每秒移动一个盘子。传说中，当他们完成此任务时，世界将会毁灭。\n\n传说很有趣，但现在也不用担心世纪末日的问题。正确地完成该任务需要$2^{64}-1=18446744073709551615$次移动。1秒移动1次，也需要584942417355年。显然，实际所需时间比这更长。\n\n图1演示了从第一根杆移动到第三根杆时，中间杆上的盘子的情况。注意到，按照规定，每根杆上的盘子都是从上到下依次变大的。如果你之前没有接触过该问题，那不妨现在来尝试一下。不必真的想象盘子和杆什么的，一堆书或者一堆纸即可。\n\n![image](http://interactivepython.org/courselib/static/pythonds/_images/hanoi.png)\n\n那么用递归该如何解决这个问题？约束条件又是什么？现在来从头考虑下这个问题。假设有5个盘子，并且开始都放在杆1上。如果已经知道了如何将4个盘子移动到杆2上，便可以轻松地将底部的盘子移到杆3上，然后把那4个盘子从杆2移动到杆3上。但是不知道怎么移动4个盘子又该如何是好？那么考虑下，假如知道如何移动3个盘子的杆...以此类推。显然将1个盘子移动到杆3是很容易的。看起来似乎这就是约束条件了。\n\n\n下面是对盘子从起始杆通过中间杆移动到目标杆的高度概括（设盘数为Height）：\n\n1. 利用目标杆，将高度为 Height - 1 的塔从起始杆移动到中间杆上。\n2. 将剩下的那个盘子放到目标杆上。\n3. 利用中间杆，将高度为 Height - 1 的塔从中间杆移动到目标杆上。\n\n维持大盘在下的规则便可以递归使用上面的3步，便可以处理任何更大规模的问题。上述步骤中唯一缺少的就是对约束条件的确定。最简的河内塔问题是仅有一个盘子的塔。在这种情况下，只需要将该盘子直接移动到目标杆即可。高度为1的河内塔即是约束条件。此外，上述步骤通过在步骤1和3中减少塔的高度来实现了向约束条件收敛。代码1给出了解决河内塔问题的Python代码。\n\n**代码1**\n```Python\ndef moveTower(height,fromPole, toPole, withPole):\n    if height >= 1:\n        moveTower(height-1,fromPole,withPole,toPole)\n        moveDisk(fromPole,toPole)\n        moveTower(height-1,withPole,toPole,fromPole)\n```\n该代码看起来似乎就像英文描述性文字一样。该算法的简便性关键在于进行了两次不同的递归调用。在行3，将除了最底部（最大的）盘子全部移到中间杆上，行4仅将底部的盘子移动到目标盘。行5则是将中间杆上的圆盘移动到最大盘的上部（目标杆）即可。约束条件即是塔高度为0。注意，处理约束条件在这种情况下是调用moveDisk函数的前提条件。\n\nmoveDisk函数，如代码2所示，也很简单。它仅仅是打印出将盘子从某个杆上移动到另一个杆的过程。读者可以试着运行一下，便可发现该算法可以很高效地解决该问题。\n\n**代码2**\n```Python\ndef moveDisk(fp,tp):\n    print(\"moving disk from\",fp,\"to\",tp)\n```\n\n看过moveTower和moveDisk的代码后，读者可能会想为何不直接使用栈来追踪任意盘子在哪个杆里。提示：如果要显式地追踪盘子，应该需要3个栈，每个对应一个杆。答案是，Python本身就隐式地提供了我们所需要的调用栈。\n\n## 4.6 探索迷宫 ##\n\n本节将研究的问题跟拓宽机器人活动范围有关：如何走出迷宫？如果寝室内有一个Roomba真空打扫机器人，读者可能会想利用本节所学只是对其进行重新编程。本节的问题是帮助海龟走出虚拟迷宫。在该问题中，假设海龟掉入中央并开始虚招出炉。观察图2，思考如何解决该问题。\n\n![../_images/maze.png](http://interactivepython.org/courselib/static/pythonds/_images/maze.png)\n\n为了简化问题，假设迷宫以正方形为单位划分。",[[1526811235141,["Re@Re.local",[[1,12160,"meige"]],[12160,12160],[12165,12165]]],[1526811236021,["Re@Re.local",[[-1,12160,"meige"]],[12165,12165],[12160,12160]]],[1526811240383,["Re@Re.local",[[1,12160,"每个正方形"]],[12160,12160],[12165,12165]]],[1526811245690,["Re@Re.local",[[-1,12162,"正方形"]],[12165,12165],[12162,12162]]],[1526811248110,["Re@Re.local",[[-1,12151,"正方形"]],[12154,12154],[12151,12151]]],[1526811251149,["Re@Re.local",[[1,12151,"矩形"]],[12151,12151],[12153,12153]]],[1526811270886,["Re@Re.local",[[1,12161,"矩形要么是开房"]],[12161,12161],[12168,12168]]],[1526811271901,["Re@Re.local",[[-1,12166,"开房"]],[12168,12168],[12166,12166]]],[1526811276087,["Re@Re.local",[[1,12166,"开放的要么是"]],[12166,12166],[12172,12172]]],[1526811282454,["Re@Re.local",[[1,12172,"封闭"]],[12172,12172],[12174,12174]]],[1526811284729,["Re@Re.local",[[-1,12172,"封闭"]],[12174,12174],[12172,12172]]],[1526811296599,["Re@Re.local",[[1,12172,"填充以墙。"]],[12172,12172],[12177,12177]]],[1526811534218,["Re@Re.local",[[1,12177,"h"]],[12176,12177],[12177,12178]]],[1526811534362,["Re@Re.local",[[1,12178,"a"]],[12177,12178],[12177,12179]]],[1526811534449,["Re@Re.local",[[1,12179,"i"]],[12177,12179],[12177,12180]]],[1526811534993,["Re@Re.local",[[1,12180," g"]],[12177,12180],[12177,12182]]],[1526811535077,["Re@Re.local",[[1,12182,"u"]],[12177,12182],[12177,12183]]],[1526811535121,["Re@Re.local",[[1,12183,"i"]],[12177,12183],[12177,12184]]],[1526811540582,["Re@Re.local",[[-1,12177,"hai gui"],[1,12184,"海龟只能通过开放性质"]],[12177,12184],[12187,12187]]],[1526811541007,["Re@Re.local",[[-1,12185,"性质"]],[12187,12187],[12185,12185]]],[1526811567871,["Re@Re.local",[[1,12185,"的部分，如果撞墙了则"]],[12185,12185],[12195,12195]]],[1526811568895,["Re@Re.local",[[-1,12191,"撞墙了则"]],[12195,12195],[12191,12191]]],[1526811571229,["Re@Re.local",[[1,12191,"遭遇墙"]],[12191,12191],[12194,12194]]],[1526811571381,["Re@Re.local",[[-1,12193,"墙"]],[12194,12194],[12193,12193]]],[1526811579313,["Re@Re.local",[[1,12193,"了墙则必须调整方向。"]],[12193,12193],[12203,12203]]],[1526811585341,["Re@Re.local",[[1,12203,"海龟必须"]],[12203,12203],[12207,12207]]],[1526811591536,["Re@Re.local",[[-1,12205,"必须"]],[12207,12207],[12205,12205]]],[1526811593932,["Re@Re.local",[[1,12205,"需要一个"]],[12205,12205],[12209,12209]]],[1526811594372,["Re@Re.local",[[-1,12207,"一个"]],[12209,12209],[12207,12207]]],[1526811612399,["Re@Re.local",[[1,12207,"系统性的步骤以走出该迷宫。下面是具体的步骤："]],[12207,12207],[12229,12229]]],[1526811612650,["Re@Re.local",[[1,12229,"\n\n"]],[12229,12229],[12230,12230]]],[1526811612930,["Re@Re.local",[[1,12231,"\n"]],[12230,12230],[12231,12231]]],[1526811632230,["Re@Re.local",[[-1,12231,"\n"],[1,12232,"- 在初始唯一"]],[12231,12231],[12238,12238]]],[1526811632726,["Re@Re.local",[[-1,12236,"唯一"]],[12238,12238],[12236,12236]]],[1526811636778,["Re@Re.local",[[1,12236,"位置尝试想2"]],[12236,12236],[12242,12242]]],[1526811637223,["Re@Re.local",[[-1,12240,"想2"]],[12242,12242],[12240,12240]]],[1526811652768,["Re@Re.local",[[1,12240,"向北走一步，以此开始递归程序"]],[12240,12240],[12254,12254]]],[1526811718940,["Re@Re.local",[[1,12254,"。"]],[12254,12254],[12255,12255]]],[1526811719269,["Re@Re.local",[[1,12255,"\n\n"]],[12255,12255],[12256,12256]]],[1526811720232,["Re@Re.local",[[-1,12256,"\n"],[1,12257,"- "]],[12256,12256],[12258,12258]]],[1526811766579,["Re@Re.local",[[1,12259,"在处死"]],[12259,12259],[12262,12262]]],[1526811768036,["Re@Re.local",[[-1,12259,"在处死"]],[12262,12262],[12259,12259]]],[1526811779677,["Re@Re.local",[[1,12259,"第一步的向北移动失败，则向难"]],[12259,12259],[12273,12273]]],[1526811781088,["Re@Re.local",[[-1,12272,"难"]],[12273,12273],[12272,12272]]],[1526811796576,["Re@Re.local",[[1,12272,"南移动，然后开始递归。"]],[12272,12272],[12283,12283]]],[1526811796837,["Re@Re.local",[[1,12283,"\n\n"]],[12283,12283],[12284,12284]]],[1526811800592,["Re@Re.local",[[-1,12284,"\n"],[1,12285,"- 乳沟"]],[12284,12284],[12288,12288]]],[1526811801313,["Re@Re.local",[[-1,12286,"乳沟"]],[12288,12288],[12286,12286]]],[1526811807776,["Re@Re.local",[[1,12286,"若向南移动也是白，"]],[12286,12286],[12295,12295]]],[1526811808678,["Re@Re.local",[[-1,12292,"是白，"]],[12295,12295],[12292,12292]]],[1526811816689,["Re@Re.local",[[1,12292,"失败，则向西移动，然后开始递归。"]],[12292,12292],[12308,12308]]],[1526811816978,["Re@Re.local",[[1,12308,"\n\n"]],[12308,12308],[12309,12309]]],[1526811882715,[null,[[-1,12258,"在"],[1,12259,"若"]],[12258,12258],[12260,12260]]],[1526811882715,[null,[[1,12258,"在"],[-1,12258,"若"]],[12260,12260],[12258,12258]]],[1526811830981,["Re@Re.local",[[1,12287,"第一步的"]],[12287,12287],[12291,12291]]],[1526811833119,["Re@Re.local",[[-1,12313,"\n"]],[12313,12313],[0,0]]],[1526811834223,["Re@Re.local",[[1,12312,"- "]],[0,0],[12314,12314]]],[1526811836186,["Re@Re.local",[[-1,12312,"- "]],[12314,12314],[12312,12312]]],[1526811836712,["Re@Re.local",[[1,12313,"\n"]],[12312,12312],[12313,12313]]],[1526811852939,["Re@Re.local",[[-1,12313,"\n"],[1,12314,"- 若第一步的向北、向南、向西移动均失败，则 "]],[12313,12313],[12336,12336]]],[1526811853917,["Re@Re.local",[[-1,12335," "]],[12336,12336],[12335,12335]]],[1526811857093,["Re@Re.local",[[1,12335,"向东移动。"]],[12335,12335],[12340,12340]]],[1526811858581,["Re@Re.local",[[1,12340,"\n\n"]],[12340,12340],[12341,12341]]],[1526811880814,["Re@Re.local",[[-1,12341,"\n"],[1,12342,"- 若四个方向"]],[12341,12341],[12348,12348]]],[1526811943663,[null,[[-1,12258,"在"],[1,12259,"若"]],[12258,12258],[12260,12260]]],[1526811943663,[null,[[1,12258,"在"],[-1,12258,"若"]],[12260,12260],[12258,12258]]],[1526811893896,["Re@Re.local",[[1,12352,"，则北"]],[12352,12352],[12355,12355]]],[1526811894155,["Re@Re.local",[[-1,12354,"北"]],[12355,12355],[12354,12354]]],[1526811896422,["Re@Re.local",[[1,12354,"被昆玉"]],[12354,12354],[12357,12357]]],[1526811897254,["Re@Re.local",[[-1,12355,"昆玉"]],[12357,12357],[12355,12355]]],[1526811903139,["Re@Re.local",[[1,12355,"无法走出迷宫，"]],[12355,12355],[12362,12362]]],[1526811906179,["Re@Re.local",[[-1,12361,"，"]],[12362,12362],[12361,12361]]],[1526811906697,["Re@Re.local",[[1,12361,"。"]],[12361,12361],[12362,12362]]],[1526811907154,["Re@Re.local",[[1,12362,"\n\n"]],[12362,12362],[12363,12363]]],[1526811907645,["Re@Re.local",[[-1,12363,"\n"]],[12363,12363],[12362,12362]]],[1526811908709,["Re@Re.local",[[-1,12361,"。"]],[12362,12362],[12361,12361]]],[1526811911826,["Re@Re.local",[[-1,12354,"被"]],[12355,12355],[12354,12354]]],[1526811913262,["Re@Re.local",[[1,12354,"当前"]],[12354,12354],[12356,12356]]],[1526811915039,["Re@Re.local",[[-1,12354,"当前"]],[12356,12356],[12354,12354]]],[1526811916865,["Re@Re.local",[[1,12354,"此路径"]],[12354,12354],[12357,12357]]],[1526811919946,["Re@Re.local",[[1,12363,"，失败。"]],[12363,12363],[12367,12367]]],[1526811920238,["Re@Re.local",[[1,12368,"\n"]],[12367,12367],[12368,12368]]],[1526811920466,["Re@Re.local",[[1,12369,"\n"]],[12368,12368],[12369,12369]]],[1526811929380,["Re@Re.local",[[-1,12369,"\n"],[1,12370,"挺起爱很"]],[12369,12369],[12373,12373]]],[1526811929987,["Re@Re.local",[[-1,12369,"挺起爱很"]],[12373,12373],[12369,12369]]],[1526811930124,["Re@Re.local",[[-1,12368,"\n"],[1,12369,"t"]],[12369,12369],[12368,12369]]],[1526811930213,["Re@Re.local",[[1,12369,"i"]],[12368,12369],[12368,12370]]],[1526811930367,["Re@Re.local",[[1,12370,"n"]],[12368,12370],[12368,12371]]],[1526811930421,["Re@Re.local",[[1,12371,"g"]],[12368,12371],[12368,12372]]],[1526811930526,["Re@Re.local",[[1,12372," q"]],[12368,12372],[12368,12374]]],[1526811930587,["Re@Re.local",[[1,12374,"i"]],[12368,12374],[12368,12375]]],[1526811930791,["Re@Re.local",[[-1,12368,"ting qi"],[1,12375,"听起"]],[12368,12375],[12370,12370]]],[1526811930887,["Re@Re.local",[[-1,12369,"起"]],[12370,12370],[12369,12369]]],[1526811931135,["Re@Re.local",[[-1,12368,"听"],[1,12369,"\n"]],[12369,12369],[12368,12368]]],[1526811931465,["Re@Re.local",[[1,12369,"\n"]],[12368,12368],[12369,12369]]],[1526811932125,["Re@Re.local",[[-1,12369,"\n"]],[12369,12369],[0,0]]],[1526811932263,["Re@Re.local",[[-1,12368,"\n"],[1,12369,"t"]],[0,0],[12368,12369]]],[1526811932450,["Re@Re.local",[[1,12369," q"]],[12368,12369],[12368,12371]]],[1526811932581,["Re@Re.local",[[1,12371," l"]],[12368,12371],[12368,12373]]],[1526811933456,["Re@Re.local",[[-1,12371," l"]],[12368,12373],[12368,12371]]],[1526811933633,["Re@Re.local",[[-1,12369," q"]],[12368,12371],[12368,12369]]],[1526811933847,["Re@Re.local",[[-1,12368,"t"]],[12368,12369],[0,0]]],[1526811934164,["Re@Re.local",[[1,12368,"\n\n"]],[12368,12368],[12369,12369]]],[1526811934820,["Re@Re.local",[[1,12370,"\n"]],[12369,12369],[12370,12370]]],[1526811935150,["Re@Re.local",[[-1,12370,"\n"]],[12370,12370],[12369,12369]]],[1526811940381,["Re@Re.local",[[-1,12369,"\n"],[1,12370,"听起来很容易，然而有"]],[12369,12369],[12379,12379]]],[1526812003674,[null,[[-1,12258,"在"],[1,12259,"若"],[1,12348,"均不可行"],[-1,12350,"北被昆玉"],[1,12357,"无"],[-1,12362,"，"]],[12258,12258],[12362,12362]]],[1526812003674,[null,[[1,12258,"在"],[-1,12258,"若"],[-1,12348,"均不可行"],[1,12354,"北被昆玉"],[-1,12357,"无"],[1,12363,"，"]],[12362,12362],[12258,12258]]],[1526811947313,["Re@Re.local",[[1,12379,"很"]],[12379,12379],[12380,12380]]],[1526811947435,["Re@Re.local",[[-1,12379,"很"]],[12380,12380],[12379,12379]]],[1526811963394,["Re@Re.local",[[1,12379,"些细节需要说明一下。假设受限"]],[12379,12379],[12393,12393]]],[1526811965072,["Re@Re.local",[[-1,12391,"受限"]],[12393,12393],[12391,12391]]],[1526811966809,["Re@Re.local",[[1,12391,"第一个"]],[12391,12391],[12394,12394]]],[1526811967325,["Re@Re.local",[[-1,12391,"第一个"]],[12394,12394],[12391,12391]]],[1526811992338,["Re@Re.local",[[1,12391,"递归的第一步是向北移动的，按照制定的程序来说，下一步也将向北移动。"]],[12391,12391],[12424,12424]]],[1526812063729,[null,[[-1,12258,"在"],[1,12259,"若"],[1,12348,"均不可行"],[-1,12350,"北被昆玉"],[1,12357,"无"],[-1,12362,"，"]],[12258,12258],[12362,12362]]],[1526812063729,[null,[[1,12258,"在"],[-1,12258,"若"],[-1,12348,"均不可行"],[1,12354,"北被昆玉"],[-1,12357,"无"],[1,12363,"，"]],[12362,12362],[12258,12258]]],[1526812004981,["Re@Re.local",[[1,12424,"如果"]],[12424,12424],[12426,12426]]],[1526812006113,["Re@Re.local",[[-1,12423,"。如果"]],[12426,12426],[12423,12423]]],[1526812009915,["Re@Re.local",[[1,12423,"，此时如果该"]],[12423,12423],[12429,12429]]],[1526812010983,["Re@Re.local",[[-1,12428,"该"]],[12429,12429],[12428,12428]]],[1526812015612,["Re@Re.local",[[1,12428,"被墙挡住，"]],[12428,12428],[12433,12433]]],[1526812024426,["Re@Re.local",[[1,12428,"不幸的"]],[12428,12428],[12431,12431]]],[1526812024776,["Re@Re.local",[[-1,12430,"的"]],[12431,12431],[12430,12430]]],[1526812025724,["Re@Re.local",[[1,12430,"地"]],[12430,12430],[12431,12431]]],[1526812029830,["Re@Re.local",[[1,12436,"便会"]],[12436,12436],[12438,12438]]],[1526812031970,["Re@Re.local",[[-1,12437,"会"]],[12438,12438],[12437,12437]]],[1526812044705,["Re@Re.local",[[1,12437,"会向南移动，然后"]],[12437,12437],[12445,12445]]],[1526812045221,["Re@Re.local",[[-1,12443,"然后"]],[12445,12445],[12443,12443]]],[1526812049629,["Re@Re.local",[[1,12443,"于是便会到了其实"]],[12443,12443],[12451,12451]]],[1526812050519,["Re@Re.local",[[-1,12449,"其实"]],[12451,12451],[12449,12449]]],[1526812063318,["Re@Re.local",[[1,12449,"起始状态。如果"]],[12449,12449],[12456,12456]]],[1526812123706,[null,[[-1,12258,"在"],[1,12259,"若"],[1,12348,"均不可行"],[-1,12350,"北被昆玉"],[1,12357,"无"],[-1,12362,"，"]],[12258,12258],[12362,12362]]],[1526812123706,[null,[[1,12258,"在"],[-1,12258,"若"],[-1,12348,"均不可行"],[1,12354,"北被昆玉"],[-1,12357,"无"],[1,12363,"，"]],[12362,12362],[12258,12258]]],[1526812080543,["Re@Re.local",[[1,12456,"按照这种递归程序来做，此时只会向"]],[12456,12456],[12472,12472]]],[1526812080809,["Re@Re.local",[[-1,12471,"向"]],[12472,12472],[12471,12471]]],[1526812090426,["Re@Re.local",[[1,12454,"在这种地方"]],[12454,12454],[12459,12459]]],[1526812091690,["Re@Re.local",[[-1,12454,"在这种地方"]],[12459,12459],[12454,12454]]],[1526812092537,["Re@Re.local",[[1,12454,"此时"]],[12454,12454],[12456,12456]]],[1526812095341,["Re@Re.local",[[-1,12469,"此时只会"]],[12473,12473],[12469,12469]]],[1526812110641,["Re@Re.local",[[1,12469,"只会向后退一步，然后陷入无限迭代中。"]],[12469,12469],[12487,12487]]],[1526812243730,[null,[[-1,12258,"在"],[1,12259,"若"],[1,12348,"均不可行"],[-1,12350,"北被昆玉"],[1,12357,"无"],[-1,12362,"，"]],[12258,12258],[12362,12362]]],[1526812243730,[null,[[1,12258,"在"],[-1,12258,"若"],[-1,12348,"均不可行"],[1,12354,"北被昆玉"],[-1,12357,"无"],[1,12363,"，"]],[12362,12362],[12258,12258]]],[1526812217425,["Re@Re.local",[[1,12487,"y"]],[12486,12487],[12487,12488]]],[1526812217575,["Re@Re.local",[[1,12488,"i"]],[12487,12488],[12487,12489]]],[1526812217717,["Re@Re.local",[[1,12489,"n"]],[12487,12489],[12487,12490]]],[1526812217843,["Re@Re.local",[[1,12490," c"]],[12487,12490],[12487,12492]]],[1526812217984,["Re@Re.local",[[1,12492,"i"]],[12487,12492],[12487,12493]]],[1526812221021,["Re@Re.local",[[-1,12487,"yin ci"],[1,12493,"因此，必须要"]],[12487,12493],[12493,12493]]],[1526812229645,["Re@Re.local",[[-1,12490,"必须要"]],[12493,12493],[12490,12490]]],[1526812233368,["Re@Re.local",[[1,12490,"需要一种方来"]],[12490,12490],[12496,12496]]],[1526812233772,["Re@Re.local",[[-1,12494,"方来"]],[12496,12496],[12494,12494]]],[1526812234603,["Re@Re.local",[[1,12494,"房"]],[12494,12494],[12495,12495]]],[1526812234754,["Re@Re.local",[[-1,12494,"房"]],[12495,12495],[12494,12494]]],[1526812239573,["Re@Re.local",[[1,12494,"方法来记住"]],[12494,12494],[12499,12499]]],[1526812303719,[null,[[-1,12258,"在"],[1,12259,"若"],[1,12348,"均不可行"],[-1,12350,"北被昆玉"],[1,12357,"无"],[-1,12362,"，"]],[12258,12258],[12362,12362]]],[1526812303719,[null,[[1,12258,"在"],[-1,12258,"若"],[-1,12348,"均不可行"],[1,12354,"北被昆玉"],[-1,12357,"无"],[1,12363,"，"]],[12362,12362],[12258,12258]]],[1526812246203,["Re@Re.local",[[1,12499,"走过的地方。"]],[12499,12499],[12505,12505]]],[1526812250395,["Re@Re.local",[[-1,12497,"记住"]],[12499,12499],[12497,12497]]],[1526812251219,["Re@Re.local",[[1,12497,"记录"]],[12497,12497],[12499,12499]]],[1526812281678,["Re@Re.local",[[1,12505,"在本例中，可以假设手里有一些"]],[12505,12505],[12519,12519]]],[1526812282119,["Re@Re.local",[[-1,12517,"一些"]],[12519,12519],[12517,12517]]],[1526812298699,["Re@Re.local",[[1,12517,"一袋面包屑可以沿着走过的路径洒下。"]],[12517,12517],[12534,12534]]],[1526812300542,["Re@Re.local",[[-1,12531,"洒下。"]],[12534,12534],[12531,12531]]],[1526812302606,["Re@Re.local",[[1,12531,"撒下，"]],[12531,12531],[12534,12534]]],[1526812303205,["Re@Re.local",[[-1,12533,"，"]],[12534,12534],[12533,12533]]],[1526812303478,["Re@Re.local",[[1,12533,"。"]],[12533,12533],[12534,12534]]],[1526812363727,[null,[[-1,12258,"在"],[1,12259,"若"],[1,12348,"均不可行"],[-1,12350,"北被昆玉"],[1,12357,"无"],[-1,12362,"，"]],[12258,12258],[12362,12362]]],[1526812363727,[null,[[1,12258,"在"],[-1,12258,"若"],[-1,12348,"均不可行"],[1,12354,"北被昆玉"],[-1,12357,"无"],[1,12363,"，"]],[12362,12362],[12258,12258]]],[1526812353417,["Re@Re.local",[[1,12534,"如果准备向某个方向前进一步时发现该方块已经有面包屑了，那么边"]],[12534,12534],[12564,12564]]],[1526812353966,["Re@Re.local",[[-1,12561,"那么边"]],[12564,12564],[12561,12561]]],[1526812354910,["Re@Re.local",[[1,12561,"此时"]],[12561,12561],[12563,12563]]],[1526812423725,[null,[[-1,12258,"在"],[1,12259,"若"],[1,12348,"均不可行"],[-1,12350,"北被昆玉"],[1,12357,"无"],[-1,12362,"，"]],[12258,12258],[12362,12362]]],[1526812423725,[null,[[1,12258,"在"],[-1,12258,"若"],[-1,12348,"均不可行"],[1,12354,"北被昆玉"],[-1,12357,"无"],[1,12363,"，"]],[12362,12362],[12258,12258]]],[1526812372501,["Re@Re.local",[[1,12563,"立刻退回来并且尝试另外一个方向。"]],[12563,12563],[12579,12579]]],[1526812545263,[null,[[-1,12258,"在"],[1,12259,"若"],[1,12348,"均不可行"],[-1,12350,"北被昆玉"],[1,12357,"无"],[-1,12362,"，"]],[12258,12258],[12362,12362]]],[1526812545263,[null,[[1,12258,"在"],[-1,12258,"若"],[-1,12348,"均不可行"],[1,12354,"北被昆玉"],[-1,12357,"无"],[1,12363,"，"]],[12362,12362],[12258,12258]]],[1526812509029,["Re@Re.local",[[1,12579,"在代码中可以看出，往回走一步即是"]],[12579,12579],[12595,12595]]],[1526812513851,["Re@Re.local",[[-1,12593,"即是"]],[12595,12595],[12593,12593]]],[1526812529839,["Re@Re.local",[[1,12593,"同递归函数调用结果返回一样。"]],[12593,12593],[12607,12607]]],[1526812530288,["Re@Re.local",[[1,12607,"\n\n"]],[12607,12607],[12608,12608]]],[1526812530570,["Re@Re.local",[[1,12609,"\n"]],[12608,12608],[12609,12609]]],[1526820238685,[null,[[-1,12258,"在"],[1,12259,"若"],[1,12348,"均不可行"],[-1,12350,"北被昆玉"],[1,12357,"无"],[-1,12362,"，"]],[12258,12258],[12362,12362]]],[1526820238685,[null,[[1,12258,"在"],[-1,12258,"若"],[-1,12348,"均不可行"],[1,12354,"北被昆玉"],[-1,12357,"无"],[1,12363,"，"]],[12362,12362],[12258,12258]]],[1526820219077,["Re@Re.local",[[1,12580,"gai"]],[12580,12582],[12583,12583]]],[1526820219763,["Re@Re.local",[[-1,12580,"gai"]],[12583,12583],[12580,12580]]],[1526820221569,["Re@Re.local",[[1,12580,"该算法的"]],[12580,12580],[12584,12584]]],[1526820223302,["Re@Re.local",[[1,12614,"\n"]],[12611,12611],[12612,12612]]],[1526820223526,["Re@Re.local",[[1,12615,"\n"]],[12612,12612],[12613,12613]]],[1526820419660,[null,[[-1,12258,"在"],[1,12259,"若"],[1,12348,"均不可行"],[-1,12350,"北被昆玉"],[1,12357,"无"],[-1,12362,"，"]],[12258,12258],[12362,12362]]],[1526820419661,[null,[[1,12258,"在"],[-1,12258,"若"],[-1,12348,"均不可行"],[1,12354,"北被昆玉"],[-1,12357,"无"],[1,12363,"，"]],[12362,12362],[12258,12258]]],[1526820366324,["Re@Re.local",[[1,12616,"\n"]],[12611,12611],[12612,12612]]],[1526820366584,["Re@Re.local",[[1,12617,"\n"]],[12612,12612],[12613,12613]]],[1526820368796,["Re@Re.local",[[1,12613,"同样地，"]],[12613,12613],[12617,12617]]],[1526820370324,["Re@Re.local",[[-1,12613,"同样地，"]],[12617,12617],[12613,12613]]],[1526820382255,["Re@Re.local",[[1,12613,"跟其它递归算法一样，先"]],[12613,12613],[12624,12624]]],[1526820384427,["Re@Re.local",[[-1,12622,"，先"]],[12624,12624],[12622,12622]]],[1526820389326,["Re@Re.local",[[1,12622,"，这里也需要研究一下"]],[12622,12622],[12632,12632]]],[1526820389639,["Re@Re.local",[[-1,12630,"一下"]],[12632,12632],[12630,12630]]],[1526820403424,["Re@Re.local",[[1,12630,"约束条件。读者"]],[12630,12630],[12637,12637]]],[1526820403736,["Re@Re.local",[[-1,12635,"读者"]],[12637,12637],[12635,12635]]],[1526820406900,["Re@Re.local",[[1,12635,"一部分读者可能已经"]],[12635,12635],[12644,12644]]],[1526820409122,["Re@Re.local",[[-1,12642,"已经"]],[12644,12644],[12642,12642]]],[1526820411721,["Re@Re.local",[[1,12642,"根据钱"]],[12642,12642],[12645,12645]]],[1526820411843,["Re@Re.local",[[-1,12644,"钱"]],[12645,12645],[12644,12644]]],[1526820417760,["Re@Re.local",[[1,12644,"前文已经推测出"]],[12644,12644],[12651,12651]]],[1526820479647,[null,[[-1,12258,"在"],[1,12259,"若"],[1,12348,"均不可行"],[-1,12350,"北被昆玉"],[1,12357,"无"],[-1,12362,"，"]],[12258,12258],[12362,12362]]],[1526820479647,[null,[[1,12258,"在"],[-1,12258,"若"],[-1,12348,"均不可行"],[1,12354,"北被昆玉"],[-1,12357,"无"],[1,12363,"，"]],[12362,12362],[12258,12258]]],[1526820433206,["Re@Re.local",[[1,12651,"，在本算法中，有4中月"]],[12651,12651],[12662,12662]]],[1526820433475,["Re@Re.local",[[-1,12660,"中月"]],[12662,12662],[12660,12660]]],[1526820438657,["Re@Re.local",[[1,12660,"个约束条件需要考虑："]],[12660,12660],[12670,12670]]],[1526820438926,["Re@Re.local",[[1,12675,"\n"]],[12670,12670],[12671,12671]]],[1526820439266,["Re@Re.local",[[1,12671,"·"]],[12671,12671],[12672,12672]]],[1526820439592,["Re@Re.local",[[-1,12671,"·"]],[12672,12672],[12671,12671]]],[1526820439972,["Re@Re.local",[[-1,12675,"\n"]],[12671,12671],[12670,12670]]],[1526820440210,["Re@Re.local",[[1,12675,"\n"]],[12670,12670],[12671,12671]]],[1526820440351,["Re@Re.local",[[1,12671,"·"]],[12671,12671],[12672,12672]]],[1526820440990,["Re@Re.local",[[-1,12671,"·"]],[12672,12672],[12671,12671]]],[1526820441763,["Re@Re.local",[[1,12676,"\n"]],[12671,12671],[12672,12672]]],[1526820441907,["Re@Re.local",[[1,12672,"1"]],[12672,12672],[12673,12673]]],[1526820442457,["Re@Re.local",[[-1,12672,"1"]],[12673,12673],[12672,12672]]],[1526820442618,["Re@Re.local",[[-1,12676,"\n"]],[12672,12672],[12671,12671]]],[1526820443261,["Re@Re.local",[[1,12671,"1."]],[12671,12671],[12673,12673]]],[1526820443463,["Re@Re.local",[[1,12678,"\n"]],[12673,12673],[12674,12674]]],[1526820443956,["Re@Re.local",[[-1,12678,"\n"]],[12674,12674],[12673,12673]]],[1526820448330,["Re@Re.local",[[1,12673," 海龟装"]],[12673,12673],[12677,12677]]],[1526820448427,["Re@Re.local",[[-1,12676,"装"]],[12677,12677],[12676,12676]]],[1526820457603,["Re@Re.local",[[1,12676,"碰到墙壁。因"]],[12676,12676],[12682,12682]]],[1526820457670,["Re@Re.local",[[-1,12681,"因"]],[12682,12682],[12681,12681]]],[1526820471027,["Re@Re.local",[[1,12681,"由于方格被墙壁填充无法"]],[12681,12681],[12692,12692]]],[1526820471294,["Re@Re.local",[[-1,12690,"无法"]],[12692,12692],[12690,12690]]],[1526820473284,["Re@Re.local",[[1,12690,"而无法通行。"]],[12690,12690],[12696,12696]]],[1526820473608,["Re@Re.local",[[1,12701,"\n"]],[12696,12696],[12697,12697]]],[1526820474596,["Re@Re.local",[[1,12697,"2. "]],[12697,12697],[12700,12700]]],[1526820540155,[null,[[-1,12258,"在"],[1,12259,"若"],[1,12348,"均不可行"],[-1,12350,"北被昆玉"],[1,12357,"无"],[-1,12362,"，"]],[12258,12258],[12362,12362]]],[1526820540155,[null,[[1,12258,"在"],[-1,12258,"若"],[-1,12348,"均不可行"],[1,12354,"北被昆玉"],[-1,12357,"无"],[1,12363,"，"]],[12362,12362],[12258,12258]]],[1526820499640,["Re@Re.local",[[1,12700,"海龟走到了"]],[12700,12700],[12705,12705]]],[1526820504961,["Re@Re.local",[[-1,12702,"走到了"]],[12705,12705],[12702,12702]]],[1526820516534,["Re@Re.local",[[1,12702,"到达已访问过的方格。在"]],[12702,12702],[12713,12713]]],[1526820517373,["Re@Re.local",[[-1,12712,"在"]],[12713,12713],[12712,12712]]],[1526820530164,["Re@Re.local",[[1,12712,"为避免陷入无限迭代必须绕过"]],[12712,12712],[12725,12725]]],[1526820532450,["Re@Re.local",[[-1,12721,"必须绕过"]],[12725,12725],[12721,12721]]],[1526820535432,["Re@Re.local",[[1,12721,"，不能从"]],[12721,12721],[12725,12725]]],[1526820600125,[null,[[-1,12258,"在"],[1,12259,"若"],[1,12348,"均不可行"],[-1,12350,"北被昆玉"],[1,12357,"无"],[-1,12362,"，"]],[12258,12258],[12362,12362]]],[1526820600125,[null,[[1,12258,"在"],[-1,12258,"若"],[-1,12348,"均不可行"],[1,12354,"北被昆玉"],[-1,12357,"无"],[1,12363,"，"]],[12362,12362],[12258,12258]]],[1526820544067,["Re@Re.local",[[-1,12724,"从"]],[12725,12725],[12724,12724]]],[1526820546245,["Re@Re.local",[[1,12724,"在次为"]],[12724,12724],[12727,12727]]],[1526820546488,["Re@Re.local",[[-1,12725,"次为"]],[12727,12727],[12725,12725]]],[1526820553530,["Re@Re.local",[[1,12725,"此位置继续前进。"]],[12725,12725],[12733,12733]]],[1526820554100,["Re@Re.local",[[1,12738,"\n"]],[12733,12733],[12734,12734]]],[1526866967200,[null,[[-1,12258,"在"],[1,12259,"若"],[1,12348,"均不可行"],[-1,12350,"北被昆玉"],[1,12357,"无"],[-1,12362,"，"]],[12258,12258],[12362,12362]]],[1526866967200,[null,[[1,12258,"在"],[-1,12258,"若"],[-1,12348,"均不可行"],[1,12354,"北被昆玉"],[-1,12357,"无"],[1,12363,"，"]],[12362,12362],[12258,12258]]],[1526866955889,["Re@Re.local",[[1,12734,"3. 到达边缘之外"]],[12734,12734],[12743,12743]]],[1526866957134,["Re@Re.local",[[-1,12739,"边缘之外"]],[12743,12743],[12739,12739]]],[1526866961199,["Re@Re.local",[[1,12739,"边界之外，"]],[12739,12739],[12744,12744]]],[1526867027260,[null,[[-1,12258,"在"],[1,12259,"若"],[1,12348,"均不可行"],[-1,12350,"北被昆玉"],[1,12357,"无"],[-1,12362,"，"]],[12258,12258],[12362,12362]]],[1526867027260,[null,[[1,12258,"在"],[-1,12258,"若"],[-1,12348,"均不可行"],[1,12354,"北被昆玉"],[-1,12357,"无"],[1,12363,"，"]],[12362,12362],[12258,12258]]],[1526866975322,["Re@Re.local",[[1,12739,"没有墙的"]],[12739,12739],[12743,12743]]],[1526866977238,["Re@Re.local",[[-1,12747,"，"]],[12748,12748],[12747,12747]]],[1526866984001,["Re@Re.local",[[1,12747,"，换言之已经走出迷宫。‘"]],[12747,12747],[12759,12759]]],[1526866984814,["Re@Re.local",[[-1,12758,"‘"]],[12759,12759],[12758,12758]]],[1526866985106,["Re@Re.local",[[1,12763,"\n"]],[12758,12758],[12759,12759]]],[1526867001025,["Re@Re.local",[[1,12759,"4. 海龟在四个方向上都不"]],[12759,12759],[12772,12772]]],[1526867001173,["Re@Re.local",[[-1,12771,"不"]],[12772,12772],[12771,12771]]],[1526867004142,["Re@Re.local",[[1,12771,"无法前进。"]],[12771,12771],[12776,12776]]],[1526867004774,["Re@Re.local",[[1,12781,"\n"]],[12776,12776],[12777,12777]]],[1526867005062,["Re@Re.local",[[1,12782,"\n"]],[12777,12777],[12778,12778]]],[1526867021376,["Re@Re.local",[[1,12778,"为了使得程序运行起来，受限要"]],[12778,12778],[12792,12792]]],[1526867022896,["Re@Re.local",[[-1,12789,"受限要"]],[12792,12792],[12789,12789]]],[1526867087172,[null,[[-1,12258,"在"],[1,12259,"若"],[1,12348,"均不可行"],[-1,12350,"北被昆玉"],[1,12357,"无"],[-1,12362,"，"]],[12258,12258],[12362,12362]]],[1526867087172,[null,[[1,12258,"在"],[-1,12258,"若"],[-1,12348,"均不可行"],[1,12354,"北被昆玉"],[-1,12357,"无"],[1,12363,"，"]],[12362,12362],[12258,12258]]],[1526867030738,["Re@Re.local",[[1,12789,"需要一种方法来表示"]],[12789,12789],[12798,12798]]],[1526867031597,["Re@Re.local",[[-1,12796,"表示"]],[12798,12798],[12796,12796]]],[1526867056516,["Re@Re.local",[[1,12796,"模拟迷宫。为了使之看起来更有趣，这"]],[12796,12796],[12813,12813]]],[1526867063538,["Re@Re.local",[[1,12782,"、"]],[12782,12782],[12783,12783]]],[1526867064588,["Re@Re.local",[[-1,12778,"为了使得、"]],[12783,12783],[12778,12778]]],[1526867065913,["Re@Re.local",[[1,12778,"要让"]],[12778,12778],[12780,12780]]],[1526867073652,["Re@Re.local",[[1,12811,"里使用了"]],[12811,12811],[12815,12815]]],[1526867075119,["Re@Re.local",[[1,12814," "],[1,12815,"hai gui没"]],[12814,12814],[12816,12816]]],[1526867075611,["Re@Re.local",[[-1,12813,"用 没"]],[12816,12816],[12813,12813]]],[1526867079882,["Re@Re.local",[[-1,12812,"使了hai gui"]],[12821,12821],[12812,12812]]],[1526867082676,["Re@Re.local",[[1,12812,"使用乐呵"]],[12812,12812],[12816,12816]]],[1526867083488,["Re@Re.local",[[-1,12814,"乐呵"]],[12816,12816],[12814,12814]]],[1526867086126,["Re@Re.local",[[1,12814,"了海龟模块来"]],[12814,12814],[12820,12820]]],[1526867147174,[null,[[-1,12258,"在"],[1,12259,"若"],[1,12348,"均不可行"],[-1,12350,"北被昆玉"],[1,12357,"无"],[-1,12362,"，"]],[12258,12258],[12362,12362]]],[1526867147175,[null,[[1,12258,"在"],[-1,12258,"若"],[-1,12348,"均不可行"],[1,12354,"北被昆玉"],[-1,12357,"无"],[1,12363,"，"]],[12362,12362],[12258,12258]]],[1526867111442,["Re@Re.local",[[1,12820,"绘制和探索迷宫，这样便可以观察该算法的动态效果了。迷宫对象应该要提供一下方法来"]],[12820,12820],[12859,12859]]],[1526867120058,["Re@Re.local",[[-1,12854,"一下方法来"]],[12859,12859],[12854,12854]]],[1526867136408,["Re@Re.local",[[1,12854,"以下方法以便编写搜索算法。"]],[12854,12854],[12867,12867]]],[1526867136691,["Re@Re.local",[[1,12872,"\n"]],[12867,12867],[12868,12868]]],[1526867136910,["Re@Re.local",[[1,12873,"\n"]],[12868,12868],[12869,12869]]],[1526867142920,["Re@Re.local",[[1,12869,"- __init__"]],[12869,12869],[12879,12879]]],[1526867146018,["Re@Re.local",[[-1,12871,"__init__"]],[12879,12879],[12871,12871]]],[1526867146790,["Re@Re.local",[[1,12871,"\\"]],[12871,12871],[12872,12872]]],[1526867207169,[null,[[-1,12258,"在"],[1,12259,"若"],[1,12348,"均不可行"],[-1,12350,"北被昆玉"],[1,12357,"无"],[-1,12362,"，"]],[12258,12258],[12362,12362]]],[1526867207169,[null,[[1,12258,"在"],[-1,12258,"若"],[-1,12348,"均不可行"],[1,12354,"北被昆玉"],[-1,12357,"无"],[1,12363,"，"]],[12362,12362],[12258,12258]]],[1526867165522,["Re@Re.local",[[1,12872,"_\\_init\\_\\_ 读取"]],[12872,12872],[12886,12886]]],[1526870496217,[null,[[-1,12258,"在"],[1,12259,"若"],[1,12348,"均不可行"],[-1,12350,"北被昆玉"],[1,12357,"无"],[-1,12362,"，"]],[12258,12258],[12362,12362]]],[1526870496217,[null,[[1,12258,"在"],[-1,12258,"若"],[-1,12348,"均不可行"],[1,12354,"北被昆玉"],[-1,12357,"无"],[1,12363,"，"]],[12362,12362],[12258,12258]]],[1526870471878,["Re@Re.local",[[1,12886,"biao"]],[12886,12886],[12890,12890]]],[1526870473511,["Re@Re.local",[[-1,12884,"读取biao"]],[12890,12890],[12884,12884]]],[1526870490504,["Re@Re.local",[[1,12884,"读取表示迷宫的数据，初始化迷宫的内部表示，并"]],[12884,12884],[12906,12906]]],[1526870490811,["Re@Re.local",[[-1,12904,"，并"]],[12906,12906],[12904,12904]]],[1526870493177,["Re@Re.local",[[1,12904,"，并且"]],[12904,12904],[12907,12907]]],[1526870556229,[null,[[-1,12258,"在"],[1,12259,"若"],[1,12348,"均不可行"],[-1,12350,"北被昆玉"],[1,12357,"无"],[-1,12362,"，"]],[12258,12258],[12362,12362]]],[1526870556229,[null,[[1,12258,"在"],[-1,12258,"若"],[-1,12348,"均不可行"],[1,12354,"北被昆玉"],[-1,12357,"无"],[1,12363,"，"]],[12362,12362],[12258,12258]]],[1526870505591,["Re@Re.local",[[1,12907,"找到海龟的起始位置。"]],[12907,12907],[12917,12917]]],[1526870505949,["Re@Re.local",[[1,12922,"\n"]],[12917,12917],[12918,12918]]],[1526870514619,["Re@Re.local",[[1,12918,"- drawMaze 绘制"]],[12918,12918],[12931,12931]]],[1526870514926,["Re@Re.local",[[-1,12929,"绘制"]],[12931,12931],[12929,12929]]],[1526870523200,["Re@Re.local",[[1,12929,"在一个窗口中绘制迷宫。"]],[12929,12929],[12940,12940]]],[1526870523483,["Re@Re.local",[[1,12945,"\n"]],[12940,12940],[12941,12941]]],[1526870543061,["Re@Re.local",[[1,12941,"- updatePosition 更新迷宫"]],[12941,12941],[12962,12962]]],[1526870736367,[null,[[-1,12258,"在"],[1,12259,"若"],[1,12348,"均不可行"],[-1,12350,"北被昆玉"],[1,12357,"无"],[-1,12362,"，"]],[12258,12258],[12362,12362]]],[1526870736367,[null,[[1,12258,"在"],[-1,12258,"若"],[-1,12348,"均不可行"],[1,12354,"北被昆玉"],[-1,12357,"无"],[1,12363,"，"]],[12362,12362],[12258,12258]]],[1526870696889,["Re@Re.local",[[1,12962,"内部状态并更改海龟位置。"]],[12962,12962],[12974,12974]]],[1526870697147,["Re@Re.local",[[1,12979,"\n"]],[12974,12974],[12975,12975]]],[1526870697399,["Re@Re.local",[[1,12980,"\n"]],[12975,12975],[12976,12976]]],[1526870697873,["Re@Re.local",[[-1,12980,"\n"]],[12976,12976],[12975,12975]]],[1526870705077,["Re@Re.local",[[1,12975,"- isExit 检测"]],[12975,12975],[12986,12986]]],[1526870705477,["Re@Re.local",[[-1,12984,"检测"]],[12986,12986],[12984,12984]]],[1526870713692,["Re@Re.local",[[1,12984,"判断当前位置是否为迷宫的一个粗口"]],[12984,12984],[13000,13000]]],[1526870713987,["Re@Re.local",[[-1,12998,"粗口"]],[13000,13000],[12998,12998]]],[1526870715147,["Re@Re.local",[[1,12998,"出口。"]],[12998,12998],[13001,13001]]],[1526870715485,["Re@Re.local",[[1,13006,"\n"]],[13001,13001],[13002,13002]]],[1526870715693,["Re@Re.local",[[1,13007,"\n"]],[13002,13002],[13003,13003]]],[1526870796228,[null,[[-1,12258,"在"],[1,12259,"若"],[1,12348,"均不可行"],[-1,12350,"北被昆玉"],[1,12357,"无"],[-1,12362,"，"]],[12258,12258],[12362,12362]]],[1526870796228,[null,[[1,12258,"在"],[-1,12258,"若"],[-1,12348,"均不可行"],[1,12354,"北被昆玉"],[-1,12357,"无"],[1,12363,"，"]],[12362,12362],[12258,12258]]],[1526870751158,["Re@Re.local",[[1,13003,"Mazelei"]],[13003,13003],[13010,13010]]],[1526870751857,["Re@Re.local",[[-1,13007,"lei"]],[13010,13010],[13007,13007]]],[1526870759190,["Re@Re.local",[[1,13007,"类也重载了操作"]],[13007,13007],[13014,13014]]],[1526870759599,["Re@Re.local",[[-1,13012,"操作"]],[13014,13014],[13012,13012]]],[1526870768663,["Re@Re.local",[[1,13012,"操作符[]，这样算法便"]],[13012,13012],[13023,13023]]],[1526870768876,["Re@Re.local",[[-1,13022,"便"]],[13023,13023],[13022,13022]]],[1526870787528,["Re@Re.local",[[1,13022,"程序便可以很容易地获取任意方格的状态。"]],[13022,13022],[13041,13041]]],[1526870788243,["Re@Re.local",[[1,13046,"\n"]],[13041,13041],[13042,13042]]],[1526870788453,["Re@Re.local",[[1,13047,"\n"]],[13042,13042],[13043,13043]]],[1526870916284,[null,[[-1,12258,"在"],[1,12259,"若"],[1,12348,"均不可行"],[-1,12350,"北被昆玉"],[1,12357,"无"],[-1,12362,"，"]],[12258,12258],[12362,12362]]],[1526870916284,[null,[[1,12258,"在"],[-1,12258,"若"],[-1,12348,"均不可行"],[1,12354,"北被昆玉"],[-1,12357,"无"],[1,12363,"，"]],[12362,12362],[12258,12258]]],[1526870879220,["Re@Re.local",[[1,13043,"下面检测以下名为searchFrom的"]],[13043,13043],[13062,13062]]],[1526870881973,["Re@Re.local",[[-1,13049,"名为searchFrom的"]],[13062,13062],[13049,13049]]],[1526870884326,["Re@Re.local",[[1,13049,"searchf"]],[13049,13049],[13056,13056]]],[1526870884898,["Re@Re.local",[[-1,13055,"f"]],[13056,13056],[13055,13055]]],[1526870886428,["Re@Re.local",[[1,13055,"From的"]],[13055,13055],[13060,13060]]],[1526870889242,["Re@Re.local",[[-1,13047,"以下"]],[13049,13049],[13047,13047]]],[1526870890865,["Re@Re.local",[[1,13047,"叫做"]],[13047,13047],[13049,13049]]],[1526870897004,["Re@Re.local",[[1,13060,"搜索函数的代码"]],[13060,13060],[13067,13067]]],[1526870898902,["Re@Re.local",[[-1,13045,"检测"]],[13047,13047],[13045,13045]]],[1526870910869,["Re@Re.local",[[1,13045,"看一下"]],[13045,13045],[13048,13048]]],[1526870913374,["Re@Re.local",[[1,13068,"，带入"]],[13068,13068],[13071,13071]]],[1526870913816,["Re@Re.local",[[-1,13069,"带入"]],[13071,13071],[13069,13069]]],[1526870914873,["Re@Re.local",[[1,13069,"代码如"]],[13069,13069],[13072,13072]]],[1526870976249,[null,[[-1,12258,"在"],[1,12259,"若"],[1,12348,"均不可行"],[-1,12350,"北被昆玉"],[1,12357,"无"],[-1,12362,"，"]],[12258,12258],[12362,12362]]],[1526870976249,[null,[[1,12258,"在"],[-1,12258,"若"],[-1,12348,"均不可行"],[1,12354,"北被昆玉"],[-1,12357,"无"],[1,12363,"，"]],[12362,12362],[12258,12258]]],[1526870916560,["Re@Re.local",[[1,13072,"代码"]],[13072,13072],[13074,13074]]],[1526870917812,["Re@Re.local",[[-1,13069,"代码如代码"]],[13074,13074],[13069,13069]]],[1526870935460,["Re@Re.local",[[1,13069,"如代码3所示。注意到该函数接收3个参数：一个maze兑现"]],[13069,13069],[13097,13097]]],[1526870936602,["Re@Re.local",[[-1,13095,"兑现"]],[13097,13097],[13095,13095]]],[1526870945319,["Re@Re.local",[[1,13095,"对象，起始行，起始列。"]],[13095,13095],[13106,13106]]],[1526871036248,[null,[[-1,12258,"在"],[1,12259,"若"],[1,12348,"均不可行"],[-1,12350,"北被昆玉"],[1,12357,"无"],[-1,12362,"，"]],[12258,12258],[12362,12362]]],[1526871036248,[null,[[1,12258,"在"],[-1,12258,"若"],[-1,12348,"均不可行"],[1,12354,"北被昆玉"],[-1,12357,"无"],[1,12363,"，"]],[12362,12362],[12258,12258]]],[1526871020537,["Re@Re.local",[[1,13106,"从逻辑上来说，每次调用掉"]],[13106,13106],[13118,13118]]],[1526871021169,["Re@Re.local",[[-1,13115,"调用掉"]],[13118,13118],[13115,13115]]],[1526871033088,["Re@Re.local",[[1,13115,"调用递归函数都将"]],[13115,13115],[13123,13123]]],[1526871096252,[null,[[-1,12258,"在"],[1,12259,"若"],[1,12348,"均不可行"],[-1,12350,"北被昆玉"],[1,12357,"无"],[-1,12362,"，"]],[12258,12258],[12362,12362]]],[1526871096252,[null,[[1,12258,"在"],[-1,12258,"若"],[-1,12348,"均不可行"],[1,12354,"北被昆玉"],[-1,12357,"无"],[1,12363,"，"]],[12362,12362],[12258,12258]]],[1526871039100,["Re@Re.local",[[1,13123,"执行一次上"]],[13123,13123],[13128,13128]]],[1526871039822,["Re@Re.local",[[-1,13125,"一次上"]],[13128,13128],[13125,13125]]],[1526871040925,["Re@Re.local",[[1,13125,"搜索"]],[13125,13125],[13127,13127]]],[1526871049780,["Re@Re.local",[[1,13123,"重新"]],[13123,13123],[13125,13125]]],[1526871050874,["Re@Re.local",[[-1,13125,"执行"]],[13127,13127],[13125,13125]]],[1526871052692,["Re@Re.local",[[1,13125,"开始"]],[13125,13125],[13127,13127]]],[1526871054889,["Re@Re.local",[[1,13129,"。"]],[13129,13129],[13130,13130]]],[1526871055792,["Re@Re.local",[[1,13135,"\n"]],[13130,13130],[13131,13131]]],[1526871056001,["Re@Re.local",[[1,13136,"\n"]],[13131,13131],[13132,13132]]],[1526871057471,["Re@Re.local",[[1,13132,"大"]],[13132,13132],[13133,13133]]],[1526871057523,["Re@Re.local",[[-1,13132,"大"]],[13133,13133],[13132,13132]]],[1526871058056,["Re@Re.local",[[1,13132,"（"]],[13132,13132],[13133,13133]]],[1526871058402,["Re@Re.local",[[-1,13132,"（"]],[13133,13133],[13132,13132]]],[1526871060751,["Re@Re.local",[[1,13132,"**代码3**"]],[13132,13132],[13139,13139]]],[1526871061033,["Re@Re.local",[[1,13144,"\n"]],[13139,13139],[13140,13140]]],[1526871074383,["Re@Re.local",[[1,13140,"···"]],[13140,13140],[13143,13143]]],[1526871075396,["Re@Re.local",[[-1,13140,"···"]],[13143,13143],[13140,13140]]],[1526871077227,["Re@Re.local",[[1,13140,"```Pyh"]],[13140,13140],[13146,13146]]],[1526871077611,["Re@Re.local",[[-1,13145,"h"]],[13146,13146],[13145,13145]]],[1526871078177,["Re@Re.local",[[1,13145,"thon"]],[13145,13145],[13149,13149]]],[1526871078409,["Re@Re.local",[[1,13154,"\n"]],[13149,13149],[13150,13150]]],[1526871079054,["Re@Re.local",[[1,13150,"def searchFrom(maze, startRow, startColumn):\n    maze.updatePosition(startRow, startColumn)\n   #  Check for base cases:\n   #  1\\. We have run into an obstacle, return false\n   if maze[startRow][startColumn] == OBSTACLE :\n        return False\n    #  2\\. We have found a square that has already been explored\n    if maze[startRow][startColumn] == TRIED:\n        return False\n    # 3\\. Success, an outside edge not occupied by an obstacle\n    if maze.isExit(startRow,startColumn):\n        maze.updatePosition(startRow, startColumn, PART_OF_PATH)\n        return True\n    maze.updatePosition(startRow, startColumn, TRIED)\n\n    # Otherwise, use logical short circuiting to try each\n    # direction in turn (if needed)\n    found = searchFrom(maze, startRow-1, startColumn) or \\\n            searchFrom(maze, startRow+1, startColumn) or \\\n            searchFrom(maze, startRow, startColumn-1) or \\\n            searchFrom(maze, startRow, startColumn+1)\n    if found:\n        maze.updatePosition(startRow, startColumn, PART_OF_PATH)\n    else:\n        maze.updatePosition(startRow, startColumn, DEAD_END)\n    return found"]],[13150,13150],[14259,14259]]],[1526871079667,["Re@Re.local",[[1,14264,"\n"]],[14259,14259],[14260,14260]]],[1526871080915,["Re@Re.local",[[1,14260,"```"]],[14260,14260],[14263,14263]]],[1526871082060,["Re@Re.local",[[1,14268,"\n"]],[14263,14263],[14264,14264]]],[1526871336281,[null,[[-1,12258,"在"],[1,12259,"若"],[1,12348,"均不可行"],[-1,12350,"北被昆玉"],[1,12357,"无"],[-1,12362,"，"]],[12258,12258],[12362,12362]]],[1526871336281,[null,[[1,12258,"在"],[-1,12258,"若"],[-1,12348,"均不可行"],[1,12354,"北被昆玉"],[-1,12357,"无"],[1,12363,"，"]],[12362,12362],[12258,12258]]],[1526871279969,["Re@Re.local",[[1,13326," "]],[13326,13326],[13327,13327]]]]],["60c6f27d-28d5-4cfd-8eb0-5d0f22e8258a",1527002908502,"递归\n===\n\n\n# 4 递归 #\n\n## 4.1 目标 ##\n\n本章目标如下：\n\n- 了解：某些难以处理的问题也许用递归可以轻松解决。\n- 掌握：设计递归式程序。\n- 了解并应用：递归三大法则。\n- 实现：问题的递归式描述。\n- 了解：计算机系统中递归的实现\n\n## 4.2 何为递归 ##\n\n递归是一种解决问题的方法，将一个问题分解为越来越小的子问题，直到问题的规模小到可以被轻松解决。通常来说，递归中有函数对自己本身的调用。从表面上来看似乎并没有什么特别指出，然而递归算法对于某些问题具有一针见血的气消。\n\n\n## 4.3 对数字列表求和 ##\n\n首先来看一个并不需要递归也可以解决的问题。假设相对一个数字列表求和，比如[1,3,5,7,9]。迭代式算法如可执行代码1所示。函数使用求和变量（theSum）来计算列表中数字之和。\n\n** 可执行代码1： 迭代求和 **\n```Python\ndef listsum(numList):\n    theSum = 0\n    for i in numList:\n        theSum = theSum + i\n    return theSum\n\nprint(listsum([1,3,5,7,9]))\n\n```\n那么，现在假设不可以使用while或者for循环，那又该如何做？数学家可能会想到加法本身是一种接受两个参数的函数，即一对数字。对于该列表求和问题便可转化为多对数字求和问题。先写为全括号化的表达式，比如：\n$$((((1+3)+5)+7)+9)$$\n也可以反方向来：\n$$(1+(3+(5+(7+9))))$$\n注意到最里面的括号组（7+9）是不需要迭代或者其它特殊结构便可解决的问题。实际上，可以将求和问题写为以下简化形式：\n$$total= (1+(3+(5+(7+9))))\ntotal= (1+(3+(5+16)))\ntotal= (1+(3+21))\ntotal= (1+24)\ntotal= 25$$\n如何将这种思想转化为Python程序？首先，将求和问题按Python列表的方式来考虑。可能读者会认为对列表的求和即是列表中第一个元素numList[0]与其它所有元素numList[1:]之和，以函数形式写出即为：\n$$listSum(numList)=first(numList)+listSum(rest(numList))$$\n在以上表达式中，first(numList)返回列表中第一个元素，而rest(numList)返回的是去除了第一个元素的原列表（也是一个列表）。用Python表达式可以写为如可执行代码2：\n\n** 可执行代码2：递归求和（第一次递归） **\n```Python\ndef listsum(numList):\n   if len(numList) == 1:\n        return numList[0]\n   else:\n        return numList[0] + listsum(numList[1:])\n\nprint(listsum([1,3,5,7,9]))\n\n```\n在这段代码中，有些地方需要注意。首先，在行2检查了列表是否仅有1个元素。这一判定很关键，它是控制函数结束的必要语句。长度为1的列表求和显然便是其本身。其次，在行5该函数调用了它自己本身。这便是将listsum归为递归算法的原因。递归函数是一种调用自身的函数。\n\n图1演示了对列表[1,3,5,7,9]求和的递归调用。读者可以将这些有序调用认为是一次次的问题简化过程。每调用一次，便转化为解决一个更小更容易的问题，知道问题规模不能再缩小。\n\n![image](http://interactivepython.org/courselib/static/pythonds/_images/sumlistIn.png)\n\n当问题已经最简化时，便开始将每个问题的答案拼装起来直到原始问题被解决。如图2所示，listsum沿着调用顺序返回。当listsum回到了最顶部的问题时，原始问题便得到了解决。\n\n![image](http://interactivepython.org/courselib/static/pythonds/_images/sumlistOut.png)\n\n## 4.4 递归三定律 ##\n\n跟阿西莫夫（Asimov）机器人三定律一样，递归算法也必须遵守三条重要定律：\n\n1. 递归算法必须要有个**约束条件**作为出口。\n2. 递归算法必须不断改变自身状态并向约束条件演进。\n3. 递归算法必须递归地调用自身。\n\n现在来仔细研究一下这三条定律以及在listsum中是如何得到体现的。首先，约束条件是终止算法递归的条件。一般来说，约束条件都是问题规模已经小到足以直接解决的时候。在listsum算法中，约束条件是长度为1的列表。\n\n为满足第二条定律，必须设法改变当前状态并使得算法向约束条件靠近。状态的改变意味着，算法使用的一些数据将被改变。通常来说，即为问题规模以某种方法缩小。在listsum算法中，基本数据结构是列表，因此需要在列表上想办法实现状态的改变。因为约束条件是列表长度为1，向约束条件演进的一种很自然的实现方式就是缩小列表，这便是可执行代码在行5所做的事：将列表长度缩小，然后将其作为参数来调用listsum本身。\n\n最后一条定律是算法必须调用自己本身，这是递归根本的定义。递归对于许多初学者来说是个有些难懂的概念。读者应当已经发现，递归函数是一种很优秀的方法，借助它可以将大规模的问题拆分为小问题，解决这些小问题只需要写一个简单的函数来对它们处理即可。表面看起来，递归似乎是陷入了一种循环。但实际上它在逻辑上并不是循环的，递归的逻辑是用优美简洁的表达式将问题拆分为更小更简单的。\n\n在本章的剩余部分将进一步研究递归，每个例子中都着重于用如何利用三定律来设计算法。\n\n## 4.5 将整数转化为以任何进制表示的字符串 ##\n\n假设需要将整数转化为二进制与十六进制之间的某进制表示的字符串形式。比如，整数10的十进制字符串为\"10\"，而二进制字符串为\"1010\"。有很多算法可以解决该问题，包括前文说过的以栈来解决，但是用递归思想来解决该问题还是最简洁的。\n\n接下来以十进制的整数768为例演示一个具体的问题。假设用一组字符串来对应前10个数字，比如说convString = \"0123456789\" 。通过在字符串中检索，很容易便可将10以内的数字进行转化，例如整数9，那么字符串便是convString[9]，即\"9\"。将769拆分为三个单独的数字7，6，9，将其转化为字符串也很简单了。小于10的整数看起来是不错的约束条件。\n\n确定基本进制后，整个算法将包括3部分：\n\n1. 将原数字转化为一系列单数字。\n2. 利用检索将单数字转为字符串。\n3. 将各单数字字符串连接起来，形成最终的结果。\n\n下一步是实现状态的改变，使得程序向约束条件靠近。因为研究对象是数字，不妨回想一想什么数学运算可以减少数字，最有可能的是减法和除法。虽然说减法也许是可行的，但有些令人困扰的是在这里如何确定减法操作的两个对象。而除法则清晰很多。\n\n将整数769除以10，可以得到76余9，这两个数字很有用。首先，余数是一个小于进制（10）的数，因此可以直接使用检索转化为字符串。其次，得到了一个小于初始数字的数，这便向约束条件靠近了一步。现在需要做得便是将76转化为它的字符表示。同样，利用除法可以得到7余6。最后，问题退化为转化7。流程如图3所示。注意，需要被保存的数被放置在示意图右侧。\n\n![image](http://interactivepython.org/courselib/static/pythonds/_images/toStr.png)\n\n可执行代码1实现了上述的算法。\n\n** 可执行代码1：迭代算法——整数转化为字符串 **\n```Python\ndef toStr(n,base):\n   convertString = \"0123456789ABCDEF\"\n   if n < base:\n      return convertString[n]\n   else:\n      return toStr(n//base,base) + convertString[n%base]\n\nprint(toStr(1453,16))\n```\n注意在第3行，检测了约束条件，即n小于目标进制。一旦检测到约束条件，便停止递归，然后根据convertString序列返回结果。在行6，通过递归调用和除法降低问题规模来同时满足了第2和第3定律。\n\n再来追踪一次该算法，这次将整数10转化为2进制形式字符串（\"1010\"）\n\n![image](http://interactivepython.org/courselib/static/pythonds/_images/toStrBase2.png)\n\n如图4所示，得到了所需结果，似乎数字的顺序错了。但是实际上，算法运行是正常的，因为是在行6中是先进行的递归调用，然后再将余数的字符串标识加上。\n\n## 4.6 栈桢：实现递归 ##\n\n设想，如果不按上文那样将递归调用的单字符结果依次连接起来得到结果，而是将算法修改为在递归调用之前将字符串压入栈中。调整后的算法如可执行代码1所示。\n** 可执行代码1：利用栈实现整数转化为字符串 **\n```Python\nfrom pythonds.basic.stack import Stack\n\nrStack = Stack()\n\ndef toStr(n,base):\n    convertString = \"0123456789ABCDEF\"\n    while n > 0:\n        if n < base:\n            rStack.push(convertString[n])\n        else:\n            rStack.push(convertString[n % base])\n        n = n // base\n    res = \"\"\n    while not rStack.isEmpty():\n        res = res + str(rStack.pop())\n    return res\n\nprint(toStr(1453,16))\n\n```\n每一次调用toStr，都将一个字符放入栈中。就前一个例子来说，可以发现在第4次调用后，得到的栈如图5所示。注意，现在可以直接将字符从栈中推出，再将他们链接为最后的结果\"1010\"即可。\n\n![../_images/recstack.png](http://interactivepython.org/courselib/static/pythonds/_images/recstack.png)\n\n此例说明了Python是如何实现递归函数调用的。在Python中，调用一个函数时，系统会分配一个栈桢用来处理该函数中的局部变量。当函数执行完毕，返回值被放入栈顶等待被调用的函数处理。如图6所示。\n\n![../_images/newcallstack.png](http://interactivepython.org/courselib/static/pythonds/_images/newcallstack.png)\n\n注意对toStr(2//2, 2)的调用在栈中返回了值“1”。该返回值在表达式“1” + convertString[2%2]用来取代函数调用toStr(1,2)，执行后得到的结果“10”又被放在栈顶。这样一来，Python的调用栈取代了代码4中所使用的栈。在该例子中，读者可以认为栈顶的返回值替代了累加变量的作用。\n\n栈桢也为对应函数使用的变量规定了作用域。虽然多次调用同一个函数，每一次调用都为函数的局部变量创建一个新的作用域。\n\n## 4.7 图示递归 ##\n\n在上一节中介绍了一些使用递归算法可以轻松解决的问题，然而很难给出递归函数运行的可视化方法或者思维导图，这就使得递归算法不是那么容易掌握的。本节将研究一些递归的例子并画出示意图。通过研究这些示意图的形成过程，便会对递归过程有更加深刻的理解。\n\n这里使用Python的海龟图像模块turtle进行可视化。turtle模块是所有Python版本的标配并且很容易上手，其符号也很简单。创建一只海龟，该海龟可以前进/后退/左转/右转等，并且可以控制尾巴的抬起和放下。当海龟的尾巴放下且在移动时，便会绘制出线。为了提高观赏性，可以改变海龟尾巴的宽度以及画笔的颜色。\n\n下面简单说明turtle作图的基础，这里会利用turtle绘制一个螺旋线。如可执行代码所示。引入turtle模块后，创建一个turtle实例。当turtle生成后，为其创建一个窗口用来绘图。接下来定义drawSpiral函数。该函数的约束条件是待画线的长度（以len参数表示）减少到小于或等于0。若长度仍大于0，则命令海龟前进len单位然后右转90度。通过再次调用drawSpiral并且传入减小后的长度实现递归。在可执行代码1的最后，调用了函数myWin.exitonclick()，这是窗口的一个很便利的方法，它将海龟置于待机状态直到在窗口内发生点击操作，然后页面才清空并退出。\n\n**可执行代码1：使用海龟绘制递归螺旋线**\n```Python\nimport turtle\n\nmyTurtle = turtle.Turtle()\nmyWin = turtle.Screen()\n\ndef drawSpiral(myTurtle, lineLen):\n    if lineLen > 0:\n        myTurtle.forward(lineLen)\n        myTurtle.right(90)\n        drawSpiral(myTurtle,lineLen-5)\n\ndrawSpiral(myTurtle,100)\nmyWin.exitonclick()\n```\n\n这就是海龟模块中所需要了解的一些基本知识，据此便可以绘制漂亮的团了。下一个程序将绘制一个分形树。分形是数学的一个分支，它与递归有许多相似点。对于某个图形，无论放大多少倍，其基本形状都是一致的，此时便称之为**分形**。很多自然现象具有分形特点，比如海岸线，雪花，山脉，树以及灌木等，这使得CG（Computer Generated）电影具有了可行性。接下来的例子中将绘制一颗分形树。\n\n为了画出这棵树，考虑如何用分形思想来描述一棵树是很有用的。回想一下，分形就是无论放大多少倍都具有相似性的东西。将这种思想用来研究树或者灌木，可以发现即使是小树枝也具有与整棵树一致的形状和特点。据此可以将树定义为一个左右分叉，且左右各有一个更小的“树”（分叉）。引入递归的概念，那么树便是这些递归的小树构成的。\n\n现在将上述思路转换为Python代码。代码1利用海龟来绘制了一颗分形树。可以发现，行5和行7进行了递归调用。行5在右转20度后进行了递归调用，这便是前文提到的右分叉；在行7，海龟在左转40度后进行了另一次递归调用，这即为左分叉。此外，注意到每次调用tree后，都对branchlen参数进行了减法运算，这保证了递归树是越来越小的。读者应该也注意到了行2的**if**语句即是约束条件，在branchLen过小时触发。\n\n**代码1**\n```Python\ndef tree(branchLen,t):\n    if branchLen > 5:\n        t.forward(branchLen)\n        t.right(20)\n        tree(branchLen-15,t)\n        t.left(40)\n        tree(branchLen-10,t)\n        t.right(20)\n        t.backward(branchLen)\n```\n完整的代码如可执行代码2所示。在运行代码前，思考一下是分叉树是如何绘制的。仔细观察这些调用，想想分叉树是如何展开的。它是同时对称地绘制左右分叉还是先右再左？\n\n**可执行代码2:递归绘制分叉树**\n```Python\ndef tree(branchLen,t):\n    if branchLen > 5:\n        t.forward(branchLen)\n        t.right(20)\n        tree(branchLen-15,t)\n        t.left(40)\n        tree(branchLen-15,t)\n        t.right(20)\n        t.backward(branchLen)\n\ndef main():\n    t = turtle.Turtle()\n    myWin = turtle.Screen()\n    t.left(90)\n    t.up()\n    t.backward(100)\n    t.down()\n    t.color(\"green\")\n    tree(75,t)\n    myWin.exitonclick()\n\nmain()\n```\n注意分叉树上的每一个分叉点是如何相应递归调用，以及分叉树是如何一路朝右绘制到最短的那个分支的。如图2所示。现在，仔细观察，程序是在整个树的右侧绘制完成后再沿着分叉返回，分叉树的右半侧如图1所示。接下来将绘制树的左侧，然而并不是直接画出最大的左侧，而是在每次到达最短枝前，先画出左分支的整个右半部分，然后再返回画左半部分。\n\n![../_images/tree1.png](http://interactivepython.org/courselib/static/pythonds/_images/tree1.png)\n\n![../_images/tree2.png](http://interactivepython.org/courselib/static/pythonds/_images/tree2.png)\n\n分形树只是一个起点，此外，读者也应该注意到这棵树看起来并不是那么真实，因为自然界中并不会真的像计算机程序那样具有高度对称性。本章的最后将会介绍一些有趣的选项，可以使得分叉树看起来更真实。\n\n## 4.8 谢尔宾斯基三角形 ##\n\n谢尔宾斯基三角形也是一种具有自相似性的分形图形，如图三所示。谢尔宾斯基三角形是一种三向递归算法。手绘谢尔宾斯基三角形的方法很简单。从某个大的三角形开始，将这个大三角形分为4个小的三角形：连接每条边的中点；剔除掉新的4个三角形中间的那个，对剩余的三个采取同样的步骤；以此类推，不断递归循环。如果笔足够细的话，是可以无穷地画下去的。\n\n![../_images/sierpinski.png](http://interactivepython.org/courselib/static/pythonds/_images/sierpinski.png)\n\n既然这个算法可以无限运行，那就必须得找出约束条件。这里被设置为了任意的划分次数，有时这被称为相似性维数。每次进行递归调用，就将维数减1直到为0。代码如可执行代码1所示。\n\n**可执行代码1:绘制谢尔宾斯基三角形**\n```Python\nimport turtle\n\ndef drawTriangle(points,color,myTurtle):\n    myTurtle.fillcolor(color)\n    myTurtle.up()\n    myTurtle.goto(points[0][0],points[0][1])\n    myTurtle.down()\n    myTurtle.begin_fill()\n    myTurtle.goto(points[1][0],points[1][1])\n    myTurtle.goto(points[2][0],points[2][1])\n    myTurtle.goto(points[0][0],points[0][1])\n    myTurtle.end_fill()\n\ndef getMid(p1,p2):\n    return ( (p1[0]+p2[0]) / 2, (p1[1] + p2[1]) / 2)\n\ndef sierpinski(points,degree,myTurtle):\n    colormap = ['blue','red','green','white','yellow',\n                'violet','orange']\n    drawTriangle(points,colormap[degree],myTurtle)\n    if degree > 0:\n        sierpinski([points[0],\n                        getMid(points[0], points[1]),\n                        getMid(points[0], points[2])],\n                   degree-1, myTurtle)\n        sierpinski([points[1],\n                        getMid(points[0], points[1]),\n                        getMid(points[1], points[2])],\n                   degree-1, myTurtle)\n        sierpinski([points[2],\n                        getMid(points[2], points[1]),\n                        getMid(points[0], points[2])],\n                   degree-1, myTurtle)\n\ndef main():\n   myTurtle = turtle.Turtle()\n   myWin = turtle.Screen()\n   myPoints = [[-100,-50],[0,100],[100,-50]]\n   sierpinski(myPoints,3,myTurtle)\n   myWin.exitonclick()\n\nmain()\n```\n代码1即是按前文所述思想写出来的。sierpinski做的第一件事是绘制最外部的三角形。接下来，进行了三次递归调用，每一次都是用来通过连接中点来获得新的三角形。这里又用了标准的海龟库。可以通过在Python提示符里输入help('turtle')来细究turtle库中可用的方法。\n\n仔细研究代码，想想这些三角形的绘制顺序。确切地来说，绘制顺序取决于初始的设定，这里假设顺序是左下，上，右下。考虑到sierpinski函数调用其本身的方式，sierpinski先是沿最短路线直接到达可以绘制的最小的左下角的三角形，再返过来绘制其它的剩余部分：先是按类似的方式直接向最小的、最顶部的三角形前进；最后再绘制右下角的最小的三角形。\n\n有时候根据函数调用的示意图来理解递归算法是很有用的。如图4所示，本例中的递归算法总是先向左边前进。黑线表示正在运行的，灰色的表示没有运行的，越靠近图4的底部，三角形越小。函数每次执行都消耗一个相似维度。到达最底部左边的三角形后，将继续绘制中间的三角形，并以此类推。\n\n![../_images/stCallTree.png](http://interactivepython.org/courselib/static/pythonds/_images/stCallTree.png)\n\nsierpinski函数很大程度上是基于getMid函数的。getMid函数接收两个参数作为端点，返回两者的中点。此外，可执行代码1中使用了begin_fill和end_fill方法来绘制带填充色的三角形。\n\n## 4.9 复杂递归问题 ##\n\n在前几节中，本书讨论了一些相对简单并且图形上很有趣的问题来帮助读者理解递归。在本节中，将研究一些使用迭代法难以解决然而却可以用递归法优雅而简洁地解决的问题。在最后，将讲解一个看起来似乎能用递归法解决但实际上并不能的问题。\n\n## 4.10 河内（Hanoi）塔问题 ##\n\n河内塔问题由法国数学家Edouard于1883年受到印度教中的一个故事启发而提出，在故事中，年轻僧侣将被予以考题。在最开始，僧侣们会得到3根杆以及64个金圆盘，每个盘都比其下面的盘小一些。他们的任务是将这64个盘从一个盘移动到另外一个盘去，并且有两个限制条件：每次只允许移动一个盘；禁止将大盘置于小盘之上。僧侣们夜以继日地努力，每秒移动一个盘子。传说中，当他们完成此任务时，世界将会毁灭。\n\n传说很有趣，但现在也不用担心世纪末日的问题。正确地完成该任务需要$2^{64}-1=18446744073709551615$次移动。1秒移动1次，也需要584942417355年。显然，实际所需时间比这更长。\n\n图1演示了从第一根杆移动到第三根杆时，中间杆上的盘子的情况。注意到，按照规定，每根杆上的盘子都是从上到下依次变大的。如果你之前没有接触过该问题，那不妨现在来尝试一下。不必真的想象盘子和杆什么的，一堆书或者一堆纸即可。\n\n![image](http://interactivepython.org/courselib/static/pythonds/_images/hanoi.png)\n\n那么用递归该如何解决这个问题？约束条件又是什么？现在来从头考虑下这个问题。假设有5个盘子，并且开始都放在杆1上。如果已经知道了如何将4个盘子移动到杆2上，便可以轻松地将底部的盘子移到杆3上，然后把那4个盘子从杆2移动到杆3上。但是不知道怎么移动4个盘子又该如何是好？那么考虑下，假如知道如何移动3个盘子的杆...以此类推。显然将1个盘子移动到杆3是很容易的。看起来似乎这就是约束条件了。\n\n\n下面是对盘子从起始杆通过中间杆移动到目标杆的高度概括（设盘数为Height）：\n\n1. 利用目标杆，将高度为 Height - 1 的塔从起始杆移动到中间杆上。\n2. 将剩下的那个盘子放到目标杆上。\n3. 利用中间杆，将高度为 Height - 1 的塔从中间杆移动到目标杆上。\n\n维持大盘在下的规则便可以递归使用上面的3步，便可以处理任何更大规模的问题。上述步骤中唯一缺少的就是对约束条件的确定。最简的河内塔问题是仅有一个盘子的塔。在这种情况下，只需要将该盘子直接移动到目标杆即可。高度为1的河内塔即是约束条件。此外，上述步骤通过在步骤1和3中减少塔的高度来实现了向约束条件收敛。代码1给出了解决河内塔问题的Python代码。\n\n**代码1**\n```Python\ndef moveTower(height,fromPole, toPole, withPole):\n    if height >= 1:\n        moveTower(height-1,fromPole,withPole,toPole)\n        moveDisk(fromPole,toPole)\n        moveTower(height-1,withPole,toPole,fromPole)\n```\n该代码看起来似乎就像英文描述性文字一样。该算法的简便性关键在于进行了两次不同的递归调用。在行3，将除了最底部（最大的）盘子全部移到中间杆上，行4仅将底部的盘子移动到目标盘。行5则是将中间杆上的圆盘移动到最大盘的上部（目标杆）即可。约束条件即是塔高度为0。注意，处理约束条件在这种情况下是调用moveDisk函数的前提条件。\n\nmoveDisk函数，如代码2所示，也很简单。它仅仅是打印出将盘子从某个杆上移动到另一个杆的过程。读者可以试着运行一下，便可发现该算法可以很高效地解决该问题。\n\n**代码2**\n```Python\ndef moveDisk(fp,tp):\n    print(\"moving disk from\",fp,\"to\",tp)\n```\n\n看过moveTower和moveDisk的代码后，读者可能会想为何不直接使用栈来追踪任意盘子在哪个杆里。提示：如果要显式地追踪盘子，应该需要3个栈，每个对应一个杆。答案是，Python本身就隐式地提供了我们所需要的调用栈。\n\n## 4.6 探索迷宫 ##\n\n本节将研究的问题跟拓宽机器人活动范围有关：如何走出迷宫？如果寝室内有一个Roomba真空打扫机器人，读者可能会想利用本节所学只是对其进行重新编程。本节的问题是帮助海龟走出虚拟迷宫。在该问题中，假设海龟掉入中央并开始虚招出炉。观察图2，思考如何解决该问题。\n\n![../_images/maze.png](http://interactivepython.org/courselib/static/pythonds/_images/maze.png)\n\n为了简化问题，假设迷宫以矩形为单位划分。每个矩形要么是开放的要么是填充以墙。海龟只能通过开放的部分，如果遭遇了墙则必须调整方向。海龟需要系统性的步骤以走出该迷宫。下面是具体的步骤：\n\n- 在初始位置尝试向北走一步，以此开始递归程序。\n- 若第一步的向北移动失败，则向南移动，然后开始递归。\n- 若第一步的向南移动也失败，则向西移动，然后开始递归。\n- 若第一步的向北、向南、向西移动均失败，则向东移动。\n- 若四个方向均不可行，则此路径无法走出迷宫，失败。\n\n听起来很容易，然而有些细节需要说明一下。假设递归的第一步是向北移动的，按照制定的程序来说，下一步也将向北移动，此时如果不幸地被墙挡住，便会向南移动，于是便会到了起始状态。此时如果按照这种递归程序来做，只会向后退一步，然后陷入无限迭代中。因此，需要一种方法来记录走过的地方。在本例中，可以假设手里有一袋面包屑可以沿着走过的路径撒下。如果准备向某个方向前进一步时发现该方块已经有面包屑了，此时立刻退回来并且尝试另外一个方向。在该算法的代码中可以看出，往回走一步同递归函数调用结果返回一样。\n\n跟其它递归算法一样，这里也需要研究约束条件。一部分读者可能根据前文已经推测出，在本算法中，有4个约束条件需要考虑：\n1. 海龟碰到墙壁。由于方格被墙壁填充而无法通行。\n2. 海龟到达已访问过的方格。为避免陷入无限迭代，不能在此位置继续前进。\n3. 到达没有墙的边界之外，换言之已经走出迷宫。\n4. 海龟在四个方向上都无法前进。\n\n要让程序运行起来，需要一种方法来模拟迷宫。为了使之看起来更有趣，这里使用了海龟模块来绘制和探索迷宫，这样便可以观察该算法的动态效果了。迷宫对象应该要提供以下方法以便编写搜索算法。\n\n- \\_\\_init\\_\\_ 读取表示迷宫的数据，初始化迷宫的内部表示，并且找到海龟的起始位置。\n- drawMaze 在一个窗口中绘制迷宫。\n- updatePosition 更新迷宫内部状态并更改海龟位置。\n- isExit 判断当前位置是否为迷宫的一个出口。\n\nMaze类也重载了操作符[]，这样算法程序便可以很容易地获取任意方格的状态。\n\n下面看一下叫做searchFrom的搜索函数的代码，如代码3所示。注意到该函数接收3个参数：一个maze对象，起始行，起始列。从逻辑上来说，每次调用递归函数都将重新开始搜索。\n\n**代码3**\n```Python\ndef searchFrom(maze, startRow, startColumn):\n    maze.updatePosition(startRow, startColumn)\n   #  Check for base cases:\n   #  1\\. We have run into an obstacle, return false\n    if maze[startRow][startColumn] == OBSTACLE :\n        return False\n    #  2\\. We have found a square that has already been explored\n    if maze[startRow][startColumn] == TRIED:\n        return False\n    # 3\\. Success, an outside edge not occupied by an obstacle\n    if maze.isExit(startRow,startColumn):\n        maze.updatePosition(startRow, startColumn, PART_OF_PATH)\n        return True\n    maze.updatePosition(startRow, startColumn, TRIED)\n\n    # Otherwise, use logical short circuiting to try each\n    # direction in turn (if needed)\n    found = searchFrom(maze, startRow-1, startColumn) or \\\n            searchFrom(maze, startRow+1, startColumn) or \\\n            searchFrom(maze, startRow, startColumn-1) or \\\n            searchFrom(maze, startRow, startColumn+1)\n    if found:\n        maze.updatePosition(startRow, startColumn, PART_OF_PATH)\n    else:\n        maze.updatePosition(startRow, startColumn, DEAD_END)\n    return found\n```\n\n\n\n\n\n",[[1527002863137,["Re@Re.local",[[1,14265,"k"]],[14265,14265],[14266,14266]]],[1527002863459,["Re@Re.local",[[-1,14265,"k"]],[14266,14266],[14265,14265]]],[1527002876857,["Re@Re.local",[[1,14265,"在"]],[14265,14265],[14266,14266]]],[1527002877131,["Re@Re.local",[[-1,14265,"在"]],[14266,14266],[14265,14265]]],[1527002891015,["Re@Re.local",[[1,14265,"可以看出，在此算法中，第一步是调用了updatePosio"]],[14265,14265],[14294,14294]]],[1527002891372,["Re@Re.local",[[-1,14293,"o"]],[14294,14294],[14293,14293]]],[1527002895633,["Re@Re.local",[[1,14293,"tion函数。这仅仅是为"]],[14293,14293],[14305,14305]]],[1527002895762,["Re@Re.local",[[-1,14304,"为"]],[14305,14305],[14304,14304]]],[1527002897778,["Re@Re.local",[[1,14304,"为了使得"]],[14304,14304],[14308,14308]]],[1527002900733,["Re@Re.local",[[-1,14306,"使得"]],[14308,14308],[14306,14306]]],[1527002905352,["Re@Re.local",[[1,14306,"实现算法的可视化便于"]],[14306,14306],[14316,14316]]],[1527002940396,["Re@Re.local",[[1,14316,"观察海龟是如何在迷宫中进行移动的。接下来该算法检测了四种约束"]],[14316,14316],[14346,14346]]],[1527002941132,["Re@Re.local",[[-1,14342,"四种约束"]],[14346,14346],[14342,14342]]],[1527002963292,["Re@Re.local",[[1,14342,"4个约束条件的前3个：海龟是否碰到了墙壁？海龟是否到达了"]],[14342,14342],[14370,14370]]],[1527002965054,["Re@Re.local",[[-1,14367,"到达了"]],[14370,14370],[14367,14367]]],[1527002967361,["Re@Re.local",[[1,14367,"回到了曾经"]],[14367,14367],[14372,14372]]],[1527003024538,["Re@Re.local",[[1,14377,"？海龟是否找到了出口？如果这些都并不"]],[14377,14377],[14395,14395]]],[1527003024955,["Re@Re.local",[[-1,14393,"并不"]],[14395,14395],[14393,14393]]],[1527003088510,[null,[[-1,14372,"\n\n\n\n\n"],[1,14377,"到过的地方"],[1,14393,"\n\n\n\n\n"]],[14372,14372],[14398,14398]]],[1527003088510,[null,[[1,14372,"\n\n\n\n\n"],[-1,14372,"到过的地方"],[-1,14393,"\n\n\n\n\n"]],[14398,14398],[14372,14372]]],[1527003029270,["Re@Re.local",[[1,14392,"清"]],[14392,14392],[14393,14393]]],[1527003029506,["Re@Re.local",[[-1,14392,"清"]],[14393,14393],[14392,14392]]],[1527003031648,["Re@Re.local",[[1,14392,"情况无疑符合，"]],[14392,14392],[14399,14399]]],[1527003036009,["Re@Re.local",[[-1,14394,"无疑符合，"]],[14399,14399],[14394,14394]]],[1527003041288,["Re@Re.local",[[1,14394,"无一满足，则继续帝国"]],[14394,14394],[14404,14404]]],[1527003043325,["Re@Re.local",[[-1,14402,"帝国"]],[14404,14404],[14402,14402]]],[1527003044960,["Re@Re.local",[[1,14402,"递归"]],[14402,14402],[14404,14404]]],[1527003045216,["Re@Re.local",[[-1,14402,"递归"]],[14404,14404],[14402,14402]]],[1527003047895,["Re@Re.local",[[1,14402,"进行递归搜索。"]],[14402,14402],[14409,14409]]],[1527003048512,["Re@Re.local",[[1,14414,"\n"]],[14409,14409],[14410,14410]]],[1527003048706,["Re@Re.local",[[1,14415,"\n"]],[14410,14410],[14411,14411]]],[1527003052390,["Re@Re.local",[[1,14411,"读者有"]],[14411,14411],[14414,14414]]],[1527003052531,["Re@Re.local",[[-1,14413,"有"]],[14414,14414],[14413,14413]]],[1527003067644,["Re@Re.local",[[1,14413,"也应当注意到了，这里调用了"]],[14413,14413],[14426,14426]]],[1527003071140,["Re@Re.local",[[-1,14421,"这里调用了"]],[14426,14426],[14421,14421]]],[1527003072595,["Re@Re.local",[[1,14421,"在嗲"]],[14421,14421],[14423,14423]]],[1527003072693,["Re@Re.local",[[-1,14422,"嗲"]],[14423,14423],[14422,14422]]],[1527003082444,["Re@Re.local",[[1,14422,"递归过程中使用了四次"]],[14422,14422],[14432,14432]]],[1527003082838,["Re@Re.local",[[-1,14430,"四次"]],[14432,14432],[14430,14430]]],[1527003087666,["Re@Re.local",[[1,14430,"4此递归调用"]],[14430,14430],[14436,14436]]],[1527003148519,[null,[[-1,14372,"\n\n\n\n\n"],[1,14377,"到过的地方"],[-1,14409,"都"],[1,14410,"\n"],[1,14437,"\n\n\n\n"]],[14372,14372],[14441,14441]]],[1527003148519,[null,[[1,14372,"\n\n\n\n\n"],[-1,14372,"到过的地方"],[1,14409,"都"],[-1,14409,"\n"],[-1,14437,"\n\n\n\n"]],[14441,14441],[14372,14372]]],[1527003090064,["Re@Re.local",[[-1,14431,"此"]],[14432,14432],[14431,14431]]],[1527003091012,["Re@Re.local",[[1,14431,"次"]],[14431,14431],[14432,14432]]],[1527003092052,["Re@Re.local",[[1,14433,"对"]],[14433,14433],[14434,14434]]],[1527003092340,["Re@Re.local",[[-1,14433,"对"]],[14434,14434],[14433,14433]]],[1527003092767,["Re@Re.local",[[1,14433,"、"]],[14433,14433],[14434,14434]]],[1527003092808,["Re@Re.local",[[-1,14433,"、"]],[14434,14434],[14433,14433]]],[1527003094357,["Re@Re.local",[[1,14432,"低哦"]],[14432,14432],[14434,14434]]],[1527003095245,["Re@Re.local",[[-1,14432,"低哦"]],[14434,14434],[14432,14432]]],[1527003099740,["Re@Re.local",[[1,14432,"对searchFrom"]],[14432,14432],[14443,14443]]],[1527003102464,["Re@Re.local",[[1,14447,"d"]],[14443,14443],[14447,14448]]],[1527003102599,["Re@Re.local",[[-1,14447,"d"],[1,14448,"的"]],[14447,14448],[14448,14448]]],[1527003102773,["Re@Re.local",[[-1,14447,"的"]],[14448,14448],[14447,14447]]],[1527003125375,["Re@Re.local",[[1,14447,"。很难直接估计"]],[14447,14447],[14454,14454]]],[1527003126441,["Re@Re.local",[[-1,14450,"直接估计"]],[14454,14454],[14450,14450]]],[1527003138625,["Re@Re.local",[[1,14450,"预测到底进行了多少次递归调用，永伟这些"]],[14450,14450],[14469,14469]]],[1527003139170,["Re@Re.local",[[-1,14465,"永伟这些"]],[14469,14469],[14465,14465]]],[1527003141376,["Re@Re.local",[[1,14465,"因为这些"]],[14465,14465],[14469,14469]]],[1527003144796,["Re@Re.local",[[-1,14467,"这些"]],[14469,14469],[14467,14467]]],[1527003147455,["Re@Re.local",[[1,14467,"它们之间是"]],[14467,14467],[14472,14472]]],[1527003208524,[null,[[-1,14372,"\n\n\n\n\n"],[1,14377,"到过的地方"],[-1,14409,"都"],[1,14410,"\n"],[1,14473,"\n\n\n\n"]],[14372,14372],[14477,14477]]],[1527003208524,[null,[[1,14372,"\n\n\n\n\n"],[-1,14372,"到过的地方"],[1,14409,"都"],[-1,14409,"\n"],[-1,14473,"\n\n\n\n"]],[14477,14477],[14372,14372]]],[1527003150678,["Re@Re.local",[[1,14473,"Or于"]],[14473,14473],[14476,14476]]],[1527003151103,["Re@Re.local",[[-1,14473,"Or于"]],[14476,14476],[14473,14473]]],[1527003152661,["Re@Re.local",[[1,14473,"or理啊"]],[14473,14473],[14477,14477]]],[1527003153639,["Re@Re.local",[[-1,14473,"or理啊"]],[14477,14477],[14473,14473]]],[1527003154526,["Re@Re.local",[[1,14473,"**(o"]],[14473,14473],[14477,14477]]],[1527003155256,["Re@Re.local",[[-1,14475,"(o"]],[14477,14477],[14475,14475]]],[1527003155693,["Re@Re.local",[[1,14475,"oir"]],[14475,14475],[14478,14478]]],[1527003156369,["Re@Re.local",[[-1,14476,"ir"]],[14478,14478],[14476,14476]]],[1527003158056,["Re@Re.local",[[1,14476,"r**lian"]],[14476,14476],[14483,14483]]],[1527003158878,["Re@Re.local",[[-1,14479,"lian"]],[14483,14483],[14479,14479]]],[1527003161284,["Re@Re.local",[[1,14479,"链接的"]],[14479,14479],[14482,14482]]],[1527003162036,["Re@Re.local",[[-1,14479,"链接的"]],[14482,14482],[14479,14479]]],[1527003169302,["Re@Re.local",[[1,14479,"连接的。如果第一个"]],[14479,14479],[14488,14488]]],[1527003170576,["Re@Re.local",[[-1,14485,"第一个"]],[14488,14488],[14485,14485]]],[1527003174774,["Re@Re.local",[[1,14485,"对searchFrom的第一个"]],[14485,14485],[14500,14500]]],[1527003175425,["Re@Re.local",[[-1,14498,"一个"]],[14500,14500],[14498,14498]]],[1527003176765,["Re@Re.local",[[1,14498,"1次"]],[14498,14498],[14500,14500]]],[1527003179347,["Re@Re.local",[[-1,14498,"1次"]],[14500,14500],[14498,14498]]],[1527003182379,["Re@Re.local",[[1,14485,"第一个"]],[14485,14485],[14488,14488]]],[1527003182808,["Re@Re.local",[[-1,14486,"一个"]],[14488,14488],[14486,14486]]],[1527003183613,["Re@Re.local",[[1,14486,"1个"]],[14486,14486],[14488,14488]]],[1527003186348,["Re@Re.local",[[-1,14500,"第"]],[14501,14501],[14500,14500]]],[1527003206839,["Re@Re.local",[[1,14500,"调用返回结果为True，那么剩余的3次调用都不会执行。"]],[14500,14500],[14527,14527]]],[1527003268532,[null,[[-1,14372,"\n\n\n\n\n"],[1,14377,"到过的地方"],[-1,14409,"都"],[1,14410,"\n"],[-1,14472,"\n"],[1,14473,"用"],[1,14527,"\n\n\n\n\n"]],[14372,14372],[14532,14532]]],[1527003268532,[null,[[1,14372,"\n\n\n\n\n"],[-1,14372,"到过的地方"],[1,14409,"都"],[-1,14409,"\n"],[1,14472,"\n"],[-1,14472,"用"],[-1,14527,"\n\n\n\n\n"]],[14532,14532],[14372,14372]]],[1527003217069,["Re@Re.local",[[1,14527,"你可以吧"]],[14527,14527],[14531,14531]]],[1527003218115,["Re@Re.local",[[-1,14527,"你可以吧"]],[14531,14531],[14527,14527]]],[1527003222779,["Re@Re.local",[[1,14527,"可以把这当作"]],[14527,14527],[14533,14533]]],[1527003240512,["Re@Re.local",[[-1,14527,"可以把这当作"]],[14533,14533],[14527,14527]]],[1527003256031,["Re@Re.local",[[1,14527,"可以认为，(row-1, column）"]],[14527,14527],[14547,14547]]],[1527003256617,["Re@Re.local",[[-1,14546,"）"]],[14547,14547],[14546,14546]]],[1527003257114,["Re@Re.local",[[1,14546,")"]],[14546,14546],[14547,14547]]],[1527003263152,["Re@Re.local",[[1,14532,"移动至"]],[14532,14532],[14535,14535]]],[1527003264629,["Re@Re.local",[[1,14550,"是"]],[14550,14550],[14551,14551]]],[1527003328544,[null,[[-1,14372,"\n\n\n\n\n"],[1,14377,"到过的地方"],[-1,14409,"都"],[1,14410,"\n"],[-1,14472,"\n"],[1,14473,"用"],[1,14551,"\n\n\n\n\n"]],[14372,14372],[14556,14556]]],[1527003328544,[null,[[1,14372,"\n\n\n\n\n"],[-1,14372,"到过的地方"],[1,14409,"都"],[-1,14409,"\n"],[1,14472,"\n"],[-1,14472,"用"],[-1,14551,"\n\n\n\n\n"]],[14556,14556],[14372,14372]]],[1527003291330,["Re@Re.local",[[1,14551,"走出迷宫的一步。如果没有"]],[14551,14551],[14563,14563]]],[1527003291790,["Re@Re.local",[[-1,14561,"没有"]],[14563,14563],[14561,14561]]],[1527003297950,["Re@Re.local",[[1,14561,"向北走并没有除"]],[14561,14561],[14568,14568]]],[1527003298058,["Re@Re.local",[[-1,14567,"除"]],[14568,14568],[14567,14567]]],[1527003310810,["Re@Re.local",[[1,14567,"走出迷宫的方法，那么第2个调用将会执行，这一个"]],[14567,14567],[14590,14590]]],[1527003311499,["Re@Re.local",[[-1,14588,"一个"]],[14590,14590],[14588,14588]]],[1527003315895,["Re@Re.local",[[1,14588,"个调用是至"]],[14588,14588],[14593,14593]]],[1527003315977,["Re@Re.local",[[-1,14592,"至"]],[14593,14593],[14592,14592]]],[1527003317724,["Re@Re.local",[[1,14592,"移动"]],[14592,14592],[14594,14594]]],[1527003317794,["Re@Re.local",[[-1,14593,"动"]],[14594,14594],[14593,14593]]],[1527003323817,["Re@Re.local",[[1,14593,"至南方。如果南"]],[14593,14593],[14600,14600]]],[1527003323883,["Re@Re.local",[[-1,14599,"南"]],[14600,14600],[14599,14599]]],[1527003325222,["Re@Re.local",[[1,14599,"向南 "]],[14599,14599],[14602,14602]]],[1527003325679,["Re@Re.local",[[-1,14601," "]],[14602,14602],[14601,14601]]],[1527003326772,["Re@Re.local",[[1,14601,"移动的"]],[14601,14601],[14604,14604]]],[1527003388529,[null,[[-1,14372,"\n\n\n\n\n"],[1,14377,"到过的地方"],[-1,14409,"都"],[1,14410,"\n"],[-1,14472,"\n"],[1,14473,"用"],[1,14604,"\n\n\n\n\n"]],[14372,14372],[14609,14609]]],[1527003388530,[null,[[1,14372,"\n\n\n\n\n"],[-1,14372,"到过的地方"],[1,14409,"都"],[-1,14409,"\n"],[1,14472,"\n"],[-1,14472,"用"],[-1,14604,"\n\n\n\n\n"]],[14609,14609],[14372,14372]]],[1527003331125,["Re@Re.local",[[1,14604,"一失败"]],[14604,14604],[14607,14607]]],[1527003331938,["Re@Re.local",[[-1,14604,"一失败"]],[14607,14607],[14604,14604]]],[1527003337067,["Re@Re.local",[[1,14604,"也失败了，则向西，最"]],[14604,14604],[14614,14614]]],[1527003337182,["Re@Re.local",[[-1,14613,"最"]],[14614,14614],[14613,14613]]],[1527003338421,["Re@Re.local",[[1,14613,"类"]],[14613,14613],[14614,14614]]],[1527003338471,["Re@Re.local",[[-1,14613,"类"]],[14614,14614],[14613,14613]]],[1527003353149,["Re@Re.local",[[1,14613,"以此类推，最后是向东。如果4个递归函数返回的结果都是Fa"]],[14613,14613],[14641,14641]]],[1527003353657,["Re@Re.local",[[-1,14639,"Fa"]],[14641,14641],[14639,14639]]],[1527003386019,["Re@Re.local",[[1,14639,"**False**，那么说明没走出去。此时应该"]],[14639,14639],[14662,14662]]],[1527003448566,[null,[[-1,14372,"\n\n\n\n\n"],[1,14377,"到过的地方"],[-1,14409,"都"],[1,14410,"\n"],[-1,14472,"\n"],[1,14473,"用"],[1,14662,"\n\n\n\n\n"]],[14372,14372],[14667,14667]]],[1527003448566,[null,[[1,14372,"\n\n\n\n\n"],[-1,14372,"到过的地方"],[1,14409,"都"],[-1,14409,"\n"],[1,14472,"\n"],[-1,14472,"用"],[-1,14662,"\n\n\n\n\n"]],[14667,14667],[14372,14372]]],[1527003391897,["Re@Re.local",[[-1,14658,"此时应该"]],[14662,14662],[14658,14658]]],[1527003409391,["Re@Re.local",[[1,14658,"读者应当下载挥着手动"]],[14658,14658],[14668,14668]]],[1527003409992,["Re@Re.local",[[-1,14664,"挥着手动"]],[14668,14668],[14664,14664]]],[1527003423907,["Re@Re.local",[[1,14664,"或者手动输入以上程序，并逐一尝试改变调用顺序。"]],[14664,14664],[14687,14687]]],[1527003424486,["Re@Re.local",[[1,14692,"\n"]],[14687,14687],[14688,14688]]],[1527003424817,["Re@Re.local",[[1,14693,"\n"]],[14688,14688],[14689,14689]]],[1527003628503,[null,[[-1,14372,"\n\n\n\n\n"],[1,14377,"到过的地方"],[-1,14409,"都"],[1,14410,"\n"],[-1,14472,"\n"],[1,14473,"用"],[1,14689,"\n\n\n\n\n"]],[14372,14372],[14694,14694]]],[1527003628503,[null,[[1,14372,"\n\n\n\n\n"],[-1,14372,"到过的地方"],[1,14409,"都"],[-1,14409,"\n"],[1,14472,"\n"],[-1,14472,"用"],[-1,14689,"\n\n\n\n\n"]],[14694,14694],[14372,14372]]],[1527003584286,["Re@Re.local",[[1,14694,"\n"]],[14687,14687],[14688,14688]]],[1527003584517,["Re@Re.local",[[1,14695,"\n"]],[14688,14688],[14689,14689]]],[1527003590020,["Re@Re.local",[[1,14689,"Maze类的代码如"]],[14689,14689],[14698,14698]]],[1527003592069,["Re@Re.local",[[-1,14695,"代码如"]],[14698,14698],[14695,14695]]],[1527003603154,["Re@Re.local",[[1,14695,"如代码4、代码5及代码6所示。__"]],[14695,14695],[14712,14712]]],[1527003603562,["Re@Re.local",[[-1,14710,"__"]],[14712,14712],[14710,14710]]],[1527003605257,["Re@Re.local",[[1,14710,"\\-"]],[14710,14710],[14712,14712]]],[1527003605931,["Re@Re.local",[[-1,14711,"-"]],[14712,14712],[14711,14711]]],[1527003608755,["Re@Re.local",[[1,14711,"_\\_方法"]],[14711,14711],[14716,14716]]],[1527003609397,["Re@Re.local",[[-1,14714,"方法"]],[14716,14716],[14714,14714]]],[1527003615372,["Re@Re.local",[[1,14714,"init\\_\\_ "]],[14714,14714],[14723,14723]]],[1527003616210,["Re@Re.local",[[-1,14722," "]],[14723,14723],[14722,14722]]],[1527003617758,["Re@Re.local",[[1,14722,"方法使得"]],[14722,14722],[14726,14726]]],[1527003618403,["Re@Re.local",[[-1,14724,"使得"]],[14726,14726],[14724,14724]]],[1527003627760,["Re@Re.local",[[1,14724,"接收1个文件名作为"]],[14724,14724],[14733,14733]]],[1527003688465,[null,[[-1,14372,"\n\n\n\n\n"],[1,14377,"到过的地方"],[-1,14409,"都"],[1,14410,"\n"],[-1,14472,"\n"],[1,14473,"用"],[1,14735,"\n\n\n\n\n"]],[14372,14372],[14740,14740]]],[1527003688466,[null,[[1,14372,"\n\n\n\n\n"],[-1,14372,"到过的地方"],[1,14409,"都"],[-1,14409,"\n"],[1,14472,"\n"],[-1,14472,"用"],[-1,14735,"\n\n\n\n\n"]],[14740,14740],[14372,14372]]],[1527003633496,["Re@Re.local",[[1,14735,"的参数。该文件应当是"]],[14735,14735],[14745,14745]]],[1527003634311,["Re@Re.local",[[-1,14742,"应当是"]],[14745,14745],[14742,14742]]],[1527003636183,["Re@Re.local",[[1,14742,"为txt"]],[14742,14742],[14746,14746]]],[1527003637460,["Re@Re.local",[[-1,14744,"xt"]],[14746,14746],[14744,14744]]],[1527003638141,["Re@Re.local",[[1,14744,"ext"]],[14744,14744],[14747,14747]]],[1527003638891,["Re@Re.local",[[-1,14743,"text"]],[14747,14747],[14743,14743]]],[1527003662093,["Re@Re.local",[[1,14743,"文本文件，以\"+\"代表墙壁，\" \"代表开发性方块。"]],[14743,14743],[14768,14768]]],[1527003662569,["Re@Re.local",[[-1,14767,"。"]],[14768,14768],[14767,14767]]],[1527003662930,["Re@Re.local",[[1,14767,"，"]],[14767,14767],[14768,14768]]],[1527003667422,["Re@Re.local",[[-1,14762,"开发性方块，"]],[14768,14768],[14762,14762]]],[1527003671516,["Re@Re.local",[[1,14762,"开放性方块，:"]],[14762,14762],[14769,14769]]],[1527003672477,["Re@Re.local",[[-1,14768,":"]],[14769,14769],[14768,14768]]],[1527003673444,["Re@Re.local",[[1,14768,"\"s"]],[14768,14768],[14770,14770]]],[1527003674167,["Re@Re.local",[[-1,14769,"s"]],[14770,14770],[14769,14769]]],[1527003679641,["Re@Re.local",[[1,14769,"S\"代表起始位置。"]],[14769,14769],[14778,14778]]],[1527003808827,[null,[[-1,14372,"\n\n\n\n\n"],[1,14377,"到过的地方"],[-1,14409,"都"],[1,14410,"\n"],[-1,14472,"\n"],[1,14473,"用"],[-1,14733,"\n\n"],[1,14735,"唯一"],[1,14778,"\n\n\n\n\n\n\n"]],[14372,14372],[14785,14785]]],[1527003808828,[null,[[1,14372,"\n\n\n\n\n"],[-1,14372,"到过的地方"],[1,14409,"都"],[-1,14409,"\n"],[1,14472,"\n"],[-1,14472,"用"],[1,14733,"\n\n"],[-1,14733,"唯一"],[-1,14778,"\n\n\n\n\n\n\n"]],[14785,14785],[14372,14372]]],[1527003788541,["Re@Re.local",[[1,14778,"图3是maze数据文件的一个例子。迷宫"]],[14778,14778],[14797,14797]]],[1527003788816,["Re@Re.local",[[-1,14795,"迷宫"]],[14797,14797],[14795,14795]]],[1527003799413,["Re@Re.local",[[1,14795,"maze的内部表示时间上是列表的列表"]],[14795,14795],[14813,14813]]],[1527003868834,[null,[[-1,14372,"\n\n\n\n\n"],[1,14377,"到过的地方"],[-1,14409,"都"],[1,14410,"\n"],[-1,14472,"\n"],[1,14473,"用"],[-1,14733,"\n\n"],[1,14735,"唯一"],[1,14813,"\n\n\n\n\n\n\n"]],[14372,14372],[14820,14820]]],[1527003868834,[null,[[1,14372,"\n\n\n\n\n"],[-1,14372,"到过的地方"],[1,14409,"都"],[-1,14409,"\n"],[1,14472,"\n"],[-1,14472,"用"],[1,14733,"\n\n"],[-1,14733,"唯一"],[-1,14813,"\n\n\n\n\n\n\n"]],[14820,14820],[14372,14372]]],[1527003825806,["Re@Re.local",[[1,14808,"由"]],[14808,14808],[14809,14809]]],[1527003829118,["Re@Re.local",[[1,14811,"组成"]],[14811,14811],[14813,14813]]],[1527003835283,["Re@Re.local",[[1,14816,"（a list of lists）。"]],[14816,14816],[14834,14834]]],[1527003841135,["Re@Re.local",[[-1,14817,"a "]],[14819,14819],[14817,14817]]],[1527003857898,["Re@Re.local",[[1,14832,"mazelist实例的每一行都是"]],[14832,14832],[14848,14848]]],[1527003860792,["Re@Re.local",[[-1,14842,"的每一行都是"]],[14848,14848],[14842,14842]]],[1527003868637,["Re@Re.local",[[1,14842,"变量的每一行都是一个"]],[14842,14842],[14852,14852]]],[1527003928819,[null,[[-1,14372,"\n\n\n\n\n"],[1,14377,"到过的地方"],[-1,14409,"都"],[1,14410,"\n"],[-1,14472,"\n"],[1,14473,"用"],[-1,14733,"\n\n"],[1,14735,"唯一"],[1,14852,"\n\n\n\n\n\n\n"]],[14372,14372],[14859,14859]]],[1527003928819,[null,[[1,14372,"\n\n\n\n\n"],[-1,14372,"到过的地方"],[1,14409,"都"],[-1,14409,"\n"],[1,14472,"\n"],[-1,14472,"用"],[1,14733,"\n\n"],[-1,14733,"唯一"],[-1,14852,"\n\n\n\n\n\n\n"]],[14859,14859],[14372,14372]]],[1527003893586,["Re@Re.local",[[1,14852,"列表。二级列表的每个"]],[14852,14852],[14862,14862]]],[1527003902746,["Re@Re.local",[[-1,14859,"的每个"]],[14862,14862],[14859,14859]]],[1527003907957,["Re@Re.local",[[1,14859,"的每个位置都是"]],[14859,14859],[14866,14866]]],[1527003910648,["Re@Re.local",[[-1,14860,"每个位置都是"]],[14866,14866],[14860,14860]]],[1527003916767,["Re@Re.local",[[1,14860,"由上述的字符构成。"]],[14860,14860],[14869,14869]]],[1527003988842,[null,[[-1,14372,"\n\n\n\n\n"],[1,14377,"到过的地方"],[-1,14409,"都"],[1,14410,"\n"],[-1,14472,"\n"],[1,14473,"用"],[-1,14733,"\n\n"],[1,14735,"唯一"],[1,14869,"\n\n\n\n\n\n\n"]],[14372,14372],[14876,14876]]],[1527003988842,[null,[[1,14372,"\n\n\n\n\n"],[-1,14372,"到过的地方"],[1,14409,"都"],[-1,14409,"\n"],[1,14472,"\n"],[-1,14472,"用"],[1,14733,"\n\n"],[-1,14733,"唯一"],[-1,14869,"\n\n\n\n\n\n\n"]],[14876,14876],[14372,14372]]],[1527003953869,["Re@Re.local",[[1,14876,"\n"]],[14870,14870],[14871,14871]]],[1527003954831,["Re@Re.local",[[1,14871,"[ ['+','+','+','+',...,'+','+','+','+','+','+','+'],\n  ['+',' ',' ',' ',...,' ',' ',' ','+',' ',' ',' '],\n  ['+',' ','+',' ',...,'+','+',' ','+',' ','+','+'],\n  ['+',' ','+',' ',...,' ',' ',' ','+',' ','+','+'],\n  ['+','+','+',' ',...,'+','+',' ','+',' ',' ','+'],\n  ['+',' ',' ',' ',...,'+','+',' ',' ',' ',' ','+'],\n  ['+','+','+','+',...,'+','+','+','+','+',' ','+'],\n  ['+',' ',' ',' ',...,'+','+',' ',' ','+',' ','+'],\n  ['+',' ','+','+',...,' ',' ','+',' ',' ',' ','+'],\n  ['+',' ',' ',' ',...,' ',' ','+',' ','+','+','+'],\n  ['+','+','+','+',...,'+','+','+',' ','+','+','+']]"]],[14871,14871],[15453,15453]]],[1527003957333,["Re@Re.local",[[1,15459,"\n"]],[15453,15453],[15454,15454]]],[1527003958334,["Re@Re.local",[[1,15460,"\n"]],[15454,15454],[15455,15455]]],[1527003959726,["Re@Re.local",[[-1,15460,"\n"]],[15455,15455],[15454,15454]]],[1527003962579,["Re@Re.local",[[1,15460,"\n"]],[15454,15454],[15455,15455]]],[1527003965162,["Re@Re.local",[[1,15455,"图"]],[15455,15455],[15456,15456]]],[1527003965553,["Re@Re.local",[[-1,15455,"图"]],[15456,15456],[15455,15455]]],[1527003967276,["Re@Re.local",[[1,15455,"**图3"]],[15455,15455],[15459,15459]]],[1527003968240,["Re@Re.local",[[-1,15457,"图3"]],[15459,15459],[15457,15457]]],[1527003986494,["Re@Re.local",[[1,15457,"图3:Maze数据文件**"]],[15457,15457],[15470,15470]]],[1527003987042,["Re@Re.local",[[-1,15468,"**"]],[15470,15470],[15468,15468]]],[1527003988595,["Re@Re.local",[[1,15468,"的例子"]],[15468,15468],[15471,15471]]],[1527004048844,[null,[[-1,14372,"\n\n\n\n\n"],[1,14377,"到过的地方"],[-1,14409,"都"],[1,14410,"\n"],[-1,14472,"\n"],[1,14473,"用"],[-1,14733,"\n\n"],[1,14735,"唯一"],[1,14869,"\n"],[-1,15454,"\n"],[1,15471,"\n\n\n\n\n\n"]],[14372,14372],[15477,15477]]],[1527004048845,[null,[[1,14372,"\n\n\n\n\n"],[-1,14372,"到过的地方"],[1,14409,"都"],[-1,14409,"\n"],[1,14472,"\n"],[-1,14472,"用"],[1,14733,"\n\n"],[-1,14733,"唯一"],[-1,14869,"\n"],[1,15455,"\n"],[-1,15471,"\n\n\n\n\n\n"]],[15477,15477],[14372,14372]]],[1527003989736,["Re@Re.local",[[1,15471,"**"]],[15471,15471],[15473,15473]]],[1527003993327,["Re@Re.local",[[-1,15468,"的例子**"]],[15473,15473],[15468,15468]]],[1527003993891,["Re@Re.local",[[1,15468,"shil"]],[15468,15468],[15472,15472]]],[1527003994649,["Re@Re.local",[[-1,15468,"shil"]],[15472,15472],[15468,15468]]],[1527003999314,["Re@Re.local",[[1,15468,"施力"]],[15468,15468],[15470,15470]]],[1527004000065,["Re@Re.local",[[-1,15468,"施力"]],[15470,15470],[15468,15468]]],[1527004001199,["Re@Re.local",[[1,15468,"实例"]],[15468,15468],[15470,15470]]],[1527004001772,["Re@Re.local",[[-1,15468,"实例"]],[15470,15470],[15468,15468]]],[1527004005241,["Re@Re.local",[[1,15468,"示例**"]],[15468,15468],[15472,15472]]],[1527004005448,["Re@Re.local",[[1,15478,"\n"]],[15472,15472],[15473,15473]]],[1527004006180,["Re@Re.local",[[1,15479,"\n"]],[15473,15473],[15474,15474]]],[1527004033502,["Re@Re.local",[[1,14869,"对于图三"]],[14869,14869],[14873,14873]]],[1527004034416,["Re@Re.local",[[-1,14872,"三"]],[14873,14873],[14872,14872]]],[1527004038366,["Re@Re.local",[[1,14872,"3所属的大"]],[14872,14872],[14877,14877]]],[1527004038893,["Re@Re.local",[[-1,14874,"属的大"]],[14877,14877],[14874,14874]]],[1527004108922,[null,[[-1,14372,"\n\n\n\n\n"],[1,14377,"到过的地方"],[-1,14409,"都"],[1,14410,"\n"],[-1,14472,"\n"],[1,14473,"用"],[-1,14733,"\n\n"],[1,14735,"唯一"],[1,14874,"\n"],[-1,15459,"\n"],[1,15479,"\n\n\n\n\n\n"]],[14372,14372],[15485,15485]]],[1527004108922,[null,[[1,14372,"\n\n\n\n\n"],[-1,14372,"到过的地方"],[1,14409,"都"],[-1,14409,"\n"],[1,14472,"\n"],[-1,14472,"用"],[1,14733,"\n\n"],[-1,14733,"唯一"],[-1,14874,"\n"],[1,15460,"\n"],[-1,15479,"\n\n\n\n\n\n"]],[15485,15485],[14372,14372]]],[1527004060446,["Re@Re.local",[[1,14874,"示的数据文件，在Python中的内部表示实际上是"]],[14874,14874],[14898,14898]]],[1527004061524,["Re@Re.local",[[-1,14894,"实际上是"]],[14898,14898],[14894,14894]]],[1527004062170,["Re@Re.local",[[1,14894,"为："]],[14894,14894],[14896,14896]]],[1527004065197,["Re@Re.local",[[-1,15482,"**图3:Maze数据文件示例**"]],[15482,15499],[15482,15482]]],[1527004081202,["Re@Re.local",[[1,15482,"++++++++++++++++++++++\n+   +   ++ ++     +\n+ +   +       +++ + ++\n+ + +  ++  ++++   + ++\n+++ ++++++    +++ +  +\n+          ++  ++    +\n+++++ ++++++   +++++ +\n+     +   +++++++  + +\n+ +++++++      S +   +\n+                + +++\n++++++++++++++++++ +++"]],[15482,15482],[15731,15731]]],[1527004083811,["Re@Re.local",[[1,15482,"\n"]],[15481,15481],[15482,15482]]],[1527004085061,["Re@Re.local",[[1,15483,"\n"]],[15481,15481],[15482,15482]]],[1527004096232,["Re@Re.local",[[1,15482,"drawMaze方法使用内部"]],[15482,15482],[15496,15496]]],[1527004097794,["Re@Re.local",[[-1,15494,"内部"]],[15496,15496],[15494,15494]]],[1527004104381,["Re@Re.local",[[1,15494,"上述内部表示来绘制"]],[15494,15494],[15503,15503]]],[1527004105561,["Re@Re.local",[[-1,15500,"来绘制"]],[15503,15503],[15500,15500]]],[1527004108561,["Re@Re.local",[[1,15500,"在屏幕"]],[15500,15500],[15503,15503]]],[1527004168858,[null,[[-1,14372,"\n\n\n\n\n"],[1,14377,"到过的地方"],[-1,14409,"都"],[1,14410,"\n"],[-1,14472,"\n"],[1,14473,"用"],[-1,14733,"\n\n"],[1,14735,"唯一"],[1,14896,"\n"],[-1,15481,"\n"],[-1,15754,""],[1,15754,"\n\n\n\n\n\n"]],[14372,14372],[15760,15760]]],[1527004168858,[null,[[1,14372,"\n\n\n\n\n"],[-1,14372,"到过的地方"],[1,14409,"都"],[-1,14409,"\n"],[1,14472,"\n"],[-1,14472,"用"],[1,14733,"\n\n"],[-1,14733,"唯一"],[-1,14896,"\n"],[1,15482,"\n"],[1,15754,""],[-1,15754,"\n\n\n\n\n\n"]],[15760,15760],[14372,14372]]],[1527004116077,["Re@Re.local",[[1,15504,"绘制迷宫的初始"]],[15504,15504],[15511,15511]]],[1527004132875,["Re@Re.local",[[-1,15504,"绘制迷宫的初始"]],[15511,15511],[15504,15504]]],[1527004137014,["Re@Re.local",[[1,15504,"对迷宫进行初始绘制。"]],[15504,15504],[15514,15514]]],[1527004140646,["Re@Re.local",[[1,15767,"**同样"]],[15767,15767],[15771,15771]]],[1527004141283,["Re@Re.local",[[-1,15769,"同样"]],[15771,15771],[15769,15769]]],[1527004147164,["Re@Re.local",[[1,15769,"图3:Maze数据文件的"]],[15769,15769],[15781,15781]]],[1527004147260,["Re@Re.local",[[-1,15780,"的"]],[15781,15781],[15780,15780]]],[1527004151358,["Re@Re.local",[[1,15780,"示例**"]],[15780,15780],[15784,15784]]],[1527004151588,["Re@Re.local",[[1,15790,"\n"]],[15784,15784],[15785,15785]]],[1527004151780,["Re@Re.local",[[1,15791,"\n"]],[15785,15785],[15786,15786]]],[1527004155188,["Re@Re.local",[[1,15786,"upa"]],[15786,15786],[15789,15789]]],[1527004155751,["Re@Re.local",[[-1,15788,"a"]],[15789,15789],[15788,15788]]],[1527004167565,["Re@Re.local",[[1,15788,"datePosition方法，如代码5所示使用了相同的内部"]],[15788,15788],[15817,15817]]],[1527004228894,[null,[[-1,14372,"\n\n\n\n\n"],[1,14377,"到过的地方"],[-1,14409,"都"],[1,14410,"\n"],[-1,14472,"\n"],[1,14473,"用"],[-1,14733,"\n\n"],[1,14735,"唯一"],[1,14896,"\n"],[-1,15481,"\n"],[-1,15503,"\n"],[1,15504,"上"],[1,15514,"\n"],[-1,15768,"同"],[1,15817,"\n\n\n\n\n\n"]],[14372,14372],[15823,15823]]],[1527004228894,[null,[[1,14372,"\n\n\n\n\n"],[-1,14372,"到过的地方"],[1,14409,"都"],[-1,14409,"\n"],[1,14472,"\n"],[-1,14472,"用"],[1,14733,"\n\n"],[-1,14733,"唯一"],[-1,14896,"\n"],[1,15482,"\n"],[1,15503,"\n"],[-1,15503,"上"],[-1,15514,"\n"],[1,15769,"同"],[-1,15817,"\n\n\n\n\n\n"]],[15823,15823],[14372,14372]]],[1527004227484,["Re@Re.local",[[1,15817,"表示来确定海龟是否遭遇"]],[15817,15817],[15828,15828]]],[1527004227823,["Re@Re.local",[[-1,15826,"遭遇"]],[15828,15828],[15826,15826]]],[1527004289913,[null,[[-1,14372,"\n\n\n\n\n"],[1,14377,"到过的地方"],[-1,14409,"都"],[1,14410,"\n"],[-1,14472,"\n"],[1,14473,"用"],[-1,14733,"\n\n"],[1,14735,"唯一"],[1,14896,"\n"],[-1,15481,"\n"],[-1,15503,"\n"],[1,15504,"上"],[1,15514,"\n"],[-1,15768,"同"],[1,15826,"\n\n\n\n\n\n"]],[14372,14372],[15832,15832]]],[1527004289913,[null,[[1,14372,"\n\n\n\n\n"],[-1,14372,"到过的地方"],[1,14409,"都"],[-1,14409,"\n"],[1,14472,"\n"],[-1,14472,"用"],[1,14733,"\n\n"],[-1,14733,"唯一"],[-1,14896,"\n"],[1,15482,"\n"],[1,15503,"\n"],[-1,15503,"上"],[-1,15514,"\n"],[1,15769,"同"],[-1,15826,"\n\n\n\n\n\n"]],[15832,15832],[14372,14372]]],[1527004238051,["Re@Re.local",[[1,15826,"撞墙。它也用来更新内部的"]],[15826,15826],[15838,15838]]],[1527004241483,["Re@Re.local",[[-1,15835,"内部的"]],[15838,15838],[15835,15835]]],[1527004287559,["Re@Re.local",[[1,15835,"该内部表示，即使用\".\"或者\"-\"来分别表示已访问过的方块以及"]],[15835,15835],[15866,15866]]],[1527004349940,[null,[[-1,14372,"\n\n\n\n\n"],[1,14377,"到过的地方"],[-1,14409,"都"],[1,14410,"\n"],[-1,14472,"\n"],[1,14473,"用"],[-1,14733,"\n\n"],[1,14735,"唯一"],[1,14896,"\n"],[-1,15481,"\n"],[-1,15503,"\n"],[1,15504,"上"],[1,15514,"\n"],[-1,15768,"同"],[1,15866,"\n\n\n\n\n\n"]],[14372,14372],[15872,15872]]],[1527004349941,[null,[[1,14372,"\n\n\n\n\n"],[-1,14372,"到过的地方"],[1,14409,"都"],[-1,14409,"\n"],[1,14472,"\n"],[-1,14472,"用"],[1,14733,"\n\n"],[-1,14733,"唯一"],[-1,14896,"\n"],[1,15482,"\n"],[1,15503,"\n"],[-1,15503,"上"],[-1,15514,"\n"],[1,15769,"同"],[-1,15866,"\n\n\n\n\n\n"]],[15872,15872],[14372,14372]]],[1527004310082,["Re@Re.local",[[1,15866,"死胡同。此外，updatePosition方法使用了两个辅助函数"]],[15866,15866],[15898,15898]]],[1527004310226,["Re@Re.local",[[-1,15897,"数"]],[15898,15898],[15897,15897]]],[1527004310979,["Re@Re.local",[[1,15897,"方法"]],[15897,15897],[15899,15899]]],[1527004311558,["Re@Re.local",[[-1,15896,"函方法"]],[15899,15899],[15896,15896]]],[1527004321207,["Re@Re.local",[[1,15896,"方法，moveTurtle和dropBreadCrumb来更新"]],[15896,15896],[15927,15927]]],[1527004322755,["Re@Re.local",[[-1,15925,"更新"]],[15927,15927],[15925,15925]]],[1527004323384,["Re@Re.local",[[1,15925,"在"]],[15925,15925],[15926,15926]]],[1527004324436,["Re@Re.local",[[-1,15924,"来在"]],[15926,15926],[15924,15924]]],[1527004325004,["Re@Re.local",[[1,15924,"在"]],[15924,15924],[15925,15925]]],[1527004325464,["Re@Re.local",[[-1,15924,"在"]],[15925,15925],[15924,15924]]],[1527004329146,["Re@Re.local",[[1,15924,"来在屏幕上更新试图。"]],[15924,15924],[15934,15934]]],[1527004329490,["Re@Re.local",[[1,15940,"\n"]],[15934,15934],[15935,15935]]],[1527004329845,["Re@Re.local",[[-1,15940,"\n"]],[15935,15935],[15934,15934]]],[1527004330441,["Re@Re.local",[[-1,15931,"试图。"]],[15934,15934],[15931,15931]]],[1527004333084,["Re@Re.local",[[1,15931,"视图。"]],[15931,15931],[15934,15934]]],[1527004333353,["Re@Re.local",[[1,15940,"\n"]],[15934,15934],[15935,15935]]],[1527004333599,["Re@Re.local",[[1,15941,"\n"]],[15935,15935],[15936,15936]]],[1527004335354,["Re@Re.local",[[1,15936,"代码"]],[15936,15936],[15938,15938]]],[1527004335896,["Re@Re.local",[[-1,15936,"代码"]],[15938,15938],[15936,15936]]],[1527004349078,["Re@Re.local",[[1,15936,"最后，isExit方法使用海龟当前的位置来测试是否为"]],[15936,15936],[15962,15962]]],[1527004409911,[null,[[-1,14372,"\n\n\n\n\n"],[1,14377,"到过的地方"],[-1,14409,"都"],[1,14410,"\n"],[-1,14472,"\n"],[1,14473,"用"],[-1,14733,"\n\n"],[1,14735,"唯一"],[1,14896,"\n"],[-1,15481,"\n"],[-1,15503,"\n"],[1,15504,"上"],[1,15514,"\n"],[-1,15768,"同"],[1,15769,""],[-1,15962,""],[1,15962,"\n\n\n\n\n"]],[14372,14372],[15967,15967]]],[1527004409911,[null,[[1,14372,"\n\n\n\n\n"],[-1,14372,"到过的地方"],[1,14409,"都"],[-1,14409,"\n"],[1,14472,"\n"],[-1,14472,"用"],[1,14733,"\n\n"],[-1,14733,"唯一"],[-1,14896,"\n"],[1,15482,"\n"],[1,15503,"\n"],[-1,15503,"上"],[-1,15514,"\n"],[1,15769,"同"],[-1,15769,""],[1,15962,""],[-1,15962,"\n\n\n\n\n"]],[15967,15967],[14372,14372]]],[1527004391049,["Re@Re.local",[[1,15962,"出口。出口极为0行、"]],[15962,15962],[15972,15972]]],[1527004392683,["Re@Re.local",[[-1,15971,"、"]],[15972,15972],[15971,15971]]],[1527004397934,["Re@Re.local",[[1,15971,"或者0列或者底部"]],[15971,15971],[15979,15979]]],[1527004398189,["Re@Re.local",[[-1,15977,"底部"]],[15979,15979],[15977,15977]]],[1527004399747,["Re@Re.local",[[1,15977,"最底部的"]],[15977,15977],[15981,15981]]],[1527004401530,["Re@Re.local",[[-1,15978,"底部的"]],[15981,15981],[15978,15978]]],[1527004409011,["Re@Re.local",[[1,15978,"右侧的列或者最底部的行（"]],[15978,15978],[15990,15990]]],[1527004469930,[null,[[-1,14372,"\n\n\n\n\n"],[1,14377,"到过的地方"],[-1,14409,"都"],[1,14410,"\n"],[-1,14472,"\n"],[1,14473,"用"],[-1,14733,"\n\n"],[1,14735,"唯一"],[1,14896,"\n"],[-1,15481,"\n"],[-1,15503,"\n"],[1,15504,"上"],[1,15514,"\n"],[-1,15768,"同"],[1,15769,""],[-1,15990,""],[1,15990,"\n\n\n\n\n"]],[14372,14372],[15995,15995]]],[1527004469930,[null,[[1,14372,"\n\n\n\n\n"],[-1,14372,"到过的地方"],[1,14409,"都"],[-1,14409,"\n"],[1,14472,"\n"],[-1,14472,"用"],[1,14733,"\n\n"],[-1,14733,"唯一"],[-1,14896,"\n"],[1,15482,"\n"],[1,15503,"\n"],[-1,15503,"上"],[-1,15514,"\n"],[1,15769,"同"],[-1,15769,""],[1,15990,""],[-1,15990,"\n\n\n\n\n"]],[15995,15995],[14372,14372]]],[1527004410086,["Re@Re.local",[[1,15990,"便于"]],[15990,15990],[15992,15992]]],[1527004410834,["Re@Re.local",[[-1,15990,"便于"]],[15992,15992],[15990,15990]]],[1527004415022,["Re@Re.local",[[1,15990,"迷宫最边缘）"]],[15990,15990],[15996,15996]]],[1527004421893,["Re@Re.local",[[-1,15989,"（迷宫最边缘）"]],[15996,15996],[15989,15989]]],[1527004423736,["Re@Re.local",[[1,15989,"。"]],[15989,15989],[15990,15990]]],[1527004424152,["Re@Re.local",[[1,15996,"\n"]],[15990,15990],[15991,15991]]],[1527004424365,["Re@Re.local",[[1,15997,"\n"]],[15991,15991],[15992,15992]]],[1527004425436,["Re@Re.local",[[1,15992,"代码"]],[15992,15992],[15994,15994]]],[1527004426103,["Re@Re.local",[[-1,15992,"代码"]],[15994,15994],[15992,15992]]],[1527004428388,["Re@Re.local",[[1,15992,"**代码4**"]],[15992,15992],[15999,15999]]],[1527004428632,["Re@Re.local",[[1,16005,"\n"]],[15999,15999],[16000,16000]]],[1527004431182,["Re@Re.local",[[1,16000,"```Python"]],[16000,16000],[16009,16009]]],[1527004431395,["Re@Re.local",[[1,16015,"\n"]],[16009,16009],[16010,16010]]],[1527004431580,["Re@Re.local",[[1,16016,"\n"]],[16010,16010],[16011,16011]]],[1527004432442,["Re@Re.local",[[-1,16016,"\n"]],[16011,16011],[16010,16010]]],[1527004448375,["Re@Re.local",[[1,16010,"class Maze:\n    def __init__(self,mazeFileName):\n        rowsInMaze = 0\n        columnsInMaze = 0\n        self.mazelist = []\n        mazeFile = open(mazeFileName,'r')\n        rowsInMaze = 0\n        for line in mazeFile:\n            rowList = []\n            col = 0\n            for ch in line[:-1]:\n                rowList.append(ch)\n                if ch == 'S':\n                    self.startRow = rowsInMaze\n                    self.startCol = col\n                col = col + 1\n            rowsInMaze = rowsInMaze + 1\n            self.mazelist.append(rowList)\n            columnsInMaze = len(rowList)\n\n        self.rowsInMaze = rowsInMaze\n        self.columnsInMaze = columnsInMaze\n        self.xTranslate = -columnsInMaze/2\n        self.yTranslate = rowsInMaze/2\n        self.t = Turtle(shape='turtle')\n        setup(width=600,height=600)\n        setworldcoordinates(-(columnsInMaze-1)/2-.5,\n                            -(rowsInMaze-1)/2-.5,\n                            (columnsInMaze-1)/2+.5,\n                            (rowsInMaze-1)/2+.5)```"]],[16010,16010],[17058,17058]]],[1527004451196,["Re@Re.local",[[1,17055,"\n"]],[17055,17055],[17056,17056]]],[1527004453590,["Re@Re.local",[[1,17065,"\n"]],[17059,17059],[17060,17060]]],[1527004454905,["Re@Re.local",[[1,17060,"代码"]],[17060,17060],[17062,17062]]],[1527004455191,["Re@Re.local",[[-1,17060,"代码"]],[17062,17062],[17060,17060]]],[1527004457383,["Re@Re.local",[[1,17060,"**代码5**"]],[17060,17060],[17067,17067]]],[1527004457606,["Re@Re.local",[[1,17073,"\n"]],[17067,17067],[17068,17068]]],[1527004460806,["Re@Re.local",[[1,17068,"```Python"]],[17068,17068],[17077,17077]]],[1527004461007,["Re@Re.local",[[1,17083,"\n"]],[17077,17077],[17078,17078]]],[1527004529931,[null,[[-1,14372,"\n\n\n\n\n"],[1,14377,"到过的地方"],[-1,14409,"都"],[1,14410,"\n"],[-1,14472,"\n"],[1,14473,"用"],[-1,14733,"\n\n"],[1,14735,"唯一"],[1,14896,"\n"],[-1,15481,"\n"],[-1,15503,"\n"],[1,15504,"上"],[1,15514,"\n"],[-1,15768,"同"],[1,15769,""],[-1,17077,""],[1,17077,"\n\n\n\n"]],[14372,14372],[17081,17081]]],[1527004529931,[null,[[1,14372,"\n\n\n\n\n"],[-1,14372,"到过的地方"],[1,14409,"都"],[-1,14409,"\n"],[1,14472,"\n"],[-1,14472,"用"],[1,14733,"\n\n"],[-1,14733,"唯一"],[-1,14896,"\n"],[1,15482,"\n"],[1,15503,"\n"],[-1,15503,"上"],[-1,15514,"\n"],[1,15769,"同"],[-1,15769,""],[1,17077,""],[-1,17077,"\n\n\n\n"]],[17081,17081],[14372,14372]]],[1527004472313,["Re@Re.local",[[1,17078,"def drawMaze(self):\n    for y in range(self.rowsInMaze):\n        for x in range(self.columnsInMaze):\n            if self.mazelist[y][x] == OBSTACLE:\n                self.drawCenteredBox(x+self.xTranslate,\n                                     -y+self.yTranslate,\n                                     'tan')\n    self.t.color('black','blue')\n\ndef drawCenteredBox(self,x,y,color):\n    tracer(0)\n    self.t.up()\n    self.t.goto(x-.5,y-.5)\n    self.t.color('black',color)\n    self.t.setheading(90)\n    self.t.down()\n    self.t.begin_fill()\n    for i in range(4):\n        self.t.forward(1)\n        self.t.right(90)\n    self.t.end_fill()\n    update()\n    tracer(1)\n\ndef moveTurtle(self,x,y):\n    self.t.up()\n    self.t.setheading(self.t.towards(x+self.xTranslate,\n                                     -y+self.yTranslate))\n    self.t.goto(x+self.xTranslate,-y+self.yTranslate)\n\ndef dropBreadcrumb(self,color):\n    self.t.dot(color)\n\ndef updatePosition(self,row,col,val=None):\n    if val:\n        self.mazelist[row][col] = val\n    self.moveTurtle(col,row)\n\n    if val == PART_OF_PATH:\n        color = 'green'\n    elif val == OBSTACLE:\n        color = 'red'\n    elif val == TRIED:\n        color = 'black'\n    elif val == DEAD_END:\n        color = 'red'\n    else:\n        color = None\n\n    if color:\n        self.dropBreadcrumb(color)"]],[17078,17078],[18400,18400]]],[1527004472669,["Re@Re.local",[[1,18406,"\n"]],[18400,18400],[18401,18401]]],[1527004473778,["Re@Re.local",[[1,18401,"```"]],[18401,18401],[18404,18404]]],[1527004474143,["Re@Re.local",[[1,18410,"\n"]],[18404,18404],[18405,18405]]],[1527004478358,["Re@Re.local",[[1,18405,"**代码6**"]],[18405,18405],[18412,18412]]],[1527004478593,["Re@Re.local",[[1,18418,"\n"]],[18412,18412],[18413,18413]]],[1527004481690,["Re@Re.local",[[1,18413,"```Python"]],[18413,18413],[18422,18422]]],[1527004482068,["Re@Re.local",[[1,18428,"\n"]],[18422,18422],[18423,18423]]],[1527004487740,["Re@Re.local",[[1,18423,"def isExit(self,row,col):\n     return (row == 0 or\n             row == self.rowsInMaze-1 or\n             col == 0 or\n             col == self.columnsInMaze-1 )\n\ndef __getitem__(self,idx):\n     return self.mazelist[idx]"]],[18423,18423],[18641,18641]]],[1527004487985,["Re@Re.local",[[1,18647,"\n"]],[18641,18641],[18642,18642]]],[1527004488781,["Re@Re.local",[[1,18642,"```"]],[18642,18642],[18645,18645]]],[1527004489143,["Re@Re.local",[[1,18651,"\n"]],[18645,18645],[18646,18646]]],[1527004492623,["Re@Re.local",[[1,18646,"弯沉"]],[18646,18646],[18648,18648]]],[1527004492991,["Re@Re.local",[[-1,18646,"弯沉"]],[18648,18648],[18646,18646]]],[1527004503884,["Re@Re.local",[[1,18646,"完整代码如可执行代码1所示。该程序使用了maze2.txt为"]],[18646,18646],[18676,18676]]],[1527004504012,["Re@Re.local",[[-1,18675,"为"]],[18676,18676],[18675,18675]]],[1527004508854,["Re@Re.local",[[1,18666,"下图"]],[18666,18666],[18668,18668]]],[1527004509257,["Re@Re.local",[[-1,18666,"下图"]],[18668,18668],[18666,18666]]],[1527004511872,["Re@Re.local",[[1,18666,"如下所示的"]],[18666,18666],[18671,18671]]],[1527004515214,["Re@Re.local",[[1,18680,"文件。"]],[18680,18680],[18683,18683]]],[1527004515787,["Re@Re.local",[[-1,18682,"。"]],[18683,18683],[18682,18682]]],[1527004516374,["Re@Re.local",[[1,18682,"。"]],[18682,18682],[18683,18683]]],[1527004517311,["Re@Re.local",[[-1,18680,"文件。"]],[18683,18683],[18680,18680]]],[1527004518512,["Re@Re.local",[[1,18680,"作为"]],[18680,18680],[18682,18682]]],[1527004519027,["Re@Re.local",[[-1,18680,"作为"]],[18682,18682],[18680,18680]]],[1527004521962,["Re@Re.local",[[1,18680,"数据文件。"]],[18680,18680],[18685,18685]]],[1527004589949,[null,[[-1,14372,"\n\n\n\n\n"],[1,14377,"到过的地方"],[-1,14409,"都"],[1,14410,"\n"],[-1,14472,"\n"],[1,14473,"用"],[-1,14733,"\n\n"],[1,14735,"唯一"],[1,14896,"\n"],[-1,15481,"\n"],[-1,15503,"\n"],[1,15504,"上"],[1,15514,"\n"],[-1,15768,"同"],[1,15769,""],[1,18687,"\n\n\n\n"]],[14372,14372],[18691,18691]]],[1527004589950,[null,[[1,14372,"\n\n\n\n\n"],[-1,14372,"到过的地方"],[1,14409,"都"],[-1,14409,"\n"],[1,14472,"\n"],[-1,14472,"用"],[1,14733,"\n\n"],[-1,14733,"唯一"],[-1,14896,"\n"],[1,15482,"\n"],[1,15503,"\n"],[-1,15503,"上"],[-1,15514,"\n"],[1,15769,"同"],[-1,15769,""],[-1,18687,"\n\n\n\n"]],[18691,18691],[14372,14372]]],[1527004533617,["Re@Re.local",[[1,18685,"逐一，"]],[18685,18685],[18688,18688]]],[1527004534518,["Re@Re.local",[[-1,18685,"逐一，"]],[18688,18688],[18685,18685]]],[1527004537745,["Re@Re.local",[[1,18685,"注意，它是一个"]],[18685,18685],[18692,18692]]],[1527004555243,["Re@Re.local",[[-1,18685,"注意，它是一个"]],[18692,18692],[18685,18685]]],[1527004558408,["Re@Re.local",[[1,18685,"注意，由于"]],[18685,18685],[18690,18690]]],[1527004559025,["Re@Re.local",[[-1,18687,"，由于"]],[18690,18690],[18687,18687]]],[1527004569131,["Re@Re.local",[[1,18687,"到由于出口和海龟起始位置很近，因此它"]],[18687,18687],[18705,18705]]],[1527004569752,["Re@Re.local",[[-1,18704,"它"]],[18705,18705],[18704,18704]]],[1527004573548,["Re@Re.local",[[1,18704,"本例要简单的多。"]],[18704,18704],[18712,18712]]],[1527004574215,["Re@Re.local",[[-1,18709,"的多。"]],[18712,18712],[18709,18709]]],[1527004578083,["Re@Re.local",[[1,18709,"得的"]],[18709,18709],[18711,18711]]],[1527004578278,["Re@Re.local",[[-1,18710,"的"]],[18711,18711],[18710,18710]]],[1527004579221,["Re@Re.local",[[1,18710,"多。"]],[18710,18710],[18712,18712]]],[1527004579476,["Re@Re.local",[[1,18718,"\n"]],[18712,18712],[18713,18713]]],[1527004579650,["Re@Re.local",[[1,18719,"\n"]],[18713,18713],[18714,18714]]],[1527004649945,[null,[[-1,14372,"\n\n\n\n\n"],[1,14377,"到过的地方"],[-1,14409,"都"],[1,14410,"\n"],[-1,14472,"\n"],[1,14473,"用"],[-1,14733,"\n\n"],[1,14735,"唯一"],[1,14896,"\n"],[-1,15481,"\n"],[-1,15503,"\n"],[1,15504,"上"],[1,15514,"\n"],[-1,15768,"同"],[1,15769,""],[1,18716,"\n\n\n\n"]],[14372,14372],[18720,18720]]],[1527004649945,[null,[[1,14372,"\n\n\n\n\n"],[-1,14372,"到过的地方"],[1,14409,"都"],[-1,14409,"\n"],[1,14472,"\n"],[-1,14472,"用"],[1,14733,"\n\n"],[-1,14733,"唯一"],[-1,14896,"\n"],[1,15482,"\n"],[1,15503,"\n"],[-1,15503,"上"],[-1,15514,"\n"],[1,15769,"同"],[-1,15769,""],[-1,18716,"\n\n\n\n"]],[18720,18720],[14372,14372]]],[1527004599384,["Re@Re.local",[[1,18714,"**可执行代码1**"]],[18714,18714],[18724,18724]]],[1527004599637,["Re@Re.local",[[1,18730,"\n"]],[18724,18724],[18725,18725]]],[1527004601637,["Re@Re.local",[[1,18725,"```Python"]],[18725,18725],[18734,18734]]],[1527004601836,["Re@Re.local",[[1,18740,"\n"]],[18734,18734],[18735,18735]]],[1527004607448,["Re@Re.local",[[1,18735,"import turtle\n\nPART_OF_PATH = 'O'\nTRIED = '.'\nOBSTACLE = '+'\nDEAD_END = '-'\n\nclass Maze:\n    def __init__(self,mazeFileName):\n        rowsInMaze = 0\n        columnsInMaze = 0\n        self.mazelist = []\n        mazeFile = open(mazeFileName,'r')\n        rowsInMaze = 0\n        for line in mazeFile:\n            rowList = []\n            col = 0\n            for ch in line[:-1]:\n                rowList.append(ch)\n                if ch == 'S':\n                    self.startRow = rowsInMaze\n                    self.startCol = col\n                col = col + 1\n            rowsInMaze = rowsInMaze + 1\n            self.mazelist.append(rowList)\n            columnsInMaze = len(rowList)\n\n        self.rowsInMaze = rowsInMaze\n        self.columnsInMaze = columnsInMaze\n        self.xTranslate = -columnsInMaze/2\n        self.yTranslate = rowsInMaze/2\n        self.t = turtle.Turtle()\n        self.t.shape('turtle')\n        self.wn = turtle.Screen()\n        self.wn.setworldcoordinates(-(columnsInMaze-1)/2-.5,-(rowsInMaze-1)/2-.5,(columnsInMaze-1)/2+.5,(rowsInMaze-1)/2+.5)\n\n    def drawMaze(self):\n        self.t.speed(10)\n        self.wn.tracer(0)\n        for y in range(self.rowsInMaze):\n            for x in range(self.columnsInMaze):\n                if self.mazelist[y][x] == OBSTACLE:\n                    self.drawCenteredBox(x+self.xTranslate,-y+self.yTranslate,'orange')\n        self.t.color('black')\n        self.t.fillcolor('blue')\n        self.wn.update()\n        self.wn.tracer(1)\n\n    def drawCenteredBox(self,x,y,color):\n        self.t.up()\n        self.t.goto(x-.5,y-.5)\n        self.t.color(color)\n        self.t.fillcolor(color)\n        self.t.setheading(90)\n        self.t.down()\n        self.t.begin_fill()\n        for i in range(4):\n            self.t.forward(1)\n            self.t.right(90)\n        self.t.end_fill()\n\n    def moveTurtle(self,x,y):\n        self.t.up()\n        self.t.setheading(self.t.towards(x+self.xTranslate,-y+self.yTranslate))\n        self.t.goto(x+self.xTranslate,-y+self.yTranslate)\n\n    def dropBreadcrumb(self,color):\n        self.t.dot(10,color)\n\n    def updatePosition(self,row,col,val=None):\n        if val:\n            self.mazelist[row][col] = val\n        self.moveTurtle(col,row)\n\n        if val == PART_OF_PATH:\n            color = 'green'\n        elif val == OBSTACLE:\n            color = 'red'\n        elif val == TRIED:\n            color = 'black'\n        elif val == DEAD_END:\n            color = 'red'\n        else:\n            color = None\n\n        if color:\n            self.dropBreadcrumb(color)\n\n    def isExit(self,row,col):\n        return (row == 0 or\n                row == self.rowsInMaze-1 or\n                col == 0 or\n                col == self.columnsInMaze-1 )\n\n    def __getitem__(self,idx):\n        return self.mazelist[idx]\n\n\ndef searchFrom(maze, startRow, startColumn):\n    # try each of four directions from this point until we find a way out.\n    # base Case return values:\n    #  1. We have run into an obstacle, return false\n    maze.updatePosition(startRow, startColumn)\n    if maze[startRow][startColumn] == OBSTACLE :\n        return False\n    #  2. We have found a square that has already been explored\n    if maze[startRow][startColumn] == TRIED or maze[startRow][startColumn] == DEAD_END:\n        return False\n    # 3. We have found an outside edge not occupied by an obstacle\n    if maze.isExit(startRow,startColumn):\n        maze.updatePosition(startRow, startColumn, PART_OF_PATH)\n        return True\n    maze.updatePosition(startRow, startColumn, TRIED)\n    # Otherwise, use logical short circuiting to try each direction\n    # in turn (if needed)\n    found = searchFrom(maze, startRow-1, startColumn) or \\\n            searchFrom(maze, startRow+1, startColumn) or \\\n            searchFrom(maze, startRow, startColumn-1) or \\\n            searchFrom(maze, startRow, startColumn+1)\n    if found:\n        maze.updatePosition(startRow, startColumn, PART_OF_PATH)\n    else:\n        maze.updatePosition(startRow, startColumn, DEAD_END)\n    return found\n\n\nmyMaze = Maze('maze2.txt')\nmyMaze.drawMaze()\nmyMaze.updatePosition(myMaze.startRow,myMaze.startCol)\n\nsearchFrom(myMaze, myMaze.startRow, myMaze.startCol)\n```"]],[18735,18735],[22922,22922]]],[1527004608535,["Re@Re.local",[[1,22928,"\n"]],[22922,22922],[22923,22923]]],[1527004649654,["Re@Re.local",[[1,22923,"## 4.12 动态规划"]],[22923,22923],[22935,22935]]],[1527004709943,[null,[[-1,14372,"\n\n\n\n\n"],[1,14377,"到过的地方"],[-1,14409,"都"],[1,14410,"\n"],[-1,14472,"\n"],[1,14473,"用"],[-1,14733,"\n\n"],[1,14735,"唯一"],[1,14896,"\n"],[-1,15481,"\n"],[-1,15503,"\n"],[1,15504,"上"],[1,15514,"\n"],[-1,15768,"同"],[1,15769,""],[1,22937,"\n\n\n\n"]],[14372,14372],[22941,22941]]],[1527004709943,[null,[[1,14372,"\n\n\n\n\n"],[-1,14372,"到过的地方"],[1,14409,"都"],[-1,14409,"\n"],[1,14472,"\n"],[-1,14472,"用"],[1,14733,"\n\n"],[-1,14733,"唯一"],[-1,14896,"\n"],[1,15482,"\n"],[1,15503,"\n"],[-1,15503,"上"],[-1,15514,"\n"],[1,15769,"同"],[-1,15769,""],[-1,22937,"\n\n\n\n"]],[22941,22941],[14372,14372]]],[1527004650590,["Re@Re.local",[[1,22936,"##"]],[22936,22936],[22938,22938]]],[1527004650735,["Re@Re.local",[[1,22944,"\n"]],[22938,22938],[22939,22939]]],[1527004678340,["Re@Re.local",[[1,22939,"x"]],[22941,22941],[22940,22940]]],[1527004678550,["Re@Re.local",[[-1,22939,"x"]],[22940,22940],[22939,22939]]],[1527004678846,["Re@Re.local",[[1,22945,"\n"]],[22939,22939],[22940,22940]]],[1527004689640,["Re@Re.local",[[1,22940,"计算机科学中的很多程序都是为了是"]],[22940,22940],[22956,22956]]],[1527004689754,["Re@Re.local",[[-1,22955,"是"]],[22956,22956],[22955,22955]]],[1527004697366,["Re@Re.local",[[1,22955,"实现优化而"]],[22955,22955],[22960,22960]]],[1527004697677,["Re@Re.local",[[-1,22959,"而"]],[22960,22960],[22959,22959]]],[1527004704104,["Re@Re.local",[[1,22959,"。比如说，球"]],[22959,22959],[22965,22965]]],[1527004704519,["Re@Re.local",[[-1,22964,"球"]],[22965,22965],[22964,22964]]],[1527004707274,["Re@Re.local",[[1,22964,"求出亮点之间"]],[22964,22964],[22970,22970]]],[1527004708096,["Re@Re.local",[[-1,22966,"亮点之间"]],[22970,22970],[22966,22966]]],[1527004770011,[null,[[-1,14372,"\n\n\n\n\n"],[1,14377,"到过的地方"],[-1,14409,"都"],[1,14410,"\n"],[-1,14472,"\n"],[1,14473,"用"],[-1,14733,"\n\n"],[1,14735,"唯一"],[1,14896,"\n"],[-1,15481,"\n"],[-1,15503,"\n"],[1,15504,"上"],[1,15514,"\n"],[-1,15768,"同"],[1,15769,""],[-1,22935,"\n"],[1,22936," "],[1,22967,"\n\n\n\n\n"]],[14372,14372],[22972,22972]]],[1527004770011,[null,[[1,14372,"\n\n\n\n\n"],[-1,14372,"到过的地方"],[1,14409,"都"],[-1,14409,"\n"],[1,14472,"\n"],[-1,14472,"用"],[1,14733,"\n\n"],[-1,14733,"唯一"],[-1,14896,"\n"],[1,15482,"\n"],[1,15503,"\n"],[-1,15503,"上"],[-1,15514,"\n"],[1,15769,"同"],[-1,15769,""],[1,22935,"\n"],[-1,22935," "],[-1,22967,"\n\n\n\n\n"]],[22972,22972],[14372,14372]]],[1527004711813,["Re@Re.local",[[1,22968,"之间的最小"]],[22968,22968],[22973,22973]]],[1527004711946,["Re@Re.local",[[-1,22972,"小"]],[22973,22973],[22972,22972]]],[1527004721710,["Re@Re.local",[[1,22972,"短路径，给出以"]],[22972,22972],[22979,22979]]],[1527004721799,["Re@Re.local",[[-1,22978,"以"]],[22979,22979],[22978,22978]]],[1527004748862,["Re@Re.local",[[1,22978,"一组数据点的最佳拟合曲线，求出满足一定条件的最小"]],[22978,22978],[23002,23002]]],[1527004750076,["Re@Re.local",[[-1,23000,"最小"]],[23002,23002],[23000,23000]]],[1527004761698,["Re@Re.local",[[1,23000,"最小对象集。"]],[23000,23000],[23006,23006]]],[1527004767654,["Re@Re.local",[[-1,23000,"最小"]],[23002,23002],[23000,23000]]],[1527004769275,["Re@Re.local",[[1,23002,"的"]],[23002,23002],[23003,23003]]],[1527004829960,[null,[[-1,14372,"\n\n\n\n\n"],[1,14377,"到过的地方"],[-1,14409,"都"],[1,14410,"\n"],[-1,14472,"\n"],[1,14473,"用"],[-1,14733,"\n\n"],[1,14735,"唯一"],[1,14896,"\n"],[-1,15481,"\n"],[-1,15503,"\n"],[1,15504,"上"],[1,15514,"\n"],[-1,15768,"同"],[1,15769,""],[-1,22935,"\n"],[1,22936," "],[-1,22966,"\n"],[1,22967,"两点"],[-1,22971,"小"],[1,23005,"\n\n\n\n\n\n"]],[14372,14372],[23011,23011]]],[1527004829960,[null,[[1,14372,"\n\n\n\n\n"],[-1,14372,"到过的地方"],[1,14409,"都"],[-1,14409,"\n"],[1,14472,"\n"],[-1,14472,"用"],[1,14733,"\n\n"],[-1,14733,"唯一"],[-1,14896,"\n"],[1,15482,"\n"],[1,15503,"\n"],[-1,15503,"上"],[-1,15514,"\n"],[1,15769,"同"],[-1,15769,""],[1,22935,"\n"],[-1,22935," "],[1,22966,"\n"],[-1,22966,"两点"],[1,22972,"小"],[-1,23005,"\n\n\n\n\n\n"]],[23011,23011],[14372,14372]]],[1527004770514,["Re@Re.local",[[1,23003,"最小"]],[23003,23003],[23005,23005]]],[1527004771353,["Re@Re.local",[[-1,23005,"集"]],[23006,23006],[23005,23005]]],[1527004773954,["Re@Re.local",[[1,23005,"集合"]],[23005,23005],[23007,23007]]],[1527004785483,["Re@Re.local",[[1,23008,"计算机科学中由"]],[23008,23008],[23015,23015]]],[1527004785748,["Re@Re.local",[[-1,23014,"由"]],[23015,23015],[23014,23014]]],[1527004829648,["Re@Re.local",[[1,23014,"有很多策略用来解决这些问题。本书的目的之一便是向读者介绍一些不同的求解策略。*"]],[23014,23014],[23053,23053]]],[1527004889958,[null,[[-1,14372,"\n\n\n\n\n"],[1,14377,"到过的地方"],[-1,14409,"都"],[1,14410,"\n"],[-1,14472,"\n"],[1,14473,"用"],[-1,14733,"\n\n"],[1,14735,"唯一"],[1,14896,"\n"],[-1,15481,"\n"],[-1,15503,"\n"],[1,15504,"上"],[1,15514,"\n"],[-1,15768,"同"],[1,15769,""],[-1,22935,"\n"],[1,22936," "],[-1,22966,"\n"],[1,22967,"两点"],[-1,22971,"小"],[1,23053,"\n\n\n\n\n\n"]],[14372,14372],[23059,23059]]],[1527004889958,[null,[[1,14372,"\n\n\n\n\n"],[-1,14372,"到过的地方"],[1,14409,"都"],[-1,14409,"\n"],[1,14472,"\n"],[-1,14472,"用"],[1,14733,"\n\n"],[-1,14733,"唯一"],[-1,14896,"\n"],[1,15482,"\n"],[1,15503,"\n"],[-1,15503,"上"],[-1,15514,"\n"],[1,15769,"同"],[-1,15769,""],[1,22935,"\n"],[-1,22935," "],[1,22966,"\n"],[-1,22966,"两点"],[1,22972,"小"],[-1,23053,"\n\n\n\n\n\n"]],[23059,23059],[14372,14372]]],[1527004842250,["Re@Re.local",[[1,23054,"动态规划**是其中该"]],[23054,23054],[23064,23064]]],[1527004843500,["Re@Re.local",[[-1,23060,"是其中该"]],[23064,23064],[23060,23060]]],[1527004850244,["Re@Re.local",[[1,23060,"是用于解决优化问题的策略之一。。"]],[23060,23060],[23076,23076]]],[1527004850659,["Re@Re.local",[[-1,23075,"。"]],[23076,23076],[23075,23075]]],[1527004850887,["Re@Re.local",[[1,23081,"\n"]],[23075,23075],[23076,23076]]],[1527004851080,["Re@Re.local",[[1,23082,"\n"]],[23076,23076],[23077,23077]]],[1527004862879,["Re@Re.local",[[1,23077,"优化问题的一个"]],[23077,23077],[23084,23084]]],[1527004863548,["Re@Re.local",[[-1,23082,"一个"]],[23084,23084],[23082,23082]]],[1527004880222,["Re@Re.local",[[1,23082,"一个经典例子就是使用最少的硬币完成找零。假设"]],[23082,23082],[23104,23104]]],[1527004949983,[null,[[-1,14372,"\n\n\n\n\n"],[1,14377,"到过的地方"],[-1,14409,"都"],[1,14410,"\n"],[-1,14472,"\n"],[1,14473,"用"],[-1,14733,"\n\n"],[1,14735,"唯一"],[1,14896,"\n"],[-1,15481,"\n"],[-1,15503,"\n"],[1,15504,"上"],[1,15514,"\n"],[-1,15768,"同"],[1,15769,""],[-1,22935,"\n"],[1,22936," "],[-1,22966,"\n"],[1,22967,"两点"],[-1,22971,"小"],[1,23052,"*"],[-1,23060,"是"],[1,23104,"\n\n\n\n\n\n"]],[14372,14372],[23110,23110]]],[1527004949984,[null,[[1,14372,"\n\n\n\n\n"],[-1,14372,"到过的地方"],[1,14409,"都"],[-1,14409,"\n"],[1,14472,"\n"],[-1,14472,"用"],[1,14733,"\n\n"],[-1,14733,"唯一"],[-1,14896,"\n"],[1,15482,"\n"],[1,15503,"\n"],[-1,15503,"上"],[-1,15514,"\n"],[1,15769,"同"],[-1,15769,""],[1,22935,"\n"],[-1,22935," "],[1,22966,"\n"],[-1,22966,"两点"],[1,22972,"小"],[-1,23052,"*"],[1,23061,"是"],[-1,23104,"\n\n\n\n\n\n"]],[23110,23110],[14372,14372]]],[1527004895935,["Re@Re.local",[[1,23104,"duzh"]],[23104,23104],[23108,23108]]],[1527004896759,["Re@Re.local",[[-1,23104,"duzh"]],[23108,23108],[23104,23104]]],[1527004906750,["Re@Re.local",[[1,23104,"读者是自动贩卖机的程序员"]],[23104,23104],[23116,23116]]],[1527004917876,["Re@Re.local",[[1,23112,"制造商"]],[23112,23112],[23115,23115]]],[1527004943204,["Re@Re.local",[[1,23119,"，贵司视图"]],[23119,23119],[23124,23124]]],[1527004946591,["Re@Re.local",[[-1,23104,"读者"]],[23105,23106],[23104,23104]]],[1527004947193,["Re@Re.local",[[1,23104,"你"]],[23104,23104],[23105,23105]]],[1527004949279,["Re@Re.local",[[-1,23119,"贵"]],[23120,23120],[23119,23119]]],[1527005009954,[null,[[-1,14372,"\n\n\n\n\n"],[1,14377,"到过的地方"],[-1,14409,"都"],[1,14410,"\n"],[-1,14472,"\n"],[1,14473,"用"],[-1,14733,"\n\n"],[1,14735,"唯一"],[1,14896,"\n"],[-1,15481,"\n"],[-1,15503,"\n"],[1,15504,"上"],[1,15514,"\n"],[-1,15768,"同"],[1,15769,""],[-1,22935,"\n"],[1,22936," "],[-1,22966,"\n"],[1,22967,"两点"],[-1,22971,"小"],[1,23052,"*"],[-1,23060,"是"],[1,23122,"\n\n\n\n\n\n"]],[14372,14372],[23128,23128]]],[1527005009954,[null,[[1,14372,"\n\n\n\n\n"],[-1,14372,"到过的地方"],[1,14409,"都"],[-1,14409,"\n"],[1,14472,"\n"],[-1,14472,"用"],[1,14733,"\n\n"],[-1,14733,"唯一"],[-1,14896,"\n"],[1,15482,"\n"],[1,15503,"\n"],[-1,15503,"上"],[-1,15514,"\n"],[1,15769,"同"],[-1,15769,""],[1,22935,"\n"],[-1,22935," "],[1,22966,"\n"],[-1,22966,"两点"],[1,22972,"小"],[-1,23052,"*"],[1,23061,"是"],[-1,23122,"\n\n\n\n\n\n"]],[23128,23128],[14372,14372]]],[1527004951037,["Re@Re.local",[[-1,23121,"视图"]],[23123,23123],[23121,23121]]],[1527004959125,["Re@Re.local",[[1,23121,"试图减少每次交易"]],[23121,23121],[23129,23129]]],[1527004969863,["Re@Re.local",[[-1,23121,"试图减少"]],[23125,23125],[23121,23121]]],[1527004971760,["Re@Re.local",[[1,23121,"试图在"]],[23121,23121],[23124,23124]]],[1527004974348,["Re@Re.local",[[-1,23133,"\n"]],[23129,23129],[23128,23128]]],[1527004980485,["Re@Re.local",[[1,23128,"中提供"]],[23128,23128],[23131,23131]]],[1527004980790,["Re@Re.local",[[-1,23129,"提供"]],[23131,23131],[23129,23129]]],[1527004991022,["Re@Re.local",[[1,23129,"找零最少的硬币以简化工作流程。"]],[23129,23129],[23144,23144]]],[1527005069967,[null,[[-1,14372,"\n\n\n\n\n"],[1,14377,"到过的地方"],[-1,14409,"都"],[1,14410,"\n"],[-1,14472,"\n"],[1,14473,"用"],[-1,14733,"\n\n"],[1,14735,"唯一"],[1,14896,"\n"],[-1,15481,"\n"],[-1,15503,"\n"],[1,15504,"上"],[1,15514,"\n"],[-1,15768,"同"],[1,15769,""],[-1,22935,"\n"],[1,22936," "],[-1,22966,"\n"],[1,22967,"两点"],[-1,22971,"小"],[1,23053,"*"],[-1,23059,"是"],[1,23119,"你"],[-1,23120,"视"],[1,23144,"\n\n\n\n\n"]],[14372,14372],[23149,23149]]],[1527005069967,[null,[[1,14372,"\n\n\n\n\n"],[-1,14372,"到过的地方"],[1,14409,"都"],[-1,14409,"\n"],[1,14472,"\n"],[-1,14472,"用"],[1,14733,"\n\n"],[-1,14733,"唯一"],[-1,14896,"\n"],[1,15482,"\n"],[1,15503,"\n"],[-1,15503,"上"],[-1,15514,"\n"],[1,15769,"同"],[-1,15769,""],[1,22935,"\n"],[-1,22935," "],[1,22966,"\n"],[-1,22966,"两点"],[1,22972,"小"],[-1,23053,"*"],[1,23060,"是"],[-1,23119,"你"],[1,23121,"视"],[-1,23144,"\n\n\n\n\n"]],[23149,23149],[14372,14372]]],[1527005021001,["Re@Re.local",[[1,23144,"比如说，某个客户投入了1美元，并且"]],[23144,23144],[23161,23161]]],[1527005027930,["Re@Re.local",[[-1,23158,"，并且"]],[23161,23161],[23158,23158]]],[1527005034759,["Re@Re.local",[[1,23158,"购买37美分的商品。"]],[23158,23158],[23168,23168]]],[1527005037724,["Re@Re.local",[[-1,23167,"。"]],[23168,23168],[23167,23167]]],[1527005050130,["Re@Re.local",[[1,23167,"，那么如何"]],[23167,23167],[23172,23172]]],[1527005050504,["Re@Re.local",[[-1,23170,"如何"]],[23172,23172],[23170,23170]]],[1527005051370,["Re@Re.local",[[1,23170,"提供"]],[23170,23170],[23172,23172]]],[1527005051909,["Re@Re.local",[[-1,23170,"提供"]],[23172,23172],[23170,23170]]],[1527005069548,["Re@Re.local",[[1,23170,"找零用的硬币最少个数为多少？答案为"]],[23170,23170],[23187,23187]]],[1527005129972,[null,[[-1,14372,"\n\n\n\n\n"],[1,14377,"到过的地方"],[-1,14409,"都"],[1,14410,"\n"],[-1,14472,"\n"],[1,14473,"用"],[-1,14733,"\n\n"],[1,14735,"唯一"],[1,14896,"\n"],[-1,15481,"\n"],[-1,15503,"\n"],[1,15504,"上"],[1,15514,"\n"],[-1,15768,"同"],[1,15769,""],[-1,22935,"\n"],[1,22936," "],[-1,22966,"\n"],[1,22967,"两点"],[-1,22971,"小"],[1,23053,"*"],[-1,23059,"是"],[1,23119,"你"],[-1,23120,"视"],[1,23187,"\n\n\n\n\n"]],[14372,14372],[23192,23192]]],[1527005129972,[null,[[1,14372,"\n\n\n\n\n"],[-1,14372,"到过的地方"],[1,14409,"都"],[-1,14409,"\n"],[1,14472,"\n"],[-1,14472,"用"],[1,14733,"\n\n"],[-1,14733,"唯一"],[-1,14896,"\n"],[1,15482,"\n"],[1,15503,"\n"],[-1,15503,"上"],[-1,15514,"\n"],[1,15769,"同"],[-1,15769,""],[1,22935,"\n"],[-1,22935," "],[1,22966,"\n"],[-1,22966,"两点"],[1,22972,"小"],[-1,23053,"*"],[1,23060,"是"],[-1,23119,"你"],[1,23121,"视"],[-1,23187,"\n\n\n\n\n"]],[23192,23192],[14372,14372]]],[1527005070305,["Re@Re.local",[[1,23187,"6."]],[23187,23187],[23189,23189]]],[1527005071216,["Re@Re.local",[[-1,23188,"."]],[23189,23189],[23188,23188]]],[1527005071572,["Re@Re.local",[[1,23188,"."]],[23188,23188],[23189,23189]]],[1527005072276,["Re@Re.local",[[-1,23188,"."]],[23189,23189],[23188,23188]]],[1527005072691,["Re@Re.local",[[1,23188,"。"]],[23188,23188],[23189,23189]]],[1527005073906,["Re@Re.local",[[-1,23188,"。"]],[23189,23189],[23188,23188]]],[1527005078977,["Re@Re.local",[[1,23188,"：2个5"]],[23188,23188],[23192,23192]]],[1527005079770,["Re@Re.local",[[-1,23191,"5"]],[23192,23192],[23191,23191]]],[1527005098807,["Re@Re.local",[[1,23191,"25美分，1个10美分，3个1美分。如何的多"]],[23191,23191],[23213,23213]]],[1527005099924,["Re@Re.local",[[-1,23211,"的多"]],[23213,23213],[23211,23211]]],[1527005103634,["Re@Re.local",[[1,23211,"得到这个答案的？"]],[23211,23211],[23219,23219]]],[1527005105246,["Re@Re.local",[[-1,23218,"？"]],[23219,23219],[23218,23218]]],[1527005106689,["Re@Re.local",[[1,23218,"？"]],[23218,23218],[23219,23219]]],[1527005107230,["Re@Re.local",[[-1,23217,"的？"]],[23219,23219],[23217,23217]]],[1527005110064,["Re@Re.local",[[1,23217,"？受限"]],[23217,23217],[23220,23220]]],[1527005121843,["Re@Re.local",[[-1,23218,"受限"]],[23220,23220],[23218,23218]]],[1527005127604,["Re@Re.local",[[1,23218,"首先要用库存中"]],[23218,23218],[23225,23225]]],[1527005189968,[null,[[-1,14372,"\n\n\n\n\n"],[1,14377,"到过的地方"],[-1,14409,"都"],[1,14410,"\n"],[-1,14472,"\n"],[1,14473,"用"],[-1,14733,"\n\n"],[1,14735,"唯一"],[1,14896,"\n"],[-1,15481,"\n"],[-1,15503,"\n"],[1,15504,"上"],[1,15514,"\n"],[-1,15768,"同"],[1,15769,""],[-1,22935,"\n"],[1,22936," "],[-1,22966,"\n"],[1,22967,"两点"],[-1,22971,"小"],[1,23053,"*"],[-1,23059,"是"],[1,23119,"你"],[-1,23120,"视"],[1,23225,"\n\n\n\n\n"]],[14372,14372],[23230,23230]]],[1527005189969,[null,[[1,14372,"\n\n\n\n\n"],[-1,14372,"到过的地方"],[1,14409,"都"],[-1,14409,"\n"],[1,14472,"\n"],[-1,14472,"用"],[1,14733,"\n\n"],[-1,14733,"唯一"],[-1,14896,"\n"],[1,15482,"\n"],[1,15503,"\n"],[-1,15503,"上"],[-1,15514,"\n"],[1,15769,"同"],[-1,15769,""],[1,22935,"\n"],[-1,22935," "],[1,22966,"\n"],[-1,22966,"两点"],[1,22972,"小"],[-1,23053,"*"],[1,23060,"是"],[-1,23119,"你"],[1,23121,"视"],[-1,23225,"\n\n\n\n\n"]],[23230,23230],[14372,14372]]],[1527005134142,["Re@Re.local",[[1,23221,"尽量使"]],[23221,23221],[23224,23224]]],[1527005144794,["Re@Re.local",[[1,23228,"面额最大的硬币（25美分）"]],[23228,23228],[23241,23241]]],[1527005249981,[null,[[-1,14372,"\n\n\n\n\n"],[1,14377,"到过的地方"],[-1,14409,"都"],[1,14410,"\n"],[-1,14472,"\n"],[1,14473,"用"],[-1,14733,"\n\n"],[1,14735,"唯一"],[1,14896,"\n"],[-1,15481,"\n"],[-1,15503,"\n"],[1,15504,"上"],[1,15514,"\n"],[-1,15768,"同"],[1,15769,""],[-1,22935,"\n"],[1,22936," "],[-1,22966,"\n"],[1,22967,"两点"],[-1,22971,"小"],[1,23053,"*"],[-1,23059,"是"],[1,23119,"你"],[-1,23120,"视"],[1,23241,"\n\n\n\n\n"]],[14372,14372],[23246,23246]]],[1527005249981,[null,[[1,14372,"\n\n\n\n\n"],[-1,14372,"到过的地方"],[1,14409,"都"],[-1,14409,"\n"],[1,14472,"\n"],[-1,14472,"用"],[1,14733,"\n\n"],[-1,14733,"唯一"],[-1,14896,"\n"],[1,15482,"\n"],[1,15503,"\n"],[-1,15503,"上"],[-1,15514,"\n"],[1,15769,"同"],[-1,15769,""],[1,22935,"\n"],[-1,22935," "],[1,22966,"\n"],[-1,22966,"两点"],[1,22972,"小"],[-1,23053,"*"],[1,23060,"是"],[-1,23119,"你"],[1,23121,"视"],[-1,23241,"\n\n\n\n\n"]],[23246,23246],[14372,14372]]],[1527005223361,["Re@Re.local",[[1,23241,"为"]],[23241,23241],[23242,23242]]],[1527005223514,["Re@Re.local",[[-1,23241,"为"]],[23242,23242],[23241,23241]]],[1527005225137,["Re@Re.local",[[1,23241,"，"]],[23241,23241],[23242,23242]]],[1527005493016,[null,[[-1,14372,"\n\n\n\n\n"],[1,14377,"到过的地方"],[-1,14409,"都"],[1,14410,"\n"],[-1,14472,"\n"],[1,14473,"用"],[-1,14733,"\n\n"],[1,14735,"唯一"],[1,14896,"\n"],[-1,15481,"\n"],[-1,15503,"\n"],[1,15504,"上"],[1,15514,"\n"],[-1,15768,"同"],[1,15769,""],[-1,22935,"\n"],[1,22936," "],[-1,22966,"\n"],[1,22967,"两点"],[-1,22971,"小"],[1,23053,"*"],[-1,23059,"是"],[1,23119,"你"],[-1,23120,"视"],[1,23242,"\n\n\n\n\n"]],[14372,14372],[23247,23247]]],[1527005493016,[null,[[1,14372,"\n\n\n\n\n"],[-1,14372,"到过的地方"],[1,14409,"都"],[-1,14409,"\n"],[1,14472,"\n"],[-1,14472,"用"],[1,14733,"\n\n"],[-1,14733,"唯一"],[-1,14896,"\n"],[1,15482,"\n"],[1,15503,"\n"],[-1,15503,"上"],[-1,15514,"\n"],[1,15769,"同"],[-1,15769,""],[1,22935,"\n"],[-1,22935," "],[1,22966,"\n"],[-1,22966,"两点"],[1,22972,"小"],[-1,23053,"*"],[1,23060,"是"],[-1,23119,"你"],[1,23121,"视"],[-1,23242,"\n\n\n\n\n"]],[23247,23247],[14372,14372]]],[1527005472500,["Re@Re.local",[[1,23242,"下"]],[23242,23242],[23243,23243]]],[1527005472668,["Re@Re.local",[[-1,23242,"下"]],[23243,23243],[23242,23242]]],[1527005478150,["Re@Re.local",[[1,23242,"接着使用下个"]],[23242,23242],[23248,23248]]],[1527005479386,["Re@Re.local",[[-1,23247,"个"]],[23248,23248],[23247,23247]]],[1527005483069,["Re@Re.local",[[1,23247,"一个可用的最大的"]],[23247,23247],[23255,23255]]],[1527005553934,[null,[[-1,14372,"\n\n\n\n\n"],[1,14377,"到过的地方"],[-1,14409,"都"],[1,14410,"\n"],[-1,14472,"\n"],[1,14473,"用"],[-1,14733,"\n\n"],[1,14735,"唯一"],[1,14896,"\n"],[-1,15481,"\n"],[-1,15503,"\n"],[1,15504,"上"],[1,15514,"\n"],[-1,15768,"同"],[1,15769,""],[-1,22935,"\n"],[1,22936," "],[-1,22966,"\n"],[1,22967,"两点"],[-1,22971,"小"],[1,23053,"*"],[-1,23059,"是"],[1,23119,"你"],[-1,23120,"视"],[1,23255,"\n\n\n\n\n"]],[14372,14372],[23260,23260]]],[1527005553934,[null,[[1,14372,"\n\n\n\n\n"],[-1,14372,"到过的地方"],[1,14409,"都"],[-1,14409,"\n"],[1,14472,"\n"],[-1,14472,"用"],[1,14733,"\n\n"],[-1,14733,"唯一"],[-1,14896,"\n"],[1,15482,"\n"],[1,15503,"\n"],[-1,15503,"上"],[-1,15514,"\n"],[1,15769,"同"],[-1,15769,""],[1,22935,"\n"],[-1,22935," "],[1,22966,"\n"],[-1,22966,"两点"],[1,22972,"小"],[-1,23053,"*"],[1,23060,"是"],[-1,23119,"你"],[1,23121,"视"],[-1,23255,"\n\n\n\n\n"]],[23260,23260],[14372,14372]]],[1527005495392,["Re@Re.local",[[-1,23252,"最大的"]],[23255,23255],[23252,23252]]],[1527005498459,["Re@Re.local",[[1,23252,"棉质最"]],[23252,23252],[23255,23255]]],[1527005498875,["Re@Re.local",[[-1,23252,"棉质最"]],[23255,23255],[23252,23252]]],[1527005519835,["Re@Re.local",[[1,23252,"面值最大的硬币，同样尽量多地使用。第一种方法也被成为"]],[23252,23252],[23278,23278]]],[1527005520605,["Re@Re.local",[[-1,23274,"也被成为"]],[23278,23278],[23274,23274]]],[1527005521316,["Re@Re.local",[[1,23274,"被"]],[23274,23274],[23275,23275]]],[1527005521409,["Re@Re.local",[[-1,23274,"被"]],[23275,23275],[23274,23274]]],[1527005525090,["Re@Re.local",[[1,23274,"为**贪心算法"]],[23274,23274],[23281,23281]]],[1527005525822,["Re@Re.local",[[-1,23279,"算法"]],[23281,23281],[23279,23279]]],[1527005548280,["Re@Re.local",[[1,23279,"法**，因为这里试图将此问题"]],[23279,23279],[23293,23293]]],[1527005613845,[null,[[-1,14372,"\n\n\n\n\n"],[1,14377,"到过的地方"],[-1,14409,"都"],[1,14410,"\n"],[-1,14472,"\n"],[1,14473,"用"],[-1,14733,"\n\n"],[1,14735,"唯一"],[1,14896,"\n"],[-1,15481,"\n"],[-1,15503,"\n"],[1,15504,"上"],[1,15514,"\n"],[-1,15768,"同"],[1,15769,""],[-1,22935,"\n"],[1,22936," "],[-1,22966,"\n"],[1,22967,"两点"],[-1,22971,"小"],[1,23053,"*"],[-1,23059,"是"],[1,23119,"你"],[-1,23120,"视"],[1,23293,"\n\n\n\n\n"]],[14372,14372],[23298,23298]]],[1527005613845,[null,[[1,14372,"\n\n\n\n\n"],[-1,14372,"到过的地方"],[1,14409,"都"],[-1,14409,"\n"],[1,14472,"\n"],[-1,14472,"用"],[1,14733,"\n\n"],[-1,14733,"唯一"],[-1,14896,"\n"],[1,15482,"\n"],[1,15503,"\n"],[-1,15503,"上"],[-1,15514,"\n"],[1,15769,"同"],[-1,15769,""],[1,22935,"\n"],[-1,22935," "],[1,22966,"\n"],[-1,22966,"两点"],[1,22972,"小"],[-1,23053,"*"],[1,23060,"是"],[-1,23119,"你"],[1,23121,"视"],[-1,23293,"\n\n\n\n\n"]],[23298,23298],[14372,14372]]],[1527005557993,["Re@Re.local",[[1,23293,"分为"]],[23293,23293],[23295,23295]]],[1527005558285,["Re@Re.local",[[-1,23293,"分为"]],[23295,23295],[23293,23293]]],[1527005562539,["Re@Re.local",[[1,23293,"尽可能地分为毕竟大"]],[23293,23293],[23302,23302]]],[1527005562978,["Re@Re.local",[[-1,23299,"毕竟大"]],[23302,23302],[23299,23299]]],[1527005566222,["Re@Re.local",[[1,23299,"比较大的块"]],[23299,23299],[23304,23304]]],[1527005566691,["Re@Re.local",[[-1,23303,"块"]],[23304,23304],[23303,23303]]],[1527005567508,["Re@Re.local",[[1,23303,"不"]],[23303,23303],[23304,23304]]],[1527005567637,["Re@Re.local",[[-1,23303,"不"]],[23304,23304],[23303,23303]]],[1527005572942,["Re@Re.local",[[1,23303,"块来解决。"]],[23303,23303],[23308,23308]]],[1527005575262,["Re@Re.local",[[1,23313,"\n"]],[23308,23308],[23309,23309]]],[1527005575499,["Re@Re.local",[[1,23314,"\n"]],[23309,23309],[23310,23310]]],[1527005584086,["Re@Re.local",[[1,23310,"贪心法"]],[23310,23310],[23313,23313]]],[1527005590649,["Re@Re.local",[[-1,23310,"贪心法"]],[23313,23313],[23310,23310]]],[1527005596565,["Re@Re.local",[[1,23310,"使用没"]],[23310,23310],[23313,23313]]],[1527005596680,["Re@Re.local",[[-1,23312,"没"]],[23313,23313],[23312,23312]]],[1527005611338,["Re@Re.local",[[1,23312,"美国硬币时，贪心法效果还不错，但是假设贵司"]],[23312,23312],[23333,23333]]],[1527005611551,["Re@Re.local",[[-1,23331,"贵司"]],[23333,23333],[23331,23331]]],[1527005612063,["Re@Re.local",[[1,23331,"你"]],[23331,23331],[23332,23332]]],[1527005673983,[null,[[-1,14372,"\n\n\n\n\n"],[1,14377,"到过的地方"],[-1,14409,"都"],[1,14410,"\n"],[-1,14472,"\n"],[1,14473,"用"],[-1,14733,"\n\n"],[1,14735,"唯一"],[1,14896,"\n"],[-1,15481,"\n"],[-1,15503,"\n"],[1,15504,"上"],[1,15514,"\n"],[-1,15768,"同"],[1,15769,""],[-1,22935,"\n"],[1,22936," "],[-1,22966,"\n"],[1,22967,"两点"],[-1,22971,"小"],[1,23053,"*"],[-1,23059,"是"],[1,23119,"你"],[-1,23120,"视"],[1,23332,"\n\n\n\n\n"]],[14372,14372],[23337,23337]]],[1527005673983,[null,[[1,14372,"\n\n\n\n\n"],[-1,14372,"到过的地方"],[1,14409,"都"],[-1,14409,"\n"],[1,14472,"\n"],[-1,14472,"用"],[1,14733,"\n\n"],[-1,14733,"唯一"],[-1,14896,"\n"],[1,15482,"\n"],[1,15503,"\n"],[-1,15503,"上"],[-1,15514,"\n"],[1,15769,"同"],[-1,15769,""],[1,22935,"\n"],[-1,22935," "],[1,22966,"\n"],[-1,22966,"两点"],[1,22972,"小"],[-1,23053,"*"],[1,23060,"是"],[-1,23119,"你"],[1,23121,"视"],[-1,23332,"\n\n\n\n\n"]],[23337,23337],[14372,14372]]],[1527005614177,["Re@Re.local",[[-1,23331,"你死"]],[23333,23333],[23331,23331]]],[1527005643638,["Re@Re.local",[[1,23331,"你司决定在南"]],[23331,23331],[23337,23337]]],[1527005643722,["Re@Re.local",[[-1,23336,"南"]],[23337,23337],[23336,23336]]],[1527005663925,["Re@Re.local",[[1,23336,"某共部署其自动贩卖机，出了一般的"]],[23336,23336],[23352,23352]]],[1527005664908,["Re@Re.local",[[-1,23347,"出了一般的"]],[23352,23352],[23347,23347]]],[1527005671042,["Re@Re.local",[[1,23347,"除了一般的1，5，10即2"]],[23347,23347],[23360,23360]]],[1527005671802,["Re@Re.local",[[-1,23358,"即2"]],[23360,23360],[23358,23358]]],[1527005673262,["Re@Re.local",[[1,23358,"及25"]],[23358,23358],[23361,23361]]],[1527005733866,[null,[[-1,14372,"\n\n\n\n\n"],[1,14377,"到过的地方"],[-1,14409,"都"],[1,14410,"\n"],[-1,14472,"\n"],[1,14473,"用"],[-1,14733,"\n\n"],[1,14735,"唯一"],[1,14896,"\n"],[-1,15481,"\n"],[-1,15503,"\n"],[1,15504,"上"],[1,15514,"\n"],[-1,15768,"同"],[1,15769,""],[-1,22935,"\n"],[1,22936," "],[-1,22966,"\n"],[1,22967,"两点"],[-1,22971,"小"],[1,23053,"*"],[-1,23059,"是"],[1,23119,"你"],[-1,23120,"视"],[1,23361,"\n\n\n\n\n"]],[14372,14372],[23366,23366]]],[1527005733867,[null,[[1,14372,"\n\n\n\n\n"],[-1,14372,"到过的地方"],[1,14409,"都"],[-1,14409,"\n"],[1,14472,"\n"],[-1,14472,"用"],[1,14733,"\n\n"],[-1,14733,"唯一"],[-1,14896,"\n"],[1,15482,"\n"],[1,15503,"\n"],[-1,15503,"上"],[-1,15514,"\n"],[1,15769,"同"],[-1,15769,""],[1,22935,"\n"],[-1,22935," "],[1,22966,"\n"],[-1,22966,"两点"],[1,22972,"小"],[-1,23053,"*"],[1,23060,"是"],[-1,23119,"你"],[1,23121,"视"],[-1,23361,"\n\n\n\n\n"]],[23366,23366],[14372,14372]]],[1527005675192,["Re@Re.local",[[1,23361,"粉只是我啊"]],[23361,23361],[23366,23366]]],[1527005675963,["Re@Re.local",[[-1,23361,"粉只是我啊"]],[23366,23366],[23361,23361]]],[1527005710821,["Re@Re.local",[[1,23361,"分之外，还有21分的。在这种情况下，贪心法便不能给出63分的"]],[23361,23361],[23391,23391]]],[1527005712091,["Re@Re.local",[[-1,23387,"63分的"]],[23391,23391],[23387,23387]]],[1527005713848,["Re@Re.local",[[1,23387,"找零64"]],[23387,23387],[23391,23391]]],[1527005714286,["Re@Re.local",[[-1,23390,"4"]],[23391,23391],[23390,23390]]],[1527005733383,["Re@Re.local",[[1,23390,"3分的最优解了。即使提供了21分，贪心法给出的"]],[23390,23390],[23413,23413]]],[1527005794970,[null,[[-1,14372,"\n\n\n\n\n"],[1,14377,"到过的地方"],[-1,14409,"都"],[1,14410,"\n"],[-1,14472,"\n"],[1,14473,"用"],[-1,14733,"\n\n"],[1,14735,"唯一"],[1,14896,"\n"],[-1,15481,"\n"],[-1,15503,"\n"],[1,15504,"上"],[1,15514,"\n"],[-1,15768,"同"],[1,15769,""],[-1,22935,"\n"],[1,22936," "],[-1,22966,"\n"],[1,22967,"两点"],[-1,22971,"小"],[1,23053,"*"],[-1,23059,"是"],[1,23119,"你"],[-1,23120,"视"],[1,23413,"\n\n\n\n\n"]],[14372,14372],[23418,23418]]],[1527005794970,[null,[[1,14372,"\n\n\n\n\n"],[-1,14372,"到过的地方"],[1,14409,"都"],[-1,14409,"\n"],[1,14472,"\n"],[-1,14472,"用"],[1,14733,"\n\n"],[-1,14733,"唯一"],[-1,14896,"\n"],[1,15482,"\n"],[1,15503,"\n"],[-1,15503,"上"],[-1,15514,"\n"],[1,15769,"同"],[-1,15769,""],[1,22935,"\n"],[-1,22935," "],[1,22966,"\n"],[-1,22966,"两点"],[1,22972,"小"],[-1,23053,"*"],[1,23060,"是"],[-1,23119,"你"],[1,23121,"视"],[-1,23413,"\n\n\n\n\n"]],[23418,23418],[14372,14372]]],[1527005736226,["Re@Re.local",[[1,23413,"最优解"]],[23413,23413],[23416,23416]]],[1527005736972,["Re@Re.local",[[-1,23413,"最优解"]],[23416,23416],[23413,23413]]],[1527005743264,["Re@Re.local",[[1,23413,"解扔"]],[23413,23413],[23415,23415]]],[1527005743948,["Re@Re.local",[[-1,23414,"扔"]],[23415,23415],[23414,23414]]],[1527005745111,["Re@Re.local",[[1,23414,"仍然"]],[23414,23414],[23416,23416]]],[1527005745181,["Re@Re.local",[[-1,23415,"然"]],[23416,23416],[23415,23415]]],[1527005746636,["Re@Re.local",[[1,23415,"是6."]],[23415,23415],[23418,23418]]],[1527005748130,["Re@Re.local",[[-1,23417,"."]],[23418,23418],[23417,23417]]],[1527005748634,["Re@Re.local",[[1,23417,"."]],[23417,23417],[23418,23418]]],[1527005749151,["Re@Re.local",[[-1,23417,"."]],[23418,23418],[23417,23417]]],[1527005778647,["Re@Re.local",[[1,23417,"。显然，最优解是3个21分。"]],[23417,23417],[23431,23431]]],[1527005778943,["Re@Re.local",[[1,23436,"\n"]],[23431,23431],[23432,23432]]],[1527005779132,["Re@Re.local",[[1,23437,"\n"]],[23432,23432],[23433,23433]]],[1527005784862,["Re@Re.local",[[1,23433,"再来悠久下"]],[23433,23433],[23438,23438]]],[1527005789415,["Re@Re.local",[[-1,23435,"悠久下"]],[23438,23438],[23435,23435]]],[1527005791465,["Re@Re.local",[[1,23435,"研究下"]],[23435,23435],[23438,23438]]],[1527005854974,[null,[[-1,14372,"\n\n\n\n\n"],[1,14377,"到过的地方"],[-1,14409,"都"],[1,14410,"\n"],[-1,14472,"\n"],[1,14473,"用"],[-1,14733,"\n\n"],[1,14735,"唯一"],[1,14896,"\n"],[-1,15481,"\n"],[-1,15503,"\n"],[1,15504,"上"],[1,15514,"\n"],[-1,15768,"同"],[1,15769,""],[-1,22935,"\n"],[1,22936," "],[-1,22966,"\n"],[1,22967,"两点"],[-1,22971,"小"],[1,23053,"*"],[-1,23059,"是"],[1,23119,"你"],[-1,23120,"视"],[1,23438,"\n\n\n\n\n"]],[14372,14372],[23443,23443]]],[1527005854974,[null,[[1,14372,"\n\n\n\n\n"],[-1,14372,"到过的地方"],[1,14409,"都"],[-1,14409,"\n"],[1,14472,"\n"],[-1,14472,"用"],[1,14733,"\n\n"],[-1,14733,"唯一"],[-1,14896,"\n"],[1,15482,"\n"],[1,15503,"\n"],[-1,15503,"上"],[-1,15514,"\n"],[1,15769,"同"],[-1,15769,""],[1,22935,"\n"],[-1,22935," "],[1,22966,"\n"],[-1,22966,"两点"],[1,22972,"小"],[-1,23053,"*"],[1,23060,"是"],[-1,23119,"你"],[1,23121,"视"],[-1,23438,"\n\n\n\n\n"]],[23443,23443],[14372,14372]]],[1527005803020,["Re@Re.local",[[-1,23434,"来研究下"]],[23438,23438],[23434,23434]]],[1527005811612,["Re@Re.local",[[1,23434,"来看一个可以保证能找到最御姐"]],[23434,23434],[23448,23448]]],[1527005812156,["Re@Re.local",[[-1,23445,"最御姐"]],[23448,23448],[23445,23445]]],[1527005819643,["Re@Re.local",[[1,23445,"最优解的算法。因为该"]],[23445,23445],[23455,23455]]],[1527005820034,["Re@Re.local",[[-1,23454,"该"]],[23455,23455],[23454,23454]]],[1527005821940,["Re@Re.local",[[1,23454,"本节是"]],[23454,23454],[23457,23457]]],[1527005822109,["Re@Re.local",[[-1,23456,"是"]],[23457,23457],[23456,23456]]],[1527005825518,["Re@Re.local",[[1,23456,"跟递归有关，你"]],[23456,23456],[23463,23463]]],[1527005826060,["Re@Re.local",[[-1,23462,"你"]],[23463,23463],[23462,23462]]],[1527005831769,["Re@Re.local",[[1,23462,"读者有可能猜到了这"]],[23462,23462],[23471,23471]]],[1527005831892,["Re@Re.local",[[-1,23470,"这"]],[23471,23471],[23470,23470]]],[1527005853574,["Re@Re.local",[[1,23470,"会与递归有关。首先想一想约束条件。如果试图"]],[23470,23470],[23491,23491]]],[1527005914982,[null,[[-1,14372,"\n\n\n\n\n"],[1,14377,"到过的地方"],[-1,14409,"都"],[1,14410,"\n"],[-1,14472,"\n"],[1,14473,"用"],[-1,14733,"\n\n"],[1,14735,"唯一"],[1,14896,"\n"],[-1,15481,"\n"],[-1,15503,"\n"],[1,15504,"上"],[1,15514,"\n"],[-1,15768,"同"],[1,15769,""],[-1,22935,"\n"],[1,22936," "],[-1,22966,"\n"],[1,22967,"两点"],[-1,22971,"小"],[1,23053,"*"],[-1,23059,"是"],[1,23119,"你"],[-1,23120,"视"],[1,23491,"\n\n\n\n\n"]],[14372,14372],[23496,23496]]],[1527005914982,[null,[[1,14372,"\n\n\n\n\n"],[-1,14372,"到过的地方"],[1,14409,"都"],[-1,14409,"\n"],[1,14472,"\n"],[-1,14472,"用"],[1,14733,"\n\n"],[-1,14733,"唯一"],[-1,14896,"\n"],[1,15482,"\n"],[1,15503,"\n"],[-1,15503,"上"],[-1,15514,"\n"],[1,15769,"同"],[-1,15769,""],[1,22935,"\n"],[-1,22935," "],[1,22966,"\n"],[-1,22966,"两点"],[1,22972,"小"],[-1,23053,"*"],[1,23060,"是"],[-1,23119,"你"],[1,23121,"视"],[-1,23491,"\n\n\n\n\n"]],[23496,23496],[14372,14372]]],[1527005878079,["Re@Re.local",[[-1,23489,"试图"]],[23491,23491],[23489,23489]]],[1527005892923,["Re@Re.local",[[1,23489,"要找的零钱于某个硬币面额一致，那么大啊"]],[23489,23489],[23508,23508]]],[1527005893558,["Re@Re.local",[[-1,23504,"那么大啊"]],[23508,23508],[23504,23504]]],[1527005897190,["Re@Re.local",[[1,23504,"那么答案便是个"]],[23504,23504],[23511,23511]]],[1527005897306,["Re@Re.local",[[-1,23510,"个"]],[23511,23511],[23510,23510]]],[1527005898660,["Re@Re.local",[[1,23510,"给"]],[23510,23510],[23511,23511]]],[1527005898792,["Re@Re.local",[[-1,23510,"给"]],[23511,23511],[23510,23510]]],[1527005899941,["Re@Re.local",[[1,23510,"找"]],[23510,23510],[23511,23511]]],[1527005903701,["Re@Re.local",[[-1,23508,"便是找"]],[23511,23511],[23508,23508]]],[1527005907922,["Re@Re.local",[[1,23508,"便是只需要一个硬币"]],[23508,23508],[23517,23517]]],[1527005909549,["Re@Re.local",[[-1,23515,"硬币"]],[23517,23517],[23515,23515]]],[1527005911197,["Re@Re.local",[[1,23515,"该硬币。"]],[23515,23515],[23519,23519]]],[1527005911971,["Re@Re.local",[[1,23524,"\n"]],[23519,23519],[23520,23520]]],[1527005912234,["Re@Re.local",[[1,23525,"\n"]],[23520,23520],[23521,23521]]],[1527005913933,["Re@Re.local",[[1,23521,"如果"]],[23521,23521],[23523,23523]]],[1527005974968,[null,[[-1,14372,"\n\n\n\n\n"],[1,14377,"到过的地方"],[-1,14409,"都"],[1,14410,"\n"],[-1,14472,"\n"],[1,14473,"用"],[-1,14733,"\n\n"],[1,14735,"唯一"],[1,14896,"\n"],[-1,15481,"\n"],[-1,15503,"\n"],[1,15504,"上"],[1,15514,"\n"],[-1,15768,"同"],[1,15769,""],[-1,22935,"\n"],[1,22936," "],[-1,22966,"\n"],[1,22967,"两点"],[-1,22971,"小"],[1,23053,"*"],[-1,23059,"是"],[1,23119,"你"],[-1,23120,"视"],[1,23523,"\n\n\n\n\n"]],[14372,14372],[23528,23528]]],[1527005974968,[null,[[1,14372,"\n\n\n\n\n"],[-1,14372,"到过的地方"],[1,14409,"都"],[-1,14409,"\n"],[1,14472,"\n"],[-1,14472,"用"],[1,14733,"\n\n"],[-1,14733,"唯一"],[-1,14896,"\n"],[1,15482,"\n"],[1,15503,"\n"],[-1,15503,"上"],[-1,15514,"\n"],[1,15769,"同"],[-1,15769,""],[1,22935,"\n"],[-1,22935," "],[1,22966,"\n"],[-1,22966,"两点"],[1,22972,"小"],[-1,23053,"*"],[1,23060,"是"],[-1,23119,"你"],[1,23121,"视"],[-1,23523,"\n\n\n\n\n"]],[23528,23528],[14372,14372]]],[1527005927058,["Re@Re.local",[[1,23523,"面额并不匹配，那么便有了集中选择。"]],[23523,23523],[23540,23540]]],[1527005928883,["Re@Re.local",[[-1,23535,"集中选择。"]],[23540,23540],[23535,23535]]],[1527005931615,["Re@Re.local",[[1,23535,"几种选择。"]],[23535,23535],[23540,23540]]],[1527006035055,[null,[[-1,14372,"\n\n\n\n\n"],[1,14377,"到过的地方"],[-1,14409,"都"],[1,14410,"\n"],[-1,14472,"\n"],[1,14473,"用"],[-1,14733,"\n\n"],[1,14735,"唯一"],[1,14896,"\n"],[-1,15481,"\n"],[-1,15503,"\n"],[1,15504,"上"],[1,15514,"\n"],[-1,15768,"同"],[1,15769,""],[-1,22935,"\n"],[1,22936," "],[-1,22966,"\n"],[1,22967,"两点"],[-1,22971,"小"],[1,23053,"*"],[-1,23059,"是"],[1,23119,"你"],[-1,23120,"视"],[1,23540,"\n\n\n\n\n"]],[14372,14372],[23545,23545]]],[1527006035055,[null,[[1,14372,"\n\n\n\n\n"],[-1,14372,"到过的地方"],[1,14409,"都"],[-1,14409,"\n"],[1,14472,"\n"],[-1,14472,"用"],[1,14733,"\n\n"],[-1,14733,"唯一"],[-1,14896,"\n"],[1,15482,"\n"],[1,15503,"\n"],[-1,15503,"上"],[-1,15514,"\n"],[1,15769,"同"],[-1,15769,""],[1,22935,"\n"],[-1,22935," "],[1,22966,"\n"],[-1,22966,"两点"],[1,22972,"小"],[-1,23053,"*"],[1,23060,"是"],[-1,23119,"你"],[1,23121,"视"],[-1,23540,"\n\n\n\n\n"]],[23545,23545],[14372,14372]]],[1527005977014,["Re@Re.local",[[1,23542,"是1个"]],[23542,23542],[23545,23545]]],[1527005978949,["Re@Re.local",[[-1,23543,"1个"]],[23545,23545],[23543,23543]]],[1527005992413,["Re@Re.local",[[1,23543,"1个美分加上"]],[23543,23543],[23549,23549]]],[1527006005533,["Re@Re.local",[[-1,23543,"1个美分加上"]],[23549,23549],[23543,23543]]],[1527006007772,["Re@Re.local",[[1,23543,"原始"]],[23543,23543],[23545,23545]]],[1527006015120,["Re@Re.local",[[-1,23543,"原始"]],[23545,23545],[23543,23543]]],[1527006017508,["Re@Re.local",[[1,23543,"原始所"]],[23543,23543],[23546,23546]]],[1527006017606,["Re@Re.local",[[-1,23545,"所"]],[23546,23546],[23545,23545]]],[1527006029365,["Re@Re.local",[[1,23545,"所需找零减去1个美分"]],[23545,23545],[23555,23555]]],[1527006095002,[null,[[-1,14372,"\n\n\n\n\n"],[1,14377,"到过的地方"],[-1,14409,"都"],[1,14410,"\n"],[-1,14472,"\n"],[1,14473,"用"],[-1,14733,"\n\n"],[1,14735,"唯一"],[1,14896,"\n"],[-1,15481,"\n"],[-1,15503,"\n"],[1,15504,"上"],[1,15514,"\n"],[-1,15768,"同"],[1,15769,""],[-1,22935,"\n"],[1,22936," "],[-1,22966,"\n"],[1,22967,"两点"],[-1,22971,"小"],[1,23053,"*"],[-1,23059,"是"],[1,23119,"你"],[-1,23120,"视"],[1,23540,"可以"],[-1,23541,"1个"],[1,23555,"\n\n\n\n\n"]],[14372,14372],[23560,23560]]],[1527006095002,[null,[[1,14372,"\n\n\n\n\n"],[-1,14372,"到过的地方"],[1,14409,"都"],[-1,14409,"\n"],[1,14472,"\n"],[-1,14472,"用"],[1,14733,"\n\n"],[-1,14733,"唯一"],[-1,14896,"\n"],[1,15482,"\n"],[1,15503,"\n"],[-1,15503,"上"],[-1,15514,"\n"],[1,15769,"同"],[-1,15769,""],[1,22935,"\n"],[-1,22935," "],[1,22966,"\n"],[-1,22966,"两点"],[1,22972,"小"],[-1,23053,"*"],[1,23060,"是"],[-1,23119,"你"],[1,23121,"视"],[-1,23540,"可以"],[1,23543,"1个"],[-1,23555,"\n\n\n\n\n"]],[23560,23560],[14372,14372]]],[1527006047407,["Re@Re.local",[[1,23555,"后的值再球"]],[23555,23555],[23560,23560]]],[1527006048137,["Re@Re.local",[[-1,23559,"球"]],[23560,23560],[23559,23559]]],[1527006057190,["Re@Re.local",[[1,23559,"求最小值，也可以是减去10"]],[23559,23559],[23572,23572]]],[1527006061177,["Re@Re.local",[[-1,23570,"10"]],[23572,23572],[23570,23570]]],[1527006063920,["Re@Re.local",[[1,23570,"5美分的"]],[23570,23570],[23574,23574]]],[1527006064076,["Re@Re.local",[[-1,23573,"的"]],[23574,23574],[23573,23573]]],[1527006070177,["Re@Re.local",[[1,23573,"后的值求最小值...等等。"]],[23573,23573],[23586,23586]]],[1527006154984,[null,[[-1,14372,"\n\n\n\n\n"],[1,14377,"到过的地方"],[-1,14409,"都"],[1,14410,"\n"],[-1,14472,"\n"],[1,14473,"用"],[-1,14733,"\n\n"],[1,14735,"唯一"],[1,14896,"\n"],[-1,15481,"\n"],[-1,15503,"\n"],[1,15504,"上"],[1,15514,"\n"],[-1,15768,"同"],[1,15769,""],[-1,22935,"\n"],[1,22936," "],[-1,22966,"\n"],[1,22967,"两点"],[-1,22971,"小"],[1,23053,"*"],[-1,23059,"是"],[1,23119,"你"],[-1,23120,"视"],[1,23540,"可以"],[-1,23541,"1个"],[1,23586,"\n\n\n\n\n"]],[14372,14372],[23591,23591]]],[1527006154984,[null,[[1,14372,"\n\n\n\n\n"],[-1,14372,"到过的地方"],[1,14409,"都"],[-1,14409,"\n"],[1,14472,"\n"],[-1,14472,"用"],[1,14733,"\n\n"],[-1,14733,"唯一"],[-1,14896,"\n"],[1,15482,"\n"],[1,15503,"\n"],[-1,15503,"上"],[-1,15514,"\n"],[1,15769,"同"],[-1,15769,""],[1,22935,"\n"],[-1,22935," "],[1,22966,"\n"],[-1,22966,"两点"],[1,22972,"小"],[-1,23053,"*"],[1,23060,"是"],[-1,23119,"你"],[1,23121,"视"],[-1,23540,"可以"],[1,23543,"1个"],[-1,23586,"\n\n\n\n\n"]],[23591,23591],[14372,14372]]],[1527006142557,["Re@Re.local",[[1,23586,"为"]],[23586,23586],[23587,23587]]],[1527006142712,["Re@Re.local",[[-1,23586,"为"]],[23587,23587],[23586,23586]]],[1527006143159,["Re@Re.local",[[1,23586,"为"]],[23586,23586],[23587,23587]]],[1527006143355,["Re@Re.local",[[-1,23586,"为"]],[23587,23587],[23586,23586]]],[1527006144671,["Re@Re.local",[[1,23586,"为何"]],[23586,23586],[23588,23588]]],[1527006145024,["Re@Re.local",[[-1,23586,"为何"]],[23588,23588],[23586,23586]]],[1527006152176,["Re@Re.local",[[1,23591,"\n"]],[23586,23586],[23587,23587]]],[1527006152398,["Re@Re.local",[[1,23592,"\n"]],[23587,23587],[23588,23588]]],[1527006214983,[null,[[-1,14372,"\n\n\n\n\n"],[1,14377,"到过的地方"],[-1,14409,"都"],[1,14410,"\n"],[-1,14472,"\n"],[1,14473,"用"],[-1,14733,"\n\n"],[1,14735,"唯一"],[1,14896,"\n"],[-1,15481,"\n"],[-1,15503,"\n"],[1,15504,"上"],[1,15514,"\n"],[-1,15768,"同"],[1,15769,""],[-1,22935,"\n"],[1,22936," "],[-1,22966,"\n"],[1,22967,"两点"],[-1,22971,"小"],[1,23053,"*"],[-1,23059,"是"],[1,23119,"你"],[-1,23120,"视"],[1,23540,"可以"],[-1,23541,"1个"],[1,23588,"\n\n\n\n\n"]],[14372,14372],[23593,23593]]],[1527006214984,[null,[[1,14372,"\n\n\n\n\n"],[-1,14372,"到过的地方"],[1,14409,"都"],[-1,14409,"\n"],[1,14472,"\n"],[-1,14472,"用"],[1,14733,"\n\n"],[-1,14733,"唯一"],[-1,14896,"\n"],[1,15482,"\n"],[1,15503,"\n"],[-1,15503,"上"],[-1,15514,"\n"],[1,15769,"同"],[-1,15769,""],[1,22935,"\n"],[-1,22935," "],[1,22966,"\n"],[-1,22966,"两点"],[1,22972,"小"],[-1,23053,"*"],[1,23060,"是"],[-1,23119,"你"],[1,23121,"视"],[-1,23540,"可以"],[1,23543,"1个"],[-1,23588,"\n\n\n\n\n"]],[23593,23593],[14372,14372]]],[1527006194297,["Re@Re.local",[[1,23586,"因此，原始所需找零所需"]],[23586,23586],[23597,23597]]],[1527006194882,["Re@Re.local",[[-1,23595,"所需"]],[23597,23597],[23595,23595]]],[1527006209708,["Re@Re.local",[[1,23595,"的最小硬币数可以用下面的算法来计算："]],[23595,23595],[23613,23613]]],[1527006209990,["Re@Re.local",[[1,23620,"\n"]],[23613,23613],[23614,23614]]],[1527006211432,["Re@Re.local",[[1,23614,"numCoins=min⎧⎩⎨⎪⎪1+numCoins(originalamount−1)1+numCoins(originalamount−5)1+numCoins(originalamount−10)1+numCoins(originalamount−25)numCoins=min{1+numCoins(originalamount−1)1+numCoins(originalamount−5)1+numCoins(originalamount−10)1+numCoins(originalamount−25)"]],[23614,23614],[23872,23872]]],[1527006275002,[null,[[-1,14372,"\n\n\n\n\n"],[1,14377,"到过的地方"],[-1,14409,"都"],[1,14410,"\n"],[-1,14472,"\n"],[1,14473,"用"],[-1,14733,"\n\n"],[1,14735,"唯一"],[1,14896,"\n"],[-1,15481,"\n"],[-1,15503,"\n"],[1,15504,"上"],[1,15514,"\n"],[-1,15768,"同"],[1,15769,""],[-1,22935,"\n"],[1,22936," "],[-1,22966,"\n"],[1,22967,"两点"],[-1,22971,"小"],[1,23053,"*"],[-1,23059,"是"],[1,23119,"你"],[-1,23120,"视"],[1,23540,"可以"],[-1,23541,"1个"],[1,23874,"\n\n\n\n\n"]],[14372,14372],[23879,23879]]],[1527006275002,[null,[[1,14372,"\n\n\n\n\n"],[-1,14372,"到过的地方"],[1,14409,"都"],[-1,14409,"\n"],[1,14472,"\n"],[-1,14472,"用"],[1,14733,"\n\n"],[-1,14733,"唯一"],[-1,14896,"\n"],[1,15482,"\n"],[1,15503,"\n"],[-1,15503,"上"],[-1,15514,"\n"],[1,15769,"同"],[-1,15769,""],[1,22935,"\n"],[-1,22935," "],[1,22966,"\n"],[-1,22966,"两点"],[1,22972,"小"],[-1,23053,"*"],[1,23060,"是"],[-1,23119,"你"],[1,23121,"视"],[-1,23540,"可以"],[1,23543,"1个"],[-1,23874,"\n\n\n\n\n"]],[23879,23879],[14372,14372]]],[1527006239050,["Re@Re.local",[[1,23614,"¥"]],[23614,23614],[23615,23615]]],[1527006240229,["Re@Re.local",[[-1,23614,"¥"]],[23615,23615],[23614,23614]]],[1527006240886,["Re@Re.local",[[1,23614,"$"]],[23614,23614],[23615,23615]]],[1527006242236,["Re@Re.local",[[1,23873,"$"]],[23873,23873],[23874,23874]]],[1527006263069,["Re@Re.local",[[1,23615,"$"]],[23614,23614],[23615,23615]]],[1527006265987,["Re@Re.local",[[1,23875,"$"]],[23875,23875],[23876,23876]]],[1527006268274,["Re@Re.local",[[-1,23875,"$"]],[23876,23876],[23875,23875]]],[1527006269456,["Re@Re.local",[[-1,23615,"$"]],[23615,23615],[23614,23614]]],[1527006273847,["Re@Re.local",[[-1,23627,"⎧⎩⎨⎪⎪"]],[23627,23632],[23627,23627]]],[1527006335159,[null,[[-1,14372,"\n\n\n\n\n"],[1,14377,"到过的地方"],[-1,14409,"都"],[1,14410,"\n"],[-1,14472,"\n"],[1,14473,"用"],[-1,14733,"\n\n"],[1,14735,"唯一"],[1,14896,"\n"],[-1,15481,"\n"],[-1,15503,"\n"],[1,15504,"上"],[1,15514,"\n"],[-1,15768,"同"],[1,15769,""],[-1,22935,"\n"],[1,22936," "],[-1,22966,"\n"],[1,22967,"两点"],[-1,22971,"小"],[1,23053,"*"],[-1,23059,"是"],[1,23119,"你"],[-1,23120,"视"],[1,23540,"可以"],[-1,23541,"1个"],[1,23871,"\n\n\n\n\n"]],[14372,14372],[23876,23876]]],[1527006335159,[null,[[1,14372,"\n\n\n\n\n"],[-1,14372,"到过的地方"],[1,14409,"都"],[-1,14409,"\n"],[1,14472,"\n"],[-1,14472,"用"],[1,14733,"\n\n"],[-1,14733,"唯一"],[-1,14896,"\n"],[1,15482,"\n"],[1,15503,"\n"],[-1,15503,"上"],[-1,15514,"\n"],[1,15769,"同"],[-1,15769,""],[1,22935,"\n"],[-1,22935," "],[1,22966,"\n"],[-1,22966,"两点"],[1,22972,"小"],[-1,23053,"*"],[1,23060,"是"],[-1,23119,"你"],[1,23121,"视"],[-1,23540,"可以"],[1,23543,"1个"],[-1,23871,"\n\n\n\n\n"]],[23876,23876],[14372,14372]]],[1527006277924,["Re@Re.local",[[1,23869,")"]],[23869,23869],[23870,23870]]],[1527006284206,["Re@Re.local",[[1,23656,","]],[23656,23656],[23657,23657]]],[1527006287216,["Re@Re.local",[[1,23714,","]],[23714,23714],[23715,23715]]],[1527006304921,["Re@Re.local",[[-1,23744,"numCoins=min{1+numCoins(originalamount−1)1+numCoins(originalamount−5)1+numCoins(originalamount−10)1+numCoins(originalamount−25))"]],[23744,23872],[23744,23744]]],[1527006307693,["Re@Re.local",[[1,23744,")"]],[23744,23744],[23745,23745]]],[1527006311198,["Re@Re.local",[[1,23753,"\n"]],[23746,23746],[23747,23747]]],[1527006321710,["Re@Re.local",[[1,23754,"\n"]],[23747,23747],[23748,23748]]],[1527006323211,["Re@Re.local",[[-1,23754,"\n"]],[23748,23748],[23747,23747]]],[1527006324090,["Re@Re.local",[[1,23747,"shi"]],[23747,23747],[23750,23750]]],[1527006324696,["Re@Re.local",[[-1,23747,"shi"]],[23750,23750],[23747,23747]]],[1527006334717,["Re@Re.local",[[1,23747,"实现代码如代码7所示。在第三行"]],[23747,23747],[23762,23762]]],[1527006397014,[null,[[-1,14372,"\n\n\n\n\n"],[1,14377,"到过的地方"],[-1,14409,"都"],[1,14410,"\n"],[-1,14472,"\n"],[1,14473,"用"],[-1,14733,"\n\n"],[1,14735,"唯一"],[1,14896,"\n"],[-1,15481,"\n"],[-1,15503,"\n"],[1,15504,"上"],[1,15514,"\n"],[-1,15768,"同"],[1,15769,""],[-1,22935,"\n"],[1,22936," "],[-1,22966,"\n"],[1,22967,"两点"],[-1,22971,"小"],[1,23053,"*"],[-1,23059,"是"],[1,23119,"你"],[-1,23120,"视"],[1,23540,"可以"],[-1,23541,"1个"],[1,23627,"("],[-1,23655,"1"],[1,23657,"1"],[-1,23713,"1"],[1,23715,"1"],[-1,23743,"n)\n"],[1,23746,")$"],[1,23764,"\n\n\n\n\n"]],[14372,14372],[23769,23769]]],[1527006397014,[null,[[1,14372,"\n\n\n\n\n"],[-1,14372,"到过的地方"],[1,14409,"都"],[-1,14409,"\n"],[1,14472,"\n"],[-1,14472,"用"],[1,14733,"\n\n"],[-1,14733,"唯一"],[-1,14896,"\n"],[1,15482,"\n"],[1,15503,"\n"],[-1,15503,"上"],[-1,15514,"\n"],[1,15769,"同"],[-1,15769,""],[1,22935,"\n"],[-1,22935," "],[1,22966,"\n"],[-1,22966,"两点"],[1,22972,"小"],[-1,23053,"*"],[1,23060,"是"],[-1,23119,"你"],[1,23121,"视"],[-1,23540,"可以"],[1,23543,"1个"],[-1,23627,"("],[1,23656,"1"],[-1,23657,"1"],[1,23714,"1"],[-1,23715,"1"],[1,23744,"n)\n"],[-1,23744,")$"],[-1,23764,"\n\n\n\n\n"]],[23769,23769],[14372,14372]]],[1527006336422,["Re@Re.local",[[1,23762,"中检测了"]],[23762,23762],[23766,23766]]],[1527006339780,["Re@Re.local",[[1,23762,"椰树"],[1,23766,"y"]],[23762,23762],[23764,23764]]],[1527006340221,["Re@Re.local",[[-1,23762,"椰树"]],[23764,23764],[23762,23762]]],[1527006341658,["Re@Re.local",[[1,23762,"椰树"]],[23762,23762],[23764,23764]]],[1527006342696,["Re@Re.local",[[-1,23762,"椰树"]],[23764,23764],[23762,23762]]],[1527006343581,["Re@Re.local",[[-1,23766,"y"]],[23767,23767],[23766,23766]]],[1527006346095,["Re@Re.local",[[1,23766,"约束条件。"]],[23766,23766],[23771,23771]]],[1527006347121,["Re@Re.local",[[-1,23770,"。"]],[23771,23771],[23770,23770]]],[1527006348498,["Re@Re.local",[[1,23770,"，即"]],[23770,23770],[23772,23772]]],[1527006350526,["Re@Re.local",[[-1,23770,"，即"]],[23772,23772],[23770,23770]]],[1527006388166,["Re@Re.local",[[1,23770,"，即试图用一个硬币来实现找零。"]],[23770,23770],[23785,23785]]],[1527006457096,[null,[[-1,14372,"\n\n\n\n\n"],[1,14377,"到过的地方"],[-1,14409,"都"],[1,14410,"\n"],[-1,14472,"\n"],[1,14473,"用"],[-1,14733,"\n\n"],[1,14735,"唯一"],[1,14896,"\n"],[-1,15481,"\n"],[-1,15503,"\n"],[1,15504,"上"],[1,15514,"\n"],[-1,15768,"同"],[1,15769,""],[-1,22935,"\n"],[1,22936," "],[-1,22966,"\n"],[1,22967,"两点"],[-1,22971,"小"],[1,23053,"*"],[-1,23059,"是"],[1,23119,"你"],[-1,23120,"视"],[1,23540,"可以"],[-1,23541,"1个"],[1,23627,"("],[-1,23655,"1"],[1,23657,"1"],[1,23713,","],[-1,23714,","],[-1,23743,"n)\n"],[1,23746,")$"],[1,23787,"\n\n\n\n\n"]],[14372,14372],[23792,23792]]],[1527006457096,[null,[[1,14372,"\n\n\n\n\n"],[-1,14372,"到过的地方"],[1,14409,"都"],[-1,14409,"\n"],[1,14472,"\n"],[-1,14472,"用"],[1,14733,"\n\n"],[-1,14733,"唯一"],[-1,14896,"\n"],[1,15482,"\n"],[1,15503,"\n"],[-1,15503,"上"],[-1,15514,"\n"],[1,15769,"同"],[-1,15769,""],[1,22935,"\n"],[-1,22935," "],[1,22966,"\n"],[-1,22966,"两点"],[1,22972,"小"],[-1,23053,"*"],[1,23060,"是"],[-1,23119,"你"],[1,23121,"视"],[-1,23540,"可以"],[1,23543,"1个"],[-1,23627,"("],[1,23656,"1"],[-1,23657,"1"],[-1,23714,","],[1,23716,","],[1,23744,"n)\n"],[-1,23744,")$"],[-1,23787,"\n\n\n\n\n"]],[23792,23792],[14372,14372]]],[1527006412722,["Re@Re.local",[[1,23785,"如果没有找到对应找零的"]],[23785,23785],[23796,23796]]],[1527006416903,["Re@Re.local",[[1,23791,"恰好"]],[23791,23791],[23793,23793]]],[1527006454845,["Re@Re.local",[[1,23798,"硬币，则进行上述递归调用。行5"]],[23798,23798],[23813,23813]]],[1527006455311,["Re@Re.local",[[-1,23812,"5"]],[23813,23813],[23812,23812]]],[1527006456857,["Re@Re.local",[[1,23812,"6给出"]],[23812,23812],[23815,23815]]],[1527006517230,[null,[[-1,14372,"\n\n\n\n\n"],[1,14377,"到过的地方"],[-1,14409,"都"],[1,14410,"\n"],[-1,14472,"\n"],[1,14473,"用"],[-1,14733,"\n\n"],[1,14735,"唯一"],[1,14896,"\n"],[-1,15481,"\n"],[-1,15503,"\n"],[1,15504,"上"],[1,15514,"\n"],[-1,15768,"同"],[1,15769,""],[-1,22935,"\n"],[1,22936," "],[-1,22966,"\n"],[1,22967,"两点"],[-1,22971,"小"],[1,23053,"*"],[-1,23059,"是"],[1,23119,"你"],[-1,23120,"视"],[1,23540,"可以"],[-1,23541,"1个"],[1,23627,"("],[-1,23655,"1"],[1,23657,"1"],[1,23713,","],[-1,23714,","],[-1,23743,"n)\n"],[1,23746,")$"],[1,23817,"\n\n\n\n\n"]],[14372,14372],[23822,23822]]],[1527006517231,[null,[[1,14372,"\n\n\n\n\n"],[-1,14372,"到过的地方"],[1,14409,"都"],[-1,14409,"\n"],[1,14472,"\n"],[-1,14472,"用"],[1,14733,"\n\n"],[-1,14733,"唯一"],[-1,14896,"\n"],[1,15482,"\n"],[1,15503,"\n"],[-1,15503,"上"],[-1,15514,"\n"],[1,15769,"同"],[-1,15769,""],[1,22935,"\n"],[-1,22935," "],[1,22966,"\n"],[-1,22966,"两点"],[1,22972,"小"],[-1,23053,"*"],[1,23060,"是"],[-1,23119,"你"],[1,23121,"视"],[-1,23540,"可以"],[1,23543,"1个"],[-1,23627,"("],[1,23656,"1"],[-1,23657,"1"],[-1,23714,","],[1,23716,","],[1,23744,"n)\n"],[-1,23744,")$"],[-1,23817,"\n\n\n\n\n"]],[23822,23822],[14372,14372]]],[1527006457480,["Re@Re.local",[[1,23815,"了"]],[23815,23815],[23816,23816]]],[1527006493872,["Re@Re.local",[[-1,23813,"给出了"]],[23816,23816],[23813,23813]]],[1527006505730,["Re@Re.local",[[1,23813,"使用列表表达式来过滤除"]],[23813,23813],[23824,23824]]],[1527006506483,["Re@Re.local",[[-1,23821,"过滤除"]],[23824,23824],[23821,23821]]],[1527006507536,["Re@Re.local",[[1,23821,"绿"]],[23821,23821],[23822,23822]]],[1527006507647,["Re@Re.local",[[-1,23821,"绿"]],[23822,23822],[23821,23821]]],[1527006516344,["Re@Re.local",[[1,23821,"过滤出那些比当前所需找零值"]],[23821,23821],[23834,23834]]],[1527006577114,[null,[[-1,14372,"\n\n\n\n\n"],[1,14377,"到过的地方"],[-1,14409,"都"],[1,14410,"\n"],[-1,14472,"\n"],[1,14473,"用"],[-1,14733,"\n\n"],[1,14735,"唯一"],[1,14896,"\n"],[-1,15481,"\n"],[-1,15503,"\n"],[1,15504,"上"],[1,15514,"\n"],[-1,15768,"同"],[1,15769,""],[-1,22935,"\n"],[1,22936," "],[-1,22966,"\n"],[1,22967,"两点"],[-1,22971,"小"],[1,23053,"*"],[-1,23059,"是"],[1,23119,"你"],[-1,23120,"视"],[1,23540,"可以"],[-1,23541,"1个"],[1,23627,"("],[-1,23655,"1"],[1,23657,"1"],[1,23713,","],[-1,23714,","],[-1,23743,"n)\n"],[1,23746,")$"],[1,23836,"\n\n\n\n\n"]],[14372,14372],[23841,23841]]],[1527006577114,[null,[[1,14372,"\n\n\n\n\n"],[-1,14372,"到过的地方"],[1,14409,"都"],[-1,14409,"\n"],[1,14472,"\n"],[-1,14472,"用"],[1,14733,"\n\n"],[-1,14733,"唯一"],[-1,14896,"\n"],[1,15482,"\n"],[1,15503,"\n"],[-1,15503,"上"],[-1,15514,"\n"],[1,15769,"同"],[-1,15769,""],[1,22935,"\n"],[-1,22935," "],[1,22966,"\n"],[-1,22966,"两点"],[1,22972,"小"],[-1,23053,"*"],[1,23060,"是"],[-1,23119,"你"],[1,23121,"视"],[-1,23540,"可以"],[1,23543,"1个"],[-1,23627,"("],[1,23656,"1"],[-1,23657,"1"],[-1,23714,","],[1,23716,","],[1,23744,"n)\n"],[-1,23744,")$"],[-1,23836,"\n\n\n\n\n"]],[23841,23841],[14372,14372]]],[1527006526674,["Re@Re.local",[[1,23836,"更小的硬币。递归"]],[23836,23836],[23844,23844]]],[1527006527041,["Re@Re.local",[[-1,23842,"递归"]],[23844,23844],[23842,23842]]],[1527006531145,["Re@Re.local",[[1,23842,"该递归调用"]],[23842,23842],[23847,23847]]],[1527006574786,["Re@Re.local",[[1,23844,"通过减少"]],[23844,23844],[23848,23848]]],[1527006575331,["Re@Re.local",[[-1,23846,"减少"]],[23848,23848],[23846,23846]]],[1527006637117,[null,[[-1,14372,"\n\n\n\n\n"],[1,14377,"到过的地方"],[-1,14409,"都"],[1,14410,"\n"],[-1,14472,"\n"],[1,14473,"用"],[-1,14733,"\n\n"],[1,14735,"唯一"],[1,14896,"\n"],[-1,15481,"\n"],[-1,15503,"\n"],[1,15504,"上"],[1,15514,"\n"],[-1,15768,"同"],[1,15769,""],[-1,22935,"\n"],[1,22936," "],[-1,22966,"\n"],[1,22967,"两点"],[-1,22971,"小"],[1,23053,"*"],[-1,23059,"是"],[1,23119,"你"],[-1,23120,"视"],[1,23540,"可以"],[-1,23541,"1个"],[1,23627,"("],[-1,23655,"1"],[1,23657,"1"],[-1,23713,"1"],[1,23715,"1"],[-1,23743,"n)\n"],[1,23746,")$"],[-1,23834,"\n\n"],[1,23836,"面额"],[1,23849,"\n\n\n\n\n\n\n"]],[14372,14372],[23856,23856]]],[1527006637117,[null,[[1,14372,"\n\n\n\n\n"],[-1,14372,"到过的地方"],[1,14409,"都"],[-1,14409,"\n"],[1,14472,"\n"],[-1,14472,"用"],[1,14733,"\n\n"],[-1,14733,"唯一"],[-1,14896,"\n"],[1,15482,"\n"],[1,15503,"\n"],[-1,15503,"上"],[-1,15514,"\n"],[1,15769,"同"],[-1,15769,""],[1,22935,"\n"],[-1,22935," "],[1,22966,"\n"],[-1,22966,"两点"],[1,22972,"小"],[-1,23053,"*"],[1,23060,"是"],[-1,23119,"你"],[1,23121,"视"],[-1,23540,"可以"],[1,23543,"1个"],[-1,23627,"("],[1,23656,"1"],[-1,23657,"1"],[1,23714,"1"],[-1,23715,"1"],[1,23744,"n)\n"],[-1,23744,")$"],[1,23834,"\n\n"],[-1,23834,"面额"],[-1,23849,"\n\n\n\n\n\n\n"]],[23856,23856],[14372,14372]]],[1527006578467,["Re@Re.local",[[-1,23843,"递通过归调用"]],[23849,23849],[23843,23843]]],[1527006588435,["Re@Re.local",[[1,23843,"递归调用通过减少可用列表的值"]],[23843,23843],[23857,23857]]],[1527006601068,["Re@Re.local",[[-1,23845,"调用通过减少可用列表的值"]],[23857,23857],[23845,23845]]],[1527006605691,["Re@Re.local",[[1,23845,"调用也减少了所"]],[23845,23845],[23852,23852]]],[1527006607534,["Re@Re.local",[[-1,23848,"减少了所"]],[23852,23852],[23848,23848]]],[1527006608709,["Re@Re.local",[[1,23848,"通过"]],[23848,23848],[23850,23850]]],[1527006618017,["Re@Re.local",[[-1,23847,"也通过"]],[23850,23850],[23847,23847]]],[1527006634703,["Re@Re.local",[[1,23847,"也对所需找零值减去了选用的硬币面额。"]],[23847,23847],[23865,23865]]],[1527006697118,[null,[[-1,14372,"\n\n\n\n\n"],[1,14377,"到过的地方"],[-1,14409,"都"],[1,14410,"\n"],[-1,14472,"\n"],[1,14473,"用"],[-1,14733,"\n\n"],[1,14735,"唯一"],[1,14896,"\n"],[-1,15481,"\n"],[-1,15503,"\n"],[1,15504,"上"],[1,15514,"\n"],[-1,15768,"同"],[1,15769,""],[-1,22935,"\n"],[1,22936," "],[-1,22966,"\n"],[1,22967,"两点"],[-1,22971,"小"],[1,23053,"*"],[-1,23059,"是"],[1,23119,"你"],[-1,23120,"视"],[1,23540,"可以"],[-1,23541,"1个"],[1,23627,"("],[-1,23655,"1"],[1,23657,"1"],[-1,23713,"1"],[1,23715,"1"],[-1,23743,"n)\n"],[1,23746,")$"],[-1,23834,"\n\n"],[1,23836,"面额"],[1,23865,"\n\n\n\n\n\n\n"]],[14372,14372],[23872,23872]]],[1527006697118,[null,[[1,14372,"\n\n\n\n\n"],[-1,14372,"到过的地方"],[1,14409,"都"],[-1,14409,"\n"],[1,14472,"\n"],[-1,14472,"用"],[1,14733,"\n\n"],[-1,14733,"唯一"],[-1,14896,"\n"],[1,15482,"\n"],[1,15503,"\n"],[-1,15503,"上"],[-1,15514,"\n"],[1,15769,"同"],[-1,15769,""],[1,22935,"\n"],[-1,22935," "],[1,22966,"\n"],[-1,22966,"两点"],[1,22972,"小"],[-1,23053,"*"],[1,23060,"是"],[-1,23119,"你"],[1,23121,"视"],[-1,23540,"可以"],[1,23543,"1个"],[-1,23627,"("],[1,23656,"1"],[-1,23657,"1"],[1,23714,"1"],[-1,23715,"1"],[1,23744,"n)\n"],[-1,23744,")$"],[1,23834,"\n\n"],[-1,23834,"面额"],[-1,23865,"\n\n\n\n\n\n\n"]],[23872,23872],[14372,14372]]],[1527006677402,["Re@Re.local",[[1,23865,"递归调用"]],[23865,23865],[23869,23869]]],[1527006678108,["Re@Re.local",[[-1,23865,"递归调用"]],[23869,23869],[23865,23865]]],[1527006680352,["Re@Re.local",[[1,23865,"行7是"]],[23865,23865],[23868,23868]]],[1527006680430,["Re@Re.local",[[-1,23867,"是"]],[23868,23868],[23867,23867]]],[1527006692403,["Re@Re.local",[[1,23867,"进行了递归调用。质疑到，在同一行也对"]],[23867,23867],[23885,23885]]],[1527006757114,[null,[[-1,14372,"\n\n\n\n\n"],[1,14377,"到过的地方"],[-1,14409,"都"],[1,14410,"\n"],[-1,14472,"\n"],[1,14473,"用"],[-1,14733,"\n\n"],[1,14735,"唯一"],[1,14896,"\n"],[-1,15481,"\n"],[-1,15503,"\n"],[1,15504,"上"],[1,15514,"\n"],[-1,15768,"同"],[1,15769,""],[-1,22935,"\n"],[1,22936," "],[-1,22966,"\n"],[1,22967,"两点"],[-1,22971,"小"],[1,23053,"*"],[-1,23059,"是"],[1,23119,"你"],[-1,23120,"视"],[1,23540,"可以"],[-1,23541,"1个"],[1,23627,"("],[-1,23655,"1"],[1,23657,"1"],[-1,23713,"1"],[1,23715,"1"],[-1,23743,"n)\n"],[1,23746,")$"],[-1,23834,"\n\n"],[1,23836,"面额"],[1,23885,"\n\n\n\n\n\n\n"]],[14372,14372],[23892,23892]]],[1527006757114,[null,[[1,14372,"\n\n\n\n\n"],[-1,14372,"到过的地方"],[1,14409,"都"],[-1,14409,"\n"],[1,14472,"\n"],[-1,14472,"用"],[1,14733,"\n\n"],[-1,14733,"唯一"],[-1,14896,"\n"],[1,15482,"\n"],[1,15503,"\n"],[-1,15503,"上"],[-1,15514,"\n"],[1,15769,"同"],[-1,15769,""],[1,22935,"\n"],[-1,22935," "],[1,22966,"\n"],[-1,22966,"两点"],[1,22972,"小"],[-1,23053,"*"],[1,23060,"是"],[-1,23119,"你"],[1,23121,"视"],[-1,23540,"可以"],[1,23543,"1个"],[-1,23627,"("],[1,23656,"1"],[-1,23657,"1"],[1,23714,"1"],[-1,23715,"1"],[1,23744,"n)\n"],[-1,23744,")$"],[1,23834,"\n\n"],[-1,23834,"面额"],[-1,23885,"\n\n\n\n\n\n\n"]],[23892,23892],[14372,14372]]],[1527006698545,["Re@Re.local",[[-1,23883,"也对"]],[23885,23885],[23883,23883]]],[1527006706758,["Re@Re.local",[[1,23883,"也"]],[23883,23883],[23884,23884]]],[1527006706862,["Re@Re.local",[[-1,23883,"也"]],[23884,23884],[23883,23883]]],[1527006715152,["Re@Re.local",[[1,23883,"对硬币总数进行了+1，因为十一哦那个"]],[23883,23883],[23901,23901]]],[1527006715965,["Re@Re.local",[[-1,23896,"十一哦那个"]],[23901,23901],[23896,23896]]],[1527006718806,["Re@Re.local",[[1,23896,"使用了一个硬币。"]],[23896,23896],[23904,23904]]],[1527006817171,[null,[[-1,14372,"\n\n\n\n\n"],[1,14377,"到过的地方"],[-1,14409,"都"],[1,14410,"\n"],[-1,14472,"\n"],[1,14473,"用"],[-1,14733,"\n\n"],[1,14735,"唯一"],[1,14896,"\n"],[-1,15481,"\n"],[-1,15503,"\n"],[1,15504,"上"],[1,15514,"\n"],[-1,15768,"同"],[1,15769,""],[-1,22935,"\n"],[1,22936," "],[-1,22966,"\n"],[1,22967,"两点"],[-1,22971,"小"],[1,23053,"*"],[-1,23059,"是"],[1,23119,"你"],[-1,23120,"视"],[1,23540,"可以"],[-1,23541,"1个"],[1,23627,"("],[-1,23655,"1"],[1,23657,"1"],[-1,23713,"1"],[1,23715,"1"],[-1,23743,"n)\n"],[1,23746,")$"],[-1,23834,"\n\n"],[1,23836,"面额"],[1,23904,"\n\n\n\n\n\n\n"]],[14372,14372],[23911,23911]]],[1527006817171,[null,[[1,14372,"\n\n\n\n\n"],[-1,14372,"到过的地方"],[1,14409,"都"],[-1,14409,"\n"],[1,14472,"\n"],[-1,14472,"用"],[1,14733,"\n\n"],[-1,14733,"唯一"],[-1,14896,"\n"],[1,15482,"\n"],[1,15503,"\n"],[-1,15503,"上"],[-1,15514,"\n"],[1,15769,"同"],[-1,15769,""],[1,22935,"\n"],[-1,22935," "],[1,22966,"\n"],[-1,22966,"两点"],[1,22972,"小"],[-1,23053,"*"],[1,23060,"是"],[-1,23119,"你"],[1,23121,"视"],[-1,23540,"可以"],[1,23543,"1个"],[-1,23627,"("],[1,23656,"1"],[-1,23657,"1"],[1,23714,"1"],[-1,23715,"1"],[1,23744,"n)\n"],[-1,23744,")$"],[1,23834,"\n\n"],[-1,23834,"面额"],[-1,23904,"\n\n\n\n\n\n\n"]],[23911,23911],[14372,14372]]],[1527006785136,["Re@Re.local",[[1,23904,"在递归调用满足约束条件时，也丢"]],[23904,23904],[23919,23919]]],[1527006785954,["Re@Re.local",[[-1,23918,"丢"]],[23919,23919],[23918,23918]]],[1527006786794,["Re@Re.local",[[1,23918,"对"]],[23918,23918],[23919,23919]]],[1527006789131,["Re@Re.local",[[-1,23918,"对"]],[23919,23919],[23918,23918]]],[1527006791009,["Re@Re.local",[[1,23918,"要加1."]],[23918,23918],[23922,23922]]],[1527006791366,["Re@Re.local",[[1,23929,"\n"]],[23922,23922],[23923,23923]]],[1527006791839,["Re@Re.local",[[-1,23929,"\n"]],[23923,23923],[23922,23922]]],[1527006792019,["Re@Re.local",[[-1,23921,"."]],[23922,23922],[23921,23921]]],[1527006792296,["Re@Re.local",[[1,23921,"."]],[23921,23921],[23922,23922]]],[1527006792788,["Re@Re.local",[[1,23929,"\n"]],[23922,23922],[23923,23923]]],[1527006793185,["Re@Re.local",[[-1,23929,"\n"]],[23923,23923],[23922,23922]]],[1527006793391,["Re@Re.local",[[-1,23921,"."]],[23922,23922],[23921,23921]]],[1527006793789,["Re@Re.local",[[1,23921,"。"]],[23921,23921],[23922,23922]]],[1527006794456,["Re@Re.local",[[1,23929,"\n"]],[23922,23922],[23923,23923]]],[1527006794693,["Re@Re.local",[[1,23930,"\n"]],[23923,23923],[23924,23924]]],[1527006796942,["Re@Re.local",[[1,23924,"代码"]],[23924,23924],[23926,23926]]],[1527006797191,["Re@Re.local",[[-1,23924,"代码"]],[23926,23926],[23924,23924]]],[1527006799516,["Re@Re.local",[[1,23924,"**代码7**"]],[23924,23924],[23931,23931]]],[1527006799745,["Re@Re.local",[[1,23938,"\n"]],[23931,23931],[23932,23932]]],[1527006801474,["Re@Re.local",[[1,23932,"```Python"]],[23932,23932],[23941,23941]]],[1527006801673,["Re@Re.local",[[1,23948,"\n"]],[23941,23941],[23942,23942]]],[1527006810936,["Re@Re.local",[[1,23942,"def recMC(coinValueList,change):\n   minCoins = change\n   if change in coinValueList:\n     return 1\n   else:\n      for i in [c for c in coinValueList if c <= change]:\n         numCoins = 1 + recMC(coinValueList,change-i)\n         if numCoins < minCoins:\n            minCoins = numCoins\n   return minCoins\n\nprint(recMC([1,5,10,25],63))"]],[23942,23942],[24275,24275]]],[1527006811153,["Re@Re.local",[[1,24282,"\n"]],[24275,24275],[24276,24276]]],[1527006811979,["Re@Re.local",[[1,24276,"```"]],[24276,24276],[24279,24279]]],[1527006812315,["Re@Re.local",[[1,24286,"\n"]],[24279,24279],[24280,24280]]],[1527006878096,[null,[[-1,14372,"\n\n\n\n\n"],[1,14377,"到过的地方"],[-1,14409,"都"],[1,14410,"\n"],[-1,14472,"\n"],[1,14473,"用"],[-1,14733,"\n\n"],[1,14735,"唯一"],[1,14896,"\n"],[-1,15481,"\n"],[-1,15503,"\n"],[1,15504,"上"],[1,15514,"\n"],[-1,15768,"同"],[1,15769,""],[-1,22935,"\n"],[1,22936," "],[-1,22966,"\n"],[1,22967,"两点"],[-1,22971,"小"],[1,23053,"*"],[-1,23059,"是"],[1,23119,"你"],[-1,23120,"视"],[1,23540,"可以"],[-1,23541,"1个"],[1,23627,"("],[-1,23655,"1"],[1,23657,"1"],[-1,23713,"1"],[1,23715,"1"],[-1,23743,"n)\n"],[1,23746,")$"],[-1,23834,"\n\n"],[1,23836,"面额"],[-1,24279,""],[1,24279,"\n\n\n\n\n"]],[14372,14372],[24284,24284]]],[1527006878096,[null,[[1,14372,"\n\n\n\n\n"],[-1,14372,"到过的地方"],[1,14409,"都"],[-1,14409,"\n"],[1,14472,"\n"],[-1,14472,"用"],[1,14733,"\n\n"],[-1,14733,"唯一"],[-1,14896,"\n"],[1,15482,"\n"],[1,15503,"\n"],[-1,15503,"上"],[-1,15514,"\n"],[1,15769,"同"],[-1,15769,""],[1,22935,"\n"],[-1,22935," "],[1,22966,"\n"],[-1,22966,"两点"],[1,22972,"小"],[-1,23053,"*"],[1,23060,"是"],[-1,23119,"你"],[1,23121,"视"],[-1,23540,"可以"],[1,23543,"1个"],[-1,23627,"("],[1,23656,"1"],[-1,23657,"1"],[1,23714,"1"],[-1,23715,"1"],[1,23744,"n)\n"],[-1,23744,")$"],[1,23834,"\n\n"],[-1,23834,"面额"],[1,24279,""],[-1,24279,"\n\n\n\n\n"]],[24284,24284],[14372,14372]]],[1527006818507,["Re@Re.local",[[-1,24279,"代码"]],[24281,24281],[24279,24279]]],[1527006819471,["Re@Re.local",[[1,24287,"\n"]],[24279,24279],[24280,24280]]],[1527006823049,["Re@Re.local",[[1,24280,"代码7中的问题是"]],[24280,24280],[24288,24288]]],[1527006826313,["Re@Re.local",[[-1,24280,"代码7中的问题是"]],[24288,24288],[24280,24280]]],[1527006830155,["Re@Re.local",[[1,24280,"代码7的问题是"]],[24280,24280],[24287,24287]]],[1527006831512,["Re@Re.local",[[-1,24286,"是"]],[24287,24287],[24286,24286]]],[1527006868550,["Re@Re.local",[[1,24286,"过于低效。实际上，它需要67，716，925次递归调用来为"]],[24286,24286],[24315,24315]]],[1527006869359,["Re@Re.local",[[-1,24314,"为"]],[24315,24315],[24314,24314]]],[1527006870643,["Re@Re.local",[[1,24314,"找出"]],[24314,24314],[24316,24316]]],[1527006938087,[null,[[-1,14372,"\n\n\n\n\n"],[1,14377,"到过的地方"],[-1,14409,"都"],[1,14410,"\n"],[-1,14472,"\n"],[1,14473,"用"],[-1,14733,"\n\n"],[1,14735,"唯一"],[1,14896,"\n"],[-1,15481,"\n"],[-1,15503,"\n"],[1,15504,"上"],[1,15514,"\n"],[-1,15768,"同"],[1,15769,""],[-1,22935,"\n"],[1,22936," "],[-1,22966,"\n"],[1,22967,"两点"],[-1,22971,"小"],[1,23053,"*"],[-1,23059,"是"],[1,23119,"你"],[-1,23120,"视"],[1,23540,"可以"],[-1,23541,"1个"],[1,23627,"("],[-1,23655,"1"],[1,23657,"1"],[-1,23713,"1"],[1,23715,"1"],[-1,23743,"n)\n"],[1,23746,")$"],[-1,23834,"\n\n"],[1,23836,"面额"],[-1,24316,""],[1,24316,"\n\n\n\n\n\n\n"]],[14372,14372],[24323,24323]]],[1527006938087,[null,[[1,14372,"\n\n\n\n\n"],[-1,14372,"到过的地方"],[1,14409,"都"],[-1,14409,"\n"],[1,14472,"\n"],[-1,14472,"用"],[1,14733,"\n\n"],[-1,14733,"唯一"],[-1,14896,"\n"],[1,15482,"\n"],[1,15503,"\n"],[-1,15503,"上"],[-1,15514,"\n"],[1,15769,"同"],[-1,15769,""],[1,22935,"\n"],[-1,22935," "],[1,22966,"\n"],[-1,22966,"两点"],[1,22972,"小"],[-1,23053,"*"],[1,23060,"是"],[-1,23119,"你"],[1,23121,"视"],[-1,23540,"可以"],[1,23543,"1个"],[-1,23627,"("],[1,23656,"1"],[-1,23657,"1"],[1,23714,"1"],[-1,23715,"1"],[1,23744,"n)\n"],[-1,23744,")$"],[1,23834,"\n\n"],[-1,23834,"面额"],[1,24316,""],[-1,24316,"\n\n\n\n\n\n\n"]],[24323,24323],[14372,14372]]],[1527006937604,["Re@Re.local",[[1,24316,"4中硬币时找零63美分的最优解。为了理解该算法的致命缺陷，请看图5，它演示了找零26美分所需的377"]],[24316,24316],[24366,24366]]],[1527006998089,[null,[[-1,14372,"\n\n\n\n\n"],[1,14377,"到过的地方"],[-1,14409,"都"],[1,14410,"\n"],[-1,14472,"\n"],[1,14473,"用"],[-1,14733,"\n\n"],[1,14735,"唯一"],[1,14896,"\n"],[-1,15481,"\n"],[-1,15503,"\n"],[1,15504,"上"],[1,15514,"\n"],[-1,15768,"同"],[1,15769,""],[-1,22935,"\n"],[1,22936," "],[-1,22966,"\n"],[1,22967,"两点"],[-1,22971,"小"],[1,23053,"*"],[-1,23059,"是"],[1,23119,"你"],[-1,23120,"视"],[1,23540,"可以"],[-1,23541,"1个"],[1,23627,"("],[-1,23655,"1"],[1,23657,"1"],[-1,23713,"1"],[1,23715,"1"],[-1,23743,"n)\n"],[1,23746,")$"],[-1,23834,"\n\n"],[1,23836,"面额"],[-1,24366,""],[1,24366,"\n\n\n\n\n\n\n"]],[14372,14372],[24373,24373]]],[1527006998089,[null,[[1,14372,"\n\n\n\n\n"],[-1,14372,"到过的地方"],[1,14409,"都"],[-1,14409,"\n"],[1,14472,"\n"],[-1,14472,"用"],[1,14733,"\n\n"],[-1,14733,"唯一"],[-1,14896,"\n"],[1,15482,"\n"],[1,15503,"\n"],[-1,15503,"上"],[-1,15514,"\n"],[1,15769,"同"],[-1,15769,""],[1,22935,"\n"],[-1,22935," "],[1,22966,"\n"],[-1,22966,"两点"],[1,22972,"小"],[-1,23053,"*"],[1,23060,"是"],[-1,23119,"你"],[1,23121,"视"],[-1,23540,"可以"],[1,23543,"1个"],[-1,23627,"("],[1,23656,"1"],[-1,23657,"1"],[1,23714,"1"],[-1,23715,"1"],[1,23744,"n)\n"],[-1,23744,")$"],[1,23834,"\n\n"],[-1,23834,"面额"],[1,24366,""],[-1,24366,"\n\n\n\n\n\n\n"]],[24373,24373],[14372,14372]]],[1527006943021,["Re@Re.local",[[1,24366,"次函数调用的一小部分。"]],[24366,24366],[24377,24377]]],[1527006943739,["Re@Re.local",[[1,24385,"\n"]],[24377,24377],[24378,24378]]],[1527006943926,["Re@Re.local",[[1,24386,"\n"]],[24378,24378],[24379,24379]]],[1527006953437,["Re@Re.local",[[1,24379,"图像中的每一个节点对应了一个"]],[24379,24379],[24393,24393]]],[1527006954700,["Re@Re.local",[[-1,24390,"了一个"]],[24393,24393],[24390,24390]]],[1527006967401,["Re@Re.local",[[1,24390,"一个recMC的调用。节点的标签表示"]],[24390,24390],[24408,24408]]],[1527007058153,[null,[[-1,14372,"\n\n\n\n\n"],[1,14377,"到过的地方"],[-1,14409,"都"],[1,14410,"\n"],[-1,14472,"\n"],[1,14473,"用"],[-1,14733,"\n\n"],[1,14735,"唯一"],[1,14896,"\n"],[-1,15481,"\n"],[-1,15503,"\n"],[1,15504,"上"],[1,15514,"\n"],[-1,15768,"同"],[1,15769,""],[-1,22935,"\n"],[1,22936," "],[-1,22966,"\n"],[1,22967,"两点"],[-1,22971,"小"],[1,23053,"*"],[-1,23059,"是"],[1,23119,"你"],[-1,23120,"视"],[1,23540,"可以"],[-1,23541,"1个"],[1,23627,"("],[-1,23655,"1"],[1,23657,"1"],[-1,23713,"1"],[1,23715,"1"],[-1,23743,"n)\n"],[1,23746,")$"],[-1,23834,"\n\n"],[1,23836,"面额"],[-1,24408,""],[1,24408,"\n\n\n\n\n\n\n"]],[14372,14372],[24415,24415]]],[1527007058154,[null,[[1,14372,"\n\n\n\n\n"],[-1,14372,"到过的地方"],[1,14409,"都"],[-1,14409,"\n"],[1,14472,"\n"],[-1,14472,"用"],[1,14733,"\n\n"],[-1,14733,"唯一"],[-1,14896,"\n"],[1,15482,"\n"],[1,15503,"\n"],[-1,15503,"上"],[-1,15514,"\n"],[1,15769,"同"],[-1,15769,""],[1,22935,"\n"],[-1,22935," "],[1,22966,"\n"],[-1,22966,"两点"],[1,22972,"小"],[-1,23053,"*"],[1,23060,"是"],[-1,23119,"你"],[1,23121,"视"],[-1,23540,"可以"],[1,23543,"1个"],[-1,23627,"("],[1,23656,"1"],[-1,23657,"1"],[1,23714,"1"],[-1,23715,"1"],[1,23744,"n)\n"],[-1,23744,")$"],[1,23834,"\n\n"],[-1,23834,"面额"],[1,24408,""],[-1,24408,"\n\n\n\n\n\n\n"]],[24415,24415],[14372,14372]]],[1527007007035,["Re@Re.local",[[1,24408,"当前正"]],[24408,24408],[24411,24411]]],[1527007007150,["Re@Re.local",[[-1,24410,"正"]],[24411,24411],[24410,24410]]],[1527007012783,["Re@Re.local",[[1,24410,"正计算的找零数。"]],[24410,24410],[24418,24418]]],[1527007018568,["Re@Re.local",[[-1,24417,"。"]],[24418,24418],[24417,24417]]],[1527007034859,["Re@Re.local",[[1,24417,"，箭头上的数字表示所使用的硬币。沿着图像"]],[24417,24417],[24437,24437]]],[1527007035718,["Re@Re.local",[[-1,24433,"沿着图像"]],[24437,24437],[24433,24433]]],[1527007051247,["Re@Re.local",[[1,24433,"沿着图像走，可以看"]],[24433,24433],[24442,24442]]],[1527007051419,["Re@Re.local",[[-1,24441,"看"]],[24442,24442],[24441,24441]]],[1527007118115,[null,[[-1,14372,"\n\n\n\n\n"],[1,14377,"到过的地方"],[-1,14409,"都"],[1,14410,"\n"],[-1,14472,"\n"],[1,14473,"用"],[-1,14733,"\n\n"],[1,14735,"唯一"],[1,14896,"\n"],[-1,15481,"\n"],[-1,15503,"\n"],[1,15504,"上"],[1,15514,"\n"],[-1,15768,"同"],[1,15769,""],[-1,22935,"\n"],[1,22936," "],[-1,22966,"\n"],[1,22967,"两点"],[-1,22971,"小"],[1,23053,"*"],[-1,23059,"是"],[1,23119,"你"],[-1,23120,"视"],[1,23540,"可以"],[-1,23541,"1个"],[1,23627,"("],[-1,23655,"1"],[1,23657,"1"],[-1,23713,"1"],[1,23715,"1"],[-1,23743,"n)\n"],[1,23746,")$"],[-1,23834,"\n\n"],[1,23836,"面额"],[-1,24441,""],[1,24441,"\n\n\n\n\n\n\n"]],[14372,14372],[24448,24448]]],[1527007118115,[null,[[1,14372,"\n\n\n\n\n"],[-1,14372,"到过的地方"],[1,14409,"都"],[-1,14409,"\n"],[1,14472,"\n"],[-1,14472,"用"],[1,14733,"\n\n"],[-1,14733,"唯一"],[-1,14896,"\n"],[1,15482,"\n"],[1,15503,"\n"],[-1,15503,"上"],[-1,15514,"\n"],[1,15769,"同"],[-1,15769,""],[1,22935,"\n"],[-1,22935," "],[1,22966,"\n"],[-1,22966,"两点"],[1,22972,"小"],[-1,23053,"*"],[1,23060,"是"],[-1,23119,"你"],[1,23121,"视"],[-1,23540,"可以"],[1,23543,"1个"],[-1,23627,"("],[1,23656,"1"],[-1,23657,"1"],[1,23714,"1"],[-1,23715,"1"],[1,23744,"n)\n"],[-1,23744,")$"],[1,23834,"\n\n"],[-1,23834,"面额"],[1,24441,""],[-1,24441,"\n\n\n\n\n\n\n"]],[24448,24448],[14372,14372]]],[1527007081876,["Re@Re.local",[[1,24441,"找到任意一种"]],[24441,24441],[24447,24447]]],[1527007090976,["Re@Re.local",[[-1,24439,"可以找到任意一种"]],[24447,24447],[24439,24439]]],[1527007102389,["Re@Re.local",[[1,24439,"可以找到图像中任意一点所需要的列表组合。"]],[24439,24439],[24459,24459]]],[1527007106247,["Re@Re.local",[[1,24443,"实现"]],[24443,24443],[24445,24445]]],[1527007116686,["Re@Re.local",[[1,24461,"最重要的问题是，"]],[24461,24461],[24469,24469]]],[1527007178113,[null,[[-1,14372,"\n\n\n\n\n"],[1,14377,"到过的地方"],[-1,14409,"都"],[1,14410,"\n"],[-1,14472,"\n"],[1,14473,"用"],[-1,14733,"\n\n"],[1,14735,"唯一"],[1,14896,"\n"],[-1,15481,"\n"],[-1,15503,"\n"],[1,15504,"上"],[1,15514,"\n"],[-1,15768,"同"],[1,15769,""],[-1,22935,"\n"],[1,22936," "],[-1,22966,"\n"],[1,22967,"两点"],[-1,22971,"小"],[1,23053,"*"],[-1,23059,"是"],[1,23119,"你"],[-1,23120,"视"],[1,23540,"可以"],[-1,23541,"1个"],[1,23627,"("],[-1,23655,"1"],[1,23657,"1"],[-1,23713,"1"],[1,23715,"1"],[-1,23743,"n)\n"],[1,23746,")$"],[-1,23834,"\n\n"],[1,23836,"面额"],[-1,24469,""],[1,24469,"\n\n\n\n\n\n\n"]],[14372,14372],[24476,24476]]],[1527007178113,[null,[[1,14372,"\n\n\n\n\n"],[-1,14372,"到过的地方"],[1,14409,"都"],[-1,14409,"\n"],[1,14472,"\n"],[-1,14472,"用"],[1,14733,"\n\n"],[-1,14733,"唯一"],[-1,14896,"\n"],[1,15482,"\n"],[1,15503,"\n"],[-1,15503,"上"],[-1,15514,"\n"],[1,15769,"同"],[-1,15769,""],[1,22935,"\n"],[-1,22935," "],[1,22966,"\n"],[-1,22966,"两点"],[1,22972,"小"],[-1,23053,"*"],[1,23060,"是"],[-1,23119,"你"],[1,23121,"视"],[-1,23540,"可以"],[1,23543,"1个"],[-1,23627,"("],[1,23656,"1"],[-1,23657,"1"],[1,23714,"1"],[-1,23715,"1"],[1,23744,"n)\n"],[-1,23744,")$"],[1,23834,"\n\n"],[-1,23834,"面额"],[1,24469,""],[-1,24469,"\n\n\n\n\n\n\n"]],[24476,24476],[14372,14372]]],[1527007132196,["Re@Re.local",[[1,24469,"进行了太多重复计算。比如说，"]],[24469,24469],[24483,24483]]],[1527007298118,[null,[[-1,14372,"\n\n\n\n\n"],[1,14377,"到过的地方"],[-1,14409,"都"],[1,14410,"\n"],[-1,14472,"\n"],[1,14473,"用"],[-1,14733,"\n\n"],[1,14735,"唯一"],[1,14896,"\n"],[-1,15481,"\n"],[-1,15503,"\n"],[1,15504,"上"],[1,15514,"\n"],[-1,15768,"同"],[1,15769,""],[-1,22935,"\n"],[1,22936," "],[-1,22966,"\n"],[1,22967,"两点"],[-1,22971,"小"],[1,23053,"*"],[-1,23059,"是"],[1,23119,"你"],[-1,23120,"视"],[1,23540,"可以"],[-1,23541,"1个"],[1,23627,"("],[-1,23655,"1"],[1,23657,"1"],[-1,23713,"1"],[1,23715,"1"],[-1,23743,"n)\n"],[1,23746,")$"],[-1,23834,"\n\n"],[1,23836,"面额"],[-1,24483,""],[1,24483,"\n\n\n\n\n\n\n"]],[14372,14372],[24490,24490]]],[1527007298119,[null,[[1,14372,"\n\n\n\n\n"],[-1,14372,"到过的地方"],[1,14409,"都"],[-1,14409,"\n"],[1,14472,"\n"],[-1,14472,"用"],[1,14733,"\n\n"],[-1,14733,"唯一"],[-1,14896,"\n"],[1,15482,"\n"],[1,15503,"\n"],[-1,15503,"上"],[-1,15514,"\n"],[1,15769,"同"],[-1,15769,""],[1,22935,"\n"],[-1,22935," "],[1,22966,"\n"],[-1,22966,"两点"],[1,22972,"小"],[-1,23053,"*"],[1,23060,"是"],[-1,23119,"你"],[1,23121,"视"],[-1,23540,"可以"],[1,23543,"1个"],[-1,23627,"("],[1,23656,"1"],[-1,23657,"1"],[1,23714,"1"],[-1,23715,"1"],[1,23744,"n)\n"],[-1,23744,")$"],[1,23834,"\n\n"],[-1,23834,"面额"],[1,24483,""],[-1,24483,"\n\n\n\n\n\n\n"]],[24490,24490],[14372,14372]]],[1527007297509,["Re@Re.local",[[1,24483,"该算法"]],[24483,24483],[24486,24486]]],[1527007358117,[null,[[-1,14372,"\n\n\n\n\n"],[1,14377,"到过的地方"],[-1,14409,"都"],[1,14410,"\n"],[-1,14472,"\n"],[1,14473,"用"],[-1,14733,"\n\n"],[1,14735,"唯一"],[1,14896,"\n"],[-1,15481,"\n"],[-1,15503,"\n"],[1,15504,"上"],[1,15514,"\n"],[-1,15768,"同"],[1,15769,""],[-1,22935,"\n"],[1,22936," "],[-1,22966,"\n"],[1,22967,"两点"],[-1,22971,"小"],[1,23053,"*"],[-1,23059,"是"],[1,23119,"你"],[-1,23120,"视"],[1,23540,"可以"],[-1,23541,"1个"],[1,23627,"("],[-1,23655,"1"],[1,23657,"1"],[-1,23713,"1"],[1,23715,"1"],[-1,23743,"n)\n"],[1,23746,")$"],[-1,23834,"\n\n"],[1,23836,"面额"],[-1,24486,""],[1,24486,"\n\n\n\n\n\n\n"]],[14372,14372],[24493,24493]]],[1527007358118,[null,[[1,14372,"\n\n\n\n\n"],[-1,14372,"到过的地方"],[1,14409,"都"],[-1,14409,"\n"],[1,14472,"\n"],[-1,14472,"用"],[1,14733,"\n\n"],[-1,14733,"唯一"],[-1,14896,"\n"],[1,15482,"\n"],[1,15503,"\n"],[-1,15503,"上"],[-1,15514,"\n"],[1,15769,"同"],[-1,15769,""],[1,22935,"\n"],[-1,22935," "],[1,22966,"\n"],[-1,22966,"两点"],[1,22972,"小"],[-1,23053,"*"],[1,23060,"是"],[-1,23119,"你"],[1,23121,"视"],[-1,23540,"可以"],[1,23543,"1个"],[-1,23627,"("],[1,23656,"1"],[-1,23657,"1"],[1,23714,"1"],[-1,23715,"1"],[1,23744,"n)\n"],[-1,23744,")$"],[1,23834,"\n\n"],[-1,23834,"面额"],[1,24486,""],[-1,24486,"\n\n\n\n\n\n\n"]],[24493,24493],[14372,14372]]],[1527007302519,["Re@Re.local",[[1,24486,"至少要"]],[24486,24486],[24489,24489]]],[1527007311469,["Re@Re.local",[[-1,24486,"至少要"]],[24489,24489],[24486,24486]]],[1527007330624,["Re@Re.local",[[1,24486,"为15美分至少要重新计算3次。每次计算15美分的组合都需要53"]],[24486,24486],[24517,24517]]],[1527007330974,["Re@Re.local",[[-1,24516,"3"]],[24517,24517],[24516,24516]]],[1527007357766,["Re@Re.local",[[1,24516,"2次函数调用。显然这里浪费了太多时间和资源来"]],[24516,24516],[24538,24538]]],[1527007418180,[null,[[-1,14372,"\n\n\n\n\n"],[1,14377,"到过的地方"],[-1,14409,"都"],[1,14410,"\n"],[-1,14472,"\n"],[1,14473,"用"],[-1,14733,"\n\n"],[1,14735,"唯一"],[1,14896,"\n"],[-1,15481,"\n"],[-1,15503,"\n"],[1,15504,"上"],[1,15514,"\n"],[-1,15768,"同"],[1,15769,""],[-1,22935,"\n"],[1,22936," "],[-1,22966,"\n"],[1,22967,"两点"],[-1,22971,"小"],[1,23053,"*"],[-1,23059,"是"],[1,23119,"你"],[-1,23120,"视"],[1,23540,"可以"],[-1,23541,"1个"],[1,23627,"("],[-1,23655,"1"],[1,23657,"1"],[-1,23713,"1"],[1,23715,"1"],[-1,23743,"n)\n"],[1,23746,")$"],[-1,23834,"\n\n"],[1,23836,"面额"],[-1,24538,""],[1,24538,"\n\n\n\n\n\n\n"]],[14372,14372],[24545,24545]]],[1527007418180,[null,[[1,14372,"\n\n\n\n\n"],[-1,14372,"到过的地方"],[1,14409,"都"],[-1,14409,"\n"],[1,14472,"\n"],[-1,14472,"用"],[1,14733,"\n\n"],[-1,14733,"唯一"],[-1,14896,"\n"],[1,15482,"\n"],[1,15503,"\n"],[-1,15503,"上"],[-1,15514,"\n"],[1,15769,"同"],[-1,15769,""],[1,22935,"\n"],[-1,22935," "],[1,22966,"\n"],[-1,22966,"两点"],[1,22972,"小"],[-1,23053,"*"],[1,23060,"是"],[-1,23119,"你"],[1,23121,"视"],[-1,23540,"可以"],[1,23543,"1个"],[-1,23627,"("],[1,23656,"1"],[-1,23657,"1"],[1,23714,"1"],[-1,23715,"1"],[1,23744,"n)\n"],[-1,23744,")$"],[1,23834,"\n\n"],[-1,23834,"面额"],[1,24538,""],[-1,24538,"\n\n\n\n\n\n\n"]],[24545,24545],[14372,14372]]],[1527007362830,["Re@Re.local",[[1,24538,"计算已有的结果。"]],[24538,24538],[24546,24546]]],[1527007363095,["Re@Re.local",[[1,24554,"\n"]],[24546,24546],[24547,24547]]],[1527007363264,["Re@Re.local",[[1,24555,"\n"]],[24547,24547],[24548,24548]]],[1527007368447,["Re@Re.local",[[1,24548,"![image](http://interactivepython.org/courselib/static/pythonds/_images/callTree.png)"]],[24548,24548],[24633,24633]]],[1527007369337,["Re@Re.local",[[1,24641,"\n"]],[24633,24633],[24634,24634]]],[1527007370116,["Re@Re.local",[[1,24642,"\n"]],[24634,24634],[24635,24635]]],[1527007384339,["Re@Re.local",[[1,24635,"减少工作量的管家能"]],[24635,24635],[24644,24644]]],[1527007384761,["Re@Re.local",[[-1,24641,"管家能"]],[24644,24644],[24641,24641]]],[1527007396947,["Re@Re.local",[[1,24641,"关键在于储存一些已经计算过的结果。该方法的"]],[24641,24641],[24662,24662]]],[1527007402015,["Re@Re.local",[[-1,24658,"该方法的"]],[24662,24662],[24658,24658]]],[1527007408111,["Re@Re.local",[[1,24658,"一个简单的解决方法是将"]],[24658,24658],[24669,24669]]],[1527007478266,[null,[[-1,14372,"\n\n\n\n\n"],[1,14377,"到过的地方"],[-1,14409,"都"],[1,14410,"\n"],[-1,14472,"\n"],[1,14473,"用"],[-1,14733,"\n\n"],[1,14735,"唯一"],[1,14896,"\n"],[-1,15481,"\n"],[-1,15503,"\n"],[1,15504,"上"],[1,15514,"\n"],[-1,15768,"同"],[1,15769,""],[-1,22935,"\n"],[1,22936," "],[-1,22966,"\n"],[1,22967,"两点"],[-1,22971,"小"],[1,23053,"*"],[-1,23059,"是"],[1,23119,"你"],[-1,23120,"视"],[1,23540,"可以"],[-1,23541,"1个"],[1,23627,"("],[-1,23655,"1"],[1,23657,"1"],[-1,23713,"1"],[1,23715,"1"],[-1,23743,"n)\n"],[1,23746,")$"],[-1,23834,"\n\n"],[1,23836,"面额"],[-1,24669,""],[1,24669,"\n\n\n\n\n\n\n"]],[14372,14372],[24676,24676]]],[1527007478266,[null,[[1,14372,"\n\n\n\n\n"],[-1,14372,"到过的地方"],[1,14409,"都"],[-1,14409,"\n"],[1,14472,"\n"],[-1,14472,"用"],[1,14733,"\n\n"],[-1,14733,"唯一"],[-1,14896,"\n"],[1,15482,"\n"],[1,15503,"\n"],[-1,15503,"上"],[-1,15514,"\n"],[1,15769,"同"],[-1,15769,""],[1,22935,"\n"],[-1,22935," "],[1,22966,"\n"],[-1,22966,"两点"],[1,22972,"小"],[-1,23053,"*"],[1,23060,"是"],[-1,23119,"你"],[1,23121,"视"],[-1,23540,"可以"],[1,23543,"1个"],[-1,23627,"("],[1,23656,"1"],[-1,23657,"1"],[1,23714,"1"],[-1,23715,"1"],[1,23744,"n)\n"],[-1,23744,")$"],[1,23834,"\n\n"],[-1,23834,"面额"],[1,24669,""],[-1,24669,"\n\n\n\n\n\n\n"]],[24676,24676],[14372,14372]]],[1527007428798,["Re@Re.local",[[1,24669,"找"]],[24669,24669],[24670,24670]]],[1527007428921,["Re@Re.local",[[-1,24669,"找"]],[24670,24670],[24669,24669]]],[1527007434033,["Re@Re.local",[[1,24669,"硬币找零最小数村砸"]],[24669,24669],[24678,24678]]],[1527007434351,["Re@Re.local",[[-1,24676,"村砸"]],[24678,24678],[24676,24676]]],[1527007443243,["Re@Re.local",[[1,24676,"存储在一个表哥中。当进行"]],[24676,24676],[24688,24688]]],[1527007447111,["Re@Re.local",[[-1,24686,"进行"]],[24688,24688],[24686,24686]]],[1527007451275,["Re@Re.local",[[1,24686,"进行一次最小值"]],[24686,24686],[24693,24693]]],[1527007451816,["Re@Re.local",[[-1,24690,"最小值"]],[24693,24693],[24690,24690]]],[1527007461864,["Re@Re.local",[[1,24690,"新的最小值计算之前，先即"]],[24690,24690],[24702,24702]]],[1527007461948,["Re@Re.local",[[-1,24701,"即"]],[24702,24702],[24701,24701]]],[1527007465665,["Re@Re.local",[[1,24701,"在表哥中检测一下"]],[24701,24701],[24709,24709]]],[1527007466856,["Re@Re.local",[[-1,24702,"表哥中检测一下"]],[24709,24709],[24702,24702]]],[1527007472612,["Re@Re.local",[[1,24702,"表格中检测一下是否是一直的解"]],[24702,24702],[24716,24716]]],[1527007473253,["Re@Re.local",[[-1,24712,"一直的解"]],[24716,24716],[24712,24712]]],[1527007477727,["Re@Re.local",[[1,24712,"已知"]],[24712,24712],[24714,24714]]],[1527007538157,[null,[[-1,14372,"\n\n\n\n\n"],[1,14377,"到过的地方"],[-1,14409,"都"],[1,14410,"\n"],[-1,14472,"\n"],[1,14473,"用"],[-1,14733,"\n\n"],[1,14735,"唯一"],[1,14896,"\n"],[-1,15481,"\n"],[-1,15503,"\n"],[1,15504,"上"],[1,15514,"\n"],[-1,15768,"同"],[1,15769,""],[-1,22935,"\n"],[1,22936," "],[-1,22966,"\n"],[1,22967,"两点"],[-1,22971,"小"],[1,23053,"*"],[-1,23059,"是"],[1,23119,"你"],[-1,23120,"视"],[1,23540,"可以"],[-1,23541,"1个"],[1,23627,"("],[-1,23655,"1"],[1,23657,"1"],[-1,23713,"1"],[1,23715,"1"],[-1,23743,"n)\n"],[1,23746,")$"],[-1,23834,"\n\n"],[1,23836,"面额"],[-1,24714,""],[1,24714,"\n\n\n\n\n\n\n"]],[14372,14372],[24721,24721]]],[1527007538157,[null,[[1,14372,"\n\n\n\n\n"],[-1,14372,"到过的地方"],[1,14409,"都"],[-1,14409,"\n"],[1,14472,"\n"],[-1,14472,"用"],[1,14733,"\n\n"],[-1,14733,"唯一"],[-1,14896,"\n"],[1,15482,"\n"],[1,15503,"\n"],[-1,15503,"上"],[-1,15514,"\n"],[1,15769,"同"],[-1,15769,""],[1,22935,"\n"],[-1,22935," "],[1,22966,"\n"],[-1,22966,"两点"],[1,22972,"小"],[-1,23053,"*"],[1,23060,"是"],[-1,23119,"你"],[1,23121,"视"],[-1,23540,"可以"],[1,23543,"1个"],[-1,23627,"("],[1,23656,"1"],[-1,23657,"1"],[1,23714,"1"],[-1,23715,"1"],[1,23744,"n)\n"],[-1,23744,")$"],[1,23834,"\n\n"],[-1,23834,"面额"],[1,24714,""],[-1,24714,"\n\n\n\n\n\n\n"]],[24721,24721],[14372,14372]]],[1527007520347,["Re@Re.local",[[1,24715,"结果。如果是表中已经有的，那么直接只用表中的结果而不是重新计算。可执行代码1给出了改进算"]],[24715,24715],[24759,24759]]],[1527007520768,["Re@Re.local",[[-1,24758,"算"]],[24759,24759],[24758,24758]]],[1527007521558,["Re@Re.local",[[1,24758,"算法。"]],[24758,24758],[24761,24761]]],[1527007525186,["Re@Re.local",[[1,24755,"解"]],[24755,24755],[24756,24756]]],[1527007525301,["Re@Re.local",[[-1,24755,"解"]],[24756,24756],[24755,24755]]],[1527007535263,["Re@Re.local",[[1,24756,"结合表格查询法后的"]],[24756,24756],[24765,24765]]],[1527007598146,[null,[[-1,14372,"\n\n\n\n\n"],[1,14377,"到过的地方"],[-1,14409,"都"],[1,14410,"\n"],[-1,14472,"\n"],[1,14473,"用"],[-1,14733,"\n\n"],[1,14735,"唯一"],[1,14896,"\n"],[-1,15481,"\n"],[-1,15503,"\n"],[1,15504,"上"],[1,15514,"\n"],[-1,15768,"同"],[1,15769,""],[-1,22935,"\n"],[1,22936," "],[-1,22966,"\n"],[1,22967,"两点"],[-1,22971,"小"],[1,23053,"*"],[-1,23059,"是"],[1,23119,"你"],[-1,23120,"视"],[1,23540,"可以"],[-1,23541,"1个"],[1,23627,"("],[-1,23655,"1"],[1,23657,"1"],[-1,23713,"1"],[1,23715,"1"],[-1,23743,"n)\n"],[1,23746,")$"],[-1,23834,"\n\n"],[1,23836,"面额"],[-1,24714,"\n"],[1,24715,"的"],[1,24770,"\n\n\n\n\n\n\n\n"]],[14372,14372],[24778,24778]]],[1527007598147,[null,[[1,14372,"\n\n\n\n\n"],[-1,14372,"到过的地方"],[1,14409,"都"],[-1,14409,"\n"],[1,14472,"\n"],[-1,14472,"用"],[1,14733,"\n\n"],[-1,14733,"唯一"],[-1,14896,"\n"],[1,15482,"\n"],[1,15503,"\n"],[-1,15503,"上"],[-1,15514,"\n"],[1,15769,"同"],[-1,15769,""],[1,22935,"\n"],[-1,22935," "],[1,22966,"\n"],[-1,22966,"两点"],[1,22972,"小"],[-1,23053,"*"],[1,23060,"是"],[-1,23119,"你"],[1,23121,"视"],[-1,23540,"可以"],[1,23543,"1个"],[-1,23627,"("],[1,23656,"1"],[-1,23657,"1"],[1,23714,"1"],[-1,23715,"1"],[1,23744,"n)\n"],[-1,23744,")$"],[1,23834,"\n\n"],[-1,23834,"面额"],[1,24714,"\n"],[-1,24714,"的"],[-1,24770,"\n\n\n\n\n\n\n\n"]],[24778,24778],[14372,14372]]],[1527007543792,["Re@Re.local",[[1,24762,"机制"]],[24762,24762],[24764,24764]]],[1527007548393,["Re@Re.local",[[1,24779,"\n"]],[24771,24771],[24772,24772]]],[1527007548634,["Re@Re.local",[[1,24780,"\n"]],[24772,24772],[24773,24773]]],[1527007554097,["Re@Re.local",[[1,24773,"**可执行代码1**"]],[24773,24773],[24783,24783]]],[1527007554325,["Re@Re.local",[[1,24791,"\n"]],[24783,24783],[24784,24784]]],[1527007556111,["Re@Re.local",[[1,24784,"```Python"]],[24784,24784],[24793,24793]]],[1527007556306,["Re@Re.local",[[1,24801,"\n"]],[24793,24793],[24794,24794]]],[1527007566094,["Re@Re.local",[[1,24794,"def recDC(coinValueList,change,knownResults):\n   minCoins = change\n   if change in coinValueList:\n      knownResults[change] = 1\n      return 1\n   elif knownResults[change] > 0:\n      return knownResults[change]\n   else:\n       for i in [c for c in coinValueList if c <= change]:\n         numCoins = 1 + recDC(coinValueList, change-i,\n                              knownResults)\n         if numCoins < minCoins:\n            minCoins = numCoins\n            knownResults[change] = minCoins\n   return minCoins\n\nprint(recDC([1,5,10,25],63,[0]*64))\n"]],[24794,24794],[25338,25338]]],[1527007566335,["Re@Re.local",[[1,25346,"\n"]],[25338,25338],[25339,25339]]],[1527007567268,["Re@Re.local",[[1,25339,"```"]],[25339,25339],[25342,25342]]],[1527007567616,["Re@Re.local",[[1,25350,"\n"]],[25342,25342],[25343,25343]]],[1527007573716,["Re@Re.local",[[1,25343,"z"]],[25343,25343],[25344,25344]]],[1527007574106,["Re@Re.local",[[-1,25343,"z"]],[25344,25344],[25343,25343]]],[1527007577045,["Re@Re.local",[[1,25343,"注意在韩该6"]],[25343,25343],[25349,25349]]],[1527007578624,["Re@Re.local",[[-1,25346,"韩该6"]],[25349,25349],[25346,25346]]],[1527039273761,[null,[[-1,14372,"\n\n\n\n\n"],[1,14377,"到过的地方"],[-1,14409,"都"],[1,14410,"\n"],[-1,14472,"\n"],[1,14473,"用"],[-1,14733,"\n\n"],[1,14735,"唯一"],[1,14896,"\n"],[-1,15481,"\n"],[-1,15503,"\n"],[1,15504,"上"],[1,15514,"\n"],[-1,15768,"同"],[1,15769,""],[-1,22935,"\n"],[1,22936," "],[-1,22966,"\n"],[1,22967,"两点"],[-1,22971,"小"],[1,23053,"*"],[-1,23059,"是"],[1,23119,"你"],[-1,23120,"视"],[1,23540,"可以"],[-1,23541,"1个"],[1,23627,"("],[-1,23655,"1"],[1,23657,"1"],[-1,23713,"1"],[1,23715,"1"],[-1,23743,"n)\n"],[1,23746,")$"],[-1,23834,"\n\n"],[1,23836,"面额"],[-1,24714,"\n"],[1,24715,"的"],[-1,24764,"法"],[1,24772,"\n"],[-1,25346,""],[1,25346,"\n\n\n\n\n\n\n"]],[14372,14372],[25353,25353]]],[1527039273762,[null,[[1,14372,"\n\n\n\n\n"],[-1,14372,"到过的地方"],[1,14409,"都"],[-1,14409,"\n"],[1,14472,"\n"],[-1,14472,"用"],[1,14733,"\n\n"],[-1,14733,"唯一"],[-1,14896,"\n"],[1,15482,"\n"],[1,15503,"\n"],[-1,15503,"上"],[-1,15514,"\n"],[1,15769,"同"],[-1,15769,""],[1,22935,"\n"],[-1,22935," "],[1,22966,"\n"],[-1,22966,"两点"],[1,22972,"小"],[-1,23053,"*"],[1,23060,"是"],[-1,23119,"你"],[1,23121,"视"],[-1,23540,"可以"],[1,23543,"1个"],[-1,23627,"("],[1,23656,"1"],[-1,23657,"1"],[1,23714,"1"],[-1,23715,"1"],[1,23744,"n)\n"],[-1,23744,")$"],[1,23834,"\n\n"],[-1,23834,"面额"],[1,24714,"\n"],[-1,24714,"的"],[1,24764,"法"],[-1,24771,"\n"],[1,25346,""],[-1,25346,"\n\n\n\n\n\n\n"]],[25353,25353],[14372,14372]]],[1527039271243,["Re@Re.local",[[1,25346,"行6检测了"]],[25346,25346],[25351,25351]]]]],["dda119be-f004-45de-852d-999a2cf6de2d",1527043364960,"递归\n===\n\n\n# 4 递归 #\n\n## 4.1 目标 ##\n\n本章目标如下：\n\n- 了解：某些难以处理的问题也许用递归可以轻松解决。\n- 掌握：设计递归式程序。\n- 了解并应用：递归三大法则。\n- 实现：问题的递归式描述。\n- 了解：计算机系统中递归的实现\n\n## 4.2 何为递归 ##\n\n递归是一种解决问题的方法，将一个问题分解为越来越小的子问题，直到问题的规模小到可以被轻松解决。通常来说，递归中有函数对自己本身的调用。从表面上来看似乎并没有什么特别指出，然而递归算法对于某些问题具有一针见血的气消。\n\n\n## 4.3 对数字列表求和 ##\n\n首先来看一个并不需要递归也可以解决的问题。假设相对一个数字列表求和，比如[1,3,5,7,9]。迭代式算法如可执行代码1所示。函数使用求和变量（theSum）来计算列表中数字之和。\n\n** 可执行代码1： 迭代求和 **\n```Python\ndef listsum(numList):\n    theSum = 0\n    for i in numList:\n        theSum = theSum + i\n    return theSum\n\nprint(listsum([1,3,5,7,9]))\n\n```\n那么，现在假设不可以使用while或者for循环，那又该如何做？数学家可能会想到加法本身是一种接受两个参数的函数，即一对数字。对于该列表求和问题便可转化为多对数字求和问题。先写为全括号化的表达式，比如：\n$$((((1+3)+5)+7)+9)$$\n也可以反方向来：\n$$(1+(3+(5+(7+9))))$$\n注意到最里面的括号组（7+9）是不需要迭代或者其它特殊结构便可解决的问题。实际上，可以将求和问题写为以下简化形式：\n$$total= (1+(3+(5+(7+9))))\ntotal= (1+(3+(5+16)))\ntotal= (1+(3+21))\ntotal= (1+24)\ntotal= 25$$\n如何将这种思想转化为Python程序？首先，将求和问题按Python列表的方式来考虑。可能读者会认为对列表的求和即是列表中第一个元素numList[0]与其它所有元素numList[1:]之和，以函数形式写出即为：\n$$listSum(numList)=first(numList)+listSum(rest(numList))$$\n在以上表达式中，first(numList)返回列表中第一个元素，而rest(numList)返回的是去除了第一个元素的原列表（也是一个列表）。用Python表达式可以写为如可执行代码2：\n\n** 可执行代码2：递归求和（第一次递归） **\n```Python\ndef listsum(numList):\n   if len(numList) == 1:\n        return numList[0]\n   else:\n        return numList[0] + listsum(numList[1:])\n\nprint(listsum([1,3,5,7,9]))\n\n```\n在这段代码中，有些地方需要注意。首先，在行2检查了列表是否仅有1个元素。这一判定很关键，它是控制函数结束的必要语句。长度为1的列表求和显然便是其本身。其次，在行5该函数调用了它自己本身。这便是将listsum归为递归算法的原因。递归函数是一种调用自身的函数。\n\n图1演示了对列表[1,3,5,7,9]求和的递归调用。读者可以将这些有序调用认为是一次次的问题简化过程。每调用一次，便转化为解决一个更小更容易的问题，知道问题规模不能再缩小。\n\n![image](http://interactivepython.org/courselib/static/pythonds/_images/sumlistIn.png)\n\n当问题已经最简化时，便开始将每个问题的答案拼装起来直到原始问题被解决。如图2所示，listsum沿着调用顺序返回。当listsum回到了最顶部的问题时，原始问题便得到了解决。\n\n![image](http://interactivepython.org/courselib/static/pythonds/_images/sumlistOut.png)\n\n## 4.4 递归三定律 ##\n\n跟阿西莫夫（Asimov）机器人三定律一样，递归算法也必须遵守三条重要定律：\n\n1. 递归算法必须要有个**约束条件**作为出口。\n2. 递归算法必须不断改变自身状态并向约束条件演进。\n3. 递归算法必须递归地调用自身。\n\n现在来仔细研究一下这三条定律以及在listsum中是如何得到体现的。首先，约束条件是终止算法递归的条件。一般来说，约束条件都是问题规模已经小到足以直接解决的时候。在listsum算法中，约束条件是长度为1的列表。\n\n为满足第二条定律，必须设法改变当前状态并使得算法向约束条件靠近。状态的改变意味着，算法使用的一些数据将被改变。通常来说，即为问题规模以某种方法缩小。在listsum算法中，基本数据结构是列表，因此需要在列表上想办法实现状态的改变。因为约束条件是列表长度为1，向约束条件演进的一种很自然的实现方式就是缩小列表，这便是可执行代码在行5所做的事：将列表长度缩小，然后将其作为参数来调用listsum本身。\n\n最后一条定律是算法必须调用自己本身，这是递归根本的定义。递归对于许多初学者来说是个有些难懂的概念。读者应当已经发现，递归函数是一种很优秀的方法，借助它可以将大规模的问题拆分为小问题，解决这些小问题只需要写一个简单的函数来对它们处理即可。表面看起来，递归似乎是陷入了一种循环。但实际上它在逻辑上并不是循环的，递归的逻辑是用优美简洁的表达式将问题拆分为更小更简单的。\n\n在本章的剩余部分将进一步研究递归，每个例子中都着重于用如何利用三定律来设计算法。\n\n## 4.5 将整数转化为以任何进制表示的字符串 ##\n\n假设需要将整数转化为二进制与十六进制之间的某进制表示的字符串形式。比如，整数10的十进制字符串为\"10\"，而二进制字符串为\"1010\"。有很多算法可以解决该问题，包括前文说过的以栈来解决，但是用递归思想来解决该问题还是最简洁的。\n\n接下来以十进制的整数768为例演示一个具体的问题。假设用一组字符串来对应前10个数字，比如说convString = \"0123456789\" 。通过在字符串中检索，很容易便可将10以内的数字进行转化，例如整数9，那么字符串便是convString[9]，即\"9\"。将769拆分为三个单独的数字7，6，9，将其转化为字符串也很简单了。小于10的整数看起来是不错的约束条件。\n\n确定基本进制后，整个算法将包括3部分：\n\n1. 将原数字转化为一系列单数字。\n2. 利用检索将单数字转为字符串。\n3. 将各单数字字符串连接起来，形成最终的结果。\n\n下一步是实现状态的改变，使得程序向约束条件靠近。因为研究对象是数字，不妨回想一想什么数学运算可以减少数字，最有可能的是减法和除法。虽然说减法也许是可行的，但有些令人困扰的是在这里如何确定减法操作的两个对象。而除法则清晰很多。\n\n将整数769除以10，可以得到76余9，这两个数字很有用。首先，余数是一个小于进制（10）的数，因此可以直接使用检索转化为字符串。其次，得到了一个小于初始数字的数，这便向约束条件靠近了一步。现在需要做得便是将76转化为它的字符表示。同样，利用除法可以得到7余6。最后，问题退化为转化7。流程如图3所示。注意，需要被保存的数被放置在示意图右侧。\n\n![image](http://interactivepython.org/courselib/static/pythonds/_images/toStr.png)\n\n可执行代码1实现了上述的算法。\n\n** 可执行代码1：迭代算法——整数转化为字符串 **\n```Python\ndef toStr(n,base):\n   convertString = \"0123456789ABCDEF\"\n   if n < base:\n      return convertString[n]\n   else:\n      return toStr(n//base,base) + convertString[n%base]\n\nprint(toStr(1453,16))\n```\n注意在第3行，检测了约束条件，即n小于目标进制。一旦检测到约束条件，便停止递归，然后根据convertString序列返回结果。在行6，通过递归调用和除法降低问题规模来同时满足了第2和第3定律。\n\n再来追踪一次该算法，这次将整数10转化为2进制形式字符串（\"1010\"）\n\n![image](http://interactivepython.org/courselib/static/pythonds/_images/toStrBase2.png)\n\n如图4所示，得到了所需结果，似乎数字的顺序错了。但是实际上，算法运行是正常的，因为是在行6中是先进行的递归调用，然后再将余数的字符串标识加上。\n\n## 4.6 栈桢：实现递归 ##\n\n设想，如果不按上文那样将递归调用的单字符结果依次连接起来得到结果，而是将算法修改为在递归调用之前将字符串压入栈中。调整后的算法如可执行代码1所示。\n** 可执行代码1：利用栈实现整数转化为字符串 **\n```Python\nfrom pythonds.basic.stack import Stack\n\nrStack = Stack()\n\ndef toStr(n,base):\n    convertString = \"0123456789ABCDEF\"\n    while n > 0:\n        if n < base:\n            rStack.push(convertString[n])\n        else:\n            rStack.push(convertString[n % base])\n        n = n // base\n    res = \"\"\n    while not rStack.isEmpty():\n        res = res + str(rStack.pop())\n    return res\n\nprint(toStr(1453,16))\n\n```\n每一次调用toStr，都将一个字符放入栈中。就前一个例子来说，可以发现在第4次调用后，得到的栈如图5所示。注意，现在可以直接将字符从栈中推出，再将他们链接为最后的结果\"1010\"即可。\n\n![../_images/recstack.png](http://interactivepython.org/courselib/static/pythonds/_images/recstack.png)\n\n此例说明了Python是如何实现递归函数调用的。在Python中，调用一个函数时，系统会分配一个栈桢用来处理该函数中的局部变量。当函数执行完毕，返回值被放入栈顶等待被调用的函数处理。如图6所示。\n\n![../_images/newcallstack.png](http://interactivepython.org/courselib/static/pythonds/_images/newcallstack.png)\n\n注意对toStr(2//2, 2)的调用在栈中返回了值“1”。该返回值在表达式“1” + convertString[2%2]用来取代函数调用toStr(1,2)，执行后得到的结果“10”又被放在栈顶。这样一来，Python的调用栈取代了代码4中所使用的栈。在该例子中，读者可以认为栈顶的返回值替代了累加变量的作用。\n\n栈桢也为对应函数使用的变量规定了作用域。虽然多次调用同一个函数，每一次调用都为函数的局部变量创建一个新的作用域。\n\n## 4.7 图示递归 ##\n\n在上一节中介绍了一些使用递归算法可以轻松解决的问题，然而很难给出递归函数运行的可视化方法或者思维导图，这就使得递归算法不是那么容易掌握的。本节将研究一些递归的例子并画出示意图。通过研究这些示意图的形成过程，便会对递归过程有更加深刻的理解。\n\n这里使用Python的海龟图像模块turtle进行可视化。turtle模块是所有Python版本的标配并且很容易上手，其符号也很简单。创建一只海龟，该海龟可以前进/后退/左转/右转等，并且可以控制尾巴的抬起和放下。当海龟的尾巴放下且在移动时，便会绘制出线。为了提高观赏性，可以改变海龟尾巴的宽度以及画笔的颜色。\n\n下面简单说明turtle作图的基础，这里会利用turtle绘制一个螺旋线。如可执行代码所示。引入turtle模块后，创建一个turtle实例。当turtle生成后，为其创建一个窗口用来绘图。接下来定义drawSpiral函数。该函数的约束条件是待画线的长度（以len参数表示）减少到小于或等于0。若长度仍大于0，则命令海龟前进len单位然后右转90度。通过再次调用drawSpiral并且传入减小后的长度实现递归。在可执行代码1的最后，调用了函数myWin.exitonclick()，这是窗口的一个很便利的方法，它将海龟置于待机状态直到在窗口内发生点击操作，然后页面才清空并退出。\n\n**可执行代码1：使用海龟绘制递归螺旋线**\n```Python\nimport turtle\n\nmyTurtle = turtle.Turtle()\nmyWin = turtle.Screen()\n\ndef drawSpiral(myTurtle, lineLen):\n    if lineLen > 0:\n        myTurtle.forward(lineLen)\n        myTurtle.right(90)\n        drawSpiral(myTurtle,lineLen-5)\n\ndrawSpiral(myTurtle,100)\nmyWin.exitonclick()\n```\n\n这就是海龟模块中所需要了解的一些基本知识，据此便可以绘制漂亮的团了。下一个程序将绘制一个分形树。分形是数学的一个分支，它与递归有许多相似点。对于某个图形，无论放大多少倍，其基本形状都是一致的，此时便称之为**分形**。很多自然现象具有分形特点，比如海岸线，雪花，山脉，树以及灌木等，这使得CG（Computer Generated）电影具有了可行性。接下来的例子中将绘制一颗分形树。\n\n为了画出这棵树，考虑如何用分形思想来描述一棵树是很有用的。回想一下，分形就是无论放大多少倍都具有相似性的东西。将这种思想用来研究树或者灌木，可以发现即使是小树枝也具有与整棵树一致的形状和特点。据此可以将树定义为一个左右分叉，且左右各有一个更小的“树”（分叉）。引入递归的概念，那么树便是这些递归的小树构成的。\n\n现在将上述思路转换为Python代码。代码1利用海龟来绘制了一颗分形树。可以发现，行5和行7进行了递归调用。行5在右转20度后进行了递归调用，这便是前文提到的右分叉；在行7，海龟在左转40度后进行了另一次递归调用，这即为左分叉。此外，注意到每次调用tree后，都对branchlen参数进行了减法运算，这保证了递归树是越来越小的。读者应该也注意到了行2的**if**语句即是约束条件，在branchLen过小时触发。\n\n**代码1**\n```Python\ndef tree(branchLen,t):\n    if branchLen > 5:\n        t.forward(branchLen)\n        t.right(20)\n        tree(branchLen-15,t)\n        t.left(40)\n        tree(branchLen-10,t)\n        t.right(20)\n        t.backward(branchLen)\n```\n完整的代码如可执行代码2所示。在运行代码前，思考一下是分叉树是如何绘制的。仔细观察这些调用，想想分叉树是如何展开的。它是同时对称地绘制左右分叉还是先右再左？\n\n**可执行代码2:递归绘制分叉树**\n```Python\ndef tree(branchLen,t):\n    if branchLen > 5:\n        t.forward(branchLen)\n        t.right(20)\n        tree(branchLen-15,t)\n        t.left(40)\n        tree(branchLen-15,t)\n        t.right(20)\n        t.backward(branchLen)\n\ndef main():\n    t = turtle.Turtle()\n    myWin = turtle.Screen()\n    t.left(90)\n    t.up()\n    t.backward(100)\n    t.down()\n    t.color(\"green\")\n    tree(75,t)\n    myWin.exitonclick()\n\nmain()\n```\n注意分叉树上的每一个分叉点是如何相应递归调用，以及分叉树是如何一路朝右绘制到最短的那个分支的。如图2所示。现在，仔细观察，程序是在整个树的右侧绘制完成后再沿着分叉返回，分叉树的右半侧如图1所示。接下来将绘制树的左侧，然而并不是直接画出最大的左侧，而是在每次到达最短枝前，先画出左分支的整个右半部分，然后再返回画左半部分。\n\n![../_images/tree1.png](http://interactivepython.org/courselib/static/pythonds/_images/tree1.png)\n\n![../_images/tree2.png](http://interactivepython.org/courselib/static/pythonds/_images/tree2.png)\n\n分形树只是一个起点，此外，读者也应该注意到这棵树看起来并不是那么真实，因为自然界中并不会真的像计算机程序那样具有高度对称性。本章的最后将会介绍一些有趣的选项，可以使得分叉树看起来更真实。\n\n## 4.8 谢尔宾斯基三角形 ##\n\n谢尔宾斯基三角形也是一种具有自相似性的分形图形，如图三所示。谢尔宾斯基三角形是一种三向递归算法。手绘谢尔宾斯基三角形的方法很简单。从某个大的三角形开始，将这个大三角形分为4个小的三角形：连接每条边的中点；剔除掉新的4个三角形中间的那个，对剩余的三个采取同样的步骤；以此类推，不断递归循环。如果笔足够细的话，是可以无穷地画下去的。\n\n![../_images/sierpinski.png](http://interactivepython.org/courselib/static/pythonds/_images/sierpinski.png)\n\n既然这个算法可以无限运行，那就必须得找出约束条件。这里被设置为了任意的划分次数，有时这被称为相似性维数。每次进行递归调用，就将维数减1直到为0。代码如可执行代码1所示。\n\n**可执行代码1:绘制谢尔宾斯基三角形**\n```Python\nimport turtle\n\ndef drawTriangle(points,color,myTurtle):\n    myTurtle.fillcolor(color)\n    myTurtle.up()\n    myTurtle.goto(points[0][0],points[0][1])\n    myTurtle.down()\n    myTurtle.begin_fill()\n    myTurtle.goto(points[1][0],points[1][1])\n    myTurtle.goto(points[2][0],points[2][1])\n    myTurtle.goto(points[0][0],points[0][1])\n    myTurtle.end_fill()\n\ndef getMid(p1,p2):\n    return ( (p1[0]+p2[0]) / 2, (p1[1] + p2[1]) / 2)\n\ndef sierpinski(points,degree,myTurtle):\n    colormap = ['blue','red','green','white','yellow',\n                'violet','orange']\n    drawTriangle(points,colormap[degree],myTurtle)\n    if degree > 0:\n        sierpinski([points[0],\n                        getMid(points[0], points[1]),\n                        getMid(points[0], points[2])],\n                   degree-1, myTurtle)\n        sierpinski([points[1],\n                        getMid(points[0], points[1]),\n                        getMid(points[1], points[2])],\n                   degree-1, myTurtle)\n        sierpinski([points[2],\n                        getMid(points[2], points[1]),\n                        getMid(points[0], points[2])],\n                   degree-1, myTurtle)\n\ndef main():\n   myTurtle = turtle.Turtle()\n   myWin = turtle.Screen()\n   myPoints = [[-100,-50],[0,100],[100,-50]]\n   sierpinski(myPoints,3,myTurtle)\n   myWin.exitonclick()\n\nmain()\n```\n代码1即是按前文所述思想写出来的。sierpinski做的第一件事是绘制最外部的三角形。接下来，进行了三次递归调用，每一次都是用来通过连接中点来获得新的三角形。这里又用了标准的海龟库。可以通过在Python提示符里输入help('turtle')来细究turtle库中可用的方法。\n\n仔细研究代码，想想这些三角形的绘制顺序。确切地来说，绘制顺序取决于初始的设定，这里假设顺序是左下，上，右下。考虑到sierpinski函数调用其本身的方式，sierpinski先是沿最短路线直接到达可以绘制的最小的左下角的三角形，再返过来绘制其它的剩余部分：先是按类似的方式直接向最小的、最顶部的三角形前进；最后再绘制右下角的最小的三角形。\n\n有时候根据函数调用的示意图来理解递归算法是很有用的。如图4所示，本例中的递归算法总是先向左边前进。黑线表示正在运行的，灰色的表示没有运行的，越靠近图4的底部，三角形越小。函数每次执行都消耗一个相似维度。到达最底部左边的三角形后，将继续绘制中间的三角形，并以此类推。\n\n![../_images/stCallTree.png](http://interactivepython.org/courselib/static/pythonds/_images/stCallTree.png)\n\nsierpinski函数很大程度上是基于getMid函数的。getMid函数接收两个参数作为端点，返回两者的中点。此外，可执行代码1中使用了begin_fill和end_fill方法来绘制带填充色的三角形。\n\n## 4.9 复杂递归问题 ##\n\n在前几节中，本书讨论了一些相对简单并且图形上很有趣的问题来帮助读者理解递归。在本节中，将研究一些使用迭代法难以解决然而却可以用递归法优雅而简洁地解决的问题。在最后，将讲解一个看起来似乎能用递归法解决但实际上并不能的问题。\n\n## 4.10 河内（Hanoi）塔问题 ##\n\n河内塔问题由法国数学家Edouard于1883年受到印度教中的一个故事启发而提出，在故事中，年轻僧侣将被予以考题。在最开始，僧侣们会得到3根杆以及64个金圆盘，每个盘都比其下面的盘小一些。他们的任务是将这64个盘从一个盘移动到另外一个盘去，并且有两个限制条件：每次只允许移动一个盘；禁止将大盘置于小盘之上。僧侣们夜以继日地努力，每秒移动一个盘子。传说中，当他们完成此任务时，世界将会毁灭。\n\n传说很有趣，但现在也不用担心世纪末日的问题。正确地完成该任务需要$2^{64}-1=18446744073709551615$次移动。1秒移动1次，也需要584942417355年。显然，实际所需时间比这更长。\n\n图1演示了从第一根杆移动到第三根杆时，中间杆上的盘子的情况。注意到，按照规定，每根杆上的盘子都是从上到下依次变大的。如果你之前没有接触过该问题，那不妨现在来尝试一下。不必真的想象盘子和杆什么的，一堆书或者一堆纸即可。\n\n![image](http://interactivepython.org/courselib/static/pythonds/_images/hanoi.png)\n\n那么用递归该如何解决这个问题？约束条件又是什么？现在来从头考虑下这个问题。假设有5个盘子，并且开始都放在杆1上。如果已经知道了如何将4个盘子移动到杆2上，便可以轻松地将底部的盘子移到杆3上，然后把那4个盘子从杆2移动到杆3上。但是不知道怎么移动4个盘子又该如何是好？那么考虑下，假如知道如何移动3个盘子的杆...以此类推。显然将1个盘子移动到杆3是很容易的。看起来似乎这就是约束条件了。\n\n\n下面是对盘子从起始杆通过中间杆移动到目标杆的高度概括（设盘数为Height）：\n\n1. 利用目标杆，将高度为 Height - 1 的塔从起始杆移动到中间杆上。\n2. 将剩下的那个盘子放到目标杆上。\n3. 利用中间杆，将高度为 Height - 1 的塔从中间杆移动到目标杆上。\n\n维持大盘在下的规则便可以递归使用上面的3步，便可以处理任何更大规模的问题。上述步骤中唯一缺少的就是对约束条件的确定。最简的河内塔问题是仅有一个盘子的塔。在这种情况下，只需要将该盘子直接移动到目标杆即可。高度为1的河内塔即是约束条件。此外，上述步骤通过在步骤1和3中减少塔的高度来实现了向约束条件收敛。代码1给出了解决河内塔问题的Python代码。\n\n**代码1**\n```Python\ndef moveTower(height,fromPole, toPole, withPole):\n    if height >= 1:\n        moveTower(height-1,fromPole,withPole,toPole)\n        moveDisk(fromPole,toPole)\n        moveTower(height-1,withPole,toPole,fromPole)\n```\n该代码看起来似乎就像英文描述性文字一样。该算法的简便性关键在于进行了两次不同的递归调用。在行3，将除了最底部（最大的）盘子全部移到中间杆上，行4仅将底部的盘子移动到目标盘。行5则是将中间杆上的圆盘移动到最大盘的上部（目标杆）即可。约束条件即是塔高度为0。注意，处理约束条件在这种情况下是调用moveDisk函数的前提条件。\n\nmoveDisk函数，如代码2所示，也很简单。它仅仅是打印出将盘子从某个杆上移动到另一个杆的过程。读者可以试着运行一下，便可发现该算法可以很高效地解决该问题。\n\n**代码2**\n```Python\ndef moveDisk(fp,tp):\n    print(\"moving disk from\",fp,\"to\",tp)\n```\n\n看过moveTower和moveDisk的代码后，读者可能会想为何不直接使用栈来追踪任意盘子在哪个杆里。提示：如果要显式地追踪盘子，应该需要3个栈，每个对应一个杆。答案是，Python本身就隐式地提供了我们所需要的调用栈。\n\n## 4.6 探索迷宫 ##\n\n本节将研究的问题跟拓宽机器人活动范围有关：如何走出迷宫？如果寝室内有一个Roomba真空打扫机器人，读者可能会想利用本节所学只是对其进行重新编程。本节的问题是帮助海龟走出虚拟迷宫。在该问题中，假设海龟掉入中央并开始虚招出炉。观察图2，思考如何解决该问题。\n\n![../_images/maze.png](http://interactivepython.org/courselib/static/pythonds/_images/maze.png)\n\n为了简化问题，假设迷宫以矩形为单位划分。每个矩形要么是开放的要么是填充以墙。海龟只能通过开放的部分，如果遭遇了墙则必须调整方向。海龟需要系统性的步骤以走出该迷宫。下面是具体的步骤：\n\n- 在初始位置尝试向北走一步，以此开始递归程序。\n- 若第一步的向北移动失败，则向南移动，然后开始递归。\n- 若第一步的向南移动也失败，则向西移动，然后开始递归。\n- 若第一步的向北、向南、向西移动均失败，则向东移动。\n- 若四个方向均不可行，则此路径无法走出迷宫，失败。\n\n听起来很容易，然而有些细节需要说明一下。假设递归的第一步是向北移动的，按照制定的程序来说，下一步也将向北移动，此时如果不幸地被墙挡住，便会向南移动，于是便会到了起始状态。此时如果按照这种递归程序来做，只会向后退一步，然后陷入无限迭代中。因此，需要一种方法来记录走过的地方。在本例中，可以假设手里有一袋面包屑可以沿着走过的路径撒下。如果准备向某个方向前进一步时发现该方块已经有面包屑了，此时立刻退回来并且尝试另外一个方向。在该算法的代码中可以看出，往回走一步同递归函数调用结果返回一样。\n\n跟其它递归算法一样，这里也需要研究约束条件。一部分读者可能根据前文已经推测出，在本算法中，有4个约束条件需要考虑：\n1. 海龟碰到墙壁。由于方格被墙壁填充而无法通行。\n2. 海龟到达已访问过的方格。为避免陷入无限迭代，不能在此位置继续前进。\n3. 到达没有墙的边界之外，换言之已经走出迷宫。\n4. 海龟在四个方向上都无法前进。\n\n要让程序运行起来，需要一种方法来模拟迷宫。为了使之看起来更有趣，这里使用了海龟模块来绘制和探索迷宫，这样便可以观察该算法的动态效果了。迷宫对象应该要提供以下方法以便编写搜索算法。\n\n- \\_\\_init\\_\\_ 读取表示迷宫的数据，初始化迷宫的内部表示，并且找到海龟的起始位置。\n- drawMaze 在一个窗口中绘制迷宫。\n- updatePosition 更新迷宫内部状态并更改海龟位置。\n- isExit 判断当前位置是否为迷宫的一个出口。\n\nMaze类也重载了操作符[]，这样算法程序便可以很容易地获取任意方格的状态。\n\n下面看一下叫做searchFrom的搜索函数的代码，如代码3所示。注意到该函数接收3个参数：一个maze对象，起始行，起始列。从逻辑上来说，每次调用递归函数都将重新开始搜索。\n\n**代码3**\n```Python\ndef searchFrom(maze, startRow, startColumn):\n    maze.updatePosition(startRow, startColumn)\n   #  Check for base cases:\n   #  1\\. We have run into an obstacle, return false\n    if maze[startRow][startColumn] == OBSTACLE :\n        return False\n    #  2\\. We have found a square that has already been explored\n    if maze[startRow][startColumn] == TRIED:\n        return False\n    # 3\\. Success, an outside edge not occupied by an obstacle\n    if maze.isExit(startRow,startColumn):\n        maze.updatePosition(startRow, startColumn, PART_OF_PATH)\n        return True\n    maze.updatePosition(startRow, startColumn, TRIED)\n\n    # Otherwise, use logical short circuiting to try each\n    # direction in turn (if needed)\n    found = searchFrom(maze, startRow-1, startColumn) or \\\n            searchFrom(maze, startRow+1, startColumn) or \\\n            searchFrom(maze, startRow, startColumn-1) or \\\n            searchFrom(maze, startRow, startColumn+1)\n    if found:\n        maze.updatePosition(startRow, startColumn, PART_OF_PATH)\n    else:\n        maze.updatePosition(startRow, startColumn, DEAD_END)\n    return found\n```\n可以看出，在此算法中，第一步是调用了updatePosition函数。这仅仅是为了实现算法的可视化便于观察海龟是如何在迷宫中进行移动的。接下来该算法检测了4个约束条件的前3个：海龟是否碰到了墙壁？海龟是否回到了曾经到过的地方？海龟是否找到了出口？如果这些情况无一满足，则继续进行递归搜索。\n\n读者也应当注意到了，在递归过程中使用了4次对searchFrom递归调用。很难预测到底进行了多少次递归调用，因为它们之间是用**or**连接的。如果第1个对searchFrom的调用返回结果为True，那么剩余的3次调用都不会执行。可以认为，移动至(row-1, column)是走出迷宫的一步。如果向北走并没有走出迷宫的方法，那么第2个调用将会执行，这个调用是移至南方。如果向南移动的也失败了，则向西，以此类推，最后是向东。如果4个递归函数返回的结果都是**False**，那么说明没走出去。读者应当下载或者手动输入以上程序，并逐一尝试改变调用顺序。\n\nMaze类的如代码4、代码5及代码6所示。\\_\\_init\\_\\_方法接收1个文件名作为唯一的参数。该文件为文本文件，以\"+\"代表墙壁，\" \"代表开放性方块，\"S\"代表起始位置。图3是maze数据文件的一个例子。maze的内部表示时间上是由列表组成的列表（list of lists）。mazelist实例变量的每一行都是一个列表。二级列表的由上述的字符构成。对于图3所示的数据文件，在Python中的内部表示为：\n\n[ ['+','+','+','+',...,'+','+','+','+','+','+','+'],\n  ['+',' ',' ',' ',...,' ',' ',' ','+',' ',' ',' '],\n  ['+',' ','+',' ',...,'+','+',' ','+',' ','+','+'],\n  ['+',' ','+',' ',...,' ',' ',' ','+',' ','+','+'],\n  ['+','+','+',' ',...,'+','+',' ','+',' ',' ','+'],\n  ['+',' ',' ',' ',...,'+','+',' ',' ',' ',' ','+'],\n  ['+','+','+','+',...,'+','+','+','+','+',' ','+'],\n  ['+',' ',' ',' ',...,'+','+',' ',' ','+',' ','+'],\n  ['+',' ','+','+',...,' ',' ','+',' ',' ',' ','+'],\n  ['+',' ',' ',' ',...,' ',' ','+',' ','+','+','+'],\n  ['+','+','+','+',...,'+','+','+',' ','+','+','+']]\n\ndrawMaze方法使用上述内部表示在屏幕上对迷宫进行初始绘制。\n\n++++++++++++++++++++++\n+   +   ++ ++     +\n+ +   +       +++ + ++\n+ + +  ++  ++++   + ++\n+++ ++++++    +++ +  +\n+          ++  ++    +\n+++++ ++++++   +++++ +\n+     +   +++++++  + +\n+ +++++++      S +   +\n+                + +++\n++++++++++++++++++ +++\n\n**图3:Maze数据文件示例**\n\nupdatePosition方法，如代码5所示使用了相同的内部表示来确定海龟是否撞墙。它也用来更新该内部表示，即使用\".\"或者\"-\"来分别表示已访问过的方块以及死胡同。此外，updatePosition方法使用了两个辅助方法，moveTurtle和dropBreadCrumb来在屏幕上更新视图。\n\n最后，isExit方法使用海龟当前的位置来测试是否为出口。出口极为0行或者0列或者最右侧的列或者最底部的行。\n\n**代码4**\n```Python\nclass Maze:\n    def __init__(self,mazeFileName):\n        rowsInMaze = 0\n        columnsInMaze = 0\n        self.mazelist = []\n        mazeFile = open(mazeFileName,'r')\n        rowsInMaze = 0\n        for line in mazeFile:\n            rowList = []\n            col = 0\n            for ch in line[:-1]:\n                rowList.append(ch)\n                if ch == 'S':\n                    self.startRow = rowsInMaze\n                    self.startCol = col\n                col = col + 1\n            rowsInMaze = rowsInMaze + 1\n            self.mazelist.append(rowList)\n            columnsInMaze = len(rowList)\n\n        self.rowsInMaze = rowsInMaze\n        self.columnsInMaze = columnsInMaze\n        self.xTranslate = -columnsInMaze/2\n        self.yTranslate = rowsInMaze/2\n        self.t = Turtle(shape='turtle')\n        setup(width=600,height=600)\n        setworldcoordinates(-(columnsInMaze-1)/2-.5,\n                            -(rowsInMaze-1)/2-.5,\n                            (columnsInMaze-1)/2+.5,\n                            (rowsInMaze-1)/2+.5)\n```\n**代码5**\n```Python\ndef drawMaze(self):\n    for y in range(self.rowsInMaze):\n        for x in range(self.columnsInMaze):\n            if self.mazelist[y][x] == OBSTACLE:\n                self.drawCenteredBox(x+self.xTranslate,\n                                     -y+self.yTranslate,\n                                     'tan')\n    self.t.color('black','blue')\n\ndef drawCenteredBox(self,x,y,color):\n    tracer(0)\n    self.t.up()\n    self.t.goto(x-.5,y-.5)\n    self.t.color('black',color)\n    self.t.setheading(90)\n    self.t.down()\n    self.t.begin_fill()\n    for i in range(4):\n        self.t.forward(1)\n        self.t.right(90)\n    self.t.end_fill()\n    update()\n    tracer(1)\n\ndef moveTurtle(self,x,y):\n    self.t.up()\n    self.t.setheading(self.t.towards(x+self.xTranslate,\n                                     -y+self.yTranslate))\n    self.t.goto(x+self.xTranslate,-y+self.yTranslate)\n\ndef dropBreadcrumb(self,color):\n    self.t.dot(color)\n\ndef updatePosition(self,row,col,val=None):\n    if val:\n        self.mazelist[row][col] = val\n    self.moveTurtle(col,row)\n\n    if val == PART_OF_PATH:\n        color = 'green'\n    elif val == OBSTACLE:\n        color = 'red'\n    elif val == TRIED:\n        color = 'black'\n    elif val == DEAD_END:\n        color = 'red'\n    else:\n        color = None\n\n    if color:\n        self.dropBreadcrumb(color)\n```\n**代码6**\n```Python\ndef isExit(self,row,col):\n     return (row == 0 or\n             row == self.rowsInMaze-1 or\n             col == 0 or\n             col == self.columnsInMaze-1 )\n\ndef __getitem__(self,idx):\n     return self.mazelist[idx]\n```\n完整代码如可执行代码1所示。该程序使用了如下所示的maze2.txt数据文件。注意到由于出口和海龟起始位置很近，因此本例要简单得多。\n\n**可执行代码1**\n```Python\nimport turtle\n\nPART_OF_PATH = 'O'\nTRIED = '.'\nOBSTACLE = '+'\nDEAD_END = '-'\n\nclass Maze:\n    def __init__(self,mazeFileName):\n        rowsInMaze = 0\n        columnsInMaze = 0\n        self.mazelist = []\n        mazeFile = open(mazeFileName,'r')\n        rowsInMaze = 0\n        for line in mazeFile:\n            rowList = []\n            col = 0\n            for ch in line[:-1]:\n                rowList.append(ch)\n                if ch == 'S':\n                    self.startRow = rowsInMaze\n                    self.startCol = col\n                col = col + 1\n            rowsInMaze = rowsInMaze + 1\n            self.mazelist.append(rowList)\n            columnsInMaze = len(rowList)\n\n        self.rowsInMaze = rowsInMaze\n        self.columnsInMaze = columnsInMaze\n        self.xTranslate = -columnsInMaze/2\n        self.yTranslate = rowsInMaze/2\n        self.t = turtle.Turtle()\n        self.t.shape('turtle')\n        self.wn = turtle.Screen()\n        self.wn.setworldcoordinates(-(columnsInMaze-1)/2-.5,-(rowsInMaze-1)/2-.5,(columnsInMaze-1)/2+.5,(rowsInMaze-1)/2+.5)\n\n    def drawMaze(self):\n        self.t.speed(10)\n        self.wn.tracer(0)\n        for y in range(self.rowsInMaze):\n            for x in range(self.columnsInMaze):\n                if self.mazelist[y][x] == OBSTACLE:\n                    self.drawCenteredBox(x+self.xTranslate,-y+self.yTranslate,'orange')\n        self.t.color('black')\n        self.t.fillcolor('blue')\n        self.wn.update()\n        self.wn.tracer(1)\n\n    def drawCenteredBox(self,x,y,color):\n        self.t.up()\n        self.t.goto(x-.5,y-.5)\n        self.t.color(color)\n        self.t.fillcolor(color)\n        self.t.setheading(90)\n        self.t.down()\n        self.t.begin_fill()\n        for i in range(4):\n            self.t.forward(1)\n            self.t.right(90)\n        self.t.end_fill()\n\n    def moveTurtle(self,x,y):\n        self.t.up()\n        self.t.setheading(self.t.towards(x+self.xTranslate,-y+self.yTranslate))\n        self.t.goto(x+self.xTranslate,-y+self.yTranslate)\n\n    def dropBreadcrumb(self,color):\n        self.t.dot(10,color)\n\n    def updatePosition(self,row,col,val=None):\n        if val:\n            self.mazelist[row][col] = val\n        self.moveTurtle(col,row)\n\n        if val == PART_OF_PATH:\n            color = 'green'\n        elif val == OBSTACLE:\n            color = 'red'\n        elif val == TRIED:\n            color = 'black'\n        elif val == DEAD_END:\n            color = 'red'\n        else:\n            color = None\n\n        if color:\n            self.dropBreadcrumb(color)\n\n    def isExit(self,row,col):\n        return (row == 0 or\n                row == self.rowsInMaze-1 or\n                col == 0 or\n                col == self.columnsInMaze-1 )\n\n    def __getitem__(self,idx):\n        return self.mazelist[idx]\n\n\ndef searchFrom(maze, startRow, startColumn):\n    # try each of four directions from this point until we find a way out.\n    # base Case return values:\n    #  1. We have run into an obstacle, return false\n    maze.updatePosition(startRow, startColumn)\n    if maze[startRow][startColumn] == OBSTACLE :\n        return False\n    #  2. We have found a square that has already been explored\n    if maze[startRow][startColumn] == TRIED or maze[startRow][startColumn] == DEAD_END:\n        return False\n    # 3. We have found an outside edge not occupied by an obstacle\n    if maze.isExit(startRow,startColumn):\n        maze.updatePosition(startRow, startColumn, PART_OF_PATH)\n        return True\n    maze.updatePosition(startRow, startColumn, TRIED)\n    # Otherwise, use logical short circuiting to try each direction\n    # in turn (if needed)\n    found = searchFrom(maze, startRow-1, startColumn) or \\\n            searchFrom(maze, startRow+1, startColumn) or \\\n            searchFrom(maze, startRow, startColumn-1) or \\\n            searchFrom(maze, startRow, startColumn+1)\n    if found:\n        maze.updatePosition(startRow, startColumn, PART_OF_PATH)\n    else:\n        maze.updatePosition(startRow, startColumn, DEAD_END)\n    return found\n\n\nmyMaze = Maze('maze2.txt')\nmyMaze.drawMaze()\nmyMaze.updatePosition(myMaze.startRow,myMaze.startCol)\n\nsearchFrom(myMaze, myMaze.startRow, myMaze.startCol)\n```\n## 4.12 动态规划 ##\n\n计算机科学中的很多程序都是为了实现优化。比如说，求出两点之间的最短路径，给出一组数据点的最佳拟合曲线，求出满足一定条件的对象的最小集合。计算机科学中有很多策略用来解决这些问题。本书的目的之一便是向读者介绍一些不同的求解策略。**动态规划**是用于解决优化问题的策略之一。\n\n优化问题的一个经典例子就是使用最少的硬币完成找零。假设你是自动贩卖机制造商的程序员，你司试图在每次交易中找零最少的硬币以简化工作流程。比如说，某个客户投入了1美元购买37美分的商品，那么找零用的硬币最少个数为多少？答案为6：2个25美分，1个10美分，3个1美分。如何得到这个答案？首先要尽量使用库存中面额最大的硬币（25美分），接着使用下一个可用的面值最大的硬币，同样尽量多地使用。第一种方法为**贪心法**，因为这里试图将此问题尽可能地分为比较大的块来解决。\n\n使用美国硬币时，贪心法效果还不错，但是假设你司决定在某共部署其自动贩卖机，除了一般的1，5，10及25分之外，还有21分的。在这种情况下，贪心法便不能给出找零63分的最优解了。即使提供了21分，贪心法给出的解仍是6。显然，最优解是3个21分。\n\n再来看一个可以保证能找到最优解的算法。因为本节跟递归有关，读者有可能猜到了会与递归有关。首先想一想约束条件。如果要找的零钱于某个硬币面额一致，那么答案便是只需要一个该硬币。\n\n如果面额并不匹配，那么便有了几种选择。可以是原始所需找零减去1个美分后的值再求最小值，也可以是减去5美分后的值求最小值...等等。因此，原始所需找零的最小硬币数可以用下面的算法来计算：\n$numCoins=min(1+numCoins(originalamount−1),1+numCoins(originalamount−5)1+numCoins(originalamount−10),1+numCoins(originalamount−25))$\n实现代码如代码7所示。在第三行中检测了约束条件，即试图用一个硬币来实现找零。如果没有找到恰好对应找零的硬币，则进行上述递归调用。行6使用列表表达式来过滤出那些比当前所需找零值面额更小的硬币。该递归调用也对所需找零值减去了选用的硬币面额。行7进行了递归调用。质疑到，在同一行对硬币总数进行了+1，因为使用了一个硬币。在递归调用满足约束条件时，也要加1。\n\n**代码7**\n```Python\ndef recMC(coinValueList,change):\n   minCoins = change\n   if change in coinValueList:\n     return 1\n   else:\n      for i in [c for c in coinValueList if c <= change]:\n         numCoins = 1 + recMC(coinValueList,change-i)\n         if numCoins < minCoins:\n            minCoins = numCoins\n   return minCoins\n\nprint(recMC([1,5,10,25],63))\n```\n代码7的问题过于低效。实际上，它需要67，716，925次递归调用来找出4中硬币时找零63美分的最优解。为了理解该算法的致命缺陷，请看图5，它演示了找零26美分所需的377次函数调用的一小部分。\n\n图像中的每一个节点对应一个recMC的调用。节点的标签表示当前正计算的找零数，箭头上的数字表示所使用的硬币。沿着图像走，可以找到实现图像中任意一点所需要的列表组合。最重要的问题是，进行了太多重复计算。比如说，该算法为15美分至少要重新计算3次。每次计算15美分的组合都需要52次函数调用。显然这里浪费了太多时间和资源来计算已有的结果。\n\n![image](http://interactivepython.org/courselib/static/pythonds/_images/callTree.png)\n\n减少工作量的关键在于储存一些已经计算过的结果。一个简单的解决方法是将硬币找零最小数存储在一个表哥中。当进行一次新的最小值计算之前，先在表格中检测一下是否是已知的结果。如果是表中已经有的，那么直接只用表中的结果而不是重新计算。可执行代码1给出了结合表格查询机制后的改进算法。\n\n**可执行代码1**\n```Python\ndef recDC(coinValueList,change,knownResults):\n   minCoins = change\n   if change in coinValueList:\n      knownResults[change] = 1\n      return 1\n   elif knownResults[change] > 0:\n      return knownResults[change]\n   else:\n       for i in [c for c in coinValueList if c <= change]:\n         numCoins = 1 + recDC(coinValueList, change-i,\n                              knownResults)\n         if numCoins < minCoins:\n            minCoins = numCoins\n            knownResults[change] = minCoins\n   return minCoins\n\nprint(recDC([1,5,10,25],63,[0]*64))\n\n```\n注意在行6检测了\n\n\n\n\n\n\n\n",[[1527043344176,["rmgs@DESKTOP-BR4TD19",[[1,25351,"在表格重视"]],[25351,25351],[25356,25356]]],[1527043344717,["rmgs@DESKTOP-BR4TD19",[[-1,25354,"重视"]],[25356,25356],[25354,25354]]],[1527043354080,["rmgs@DESKTOP-BR4TD19",[[1,25354,"中是否已经有对"]],[25354,25354],[25361,25361]]],[1527043354254,["rmgs@DESKTOP-BR4TD19",[[-1,25360,"对"]],[25361,25361],[25360,25360]]],[1527043369848,["rmgs@DESKTOP-BR4TD19",[[1,25360,"所需炸"]],[25360,25360],[25363,25363]]],[1527043370502,["rmgs@DESKTOP-BR4TD19",[[-1,25360,"所需炸"]],[25363,25363],[25360,25360]]],[1527043385152,["rmgs@DESKTOP-BR4TD19",[[1,25360,"计算好的结果。如果没有，便进行"]],[25360,25360],[25375,25375]]],[1527043385558,["rmgs@DESKTOP-BR4TD19",[[-1,25373,"进行"]],[25375,25375],[25373,25373]]],[1527043386249,["rmgs@DESKTOP-BR4TD19",[[1,25373,"爹"]],[25373,25373],[25374,25374]]],[1527043386358,["rmgs@DESKTOP-BR4TD19",[[-1,25373,"爹"]],[25374,25374],[25373,25373]]],[1527043387616,["rmgs@DESKTOP-BR4TD19",[[1,25373,"帝国"]],[25373,25373],[25375,25375]]],[1527043387933,["rmgs@DESKTOP-BR4TD19",[[-1,25373,"帝国"]],[25375,25375],[25373,25373]]],[1527043389729,["rmgs@DESKTOP-BR4TD19",[[1,25373,"调用地柜"]],[25373,25373],[25377,25377]]],[1527043390910,["rmgs@DESKTOP-BR4TD19",[[-1,25373,"调用地柜"]],[25377,25377],[25373,25373]]],[1527043414352,["rmgs@DESKTOP-BR4TD19",[[1,25373,"调用递归算法来计算该最小值并将其存储在表格中。使用这种改进的方法，"]],[25373,25373],[25406,25406]]],[1527043432864,["rmgs@DESKTOP-BR4TD19",[[1,25406,"可以将4个应"]],[25406,25406],[25412,25412]]],[1527043433133,["rmgs@DESKTOP-BR4TD19",[[-1,25410,"个应"]],[25412,25412],[25410,25410]]],[1527043451344,["rmgs@DESKTOP-BR4TD19",[[1,25410,"种硬币，找零63美分的情况递归调用次数降低至221此"]],[25410,25410],[25436,25436]]],[1527043451694,["rmgs@DESKTOP-BR4TD19",[[-1,25435,"此"]],[25436,25436],[25435,25435]]],[1527043452256,["rmgs@DESKTOP-BR4TD19",[[1,25435,"此。"]],[25435,25435],[25437,25437]]],[1527043452870,["rmgs@DESKTOP-BR4TD19",[[-1,25435,"此。"]],[25437,25437],[25435,25435]]],[1527043453728,["rmgs@DESKTOP-BR4TD19",[[1,25435,"次。"]],[25435,25435],[25437,25437]]],[1527043455366,["rmgs@DESKTOP-BR4TD19",[[1,25445,"\n"]],[25437,25437],[25438,25438]]],[1527043455573,["rmgs@DESKTOP-BR4TD19",[[1,25446,"\n"]],[25438,25438],[25439,25439]]],[1527043460776,["rmgs@DESKTOP-BR4TD19",[[1,25439,"尽管可执行代码1中"]],[25439,25439],[25448,25448]]],[1527043461574,["rmgs@DESKTOP-BR4TD19",[[-1,25447,"中"]],[25448,25448],[25447,25447]]],[1527043473488,["rmgs@DESKTOP-BR4TD19",[[1,25447,"中的代码是这"]],[25447,25447],[25453,25453]]],[1527043475981,["rmgs@DESKTOP-BR4TD19",[[-1,25447,"中的代码是这"]],[25453,25453],[25447,25447]]],[1527043478672,["rmgs@DESKTOP-BR4TD19",[[1,25447,"是正确的，"]],[25447,25447],[25452,25452]]],[1527043489112,["rmgs@DESKTOP-BR4TD19",[[1,25452,"但是"]],[25452,25452],[25454,25454]]],[1527043489581,["rmgs@DESKTOP-BR4TD19",[[-1,25453,"是"]],[25454,25454],[25453,25453]]],[1527043496531,["rmgs@DESKTOP-BR4TD19",[[1,25453,"它看起来就好像被黑客攻击过一样。"]],[25453,25453],[25469,25469]]],[1527043570039,["rmgs@DESKTOP-BR4TD19",[[-1,25457,"就好像被黑客攻击过一样。"]],[25458,25469],[25457,25457]]],[1527043573928,["rmgs@DESKTOP-BR4TD19",[[1,25457,"有点奇怪。"]],[25457,25457],[25462,25462]]],[1527043646360,["rmgs@DESKTOP-BR4TD19",[[1,25462,"实际上"]],[25462,25462],[25465,25465]]],[1527043647142,["rmgs@DESKTOP-BR4TD19",[[-1,25462,"实际上"]],[25465,25465],[25462,25462]]],[1527043648488,["rmgs@DESKTOP-BR4TD19",[[1,25462,"如果"]],[25462,25462],[25464,25464]]],[1527043649070,["rmgs@DESKTOP-BR4TD19",[[-1,25462,"如果"]],[25464,25464],[25462,25462]]],[1527043651680,["rmgs@DESKTOP-BR4TD19",[[1,25462,"此时"]],[25462,25462],[25464,25464]]],[1527043652102,["rmgs@DESKTOP-BR4TD19",[[-1,25462,"此时"]],[25464,25464],[25462,25462]]],[1527043662849,["rmgs@DESKTOP-BR4TD19",[[1,25462,"实际上，knownResults有很多地方还是空的，"]],[25462,25462],[25488,25488]]],[1527043663630,["rmgs@DESKTOP-BR4TD19",[[-1,25487,"，"]],[25488,25488],[25487,25487]]],[1527043664024,["rmgs@DESKTOP-BR4TD19",[[1,25487,"。"]],[25487,25487],[25488,25488]]],[1527043666565,["rmgs@DESKTOP-BR4TD19",[[-1,25462,"实际上"]],[25465,25465],[25462,25462]]],[1527043668216,["rmgs@DESKTOP-BR4TD19",[[1,25462,"并且"]],[25462,25462],[25464,25464]]],[1527043669654,["rmgs@DESKTOP-BR4TD19",[[-1,25464,"，"]],[25465,25465],[25464,25464]]],[1527043670729,["rmgs@DESKTOP-BR4TD19",[[-1,25464,"know"],[1,25468,"可以"]],[25464,25464],[25466,25466]]],[1527043677384,["rmgs@DESKTOP-BR4TD19",[[-1,25466,"nResult"],[1,25473,"发现身上"]],[25466,25466],[25470,25470]]],[1527043679925,["rmgs@DESKTOP-BR4TD19",[[-1,25468,"身上s"]],[25470,25470],[25468,25468]]],[1527043683407,["rmgs@DESKTOP-BR4TD19",[[1,25468,"knownResults"]],[25468,25468],[25480,25480]]],[1527043685918,["rmgs@DESKTOP-BR4TD19",[[-1,25461,"。"]],[25462,25462],[25461,25461]]],[1527043686495,["rmgs@DESKTOP-BR4TD19",[[1,25461,"，"]],[25461,25461],[25462,25462]]],[1527043714617,["rmgs@DESKTOP-BR4TD19",[[1,25490,"实际上，刚才的操作并不是"]],[25490,25490],[25502,25502]]],[1527043716525,["rmgs@DESKTOP-BR4TD19",[[-1,25501,"是"]],[25502,25502],[25501,25501]]],[1527043723847,["rmgs@DESKTOP-BR4TD19",[[1,25501,"算是动态规划，仅仅是"]],[25501,25501],[25511,25511]]],[1527043728935,["rmgs@DESKTOP-BR4TD19",[[1,25513,"胡"]],[25513,25513],[25514,25514]]],[1527043729005,["rmgs@DESKTOP-BR4TD19",[[-1,25513,"胡"]],[25514,25514],[25513,25513]]],[1527043729448,["rmgs@DESKTOP-BR4TD19",[[1,25513,"："]],[25513,25513],[25514,25514]]],[1527043730284,["rmgs@DESKTOP-BR4TD19",[[-1,25513,"："]],[25514,25514],[25513,25513]]],[1527043730879,["rmgs@DESKTOP-BR4TD19",[[1,25513,"“”"]],[25513,25513],[25515,25515]]],[1527043732360,["rmgs@DESKTOP-BR4TD19",[[1,25514,"缓存"]],[25514,25514],[25516,25516]]],[1527043741575,["rmgs@DESKTOP-BR4TD19",[[1,25517,"技术提升了程序的性能。"]],[25517,25517],[25528,25528]]],[1527043741908,["rmgs@DESKTOP-BR4TD19",[[1,25536,"\n"]],[25528,25528],[25529,25529]]],[1527043742116,["rmgs@DESKTOP-BR4TD19",[[1,25537,"\n"]],[25529,25529],[25530,25530]]],[1527043784832,["rmgs@DESKTOP-BR4TD19",[[1,25530,"真正的动态规划会使用更加系统的方法来解决该问题。动态规划接"]],[25530,25530],[25559,25559]]],[1527043844978,[null,[[-1,25511,"\n\n"],[1,25513,"通过"],[1,25559,"\n\n"]],[25511,25511],[25561,25561]]],[1527043844978,[null,[[1,25511,"\n\n"],[-1,25511,"通过"],[-1,25559,"\n\n"]],[25561,25561],[25511,25511]]],[1527043792225,["rmgs@DESKTOP-BR4TD19",[[1,25558,"解法从1美分开始"]],[25558,25558],[25566,25566]]],[1527043803301,["rmgs@DESKTOP-BR4TD19",[[-1,25560,"从1美分开始"]],[25566,25566],[25560,25560]]],[1527043804392,["rmgs@DESKTOP-BR4TD19",[[1,25560,"应该"]],[25560,25560],[25562,25562]]],[1527043804525,["rmgs@DESKTOP-BR4TD19",[[-1,25561,"该"]],[25562,25562],[25561,25561]]],[1527043824249,["rmgs@DESKTOP-BR4TD19",[[1,25561,"是从1美分开始，然后逐渐"]],[25561,25561],[25573,25573]]],[1527043825222,["rmgs@DESKTOP-BR4TD19",[[-1,25571,"逐渐"]],[25573,25573],[25571,25571]]],[1527043839297,["rmgs@DESKTOP-BR4TD19",[[1,25571,"逐步系统性地推导出所需找零。"]],[25571,25571],[25585,25585]]],[1527043904979,[null,[[-1,25511,"\n\n"],[1,25513,"通过"],[-1,25585,"接"],[1,25586,"\n\n"]],[25511,25511],[25588,25588]]],[1527043904979,[null,[[1,25511,"\n\n"],[-1,25511,"通过"],[1,25585,"接"],[-1,25585,"\n\n"]],[25588,25588],[25511,25511]]],[1527043860120,["rmgs@DESKTOP-BR4TD19",[[1,25585,"这可以保证每次都"]],[25585,25585],[25593,25593]]],[1527043873854,["rmgs@DESKTOP-BR4TD19",[[-1,25590,"每次都"]],[25593,25593],[25590,25590]]],[1527043874808,["rmgs@DESKTOP-BR4TD19",[[1,25590,"，"]],[25590,25590],[25591,25591]]],[1527043875221,["rmgs@DESKTOP-BR4TD19",[[-1,25590,"，"]],[25591,25591],[25590,25590]]],[1527043879472,["rmgs@DESKTOP-BR4TD19",[[1,25590,"，在算法中的没"]],[25590,25590],[25597,25597]]],[1527043880326,["rmgs@DESKTOP-BR4TD19",[[-1,25596,"没"]],[25597,25597],[25596,25596]]],[1527043900288,["rmgs@DESKTOP-BR4TD19",[[1,25596,"每一步都已经知道比当前所需找零数更小的找"]],[25596,25596],[25616,25616]]],[1527043900437,["rmgs@DESKTOP-BR4TD19",[[-1,25615,"找"]],[25616,25616],[25615,25615]]],[1527043964985,[null,[[-1,25511,"\n\n"],[1,25513,"通过"],[-1,25615,"接"],[1,25616,"\n\n"]],[25511,25511],[25618,25618]]],[1527043964985,[null,[[1,25511,"\n\n"],[-1,25511,"通过"],[1,25615,"接"],[-1,25615,"\n\n"]],[25618,25618],[25511,25511]]],[1527043906016,["rmgs@DESKTOP-BR4TD19",[[1,25615,"所需"]],[25615,25615],[25617,25617]]],[1527043908902,["rmgs@DESKTOP-BR4TD19",[[-1,25607,"所需"]],[25609,25609],[25607,25607]]],[1527043914720,["rmgs@DESKTOP-BR4TD19",[[1,25615,"硬币数。"]],[25615,25615],[25619,25619]]],[1527043915853,["rmgs@DESKTOP-BR4TD19",[[1,25627,"\n"]],[25619,25619],[25620,25620]]],[1527043916165,["rmgs@DESKTOP-BR4TD19",[[1,25628,"\n"]],[25620,25620],[25621,25621]]],[1527043921376,["rmgs@DESKTOP-BR4TD19",[[1,25621,"再来研究"]],[25621,25621],[25625,25625]]],[1527043927533,["rmgs@DESKTOP-BR4TD19",[[-1,25621,"再来研究"]],[25625,25625],[25621,25621]]],[1527043935889,["rmgs@DESKTOP-BR4TD19",[[1,25621,"考虑如何在11美分"]],[25621,25621],[25630,25630]]],[1527043944717,["rmgs@DESKTOP-BR4TD19",[[-1,25625,"在11美分"]],[25630,25630],[25625,25625]]],[1527043956680,["rmgs@DESKTOP-BR4TD19",[[1,25625,"为找零11美分填制最小找零"]],[25625,25625],[25638,25638]]],[1527043957053,["rmgs@DESKTOP-BR4TD19",[[-1,25636,"找零"]],[25638,25638],[25636,25636]]],[1527043963271,["rmgs@DESKTOP-BR4TD19",[[1,25636,"硬币数表。图4"]],[25636,25636],[25643,25643]]],[1527043964814,["rmgs@DESKTOP-BR4TD19",[[-1,25640,"。图4"]],[25643,25643],[25640,25640]]],[1527044024986,[null,[[-1,25511,"\n\n"],[1,25513,"通过"],[-1,25619,"接"],[1,25620,"\n"],[1,25640,"\n"]],[25511,25511],[25641,25641]]],[1527044024986,[null,[[1,25511,"\n\n"],[-1,25511,"通过"],[1,25619,"接"],[-1,25619,"\n"],[-1,25640,"\n"]],[25641,25641],[25511,25511]]],[1527043969943,["rmgs@DESKTOP-BR4TD19",[[1,25641,"如图4所示。从1"]],[25641,25641],[25649,25649]]],[1527043970694,["rmgs@DESKTOP-BR4TD19",[[-1,25647,"从1"]],[25649,25649],[25647,25647]]],[1527043982545,["rmgs@DESKTOP-BR4TD19",[[1,25647,"从1美分开始，唯一解是1个1美分的宜宾"]],[25647,25647],[25666,25666]]],[1527043982878,["rmgs@DESKTOP-BR4TD19",[[-1,25664,"宜宾"]],[25666,25666],[25664,25664]]],[1527043988320,["rmgs@DESKTOP-BR4TD19",[[1,25664,"硬币。下一个给出"]],[25664,25664],[25672,25672]]],[1527044084998,[null,[[-1,25511,"\n\n"],[1,25513,"通过"],[-1,25619,"接"],[1,25620,"\n"],[-1,25640,"\n"],[1,25641,"，"],[1,25672,"\n\n"]],[25511,25511],[25674,25674]]],[1527044084998,[null,[[1,25511,"\n\n"],[-1,25511,"通过"],[1,25619,"接"],[-1,25619,"\n"],[1,25640,"\n"],[-1,25640,"，"],[-1,25672,"\n\n"]],[25674,25674],[25511,25511]]],[1527044056029,["rmgs@DESKTOP-BR4TD19",[[-1,25669,"个给出"]],[25672,25672],[25669,25669]]],[1527044074689,["rmgs@DESKTOP-BR4TD19",[[1,25669,"行给出了最小"]],[25669,25669],[25675,25675]]],[1527044075342,["rmgs@DESKTOP-BR4TD19",[[-1,25673,"最小"]],[25675,25675],[25673,25673]]],[1527044083496,["rmgs@DESKTOP-BR4TD19",[[1,25673,"1美分和2美分的最小值。"]],[25673,25673],[25685,25685]]],[1527044144989,[null,[[-1,25511,"\n\n"],[1,25513,"通过"],[-1,25619,"接"],[1,25620,"\n"],[-1,25640,"\n"],[1,25641,"，"],[1,25685,"\n\n"]],[25511,25511],[25687,25687]]],[1527044144989,[null,[[1,25511,"\n\n"],[-1,25511,"通过"],[1,25619,"接"],[-1,25619,"\n"],[1,25640,"\n"],[-1,25640,"，"],[-1,25685,"\n\n"]],[25687,25687],[25511,25511]]],[1527044144561,["rmgs@DESKTOP-BR4TD19",[[1,25685,"同样的，唯一解是2个1美分。第五行开始变得有趣起来了。现在"]],[25685,25685],[25714,25714]]],[1527044204998,[null,[[-1,25511,"\n\n"],[1,25513,"通过"],[-1,25619,"接"],[1,25620,"\n"],[-1,25640,"\n"],[1,25641,"，"],[1,25714,"\n\n"]],[25511,25511],[25716,25716]]],[1527044204998,[null,[[1,25511,"\n\n"],[-1,25511,"通过"],[1,25619,"接"],[-1,25619,"\n"],[1,25640,"\n"],[-1,25640,"，"],[-1,25714,"\n\n"]],[25716,25716],[25511,25511]]],[1527044151784,["rmgs@DESKTOP-BR4TD19",[[1,25714,"有两种方法来四"]],[25714,25714],[25721,25721]]],[1527044151893,["rmgs@DESKTOP-BR4TD19",[[-1,25720,"四"]],[25721,25721],[25720,25720]]],[1527044155176,["rmgs@DESKTOP-BR4TD19",[[1,25720,"考虑，1个"]],[25720,25720],[25725,25725]]],[1527044155541,["rmgs@DESKTOP-BR4TD19",[[-1,25723,"1个"]],[25725,25725],[25723,25723]]],[1527044157104,["rmgs@DESKTOP-BR4TD19",[[1,25723,"5个"]],[25723,25723],[25725,25725]]],[1527044158198,["rmgs@DESKTOP-BR4TD19",[[-1,25719,"来考虑，5个"]],[25725,25725],[25719,25719]]],[1527044188248,["rmgs@DESKTOP-BR4TD19",[[1,25719,"了，5个1美分或者1个5美分。如何选择最优的？在"]],[25719,25719],[25743,25743]]],[1527044188757,["rmgs@DESKTOP-BR4TD19",[[-1,25742,"在"]],[25743,25743],[25742,25742]]],[1527044200481,["rmgs@DESKTOP-BR4TD19",[[1,25742,"通过查表发现为4美分进行找零所需一会那个比"]],[25742,25742],[25763,25763]]],[1527044201662,["rmgs@DESKTOP-BR4TD19",[[-1,25758,"一会那个比"]],[25763,25763],[25758,25758]]],[1527044204215,["rmgs@DESKTOP-BR4TD19",[[1,25758,"硬币数是2"]],[25758,25758],[25763,25763]]],[1527044204541,["rmgs@DESKTOP-BR4TD19",[[-1,25762,"2"]],[25763,25763],[25762,25762]]],[1527044204849,["rmgs@DESKTOP-BR4TD19",[[1,25762,"4，"]],[25762,25762],[25764,25764]]],[1527044265007,[null,[[-1,25511,"\n\n"],[1,25513,"通过"],[-1,25619,"接"],[1,25620,"\n"],[-1,25640,"\n"],[1,25641,"，"],[1,25764,"\n\n"]],[25511,25511],[25766,25766]]],[1527044265007,[null,[[1,25511,"\n\n"],[-1,25511,"通过"],[1,25619,"接"],[-1,25619,"\n"],[1,25640,"\n"],[-1,25640,"，"],[-1,25764,"\n\n"]],[25766,25766],[25511,25511]]],[1527044205864,["rmgs@DESKTOP-BR4TD19",[[1,25764,"而"]],[25764,25764],[25765,25765]]],[1527044206605,["rmgs@DESKTOP-BR4TD19",[[-1,25764,"而"]],[25765,25765],[25764,25764]]],[1527044210567,["rmgs@DESKTOP-BR4TD19",[[1,25764,"需要1"]],[25764,25764],[25767,25767]]],[1527044210813,["rmgs@DESKTOP-BR4TD19",[[-1,25766,"1"]],[25767,25767],[25766,25766]]],[1527044217320,["rmgs@DESKTOP-BR4TD19",[[1,25766,"加1才能变为5粉煤"]],[25766,25766],[25775,25775]]],[1527044217637,["rmgs@DESKTOP-BR4TD19",[[-1,25773,"粉煤"]],[25775,25775],[25773,25773]]],[1527044235224,["rmgs@DESKTOP-BR4TD19",[[1,25773,"美分，因此需要5个1美分。或者查表"]],[25773,25773],[25790,25790]]],[1527044235621,["rmgs@DESKTOP-BR4TD19",[[-1,25788,"查表"]],[25790,25790],[25788,25788]]],[1527044250816,["rmgs@DESKTOP-BR4TD19",[[1,25788,"根据0美分加1个5美分的思路来得到1个"]],[25788,25788],[25807,25807]]],[1527044251342,["rmgs@DESKTOP-BR4TD19",[[-1,25805,"1个"]],[25807,25807],[25805,25805]]],[1527044254992,["rmgs@DESKTOP-BR4TD19",[[1,25805,"5美分，那么答案是1."]],[25805,25805],[25816,25816]]],[1527044256309,["rmgs@DESKTOP-BR4TD19",[[-1,25815,"."]],[25816,25816],[25815,25815]]],[1527044256640,["rmgs@DESKTOP-BR4TD19",[[1,25815,"."]],[25815,25815],[25816,25816]]],[1527044257278,["rmgs@DESKTOP-BR4TD19",[[-1,25815,"."]],[25816,25816],[25815,25815]]],[1527044264000,["rmgs@DESKTOP-BR4TD19",[[1,25815,"。因为1和5的最小"]],[25815,25815],[25824,25824]]],[1527044264325,["rmgs@DESKTOP-BR4TD19",[[-1,25822,"最小"]],[25824,25824],[25822,25822]]],[1527044325001,[null,[[-1,25511,"\n\n"],[1,25513,"通过"],[-1,25619,"接"],[1,25620,"\n"],[-1,25640,"\n"],[1,25641,"，"],[1,25822,"\n\n"]],[25511,25511],[25824,25824]]],[1527044325001,[null,[[1,25511,"\n\n"],[-1,25511,"通过"],[1,25619,"接"],[-1,25619,"\n"],[1,25640,"\n"],[-1,25640,"，"],[-1,25822,"\n\n"]],[25824,25824],[25511,25511]]],[1527044275088,["rmgs@DESKTOP-BR4TD19",[[1,25823,"取最小值为1，那么在表格中存储1即可、"]],[25823,25823],[25842,25842]]],[1527044276150,["rmgs@DESKTOP-BR4TD19",[[-1,25841,"、"]],[25842,25842],[25841,25841]]],[1527044276720,["rmgs@DESKTOP-BR4TD19",[[1,25841,"。"]],[25841,25841],[25842,25842]]],[1527044565014,[null,[[-1,25511,"\n\n"],[1,25513,"通过"],[-1,25619,"接"],[1,25620,"\n"],[-1,25640,"\n"],[1,25641,"，"],[-1,25822,"\n"],[1,25823,"中"],[1,25842,"\n\n\n"]],[25511,25511],[25845,25845]]],[1527044565014,[null,[[1,25511,"\n\n"],[-1,25511,"通过"],[1,25619,"接"],[-1,25619,"\n"],[1,25640,"\n"],[-1,25640,"，"],[1,25822,"\n"],[-1,25822,"中"],[-1,25842,"\n\n\n"]],[25845,25845],[25511,25511]]],[1527044564360,["rmgs@DESKTOP-BR4TD19",[[1,25842,"接着"]],[25842,25842],[25844,25844]]],[1527044625010,[null,[[-1,25511,"\n\n"],[1,25513,"通过"],[-1,25619,"接"],[1,25620,"\n"],[-1,25640,"\n"],[1,25641,"，"],[-1,25822,"\n"],[1,25823,"中"],[1,25844,"\n\n\n"]],[25511,25511],[25847,25847]]],[1527044625010,[null,[[1,25511,"\n\n"],[-1,25511,"通过"],[1,25619,"接"],[-1,25619,"\n"],[1,25640,"\n"],[-1,25640,"，"],[1,25822,"\n"],[-1,25822,"中"],[-1,25844,"\n\n\n"]],[25847,25847],[25511,25511]]],[1527044577608,["rmgs@DESKTOP-BR4TD19",[[1,25844,"快速向表格末端前进，然后"]],[25844,25844],[25856,25856]]],[1527044578502,["rmgs@DESKTOP-BR4TD19",[[-1,25854,"然后"]],[25856,25856],[25854,25854]]],[1527044581520,["rmgs@DESKTOP-BR4TD19",[[1,25854,"改"]],[25854,25854],[25855,25855]]],[1527044581709,["rmgs@DESKTOP-BR4TD19",[[-1,25854,"改"]],[25855,25855],[25854,25854]]],[1527044582792,["rmgs@DESKTOP-BR4TD19",[[1,25854,"改"]],[25854,25854],[25855,25855]]],[1527044583054,["rmgs@DESKTOP-BR4TD19",[[-1,25854,"改"]],[25855,25855],[25854,25854]]],[1527044596472,["rmgs@DESKTOP-BR4TD19",[[1,25854,"该考虑11美分了。如图5所示，有3中方法"]],[25854,25854],[25874,25874]]],[1527044597694,["rmgs@DESKTOP-BR4TD19",[[-1,25871,"中方法"]],[25874,25874],[25871,25871]]],[1527044601921,["rmgs@DESKTOP-BR4TD19",[[1,25871,"个选项可供考虑。"]],[25871,25871],[25879,25879]]],[1527044602269,["rmgs@DESKTOP-BR4TD19",[[1,25887,"\n"]],[25879,25879],[25880,25880]]],[1527044605318,["rmgs@DESKTOP-BR4TD19",[[1,25888,"\n"]],[25880,25880],[25881,25881]]],[1527044606752,["rmgs@DESKTOP-BR4TD19",[[1,25881,"·"]],[25881,25881],[25882,25882]]],[1527044607597,["rmgs@DESKTOP-BR4TD19",[[-1,25881,"·"]],[25882,25882],[25881,25881]]],[1527044622840,["rmgs@DESKTOP-BR4TD19",[[1,25881,"1. 1个"]],[25881,25881],[25886,25886]]],[1527044685023,[null,[[-1,25511,"\n\n"],[1,25513,"通过"],[-1,25619,"接"],[1,25620,"\n"],[-1,25640,"\n"],[1,25641,"，"],[-1,25822,"\n"],[1,25823,"中"],[1,25886,"\n\n\n"]],[25511,25511],[25889,25889]]],[1527044685023,[null,[[1,25511,"\n\n"],[-1,25511,"通过"],[1,25619,"接"],[-1,25619,"\n"],[1,25640,"\n"],[-1,25640,"，"],[1,25822,"\n"],[-1,25822,"中"],[-1,25886,"\n\n\n"]],[25889,25889],[25511,25511]]],[1527044625336,["rmgs@DESKTOP-BR4TD19",[[1,25886,"硬币"]],[25886,25886],[25888,25888]]],[1527044626389,["rmgs@DESKTOP-BR4TD19",[[-1,25886,"硬币"]],[25888,25888],[25886,25886]]],[1527044639151,["rmgs@DESKTOP-BR4TD19",[[1,25886,"1美分加上 `11"]],[25886,25886],[25895,25895]]],[1527044639925,["rmgs@DESKTOP-BR4TD19",[[-1,25892,"`11"]],[25895,25895],[25892,25892]]],[1527044649080,["rmgs@DESKTOP-BR4TD19",[[1,25892,"11 - 1 = 10 美分的最小值；"]],[25892,25892],[25911,25911]]],[1527044649349,["rmgs@DESKTOP-BR4TD19",[[1,25919,"\n"]],[25911,25911],[25912,25912]]],[1527044665497,["rmgs@DESKTOP-BR4TD19",[[1,25912,"2. 1个5美分加上 11 - 5 = 6 美分的最下肢"]],[25912,25912],[25940,25940]]],[1527044666190,["rmgs@DESKTOP-BR4TD19",[[-1,25938,"下肢"]],[25940,25940],[25938,25938]]],[1527044667840,["rmgs@DESKTOP-BR4TD19",[[1,25938,"小智"]],[25938,25938],[25940,25940]]],[1527044667941,["rmgs@DESKTOP-BR4TD19",[[-1,25939,"智"]],[25940,25940],[25939,25939]]],[1527044669072,["rmgs@DESKTOP-BR4TD19",[[1,25939,"值；"]],[25939,25939],[25941,25941]]],[1527044669765,["rmgs@DESKTOP-BR4TD19",[[1,25949,"\n"]],[25941,25941],[25942,25942]]],[1527044673361,["rmgs@DESKTOP-BR4TD19",[[1,25942,"3. 1个10吗，"]],[25942,25942],[25951,25951]]],[1527044674077,["rmgs@DESKTOP-BR4TD19",[[-1,25949,"吗，"]],[25951,25951],[25949,25949]]],[1527044676816,["rmgs@DESKTOP-BR4TD19",[[1,25949,"美分加上11- 10 "]],[25949,25949],[25960,25960]]],[1527044678293,["rmgs@DESKTOP-BR4TD19",[[-1,25953,"11- 10 "]],[25960,25960],[25953,25953]]],[1527044679000,["rmgs@DESKTOP-BR4TD19",[[1,25953," 11-"]],[25953,25953],[25957,25957]]],[1527044679365,["rmgs@DESKTOP-BR4TD19",[[-1,25956,"-"]],[25957,25957],[25956,25956]]],[1527044683207,["rmgs@DESKTOP-BR4TD19",[[1,25956," - 10 = 1 美分的"]],[25956,25956],[25969,25969]]],[1527044745012,[null,[[-1,25511,"\n\n"],[1,25513,"通过"],[-1,25619,"接"],[1,25620,"\n"],[-1,25640,"\n"],[1,25641,"，"],[-1,25822,"\n"],[1,25823,"中"],[-1,25969,""],[1,25969,"\n\n\n"]],[25511,25511],[25972,25972]]],[1527044745012,[null,[[1,25511,"\n\n"],[-1,25511,"通过"],[1,25619,"接"],[-1,25619,"\n"],[1,25640,"\n"],[-1,25640,"，"],[1,25822,"\n"],[-1,25822,"中"],[1,25969,""],[-1,25969,"\n\n\n"]],[25972,25972],[25511,25511]]],[1527044685391,["rmgs@DESKTOP-BR4TD19",[[1,25972,"；"]],[25972,25972],[25973,25973]]],[1527044690925,["rmgs@DESKTOP-BR4TD19",[[1,25910,"，总计1"]],[25910,25910],[25914,25914]]],[1527044693036,["rmgs@DESKTOP-BR4TD19",[[-1,25910,"，总计1"]],[25914,25914],[25910,25910]]],[1527044694071,["rmgs@DESKTOP-BR4TD19",[[1,25910,"（）"]],[25910,25910],[25912,25912]]],[1527044694430,["rmgs@DESKTOP-BR4TD19",[[1,25911,"1"]],[25911,25911],[25912,25912]]],[1527044697966,["rmgs@DESKTOP-BR4TD19",[[1,25943,"（）"]],[25943,25943],[25945,25945]]],[1527044698765,["rmgs@DESKTOP-BR4TD19",[[1,25944,"2"]],[25944,25944],[25945,25945]]],[1527044700183,["rmgs@DESKTOP-BR4TD19",[[1,25978,"（）"]],[25978,25978],[25980,25980]]],[1527044700478,["rmgs@DESKTOP-BR4TD19",[[1,25979,"1"]],[25979,25979],[25980,25980]]],[1527044701532,["rmgs@DESKTOP-BR4TD19",[[1,25990,"\n"]],[25982,25982],[25983,25983]]],[1527044701788,["rmgs@DESKTOP-BR4TD19",[[1,25991,"\n"]],[25983,25983],[25984,25984]]],[1527044716560,["rmgs@DESKTOP-BR4TD19",[[1,25984,"1和3都会鬼畜"]],[25984,25984],[25991,25991]]],[1527044717684,["rmgs@DESKTOP-BR4TD19",[[-1,25989,"鬼畜"]],[25991,25991],[25989,25989]]],[1527044720983,["rmgs@DESKTOP-BR4TD19",[[1,25989,"给出11美分所需的"]],[25989,25989],[25998,25998]]],[1527044722157,["rmgs@DESKTOP-BR4TD19",[[-1,25995,"所需的"]],[25998,25998],[25995,25995]]],[1527044729303,["rmgs@DESKTOP-BR4TD19",[[1,25995,"找零所需的最小硬币数，即2."]],[25995,25995],[26009,26009]]],[1527044730084,["rmgs@DESKTOP-BR4TD19",[[-1,26008,"."]],[26009,26009],[26008,26008]]],[1527044730943,["rmgs@DESKTOP-BR4TD19",[[1,26008,"."]],[26008,26008],[26009,26009]]],[1527044731532,["rmgs@DESKTOP-BR4TD19",[[-1,26008,"."]],[26009,26009],[26008,26008]]],[1527044732159,["rmgs@DESKTOP-BR4TD19",[[1,26008,"。"]],[26008,26008],[26009,26009]]],[1527044732892,["rmgs@DESKTOP-BR4TD19",[[1,26017,"\n"]],[26009,26009],[26010,26010]]],[1527044733172,["rmgs@DESKTOP-BR4TD19",[[1,26018,"\n"]],[26010,26010],[26011,26011]]],[1527044736255,["rmgs@DESKTOP-BR4TD19",[[1,26011,"我"]],[26011,26011],[26012,26012]]],[1527044736580,["rmgs@DESKTOP-BR4TD19",[[-1,26011,"我"]],[26012,26012],[26011,26011]]],[1527044737711,["rmgs@DESKTOP-BR4TD19",[[1,26011,"2."]],[26011,26011],[26013,26013]]],[1527044738092,["rmgs@DESKTOP-BR4TD19",[[-1,26012,"."]],[26013,26013],[26012,26012]]],[1527044738498,["rmgs@DESKTOP-BR4TD19",[[1,26012,"。。"]],[26012,26012],[26014,26014]]],[1527044740028,["rmgs@DESKTOP-BR4TD19",[[-1,26011,"2。。"]],[26014,26014],[26011,26011]]],[1527044805014,[null,[[-1,25511,"\n\n"],[1,25513,"通过"],[-1,25619,"接"],[1,25620,"\n"],[-1,25640,"\n"],[1,25641,"，"],[-1,25822,"\n"],[1,25823,"中"],[-1,25975,"\n\n\n"],[1,25978,"最小值"],[1,26013,"\n\n\n\n\n\n"]],[25511,25511],[26019,26019]]],[1527044805014,[null,[[1,25511,"\n\n"],[-1,25511,"通过"],[1,25619,"接"],[-1,25619,"\n"],[1,25640,"\n"],[-1,25640,"，"],[1,25822,"\n"],[-1,25822,"中"],[1,25975,"\n\n\n"],[-1,25975,"最小值"],[-1,26013,"\n\n\n\n\n\n"]],[26019,26019],[25511,25511]]],[1527044753414,["rmgs@DESKTOP-BR4TD19",[[1,26011,"![image](http://interactivepython.org/courselib/static/pythonds/_images/changeTable.png)"]],[26011,26011],[26099,26099]]],[1527044754621,["rmgs@DESKTOP-BR4TD19",[[1,26107,"\n"]],[26099,26099],[26100,26100]]],[1527044757717,["rmgs@DESKTOP-BR4TD19",[[1,26100,"![image](http://interactivepython.org/courselib/static/pythonds/_images/changeTable.png)"]],[26100,26100],[26188,26188]]],[1527044762589,["rmgs@DESKTOP-BR4TD19",[[1,26189,"![image](http://interactivepython.org/courselib/static/pythonds/_images/elevenCents.png)"]],[26189,26189],[26277,26277]]],[1527044776349,["rmgs@DESKTOP-BR4TD19",[[-1,26187,")"]],[26188,26188],[26187,26187]]],[1527044777605,["rmgs@DESKTOP-BR4TD19",[[-1,26187,"\n"]],[26187,26187],[26187,26187]]],[1527044778607,["rmgs@DESKTOP-BR4TD19",[[1,26187,"\n"]],[26187,26187],[26187,26187]]],[1527044782261,["rmgs@DESKTOP-BR4TD19",[[-1,26100,"![image](http://interactivepython.org/courselib/static/pythonds/_images/changeTable.png"]],[26100,26187],[26100,26100]]],[1527044782813,["rmgs@DESKTOP-BR4TD19",[[-1,26100,"\n"]],[26100,26100],[26099,26099]]],[1527044865017,[null,[[-1,25511,"\n\n"],[1,25513,"通过"],[-1,25619,"接"],[1,25620,"\n"],[-1,25640,"\n"],[1,25641,"，"],[-1,25822,"\n"],[1,25823,"中"],[-1,25975,"\n\n\n"],[1,25978,"最小值"],[1,26189,"\n\n\n\n\n\n"]],[25511,25511],[26195,26195]]],[1527044865017,[null,[[1,25511,"\n\n"],[-1,25511,"通过"],[1,25619,"接"],[-1,25619,"\n"],[1,25640,"\n"],[-1,25640,"，"],[1,25822,"\n"],[-1,25822,"中"],[1,25975,"\n\n\n"],[-1,25975,"最小值"],[-1,26189,"\n\n\n\n\n\n"]],[26195,26195],[25511,25511]]],[1527044825540,["rmgs@DESKTOP-BR4TD19",[[1,26195,"\n"]],[26188,26188],[26189,26189]]],[1527044825860,["rmgs@DESKTOP-BR4TD19",[[1,26196,"\n"]],[26189,26189],[26190,26190]]],[1527044829975,["rmgs@DESKTOP-BR4TD19",[[1,26190,"代码8是一种"]],[26190,26190],[26196,26196]]],[1527044830356,["rmgs@DESKTOP-BR4TD19",[[-1,26194,"一种"]],[26196,26196],[26194,26194]]],[1527044842198,["rmgs@DESKTOP-BR4TD19",[[1,26194,"解决找零问题的一种动态规划算法。dpma"]],[26194,26194],[26214,26214]]],[1527044842644,["rmgs@DESKTOP-BR4TD19",[[-1,26212,"ma"]],[26214,26214],[26212,26212]]],[1527044848911,["rmgs@DESKTOP-BR4TD19",[[1,26212,"MakeChange接受3个参数，"]],[26212,26212],[26229,26229]]],[1527045405028,[null,[[-1,25511,"\n\n"],[1,25513,"通过"],[-1,25619,"接"],[1,25620,"\n"],[-1,25640,"\n"],[1,25641,"，"],[-1,25822,"\n"],[1,25823,"中"],[-1,25975,"\n\n\n"],[1,25978,"最小值"],[-1,26229,""],[1,26229,"\n\n\n\n\n\n"]],[25511,25511],[26235,26235]]],[1527045405029,[null,[[1,25511,"\n\n"],[-1,25511,"通过"],[1,25619,"接"],[-1,25619,"\n"],[1,25640,"\n"],[-1,25640,"，"],[1,25822,"\n"],[-1,25822,"中"],[1,25975,"\n\n\n"],[-1,25975,"最小值"],[1,26229,""],[-1,26229,"\n\n\n\n\n\n"]],[26235,26235],[25511,25511]]],[1527045381980,["rmgs@DESKTOP-BR4TD19",[[-1,26228,"，"]],[26229,26229],[26228,26228]]],[1527045389583,["rmgs@DESKTOP-BR4TD19",[[1,26228,"：可用硬币面额的"]],[26228,26228],[26236,26236]]],[1527045390212,["rmgs@DESKTOP-BR4TD19",[[-1,26235,"的"]],[26236,26236],[26235,26235]]],[1527045402303,["rmgs@DESKTOP-BR4TD19",[[1,26235,"列表，找零数，已经"]],[26235,26235],[26244,26244]]],[1527045465022,[null,[[-1,25511,"\n\n"],[1,25513,"通过"],[-1,25619,"接"],[1,25620,"\n"],[-1,25640,"\n"],[1,25641,"，"],[-1,25822,"\n"],[1,25823,"中"],[-1,25975,"\n\n\n"],[1,25978,"最小值"],[-1,26244,""],[1,26244,"\n\n\n\n\n\n"]],[25511,25511],[26250,26250]]],[1527045465022,[null,[[1,25511,"\n\n"],[-1,25511,"通过"],[1,25619,"接"],[-1,25619,"\n"],[1,25640,"\n"],[-1,25640,"，"],[1,25822,"\n"],[-1,25822,"中"],[1,25975,"\n\n\n"],[-1,25975,"最小值"],[1,26244,""],[-1,26244,"\n\n\n\n\n\n"]],[26250,26250],[25511,25511]]],[1527045437069,["rmgs@DESKTOP-BR4TD19",[[-1,26242,"已经"]],[26244,26244],[26242,26242]]],[1527045441640,["rmgs@DESKTOP-BR4TD19",[[1,26242,"每个找零值"]],[26242,26242],[26247,26247]]],[1527045444045,["rmgs@DESKTOP-BR4TD19",[[-1,26240,"数"]],[26241,26241],[26240,26240]]],[1527045444952,["rmgs@DESKTOP-BR4TD19",[[1,26240,"值"]],[26240,26240],[26241,26241]]],[1527045455616,["rmgs@DESKTOP-BR4TD19",[[1,26247,"所需硬币数的列表。如果"]],[26247,26247],[26258,26258]]],[1527045456405,["rmgs@DESKTOP-BR4TD19",[[-1,26256,"如果"]],[26258,26258],[26256,26256]]],[1527045462088,["rmgs@DESKTOP-BR4TD19",[[1,26256,"当函数接受"]],[26256,26256],[26261,26261]]],[1527045462356,["rmgs@DESKTOP-BR4TD19",[[-1,26259,"接受"]],[26261,26261],[26259,26259]]],[1527045464320,["rmgs@DESKTOP-BR4TD19",[[1,26259,"运行完毕"]],[26259,26259],[26263,26263]]],[1527045525024,[null,[[-1,25511,"\n\n"],[1,25513,"通过"],[-1,25619,"接"],[1,25620,"\n"],[-1,25640,"\n"],[1,25641,"，"],[-1,25822,"\n"],[1,25823,"中"],[-1,25975,"\n\n\n"],[1,25978,"最小值"],[-1,26263,""],[1,26263,"\n\n\n\n\n\n"]],[25511,25511],[26269,26269]]],[1527045525024,[null,[[1,25511,"\n\n"],[-1,25511,"通过"],[1,25619,"接"],[-1,25619,"\n"],[1,25640,"\n"],[-1,25640,"，"],[1,25822,"\n"],[-1,25822,"中"],[1,25975,"\n\n\n"],[-1,25975,"最小值"],[1,26263,""],[-1,26263,"\n\n\n\n\n\n"]],[26269,26269],[25511,25511]]],[1527045481824,["rmgs@DESKTOP-BR4TD19",[[1,26264,"，minCoins中会包含从0到change的所有找零值"]],[26264,26264],[26292,26292]]],[1527045482149,["rmgs@DESKTOP-BR4TD19",[[-1,26291,"值"]],[26292,26292],[26291,26291]]],[1527045485697,["rmgs@DESKTOP-BR4TD19",[[1,26291,"所需要的硬币数。"]],[26291,26291],[26299,26299]]],[1527045485941,["rmgs@DESKTOP-BR4TD19",[[1,26306,"\n"]],[26299,26299],[26300,26300]]],[1527045486133,["rmgs@DESKTOP-BR4TD19",[[1,26307,"\n"]],[26300,26300],[26301,26301]]],[1527045488008,["rmgs@DESKTOP-BR4TD19",[[1,26301,"代码"]],[26301,26301],[26303,26303]]],[1527045488734,["rmgs@DESKTOP-BR4TD19",[[-1,26301,"代码"]],[26303,26303],[26301,26301]]],[1527045490624,["rmgs@DESKTOP-BR4TD19",[[1,26301,"**代码8**"]],[26301,26301],[26308,26308]]],[1527045490908,["rmgs@DESKTOP-BR4TD19",[[1,26315,"\n"]],[26308,26308],[26309,26309]]],[1527045496879,["rmgs@DESKTOP-BR4TD19",[[1,26309,"```Python"]],[26309,26309],[26318,26318]]],[1527045497085,["rmgs@DESKTOP-BR4TD19",[[1,26325,"\n"]],[26318,26318],[26319,26319]]],[1527045497367,["rmgs@DESKTOP-BR4TD19",[[1,26319,"def dpMakeChange(coinValueList,change,minCoins):\n   for cents in range(change+1):\n      coinCount = cents\n      for j in [c for c in coinValueList if c <= cents]:\n            if minCoins[cents-j] + 1 < coinCount:\n               coinCount = minCoins[cents-j]+1\n      minCoins[cents] = coinCount\n   return minCoins[change]"]],[26319,26319],[26639,26639]]],[1527045497493,["rmgs@DESKTOP-BR4TD19",[[1,26646,"\n"]],[26639,26639],[26640,26640]]],[1527045498303,["rmgs@DESKTOP-BR4TD19",[[1,26640,"```"]],[26640,26640],[26643,26643]]],[1527045498501,["rmgs@DESKTOP-BR4TD19",[[1,26650,"\n"]],[26643,26643],[26644,26644]]],[1527045511640,["rmgs@DESKTOP-BR4TD19",[[1,26644,"注意，dpMakeChange并不是一个递归函数，及时"]],[26644,26644],[26671,26671]]],[1527045585024,[null,[[-1,25511,"\n\n"],[1,25513,"通过"],[-1,25619,"接"],[1,25620,"\n"],[-1,25640,"\n"],[1,25641,"，"],[-1,25822,"\n"],[1,25823,"中"],[-1,25975,"\n\n\n"],[1,25978,"最小值"],[-1,26263,"\n"],[1,26264,"时"],[-1,26671,""],[1,26671,"\n\n\n\n\n\n\n"]],[25511,25511],[26678,26678]]],[1527045585024,[null,[[1,25511,"\n\n"],[-1,25511,"通过"],[1,25619,"接"],[-1,25619,"\n"],[1,25640,"\n"],[-1,25640,"，"],[1,25822,"\n"],[-1,25822,"中"],[1,25975,"\n\n\n"],[-1,25975,"最小值"],[1,26263,"\n"],[-1,26263,"时"],[1,26671,""],[-1,26671,"\n\n\n\n\n\n\n"]],[26678,26678],[25511,25511]]],[1527045576245,["rmgs@DESKTOP-BR4TD19",[[-1,26669,"及时"]],[26671,26671],[26669,26669]]],[1527045645038,[null,[[-1,25511,"\n\n"],[1,25513,"通过"],[-1,25619,"接"],[1,25620,"\n"],[-1,25640,"\n"],[1,25641,"，"],[-1,25822,"\n"],[1,25823,"中"],[-1,25975,"\n\n\n"],[1,25978,"最小值"],[-1,26263,"\n"],[1,26264,"时"],[-1,26669,""],[1,26669,"\n\n\n\n\n\n\n"]],[25511,25511],[26676,26676]]],[1527045645038,[null,[[1,25511,"\n\n"],[-1,25511,"通过"],[1,25619,"接"],[-1,25619,"\n"],[1,25640,"\n"],[-1,25640,"，"],[1,25822,"\n"],[-1,25822,"中"],[1,25975,"\n\n\n"],[-1,25975,"最小值"],[1,26263,"\n"],[-1,26263,"时"],[1,26669,""],[-1,26669,"\n\n\n\n\n\n\n"]],[26676,26676],[25511,25511]]],[1527045589800,["rmgs@DESKTOP-BR4TD19",[[1,26669,"虽然在开始"]],[26669,26669],[26674,26674]]],[1527045590197,["rmgs@DESKTOP-BR4TD19",[[-1,26672,"开始"]],[26674,26674],[26672,26672]]],[1527045599312,["rmgs@DESKTOP-BR4TD19",[[1,26672,"一开始给出了本问题的递归解。"]],[26672,26672],[26686,26686]]],[1527045608764,["rmgs@DESKTOP-BR4TD19",[[-1,26685,"。"]],[26686,26686],[26685,26685]]],[1527045614727,["rmgs@DESKTOP-BR4TD19",[[1,26685,"。这是很重要的一点"]],[26685,26685],[26694,26694]]],[1527045617285,["rmgs@DESKTOP-BR4TD19",[[-1,26688,"很重要的一点"]],[26694,26694],[26688,26688]]],[1527045619832,["rmgs@DESKTOP-BR4TD19",[[1,26688,"需要人"]],[26688,26688],[26691,26691]]],[1527045620493,["rmgs@DESKTOP-BR4TD19",[[-1,26687,"是需要人"]],[26691,26691],[26687,26687]]],[1527045621504,["rmgs@DESKTOP-BR4TD19",[[1,26687,"事"]],[26687,26687],[26688,26688]]],[1527045622341,["rmgs@DESKTOP-BR4TD19",[[-1,26687,"事"]],[26688,26688],[26687,26687]]],[1527045630336,["rmgs@DESKTOP-BR4TD19",[[1,26687,"是非常重要的一点，虽然"]],[26687,26687],[26698,26698]]],[1527045631205,["rmgs@DESKTOP-BR4TD19",[[-1,26695,"，虽然"]],[26698,26698],[26695,26695]]],[1527045638368,["rmgs@DESKTOP-BR4TD19",[[1,26695,"：虽然可以写出递归解法，但不"]],[26695,26695],[26709,26709]]],[1527045639645,["rmgs@DESKTOP-BR4TD19",[[-1,26708,"不"]],[26709,26709],[26708,26708]]],[1527045644088,["rmgs@DESKTOP-BR4TD19",[[1,26708,"该解法并不一定就是"]],[26708,26708],[26717,26717]]],[1527045705028,[null,[[-1,25511,"\n\n"],[1,25513,"通过"],[-1,25619,"接"],[1,25620,"\n"],[-1,25640,"\n"],[1,25641,"，"],[-1,25822,"\n"],[1,25823,"中"],[-1,25975,"\n\n\n"],[1,25978,"最小值"],[-1,26263,"\n"],[1,26264,"时"],[-1,26717,""],[1,26717,"\n\n\n\n\n\n\n"]],[25511,25511],[26724,26724]]],[1527045705028,[null,[[1,25511,"\n\n"],[-1,25511,"通过"],[1,25619,"接"],[-1,25619,"\n"],[1,25640,"\n"],[-1,25640,"，"],[1,25822,"\n"],[-1,25822,"中"],[1,25975,"\n\n\n"],[-1,25975,"最小值"],[1,26263,"\n"],[-1,26263,"时"],[1,26717,""],[-1,26717,"\n\n\n\n\n\n\n"]],[26724,26724],[25511,25511]]],[1527045649336,["rmgs@DESKTOP-BR4TD19",[[1,26717,"最优或者最有效率的接。"]],[26717,26717],[26728,26728]]],[1527045649877,["rmgs@DESKTOP-BR4TD19",[[-1,26726,"接。"]],[26728,26728],[26726,26726]]],[1527045669009,["rmgs@DESKTOP-BR4TD19",[[1,26726,"解。该函数的大部分呢"]],[26726,26726],[26736,26736]]],[1527045669125,["rmgs@DESKTOP-BR4TD19",[[-1,26735,"呢"]],[26736,26736],[26735,26735]]],[1527045675944,["rmgs@DESKTOP-BR4TD19",[[1,26735,"工作内容是通过夯"]],[26735,26735],[26743,26743]]],[1527045676565,["rmgs@DESKTOP-BR4TD19",[[-1,26742,"夯"]],[26743,26743],[26742,26742]]],[1527045679753,["rmgs@DESKTOP-BR4TD19",[[1,26742,"行4开始的循环"]],[26742,26742],[26749,26749]]],[1527045680069,["rmgs@DESKTOP-BR4TD19",[[-1,26747,"循环"]],[26749,26749],[26747,26747]]],[1527045681008,["rmgs@DESKTOP-BR4TD19",[[1,26747,"第"]],[26747,26747],[26748,26748]]],[1527045681117,["rmgs@DESKTOP-BR4TD19",[[-1,26747,"第"]],[26748,26748],[26747,26747]]],[1527045693352,["rmgs@DESKTOP-BR4TD19",[[1,26747,"迭代完成的。在该迭代中，考虑了所有可能的硬币"]],[26747,26747],[26769,26769]]],[1527045765031,[null,[[-1,25511,"\n\n"],[1,25513,"通过"],[-1,25619,"接"],[1,25620,"\n"],[-1,25640,"\n"],[1,25641,"，"],[-1,25822,"\n"],[1,25823,"中"],[-1,25975,"\n\n\n"],[1,25978,"最小值"],[-1,26263,"\n"],[1,26264,"时"],[-1,26769,""],[1,26769,"\n\n\n\n\n\n\n"]],[25511,25511],[26776,26776]]],[1527045765031,[null,[[1,25511,"\n\n"],[-1,25511,"通过"],[1,25619,"接"],[-1,25619,"\n"],[1,25640,"\n"],[-1,25640,"，"],[1,25822,"\n"],[-1,25822,"中"],[1,25975,"\n\n\n"],[-1,25975,"最小值"],[1,26263,"\n"],[-1,26263,"时"],[1,26769,""],[-1,26769,"\n\n\n\n\n\n\n"]],[26776,26776],[25511,25511]]],[1527045708857,["rmgs@DESKTOP-BR4TD19",[[1,26762,"对"]],[26762,26762],[26763,26763]]],[1527045710477,["rmgs@DESKTOP-BR4TD19",[[-1,26762,"对"]],[26763,26763],[26762,26762]]],[1527045715368,["rmgs@DESKTOP-BR4TD19",[[1,26762,"找零"]],[26762,26762],[26764,26764]]],[1527045715773,["rmgs@DESKTOP-BR4TD19",[[-1,26762,"找零"]],[26764,26764],[26762,26762]]],[1527045723153,["rmgs@DESKTOP-BR4TD19",[[1,26762,"由cents制定的找零"]],[26762,26762],[26773,26773]]],[1527045723476,["rmgs@DESKTOP-BR4TD19",[[-1,26771,"找零"]],[26773,26773],[26771,26771]]],[1527045726400,["rmgs@DESKTOP-BR4TD19",[[1,26771,"找零数的"]],[26771,26771],[26775,26775]]],[1527045742393,["rmgs@DESKTOP-BR4TD19",[[1,26782,"面设置"]],[26782,26782],[26785,26785]]],[1527045742957,["rmgs@DESKTOP-BR4TD19",[[-1,26782,"面设置"]],[26785,26785],[26782,26782]]],[1527045762168,["rmgs@DESKTOP-BR4TD19",[[1,26782,"面值。就像前例中11美分的例子一样，存储最小值"]],[26782,26782],[26805,26805]]],[1527045764741,["rmgs@DESKTOP-BR4TD19",[[-1,26801,"储最小值"]],[26805,26805],[26801,26801]]],[1527045825032,[null,[[-1,25511,"\n\n"],[1,25513,"通过"],[-1,25619,"接"],[1,25620,"\n"],[-1,25640,"\n"],[1,25641,"，"],[-1,25822,"\n"],[1,25823,"中"],[-1,25975,"\n\n\n"],[1,25978,"最小值"],[-1,26263,"\n"],[1,26264,"时"],[-1,26801,""],[1,26801,"\n\n\n\n\n\n\n"]],[25511,25511],[26808,26808]]],[1527045825032,[null,[[1,25511,"\n\n"],[-1,25511,"通过"],[1,25619,"接"],[-1,25619,"\n"],[1,25640,"\n"],[-1,25640,"，"],[1,25822,"\n"],[-1,25822,"中"],[1,25975,"\n\n\n"],[-1,25975,"最小值"],[1,26263,"\n"],[-1,26263,"时"],[1,26801,""],[-1,26801,"\n\n\n\n\n\n\n"]],[26808,26808],[25511,25511]]],[1527045765325,["rmgs@DESKTOP-BR4TD19",[[-1,26799,"，"]],[26800,26800],[26799,26799]]],[1527045777748,["rmgs@DESKTOP-BR4TD19",[[1,26799,"，将最优解存储在列表minCoins中，。"]],[26799,26799],[26820,26820]]],[1527045778398,["rmgs@DESKTOP-BR4TD19",[[-1,26818,"，。"]],[26820,26820],[26818,26818]]],[1527045778864,["rmgs@DESKTOP-BR4TD19",[[1,26818,"。"]],[26818,26818],[26819,26819]]],[1527045779108,["rmgs@DESKTOP-BR4TD19",[[1,26826,"\n"]],[26819,26819],[26820,26820]]],[1527045779325,["rmgs@DESKTOP-BR4TD19",[[1,26827,"\n"]],[26820,26820],[26821,26821]]],[1527046005041,[null,[[-1,25511,"\n\n"],[1,25513,"通过"],[-1,25619,"接"],[1,25620,"\n"],[-1,25640,"\n"],[1,25641,"，"],[-1,25822,"\n"],[1,25823,"中"],[-1,25975,"\n\n\n"],[1,25978,"最小值"],[-1,26263,"\n"],[1,26264,"时"],[-1,26819,"存"],[1,26820,"\n\n\n\n\n\n\n"]],[25511,25511],[26827,26827]]],[1527046005041,[null,[[1,25511,"\n\n"],[-1,25511,"通过"],[1,25619,"接"],[-1,25619,"\n"],[1,25640,"\n"],[-1,25640,"，"],[1,25822,"\n"],[-1,25822,"中"],[1,25975,"\n\n\n"],[-1,25975,"最小值"],[1,26263,"\n"],[-1,26263,"时"],[1,26819,"存"],[-1,26819,"\n\n\n\n\n\n\n"]],[26827,26827],[25511,25511]]],[1527045964477,["rmgs@DESKTOP-BR4TD19",[[1,26828,"\n"]],[26819,26819],[26820,26820]]],[1527045964750,["rmgs@DESKTOP-BR4TD19",[[1,26829,"\n"]],[26820,26820],[26821,26821]]],[1527046001680,["rmgs@DESKTOP-BR4TD19",[[1,26821,"虽说以上程序在找出最小硬币数这"]],[26821,26821],[26836,26836]]],[1527046001861,["rmgs@DESKTOP-BR4TD19",[[-1,26835,"这"]],[26836,26836],[26835,26835]]],[1527046065033,[null,[[-1,25511,"\n\n"],[1,25513,"通过"],[-1,25619,"接"],[1,25620,"\n"],[-1,25640,"\n"],[1,25641,"，"],[-1,25822,"\n"],[1,25823,"中"],[-1,25975,"\n\n\n"],[1,25978,"最小值"],[-1,26263,"\n"],[1,26264,"时"],[-1,26819,"存"],[1,26820,"\n"],[1,26838,"\n\n\n\n\n\n"]],[25511,25511],[26844,26844]]],[1527046065033,[null,[[1,25511,"\n\n"],[-1,25511,"通过"],[1,25619,"接"],[-1,25619,"\n"],[1,25640,"\n"],[-1,25640,"，"],[1,25822,"\n"],[-1,25822,"中"],[1,25975,"\n\n\n"],[-1,25975,"最小值"],[1,26263,"\n"],[-1,26263,"时"],[1,26819,"存"],[-1,26819,"\n"],[-1,26838,"\n\n\n\n\n\n"]],[26844,26844],[25511,25511]]],[1527046019840,["rmgs@DESKTOP-BR4TD19",[[1,26835,"上完成得很好，然而它并不能真的棒"]],[26835,26835],[26851,26851]]],[1527046020029,["rmgs@DESKTOP-BR4TD19",[[-1,26850,"棒"]],[26851,26851],[26850,26850]]],[1527046027240,["rmgs@DESKTOP-BR4TD19",[[1,26850,"与从来"]],[26850,26850],[26853,26853]]],[1527046028196,["rmgs@DESKTOP-BR4TD19",[[-1,26849,"的与从来"]],[26853,26853],[26849,26849]]],[1527046033768,["rmgs@DESKTOP-BR4TD19",[[1,26849,"的用来对换硬币，意难忘"]],[26849,26849],[26860,26860]]],[1527046046702,["rmgs@DESKTOP-BR4TD19",[[-1,26856,"，意难忘"]],[26860,26860],[26856,26856]]],[1527046055889,["rmgs@DESKTOP-BR4TD19",[[1,26856,"，因为它没有跟踪使用"]],[26856,26856],[26866,26866]]],[1527046058149,["rmgs@DESKTOP-BR4TD19",[[-1,26864,"使用"]],[26866,26866],[26864,26864]]],[1527046063121,["rmgs@DESKTOP-BR4TD19",[[1,26864,"使用的硬币。通过"]],[26864,26864],[26872,26872]]],[1527046125034,[null,[[-1,25511,"\n\n"],[1,25513,"通过"],[-1,25619,"接"],[1,25620,"\n"],[-1,25640,"\n"],[1,25641,"，"],[-1,25822,"\n"],[1,25823,"中"],[-1,25975,"\n\n\n"],[1,25978,"最小值"],[-1,26263,"\n"],[1,26264,"时"],[-1,26819,"存"],[1,26820,"\n"],[1,26875,"\n\n\n\n\n\n"]],[25511,25511],[26881,26881]]],[1527046125034,[null,[[1,25511,"\n\n"],[-1,25511,"通过"],[1,25619,"接"],[-1,25619,"\n"],[1,25640,"\n"],[-1,25640,"，"],[1,25822,"\n"],[-1,25822,"中"],[1,25975,"\n\n\n"],[-1,25975,"最小值"],[1,26263,"\n"],[-1,26263,"时"],[1,26819,"存"],[-1,26819,"\n"],[-1,26875,"\n\n\n\n\n\n"]],[26881,26881],[25511,25511]]],[1527046104048,["rmgs@DESKTOP-BR4TD19",[[1,26866,"了"]],[26866,26866],[26867,26867]]],[1527063935081,[null,[[-1,25511,"\n\n"],[1,25513,"通过"],[-1,25619,"接"],[1,25620,"\n"],[-1,25640,"\n"],[1,25641,"，"],[-1,25822,"\n"],[1,25823,"中"],[-1,25975,"\n\n\n"],[1,25978,"最小值"],[-1,26263,"\n"],[1,26264,"时"],[-1,26819,"存"],[1,26820,"\n"],[1,26876,"\n\n\n\n\n\n"]],[25511,25511],[26882,26882]]],[1527063935081,[null,[[1,25511,"\n\n"],[-1,25511,"通过"],[1,25619,"接"],[-1,25619,"\n"],[1,25640,"\n"],[-1,25640,"，"],[1,25822,"\n"],[-1,25822,"中"],[1,25975,"\n\n\n"],[-1,25975,"最小值"],[1,26263,"\n"],[-1,26263,"时"],[1,26819,"存"],[-1,26819,"\n"],[-1,26876,"\n\n\n\n\n\n"]],[26882,26882],[25511,25511]]],[1527063879363,["rmgs@DESKTOP-BR4TD19",[[1,26873,"存储在"]],[26873,26873],[26876,26876]]],[1527063879607,["rmgs@DESKTOP-BR4TD19",[[-1,26875,"在"]],[26876,26876],[26875,26875]]],[1527063908290,["rmgs@DESKTOP-BR4TD19",[[1,26875,"每次为minCoins表格添加数据时所使用的最后一个硬币及"]],[26875,26875],[26904,26904]]],[1527063908368,["rmgs@DESKTOP-BR4TD19",[[-1,26903,"及"]],[26904,26904],[26903,26903]]],[1527063910795,["rmgs@DESKTOP-BR4TD19",[[1,26903,"，"]],[26903,26903],[26904,26904]]],[1527063911191,["rmgs@DESKTOP-BR4TD19",[[-1,26903,"，"]],[26904,26904],[26903,26903]]],[1527063914731,["rmgs@DESKTOP-BR4TD19",[[1,26903,"，便可以将"]],[26903,26903],[26908,26908]]],[1527063915904,["rmgs@DESKTOP-BR4TD19",[[-1,26907,"将"]],[26908,26908],[26907,26907]]],[1527063926714,["rmgs@DESKTOP-BR4TD19",[[1,26907,"实现dpMakeChange来跟踪"]],[26907,26907],[26924,26924]]],[1527063930383,["rmgs@DESKTOP-BR4TD19",[[-1,26921,"来跟踪"]],[26924,26924],[26921,26921]]],[1527063934107,["rmgs@DESKTOP-BR4TD19",[[1,26921,"对所使用的"]],[26921,26921],[26926,26926]]],[1527063995088,[null,[[-1,25511,"\n\n"],[1,25513,"通过"],[-1,25619,"接"],[1,25620,"\n"],[-1,25640,"\n"],[1,25641,"，"],[-1,25822,"\n"],[1,25823,"中"],[-1,25975,"\n\n\n"],[1,25978,"最小值"],[-1,26263,"\n"],[1,26264,"时"],[-1,26819,"存"],[1,26820,"\n"],[1,26929,"\n\n\n\n\n\n"]],[25511,25511],[26935,26935]]],[1527063995088,[null,[[1,25511,"\n\n"],[-1,25511,"通过"],[1,25619,"接"],[-1,25619,"\n"],[1,25640,"\n"],[-1,25640,"，"],[1,25822,"\n"],[-1,25822,"中"],[1,25975,"\n\n\n"],[-1,25975,"最小值"],[1,26263,"\n"],[-1,26263,"时"],[1,26819,"存"],[-1,26819,"\n"],[-1,26929,"\n\n\n\n\n\n"]],[26935,26935],[25511,25511]]],[1527063941291,["rmgs@DESKTOP-BR4TD19",[[1,26926,"硬币的跟踪。如果"]],[26926,26926],[26934,26934]]],[1527063942087,["rmgs@DESKTOP-BR4TD19",[[-1,26932,"如果"]],[26934,26934],[26932,26932]]],[1527063958868,["rmgs@DESKTOP-BR4TD19",[[1,26932,"如果知道最后一个加入的硬币，便可以减去该硬币的币值"]],[26932,26932],[26957,26957]]],[1527063969812,["rmgs@DESKTOP-BR4TD19",[[1,26949,"将找零值"]],[26949,26949],[26953,26953]]],[1527063976851,["rmgs@DESKTOP-BR4TD19",[[1,26961,"所得到值"]],[26961,26961],[26965,26965]]],[1527063978704,["rmgs@DESKTOP-BR4TD19",[[-1,26949,"将"]],[26950,26950],[26949,26949]]],[1527063979635,["rmgs@DESKTOP-BR4TD19",[[1,26949,"根据"]],[26949,26949],[26951,26951]]],[1527063992979,["rmgs@DESKTOP-BR4TD19",[[1,26966,"在表中进行查询，从而"]],[26966,26966],[26976,26976]]],[1527064055079,[null,[[-1,25511,"\n\n"],[1,25513,"通过"],[-1,25619,"接"],[1,25620,"\n"],[-1,25640,"\n"],[1,25641,"，"],[-1,25822,"\n"],[1,25823,"中"],[-1,25975,"\n\n\n"],[1,25978,"最小值"],[-1,26263,"\n"],[1,26264,"时"],[-1,26819,"存"],[1,26820,"\n"],[1,26979,"\n\n\n\n\n\n"]],[25511,25511],[26985,26985]]],[1527064055079,[null,[[1,25511,"\n\n"],[-1,25511,"通过"],[1,25619,"接"],[-1,25619,"\n"],[1,25640,"\n"],[-1,25640,"，"],[1,25822,"\n"],[-1,25822,"中"],[1,25975,"\n\n\n"],[-1,25975,"最小值"],[1,26263,"\n"],[-1,26263,"时"],[1,26819,"存"],[-1,26819,"\n"],[-1,26979,"\n\n\n\n\n\n"]],[26985,26985],[25511,25511]]],[1527064009156,["rmgs@DESKTOP-BR4TD19",[[1,26976,"进行找零。可以一直"]],[26976,26976],[26985,26985]]],[1527064013280,["rmgs@DESKTOP-BR4TD19",[[-1,26981,"可以一直"]],[26985,26985],[26981,26981]]],[1527064023947,["rmgs@DESKTOP-BR4TD19",[[1,26981,"可以一直沿着表格往回追溯知道其"]],[26981,26981],[26996,26996]]],[1527064024423,["rmgs@DESKTOP-BR4TD19",[[-1,26993,"知道其"]],[26996,26996],[26993,26993]]],[1527064026628,["rmgs@DESKTOP-BR4TD19",[[1,26993,"直到起点。"]],[26993,26993],[26998,26998]]],[1527064026976,["rmgs@DESKTOP-BR4TD19",[[1,27007,"\n"]],[26998,26998],[26999,26999]]],[1527064027184,["rmgs@DESKTOP-BR4TD19",[[1,27008,"\n"]],[26999,26999],[27000,27000]]],[1527064054147,["rmgs@DESKTOP-BR4TD19",[[1,27000,"可执行代码2给出了改进的dpMakechange算法，"]],[27000,27000],[27027,27027]]],[1527064115083,[null,[[-1,25511,"\n\n"],[1,25513,"通过"],[-1,25619,"接"],[1,25620,"\n"],[-1,25640,"\n"],[1,25641,"，"],[-1,25822,"\n"],[1,25823,"中"],[-1,25975,"\n\n\n"],[1,25978,"最小值"],[-1,26263,"\n"],[1,26264,"时"],[-1,26819,"存"],[1,26820,"\n"],[-1,27027,""],[1,27027,"\n\n\n\n\n\n"]],[25511,25511],[27033,27033]]],[1527064115083,[null,[[1,25511,"\n\n"],[-1,25511,"通过"],[1,25619,"接"],[-1,25619,"\n"],[1,25640,"\n"],[-1,25640,"，"],[1,25822,"\n"],[-1,25822,"中"],[1,25975,"\n\n\n"],[-1,25975,"最小值"],[1,26263,"\n"],[-1,26263,"时"],[1,26819,"存"],[-1,26819,"\n"],[1,27027,""],[-1,27027,"\n\n\n\n\n\n"]],[27033,27033],[25511,25511]]],[1527064059851,["rmgs@DESKTOP-BR4TD19",[[1,27027,"它实现了追中"]],[27027,27027],[27033,27033]]],[1527064060159,["rmgs@DESKTOP-BR4TD19",[[-1,27031,"追中"]],[27033,27033],[27031,27031]]],[1527064061021,["rmgs@DESKTOP-BR4TD19",[[1,27031,"追"]],[27031,27031],[27032,27032]]],[1527064061239,["rmgs@DESKTOP-BR4TD19",[[-1,27030,"了追"]],[27032,27032],[27030,27030]]],[1527064087851,["rmgs@DESKTOP-BR4TD19",[[1,27030,"了追踪所使用的硬币，此外还有一个函数printCoins重塑"]],[27030,27030],[27060,27060]]],[1527064088200,["rmgs@DESKTOP-BR4TD19",[[-1,27058,"重塑"]],[27060,27060],[27058,27058]]],[1527064091411,["rmgs@DESKTOP-BR4TD19",[[1,27058,"回溯列"]],[27058,27058],[27061,27061]]],[1527064091536,["rmgs@DESKTOP-BR4TD19",[[-1,27060,"列"]],[27061,27061],[27060,27060]]],[1527064092483,["rmgs@DESKTOP-BR4TD19",[[1,27060,"列表"]],[27060,27060],[27062,27062]]],[1527064092816,["rmgs@DESKTOP-BR4TD19",[[-1,27060,"列表"]],[27062,27062],[27060,27060]]],[1527064093444,["rmgs@DESKTOP-BR4TD19",[[1,27060,"不啊"]],[27060,27060],[27062,27062]]],[1527064093736,["rmgs@DESKTOP-BR4TD19",[[-1,27060,"不啊"]],[27062,27062],[27060,27060]]],[1527064102628,["rmgs@DESKTOP-BR4TD19",[[1,27060,"表格来打印出使用的硬币的值。"]],[27060,27060],[27074,27074]]],[1527064102904,["rmgs@DESKTOP-BR4TD19",[[1,27083,"\n"]],[27074,27074],[27075,27075]]],[1527064103111,["rmgs@DESKTOP-BR4TD19",[[1,27084,"\n"]],[27075,27075],[27076,27076]]],[1527064105375,["rmgs@DESKTOP-BR4TD19",[[-1,27084,"\n"]],[27076,27076],[27075,27075]]],[1527064105607,["rmgs@DESKTOP-BR4TD19",[[-1,27083,"\n"]],[27075,27075],[27074,27074]]],[1527064175081,[null,[[-1,25511,"\n\n"],[1,25513,"通过"],[-1,25619,"接"],[1,25620,"\n"],[-1,25640,"\n"],[1,25641,"，"],[-1,25822,"\n"],[1,25823,"中"],[-1,25975,"\n\n\n"],[1,25978,"最小值"],[-1,26263,"\n"],[1,26264,"时"],[-1,26819,"存"],[1,26820,"\n"],[-1,27074,""],[1,27074,"\n\n\n\n"]],[25511,25511],[27078,27078]]],[1527064175081,[null,[[1,25511,"\n\n"],[-1,25511,"通过"],[1,25619,"接"],[-1,25619,"\n"],[1,25640,"\n"],[-1,25640,"，"],[1,25822,"\n"],[-1,25822,"中"],[1,25975,"\n\n\n"],[-1,25975,"最小值"],[1,26263,"\n"],[-1,26263,"时"],[1,26819,"存"],[-1,26819,"\n"],[1,27074,""],[-1,27074,"\n\n\n\n"]],[27078,27078],[25511,25511]]],[1527064152597,["rmgs@DESKTOP-BR4TD19",[[1,27074,"该算法也可以用于某共的朋友。main的前两行设置了要转换的量并且创建了所使用的"]],[27074,27074],[27113,27113]]],[1527064153303,["rmgs@DESKTOP-BR4TD19",[[-1,27109,"所使用的"]],[27113,27113],[27109,27109]]],[1527064157083,["rmgs@DESKTOP-BR4TD19",[[1,27109,"可用硬币的列表。"]],[27109,27109],[27117,27117]]],[1527064235083,[null,[[-1,25511,"\n\n"],[1,25513,"通过"],[-1,25619,"接"],[1,25620,"\n"],[-1,25640,"\n"],[1,25641,"，"],[-1,25822,"\n"],[1,25823,"中"],[-1,25975,"\n\n\n"],[1,25978,"最小值"],[-1,26263,"\n"],[1,26264,"时"],[-1,26819,"存"],[1,26820,"\n"],[-1,27117,""],[1,27117,"\n\n\n\n"]],[25511,25511],[27121,27121]]],[1527064235083,[null,[[1,25511,"\n\n"],[-1,25511,"通过"],[1,25619,"接"],[-1,25619,"\n"],[1,25640,"\n"],[-1,25640,"，"],[1,25822,"\n"],[-1,25822,"中"],[1,25975,"\n\n\n"],[-1,25975,"最小值"],[1,26263,"\n"],[-1,26263,"时"],[1,26819,"存"],[-1,26819,"\n"],[1,27117,""],[-1,27117,"\n\n\n\n"]],[27121,27121],[25511,25511]]],[1527064187953,["rmgs@DESKTOP-BR4TD19",[[1,27117,"接下来两行创建了用来存储结果的列表。con"]],[27117,27117],[27138,27138]]],[1527064188528,["rmgs@DESKTOP-BR4TD19",[[-1,27137,"n"]],[27138,27138],[27137,27137]]],[1527064190457,["rmgs@DESKTOP-BR4TD19",[[1,27137,"insUser"]],[27137,27137],[27144,27144]]],[1527064190879,["rmgs@DESKTOP-BR4TD19",[[-1,27143,"r"]],[27144,27144],[27143,27143]]],[1527064191298,["rmgs@DESKTOP-BR4TD19",[[1,27143,"ed"]],[27143,27143],[27145,27145]]],[1527064191871,["rmgs@DESKTOP-BR4TD19",[[-1,27143,"ed"]],[27145,27145],[27143,27143]]],[1527064213897,["rmgs@DESKTOP-BR4TD19",[[1,27143,"d即是找零所用的列表，coni"]],[27143,27143],[27158,27158]]],[1527064214631,["rmgs@DESKTOP-BR4TD19",[[-1,27156,"ni"]],[27158,27158],[27156,27156]]],[1527064232434,["rmgs@DESKTOP-BR4TD19",[[1,27156,"inCount是表中响应位置"]],[27156,27156],[27170,27170]]],[1527064233838,["rmgs@DESKTOP-BR4TD19",[[-1,27166,"响应位置"]],[27170,27170],[27166,27166]]],[1527064295084,[null,[[-1,25511,"\n\n"],[1,25513,"通过"],[-1,25619,"接"],[1,25620,"\n"],[-1,25640,"\n"],[1,25641,"，"],[-1,25822,"\n"],[1,25823,"中"],[-1,25975,"\n\n\n"],[1,25978,"最小值"],[-1,26263,"\n"],[1,26264,"时"],[-1,26819,"存"],[1,26820,"\n"],[-1,27166,""],[1,27166,"\n\n\n\n"]],[25511,25511],[27170,27170]]],[1527064295084,[null,[[1,25511,"\n\n"],[-1,25511,"通过"],[1,25619,"接"],[-1,25619,"\n"],[1,25640,"\n"],[-1,25640,"，"],[1,25822,"\n"],[-1,25822,"中"],[1,25975,"\n\n\n"],[-1,25975,"最小值"],[1,26263,"\n"],[-1,26263,"时"],[1,26819,"存"],[-1,26819,"\n"],[1,27166,""],[-1,27166,"\n\n\n\n"]],[27170,27170],[25511,25511]]],[1527064243618,["rmgs@DESKTOP-BR4TD19",[[1,27166,"相应位置处找零所用的最少硬币数。"]],[27166,27166],[27182,27182]]],[1527064243886,["rmgs@DESKTOP-BR4TD19",[[1,27191,"\n"]],[27182,27182],[27183,27183]]],[1527064244070,["rmgs@DESKTOP-BR4TD19",[[1,27192,"\n"]],[27183,27183],[27184,27184]]],[1527064246713,["rmgs@DESKTOP-BR4TD19",[[1,27184,"注意"]],[27184,27184],[27186,27186]]]]],["c953b6a1-f231-491e-9249-a1a6c96f6b2c",1527176619977,"递归\n===\n\n\n# 4 递归 #\n\n## 4.1 目标 ##\n\n本章目标如下：\n\n- 了解：某些难以处理的问题也许用递归可以轻松解决。\n- 掌握：设计递归式程序。\n- 了解并应用：递归三大法则。\n- 实现：问题的递归式描述。\n- 了解：计算机系统中递归的实现\n\n## 4.2 何为递归 ##\n\n递归是一种解决问题的方法，将一个问题分解为越来越小的子问题，直到问题的规模小到可以被轻松解决。通常来说，递归中有函数对自己本身的调用。从表面上来看似乎并没有什么特别指出，然而递归算法对于某些问题具有一针见血的气消。\n\n\n## 4.3 对数字列表求和 ##\n\n首先来看一个并不需要递归也可以解决的问题。假设相对一个数字列表求和，比如[1,3,5,7,9]。迭代式算法如可执行代码1所示。函数使用求和变量（theSum）来计算列表中数字之和。\n\n** 可执行代码1： 迭代求和 **\n```Python\ndef listsum(numList):\n    theSum = 0\n    for i in numList:\n        theSum = theSum + i\n    return theSum\n\nprint(listsum([1,3,5,7,9]))\n\n```\n那么，现在假设不可以使用while或者for循环，那又该如何做？数学家可能会想到加法本身是一种接受两个参数的函数，即一对数字。对于该列表求和问题便可转化为多对数字求和问题。先写为全括号化的表达式，比如：\n$$((((1+3)+5)+7)+9)$$\n也可以反方向来：\n$$(1+(3+(5+(7+9))))$$\n注意到最里面的括号组（7+9）是不需要迭代或者其它特殊结构便可解决的问题。实际上，可以将求和问题写为以下简化形式：\n$$total= (1+(3+(5+(7+9))))\ntotal= (1+(3+(5+16)))\ntotal= (1+(3+21))\ntotal= (1+24)\ntotal= 25$$\n如何将这种思想转化为Python程序？首先，将求和问题按Python列表的方式来考虑。可能读者会认为对列表的求和即是列表中第一个元素numList[0]与其它所有元素numList[1:]之和，以函数形式写出即为：\n$$listSum(numList)=first(numList)+listSum(rest(numList))$$\n在以上表达式中，first(numList)返回列表中第一个元素，而rest(numList)返回的是去除了第一个元素的原列表（也是一个列表）。用Python表达式可以写为如可执行代码2：\n\n** 可执行代码2：递归求和（第一次递归） **\n```Python\ndef listsum(numList):\n   if len(numList) == 1:\n        return numList[0]\n   else:\n        return numList[0] + listsum(numList[1:])\n\nprint(listsum([1,3,5,7,9]))\n\n```\n在这段代码中，有些地方需要注意。首先，在行2检查了列表是否仅有1个元素。这一判定很关键，它是控制函数结束的必要语句。长度为1的列表求和显然便是其本身。其次，在行5该函数调用了它自己本身。这便是将listsum归为递归算法的原因。递归函数是一种调用自身的函数。\n\n图1演示了对列表[1,3,5,7,9]求和的递归调用。读者可以将这些有序调用认为是一次次的问题简化过程。每调用一次，便转化为解决一个更小更容易的问题，知道问题规模不能再缩小。\n\n![image](http://interactivepython.org/courselib/static/pythonds/_images/sumlistIn.png)\n\n当问题已经最简化时，便开始将每个问题的答案拼装起来直到原始问题被解决。如图2所示，listsum沿着调用顺序返回。当listsum回到了最顶部的问题时，原始问题便得到了解决。\n\n![image](http://interactivepython.org/courselib/static/pythonds/_images/sumlistOut.png)\n\n## 4.4 递归三定律 ##\n\n跟阿西莫夫（Asimov）机器人三定律一样，递归算法也必须遵守三条重要定律：\n\n1. 递归算法必须要有个**约束条件**作为出口。\n2. 递归算法必须不断改变自身状态并向约束条件演进。\n3. 递归算法必须递归地调用自身。\n\n现在来仔细研究一下这三条定律以及在listsum中是如何得到体现的。首先，约束条件是终止算法递归的条件。一般来说，约束条件都是问题规模已经小到足以直接解决的时候。在listsum算法中，约束条件是长度为1的列表。\n\n为满足第二条定律，必须设法改变当前状态并使得算法向约束条件靠近。状态的改变意味着，算法使用的一些数据将被改变。通常来说，即为问题规模以某种方法缩小。在listsum算法中，基本数据结构是列表，因此需要在列表上想办法实现状态的改变。因为约束条件是列表长度为1，向约束条件演进的一种很自然的实现方式就是缩小列表，这便是可执行代码在行5所做的事：将列表长度缩小，然后将其作为参数来调用listsum本身。\n\n最后一条定律是算法必须调用自己本身，这是递归根本的定义。递归对于许多初学者来说是个有些难懂的概念。读者应当已经发现，递归函数是一种很优秀的方法，借助它可以将大规模的问题拆分为小问题，解决这些小问题只需要写一个简单的函数来对它们处理即可。表面看起来，递归似乎是陷入了一种循环。但实际上它在逻辑上并不是循环的，递归的逻辑是用优美简洁的表达式将问题拆分为更小更简单的。\n\n在本章的剩余部分将进一步研究递归，每个例子中都着重于用如何利用三定律来设计算法。\n\n## 4.5 将整数转化为以任何进制表示的字符串 ##\n\n假设需要将整数转化为二进制与十六进制之间的某进制表示的字符串形式。比如，整数10的十进制字符串为\"10\"，而二进制字符串为\"1010\"。有很多算法可以解决该问题，包括前文说过的以栈来解决，但是用递归思想来解决该问题还是最简洁的。\n\n接下来以十进制的整数768为例演示一个具体的问题。假设用一组字符串来对应前10个数字，比如说convString = \"0123456789\" 。通过在字符串中检索，很容易便可将10以内的数字进行转化，例如整数9，那么字符串便是convString[9]，即\"9\"。将769拆分为三个单独的数字7，6，9，将其转化为字符串也很简单了。小于10的整数看起来是不错的约束条件。\n\n确定基本进制后，整个算法将包括3部分：\n\n1. 将原数字转化为一系列单数字。\n2. 利用检索将单数字转为字符串。\n3. 将各单数字字符串连接起来，形成最终的结果。\n\n下一步是实现状态的改变，使得程序向约束条件靠近。因为研究对象是数字，不妨回想一想什么数学运算可以减少数字，最有可能的是减法和除法。虽然说减法也许是可行的，但有些令人困扰的是在这里如何确定减法操作的两个对象。而除法则清晰很多。\n\n将整数769除以10，可以得到76余9，这两个数字很有用。首先，余数是一个小于进制（10）的数，因此可以直接使用检索转化为字符串。其次，得到了一个小于初始数字的数，这便向约束条件靠近了一步。现在需要做得便是将76转化为它的字符表示。同样，利用除法可以得到7余6。最后，问题退化为转化7。流程如图3所示。注意，需要被保存的数被放置在示意图右侧。\n\n![image](http://interactivepython.org/courselib/static/pythonds/_images/toStr.png)\n\n可执行代码1实现了上述的算法。\n\n** 可执行代码1：迭代算法——整数转化为字符串 **\n```Python\ndef toStr(n,base):\n   convertString = \"0123456789ABCDEF\"\n   if n < base:\n      return convertString[n]\n   else:\n      return toStr(n//base,base) + convertString[n%base]\n\nprint(toStr(1453,16))\n```\n注意在第3行，检测了约束条件，即n小于目标进制。一旦检测到约束条件，便停止递归，然后根据convertString序列返回结果。在行6，通过递归调用和除法降低问题规模来同时满足了第2和第3定律。\n\n再来追踪一次该算法，这次将整数10转化为2进制形式字符串（\"1010\"）\n\n![image](http://interactivepython.org/courselib/static/pythonds/_images/toStrBase2.png)\n\n如图4所示，得到了所需结果，似乎数字的顺序错了。但是实际上，算法运行是正常的，因为是在行6中是先进行的递归调用，然后再将余数的字符串标识加上。\n\n## 4.6 栈桢：实现递归 ##\n\n设想，如果不按上文那样将递归调用的单字符结果依次连接起来得到结果，而是将算法修改为在递归调用之前将字符串压入栈中。调整后的算法如可执行代码1所示。\n** 可执行代码1：利用栈实现整数转化为字符串 **\n```Python\nfrom pythonds.basic.stack import Stack\n\nrStack = Stack()\n\ndef toStr(n,base):\n    convertString = \"0123456789ABCDEF\"\n    while n > 0:\n        if n < base:\n            rStack.push(convertString[n])\n        else:\n            rStack.push(convertString[n % base])\n        n = n // base\n    res = \"\"\n    while not rStack.isEmpty():\n        res = res + str(rStack.pop())\n    return res\n\nprint(toStr(1453,16))\n\n```\n每一次调用toStr，都将一个字符放入栈中。就前一个例子来说，可以发现在第4次调用后，得到的栈如图5所示。注意，现在可以直接将字符从栈中推出，再将他们链接为最后的结果\"1010\"即可。\n\n![../_images/recstack.png](http://interactivepython.org/courselib/static/pythonds/_images/recstack.png)\n\n此例说明了Python是如何实现递归函数调用的。在Python中，调用一个函数时，系统会分配一个栈桢用来处理该函数中的局部变量。当函数执行完毕，返回值被放入栈顶等待被调用的函数处理。如图6所示。\n\n![../_images/newcallstack.png](http://interactivepython.org/courselib/static/pythonds/_images/newcallstack.png)\n\n注意对toStr(2//2, 2)的调用在栈中返回了值“1”。该返回值在表达式“1” + convertString[2%2]用来取代函数调用toStr(1,2)，执行后得到的结果“10”又被放在栈顶。这样一来，Python的调用栈取代了代码4中所使用的栈。在该例子中，读者可以认为栈顶的返回值替代了累加变量的作用。\n\n栈桢也为对应函数使用的变量规定了作用域。虽然多次调用同一个函数，每一次调用都为函数的局部变量创建一个新的作用域。\n\n## 4.7 图示递归 ##\n\n在上一节中介绍了一些使用递归算法可以轻松解决的问题，然而很难给出递归函数运行的可视化方法或者思维导图，这就使得递归算法不是那么容易掌握的。本节将研究一些递归的例子并画出示意图。通过研究这些示意图的形成过程，便会对递归过程有更加深刻的理解。\n\n这里使用Python的海龟图像模块turtle进行可视化。turtle模块是所有Python版本的标配并且很容易上手，其符号也很简单。创建一只海龟，该海龟可以前进/后退/左转/右转等，并且可以控制尾巴的抬起和放下。当海龟的尾巴放下且在移动时，便会绘制出线。为了提高观赏性，可以改变海龟尾巴的宽度以及画笔的颜色。\n\n下面简单说明turtle作图的基础，这里会利用turtle绘制一个螺旋线。如可执行代码所示。引入turtle模块后，创建一个turtle实例。当turtle生成后，为其创建一个窗口用来绘图。接下来定义drawSpiral函数。该函数的约束条件是待画线的长度（以len参数表示）减少到小于或等于0。若长度仍大于0，则命令海龟前进len单位然后右转90度。通过再次调用drawSpiral并且传入减小后的长度实现递归。在可执行代码1的最后，调用了函数myWin.exitonclick()，这是窗口的一个很便利的方法，它将海龟置于待机状态直到在窗口内发生点击操作，然后页面才清空并退出。\n\n**可执行代码1：使用海龟绘制递归螺旋线**\n```Python\nimport turtle\n\nmyTurtle = turtle.Turtle()\nmyWin = turtle.Screen()\n\ndef drawSpiral(myTurtle, lineLen):\n    if lineLen > 0:\n        myTurtle.forward(lineLen)\n        myTurtle.right(90)\n        drawSpiral(myTurtle,lineLen-5)\n\ndrawSpiral(myTurtle,100)\nmyWin.exitonclick()\n```\n\n这就是海龟模块中所需要了解的一些基本知识，据此便可以绘制漂亮的团了。下一个程序将绘制一个分形树。分形是数学的一个分支，它与递归有许多相似点。对于某个图形，无论放大多少倍，其基本形状都是一致的，此时便称之为**分形**。很多自然现象具有分形特点，比如海岸线，雪花，山脉，树以及灌木等，这使得CG（Computer Generated）电影具有了可行性。接下来的例子中将绘制一颗分形树。\n\n为了画出这棵树，考虑如何用分形思想来描述一棵树是很有用的。回想一下，分形就是无论放大多少倍都具有相似性的东西。将这种思想用来研究树或者灌木，可以发现即使是小树枝也具有与整棵树一致的形状和特点。据此可以将树定义为一个左右分叉，且左右各有一个更小的“树”（分叉）。引入递归的概念，那么树便是这些递归的小树构成的。\n\n现在将上述思路转换为Python代码。代码1利用海龟来绘制了一颗分形树。可以发现，行5和行7进行了递归调用。行5在右转20度后进行了递归调用，这便是前文提到的右分叉；在行7，海龟在左转40度后进行了另一次递归调用，这即为左分叉。此外，注意到每次调用tree后，都对branchlen参数进行了减法运算，这保证了递归树是越来越小的。读者应该也注意到了行2的**if**语句即是约束条件，在branchLen过小时触发。\n\n**代码1**\n```Python\ndef tree(branchLen,t):\n    if branchLen > 5:\n        t.forward(branchLen)\n        t.right(20)\n        tree(branchLen-15,t)\n        t.left(40)\n        tree(branchLen-10,t)\n        t.right(20)\n        t.backward(branchLen)\n```\n完整的代码如可执行代码2所示。在运行代码前，思考一下是分叉树是如何绘制的。仔细观察这些调用，想想分叉树是如何展开的。它是同时对称地绘制左右分叉还是先右再左？\n\n**可执行代码2:递归绘制分叉树**\n```Python\ndef tree(branchLen,t):\n    if branchLen > 5:\n        t.forward(branchLen)\n        t.right(20)\n        tree(branchLen-15,t)\n        t.left(40)\n        tree(branchLen-15,t)\n        t.right(20)\n        t.backward(branchLen)\n\ndef main():\n    t = turtle.Turtle()\n    myWin = turtle.Screen()\n    t.left(90)\n    t.up()\n    t.backward(100)\n    t.down()\n    t.color(\"green\")\n    tree(75,t)\n    myWin.exitonclick()\n\nmain()\n```\n注意分叉树上的每一个分叉点是如何相应递归调用，以及分叉树是如何一路朝右绘制到最短的那个分支的。如图2所示。现在，仔细观察，程序是在整个树的右侧绘制完成后再沿着分叉返回，分叉树的右半侧如图1所示。接下来将绘制树的左侧，然而并不是直接画出最大的左侧，而是在每次到达最短枝前，先画出左分支的整个右半部分，然后再返回画左半部分。\n\n![../_images/tree1.png](http://interactivepython.org/courselib/static/pythonds/_images/tree1.png)\n\n![../_images/tree2.png](http://interactivepython.org/courselib/static/pythonds/_images/tree2.png)\n\n分形树只是一个起点，此外，读者也应该注意到这棵树看起来并不是那么真实，因为自然界中并不会真的像计算机程序那样具有高度对称性。本章的最后将会介绍一些有趣的选项，可以使得分叉树看起来更真实。\n\n## 4.8 谢尔宾斯基三角形 ##\n\n谢尔宾斯基三角形也是一种具有自相似性的分形图形，如图三所示。谢尔宾斯基三角形是一种三向递归算法。手绘谢尔宾斯基三角形的方法很简单。从某个大的三角形开始，将这个大三角形分为4个小的三角形：连接每条边的中点；剔除掉新的4个三角形中间的那个，对剩余的三个采取同样的步骤；以此类推，不断递归循环。如果笔足够细的话，是可以无穷地画下去的。\n\n![../_images/sierpinski.png](http://interactivepython.org/courselib/static/pythonds/_images/sierpinski.png)\n\n既然这个算法可以无限运行，那就必须得找出约束条件。这里被设置为了任意的划分次数，有时这被称为相似性维数。每次进行递归调用，就将维数减1直到为0。代码如可执行代码1所示。\n\n**可执行代码1:绘制谢尔宾斯基三角形**\n```Python\nimport turtle\n\ndef drawTriangle(points,color,myTurtle):\n    myTurtle.fillcolor(color)\n    myTurtle.up()\n    myTurtle.goto(points[0][0],points[0][1])\n    myTurtle.down()\n    myTurtle.begin_fill()\n    myTurtle.goto(points[1][0],points[1][1])\n    myTurtle.goto(points[2][0],points[2][1])\n    myTurtle.goto(points[0][0],points[0][1])\n    myTurtle.end_fill()\n\ndef getMid(p1,p2):\n    return ( (p1[0]+p2[0]) / 2, (p1[1] + p2[1]) / 2)\n\ndef sierpinski(points,degree,myTurtle):\n    colormap = ['blue','red','green','white','yellow',\n                'violet','orange']\n    drawTriangle(points,colormap[degree],myTurtle)\n    if degree > 0:\n        sierpinski([points[0],\n                        getMid(points[0], points[1]),\n                        getMid(points[0], points[2])],\n                   degree-1, myTurtle)\n        sierpinski([points[1],\n                        getMid(points[0], points[1]),\n                        getMid(points[1], points[2])],\n                   degree-1, myTurtle)\n        sierpinski([points[2],\n                        getMid(points[2], points[1]),\n                        getMid(points[0], points[2])],\n                   degree-1, myTurtle)\n\ndef main():\n   myTurtle = turtle.Turtle()\n   myWin = turtle.Screen()\n   myPoints = [[-100,-50],[0,100],[100,-50]]\n   sierpinski(myPoints,3,myTurtle)\n   myWin.exitonclick()\n\nmain()\n```\n代码1即是按前文所述思想写出来的。sierpinski做的第一件事是绘制最外部的三角形。接下来，进行了三次递归调用，每一次都是用来通过连接中点来获得新的三角形。这里又用了标准的海龟库。可以通过在Python提示符里输入help('turtle')来细究turtle库中可用的方法。\n\n仔细研究代码，想想这些三角形的绘制顺序。确切地来说，绘制顺序取决于初始的设定，这里假设顺序是左下，上，右下。考虑到sierpinski函数调用其本身的方式，sierpinski先是沿最短路线直接到达可以绘制的最小的左下角的三角形，再返过来绘制其它的剩余部分：先是按类似的方式直接向最小的、最顶部的三角形前进；最后再绘制右下角的最小的三角形。\n\n有时候根据函数调用的示意图来理解递归算法是很有用的。如图4所示，本例中的递归算法总是先向左边前进。黑线表示正在运行的，灰色的表示没有运行的，越靠近图4的底部，三角形越小。函数每次执行都消耗一个相似维度。到达最底部左边的三角形后，将继续绘制中间的三角形，并以此类推。\n\n![../_images/stCallTree.png](http://interactivepython.org/courselib/static/pythonds/_images/stCallTree.png)\n\nsierpinski函数很大程度上是基于getMid函数的。getMid函数接收两个参数作为端点，返回两者的中点。此外，可执行代码1中使用了begin_fill和end_fill方法来绘制带填充色的三角形。\n\n## 4.9 复杂递归问题 ##\n\n在前几节中，本书讨论了一些相对简单并且图形上很有趣的问题来帮助读者理解递归。在本节中，将研究一些使用迭代法难以解决然而却可以用递归法优雅而简洁地解决的问题。在最后，将讲解一个看起来似乎能用递归法解决但实际上并不能的问题。\n\n## 4.10 河内（Hanoi）塔问题 ##\n\n河内塔问题由法国数学家Edouard于1883年受到印度教中的一个故事启发而提出，在故事中，年轻僧侣将被予以考题。在最开始，僧侣们会得到3根杆以及64个金圆盘，每个盘都比其下面的盘小一些。他们的任务是将这64个盘从一个盘移动到另外一个盘去，并且有两个限制条件：每次只允许移动一个盘；禁止将大盘置于小盘之上。僧侣们夜以继日地努力，每秒移动一个盘子。传说中，当他们完成此任务时，世界将会毁灭。\n\n传说很有趣，但现在也不用担心世纪末日的问题。正确地完成该任务需要$2^{64}-1=18446744073709551615$次移动。1秒移动1次，也需要584942417355年。显然，实际所需时间比这更长。\n\n图1演示了从第一根杆移动到第三根杆时，中间杆上的盘子的情况。注意到，按照规定，每根杆上的盘子都是从上到下依次变大的。如果你之前没有接触过该问题，那不妨现在来尝试一下。不必真的想象盘子和杆什么的，一堆书或者一堆纸即可。\n\n![image](http://interactivepython.org/courselib/static/pythonds/_images/hanoi.png)\n\n那么用递归该如何解决这个问题？约束条件又是什么？现在来从头考虑下这个问题。假设有5个盘子，并且开始都放在杆1上。如果已经知道了如何将4个盘子移动到杆2上，便可以轻松地将底部的盘子移到杆3上，然后把那4个盘子从杆2移动到杆3上。但是不知道怎么移动4个盘子又该如何是好？那么考虑下，假如知道如何移动3个盘子的杆...以此类推。显然将1个盘子移动到杆3是很容易的。看起来似乎这就是约束条件了。\n\n\n下面是对盘子从起始杆通过中间杆移动到目标杆的高度概括（设盘数为Height）：\n\n1. 利用目标杆，将高度为 Height - 1 的塔从起始杆移动到中间杆上。\n2. 将剩下的那个盘子放到目标杆上。\n3. 利用中间杆，将高度为 Height - 1 的塔从中间杆移动到目标杆上。\n\n维持大盘在下的规则便可以递归使用上面的3步，便可以处理任何更大规模的问题。上述步骤中唯一缺少的就是对约束条件的确定。最简的河内塔问题是仅有一个盘子的塔。在这种情况下，只需要将该盘子直接移动到目标杆即可。高度为1的河内塔即是约束条件。此外，上述步骤通过在步骤1和3中减少塔的高度来实现了向约束条件收敛。代码1给出了解决河内塔问题的Python代码。\n\n**代码1**\n```Python\ndef moveTower(height,fromPole, toPole, withPole):\n    if height >= 1:\n        moveTower(height-1,fromPole,withPole,toPole)\n        moveDisk(fromPole,toPole)\n        moveTower(height-1,withPole,toPole,fromPole)\n```\n该代码看起来似乎就像英文描述性文字一样。该算法的简便性关键在于进行了两次不同的递归调用。在行3，将除了最底部（最大的）盘子全部移到中间杆上，行4仅将底部的盘子移动到目标盘。行5则是将中间杆上的圆盘移动到最大盘的上部（目标杆）即可。约束条件即是塔高度为0。注意，处理约束条件在这种情况下是调用moveDisk函数的前提条件。\n\nmoveDisk函数，如代码2所示，也很简单。它仅仅是打印出将盘子从某个杆上移动到另一个杆的过程。读者可以试着运行一下，便可发现该算法可以很高效地解决该问题。\n\n**代码2**\n```Python\ndef moveDisk(fp,tp):\n    print(\"moving disk from\",fp,\"to\",tp)\n```\n\n看过moveTower和moveDisk的代码后，读者可能会想为何不直接使用栈来追踪任意盘子在哪个杆里。提示：如果要显式地追踪盘子，应该需要3个栈，每个对应一个杆。答案是，Python本身就隐式地提供了我们所需要的调用栈。\n\n## 4.6 探索迷宫 ##\n\n本节将研究的问题跟拓宽机器人活动范围有关：如何走出迷宫？如果寝室内有一个Roomba真空打扫机器人，读者可能会想利用本节所学只是对其进行重新编程。本节的问题是帮助海龟走出虚拟迷宫。在该问题中，假设海龟掉入中央并开始虚招出炉。观察图2，思考如何解决该问题。\n\n![../_images/maze.png](http://interactivepython.org/courselib/static/pythonds/_images/maze.png)\n\n为了简化问题，假设迷宫以矩形为单位划分。每个矩形要么是开放的要么是填充以墙。海龟只能通过开放的部分，如果遭遇了墙则必须调整方向。海龟需要系统性的步骤以走出该迷宫。下面是具体的步骤：\n\n- 在初始位置尝试向北走一步，以此开始递归程序。\n- 若第一步的向北移动失败，则向南移动，然后开始递归。\n- 若第一步的向南移动也失败，则向西移动，然后开始递归。\n- 若第一步的向北、向南、向西移动均失败，则向东移动。\n- 若四个方向均不可行，则此路径无法走出迷宫，失败。\n\n听起来很容易，然而有些细节需要说明一下。假设递归的第一步是向北移动的，按照制定的程序来说，下一步也将向北移动，此时如果不幸地被墙挡住，便会向南移动，于是便会到了起始状态。此时如果按照这种递归程序来做，只会向后退一步，然后陷入无限迭代中。因此，需要一种方法来记录走过的地方。在本例中，可以假设手里有一袋面包屑可以沿着走过的路径撒下。如果准备向某个方向前进一步时发现该方块已经有面包屑了，此时立刻退回来并且尝试另外一个方向。在该算法的代码中可以看出，往回走一步同递归函数调用结果返回一样。\n\n跟其它递归算法一样，这里也需要研究约束条件。一部分读者可能根据前文已经推测出，在本算法中，有4个约束条件需要考虑：\n1. 海龟碰到墙壁。由于方格被墙壁填充而无法通行。\n2. 海龟到达已访问过的方格。为避免陷入无限迭代，不能在此位置继续前进。\n3. 到达没有墙的边界之外，换言之已经走出迷宫。\n4. 海龟在四个方向上都无法前进。\n\n要让程序运行起来，需要一种方法来模拟迷宫。为了使之看起来更有趣，这里使用了海龟模块来绘制和探索迷宫，这样便可以观察该算法的动态效果了。迷宫对象应该要提供以下方法以便编写搜索算法。\n\n- \\_\\_init\\_\\_ 读取表示迷宫的数据，初始化迷宫的内部表示，并且找到海龟的起始位置。\n- drawMaze 在一个窗口中绘制迷宫。\n- updatePosition 更新迷宫内部状态并更改海龟位置。\n- isExit 判断当前位置是否为迷宫的一个出口。\n\nMaze类也重载了操作符[]，这样算法程序便可以很容易地获取任意方格的状态。\n\n下面看一下叫做searchFrom的搜索函数的代码，如代码3所示。注意到该函数接收3个参数：一个maze对象，起始行，起始列。从逻辑上来说，每次调用递归函数都将重新开始搜索。\n\n**代码3**\n```Python\ndef searchFrom(maze, startRow, startColumn):\n    maze.updatePosition(startRow, startColumn)\n   #  Check for base cases:\n   #  1\\. We have run into an obstacle, return false\n    if maze[startRow][startColumn] == OBSTACLE :\n        return False\n    #  2\\. We have found a square that has already been explored\n    if maze[startRow][startColumn] == TRIED:\n        return False\n    # 3\\. Success, an outside edge not occupied by an obstacle\n    if maze.isExit(startRow,startColumn):\n        maze.updatePosition(startRow, startColumn, PART_OF_PATH)\n        return True\n    maze.updatePosition(startRow, startColumn, TRIED)\n\n    # Otherwise, use logical short circuiting to try each\n    # direction in turn (if needed)\n    found = searchFrom(maze, startRow-1, startColumn) or \\\n            searchFrom(maze, startRow+1, startColumn) or \\\n            searchFrom(maze, startRow, startColumn-1) or \\\n            searchFrom(maze, startRow, startColumn+1)\n    if found:\n        maze.updatePosition(startRow, startColumn, PART_OF_PATH)\n    else:\n        maze.updatePosition(startRow, startColumn, DEAD_END)\n    return found\n```\n可以看出，在此算法中，第一步是调用了updatePosition函数。这仅仅是为了实现算法的可视化便于观察海龟是如何在迷宫中进行移动的。接下来该算法检测了4个约束条件的前3个：海龟是否碰到了墙壁？海龟是否回到了曾经到过的地方？海龟是否找到了出口？如果这些情况无一满足，则继续进行递归搜索。\n\n读者也应当注意到了，在递归过程中使用了4次对searchFrom递归调用。很难预测到底进行了多少次递归调用，因为它们之间是用**or**连接的。如果第1个对searchFrom的调用返回结果为True，那么剩余的3次调用都不会执行。可以认为，移动至(row-1, column)是走出迷宫的一步。如果向北走并没有走出迷宫的方法，那么第2个调用将会执行，这个调用是移至南方。如果向南移动的也失败了，则向西，以此类推，最后是向东。如果4个递归函数返回的结果都是**False**，那么说明没走出去。读者应当下载或者手动输入以上程序，并逐一尝试改变调用顺序。\n\nMaze类的如代码4、代码5及代码6所示。\\_\\_init\\_\\_方法接收1个文件名作为唯一的参数。该文件为文本文件，以\"+\"代表墙壁，\" \"代表开放性方块，\"S\"代表起始位置。图3是maze数据文件的一个例子。maze的内部表示时间上是由列表组成的列表（list of lists）。mazelist实例变量的每一行都是一个列表。二级列表的由上述的字符构成。对于图3所示的数据文件，在Python中的内部表示为：\n\n[ ['+','+','+','+',...,'+','+','+','+','+','+','+'],\n  ['+',' ',' ',' ',...,' ',' ',' ','+',' ',' ',' '],\n  ['+',' ','+',' ',...,'+','+',' ','+',' ','+','+'],\n  ['+',' ','+',' ',...,' ',' ',' ','+',' ','+','+'],\n  ['+','+','+',' ',...,'+','+',' ','+',' ',' ','+'],\n  ['+',' ',' ',' ',...,'+','+',' ',' ',' ',' ','+'],\n  ['+','+','+','+',...,'+','+','+','+','+',' ','+'],\n  ['+',' ',' ',' ',...,'+','+',' ',' ','+',' ','+'],\n  ['+',' ','+','+',...,' ',' ','+',' ',' ',' ','+'],\n  ['+',' ',' ',' ',...,' ',' ','+',' ','+','+','+'],\n  ['+','+','+','+',...,'+','+','+',' ','+','+','+']]\n\ndrawMaze方法使用上述内部表示在屏幕上对迷宫进行初始绘制。\n\n++++++++++++++++++++++\n+   +   ++ ++     +\n+ +   +       +++ + ++\n+ + +  ++  ++++   + ++\n+++ ++++++    +++ +  +\n+          ++  ++    +\n+++++ ++++++   +++++ +\n+     +   +++++++  + +\n+ +++++++      S +   +\n+                + +++\n++++++++++++++++++ +++\n\n**图3:Maze数据文件示例**\n\nupdatePosition方法，如代码5所示使用了相同的内部表示来确定海龟是否撞墙。它也用来更新该内部表示，即使用\".\"或者\"-\"来分别表示已访问过的方块以及死胡同。此外，updatePosition方法使用了两个辅助方法，moveTurtle和dropBreadCrumb来在屏幕上更新视图。\n\n最后，isExit方法使用海龟当前的位置来测试是否为出口。出口极为0行或者0列或者最右侧的列或者最底部的行。\n\n**代码4**\n```Python\nclass Maze:\n    def __init__(self,mazeFileName):\n        rowsInMaze = 0\n        columnsInMaze = 0\n        self.mazelist = []\n        mazeFile = open(mazeFileName,'r')\n        rowsInMaze = 0\n        for line in mazeFile:\n            rowList = []\n            col = 0\n            for ch in line[:-1]:\n                rowList.append(ch)\n                if ch == 'S':\n                    self.startRow = rowsInMaze\n                    self.startCol = col\n                col = col + 1\n            rowsInMaze = rowsInMaze + 1\n            self.mazelist.append(rowList)\n            columnsInMaze = len(rowList)\n\n        self.rowsInMaze = rowsInMaze\n        self.columnsInMaze = columnsInMaze\n        self.xTranslate = -columnsInMaze/2\n        self.yTranslate = rowsInMaze/2\n        self.t = Turtle(shape='turtle')\n        setup(width=600,height=600)\n        setworldcoordinates(-(columnsInMaze-1)/2-.5,\n                            -(rowsInMaze-1)/2-.5,\n                            (columnsInMaze-1)/2+.5,\n                            (rowsInMaze-1)/2+.5)\n```\n**代码5**\n```Python\ndef drawMaze(self):\n    for y in range(self.rowsInMaze):\n        for x in range(self.columnsInMaze):\n            if self.mazelist[y][x] == OBSTACLE:\n                self.drawCenteredBox(x+self.xTranslate,\n                                     -y+self.yTranslate,\n                                     'tan')\n    self.t.color('black','blue')\n\ndef drawCenteredBox(self,x,y,color):\n    tracer(0)\n    self.t.up()\n    self.t.goto(x-.5,y-.5)\n    self.t.color('black',color)\n    self.t.setheading(90)\n    self.t.down()\n    self.t.begin_fill()\n    for i in range(4):\n        self.t.forward(1)\n        self.t.right(90)\n    self.t.end_fill()\n    update()\n    tracer(1)\n\ndef moveTurtle(self,x,y):\n    self.t.up()\n    self.t.setheading(self.t.towards(x+self.xTranslate,\n                                     -y+self.yTranslate))\n    self.t.goto(x+self.xTranslate,-y+self.yTranslate)\n\ndef dropBreadcrumb(self,color):\n    self.t.dot(color)\n\ndef updatePosition(self,row,col,val=None):\n    if val:\n        self.mazelist[row][col] = val\n    self.moveTurtle(col,row)\n\n    if val == PART_OF_PATH:\n        color = 'green'\n    elif val == OBSTACLE:\n        color = 'red'\n    elif val == TRIED:\n        color = 'black'\n    elif val == DEAD_END:\n        color = 'red'\n    else:\n        color = None\n\n    if color:\n        self.dropBreadcrumb(color)\n```\n**代码6**\n```Python\ndef isExit(self,row,col):\n     return (row == 0 or\n             row == self.rowsInMaze-1 or\n             col == 0 or\n             col == self.columnsInMaze-1 )\n\ndef __getitem__(self,idx):\n     return self.mazelist[idx]\n```\n完整代码如可执行代码1所示。该程序使用了如下所示的maze2.txt数据文件。注意到由于出口和海龟起始位置很近，因此本例要简单得多。\n\n**可执行代码1**\n```Python\nimport turtle\n\nPART_OF_PATH = 'O'\nTRIED = '.'\nOBSTACLE = '+'\nDEAD_END = '-'\n\nclass Maze:\n    def __init__(self,mazeFileName):\n        rowsInMaze = 0\n        columnsInMaze = 0\n        self.mazelist = []\n        mazeFile = open(mazeFileName,'r')\n        rowsInMaze = 0\n        for line in mazeFile:\n            rowList = []\n            col = 0\n            for ch in line[:-1]:\n                rowList.append(ch)\n                if ch == 'S':\n                    self.startRow = rowsInMaze\n                    self.startCol = col\n                col = col + 1\n            rowsInMaze = rowsInMaze + 1\n            self.mazelist.append(rowList)\n            columnsInMaze = len(rowList)\n\n        self.rowsInMaze = rowsInMaze\n        self.columnsInMaze = columnsInMaze\n        self.xTranslate = -columnsInMaze/2\n        self.yTranslate = rowsInMaze/2\n        self.t = turtle.Turtle()\n        self.t.shape('turtle')\n        self.wn = turtle.Screen()\n        self.wn.setworldcoordinates(-(columnsInMaze-1)/2-.5,-(rowsInMaze-1)/2-.5,(columnsInMaze-1)/2+.5,(rowsInMaze-1)/2+.5)\n\n    def drawMaze(self):\n        self.t.speed(10)\n        self.wn.tracer(0)\n        for y in range(self.rowsInMaze):\n            for x in range(self.columnsInMaze):\n                if self.mazelist[y][x] == OBSTACLE:\n                    self.drawCenteredBox(x+self.xTranslate,-y+self.yTranslate,'orange')\n        self.t.color('black')\n        self.t.fillcolor('blue')\n        self.wn.update()\n        self.wn.tracer(1)\n\n    def drawCenteredBox(self,x,y,color):\n        self.t.up()\n        self.t.goto(x-.5,y-.5)\n        self.t.color(color)\n        self.t.fillcolor(color)\n        self.t.setheading(90)\n        self.t.down()\n        self.t.begin_fill()\n        for i in range(4):\n            self.t.forward(1)\n            self.t.right(90)\n        self.t.end_fill()\n\n    def moveTurtle(self,x,y):\n        self.t.up()\n        self.t.setheading(self.t.towards(x+self.xTranslate,-y+self.yTranslate))\n        self.t.goto(x+self.xTranslate,-y+self.yTranslate)\n\n    def dropBreadcrumb(self,color):\n        self.t.dot(10,color)\n\n    def updatePosition(self,row,col,val=None):\n        if val:\n            self.mazelist[row][col] = val\n        self.moveTurtle(col,row)\n\n        if val == PART_OF_PATH:\n            color = 'green'\n        elif val == OBSTACLE:\n            color = 'red'\n        elif val == TRIED:\n            color = 'black'\n        elif val == DEAD_END:\n            color = 'red'\n        else:\n            color = None\n\n        if color:\n            self.dropBreadcrumb(color)\n\n    def isExit(self,row,col):\n        return (row == 0 or\n                row == self.rowsInMaze-1 or\n                col == 0 or\n                col == self.columnsInMaze-1 )\n\n    def __getitem__(self,idx):\n        return self.mazelist[idx]\n\n\ndef searchFrom(maze, startRow, startColumn):\n    # try each of four directions from this point until we find a way out.\n    # base Case return values:\n    #  1. We have run into an obstacle, return false\n    maze.updatePosition(startRow, startColumn)\n    if maze[startRow][startColumn] == OBSTACLE :\n        return False\n    #  2. We have found a square that has already been explored\n    if maze[startRow][startColumn] == TRIED or maze[startRow][startColumn] == DEAD_END:\n        return False\n    # 3. We have found an outside edge not occupied by an obstacle\n    if maze.isExit(startRow,startColumn):\n        maze.updatePosition(startRow, startColumn, PART_OF_PATH)\n        return True\n    maze.updatePosition(startRow, startColumn, TRIED)\n    # Otherwise, use logical short circuiting to try each direction\n    # in turn (if needed)\n    found = searchFrom(maze, startRow-1, startColumn) or \\\n            searchFrom(maze, startRow+1, startColumn) or \\\n            searchFrom(maze, startRow, startColumn-1) or \\\n            searchFrom(maze, startRow, startColumn+1)\n    if found:\n        maze.updatePosition(startRow, startColumn, PART_OF_PATH)\n    else:\n        maze.updatePosition(startRow, startColumn, DEAD_END)\n    return found\n\n\nmyMaze = Maze('maze2.txt')\nmyMaze.drawMaze()\nmyMaze.updatePosition(myMaze.startRow,myMaze.startCol)\n\nsearchFrom(myMaze, myMaze.startRow, myMaze.startCol)\n```\n## 4.12 动态规划 ##\n\n计算机科学中的很多程序都是为了实现优化。比如说，求出两点之间的最短路径，给出一组数据点的最佳拟合曲线，求出满足一定条件的对象的最小集合。计算机科学中有很多策略用来解决这些问题。本书的目的之一便是向读者介绍一些不同的求解策略。**动态规划**是用于解决优化问题的策略之一。\n\n优化问题的一个经典例子就是使用最少的硬币完成找零。假设你是自动贩卖机制造商的程序员，你司试图在每次交易中找零最少的硬币以简化工作流程。比如说，某个客户投入了1美元购买37美分的商品，那么找零用的硬币最少个数为多少？答案为6：2个25美分，1个10美分，3个1美分。如何得到这个答案？首先要尽量使用库存中面额最大的硬币（25美分），接着使用下一个可用的面值最大的硬币，同样尽量多地使用。第一种方法为**贪心法**，因为这里试图将此问题尽可能地分为比较大的块来解决。\n\n使用美国硬币时，贪心法效果还不错，但是假设你司决定在某共部署其自动贩卖机，除了一般的1，5，10及25分之外，还有21分的。在这种情况下，贪心法便不能给出找零63分的最优解了。即使提供了21分，贪心法给出的解仍是6。显然，最优解是3个21分。\n\n再来看一个可以保证能找到最优解的算法。因为本节跟递归有关，读者有可能猜到了会与递归有关。首先想一想约束条件。如果要找的零钱于某个硬币面额一致，那么答案便是只需要一个该硬币。\n\n如果面额并不匹配，那么便有了几种选择。可以是原始所需找零减去1个美分后的值再求最小值，也可以是减去5美分后的值求最小值...等等。因此，原始所需找零的最小硬币数可以用下面的算法来计算：\n$numCoins=min(1+numCoins(originalamount−1),1+numCoins(originalamount−5)1+numCoins(originalamount−10),1+numCoins(originalamount−25))$\n实现代码如代码7所示。在第三行中检测了约束条件，即试图用一个硬币来实现找零。如果没有找到恰好对应找零的硬币，则进行上述递归调用。行6使用列表表达式来过滤出那些比当前所需找零值面额更小的硬币。该递归调用也对所需找零值减去了选用的硬币面额。行7进行了递归调用。质疑到，在同一行对硬币总数进行了+1，因为使用了一个硬币。在递归调用满足约束条件时，也要加1。\n\n**代码7**\n```Python\ndef recMC(coinValueList,change):\n   minCoins = change\n   if change in coinValueList:\n     return 1\n   else:\n      for i in [c for c in coinValueList if c <= change]:\n         numCoins = 1 + recMC(coinValueList,change-i)\n         if numCoins < minCoins:\n            minCoins = numCoins\n   return minCoins\n\nprint(recMC([1,5,10,25],63))\n```\n代码7的问题过于低效。实际上，它需要67，716，925次递归调用来找出4中硬币时找零63美分的最优解。为了理解该算法的致命缺陷，请看图5，它演示了找零26美分所需的377次函数调用的一小部分。\n\n图像中的每一个节点对应一个recMC的调用。节点的标签表示当前正计算的找零数，箭头上的数字表示所使用的硬币。沿着图像走，可以找到实现图像中任意一点所需要的列表组合。最重要的问题是，进行了太多重复计算。比如说，该算法为15美分至少要重新计算3次。每次计算15美分的组合都需要52次函数调用。显然这里浪费了太多时间和资源来计算已有的结果。\n\n![image](http://interactivepython.org/courselib/static/pythonds/_images/callTree.png)\n\n减少工作量的关键在于储存一些已经计算过的结果。一个简单的解决方法是将硬币找零最小数存储在一个表哥中。当进行一次新的最小值计算之前，先在表格中检测一下是否是已知的结果。如果是表中已经有的，那么直接只用表中的结果而不是重新计算。可执行代码1给出了结合表格查询机制后的改进算法。\n\n**可执行代码1**\n```Python\ndef recDC(coinValueList,change,knownResults):\n   minCoins = change\n   if change in coinValueList:\n      knownResults[change] = 1\n      return 1\n   elif knownResults[change] > 0:\n      return knownResults[change]\n   else:\n       for i in [c for c in coinValueList if c <= change]:\n         numCoins = 1 + recDC(coinValueList, change-i,\n                              knownResults)\n         if numCoins < minCoins:\n            minCoins = numCoins\n            knownResults[change] = minCoins\n   return minCoins\n\nprint(recDC([1,5,10,25],63,[0]*64))\n\n```\n注意在行6检测了在表格中是否已经有计算好的结果。如果没有，便调用递归算法来计算该最小值并将其存储在表格中。使用这种改进的方法，可以将4种硬币，找零63美分的情况递归调用次数降低至221次。\n\n尽管可执行代码1是正确的，但它看起来有点奇怪，并且可以发现knownResults有很多地方还是空的。实际上，刚才的操作并不算是动态规划，仅仅是通过“缓存”技术提升了程序的性能。\n\n真正的动态规划会使用更加系统的方法来解决该问题。动态规划解法应是从1美分开始，然后逐步系统性地推导出所需找零。这可以保证，在算法中的每一步都已经知道比当前找零数更小的所需硬币数。\n\n考虑如何为找零11美分填制最小硬币数表，如图4所示。从1美分开始，唯一解是1个1美分的硬币。下一行给出了1美分和2美分的最小值。同样的，唯一解是2个1美分。第五行开始变得有趣起来了。现在有两种方法了，5个1美分或者1个5美分。如何选择最优的？通过查表发现为4美分进行找零所需硬币数是4，需要加1才能变为5美分，因此需要5个1美分。或者根据0美分加1个5美分的思路来得到5美分，那么答案是1。因为1和5的中取最小值为1，那么在表格中存储1即可。接着快速向表格末端前进，该考虑11美分了。如图5所示，有3个选项可供考虑。\n\n1. 1个1美分加上 11 - 1 = 10 美分的最小值（1）；\n2. 1个5美分加上 11 - 5 = 6 美分的最小值（2）；\n3. 1个10美分加上 11 - 10 = 1 美分的最小值（1）；\n\n1和3都会给出11美分找零所需的最小硬币数，即2。\n\n![image](http://interactivepython.org/courselib/static/pythonds/_images/changeTable.png)\n![image](http://interactivepython.org/courselib/static/pythonds/_images/elevenCents.png)\n\n代码8是解决找零问题的一种动态规划算法。dpMakeChange接受3个参数：可用硬币面额列表，找零值，每个找零值所需硬币数的列表。当函数运行完毕时，minCoins中会包含从0到change的所有找零所需要的硬币数。\n\n**代码8**\n```Python\ndef dpMakeChange(coinValueList,change,minCoins):\n   for cents in range(change+1):\n      coinCount = cents\n      for j in [c for c in coinValueList if c <= cents]:\n            if minCoins[cents-j] + 1 < coinCount:\n               coinCount = minCoins[cents-j]+1\n      minCoins[cents] = coinCount\n   return minCoins[change]\n```\n注意，dpMakeChange并不是一个递归函数，虽然在一开始给出了本问题的递归解。这是非常重要的一点：虽然可以写出递归解法，但该解法并不一定就是最优或者最有效率的解。该函数的大部分工作内容是通过行4开始的迭代完成的。在该迭代中，考虑了由cents制定的找零数的所有可能的硬币面值。就像前例中11美分的例子一样，将最优解存储在列表minCoins中。\n\n虽说以上程序在找出最小硬币数上完成得很好，然而它并不能真的用来对换硬币，因为它没有跟踪使用了的硬币。通过存储每次为minCoins表格添加数据时所使用的最后一个硬币，便可以实现dpMakeChange对所使用的硬币的跟踪。如果知道最后一个加入的硬币，便可以根据找零值减去该硬币的币值所得到值在表中进行查询，从而进行找零。可以一直沿着表格往回追溯直到起点。\n\n可执行代码2给出了改进的dpMakechange算法，它实现了追踪所使用的硬币，此外还有一个函数printCoins回溯表格来打印出使用的硬币的值。该算法也可以用于某共的朋友。main的前两行设置了要转换的量并且创建了可用硬币的列表。接下来两行创建了用来存储结果的列表。coinsUsed即是找零所用的列表，coinCount是表中相应位置处找零所用的最少硬币数。\n\n注意\n\n\n\n\n\n\n\n\n",[[1527176566803,["Re@Re.local",[[1,27186,"da"]],[27186,27186],[27188,27188]]],[1527176567535,["Re@Re.local",[[-1,27186,"da"]],[27188,27188],[27186,27186]]],[1527176574209,["Re@Re.local",[[1,27186,"打印出来的硬币直接"]],[27186,27186],[27195,27195]]],[1527176575199,["Re@Re.local",[[-1,27191,"硬币直接"]],[27195,27195],[27191,27191]]],[1527176598863,["Re@Re.local",[[1,27191,"硬币是直接来源于coinUsed数组的。在第一调用"]],[27191,27191],[27216,27216]]],[1527176600918,["Re@Re.local",[[-1,27212,"第一调用"]],[27216,27216],[27212,27212]]],[1527176603278,["Re@Re.local",[[1,27212,"第一次调用"]],[27212,27212],[27217,27217]]],[1527176621901,["Re@Re.local",[[-1,27211,"在第一次调用"]],[27217,27217],[27211,27211]]],[1527176678969,["Re@Re.local",[[1,27211,"第一次调用时，从数组的63"]],[27211,27211],[27224,27224]]],[1527176685995,["Re@Re.local",[[1,27224,"位置开始，并打印除21，"]],[27224,27224],[27236,27236]]],[1527176687857,["Re@Re.local",[[-1,27232,"除21，"]],[27236,27236],[27232,27232]]],[1527176690663,["Re@Re.local",[[1,27232,"出21，"]],[27232,27232],[27236,27236]]],[1527176691682,["Re@Re.local",[[-1,27235,"，"]],[27236,27236],[27235,27235]]],[1527176698561,["Re@Re.local",[[1,27235,"。然后的"]],[27235,27235],[27239,27239]]],[1527176699293,["Re@Re.local",[[-1,27235,"。然后的"]],[27239,27239],[27235,27235]]],[1527176700376,["Re@Re.local",[[1,27235,"，"]],[27235,27235],[27236,27236]]],[1527176700851,["Re@Re.local",[[-1,27235,"，"]],[27236,27236],[27235,27235]]],[1527176714514,["Re@Re.local",[[1,27235,"。然后得到63-21=42，在列表中查询第42个元素。"]],[27235,27235],[27262,27262]]],[1527176968433,["Re@Re.local",[[1,27262,"找"]],[27262,27262],[27263,27263]]],[1527176968502,["Re@Re.local",[[-1,27262,"找"]],[27263,27263],[27262,27262]]],[1527176969759,["Re@Re.local",[[1,27262,"一旦"]],[27262,27262],[27264,27264]]],[1527176970480,["Re@Re.local",[[-1,27262,"一旦"]],[27264,27264],[27262,27262]]],[1527176982199,["Re@Re.local",[[1,27262,"同样地，在那里找到的是21"]],[27262,27262],[27275,27275]]],[1527176984455,["Re@Re.local",[[-1,27272,"是21"]],[27275,27275],[27272,27272]]],[1527176992179,["Re@Re.local",[[1,27275,"21，在"]],[27275,27275],[27279,27279]]],[1527176992436,["Re@Re.local",[[-1,27277,"，在"]],[27279,27279],[27277,27277]]],[1527177002967,["Re@Re.local",[[1,27277,"。最后，21"]],[27277,27277],[27283,27283]]],[1527177003537,["Re@Re.local",[[-1,27281,"21"]],[27283,27283],[27281,27281]]],[1527177004563,["Re@Re.local",[[1,27281,"列表"]],[27281,27281],[27283,27283]]],[1527177004837,["Re@Re.local",[[-1,27281,"列表"]],[27283,27283],[27281,27281]]],[1527177009663,["Re@Re.local",[[1,27281,"数组的第21号元素"]],[27281,27281],[27290,27290]]],[1527177011452,["Re@Re.local",[[-1,27286,"1号元素"]],[27290,27290],[27286,27286]]],[1527177014977,["Re@Re.local",[[1,27286,"1个元素也是"]],[27286,27286],[27292,27292]]],[1527177017099,["Re@Re.local",[[-1,27287,"个元素也是"]],[27292,27292],[27287,27287]]],[1527177022355,["Re@Re.local",[[1,27287,"号元素也是21"]],[27287,27287],[27294,27294]]],[1527177026465,["Re@Re.local",[[-1,27290,"也是21"]],[27294,27294],[27290,27290]]],[1527177031733,["Re@Re.local",[[1,27290,"也是21，那么最后的"]],[27290,27290],[27300,27300]]],[1527177032961,["Re@Re.local",[[-1,27297,"最后的"]],[27300,27300],[27297,27297]]],[1527177034018,["Re@Re.local",[[1,27297,"解"]],[27297,27297],[27298,27298]]],[1527177034085,["Re@Re.local",[[-1,27297,"解"]],[27298,27298],[27297,27297]]],[1527177038747,["Re@Re.local",[[1,27297,"最终结果就是3个31"]],[27297,27297],[27307,27307]]],[1527177039426,["Re@Re.local",[[-1,27305,"31"]],[27307,27307],[27305,27305]]],[1527177043406,["Re@Re.local",[[1,27305,"21美分的硬币了。"]],[27305,27305],[27314,27314]]],[1527177043695,["Re@Re.local",[[1,27323,"\n"]],[27314,27314],[27315,27315]]],[1527177043881,["Re@Re.local",[[1,27324,"\n"]],[27315,27315],[27316,27316]]],[1527177105829,[null,[[-1,27272,"\n\n\n"],[1,27275,"硬币是"],[1,27314,"\n\n\n"]],[27272,27272],[27317,27317]]],[1527177105830,[null,[[1,27272,"\n\n\n"],[-1,27272,"硬币是"],[-1,27314,"\n\n\n"]],[27317,27317],[27272,27272]]],[1527177057600,["Re@Re.local",[[1,27316,"def dpMakeChange(coinValueList,change,minCoins,coinsUsed):\n   for cents in range(change+1):\n      coinCount = cents\n      newCoin = 1\n      for j in [c for c in coinValueList if c <= cents]:\n            if minCoins[cents-j] + 1 < coinCount:\n               coinCount = minCoins[cents-j]+1\n               newCoin = j\n      minCoins[cents] = coinCount\n      coinsUsed[cents] = newCoin\n   return minCoins[change]\n\ndef printCoins(coinsUsed,change):\n   coin = change\n   while coin > 0:\n      thisCoin = coinsUsed[coin]\n      print(thisCoin)\n      coin = coin - thisCoin\n\ndef main():\n    amnt = 63\n    clist = [1,5,10,21,25]\n    coinsUsed = [0]*(amnt+1)\n    coinCount = [0]*(amnt+1)\n\n    print(\"Making change for\",amnt,\"requires\")\n    print(dpMakeChange(clist,amnt,coinCount,coinsUsed),\"coins\")\n    print(\"They are:\")\n    printCoins(coinsUsed,amnt)\n    print(\"The used list is as follows:\")\n    print(coinsUsed)\n\nmain()\n"]],[27316,27316],[28229,28229]]],[1527177058245,["Re@Re.local",[[-1,27316,"def dpMakeChange(coinValueList,change,minCoins,coinsUsed):\n   for cents in range(change+1):\n      coinCount = cents\n      newCoin = 1\n      for j in [c for c in coinValueList if c <= cents]:\n            if minCoins[cents-j] + 1 < coinCount:\n               coinCount = minCoins[cents-j]+1\n               newCoin = j\n      minCoins[cents] = coinCount\n      coinsUsed[cents] = newCoin\n   return minCoins[change]\n\ndef printCoins(coinsUsed,change):\n   coin = change\n   while coin > 0:\n      thisCoin = coinsUsed[coin]\n      print(thisCoin)\n      coin = coin - thisCoin\n\ndef main():\n    amnt = 63\n    clist = [1,5,10,21,25]\n    coinsUsed = [0]*(amnt+1)\n    coinCount = [0]*(amnt+1)\n\n    print(\"Making change for\",amnt,\"requires\")\n    print(dpMakeChange(clist,amnt,coinCount,coinsUsed),\"coins\")\n    print(\"They are:\")\n    printCoins(coinsUsed,amnt)\n    print(\"The used list is as follows:\")\n    print(coinsUsed)\n\nmain()\n"]],[28229,28229],[27316,27316]]],[1527177059007,["Re@Re.local",[[1,27316,"···"]],[27316,27316],[27319,27319]]],[1527177059562,["Re@Re.local",[[-1,27316,"···"]],[27319,27319],[27316,27316]]],[1527177061395,["Re@Re.local",[[1,27316,"```Python"]],[27316,27316],[27325,27325]]],[1527177061658,["Re@Re.local",[[1,27334,"\n"]],[27325,27325],[27326,27326]]],[1527177061974,["Re@Re.local",[[1,27326,"def dpMakeChange(coinValueList,change,minCoins,coinsUsed):\n   for cents in range(change+1):\n      coinCount = cents\n      newCoin = 1\n      for j in [c for c in coinValueList if c <= cents]:\n            if minCoins[cents-j] + 1 < coinCount:\n               coinCount = minCoins[cents-j]+1\n               newCoin = j\n      minCoins[cents] = coinCount\n      coinsUsed[cents] = newCoin\n   return minCoins[change]\n\ndef printCoins(coinsUsed,change):\n   coin = change\n   while coin > 0:\n      thisCoin = coinsUsed[coin]\n      print(thisCoin)\n      coin = coin - thisCoin\n\ndef main():\n    amnt = 63\n    clist = [1,5,10,21,25]\n    coinsUsed = [0]*(amnt+1)\n    coinCount = [0]*(amnt+1)\n\n    print(\"Making change for\",amnt,\"requires\")\n    print(dpMakeChange(clist,amnt,coinCount,coinsUsed),\"coins\")\n    print(\"They are:\")\n    printCoins(coinsUsed,amnt)\n    print(\"The used list is as follows:\")\n    print(coinsUsed)\n\nmain()\n"]],[27326,27326],[28239,28239]]],[1527177062212,["Re@Re.local",[[1,28248,"\n"]],[28239,28239],[28240,28240]]],[1527177062938,["Re@Re.local",[[1,28240,"```"]],[28240,28240],[28243,28243]]],[1527177063647,["Re@Re.local",[[1,28252,"\n"]],[28243,28243],[28244,28244]]],[1527177075169,["Re@Re.local",[[1,28244,"**可执行代码2:找零问题的饿"]],[28244,28244],[28259,28259]]],[1527177077078,["Re@Re.local",[[-1,28257,"的饿"]],[28259,28259],[28257,28257]]],[1527177080700,["Re@Re.local",[[1,28257,"的解法**"]],[28257,28257],[28262,28262]]],[1527177081086,["Re@Re.local",[[1,28271,"\n"]],[28262,28262],[28263,28263]]],[1527177081301,["Re@Re.local",[[1,28272,"\n"]],[28263,28263],[28264,28264]]],[1527177088000,["Re@Re.local",[[1,28264,"4.13 总"]],[28264,28264],[28270,28270]]],[1527177089286,["Re@Re.local",[[-1,28264,"4.13 总"]],[28270,28270],[28264,28264]]],[1527177090643,["Re@Re.local",[[1,28264,"## 34."]],[28264,28264],[28270,28270]]],[1527177091380,["Re@Re.local",[[-1,28267,"34."]],[28270,28270],[28267,28267]]],[1527177094069,["Re@Re.local",[[1,28267,"4.13 总结 ##"]],[28267,28267],[28277,28277]]],[1527177094234,["Re@Re.local",[[1,28286,"\n"]],[28277,28277],[28278,28278]]],[1527177095192,["Re@Re.local",[[1,28287,"\n"]],[28278,28278],[28279,28279]]],[1527177097337,["Re@Re.local",[[1,28279,"在贲张，"]],[28279,28279],[28283,28283]]],[1527177098111,["Re@Re.local",[[-1,28280,"贲张，"]],[28283,28283],[28280,28280]]],[1527177099925,["Re@Re.local",[[1,28280,"本章，"]],[28280,28280],[28283,28283]]],[1527177102510,["Re@Re.local",[[-1,28279,"在本章，"]],[28283,28283],[28279,28279]]],[1527177105113,["Re@Re.local",[[1,28279,"本章研究"]],[28279,28279],[28283,28283]]],[1527177166190,[null,[[-1,27272,"\n\n\n"],[1,27275,"硬币是"],[1,28283,"\n\n\n"]],[27272,27272],[28286,28286]]],[1527177166191,[null,[[1,27272,"\n\n\n"],[-1,27272,"硬币是"],[-1,28283,"\n\n\n"]],[28286,28286],[27272,27272]]],[1527177156132,["Re@Re.local",[[1,28284,"几种递归算法。这些算法用于向读者展示几种递归算法可以有效觉得"]],[28284,28284],[28314,28314]]],[1527177157245,["Re@Re.local",[[-1,28312,"觉得"]],[28314,28314],[28312,28312]]],[1527177165401,["Re@Re.local",[[1,28312,"解决的问题。本章的"]],[28312,28312],[28321,28321]]],[1527177225900,[null,[[-1,27272,"\n\n\n"],[1,27275,"硬币是"],[-1,28283,"\n"],[1,28284,"了"],[1,28321,"\n\n\n\n"]],[27272,27272],[28325,28325]]],[1527177225900,[null,[[1,27272,"\n\n\n"],[-1,27272,"硬币是"],[1,28283,"\n"],[-1,28283,"了"],[-1,28321,"\n\n\n\n"]],[28325,28325],[27272,27272]]],[1527177167189,["Re@Re.local",[[1,28323,"为："]],[28323,28323],[28325,28325]]],[1527177167780,["Re@Re.local",[[1,28334,"\n"]],[28325,28325],[28326,28326]]],[1527177168001,["Re@Re.local",[[1,28335,"\n"]],[28326,28326],[28327,28327]]],[1527177169768,["Re@Re.local",[[1,28327,"- 。"]],[28327,28327],[28330,28330]]],[1527177170304,["Re@Re.local",[[-1,28328," 。"]],[28330,28330],[28328,28328]]],[1527177171458,["Re@Re.local",[[1,28328,"。 "]],[28328,28328],[28330,28330]]],[1527177171869,["Re@Re.local",[[-1,28328,"。 "]],[28330,28330],[28328,28328]]],[1527177172615,["Re@Re.local",[[1,28328,". "]],[28328,28328],[28330,28330]]],[1527177177088,["Re@Re.local",[[-1,28327,"-. "]],[28330,28330],[28327,28327]]],[1527177179141,["Re@Re.local",[[1,28327,"- 为"]],[28327,28327],[28330,28330]]],[1527177179359,["Re@Re.local",[[-1,28329,"为"]],[28330,28330],[28329,28329]]],[1527177184380,["Re@Re.local",[[1,28329,"递归算法必须有约束条件。"]],[28329,28329],[28341,28341]]],[1527177184754,["Re@Re.local",[[1,28350,"\n"]],[28341,28341],[28342,28342]]],[1527177191159,["Re@Re.local",[[1,28342,"- 递归算法必须"]],[28342,28342],[28350,28350]]],[1527177194338,["Re@Re.local",[[1,28340,"不断"]],[28340,28340],[28342,28342]]],[1527177197123,["Re@Re.local",[[-1,28338,"条件不断"]],[28342,28342],[28338,28338]]],[1527177198267,["Re@Re.local",[[1,28338,"条件"]],[28338,28338],[28340,28340]]],[1527177201909,["Re@Re.local",[[1,28350,"改变其"]],[28350,28350],[28353,28353]]],[1527177206177,["Re@Re.local",[[-1,28352,"其"]],[28353,28353],[28352,28352]]],[1527177224847,["Re@Re.local",[[1,28352,"当前状态并向约束条件靠近。"]],[28352,28352],[28365,28365]]],[1527177225135,["Re@Re.local",[[1,28374,"\n"]],[28365,28365],[28366,28366]]],[1527177225442,["Re@Re.local",[[1,28375,"\n"]],[28366,28366],[28367,28367]]],[1527177285920,[null,[[-1,27272,"\n\n\n"],[1,27275,"硬币是"],[-1,28283,"\n"],[1,28284,"了"],[-1,28321,"\n\n"],[1,28323,"重点"],[1,28370,"\n\n\n\n\n\n"]],[27272,27272],[28376,28376]]],[1527177285920,[null,[[1,27272,"\n\n\n"],[-1,27272,"硬币是"],[1,28283,"\n"],[-1,28283,"了"],[1,28321,"\n\n"],[-1,28321,"重点"],[-1,28370,"\n\n\n\n\n\n"]],[28376,28376],[27272,27272]]],[1527177236701,["Re@Re.local",[[1,28367," 递归算法必须递归地调用其本身。"]],[28367,28367],[28383,28383]]],[1527177237013,["Re@Re.local",[[1,28392,"\n"]],[28383,28383],[28384,28384]]],[1527177254851,["Re@Re.local",[[1,28384,"- 递归算法有时可以替代迭代算法。"]],[28384,28384],[28401,28401]]],[1527177255115,["Re@Re.local",[[1,28410,"\n"]],[28401,28401],[28402,28402]]],[1527177281214,["Re@Re.local",[[1,28402,"- 递归算法通常与求"]],[28402,28402],[28412,28412]]],[1527177281331,["Re@Re.local",[[-1,28411,"求"]],[28412,28412],[28411,28411]]],[1527177283817,["Re@Re.local",[[1,28411,"所求问题的"]],[28411,28411],[28416,28416]]],[1527177345917,[null,[[-1,27272,"\n\n\n"],[1,27275,"硬币是"],[-1,28283,"\n"],[1,28284,"了"],[-1,28321,"\n\n"],[1,28323,"重点"],[-1,28366,"\n"],[1,28367,"-"],[1,28419,"\n\n\n\n\n\n"]],[27272,27272],[28425,28425]]],[1527177345917,[null,[[1,27272,"\n\n\n"],[-1,27272,"硬币是"],[1,28283,"\n"],[-1,28283,"了"],[1,28321,"\n\n"],[-1,28321,"重点"],[1,28366,"\n"],[-1,28366,"-"],[-1,28419,"\n\n\n\n\n\n"]],[28425,28425],[27272,27272]]],[1527177293024,["Re@Re.local",[[1,28418,"表达有相似之处。"]],[28418,28418],[28426,28426]]],[1527177302350,["Re@Re.local",[[1,28435,"\n"]],[28426,28426],[28427,28427]]],[1527177303211,["Re@Re.local",[[1,28427,"- "]],[28427,28427],[28429,28429]]],[1527177308429,["Re@Re.local",[[-1,28420,"有相似之处"]],[28425,28425],[28420,28420]]],[1527177312085,["Re@Re.local",[[1,28420,"自然地契合"]],[28420,28420],[28425,28425]]],[1527177334803,["Re@Re.local",[[1,28429,"递归算法并不是万能的。有时递归算法的开销"]],[28429,28429],[28449,28449]]],[1527177335106,["Re@Re.local",[[-1,28447,"开销"]],[28449,28449],[28447,28447]]],[1527177340839,["Re@Re.local",[[1,28447,"计算资源开销会比其它可以"]],[28447,28447],[28459,28459]]],[1527177341112,["Re@Re.local",[[-1,28457,"可以"]],[28459,28459],[28457,28457]]],[1527177343022,["Re@Re.local",[[1,28457,"算法高。"]],[28457,28457],[28461,28461]]],[1527177343322,["Re@Re.local",[[1,28470,"\n"]],[28461,28461],[28462,28462]]],[1527177343587,["Re@Re.local",[[1,28471,"\n"]],[28462,28462],[28463,28463]]],[1527177344743,["Re@Re.local",[[1,28463,"4."]],[28463,28463],[28465,28465]]],[1527177345274,["Re@Re.local",[[-1,28463,"4."]],[28465,28465],[28463,28463]]]]]]}